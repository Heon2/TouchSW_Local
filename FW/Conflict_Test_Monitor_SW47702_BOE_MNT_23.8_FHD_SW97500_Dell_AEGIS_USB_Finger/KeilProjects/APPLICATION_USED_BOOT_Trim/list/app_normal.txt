; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\app_normal.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\app_normal.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\syscfg -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -D_USE_WITH_BOOT_ --wchar32 --omf_browse=.\bin\app_normal.crf ..\..\App\app_normal.c]
                          THUMB

                          AREA ||i.app_normal_Init||, CODE, READONLY, ALIGN=2

                  app_normal_Init PROC
;;;63     
;;;64     void app_normal_Init(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;67     	sptAlgorithmInfo = algorithm_GetInfo();
000002  f7fffffe          BL       algorithm_GetInfo
000006  4c04              LDR      r4,|L1.24|
;;;68     #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;69     
;;;70     #if USED_NOISE_HOPPING_FREQ
;;;71     	thisCommonConf   = app_GetCommonConfig();
000008  60a0              STR      r0,[r4,#8]  ; sptAlgorithmInfo
00000a  f7fffffe          BL       app_GetCommonConfig
;;;72     #endif
;;;73     	thisInfo         = algorithm_GetInfo();
00000e  6060              STR      r0,[r4,#4]  ; thisCommonConf
000010  f7fffffe          BL       algorithm_GetInfo
000014  60e0              STR      r0,[r4,#0xc]  ; thisInfo
;;;74     #if USED_PEN_MODE_OPERATION
;;;75     	app_normal_Init_param();
;;;76     #endif
;;;77     }
000016  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  |L1.24|
                          DCD      ||.data||

                          AREA ||i.app_normal_oper_handler||, CODE, READONLY, ALIGN=2

                  app_normal_oper_handler PROC
;;;89     
;;;90     eTouchOperMainState_t app_normal_oper_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;91     {
000004  b08d              SUB      sp,sp,#0x34
;;;92     	eTouchOperMainState_t main_state;
;;;93     	eNormalOperSubState_t sub_state;
;;;94     	eProtocolMode_t currMode, prevMode = M_TOUCH_NORMAL;
000006  2600              MOVS     r6,#0
;;;95     	bool_t bLoop = YES;
000008  f04f0801          MOV      r8,#1
00000c  f7fffffe          BL       algorithm_GetInfo
000010  f8df93d4          LDR      r9,|L2.1000|
000014  f8c90008          STR      r0,[r9,#8]  ; sptAlgorithmInfo
000018  f7fffffe          BL       app_GetCommonConfig
00001c  f8c90004          STR      r0,[r9,#4]  ; thisCommonConf
000020  f7fffffe          BL       algorithm_GetInfo
000024  4601              MOV      r1,r0
;;;96     	app_normal_Init();
;;;97     #if USED_PEN_MODE_OPERATION
;;;98     	Interrupt_Init();
;;;99     #endif /* USED_PEN_MODE_OPERATION */
;;;100    
;;;101    	main_state = TOUCH_MAIN_OPERATION_NORMAL;
;;;102    	sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;103    	thisInfo->bDiagMode = NO;
000026  f5015180          ADD      r1,r1,#0x1000
00002a  2700              MOVS     r7,#0
00002c  f8c9000c          STR      r0,[r9,#0xc]  ; thisInfo
000030  f8817026          STRB     r7,[r1,#0x26]
;;;104    
;;;105        while(bLoop)
;;;106        {
;;;107    		custom_tool = 0;
000034  49ed              LDR      r1,|L2.1004|
000036  f04f0b01          MOV      r11,#1                ;101
00003a  465c              MOV      r4,r11                ;102
00003c  700f              STRB     r7,[r1,#0]
00003e  468a              MOV      r10,r1
000040  e01e              B        |L2.128|
000042  bf00              NOP      
                  |L2.68|
000044  f88a7000          STRB     r7,[r10,#0]
;;;108    
;;;109        	switch(sub_state)
000048  2c1c              CMP      r4,#0x1c
00004a  f0808157          BCS.W    |L2.764|
00004e  e8dff004          TBB      [pc,r4]
000052  8517              DCB      0x85,0x17
000054  60313d49          DCB      0x60,0x31,0x3d,0x49
000058  6a858581          DCB      0x6a,0x85,0x85,0x81
00005c  85858585          DCB      0x85,0x85,0x85,0x85
000060  868b8585          DCB      0x86,0x8b,0x85,0x85
000064  abb0fefd          DCB      0xab,0xb0,0xfe,0xfd
000068  fc858585          DCB      0xfc,0x85,0x85,0x85
00006c  85fb              DCB      0x85,0xfb
00006e  bf00              NOP                            ;107
                  |L2.112|
000070  f88a7000          STRB     r7,[r10,#0]           ;107
000074  e01e              B        |L2.180|
000076  bf00              NOP                            ;107
                  |L2.120|
000078  f88a7000          STRB     r7,[r10,#0]           ;107
00007c  f000b98c          B.W      |L2.920|
                  |L2.128|
;;;110        	{
;;;111    			case TOUCH_NORMAL_OPER_ENTER:
;;;112    			{
;;;113    				TEST_LOCAL_STATE = 0;
;;;114    #if USED_S3_MODE_FUNCTION
;;;115    				/*
;;;116    				 * LCD ON Signal이 Low를 정해진 시간 유지 하면.. S3모드로 진입한다.
;;;117    				 */
;;;118    				if(module_Init_Signal() == NO)
;;;119    				{
;;;120    					protocol_swip_SetMode(M_TOUCH_LPWG);
;;;121    					break;
;;;122    				}
;;;123    				module_start_delay();
;;;124    #else /* USED_S3_MODE_FUNCTION */
;;;125    
;;;126    	#if USED_SMT_OP_MODE
;;;127    				if(module_Check_SMT_Mode())
000080  f8c97010          STR      r7,[r9,#0x10]  ; TEST_LOCAL_STATE
000084  f7fffffe          BL       module_Check_SMT_Mode
000088  b120              CBZ      r0,|L2.148|
;;;128    				{
;;;129    					module_Enter_SMT_Mode();
00008a  f7fffffe          BL       module_Enter_SMT_Mode
;;;130    					sub_state = TOUCH_NORMAL_SMT_MODE;
00008e  2402              MOVS     r4,#2
;;;131    					break;
000090  f000b934          B.W      |L2.764|
                  |L2.148|
;;;132    				}
;;;133    	#endif /* USED_SMT_OP_MODE */
;;;134    				GPIO_Initialize();
000094  f7fffffe          BL       GPIO_Initialize
;;;135    
;;;136    	#if USED_MNT_S3_MODE_FUNCTION
;;;137    				if(module_Init_Signal())
000098  f7fffffe          BL       module_Init_Signal
00009c  b388              CBZ      r0,|L2.258|
;;;138    				{
;;;139    					HAL_SetSensingMode(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
00009e  f2410003          MOV      r0,#0x1003
0000a2  f7fffffe          BL       HAL_SetSensingMode
;;;140    				}
;;;141    				else
;;;142    				{
;;;143    					HAL_SetSensingMode(SM_S3_ACTIVE_MODE);
;;;144    					sub_state = TOUCH_NORMAL_OPER_RESET_SYSTEM;
;;;145    					break;
;;;146    				}
;;;147    
;;;148    				currMode = protocol_swip_GetMode();
0000a6  f7fffffe          BL       protocol_swip_GetMode
;;;149    				if(currMode == M_TOUCH_DFUP)
0000aa  2802              CMP      r0,#2
0000ac  f0008126          BEQ.W    |L2.764|
;;;150    				{
;;;151    					break;
;;;152    				}
;;;153    
;;;154    				module_start_delay();
0000b0  f7fffffe          BL       module_start_delay
                  |L2.180|
;;;155    	#else
;;;156    				module_Init_Signal();
;;;157    				currMode = protocol_swip_GetMode();
;;;158    				if(currMode == M_TOUCH_DFUP)
;;;159    				{
;;;160    					break;
;;;161    				}
;;;162    				module_start_delay();
;;;163    	#endif
;;;164    #endif /* USED_S3_MODE_FUNCTION */
;;;165    			}
;;;166    			/* no break */
;;;167    			case TOUCH_NORMAL_OPER_RESET_SYSTEM:
;;;168    			{
;;;169    				if(PARAM_GetMode() != PARAM_MODE_NORMAL)
0000b4  f7fffffe          BL       PARAM_GetMode
0000b8  b130              CBZ      r0,|L2.200|
;;;170    				{
;;;171    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;172    					PARAM_SetMode(PARAM_MODE_NORMAL);
;;;173    #else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN) */
;;;174    					PARAM_SetMode(PARAM_MODE_NORMAL_1);
0000ba  2001              MOVS     r0,#1
0000bc  f7fffffe          BL       PARAM_SetMode
;;;175    #endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN) */
;;;176    					PARAM_InitConfig();
0000c0  f7fffffe          BL       PARAM_InitConfig
;;;177    					algorithm_init();
0000c4  f7fffffe          BL       algorithm_init
                  |L2.200|
;;;178    #if (USED_PEN_MODE_OPERATION)
;;;179    					algorithm_local_init(); //code
;;;180    					algorithm_init_local(); //DSP
;;;181    	#if (USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL || USED_DSPA_FUNC_FOR_FINGER)
;;;182    					algorithm_init_dspA();
;;;183    	#endif
;;;184    #else
;;;185    	#if (USED_DSPA_FUNC_FOR_FINGER)
;;;186    					algorithm_init_dspA();
;;;187    	#endif					
;;;188    #endif /* (USED_PEN_MODE_OPERATION) */
;;;189    				}
;;;190    				SensingBufferInit();
0000c8  f7fffffe          BL       SensingBufferInit
;;;191    			}
;;;192    			/* no break */
;;;193    			case TOUCH_NORMAL_OPER_RESET_HAL:
;;;194    			{
;;;195    #ifdef MODE_WDT
;;;196    				module_Watch_Enable();
0000cc  f7fffffe          BL       module_Watch_Enable
;;;197    #endif /* MODE_WDT */
;;;198    #if USED_MNT_S3_MODE_FUNCTION
;;;199    				if(IS_S3_MODE(HAL_GetSensingMode()))
0000d0  f7fffffe          BL       HAL_GetSensingMode
0000d4  f4106000          ANDS     r0,r0,#0x800
;;;200    				{
;;;201    					HAL_ConfigInit(YES);
0000d8  bf18              IT       NE
0000da  2001              MOVNE    r0,#1
;;;202    				}
;;;203    				else
;;;204    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;205    				{
;;;206    					HAL_ConfigInit(NO);
0000dc  f7fffffe          BL       HAL_ConfigInit
;;;207    				}
;;;208    				MODULE_Initialize();
0000e0  f7fffffe          BL       MODULE_Initialize
;;;209    			}
;;;210    			/* no break */
;;;211    			case TOUCH_NORMAL_OPER_RESET_MODULE:
;;;212    			{
;;;213    				if(!module_Start()) // TODO : return占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙 TRUE占싱댐옙.. 占쏙옙占쏙옙占쏙옙 占싣뤄옙 占쏙옙틴占쏙옙 타占쏙옙 占실놂옙...
0000e4  f7fffffe          BL       module_Start
0000e8  2800              CMP      r0,#0
0000ea  d051              BEQ      |L2.400|
;;;214    				{
;;;215    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;216    					break;
;;;217    				}
;;;218    
;;;219    #if USED_RAWDATA_TUNE_CALIBRATION
;;;220    				sub_state = TOUCH_NORMAL_OPER_NORMAL_RAWDATA_CALIBRATION;
;;;221    #else /* USED_RAWDATA_TUNE_CALIBRATION */
;;;222    #if USED_MNT_S3_MODE_FUNCTION
;;;223    				if(IS_S3_MODE(HAL_GetSensingMode()))
0000ec  f7fffffe          BL       HAL_GetSensingMode
0000f0  f4106f00          TST      r0,#0x800
;;;224    				{
;;;225    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_S3;
;;;226    				}
;;;227    				else
;;;228    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;229    				{
;;;230    #if USED_PEN_MODE_OPERATION
;;;231    					sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;232    #else /* USED_PEN_MODE_OPERATION */
;;;233    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
0000f4  bf0a              ITET     EQ
0000f6  2406              MOVEQ    r4,#6
0000f8  2409              MOVNE    r4,#9                 ;225
;;;234    #endif /* USED_PEN_MODE_OPERATION */
;;;235    
;;;236    #if USED_RUNTIME_LOCAL_TUNE_RAWDATA
;;;237    					SRIC_RawDataLocalRuntimeCalibration();
0000fa  f7fffffe          BLEQ     SRIC_RawDataLocalRuntimeCalibration
0000fe  f000b8fd          B.W      |L2.764|
                  |L2.258|
000102  e7ff              B        |L2.260|
                  |L2.260|
000104  f6400001          MOV      r0,#0x801             ;143
000108  f7fffffe          BL       HAL_SetSensingMode
00010c  2403              MOVS     r4,#3                 ;144
00010e  f000b8f5          B.W      |L2.764|
;;;238    #endif /* USED_RUNTIME_LOCAL_TUNE_RAWDATA */
;;;239    				}
;;;240    #endif /* USED_RAWDATA_TUNE_CALIBRATION */
;;;241    				break;
;;;242    			}
;;;243    
;;;244    #if USED_SMT_OP_MODE
;;;245    			case TOUCH_NORMAL_SMT_MODE:
;;;246    			{
;;;247    				if(module_Check_SMT_Mode() == NO)
000112  f7fffffe          BL       module_Check_SMT_Mode
000116  b118              CBZ      r0,|L2.288|
;;;248    				{
;;;249    					module_Exit_SMT_Mode();
;;;250    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;251    					break;
;;;252    				}
;;;253    				module_SignalOut_SMT_Mode();
000118  f7fffffe          BL       module_SignalOut_SMT_Mode
;;;254    				break;
00011c  f000b8ee          B.W      |L2.764|
                  |L2.288|
000120  f7fffffe          BL       module_Exit_SMT_Mode
000124  e034              B        |L2.400|
;;;255    			}
;;;256    #endif /* USED_SMT_OP_MODE */
;;;257    
;;;258    			case TOUCH_NORMAL_OPER_RESET_REFERENCE:
;;;259    			{
;;;260    #if USED_NOISE_HOPPING_FREQ
;;;261    				if (thisCommonConf->bUseFreqHopp)
000126  f8d90004          LDR      r0,[r9,#4]  ; thisCommonConf
00012a  7e41              LDRB     r1,[r0,#0x19]
00012c  b149              CBZ      r1,|L2.322|
;;;262    				{
;;;263    					module_Switch_Freq(thisCommonConf->HoppFreq1);
00012e  7ec0              LDRB     r0,[r0,#0x1b]
000130  f7fffffe          BL       module_Switch_Freq
;;;264    					algorithm_baseline_tracking_initial();
000134  f7fffffe          BL       algorithm_baseline_tracking_initial
;;;265    
;;;266    					module_Switch_Freq(thisCommonConf->MainFreq);
000138  f8d90004          LDR      r0,[r9,#4]  ; thisCommonConf
00013c  7e80              LDRB     r0,[r0,#0x1a]
00013e  f7fffffe          BL       module_Switch_Freq
                  |L2.322|
;;;267    				}
;;;268    				algorithm_baseline_tracking_initial();
000142  f7fffffe          BL       algorithm_baseline_tracking_initial
;;;269    #else
;;;270    //				if(module_Switch_Freq(thisCommonConf->MainFreq))
;;;271    				{
;;;272    					algorithm_baseline_tracking_initial();
;;;273    				}
;;;274    #endif
;;;275    				thisInfo->bLineFilterRepeatCheck = 0;
000146  f8d9000c          LDR      r0,[r9,#0xc]  ; thisInfo
00014a  f5005080          ADD      r0,r0,#0x1000
00014e  f8807179          STRB     r7,[r0,#0x179]
;;;276    
;;;277    #if USED_PEN_MODE_OPERATION
;;;278    				sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;279    #else /* USED_PEN_MODE_OPERATION */
;;;280    				sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;281    #endif /* USED_PEN_MODE_OPERATION */
;;;282    				break;
000152  e09e              B        |L2.658|
;;;283    			}
;;;284    
;;;285    #if USED_IDLE_MODE_CONTROL
;;;286    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE:
;;;287    			{
;;;288    				algorithm_baseline_tracking_initial_idle(NO);
;;;289    				sub_state = TOUCH_NORMAL_OPER_IDLE;
;;;290    				break;
;;;291    			}
;;;292    #endif /* USED_IDLE_MODE_CONTROL */
;;;293    
;;;294    #if USED_MNT_S3_MODE_FUNCTION
;;;295    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_S3:
;;;296    			{
;;;297    				algorithm_baseline_tracking_initial_S3(NO);
000154  2000              MOVS     r0,#0
000156  f7fffffe          BL       algorithm_baseline_tracking_initial_S3
;;;298    				sub_state = TOUCH_NORMAL_OPER_S3_READY;
00015a  2412              MOVS     r4,#0x12
;;;299    				break;
00015c  e0ce              B        |L2.764|
;;;300    			}
;;;301    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;302    
;;;303    #if (USED_PEN_MODE_OPERATION)
;;;304    			case TOUCH_NORMAL_OPER_READY_REFERENCE_PEN:
;;;305    			{
;;;306    //				GPIO->tGPIO_DATA_1.tBit.GPB10 = 0;
;;;307    //				GPIO->tGPIO_DATA_1.tBit.GPB10 = 1;
;;;308    				if(tHalIntrHandle.ulTSyncInRisingCnt == (LHB_NUM-1))
;;;309    				{
;;;310    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN;
;;;311    				}
;;;312    				break;
;;;313    			}
;;;314    			
;;;315    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN:
;;;316    			{
;;;317    #ifdef MODE_WDT				
;;;318    				KICK_DOG();
;;;319    #endif /* MODE_WDT */
;;;320    				thisInfo->bLineFilterRepeatCheck = 0;
;;;321    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN)
;;;322    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;323    
;;;324    				algorithm_local_baseline_init();
;;;325    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS) == NO)
;;;326    				{
;;;327    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;328    				}
;;;329    
;;;330    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_WACOM);
;;;331    
;;;332    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WAOM) == NO)
;;;333    				{
;;;334    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;335    				}
;;;336    //
;;;337    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_MS);
;;;338    
;;;339    				{
;;;340    					uint16_t ulSkipCnt = 0;
;;;341    				    while(ulSkipCnt < 2)
;;;342    				    {
;;;343    				    	ePartialSensing_t lDataIndex = module_wait_local_sample_done();
;;;344    
;;;345    				    	if(lDataIndex == PARTIAL_MAX)
;;;346    				    	{
;;;347    				    		break;
;;;348    				    	}
;;;349    
;;;350    						if(lDataIndex == LOCAL_OP_LAST_LHB)
;;;351    						{
;;;352    							ulSkipCnt++;
;;;353    						}
;;;354    					}
;;;355    				}
;;;356    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;357    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;358    
;;;359    				algorithm_local_baseline_init();
;;;360    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS) == NO)
;;;361    				{
;;;362    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;363    				}
;;;364    
;;;365    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_WGP);
;;;366    
;;;367    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;368    				{
;;;369    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;370    				}
;;;371    //
;;;372    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_MS);
;;;373    
;;;374    				{
;;;375    					uint16_t ulSkipCnt = 0;
;;;376    				    while(ulSkipCnt < 2)
;;;377    				    {
;;;378    				    	ePartialSensing_t lDataIndex = module_wait_local_sample_done();
;;;379    
;;;380    				    	if(lDataIndex == PARTIAL_MAX)
;;;381    				    	{
;;;382    				    		break;
;;;383    				    	}
;;;384    
;;;385    						if(lDataIndex == LOCAL_OP_LAST_LHB)
;;;386    						{
;;;387    							ulSkipCnt++;
;;;388    						}
;;;389    					}
;;;390    				}
;;;391    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN)
;;;392    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;393    				algorithm_local_baseline_init();
;;;394    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS) == NO)
;;;395    				{
;;;396    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;397    				}
;;;398    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WACOM_PEN)
;;;399    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;400    				algorithm_local_baseline_init();
;;;401    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WACOM) == NO)
;;;402    				{
;;;403    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;404    				}
;;;405    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_PEN)
;;;406    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;407    				algorithm_local_baseline_init();
;;;408    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;409    				{
;;;410    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;411    				}
;;;412    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;413    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;414    				algorithm_local_baseline_init();
;;;415    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;416    				{
;;;417    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;418    				}
;;;419    #endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) */
;;;420    				break;
;;;421    			}
;;;422    
;;;423    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;424    			case TOUCH_NORMAL_OPER_READY_REFERENCE_PEN_IDLE:
;;;425    			{
;;;426    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;427    				break;
;;;428    			}
;;;429    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE:
;;;430    			{
;;;431    				algorithm_baseline_tracking_initial_local_idle(NO);
;;;432    				sub_state = TOUCH_NORMAL_OPER_LOCAL_IDLE;
;;;433    				break;
;;;434    			}
;;;435    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;436    
;;;437    #endif /* (USED_PEN_MODE_OPERATION) */
;;;438    			case TOUCH_NORMAL_OPER_NORMAL_READY:
;;;439    			{
;;;440    //				HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_SEARCH_MODE);
;;;441    #if USED_IDLE_MODE_CONTROL
;;;442    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;443    #endif /* USED_IDLE_MODE_CONTROL */
;;;444    //				tHalIntrHandle.ulInitFirstFrame = 0;
;;;445    				sub_state = TOUCH_NORMAL_OPER_NORMAL;
00015e  240f              MOVS     r4,#0xf
;;;446    #if USED_ECLK_ON_OFF_CONTROL
;;;447    				HAL_SetECLKOnOffControl(YES);
000160  2001              MOVS     r0,#1
000162  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;448    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;449    				break;
000166  e0c9              B        |L2.764|
;;;450    			}
;;;451    			case TOUCH_NORMAL_OPER_NORMAL:
;;;452    			{
;;;453    #ifdef MODE_WDT				
;;;454    				KICK_DOG();
000168  f7fffffe          BL       Hal_Kick_DOG
;;;455    #endif /* MODE_WDT */
;;;456    				if(!module_wait_full_sample_done())
00016c  f7fffffe          BL       module_wait_full_sample_done
000170  b158              CBZ      r0,|L2.394|
;;;457    				{
;;;458    					module_Stop(YES);
;;;459    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;460    					break;
;;;461    				}
;;;462    
;;;463    				if(algorithm_process(FULL_MODE) == NO)
000172  2000              MOVS     r0,#0
000174  f7fffffe          BL       algorithm_process
000178  b160              CBZ      r0,|L2.404|
;;;464    				{
;;;465    #if USED_PEN_MODE_OPERATION
;;;466    					/*
;;;467    					 * Change the Pen Mode!!
;;;468    					 */
;;;469    					sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;470    
;;;471    					sensingRowStart = 0;
;;;472    					HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_MODE);
;;;473    #else /* USED_PEN_MODE_OPERATION */
;;;474    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
;;;475    #endif /* USED_PEN_MODE_OPERATION */
;;;476    					TEST_LOCAL_STATE = 0;
;;;477    					break;
;;;478    				}
;;;479    
;;;480    #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;481    				if(sptAlgorithmInfo->bIsESDRecovery)
00017a  f8d90008          LDR      r0,[r9,#8]  ; sptAlgorithmInfo
00017e  f5005080          ADD      r0,r0,#0x1000
000182  f890017a          LDRB     r0,[r0,#0x17a]
000186  b148              CBZ      r0,|L2.412|
                  |L2.392|
;;;482    				{
;;;483    					while(1);
000188  e7fe              B        |L2.392|
                  |L2.394|
00018a  2001              MOVS     r0,#1                 ;458
00018c  f7fffffe          BL       module_Stop
                  |L2.400|
000190  2401              MOVS     r4,#1                 ;250
000192  e0b3              B        |L2.764|
                  |L2.404|
000194  2406              MOVS     r4,#6                 ;474
000196  f8c97010          STR      r7,[r9,#0x10]         ;477  ; TEST_LOCAL_STATE
00019a  e0af              B        |L2.764|
                  |L2.412|
;;;484    //					SensingBufferInit();
;;;485    //					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;486    //					TEST_LOCAL_STATE = 0;
;;;487    //					break;
;;;488    				}
;;;489    #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;490    
;;;491    //				if(abnormal_rawdata_temp(NO))
;;;492    //				{
;;;493    //					SensingBufferInit();
;;;494    //					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;495    //					TEST_LOCAL_STATE = 0;
;;;496    //					break;
;;;497    //				}
;;;498    
;;;499    //				algorithm_noise_param_apply();
;;;500    
;;;501    #if USED_NOISE_HOPPING_FREQ
;;;502    #if USE_FREQ_HOPPIG_DEBUG
;;;503    				if (bHoppingFreq)
;;;504    				{
;;;505    					bHoppingFreq = NO;
;;;506    					algorithm_Set_FreqHopp(NOISE_FREQ_HOPPING);
;;;507    				}
;;;508    #endif
;;;509    				if (algorithm_Check_FreqHopping())
00019c  f7fffffe          BL       algorithm_Check_FreqHopping
0001a0  2800              CMP      r0,#0
;;;510    				{
;;;511    					sub_state = TOUCH_NORMAL_OPER_SWITCH_FREQ;
0001a2  bf18              IT       NE
0001a4  2414              MOVNE    r4,#0x14
0001a6  e0a9              B        |L2.764|
;;;512    					break;
;;;513    				}
;;;514    #endif
;;;515    
;;;516    #if USED_IDLE_MODE_CONTROL
;;;517    				if(algorithm_CheckFingerIdleModeControl())
;;;518    				{
;;;519    					sub_state = TOUCH_NORMAL_OPER_IDLE_READY;
;;;520    					break;
;;;521    				}
;;;522    #endif /* USED_IDLE_MODE_CONTROL */
;;;523    
;;;524    #if USED_PEN_MODE_OPERATION
;;;525    				if(algorithm_CheckFingerPenModeControl())
;;;526    				{
;;;527    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;528    					break;
;;;529    				}
;;;530    #endif /* USED_PEN_MODE_OPERATION */
;;;531    
;;;532    				break;
;;;533    			}
;;;534    #if USED_IDLE_MODE_CONTROL
;;;535    			case TOUCH_NORMAL_OPER_IDLE_READY:
;;;536    			{
;;;537    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;538    //				tHalIntrHandle.ulInitFirstFrame = 0;
;;;539    #if USED_ECLK_ON_OFF_CONTROL
;;;540    				HAL_SetECLKOnOffControl(YES);
;;;541    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;542    #if USED_REFERENCE_INIT_IDLE_MODE_ENTER
;;;543    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE;
;;;544    #else /* USED_REFERENCE_INIT_IDLE_MODE_ENTER */
;;;545    				sub_state = TOUCH_NORMAL_OPER_IDLE;
;;;546    #endif /* USED_REFERENCE_INIT_IDLE_MODE_ENTER */
;;;547    				break;
;;;548    			}
;;;549    			case TOUCH_NORMAL_OPER_IDLE:
;;;550    			{
;;;551    #ifdef MODE_WDT
;;;552    				KICK_DOG();
;;;553    #endif /* MODE_WDT */
;;;554    
;;;555    				if(!module_wait_NI_sample_done())
;;;556    				{
;;;557    					module_Stop(YES);
;;;558    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;559    					break;
;;;560    				}
;;;561    
;;;562    				if(algorithm_process_Idle() == NO)
;;;563    				{
;;;564    					SensingBufferInit();
;;;565    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE;
;;;566    					break;
;;;567    				}
;;;568    
;;;569    				if(algorithm_CheckFingerIdleModeControl())
;;;570    				{
;;;571    					sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;572    					break;
;;;573    				}
;;;574    				break;
;;;575    			}
;;;576    #endif /* USED_IDLE_MODE_CONTROL */
;;;577    
;;;578    #if USED_MNT_S3_MODE_FUNCTION
;;;579    			case TOUCH_NORMAL_OPER_S3_READY:
;;;580    			{
;;;581    #if USED_ECLK_ON_OFF_CONTROL
;;;582    				HAL_SetECLKOnOffControl(YES);
0001a8  2001              MOVS     r0,#1
0001aa  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;583    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;584    				sub_state = TOUCH_NORMAL_OPER_S3;
0001ae  2413              MOVS     r4,#0x13
;;;585    				break;
0001b0  e0a4              B        |L2.764|
;;;586    			}
;;;587    			case TOUCH_NORMAL_OPER_S3:
;;;588    			{
;;;589    #ifdef MODE_WDT
;;;590    				KICK_DOG();
0001b2  f7fffffe          BL       Hal_Kick_DOG
;;;591    #endif /* MODE_WDT */
;;;592    				if(!module_wait_S3_sample_done())
0001b6  f7fffffe          BL       module_wait_S3_sample_done
0001ba  b120              CBZ      r0,|L2.454|
;;;593    				{
;;;594    #if USED_S3_PGAMMA_SW_I2C_CTRL
;;;595    //					_gT(_GPIO_TP_INTR);
;;;596    					module_S3_PGAMMA_I2C_SW_Enable();
;;;597    //					_gT(_GPIO_TP_INTR);
;;;598    #endif /* USED_S3_PGAMMA_SW_I2C_CTRL */
;;;599    					HAL_Set_S3_VDD_OddEven_Ctrl(NO);
;;;600    
;;;601    #if USED_ECLK_ON_OFF_CONTROL
;;;602    					HAL_SetECLKOnOffControl(NO);
;;;603    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;604    #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;605    					HAL_SetTPICMuxEnControl(NO, NO);
;;;606    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;607    #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;608    					HAL_SetTouchReportEnControl(NO);
;;;609    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;610    					GPIO_Init(_GPIO_TSYNC_OUT, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
;;;611    
;;;612    					tPWM_INTR_CFG_t tPWM_INTR_CFG[4] =
;;;613    					{
;;;614    						{VSYNC_IN_IRQn, VSYNC_IN_IRQn_Priority, DISABLE},
;;;615    						{TSYNC_IN_IRQn, TSYNC_IN_IRQn_Priority, DISABLE},
;;;616    						{TSYNC_OUT_IRQn, TSYNC_OUT_IRQn_Priority, DISABLE},
;;;617    						{PWMDRV_IRQn, PWMDRV_IRQn_Priority, DISABLE}
;;;618    					};
;;;619    					PWMDRV_ITConfig((tPWM_INTR_CFG_t *)&tPWM_INTR_CFG[0], 4);
;;;620    
;;;621    					NVIC_DisableIRQ(GPIOA_IRQn);
;;;622    					NVIC_DisableIRQ(GPIOM_IRQn);
;;;623    					MSPI_ITConfig(DISABLE);
;;;624    					MSPI_Cmd(DISABLE);
;;;625    //					PWMDRV->PWMGEN_CR0.tBit.pwm_gen_enable = DISABLE;
;;;626    					PWMDRV_Cmd(DISABLE);
;;;627    
;;;628    					PARAM_SetMode(PARAM_MODE_NONE);
;;;629    
;;;630    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;631    					thisInfo->tS3DeltaInfo.bIsSendResumeSignal = NO;
;;;632    #if USED_S3_WAKEUP_DEBUGING
;;;633    					ulTestS3RawDataRead = YES;
;;;634    #endif
;;;635    //					_gT(_GPIO_TP_INTR);
;;;636    					break;
;;;637    				}
;;;638    
;;;639    				if(algorithm_process_S3() == NO)
0001bc  f7fffffe          BL       algorithm_process_S3
0001c0  2800              CMP      r0,#0
0001c2  d147              BNE      |L2.596|
0001c4  e047              B        |L2.598|
                  |L2.454|
0001c6  f7fffffe          BL       module_S3_PGAMMA_I2C_SW_Enable
0001ca  2000              MOVS     r0,#0                 ;599
0001cc  f7fffffe          BL       HAL_Set_S3_VDD_OddEven_Ctrl
0001d0  2000              MOVS     r0,#0                 ;602
0001d2  f7fffffe          BL       HAL_SetECLKOnOffControl
0001d6  2100              MOVS     r1,#0                 ;605
0001d8  4608              MOV      r0,r1                 ;605
0001da  f7fffffe          BL       HAL_SetTPICMuxEnControl
0001de  2000              MOVS     r0,#0                 ;608
0001e0  f7fffffe          BL       HAL_SetTouchReportEnControl
0001e4  2301              MOVS     r3,#1                 ;610
0001e6  2200              MOVS     r2,#0                 ;610
0001e8  2103              MOVS     r1,#3                 ;610
0001ea  2032              MOVS     r0,#0x32              ;610
0001ec  f7fffffe          BL       GPIO_Init
0001f0  487f              LDR      r0,|L2.1008|
0001f2  ac04              ADD      r4,sp,#0x10           ;612
0001f4  e8b0100e          LDM      r0!,{r1-r3,r12}       ;612
0001f8  e88d100e          STM      sp,{r1-r3,r12}        ;612
0001fc  e8b0100e          LDM      r0!,{r1-r3,r12}       ;612
000200  e884100e          STM      r4,{r1-r3,r12}        ;612
000204  c80f              LDM      r0,{r0-r3}            ;612
000206  ac08              ADD      r4,sp,#0x20           ;612
000208  e884000f          STM      r4,{r0-r3}            ;612
00020c  2104              MOVS     r1,#4                 ;619
00020e  4668              MOV      r0,sp                 ;619
000210  f7fffffe          BL       PWMDRV_ITConfig
000214  f04f20e0          MOV      r0,#0xe000e000        ;619
000218  f44f7180          MOV      r1,#0x100             ;619
00021c  f8c01180          STR      r1,[r0,#0x180]        ;619
000220  0049              LSLS     r1,r1,#1              ;619
000222  f8c01180          STR      r1,[r0,#0x180]        ;619
000226  2000              MOVS     r0,#0                 ;623
000228  f7fffffe          BL       MSPI_ITConfig
00022c  2000              MOVS     r0,#0                 ;624
00022e  f7fffffe          BL       MSPI_Cmd
000232  2000              MOVS     r0,#0                 ;626
000234  f7fffffe          BL       PWMDRV_Cmd
000238  f04f30ff          MOV      r0,#0xffffffff        ;628
00023c  f7fffffe          BL       PARAM_SetMode
000240  2401              MOVS     r4,#1                 ;630
000242  f8d9000c          LDR      r0,[r9,#0xc]          ;631  ; thisInfo
000246  e003              B        |L2.592|
000248  e0a6              B        |L2.920|
00024a  e026              B        |L2.666|
00024c  e023              B        |L2.662|
00024e  e006              B        |L2.606|
                  |L2.592|
000250  f8807f32          STRB     r7,[r0,#0xf32]        ;631
                  |L2.596|
000254  e052              B        |L2.764|
                  |L2.598|
;;;640    				{
;;;641    					SensingBufferInit();
000256  f7fffffe          BL       SensingBufferInit
;;;642    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_S3;
00025a  2409              MOVS     r4,#9
;;;643    					break;
00025c  e04e              B        |L2.764|
                  |L2.606|
;;;644    				}
;;;645    				break;
;;;646    			}
;;;647    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;648    
;;;649    #if USED_NOISE_HOPPING_FREQ
;;;650    			case TOUCH_NORMAL_OPER_SWITCH_FREQ:
;;;651    			{
;;;652    				tAppInfo_t * ptAppInfo = app_GetInfo();
00025e  f7fffffe          BL       app_GetInfo
000262  4604              MOV      r4,r0
;;;653    				
;;;654    #if USED_ECLK_ON_OFF_CONTROL
;;;655    				HAL_SetECLKOnOffControl(NO);
000264  2000              MOVS     r0,#0
000266  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;656    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;657    
;;;658    				if (ptAppInfo->eSelectFreq == FREQ_MAIN)
00026a  7ca0              LDRB     r0,[r4,#0x12]
00026c  2801              CMP      r0,#1
00026e  d004              BEQ      |L2.634|
;;;659    				{
;;;660    					module_Switch_Freq(thisCommonConf->HoppFreq1);
;;;661    					sub_state = TOUCH_NORMAL_OPER_NORMAL_FREQ1_READY;
;;;662    				}
;;;663    				else if (ptAppInfo->eSelectFreq == FREQ_HOPP1)
000270  2802              CMP      r0,#2
;;;664    				{
;;;665    					module_Switch_Freq(thisCommonConf->MainFreq);
;;;666    					sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;667    				}
;;;668    				else
;;;669    				{
;;;670    					sub_state = TOUCH_NORMAL_OPER_RESET_MODULE;
000272  bf18              IT       NE
000274  2405              MOVNE    r4,#5
000276  d141              BNE      |L2.764|
000278  e006              B        |L2.648|
                  |L2.634|
00027a  f8d90004          LDR      r0,[r9,#4]            ;660  ; thisCommonConf
00027e  7ec0              LDRB     r0,[r0,#0x1b]         ;660
000280  f7fffffe          BL       module_Switch_Freq
000284  2415              MOVS     r4,#0x15              ;661
000286  e039              B        |L2.764|
                  |L2.648|
000288  f8d90004          LDR      r0,[r9,#4]            ;665  ; thisCommonConf
00028c  7e80              LDRB     r0,[r0,#0x1a]         ;665
00028e  f7fffffe          BL       module_Switch_Freq
                  |L2.658|
000292  240e              MOVS     r4,#0xe               ;666
000294  e032              B        |L2.764|
                  |L2.662|
;;;671    				}
;;;672    				break;
;;;673    			}
;;;674    			case TOUCH_NORMAL_OPER_NORMAL_FREQ1_READY:
;;;675    			{
;;;676    				sub_state = TOUCH_NORMAL_OPER_NORMAL_FREQ1;
000296  2416              MOVS     r4,#0x16
;;;677    				break;
000298  e030              B        |L2.764|
                  |L2.666|
;;;678    			}
;;;679    			case TOUCH_NORMAL_OPER_NORMAL_FREQ1:
;;;680    			{
;;;681    #ifdef MODE_WDT
;;;682    				KICK_DOG();
00029a  f7fffffe          BL       Hal_Kick_DOG
;;;683    #endif /* MODE_WDT */
;;;684    				if(!module_wait_full_sample_done())
00029e  f7fffffe          BL       module_wait_full_sample_done
0002a2  b168              CBZ      r0,|L2.704|
;;;685    				{
;;;686    					module_Stop(YES);
;;;687    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;688    					break;
;;;689    				}
;;;690    
;;;691    				if(algorithm_process(FULL_MODE) == NO)
0002a4  2000              MOVS     r0,#0
0002a6  f7fffffe          BL       algorithm_process
0002aa  2800              CMP      r0,#0
0002ac  f43faf72          BEQ      |L2.404|
;;;692    				{
;;;693    #if USED_PEN_MODE_OPERATION
;;;694    					/*
;;;695    					 * Change the Pen Mode!!
;;;696    					 */
;;;697    					sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;698    
;;;699    					sensingRowStart = 0;
;;;700    					HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_MODE);
;;;701    #else /* USED_PEN_MODE_OPERATION */
;;;702    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
;;;703    #endif /* USED_PEN_MODE_OPERATION */
;;;704    					TEST_LOCAL_STATE = 0;
;;;705    					break;
;;;706    				}
;;;707    				
;;;708    #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;709    				if(sptAlgorithmInfo->bIsESDRecovery)
0002b0  f8d90008          LDR      r0,[r9,#8]  ; sptAlgorithmInfo
0002b4  f5005080          ADD      r0,r0,#0x1000
0002b8  f890017a          LDRB     r0,[r0,#0x17a]
0002bc  b128              CBZ      r0,|L2.714|
                  |L2.702|
;;;710    				{
;;;711    					while(1);
0002be  e7fe              B        |L2.702|
                  |L2.704|
0002c0  2001              MOVS     r0,#1                 ;686
0002c2  f7fffffe          BL       module_Stop
0002c6  2401              MOVS     r4,#1                 ;687
0002c8  e018              B        |L2.764|
                  |L2.714|
;;;712    //					SensingBufferInit();
;;;713    //					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;714    //					TEST_LOCAL_STATE = 0;
;;;715    //					break;
;;;716    				}
;;;717    #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;718    //				if(abnormal_rawdata_temp(NO))
;;;719    //				{
;;;720    //					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;721    //					TEST_LOCAL_STATE = 0;
;;;722    //					break;
;;;723    //				}
;;;724    				
;;;725    #if USE_FREQ_HOPPIG_DEBUG
;;;726    				if (bHoppingFreq)
;;;727    				{
;;;728    					bHoppingFreq = NO;
;;;729    					algorithm_Set_FreqHopp(NOISE_FREQ_HOPPING);
;;;730    				}
;;;731    #endif
;;;732    				if (algorithm_Check_FreqHopping())
0002ca  f7fffffe          BL       algorithm_Check_FreqHopping
0002ce  2800              CMP      r0,#0
;;;733    				{
;;;734    					sub_state = TOUCH_NORMAL_OPER_SWITCH_FREQ;
0002d0  bf18              IT       NE
0002d2  2414              MOVNE    r4,#0x14
;;;735    				}
;;;736    
;;;737    				currentRowStart = sensingRowStart;
0002d4  4847              LDR      r0,|L2.1012|
0002d6  8800              LDRH     r0,[r0,#0]  ; sensingRowStart
0002d8  4947              LDR      r1,|L2.1016|
0002da  8008              STRH     r0,[r1,#0]
;;;738    				p_currentRowStart = currentRowStart;
0002dc  4947              LDR      r1,|L2.1020|
0002de  8008              STRH     r0,[r1,#0]
;;;739    				currentColStart = thisInfo->tPenInfo.ucCurrentColumnStart;
0002e0  f8d9000c          LDR      r0,[r9,#0xc]  ; thisInfo
0002e4  f8901fbb          LDRB     r1,[r0,#0xfbb]
0002e8  f8a91000          STRH     r1,[r9,#0]
;;;740    				thisInfo->tPenInfo.us_pendata_pressure = 1;
0002ec  2101              MOVS     r1,#1
0002ee  f8a01fe3          STRH     r1,[r0,#0xfe3]
;;;741     
;;;742    #if 1 // TODO : Pen Define으로 감싸주어야 하는거 아닌가?
;;;743    //				thisInfo->bLocal_sensing = bChangeSampling;
;;;744    
;;;745    				if(thisInfo->bLocal_sensing == YES)
0002f2  f8900fb8          LDRB     r0,[r0,#0xfb8]
0002f6  2801              CMP      r0,#1
;;;746    				{
;;;747    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
0002f8  bf08              IT       EQ
0002fa  2417              MOVEQ    r4,#0x17
                  |L2.764|
;;;748    //					sensing_cont_cnt = 0;
;;;749    					break;
;;;750    				}
;;;751    #endif
;;;752    				break;
;;;753    			}
;;;754    #endif /* USED_NOISE_HOPPING_FREQ */
;;;755    
;;;756    #if (USED_PEN_MODE_OPERATION)
;;;757    			case TOUCH_NORMAL_OPER_LOCAL_READY:
;;;758    			{
;;;759    				sensingRowStart_Tilt = sensingRowStart;
;;;760    				currentRowStart = sensingRowStart;
;;;761    				p_currentRowStart = currentRowStart;
;;;762    				currentColStart = thisInfo->tPenInfo.ucCurrentColumnStart;
;;;763    
;;;764    				thisInfo->tPenInfo.us_pendata_pressure = 1;
;;;765    				thisInfo->tPenInfo.ucSensing_cont_cnt = 0;
;;;766    				
;;;767    				thisInfo->tPenInfo.ucSearch_check_cnt = thisInfo->tPenInfo.ucSearch_check_cnt_2 = 0;
;;;768    
;;;769    				if(tHalIntrHandle.ulTSyncInRisingCnt == (LHB_NUM-1)
;;;770    #if USED_TP_RST_OPERATION
;;;771    					|| (IS_GPIO_PIN(_GPIO_TP_RST) == 0x0)
;;;772    #endif /* #if USED_TP_RST_OPERATION */
;;;773    					)
;;;774    				{
;;;775    					TEST_LOCAL_STATE = 1;
;;;776    
;;;777    					sub_state = TOUCH_NORMAL_OPER_LOCAL;
;;;778    					thisInfo->tPenInfo.ucSensing_cont_cnt1 = 0;
;;;779    				}
;;;780    
;;;781    				break;
;;;782    			}
;;;783    
;;;784    			case TOUCH_NORMAL_OPER_LOCAL:
;;;785    			{
;;;786    #ifdef MODE_WDT
;;;787    				KICK_DOG();
;;;788    #endif /* MODE_WDT */
;;;789    #if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;790    				hal_Info_SetPenTypeSwapCheckEnable(YES);
;;;791    #endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;792    				ePartialSensing_t RetVal = module_wait_local_sample_done();
;;;793    				bool_t dsp_a_finger_op_change = 0;
;;;794    				switch(RetVal)
;;;795    				{
;;;796    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;797    					case PARTIAL_PEN_COORD_DATA1:		// 1st Pen RAWDATA Check
;;;798    					case PARTIAL_PEN_COORD_DATA2:		// 2nd Pen RAWDATA Check
;;;799    					case PARTIAL_PEN_COORD_DATA3:		// 3rd Pen RAWDATA Check
;;;800    					case PARTIAL_PEN_COORD_DATA4:		// 4th Pen RAWDATA Check
;;;801    					{
;;;802    #if LOCAL_REBASE_ALGO_EN
;;;803    						algorithm_check_recal_pen();
;;;804    #endif
;;;805    						
;;;806    #if ((USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL) && USED_DSPA_FUNC_FOR_FINGER)
;;;807    						if( (thisModeConf->BaseLine.bDspA_LocalMode_PenPhase || thisModeConf->BaseLine.bDspA_LocalMode_CalculateDelta || thisModeConf->SensingFilter.cLineFilter_Pen == 2 ||
;;;808    							 thisModeConf->BaseLine.bDspA_SearchMode_PenPhase || thisModeConf->BaseLine.bDspA_SearchMode_CalculateDelta || thisModeConf->SensingFilter.ucLocalSearchModeLineFilter == 2) 
;;;809    						 && (thisModeConf->BaseLine.bDspA_Finger_CalculateDelta || thisModeConf->SensingFilter.cLineFilter > 2) )
;;;810    						{
;;;811    							dsp_a_finger_op_change = 1;
;;;812    							if( PARTIAL_PEN_COORD_DATA4 == RetVal ) 
;;;813    							{
;;;814    								if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;815    								{
;;;816    									thisInfo->bIsRecalCondLocal = YES;
;;;817    								}
;;;818    							}
;;;819    						}
;;;820    #endif	
;;;821    						protocol_LogMatrix(LT_PENPOS_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_3_PTR(), COL_MAX, PEN_DATA_ROW_MAX_3, 84 /*MAX Intensity*/);
;;;822    						if(thisInfo->tPenInfo.bSearch_Mode_Flag == 0)
;;;823    						{
;;;824    							protocol_LogPaddedMatrix(LT_PENPOS_INTENSITY, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;825    						}
;;;826    						else
;;;827    						{
;;;828    							protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_2_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;829    						}
;;;830    #if defined(TILT_ON)
;;;831    						protocol_LogMatrix(LT_NI_RAW, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RING_RAW_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX+PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;832    						protocol_LogPaddedMatrix(LT_NI_INT, PEN_COORD_COL_MAX, HAL_GET_RING_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;833    #endif
;;;834    						break;
;;;835    					}
;;;836    #else /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;837    					case PARTIAL_PEN_COORD1:
;;;838    					case PARTIAL_PEN_COORD2:
;;;839    					case PARTIAL_PEN_COORD3:
;;;840    					case PARTIAL_PEN_COORD4:
;;;841    					{
;;;842    #if LOCAL_REBASE_ALGO_EN
;;;843    						algorithm_check_recal_pen();
;;;844    #endif
;;;845    						
;;;846    #if ((USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL) && USED_DSPA_FUNC_FOR_FINGER)
;;;847    						if( (thisModeConf->BaseLine.bDspA_LocalMode_PenPhase || thisModeConf->BaseLine.bDspA_LocalMode_CalculateDelta || thisModeConf->SensingFilter.cLineFilter_Pen == 2 ||
;;;848    							 thisModeConf->BaseLine.bDspA_SearchMode_PenPhase || thisModeConf->BaseLine.bDspA_SearchMode_CalculateDelta || thisModeConf->SensingFilter.ucLocalSearchModeLineFilter == 2) 
;;;849    						 && (thisModeConf->BaseLine.bDspA_Finger_CalculateDelta || thisModeConf->SensingFilter.cLineFilter > 2) )
;;;850    						{
;;;851    							dsp_a_finger_op_change = 1;
;;;852    							if( (PARTIAL_PEN_COORD4 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WGP) || 
;;;853    								(PARTIAL_PEN_COORD1 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)  ||
;;;854    								(PARTIAL_PEN_COORD2 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WACOM) ) 
;;;855    							{
;;;856    								if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;857    								{
;;;858    									thisInfo->bIsRecalCondLocal = YES;
;;;859    								}
;;;860    							}
;;;861    						}
;;;862    #endif						
;;;863    						protocol_LogMatrix(LT_PENPOS_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RAW_IMAGE_PTR(), COL_MAX, (PEN_COORD_ROW_MAX*2), 84/*MAX Intensity*/);
;;;864    
;;;865    						if (thisInfo->tPenInfo.bSearch_Mode_Flag == 0)
;;;866    						{
;;;867    							protocol_LogPaddedMatrix(LT_PENPOS_INTENSITY, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;868    						}
;;;869    						else
;;;870    						{
;;;871    							if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;872    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;873    							else
;;;874    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_2_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;875    						}
;;;876    
;;;877    #if defined(TILT_ON)
;;;878    						protocol_LogMatrix(LT_NI_RAW, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RING_RAW_IMAGE_PTR(), COL_MAX, (PEN_COORD_ROW_MAX+PEN_COORD_ROW_MAX), 84/*MAX Intensity*/);
;;;879    						protocol_LogPaddedMatrix(LT_NI_INT, PEN_COORD_COL_MAX, HAL_GET_RING_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;880    #endif
;;;881    						break;
;;;882    					}
;;;883    					case PARTIAL_PEN_DATA1:
;;;884    					case PARTIAL_PEN_DATA2:
;;;885    					case PARTIAL_PEN_DATA3:
;;;886    					case PARTIAL_PEN_DATA4:
;;;887    					case PARTIAL_PEN_DATA5:
;;;888    					{
;;;889    						// _gT(_GPIO_TP_INTR);	//use only test
;;;890    						if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;891    							protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_PTR(), COL_MAX, PEN_DATA_ROW_MAX, 84/*MAX Intensity*/);
;;;892    						else if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WACOM)
;;;893    							protocol_LogMatrix_unsigned(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_2_PTR(), COL_MAX, PEN_DATA_ROW_MAX_2, 84/*MAX Intensity*/);
;;;894    						else
;;;895    							protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_3_PTR(), COL_MAX, PEN_DATA_ROW_MAX_3, 84/*MAX Intensity*/);
;;;896    						break;
;;;897    					}
;;;898    #endif /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;899    					case LOCAL_FINGER_LAST_LHB:
;;;900    					{
;;;901    						if(dsp_a_finger_op_change == 0)
;;;902    						{
;;;903    	//						if(algorithm_process_LocalFinger() == NO)
;;;904    							if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;905    							{
;;;906    								thisInfo->bIsRecalCondLocal = YES;
;;;907    							}
;;;908    						}
;;;909    		
;;;910    						if(thisInfo->bIsRecalCondLocal && !thisModeConf->BaseLine.bLocalModeReBaseCheckOff)
;;;911    						{
;;;912    							thisInfo->bIsRecalCondLocal = NO;
;;;913    							sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;914    							TEST_LOCAL_STATE = 0;
;;;915    							break;
;;;916    						}
;;;917    
;;;918    						if(algorithm_CheckFingerPenModeControl())
;;;919    						{
;;;920    							sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;921    							break;
;;;922    						}
;;;923    #if  USED_LOCAL_IDLE_MODE_CONTROL
;;;924    						else if(algorithm_CheckLocalPenIdleModeControl())
;;;925    						{
;;;926    							sub_state = TOUCH_NORMAL_OPER_LOCAL_IDLE_READY;
;;;927    							break;
;;;928    						}
;;;929    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;930    
;;;931    						break;
;;;932    					}
;;;933    					case PARTIAL_MAX:
;;;934    					{
;;;935    						module_Stop(YES);
;;;936    						sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;937    						break;
;;;938    					}
;;;939    					default:
;;;940    						break;
;;;941    				}
;;;942    				break;
;;;943    			}
;;;944    
;;;945    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;946    			case TOUCH_NORMAL_OPER_LOCAL_IDLE_READY:
;;;947    			{
;;;948    #if USED_ECLK_ON_OFF_CONTROL
;;;949    				HAL_SetECLKOnOffControl(YES);
;;;950    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;951    //#if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;952    //				HAL_SetTPICMuxEnControl(NO, NO);
;;;953    //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;954    //#if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;955    //				HAL_SetTouchReportEnControl(NO);
;;;956    //#endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;957    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;958    
;;;959    				break;
;;;960    			}
;;;961    
;;;962    			case TOUCH_NORMAL_OPER_LOCAL_IDLE:
;;;963    			{
;;;964    #ifdef MODE_WDT
;;;965    				KICK_DOG();
;;;966    #endif /* MODE_WDT */
;;;967    				if(!module_wait_NI_sample_done())
;;;968    				{
;;;969    					module_Stop(YES);
;;;970    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;971    					break;
;;;972    				}
;;;973    
;;;974    				if(algorithm_process_LocalIdle() == NO)
;;;975    				{
;;;976    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;977    					break;
;;;978    				}
;;;979    
;;;980    				if(algorithm_CheckLocalPenIdleModeControl())
;;;981    				{
;;;982    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;983    				}
;;;984    				break;
;;;985    			}
;;;986    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;987    
;;;988    #endif /* (USED_PEN_MODE_OPERATION) */
;;;989    #if USED_RAWDATA_TUNE_CALIBRATION
;;;990    			case TOUCH_NORMAL_OPER_NORMAL_RAWDATA_CALIBRATION:
;;;991    			{
;;;992    	#if USED_RAWDATA_HOPP_FRQ_CALIBRATION
;;;993    				module_Switch_Freq(thisCommonConf->HoppFreq1);
;;;994    	#endif
;;;995    				SRIC_RawDataCalibration();
;;;996    #if USED_PEN_MODE_OPERATION
;;;997    				sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;998    #else /* USED_PEN_MODE_OPERATION */
;;;999    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
;;;1000   #endif /* USED_PEN_MODE_OPERATION */
;;;1001   				break;
;;;1002   			}
;;;1003   #endif /* USED_RAWDATA_TUNE_CALIBRATION */
;;;1004   			case TOUCH_NORMAL_OPER_EXIT:
;;;1005   			{
;;;1006   				bLoop = NO;
;;;1007   				continue;
;;;1008   				/* no break */
;;;1009   			}
;;;1010       	}
;;;1011   
;;;1012   		currMode = protocol_swip_GetMode();
0002fc  f7fffffe          BL       protocol_swip_GetMode
000300  4605              MOV      r5,r0
;;;1013   		if(currMode != prevMode)
000302  42b0              CMP      r0,r6
000304  d043              BEQ      |L2.910|
;;;1014   		{
;;;1015   			switch( currMode )
000306  2d02              CMP      r5,#2
000308  d04a              BEQ      |L2.928|
00030a  dc03              BGT      |L2.788|
00030c  b13d              CBZ      r5,|L2.798|
00030e  2d01              CMP      r5,#1
000310  d008              BEQ      |L2.804|
000312  e03c              B        |L2.910|
                  |L2.788|
000314  2d03              CMP      r5,#3
000316  d031              BEQ      |L2.892|
000318  2d11              CMP      r5,#0x11
00031a  d05a              BEQ      |L2.978|
00031c  e037              B        |L2.910|
                  |L2.798|
;;;1016   			{
;;;1017   				case M_TOUCH_NORMAL:
;;;1018   				{
;;;1019   					protocol_swip_PendReadyStatus();
00031e  f7fffffe          BL       protocol_swip_PendReadyStatus
;;;1020   
;;;1021   					break;
000322  e034              B        |L2.910|
                  |L2.804|
;;;1022   				}
;;;1023   				case M_TOUCH_DIAG:
;;;1024   				{
;;;1025   					eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
000324  f7fffffe          BL       HAL_GetSensingMode
000328  4604              MOV      r4,r0
;;;1026   					sub_state = TOUCH_NORMAL_OPER_EXIT;
;;;1027   					main_state = TOUCH_MAIN_OPERATION_DIAG;
00032a  f04f0b02          MOV      r11,#2
;;;1028   					
;;;1029   #if USED_ECLK_ON_OFF_CONTROL
;;;1030   					HAL_SetECLKOnOffControl(NO);
00032e  2000              MOVS     r0,#0
000330  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;1031   #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;1032   #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;1033   					HAL_SetTPICMuxEnControl(NO, NO);
000334  2100              MOVS     r1,#0
000336  4608              MOV      r0,r1
000338  f7fffffe          BL       HAL_SetTPICMuxEnControl
;;;1034   #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;1035   #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;1036   					HAL_SetTouchReportEnControl(NO);
00033c  2000              MOVS     r0,#0
00033e  f7fffffe          BL       HAL_SetTouchReportEnControl
;;;1037   #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;1038   
;;;1039   					if(IS_FINGER_PEN_MODE(eSensingMode))
000342  f4144f80          TST      r4,#0x4000
;;;1040   					{
;;;1041   						// _gT(_GPIO_TP_INTR);	//use only test
;;;1042   						HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_SEARCH_MODE);
000346  bf18              IT       NE
000348  2007              MOVNE    r0,#7
00034a  d002              BEQ      |L2.850|
                  |L2.844|
;;;1043   					}
;;;1044   					else
;;;1045   					{
;;;1046   						if(IS_IDLE_MODE(eSensingMode))
;;;1047   						{
;;;1048   							HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_MODE);
00034c  f7fffffe          BL       HAL_SetSensingChangeMode
000350  e00c              B        |L2.876|
                  |L2.850|
000352  f4147f80          TST      r4,#0x100             ;1046
000356  bf18              IT       NE
000358  2002              MOVNE    r0,#2
00035a  d1f7              BNE      |L2.844|
;;;1049   						}
;;;1050   						else
;;;1051   						{
;;;1052   #if USED_NOISE_HOPPING_FREQ
;;;1053   							if(!IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
00035c  f0140f02          TST      r4,#2
000360  d104              BNE      |L2.876|
;;;1054   							{
;;;1055   								module_Switch_Freq(thisCommonConf->MainFreq);
000362  f8d90004          LDR      r0,[r9,#4]  ; thisCommonConf
000366  7e80              LDRB     r0,[r0,#0x1a]
000368  f7fffffe          BL       module_Switch_Freq
                  |L2.876|
;;;1056   //								HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_FRQ_MAIN_MODE);
;;;1057   							}
;;;1058   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1059   						}
;;;1060   					}
;;;1061   					/*
;;;1062   					 * Wait Mode Change!!
;;;1063   					 */
;;;1064   					module_wait_full_sample_done();
00036c  f7fffffe          BL       module_wait_full_sample_done
;;;1065   
;;;1066   #ifdef MODE_WDT
;;;1067   					module_Watch_Disable();
000370  f7fffffe          BL       module_Watch_Disable
000374  f1b80f00          CMP      r8,#0                 ;105
;;;1068   #endif /* MODE_WDT */
;;;1069   
;;;1070   					break;
000378  d00e              BEQ      |L2.920|
00037a  e67d              B        |L2.120|
                  |L2.892|
;;;1071   				}
;;;1072   				case M_TOUCH_DFUP:
;;;1073   				case M_PARAMETER:
;;;1074   				{
;;;1075   #ifdef MODE_WDT
;;;1076   					LONG_KICK_DOG();
00037c  f7fffffe          BL       Hal_Long_Kick_DOG
;;;1077   #endif /* MODE_WDT */
;;;1078   					module_Stop(NO);
000380  2000              MOVS     r0,#0
000382  f7fffffe          BL       module_Stop
;;;1079   
;;;1080   					if(currMode == M_PARAMETER)
000386  2d03              CMP      r5,#3
000388  d016              BEQ      |L2.952|
;;;1081   					{
;;;1082   						sub_state = TOUCH_NORMAL_OPER_RESET_SYSTEM;
;;;1083   					}
;;;1084   					else if(currMode == M_TOUCH_DFUP)
00038a  2d02              CMP      r5,#2
00038c  d01a              BEQ      |L2.964|
                  |L2.910|
;;;1085   					{
;;;1086   						sub_state = TOUCH_NORMAL_OPER_EXIT;
;;;1087   						main_state = TOUCH_MAIN_OPERATION_DFUP;
;;;1088   					}
;;;1089   					break;
;;;1090   				}
;;;1091   				case M_WATCH_DOG_RESET:
;;;1092   				{
;;;1093   					module_Stop(NO);
;;;1094   					sub_state = TOUCH_NORMAL_OPER_EXIT;
;;;1095   					main_state = TOUCH_MAIN_OPERATION_RESET;
;;;1096   					break;
;;;1097   				}
;;;1098   			}
;;;1099   		}
;;;1100   
;;;1101   		prevMode = currMode;
00038e  462e              MOV      r6,r5
000390  f1b80f00          CMP      r8,#0                 ;105
000394  f47fae56          BNE      |L2.68|
                  |L2.920|
;;;1102       }
;;;1103   
;;;1104       return main_state;
;;;1105   }
000398  b00d              ADD      sp,sp,#0x34
00039a  4658              MOV      r0,r11                ;1104
00039c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.928|
0003a0  f7fffffe          BL       Hal_Long_Kick_DOG
0003a4  2000              MOVS     r0,#0                 ;1078
0003a6  f7fffffe          BL       module_Stop
0003aa  f04f0b03          MOV      r11,#3                ;1087
0003ae  f1b80f00          CMP      r8,#0                 ;105
0003b2  f47fae61          BNE      |L2.120|
0003b6  e7ef              B        |L2.920|
                  |L2.952|
0003b8  462e              MOV      r6,r5                 ;1101
0003ba  f1b80f00          CMP      r8,#0                 ;105
0003be  f47fae57          BNE      |L2.112|
0003c2  e7e9              B        |L2.920|
                  |L2.964|
0003c4  f04f0b03          MOV      r11,#3                ;1087
0003c8  f1b80f00          CMP      r8,#0                 ;105
0003cc  f47fae54          BNE      |L2.120|
0003d0  e7e2              B        |L2.920|
                  |L2.978|
0003d2  2000              MOVS     r0,#0                 ;1093
0003d4  f7fffffe          BL       module_Stop
0003d8  f04f0b04          MOV      r11,#4                ;1095
0003dc  f1b80f00          CMP      r8,#0                 ;105
0003e0  f47fae4a          BNE      |L2.120|
0003e4  e7d8              B        |L2.920|
;;;1106   
                          ENDP

0003e6  0000              DCW      0x0000
                  |L2.1000|
                          DCD      ||.data||
                  |L2.1004|
                          DCD      custom_tool
                  |L2.1008|
                          DCD      ||.constdata||
                  |L2.1012|
                          DCD      sensingRowStart
                  |L2.1016|
                          DCD      currentRowStart
                  |L2.1020|
                          DCD      p_currentRowStart

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0a000000          DCB      0x0a,0x00,0x00,0x00
                          DCD      0x00000003
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  0b000000          DCB      0x0b,0x00,0x00,0x00
                          DCD      0x00000003
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  0c000000          DCB      0x0c,0x00,0x00,0x00
                          DCD      0x00000003
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  0d000000          DCB      0x0d,0x00,0x00,0x00
                          DCD      0x00000003
00002c  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  currentColStart
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  thisCommonConf
                          DCD      0x00000000
                  sptAlgorithmInfo
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  TEST_LOCAL_STATE
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  diff_rs_cnt
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  CurrFreq
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\app_normal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___12_app_normal_c_2a216f96____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____REVSH|
#line 402
|__asm___12_app_normal_c_2a216f96____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____RRX|
#line 587
|__asm___12_app_normal_c_2a216f96____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
