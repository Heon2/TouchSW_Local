; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\protocol_log.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\protocol_log.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\syscfg -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -D_USE_WITH_BOOT_ --wchar32 --omf_browse=.\bin\protocol_log.crf ..\..\Protocol\protocol_log.c]
                          THUMB

                          AREA ||i.protocol_Log||, CODE, READONLY, ALIGN=2

                  protocol_Log PROC
;;;93     //bool_t ProtocolLogIng = 0;
;;;94     void protocol_Log(eLogType_t eLogType, const tLogDataFormat_t* _ptDataFormat, const void* _pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
;;;96         if( tProtocolLog.ptControl->eTrigger == LTR_TRIG )
000002  4c1a              LDR      r4,|L1.108|
000004  6863              LDR      r3,[r4,#4]  ; tProtocolLog
000006  f893c004          LDRB     r12,[r3,#4]
00000a  f1bc0f01          CMP      r12,#1
;;;97         {
;;;98             if( tProtocolLog.ptControl->ulLogMask & _BV(eLogType) )
;;;99             {
;;;100            	tProtocolLog.ptControl->eTrigger = LTR_WAIT;
;;;101                //Set data format.
;;;102            	tProtocolLog.ptDataFormat = _ptDataFormat;
;;;103    
;;;104                //Set buffer address.
;;;105                vtProtocolBufferPointers.pGeneralBuffer = _pBuf;
;;;106    
;;;107    #if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;108                HAL_SetTPICMuxEnControl(NO, NO);
;;;109    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;110    
;;;111    #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;112    			HAL_SetECLKOnOffControl(NO);
;;;113    #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;114    
;;;115    #if USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;116    			HAL_SetTouchReportEnControl(NO);
;;;117    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;118    
;;;119                //Pend wait flag and wait for image type setting.
;;;120                tProtocolCtrl.getter->eReadyStatus = RS_LOG;
;;;121                while( tProtocolLog.ptControl->eTrigger == LTR_WAIT ) ;
;;;122    
;;;123    #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;124    			HAL_SetECLKOnOffControl(YES);
;;;125    #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;126    
;;;127    #if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;128                HAL_SetTPICMuxEnControl(YES, NO);
;;;129    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;130    
;;;131    #if USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;132                HAL_SetTouchReportEnControl(YES);
;;;133    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;134            }
;;;135        }
;;;136    }
00000e  bf18              IT       NE
000010  bd70              POPNE    {r4-r6,pc}
000012  f8d3c000          LDR      r12,[r3,#0]           ;98
000016  2501              MOVS     r5,#1                 ;98
000018  fa05f000          LSL      r0,r5,r0              ;98
00001c  ea1c0f00          TST      r12,r0                ;98
000020  bf08              IT       EQ
000022  bd70              POPEQ    {r4-r6,pc}
000024  20ff              MOVS     r0,#0xff              ;100
000026  7118              STRB     r0,[r3,#4]            ;100
000028  4811              LDR      r0,|L1.112|
00002a  60a1              STR      r1,[r4,#8]            ;102  ; tProtocolLog
00002c  2100              MOVS     r1,#0                 ;108
00002e  6002              STR      r2,[r0,#0]            ;105  ; vtProtocolBufferPointers
000030  4608              MOV      r0,r1                 ;108
000032  f7fffffe          BL       HAL_SetTPICMuxEnControl
000036  2000              MOVS     r0,#0                 ;112
000038  f7fffffe          BL       HAL_SetECLKOnOffControl
00003c  2000              MOVS     r0,#0                 ;116
00003e  f7fffffe          BL       HAL_SetTouchReportEnControl
000042  490c              LDR      r1,|L1.116|
000044  2077              MOVS     r0,#0x77              ;120
000046  6809              LDR      r1,[r1,#0]            ;120  ; tProtocolCtrl
000048  7008              STRB     r0,[r1,#0]            ;120
00004a  6860              LDR      r0,[r4,#4]            ;96
                  |L1.76|
00004c  7901              LDRB     r1,[r0,#4]            ;121
00004e  29ff              CMP      r1,#0xff              ;121
000050  d0fc              BEQ      |L1.76|
000052  2001              MOVS     r0,#1                 ;124
000054  f7fffffe          BL       HAL_SetECLKOnOffControl
000058  2100              MOVS     r1,#0                 ;128
00005a  2001              MOVS     r0,#1                 ;128
00005c  f7fffffe          BL       HAL_SetTPICMuxEnControl
000060  e8bd4070          POP      {r4-r6,lr}            ;132
000064  2001              MOVS     r0,#1                 ;132
000066  f7ffbffe          B.W      HAL_SetTouchReportEnControl
;;;137    
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      ||area_number.9||+0x14
                  |L1.112|
                          DCD      vtProtocolBufferPointers
                  |L1.116|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_LogImage||, CODE, READONLY, ALIGN=2

                  protocol_LogImage PROC
;;;52     
;;;53     void protocol_LogImage(eImageType_t _type, const tImageDataFmt_t* _ptDataFormat, uint8_t ucFinger_, tRect_t rect[ucFinger_], const void* _pBuf)
000000  b57f              PUSH     {r0-r6,lr}
;;;54     { 
;;;55         if( tProtocolImage.ptCtrl->eImageType == _type )
000002  4c1a              LDR      r4,|L2.108|
000004  f8ddc020          LDR      r12,[sp,#0x20]
000008  6862              LDR      r2,[r4,#4]  ; tProtocolImage
00000a  7815              LDRB     r5,[r2,#0]
00000c  4285              CMP      r5,r0
;;;56         {
;;;57         	tProtocolImage.ptCtrl->eImageType = IT_WAIT;
;;;58             //Set data format.
;;;59         	tProtocolImage.ptFormat = _ptDataFormat;
;;;60     
;;;61         	tProtocolImage.pucFinger_ = &ucFinger_;
;;;62         	tProtocolImage.ptRect = rect;
;;;63     
;;;64             //Set buffer address.
;;;65             vtProtocolBufferPointers.pGeneralBuffer = (void*)_pBuf;
;;;66     
;;;67     #if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;68             HAL_SetTPICMuxEnControl(NO, NO);
;;;69     #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;70     #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;71     		HAL_SetECLKOnOffControl(NO);
;;;72     #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;73     #if USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;74     		HAL_SetTouchReportEnControl(NO);
;;;75     #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;76     
;;;77             //Pend wait flag and wait for image type setting.
;;;78             tProtocolCtrl.getter->eReadyStatus = RS_IMAGE;
;;;79             while( tProtocolImage.ptCtrl->eImageType == IT_WAIT && tProtocolCtrl.setter->eMode == M_TOUCH_NORMAL ) ;
;;;80     
;;;81     #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;82     		HAL_SetECLKOnOffControl(YES);
;;;83     #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;84     #if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;85             HAL_SetTPICMuxEnControl(YES, NO);
;;;86     #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;87     #if USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;88     		HAL_SetTouchReportEnControl(YES);
;;;89     #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;90         }
;;;91     }
00000e  bf1c              ITT      NE
000010  b004              ADDNE    sp,sp,#0x10
000012  bd70              POPNE    {r4-r6,pc}
000014  20ff              MOVS     r0,#0xff              ;57
000016  7010              STRB     r0,[r2,#0]            ;57
000018  60a1              STR      r1,[r4,#8]            ;59  ; tProtocolImage
00001a  a802              ADD      r0,sp,#8              ;61
00001c  60e0              STR      r0,[r4,#0xc]          ;61  ; tProtocolImage
00001e  4814              LDR      r0,|L2.112|
000020  6123              STR      r3,[r4,#0x10]         ;62  ; tProtocolImage
000022  2100              MOVS     r1,#0                 ;68
000024  f8c0c000          STR      r12,[r0,#0]           ;65  ; vtProtocolBufferPointers
000028  4608              MOV      r0,r1                 ;68
00002a  f7fffffe          BL       HAL_SetTPICMuxEnControl
00002e  2000              MOVS     r0,#0                 ;71
000030  f7fffffe          BL       HAL_SetECLKOnOffControl
000034  2000              MOVS     r0,#0                 ;74
000036  f7fffffe          BL       HAL_SetTouchReportEnControl
00003a  490e              LDR      r1,|L2.116|
00003c  20aa              MOVS     r0,#0xaa              ;78
00003e  680a              LDR      r2,[r1,#0]            ;78  ; tProtocolCtrl
000040  7010              STRB     r0,[r2,#0]            ;78
000042  6860              LDR      r0,[r4,#4]            ;55
000044  684a              LDR      r2,[r1,#4]            ;79
                  |L2.70|
000046  7801              LDRB     r1,[r0,#0]            ;79
000048  29ff              CMP      r1,#0xff              ;79
00004a  bf04              ITT      EQ                    ;79
00004c  7811              LDRBEQ   r1,[r2,#0]            ;79
00004e  2900              CMPEQ    r1,#0                 ;79
000050  d0f9              BEQ      |L2.70|
000052  f04f0001          MOV      r0,#1                 ;82
000056  f7fffffe          BL       HAL_SetECLKOnOffControl
00005a  2100              MOVS     r1,#0                 ;85
00005c  2001              MOVS     r0,#1                 ;85
00005e  f7fffffe          BL       HAL_SetTPICMuxEnControl
000062  2001              MOVS     r0,#1                 ;88
000064  f7fffffe          BL       HAL_SetTouchReportEnControl
000068  b004              ADD      sp,sp,#0x10
00006a  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

                  |L2.108|
                          DCD      ||area_number.9||
                  |L2.112|
                          DCD      vtProtocolBufferPointers
                  |L2.116|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_log_get_mode||, CODE, READONLY, ALIGN=2

                  protocol_log_get_mode PROC
;;;137    
;;;138    uint32_t protocol_log_get_mode(void)
000000  4801              LDR      r0,|L3.8|
;;;139    {
;;;140    	return tProtocolLog.ptControl->eTrigger;
000002  6840              LDR      r0,[r0,#4]  ; tProtocolLog
000004  7900              LDRB     r0,[r0,#4]
;;;141    }
000006  4770              BX       lr
;;;142    
                          ENDP

                  |L3.8|
                          DCD      ||area_number.9||+0x14

                          AREA ||i.protocol_log_set_mode||, CODE, READONLY, ALIGN=2

                  protocol_log_set_mode PROC
;;;142    
;;;143    void protocol_log_set_mode(eLogTriggerType_t _m)
000000  4901              LDR      r1,|L4.8|
;;;144    {
;;;145    	tProtocolLog.ptControl->eTrigger = _m;
000002  6849              LDR      r1,[r1,#4]  ; tProtocolLog
000004  7108              STRB     r0,[r1,#4]
;;;146    }
000006  4770              BX       lr
                          ENDP

                  |L4.8|
                          DCD      ||area_number.9||+0x14

                          AREA ||.data||, DATA, ALIGN=0

                  ktProtocolImageInfo
000000  20000001          DCWU     0x2000,0x0001

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  ktProtocolImageControl
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  tProtocolImage
                          DCDU     ktProtocolImageInfo
                          DCDU     ktProtocolImageControl
                          DCDU     0x00000000
                          DCDU     0x00000000
                          DCDU     0x00000000
                  tProtocolLog
                          DCDU     ktProtocolLogInfo
                          DCDU     ktProtocolLogControl
                          DCDU     0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  ktProtocolLogInfo
000000  20000001          DCWU     0x2000,0x0001

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  ktProtocolLogControl
                          DCDU     0x00000001
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Protocol\\protocol_log.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___14_protocol_log_c_c2a5ecd9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____REVSH|
#line 402
|__asm___14_protocol_log_c_c2a5ecd9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____RRX|
#line 587
|__asm___14_protocol_log_c_c2a5ecd9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
