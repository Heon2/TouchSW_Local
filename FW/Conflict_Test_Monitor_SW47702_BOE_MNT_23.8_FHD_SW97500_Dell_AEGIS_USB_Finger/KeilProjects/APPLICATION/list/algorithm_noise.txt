; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_noise.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_noise.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm_noise.crf ..\..\App\Algorithm\Noise\algorithm_noise.c]
                          THUMB

                          AREA ||i.algorithm_Check_FreqHopping||, CODE, READONLY, ALIGN=2

                  algorithm_Check_FreqHopping PROC
;;;409    
;;;410    bool_t algorithm_Check_FreqHopping(void)
000000  f8dfc0b8          LDR      r12,|L1.188|
;;;411    {
000004  b410              PUSH     {r4}
;;;412    	bool_t bRet = NO;
;;;413    
;;;414    	if (ptAppInfo->eNoiseStatus == NOISE_FREQ_HOPPING)
000006  f8dc100c          LDR      r1,[r12,#0xc]  ; ptAppInfo
00000a  2000              MOVS     r0,#0                 ;412
00000c  2301              MOVS     r3,#1
00000e  7c4c              LDRB     r4,[r1,#0x11]
000010  4602              MOV      r2,r0
000012  2c01              CMP      r4,#1
000014  d017              BEQ      |L1.70|
;;;415    	{
;;;416    		ptAppInfo->eNoiseStatus = NOISE_NONE;
;;;417    		ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;418    		ptAppInfo->ucHoppFrameCnt = 0;
;;;419    //		usHoppingStatus = FREQ_HOPPING_CHANGED;
;;;420    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;421    		ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
;;;422    		ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
;;;423    		ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
;;;424    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;425    		bRet = YES;
;;;426    	}
;;;427    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;428    	else
;;;429    	{
;;;430    		if(thisInfo->bTouchExpect)
000016  f8dcc008          LDR      r12,[r12,#8]  ; thisInfo
00001a  f89ccfb5          LDRB     r12,[r12,#0xfb5]
00001e  f1bc0f00          CMP      r12,#0
000022  d019              BEQ      |L1.88|
;;;431    		{
;;;432    			ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
000024  f8c12016          STR      r2,[r1,#0x16]
;;;433    			ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
000028  f8c1201a          STR      r2,[r1,#0x1a]
;;;434    			
;;;435    			if(ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart == YES)
00002c  f891c015          LDRB     r12,[r1,#0x15]
000030  f1bc0f01          CMP      r12,#1
;;;436    			{
;;;437    				ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
;;;438    				ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
;;;439    				ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;440    				ptAppInfo->ucHoppFrameCnt = 0;
;;;441    				bRet = YES;
;;;442    			}
;;;443    		}
;;;444    		else
;;;445    		{
;;;446    			if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;447    			{
;;;448    				ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt++;
;;;449    				if(ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt > DEF_FREQ_HOPPING_BASELINE_UPDATE_CHECK_CNT_THD)
;;;450    				{
;;;451    					ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
;;;452    					ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = YES;
;;;453    					ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;454    					ptAppInfo->ucHoppFrameCnt = 0;
;;;455    					bRet = YES;
;;;456    				}
;;;457    			}
;;;458    			else
;;;459    			{
;;;460    				if(ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart == YES)
;;;461    				{
;;;462    					ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt++;
;;;463    					if(ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt > DEF_FREQ_HOPPING_BASELINE_UPDATE_CONTI_CNT_THD)
;;;464    					{
;;;465    						ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
;;;466    						ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
;;;467    						ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;468    						ptAppInfo->ucHoppFrameCnt = 0;
;;;469    						bRet = YES;
;;;470    					}
;;;471    				}
;;;472    			}
;;;473    		}
;;;474    	}
;;;475    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;476    
;;;477    	return bRet;
;;;478    }
000034  bf1c              ITT      NE
000036  bc10              POPNE    {r4}
000038  4770              BXNE     lr
00003a  754a              STRB     r2,[r1,#0x15]         ;438
00003c  74cb              STRB     r3,[r1,#0x13]         ;439
00003e  750a              STRB     r2,[r1,#0x14]         ;440
                  |L1.64|
000040  bc10              POP      {r4}
000042  2001              MOVS     r0,#1                 ;425
000044  4770              BX       lr
                  |L1.70|
000046  744a              STRB     r2,[r1,#0x11]         ;416
000048  74cb              STRB     r3,[r1,#0x13]         ;417
00004a  750a              STRB     r2,[r1,#0x14]         ;418
00004c  754a              STRB     r2,[r1,#0x15]         ;421
00004e  f8c12016          STR      r2,[r1,#0x16]         ;422
000052  f8c1201a          STR      r2,[r1,#0x1a]         ;423
000056  e7f3              B        |L1.64|
                  |L1.88|
000058  f891c012          LDRB     r12,[r1,#0x12]        ;446
00005c  f1bc0f01          CMP      r12,#1                ;446
000060  d019              BEQ      |L1.150|
000062  f891c015          LDRB     r12,[r1,#0x15]        ;460
000066  f1bc0f01          CMP      r12,#1                ;460
00006a  bf1c              ITT      NE
00006c  bc10              POPNE    {r4}
00006e  4770              BXNE     lr
000070  f8d1c01a          LDR      r12,[r1,#0x1a]        ;462
000074  f10c0c01          ADD      r12,r12,#1            ;462
000078  f8c1c01a          STR      r12,[r1,#0x1a]        ;462
00007c  f1bc0f0a          CMP      r12,#0xa              ;463
000080  bf9c              ITT      LS
000082  bc10              POPLS    {r4}
000084  4770              BXLS     lr
000086  f8c1201a          STR      r2,[r1,#0x1a]         ;465
00008a  754a              STRB     r2,[r1,#0x15]         ;466
00008c  74cb              STRB     r3,[r1,#0x13]         ;467
00008e  750a              STRB     r2,[r1,#0x14]         ;468
000090  bc10              POP      {r4}
000092  2001              MOVS     r0,#1                 ;469
000094  4770              BX       lr
                  |L1.150|
000096  f8d1c016          LDR      r12,[r1,#0x16]        ;448
00009a  f10c0c01          ADD      r12,r12,#1            ;448
00009e  f8c1c016          STR      r12,[r1,#0x16]        ;448
0000a2  f1bc0f64          CMP      r12,#0x64             ;449
0000a6  bf9c              ITT      LS
0000a8  bc10              POPLS    {r4}
0000aa  4770              BXLS     lr
0000ac  f8c12016          STR      r2,[r1,#0x16]         ;451
0000b0  754b              STRB     r3,[r1,#0x15]         ;452
0000b2  74cb              STRB     r3,[r1,#0x13]         ;453
0000b4  750a              STRB     r2,[r1,#0x14]         ;454
0000b6  bc10              POP      {r4}
0000b8  2001              MOVS     r0,#1                 ;455
0000ba  4770              BX       lr
;;;479    
                          ENDP

                  |L1.188|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_detect||, CODE, READONLY, ALIGN=2

                  algorithm_noise_detect PROC
;;;396    
;;;397    bool_t algorithm_noise_detect(void)
000000  4805              LDR      r0,|L2.24|
;;;398    {
;;;399    	if(ptAppInfo->eNoiseStatus == NOISE_FREQ_HOPPING)
000002  68c0              LDR      r0,[r0,#0xc]  ; ptAppInfo
000004  7c41              LDRB     r1,[r0,#0x11]
000006  2901              CMP      r1,#1
;;;400    	{
;;;401    		ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;402    		return TRUE;
;;;403    	}
;;;404    	else
;;;405    	{
;;;406    		return FALSE;
000008  bf1c              ITT      NE
00000a  2000              MOVNE    r0,#0
;;;407    	}
;;;408    }
00000c  4770              BXNE     lr
00000e  2101              MOVS     r1,#1                 ;401
000010  74c1              STRB     r1,[r0,#0x13]         ;401
000012  4608              MOV      r0,r1                 ;402
000014  4770              BX       lr
;;;409    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_detection||, CODE, READONLY, ALIGN=2

                  algorithm_noise_detection PROC
;;;72     
;;;73     void algorithm_noise_detection(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;74     {
;;;75     //	int16_t  i, r, c; // NOTE : not used
;;;76     	int16_t i;
;;;77     	int16_t MaxCellNum = INT16_MIN;
;;;78     	uint8_t CurrFinger = 0;
;;;79     	uint8_t CurrHoppingMode = ptAppInfo->eSelectFreq;//custom_GetHoppingFreq();
000004  4d79              LDR      r5,|L3.492|
;;;80     	uint16_t CurrMaxVal = 0;
;;;81     	uint16_t AvgMaxDiff = 0;
000006  2700              MOVS     r7,#0
000008  4b77              LDR      r3,|L3.488|
00000a  68e8              LDR      r0,[r5,#0xc]          ;79  ; ptAppInfo
;;;82     	uint16_t LabelNum = 0;
00000c  463c              MOV      r4,r7
;;;83     //	bool_t   bHoppingFlag = 0; // NOTE : not used
;;;84     
;;;85     	// Need Filtering
;;;86     	if( CurrHoppingMode == thisInfo->tNoise.ucPrevHoppingMode )
00000e  463e              MOV      r6,r7
000010  f8908012          LDRB     r8,[r0,#0x12]         ;79
000014  68a8              LDR      r0,[r5,#8]  ; thisInfo
000016  f8901f3a          LDRB     r1,[r0,#0xf3a]
00001a  4541              CMP      r1,r8
00001c  d17e              BNE      |L3.284|
;;;87     	{
;;;88     		if( thisInfo->bTouchExpect )//&& thisInfo->bRecalFlag == NO )
00001e  f8901fb5          LDRB     r1,[r0,#0xfb5]
000022  2900              CMP      r1,#0
000024  d07a              BEQ      |L3.284|
;;;89     		{
;;;90     			if( thisInfo->tNoise.ucInitFCnt >= thisModeConf->Noise.ucDiscardFrameNum )
000026  f8d5c004          LDR      r12,[r5,#4]  ; thisModeConf
00002a  f890bf33          LDRB     r11,[r0,#0xf33]
00002e  f89c11e3          LDRB     r1,[r12,#0x1e3]
000032  458b              CMP      r11,r1
;;;91     			{
;;;92     				for( i=MAX_TOUCH_; i--; )
000034  bf24              ITT      CS
000036  220a              MOVCS    r2,#0xa
000038  2101              MOVCS    r1,#1
00003a  d35d              BCC      |L3.248|
                  |L3.60|
00003c  1e52              SUBS     r2,r2,#1              ;90
00003e  b212              SXTH     r2,r2
;;;93     				{
;;;94     					if( MaxCellNum < thisInfo->tLabel.usValidCellCnt[i] )
000040  eb000942          ADD      r9,r0,r2,LSL #1
000044  f8b9a32b          LDRH     r10,[r9,#0x32b]
000048  459a              CMP      r10,r3
;;;95     					{
;;;96     						MaxCellNum = thisInfo->tLabel.usValidCellCnt[i];
00004a  bfc8              IT       GT
00004c  f9b9332b          LDRSHGT  r3,[r9,#0x32b]
000050  1c49              ADDS     r1,r1,#1
000052  290a              CMP      r1,#0xa
000054  ddf2              BLE      |L3.60|
;;;97     					}
;;;98     				}
;;;99     
;;;100    				if( MaxCellNum >= thisModeConf->Noise.ucCellCntThd )
000056  f89c11e4          LDRB     r1,[r12,#0x1e4]
00005a  4299              CMP      r1,r3
00005c  dc4c              BGT      |L3.248|
;;;101    				{
;;;102    					CurrFinger = thisInfo->tLabel.ucValidNum;
00005e  f89012aa          LDRB     r1,[r0,#0x2aa]
;;;103    
;;;104    					if(CurrFinger==2)
000062  2902              CMP      r1,#2
;;;105    						thisInfo->tNoise.uc2FingerCnt++;
;;;106    					else
;;;107    						thisInfo->tNoise.uc2FingerCnt=0;
000064  bf18              IT       NE
000066  f8a06f36          STRHNE   r6,[r0,#0xf36]
00006a  d058              BEQ      |L3.286|
                  |L3.108|
;;;108    
;;;109    					if( CurrFinger == thisInfo->tNoise.ucPrevFinger )
00006c  f8902f39          LDRB     r2,[r0,#0xf39]
000070  428a              CMP      r2,r1
000072  d141              BNE      |L3.248|
;;;110    					{
;;;111    						CurrMaxVal = thisInfo->tDelta.iMaxStrength;
000074  f8b01015          LDRH     r1,[r0,#0x15]
;;;112    						if( thisInfo->tNoise.ucInitFCnt != thisModeConf->Noise.ucDiscardFrameNum)
000078  f89c21e3          LDRB     r2,[r12,#0x1e3]
00007c  b289              UXTH     r1,r1                 ;111
00007e  4593              CMP      r11,r2
000080  d024              BEQ      |L3.204|
;;;113    						{
;;;114    							int16_t Diff;
;;;115    
;;;116    							Diff = (CurrMaxVal - thisInfo->tNoise.usPrevMaxVal);
000082  f8b02f3b          LDRH     r2,[r0,#0xf3b]
;;;117    
;;;118    							thisInfo->tNoise.ulSumMaxDiff -= thisInfo->tNoise.usMaxValBuf[thisInfo->tNoise.ucBCnt];
000086  f8903f35          LDRB     r3,[r0,#0xf35]
00008a  1a89              SUBS     r1,r1,r2              ;116
00008c  eb000343          ADD      r3,r0,r3,LSL #1
000090  f8d02f3d          LDR      r2,[r0,#0xf3d]
000094  f8b3cf41          LDRH     r12,[r3,#0xf41]
000098  b209              SXTH     r1,r1                 ;116
00009a  eba2020c          SUB      r2,r2,r12
00009e  f8c02f3d          STR      r2,[r0,#0xf3d]
;;;119    
;;;120    							if( Diff < 0 )
0000a2  2900              CMP      r1,#0
;;;121    							{
;;;122    								Diff = -Diff;
0000a4  bfbc              ITT      LT
0000a6  4249              RSBLT    r1,r1,#0
0000a8  b209              SXTHLT   r1,r1
;;;123    							}
;;;124    
;;;125    							thisInfo->tNoise.usMaxValBuf[thisInfo->tNoise.ucBCnt] = Diff;
0000aa  f8a31f41          STRH     r1,[r3,#0xf41]
;;;126    							thisInfo->tNoise.ulSumMaxDiff += Diff;
0000ae  f8d02f3d          LDR      r2,[r0,#0xf3d]
0000b2  4411              ADD      r1,r1,r2
0000b4  f8c01f3d          STR      r1,[r0,#0xf3d]
;;;127    							
;;;128    							thisInfo->tNoise.ucBCnt++;
0000b8  f8901f35          LDRB     r1,[r0,#0xf35]
0000bc  1c49              ADDS     r1,r1,#1
0000be  b2c9              UXTB     r1,r1
0000c0  f8801f35          STRB     r1,[r0,#0xf35]
;;;129    							if( thisInfo->tNoise.ucBCnt == (NOISE_DETECTION_FRAME_NUM-1) )
0000c4  2913              CMP      r1,#0x13
;;;130    							{
;;;131    								thisInfo->tNoise.ucBCnt = 0;
0000c6  bf08              IT       EQ
0000c8  f8806f35          STRBEQ   r6,[r0,#0xf35]
                  |L3.204|
;;;132    							}
;;;133    						}
;;;134    
;;;135    						thisInfo->tNoise.ucFCnt++;
0000cc  f8901f34          LDRB     r1,[r0,#0xf34]
0000d0  1c49              ADDS     r1,r1,#1
0000d2  b2c9              UXTB     r1,r1
0000d4  f8801f34          STRB     r1,[r0,#0xf34]
;;;136    
;;;137    						if( thisInfo->tNoise.ucFCnt == (NOISE_DETECTION_FRAME_NUM) )
0000d8  2914              CMP      r1,#0x14
0000da  d026              BEQ      |L3.298|
;;;138    						{
;;;139    							thisInfo->tNoise.ucFCnt = 0;
;;;140    							thisInfo->tNoise.bDetectStart = 1;
;;;141    						}
;;;142    
;;;143    						if( thisInfo->tNoise.bDetectStart )
0000dc  f8901f38          LDRB     r1,[r0,#0xf38]
0000e0  b151              CBZ      r1,|L3.248|
;;;144    						{
;;;145    							AvgMaxDiff = thisInfo->tNoise.ulSumMaxDiff / (NOISE_DETECTION_FRAME_NUM-1);
0000e2  bf00              NOP      
                  |L3.228|
0000e4  f8dfc108          LDR      r12,|L3.496|
0000e8  f8d03f3d          LDR      r3,[r0,#0xf3d]
0000ec  4662              MOV      r2,r12
0000ee  2100              MOVS     r1,#0
0000f0  fbe3210c          UMLAL    r2,r1,r3,r12
0000f4  f3c1170f          UBFX     r7,r1,#4,#16
                  |L3.248|
;;;146    						}
;;;147    					}
;;;148    				}
;;;149    			}
;;;150    			thisInfo->tNoise.ucPrevFinger = thisInfo->tLabel.ucValidNum;
0000f8  f89012aa          LDRB     r1,[r0,#0x2aa]
0000fc  f8801f39          STRB     r1,[r0,#0xf39]
;;;151    			thisInfo->tNoise.usPrevMaxVal = thisInfo->tDelta.iMaxStrength;
000100  f8b01015          LDRH     r1,[r0,#0x15]
000104  f8a01f3b          STRH     r1,[r0,#0xf3b]
;;;152    
;;;153    			if( thisInfo->tNoise.ucInitFCnt < NOISE_DETECTION_FRAME_NUM )
000108  f8901f33          LDRB     r1,[r0,#0xf33]
00010c  2914              CMP      r1,#0x14
00010e  bf3c              ITT      CC
000110  1c49              ADDCC    r1,r1,#1
;;;154    			{
;;;155    				thisInfo->tNoise.ucInitFCnt++;
000112  f8801f33          STRBCC   r1,[r0,#0xf33]
;;;156    			}
;;;157    			thisInfo->tNoise.ucTouchOffCnt = 0;
000116  f8806f7f          STRB     r6,[r0,#0xf7f]
00011a  e00e              B        |L3.314|
                  |L3.284|
00011c  e00b              B        |L3.310|
                  |L3.286|
00011e  f8b02f36          LDRH     r2,[r0,#0xf36]        ;105
000122  1c52              ADDS     r2,r2,#1              ;105
000124  f8a02f36          STRH     r2,[r0,#0xf36]        ;105
000128  e7a0              B        |L3.108|
                  |L3.298|
00012a  f8806f34          STRB     r6,[r0,#0xf34]        ;139
00012e  2101              MOVS     r1,#1                 ;140
000130  f8801f38          STRB     r1,[r0,#0xf38]        ;140
000134  e7d6              B        |L3.228|
                  |L3.310|
;;;158    		}
;;;159    		else // bExpect
;;;160    		{
;;;161    			algorithm_noise_initialize();
000136  f7fffffe          BL       algorithm_noise_initialize
                  |L3.314|
;;;162    		}
;;;163    	}
;;;164    	else // Frequency Change
;;;165    	{
;;;166    		algorithm_noise_initialize();
;;;167    	}
;;;168    	thisInfo->tNoise.ucPrevHoppingMode = CurrHoppingMode;
00013a  68a8              LDR      r0,[r5,#8]  ; thisInfo
00013c  f8808f3a          STRB     r8,[r0,#0xf3a]
;;;169       
;;;170    	if(thisInfo->tNoise.ucNoiseFrameCnt >= 100)
000140  f8901f7d          LDRB     r1,[r0,#0xf7d]
000144  2964              CMP      r1,#0x64
;;;171    	{
;;;172    		thisInfo->tNoise.ucNoiseFrameCnt = 0;
000146  bf2e              ITEE     CS
000148  f8806f7d          STRBCS   r6,[r0,#0xf7d]
00014c  1c49              ADDCC    r1,r1,#1
;;;173    	}
;;;174    	else
;;;175    	{      
;;;176    		thisInfo->tNoise.ucNoiseFrameCnt++;
00014e  f8801f7d          STRBCC   r1,[r0,#0xf7d]
;;;177    	}
;;;178    
;;;179    	
;;;180    	for( i=0; i<MAX_TOUCH_; i++)
000152  2100              MOVS     r1,#0
                  |L3.340|
;;;181    	{
;;;182    		if( thisInfo->tCoord.tPos.vusS[i] > 0 )
000154  eb000241          ADD      r2,r0,r1,LSL #1
000158  f8b234ce          LDRH     r3,[r2,#0x4ce]
00015c  2b00              CMP      r3,#0
;;;183    		{
;;;184    			LabelNum++;
00015e  bf1c              ITT      NE
000160  1c63              ADDNE    r3,r4,#1
000162  b29c              UXTHNE   r4,r3
000164  f8b224d0          LDRH     r2,[r2,#0x4d0]        ;182
000168  2a00              CMP      r2,#0                 ;182
00016a  bf1c              ITT      NE
00016c  1c62              ADDNE    r2,r4,#1
00016e  b294              UXTHNE   r4,r2
000170  1c89              ADDS     r1,r1,#2
000172  b209              SXTH     r1,r1
000174  290a              CMP      r1,#0xa
000176  dbed              BLT      |L3.340|
;;;185    		}
;;;186    	}
;;;187    
;;;188    	if((thisInfo->tDelta.iGroupedCellCnt > 0 && LabelNum > 0) || (thisInfo->tDelta.iGroupedCellCnt > 0 && thisInfo->tDelta.iMaxStrength > 20))
000178  f8d01011          LDR      r1,[r0,#0x11]
00017c  b1b9              CBZ      r1,|L3.430|
00017e  b91c              CBNZ     r4,|L3.392|
000180  f8d01015          LDR      r1,[r0,#0x15]
000184  2914              CMP      r1,#0x14
000186  dd04              BLE      |L3.402|
                  |L3.392|
;;;189    	{
;;;190    		thisInfo->tNoise.ucNoiseFrameCnt = 0;
000188  f8806f7d          STRB     r6,[r0,#0xf7d]
;;;191    		thisInfo->tNoise.ucSetHoppingReady = NO;
00018c  f8806f7e          STRB     r6,[r0,#0xf7e]
000190  e019              B        |L3.454|
                  |L3.402|
;;;192    	}
;;;193    
;;;194    
;;;195    	if((thisInfo->tDelta.iGroupedCellCnt > 0 && thisInfo->tNoise.ucSetHoppingReady == NO) && thisInfo->tNoise.ucNoiseFrameCnt > 20)
000192  f8901f7e          LDRB     r1,[r0,#0xf7e]
000196  b969              CBNZ     r1,|L3.436|
000198  f8901f7d          LDRB     r1,[r0,#0xf7d]
00019c  2914              CMP      r1,#0x14
00019e  d912              BLS      |L3.454|
;;;196    	{		
;;;197    		if(LabelNum < 1)
0001a0  b98c              CBNZ     r4,|L3.454|
;;;198    		{
;;;199    			thisInfo->tNoise.ucNoiseFrameCnt = 0;
0001a2  f8806f7d          STRB     r6,[r0,#0xf7d]
;;;200    			thisInfo->tNoise.ucSetHoppingReady = YES;
0001a6  2101              MOVS     r1,#1
0001a8  f8801f7e          STRB     r1,[r0,#0xf7e]
0001ac  e00b              B        |L3.454|
                  |L3.430|
;;;201    		}
;;;202    		else
;;;203    		{
;;;204              thisInfo->tNoise.ucSetHoppingReady = NO;
;;;205    		}
;;;206    	}
;;;207    
;;;208    	if((thisInfo->tNoise.ucSetHoppingReady && thisInfo->tNoise.ucNoiseFrameCnt == 5) && LabelNum < 1)
0001ae  f8901f7e          LDRB     r1,[r0,#0xf7e]
0001b2  b141              CBZ      r1,|L3.454|
                  |L3.436|
0001b4  f8901f7d          LDRB     r1,[r0,#0xf7d]
0001b8  2905              CMP      r1,#5
0001ba  bf02              ITTT     EQ
0001bc  2c00              CMPEQ    r4,#0
;;;209    	{
;;;210    //		bHoppingFlag = YES; // NOTE : not used
;;;211    		thisInfo->tNoise.ucSetHoppingReady = NO;
0001be  f8806f7e          STRBEQ   r6,[r0,#0xf7e]
;;;212    		thisInfo->tNoise.ucNoiseFrameCnt = 0;
0001c2  f8806f7d          STRBEQ   r6,[r0,#0xf7d]
                  |L3.454|
;;;213    	}
;;;214    
;;;215    	if( thisInfo->tNoise.NoiseFlag > 0 )
0001c6  f8901f81          LDRB     r1,[r0,#0xf81]
0001ca  b121              CBZ      r1,|L3.470|
;;;216    	{
;;;217    		//thisInfo->tNoise.NoiseFlag = 0;
;;;218    		AvgMaxDiff = thisModeConf->Noise.ucHoppingThd + 1;
0001cc  6869              LDR      r1,[r5,#4]  ; thisModeConf
0001ce  f89111e5          LDRB     r1,[r1,#0x1e5]
0001d2  f1010701          ADD      r7,r1,#1
                  |L3.470|
;;;219    	}
;;;220    	
;;;221    	if(AvgMaxDiff > thisModeConf->Noise.ucHoppingThd)
0001d6  6869              LDR      r1,[r5,#4]  ; thisModeConf
0001d8  f89111e5          LDRB     r1,[r1,#0x1e5]
0001dc  42b9              CMP      r1,r7
;;;222    	{
;;;223    		AvgMaxDiff = thisModeConf->Noise.ucHoppingThd;
;;;224    		thisInfo->tNoise.NoiseFlag = 0;
0001de  bf38              IT       CC
0001e0  f8806f81          STRBCC   r6,[r0,#0xf81]
;;;225    	}
;;;226    }
0001e4  e8bd9ff0          POP      {r4-r12,pc}
;;;227    
                          ENDP

                  |L3.488|
                          DCD      0xffff8000
                  |L3.492|
                          DCD      ||.data||
                  |L3.496|
                          DCD      0xd79435e5

                          AREA ||i.algorithm_noise_detection_v2||, CODE, READONLY, ALIGN=2

                  algorithm_noise_detection_v2 PROC
;;;228    uint8_t FreqChangeDelay = 0, CheckHoppingReliability = 0, HoppingThdCnt = 0;
;;;229    void algorithm_noise_detection_v2(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;230    {
;;;231    	int16_t i,cl;
;;;232    	uint8_t CurrFinger = 0;
;;;233    	uint8_t CurrHoppingMode = ptAppInfo->eSelectFreq;
000004  4d87              LDR      r5,|L4.548|
;;;234    	uint16_t CurrMaxVal = 0, CurrRealMaxVal = 0;
000006  2700              MOVS     r7,#0
;;;235    	int16_t Diff,RealDiff,DiffCnt;
;;;236    	int dist = 0;
000008  4638              MOV      r0,r7
00000a  68eb              LDR      r3,[r5,#0xc]          ;233  ; ptAppInfo
;;;237    //#if USED_NORMAL_NI_SENSING
;;;238    //	uint16_t CurrMaxVal_NI = 0;
;;;239    //	uint16_t AvgMaxDiff_NI = 0;
;;;240    //#endif /* USED_NORMAL_NI_SENSING */
;;;241    	tCoordInfo_t 	*temp_coord;
;;;242    
;;;243    	temp_coord = &thisInfo->tCoord;
00000c  68a9              LDR      r1,[r5,#8]  ; thisInfo
00000e  463e              MOV      r6,r7
000010  f8939012          LDRB     r9,[r3,#0x12]         ;233
000014  f5017a57          ADD      r10,r1,#0x35c
;;;244    
;;;245    //	if(HoppingInitFlag){			//For Idle mode
;;;246    //		HoppingInitFlag = NO;
;;;247    //		add_hopping_thd = 0;
;;;248    //	}
;;;249    
;;;250    	//If stay at hopping frequency for a long time, Go back to main frequency
;;;251    	if(CurrHoppingMode == FREQ_HOPP1)
;;;252    	{
;;;253    		if(thisInfo->bTouchExpect)
;;;254    			thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;255    
;;;256    		if(thisInfo->ulHoppMainRollbackCheckCount++ > thisInfo->ulHoppMainRollbackFrameCntTHD){
;;;257    			thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;258    			ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;
000018  f04f0b01          MOV      r11,#1
00001c  f5015280          ADD      r2,r1,#0x1000         ;254
000020  f1b90f02          CMP      r9,#2                 ;251
;;;259    			RealDiffIIR = 0;
;;;260    			return;
;;;261    		}
;;;262    	}
;;;263    	else{
;;;264    		thisInfo->ulHoppMainRollbackCheckCount = 0;
000024  bf18              IT       NE
000026  63d6              STRNE    r6,[r2,#0x3c]
000028  d014              BEQ      |L4.84|
;;;265    	}
;;;266    	
;;;267    	if(CurrHoppingMode == thisInfo->tNoise.ucPrevHoppingMode)
00002a  bf00              NOP      
                  |L4.44|
00002c  f8912f3a          LDRB     r2,[r1,#0xf3a]
000030  454a              CMP      r2,r9
000032  f04080ce          BNE.W    |L4.466|
;;;268    	{
;;;269    		if(CheckHoppingReliability)
000036  786a              LDRB     r2,[r5,#1]  ; CheckHoppingReliability
000038  b132              CBZ      r2,|L4.72|
;;;270    		{
;;;271    			if(!thisInfo->bTouchExpect){
00003a  f8912fb5          LDRB     r2,[r1,#0xfb5]
00003e  2a00              CMP      r2,#0
;;;272    				ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;		//Go back to previous state
000040  bf08              IT       EQ
000042  f883b011          STRBEQ   r11,[r3,#0x11]
;;;273    			}
;;;274    			CheckHoppingReliability = NO;
000046  706e              STRB     r6,[r5,#1]
                  |L4.72|
;;;275    		}
;;;276    		
;;;277    		if(FreqChangeDelay){
000048  782a              LDRB     r2,[r5,#0]  ; FreqChangeDelay
00004a  2a00              CMP      r2,#0
;;;278    			FreqChangeDelay--;
00004c  bf18              IT       NE
00004e  1e50              SUBNE    r0,r2,#1
000050  d17e              BNE      |L4.336|
000052  e013              B        |L4.124|
                  |L4.84|
000054  f891cfb5          LDRB     r12,[r1,#0xfb5]       ;253
000058  f1bc0f00          CMP      r12,#0                ;253
00005c  bf18              IT       NE                    ;254
00005e  63d6              STRNE    r6,[r2,#0x3c]         ;254
000060  f8d2c03c          LDR      r12,[r2,#0x3c]        ;256
000064  f10c0401          ADD      r4,r12,#1             ;256
000068  63d4              STR      r4,[r2,#0x3c]         ;256
00006a  6b94              LDR      r4,[r2,#0x38]         ;256
00006c  45a4              CMP      r12,r4                ;256
00006e  d9dd              BLS      |L4.44|
000070  63d6              STR      r6,[r2,#0x3c]         ;258
000072  f883b011          STRB     r11,[r3,#0x11]        ;258
000076  616e              STR      r6,[r5,#0x14]         ;260  ; RealDiffIIR
;;;279    			
;;;280    		}
;;;281    		else{
;;;282    			CurrFinger = thisInfo->tLabel.ucValidNum;
;;;283    			if(thisInfo->bTouchExpect)
;;;284    			{
;;;285    				if(CurrFinger == thisInfo->tNoise.ucPrevFinger)
;;;286    				{
;;;287    					for (cl = 0; cl < MAX_TOUCH_; cl++){
;;;288    						if(temp_coord->tPos.vusS[cl] > 0){
;;;289    							if( temp_coord->bIsMoving[cl] == YES || temp_coord->ucIdMappedCnt[cl] >= thisModeConf->Noise.ucDiscardFrameNum )	//IsMoving
;;;290    							{
;;;291    //								CurrMaxVal = (thisInfo->tCoord.tPos.vusS[cl]+thisInfo->tCoord.RealMaxDelta[cl])>>2;
;;;292    								CurrMaxVal = thisInfo->tCoord.RealMaxDelta[cl];
;;;293    //								CurrMaxVal = (thisInfo->tCoord.tPos.vusS[cl]>>2) + thisInfo->tCoord.RealMaxDelta[cl];
;;;294    //								CurrMaxVal = (thisInfo->tCoord.tPos.vusS[cl]+thisInfo->tCoord.tPos.MaxDelta[cl])>>2;
;;;295    								if(CurrRealMaxVal < CurrMaxVal){
;;;296    									CurrRealMaxVal = CurrMaxVal;
;;;297    									if(temp_coord->tOrgPastPos[0].vusS[cl] > 0){
;;;298    										dist = algorithm_coord_calc_distance(temp_coord->tOrgPastPos[0].tXY[cl],temp_coord->tPos.tXY[cl]);
;;;299    									}
;;;300    									else{
;;;301    										dist = 0;
;;;302    									}							
;;;303    								}
;;;304    							}
;;;305    						}//END touch ID loop
;;;306    					}
;;;307    					
;;;308    					RealDiff = 0;
;;;309    					DiffCnt = 0;
;;;310    					if(CurrRealMaxVal > 0){
;;;311    						for(i=0;i<NOISE_DETECTION_FRAME_NUM;i++){
;;;312    							if(thisInfo->tNoise.usMaxValBuf[i] > 0 && thisInfo->tNoise.ucTouchNumBuf[i] == CurrFinger){
;;;313    								Diff = abs(CurrRealMaxVal - thisInfo->tNoise.usMaxValBuf[i]);
;;;314    								RealDiff += Diff;
;;;315    								DiffCnt++;
;;;316    							}
;;;317    						}
;;;318    						if(DiffCnt) RealDiff /= DiffCnt;
;;;319    						
;;;320    						RealDiff = RealDiff - (dist>>(POS_BOOST_SHIFT_-5));
;;;321    						if(RealDiff < 0 ) RealDiff = 0;
;;;322    						RealDiffIIR = ((RealDiff + RealDiffIIR*7)>>3);
;;;323    //						RealDiffIIR = RealDiff;
;;;324    						//TEST_CODE
;;;325    						
;;;326    						
;;;327    						thisInfo->tNoise.usMaxValBuf[thisInfo->tNoise.ucNoiseFrameCnt] = CurrRealMaxVal;
;;;328    						thisInfo->tNoise.ucTouchNumBuf[thisInfo->tNoise.ucNoiseFrameCnt] = CurrFinger;
;;;329    						if(thisInfo->tNoise.ucNoiseFrameCnt < NOISE_DETECTION_FRAME_NUM-1)	thisInfo->tNoise.ucNoiseFrameCnt++;
;;;330    						else																thisInfo->tNoise.ucNoiseFrameCnt = 0;
;;;331    					}			
;;;332    					if(RealDiffIIR < 10 && add_hopping_thd)
;;;333    						HoppingThdCnt++;
;;;334    					else
;;;335    						HoppingThdCnt = 0;
;;;336    					if(HoppingThdCnt > 10){
;;;337    						add_hopping_thd--;
;;;338    						HoppingThdCnt = 0;
;;;339    					}
;;;340    				}
;;;341    				else{	//if(CurrFinger != thisInfo->tNoise.ucPrevFinger)
;;;342    					algorithm_noise_initialize();	
;;;343    					FreqChangeDelay = 5;
;;;344    				}
;;;345    			}
;;;346    			else 
;;;347    			{
;;;348    				if(add_hopping_thd)
;;;349    					HoppingThdCnt++;
;;;350    				else
;;;351    					HoppingThdCnt = 0;
;;;352    				if(HoppingThdCnt > 100){
;;;353    					add_hopping_thd--;
;;;354    					HoppingThdCnt = 0;
;;;355    				}
;;;356    				algorithm_noise_initialize();
;;;357    			}
;;;358    		}
;;;359    	}// Frequency Change
;;;360    	else
;;;361    	{
;;;362    //		thisInfo->tNoise.ucSetHoppingReady = NO;
;;;363    		FreqChangeDelay = 10;
;;;364    		algorithm_noise_initialize();
;;;365    	}
;;;366    
;;;367    	thisInfo->tNoise.ucPrevFinger = thisInfo->tLabel.ucValidNum;
;;;368    //	thisInfo->tNoise.usPrevMaxVal = thisInfo->tDelta.iMaxStrength;
;;;369    	thisInfo->tNoise.ucPrevHoppingMode = CurrHoppingMode;
;;;370    	
;;;371    	if( RealDiffIIR > thisModeConf->Noise.ucHoppingThd + add_hopping_thd )
;;;372    	{
;;;373    //		dbgbuf[3]++;
;;;374    //		if(add_hopping_thd < RealDiffIIR - thisModeConf->Noise.ucHoppingThd)
;;;375    //			add_hopping_thd = RealDiffIIR - thisModeConf->Noise.ucHoppingThd;
;;;376    		add_hopping_thd += 15;
;;;377    		if(add_hopping_thd > thisModeConf->Noise.ucHoppingThd)
;;;378    			add_hopping_thd = thisModeConf->Noise.ucHoppingThd;
;;;379    
;;;380    		ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;
;;;381    		if(thisInfo->bTouchExpect)
;;;382    			CheckHoppingReliability = YES;
;;;383    
;;;384    		RealDiffIIR = 0;
;;;385    	}
;;;386    
;;;387    //	dbgbuf[0] = ptAppInfo->eSelectFreq;
;;;388    //	dbgbuf[1] = RealDiffIIR;
;;;389    //	dbgbuf[2] = add_hopping_thd;
;;;390    //	dbgbuf[3] = CurrRealMaxVal;
;;;391    //	dbgbuf[4] = HoppingRollBackCnt;
;;;392    //
;;;393    //	dbgbuf[8] = thisInfo->tCoord.tPos.vusS[0];
;;;394    //	dbgbuf[9] = thisInfo->tCoord.RealMaxDelta[0];
;;;395    }
000078  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.124|
00007c  f8912fb5          LDRB     r2,[r1,#0xfb5]        ;283
000080  f89182aa          LDRB     r8,[r1,#0x2aa]        ;282
000084  2a00              CMP      r2,#0                 ;283
000086  d07d              BEQ      |L4.388|
000088  f8911f39          LDRB     r1,[r1,#0xf39]        ;285
00008c  4541              CMP      r1,r8                 ;285
00008e  bf08              IT       EQ                    ;287
000090  2400              MOVEQ    r4,#0                 ;287
000092  d178              BNE      |L4.390|
                  |L4.148|
000094  eb0a0144          ADD      r1,r10,r4,LSL #1      ;288
000098  f8b12172          LDRH     r2,[r1,#0x172]        ;288
00009c  b31a              CBZ      r2,|L4.230|
00009e  eb0a0204          ADD      r2,r10,r4             ;289
0000a2  f8923a1b          LDRB     r3,[r2,#0xa1b]        ;289
0000a6  2b01              CMP      r3,#1                 ;289
0000a8  d006              BEQ      |L4.184|
0000aa  686b              LDR      r3,[r5,#4]            ;289  ; thisModeConf
0000ac  f892297d          LDRB     r2,[r2,#0x97d]        ;289
0000b0  f89331e3          LDRB     r3,[r3,#0x1e3]        ;289
0000b4  429a              CMP      r2,r3                 ;289
0000b6  d316              BCC      |L4.230|
                  |L4.184|
0000b8  68aa              LDR      r2,[r5,#8]            ;292  ; thisInfo
0000ba  eb020244          ADD      r2,r2,r4,LSL #1       ;292
0000be  f8b22ddb          LDRH     r2,[r2,#0xddb]        ;292
0000c2  42ba              CMP      r2,r7                 ;295
0000c4  d90f              BLS      |L4.230|
0000c6  f8b106cc          LDRH     r0,[r1,#0x6cc]        ;297
0000ca  4617              MOV      r7,r2                 ;296
0000cc  b158              CBZ      r0,|L4.230|
0000ce  eb0a01c4          ADD      r1,r10,r4,LSL #3      ;298
0000d2  f8d12122          LDR      r2,[r1,#0x122]        ;298
0000d6  f8d13126          LDR      r3,[r1,#0x126]        ;298
0000da  f8d1067c          LDR      r0,[r1,#0x67c]        ;298
0000de  f8d11680          LDR      r1,[r1,#0x680]        ;298
0000e2  f7fffffe          BL       algorithm_coord_calc_distance
                  |L4.230|
0000e6  1c61              ADDS     r1,r4,#1              ;301
0000e8  b20c              SXTH     r4,r1                 ;301
0000ea  2c0a              CMP      r4,#0xa               ;301
0000ec  dbd2              BLT      |L4.148|
0000ee  2300              MOVS     r3,#0                 ;308
0000f0  469c              MOV      r12,r3                ;309
0000f2  2f00              CMP      r7,#0                 ;310
0000f4  bf1c              ITT      NE                    ;311
0000f6  2100              MOVNE    r1,#0                 ;311
0000f8  68aa              LDRNE    r2,[r5,#8]            ;313  ; thisInfo
0000fa  d040              BEQ      |L4.382|
                  |L4.252|
0000fc  eb020441          ADD      r4,r2,r1,LSL #1       ;312
000100  f8b44f41          LDRH     r4,[r4,#0xf41]        ;312
000104  b174              CBZ      r4,|L4.292|
000106  eb020a01          ADD      r10,r2,r1             ;312
00010a  f89aaf69          LDRB     r10,[r10,#0xf69]      ;312
00010e  45c2              CMP      r10,r8                ;312
000110  d108              BNE      |L4.292|
000112  1b3c              SUBS     r4,r7,r4              ;313
000114  bf48              IT       MI                    ;313
000116  4264              RSBMI    r4,r4,#0              ;313
000118  4423              ADD      r3,r3,r4              ;314
00011a  f10c0c01          ADD      r12,r12,#1            ;314
00011e  b21b              SXTH     r3,r3                 ;314
000120  fa0ffc8c          SXTH     r12,r12               ;315
                  |L4.292|
000124  1c49              ADDS     r1,r1,#1              ;315
000126  b209              SXTH     r1,r1                 ;315
000128  2914              CMP      r1,#0x14              ;315
00012a  dbe7              BLT      |L4.252|
00012c  f1bc0f00          CMP      r12,#0                ;318
000130  bf1c              ITT      NE                    ;318
000132  fb93f1fc          SDIVNE   r1,r3,r12             ;318
000136  b20b              SXTHNE   r3,r1                 ;318
000138  eba300e0          SUB      r0,r3,r0,ASR #3       ;320
00013c  b200              SXTH     r0,r0                 ;320
00013e  2800              CMP      r0,#0                 ;321
000140  bfb8              IT       LT                    ;321
000142  2000              MOVLT    r0,#0                 ;321
000144  6969              LDR      r1,[r5,#0x14]         ;322  ; RealDiffIIR
000146  ebc101c1          RSB      r1,r1,r1,LSL #3       ;322
00014a  4408              ADD      r0,r0,r1              ;322
00014c  10c0              ASRS     r0,r0,#3              ;322
00014e  e000              B        |L4.338|
                  |L4.336|
000150  e02c              B        |L4.428|
                  |L4.338|
000152  6168              STR      r0,[r5,#0x14]         ;327  ; RealDiffIIR
000154  f8920f7d          LDRB     r0,[r2,#0xf7d]        ;327
000158  f6027169          ADD      r1,r2,#0xf69          ;328
00015c  eb020040          ADD      r0,r2,r0,LSL #1       ;327
000160  f8a07f41          STRH     r7,[r0,#0xf41]        ;327
000164  f8920f7d          LDRB     r0,[r2,#0xf7d]        ;328
000168  f8008001          STRB     r8,[r0,r1]            ;328
00016c  f8920f7d          LDRB     r0,[r2,#0xf7d]        ;329
000170  2813              CMP      r0,#0x13              ;329
000172  bf3a              ITTE     CC                    ;329
000174  1c40              ADDCC    r0,r0,#1              ;329
000176  f8820f7d          STRBCC   r0,[r2,#0xf7d]        ;329
00017a  f8826f7d          STRBCS   r6,[r2,#0xf7d]        ;330
                  |L4.382|
00017e  6968              LDR      r0,[r5,#0x14]         ;332  ; RealDiffIIR
000180  280a              CMP      r0,#0xa               ;332
000182  e001              B        |L4.392|
                  |L4.388|
000184  e014              B        |L4.432|
                  |L4.390|
000186  e00e              B        |L4.422|
                  |L4.392|
000188  da0b              BGE      |L4.418|
00018a  6928              LDR      r0,[r5,#0x10]         ;332  ; add_hopping_thd
00018c  b148              CBZ      r0,|L4.418|
00018e  78a9              LDRB     r1,[r5,#2]            ;333  ; HoppingThdCnt
000190  1c49              ADDS     r1,r1,#1              ;333
000192  b2c9              UXTB     r1,r1                 ;333
000194  70a9              STRB     r1,[r5,#2]            ;333
000196  290a              CMP      r1,#0xa               ;336
000198  d91f              BLS      |L4.474|
00019a  1e40              SUBS     r0,r0,#1              ;333
00019c  6128              STR      r0,[r5,#0x10]         ;338  ; add_hopping_thd
00019e  70ae              STRB     r6,[r5,#2]            ;338
0001a0  e01b              B        |L4.474|
                  |L4.418|
0001a2  70ae              STRB     r6,[r5,#2]            ;335
0001a4  e019              B        |L4.474|
                  |L4.422|
0001a6  f7fffffe          BL       algorithm_noise_initialize
0001aa  2005              MOVS     r0,#5                 ;343
                  |L4.428|
0001ac  7028              STRB     r0,[r5,#0]            ;343
0001ae  e014              B        |L4.474|
                  |L4.432|
0001b0  6928              LDR      r0,[r5,#0x10]         ;348  ; add_hopping_thd
0001b2  2800              CMP      r0,#0                 ;348
0001b4  bf08              IT       EQ                    ;351
0001b6  70ae              STRBEQ   r6,[r5,#2]            ;351
0001b8  d008              BEQ      |L4.460|
0001ba  78a9              LDRB     r1,[r5,#2]            ;349  ; HoppingThdCnt
0001bc  1c49              ADDS     r1,r1,#1              ;349
0001be  b2c9              UXTB     r1,r1                 ;349
0001c0  70a9              STRB     r1,[r5,#2]            ;349
0001c2  2964              CMP      r1,#0x64              ;352
0001c4  d902              BLS      |L4.460|
0001c6  1e40              SUBS     r0,r0,#1              ;349
0001c8  6128              STR      r0,[r5,#0x10]         ;354  ; add_hopping_thd
0001ca  70ae              STRB     r6,[r5,#2]            ;354
                  |L4.460|
0001cc  f7fffffe          BL       algorithm_noise_initialize
0001d0  e003              B        |L4.474|
                  |L4.466|
0001d2  200a              MOVS     r0,#0xa               ;363
0001d4  7028              STRB     r0,[r5,#0]            ;363
0001d6  f7fffffe          BL       algorithm_noise_initialize
                  |L4.474|
0001da  68a8              LDR      r0,[r5,#8]            ;367  ; thisInfo
0001dc  f89012aa          LDRB     r1,[r0,#0x2aa]        ;367
0001e0  f8801f39          STRB     r1,[r0,#0xf39]        ;367
0001e4  f8809f3a          STRB     r9,[r0,#0xf3a]        ;369
0001e8  6869              LDR      r1,[r5,#4]            ;371  ; thisModeConf
0001ea  f8d5c014          LDR      r12,[r5,#0x14]        ;371  ; RealDiffIIR
0001ee  f89121e5          LDRB     r2,[r1,#0x1e5]        ;371
0001f2  6929              LDR      r1,[r5,#0x10]         ;371  ; add_hopping_thd
0001f4  1853              ADDS     r3,r2,r1              ;371
0001f6  4563              CMP      r3,r12                ;371
0001f8  bfa8              IT       GE
0001fa  e8bd9ff0          POPGE    {r4-r12,pc}
0001fe  310f              ADDS     r1,r1,#0xf
000200  6129              STR      r1,[r5,#0x10]         ;378  ; add_hopping_thd
000202  428a              CMP      r2,r1                 ;378
000204  db0b              BLT      |L4.542|
                  |L4.518|
000206  68e9              LDR      r1,[r5,#0xc]          ;380  ; ptAppInfo
000208  f881b011          STRB     r11,[r1,#0x11]        ;380
00020c  f8900fb5          LDRB     r0,[r0,#0xfb5]        ;381
000210  2800              CMP      r0,#0                 ;381
000212  bf18              IT       NE                    ;382
000214  f885b001          STRBNE   r11,[r5,#1]           ;382
000218  616e              STR      r6,[r5,#0x14]         ;384  ; RealDiffIIR
00021a  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.542|
00021e  612a              STR      r2,[r5,#0x10]         ;378  ; add_hopping_thd
000220  e7f1              B        |L4.518|
;;;396    
                          ENDP

000222  0000              DCW      0x0000
                  |L4.548|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_init||, CODE, READONLY, ALIGN=2

                  algorithm_noise_init PROC
;;;46     
;;;47     void algorithm_noise_init(void)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	thisModeConf = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c04              LDR      r4,|L5.24|
;;;50     	thisInfo = algorithm_GetInfo();
000008  6060              STR      r0,[r4,#4]  ; thisModeConf
00000a  f7fffffe          BL       algorithm_GetInfo
;;;51     	ptAppInfo = app_GetInfo();
00000e  60a0              STR      r0,[r4,#8]  ; thisInfo
000010  f7fffffe          BL       app_GetInfo
000014  60e0              STR      r0,[r4,#0xc]  ; ptAppInfo
;;;52     }
000016  bd10              POP      {r4,pc}
;;;53     
                          ENDP

                  |L5.24|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_initialize||, CODE, READONLY, ALIGN=2

                  algorithm_noise_initialize PROC
;;;53     
;;;54     void algorithm_noise_initialize(void)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
;;;56     	thisInfo->tNoise.ucInitFCnt = 0;
000002  4d13              LDR      r5,|L6.80|
000004  2400              MOVS     r4,#0
;;;57     	thisInfo->tNoise.ucFCnt = 0;
;;;58     	thisInfo->tNoise.ucBCnt = 0;
;;;59     	thisInfo->tNoise.bDetectStart = NO;
;;;60     	thisInfo->tNoise.ucPrevFinger = 0;
;;;61     	thisInfo->tNoise.ulSumMaxDiff = 0;
;;;62     	thisInfo->tNoise.ucTouchOffCnt = 0;
;;;63     	thisInfo->tNoise.NoiseFlag = 0;
;;;64     	RealDiffIIR = 0;
;;;65     
;;;66     	memset((void *)&thisInfo->tNoise.usMaxValBuf, 0x00, sizeof(thisInfo->tNoise.usMaxValBuf));
000006  2128              MOVS     r1,#0x28
000008  68a8              LDR      r0,[r5,#8]            ;56  ; thisInfo
00000a  f8804f33          STRB     r4,[r0,#0xf33]        ;56
00000e  f8804f34          STRB     r4,[r0,#0xf34]        ;57
000012  f8804f35          STRB     r4,[r0,#0xf35]        ;58
000016  f8804f38          STRB     r4,[r0,#0xf38]        ;59
00001a  f8804f39          STRB     r4,[r0,#0xf39]        ;60
00001e  f8c04f3d          STR      r4,[r0,#0xf3d]        ;61
000022  f8804f7f          STRB     r4,[r0,#0xf7f]        ;62
000026  f8804f81          STRB     r4,[r0,#0xf81]        ;63
00002a  f6007041          ADD      r0,r0,#0xf41
00002e  616c              STR      r4,[r5,#0x14]  ; RealDiffIIR
000030  f7fffffe          BL       __aeabi_memclr
;;;67     	memset((void *)&thisInfo->tNoise.ucTouchNumBuf, 0, sizeof(thisInfo->tNoise.ucTouchNumBuf));
000034  68a8              LDR      r0,[r5,#8]  ; thisInfo
000036  f8c04f69          STR      r4,[r0,#0xf69]
00003a  f8c04f6d          STR      r4,[r0,#0xf6d]
00003e  f8c04f71          STR      r4,[r0,#0xf71]
000042  f8c04f75          STR      r4,[r0,#0xf75]
000046  f8c04f79          STR      r4,[r0,#0xf79]
;;;68     	thisInfo->tNoise.ucNoiseFrameCnt = 0;
00004a  f8804f7d          STRB     r4,[r0,#0xf7d]
;;;69     }
00004e  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP

                  |L6.80|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_process||, CODE, READONLY, ALIGN=2

                  algorithm_noise_process PROC
;;;601    
;;;602    void algorithm_noise_process(void)
000000  4806              LDR      r0,|L7.28|
;;;603    {
;;;604    	if(thisModeConf->Noise.ucNoiseDetectionMode == 1)
000002  6840              LDR      r0,[r0,#4]  ; thisModeConf
000004  f89001e2          LDRB     r0,[r0,#0x1e2]
000008  2801              CMP      r0,#1
00000a  d004              BEQ      |L7.22|
;;;605    		algorithm_noise_detection();
;;;606    	else if(thisModeConf->Noise.ucNoiseDetectionMode == 2)
00000c  2802              CMP      r0,#2
;;;607    		algorithm_noise_detection_v2();
;;;608    }
00000e  bf18              IT       NE
000010  4770              BXNE     lr
000012  f7ffbffe          B.W      algorithm_noise_detection_v2
                  |L7.22|
000016  f7ffbffe          B.W      algorithm_noise_detection
;;;609    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  FreqChangeDelay
000000  00                DCB      0x00
                  CheckHoppingReliability
000001  00                DCB      0x00
                  HoppingThdCnt
000002  0000              DCB      0x00,0x00
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  add_hopping_thd
                          DCD      0x00000000
                  RealDiffIIR
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  DiffIIR
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.data||
                  test_bHoppingFlag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Noise\\algorithm_noise.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_noise_c_8f65c579____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____REVSH|
#line 402
|__asm___17_algorithm_noise_c_8f65c579____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____RRX|
#line 587
|__asm___17_algorithm_noise_c_8f65c579____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
