; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\mspi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\mspi.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\mspi.crf ..\..\Hal\spi\mspi.c]
                          THUMB

                          AREA ||i.MSPI_Cmd||, CODE, READONLY, ALIGN=1

                  MSPI_Cmd PROC
;;;409    
;;;410    void MSPI_Cmd(FunctionalState NewState)
000000  f04f2140          MOV      r1,#0x40004000
;;;411    {
;;;412    	if(NewState != DISABLE)
000004  2800              CMP      r0,#0
;;;413    	{
;;;414    		MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
000006  bf18              IT       NE
000008  200f              MOVNE    r0,#0xf
00000a  6448              STR      r0,[r1,#0x44]
;;;415    	}
;;;416    	else
;;;417    	{
;;;418    		MSPI->tSPISTART.ulBulk = 0;
;;;419    	}
;;;420    }
00000c  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.MSPI_GPIO_Init||, CODE, READONLY, ALIGN=1

                  MSPI_GPIO_Init PROC
;;;845    
;;;846    void MSPI_GPIO_Init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;847    {
;;;848    	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;849    	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000004  f7fffffe          BL       hal_mspi_GetCommonConfig
;;;850    	uint32_t ulMSPI_0_En;
;;;851    	uint32_t ulMSPI_1_En;
;;;852    	uint32_t ulMSPI_2_En;
;;;853    	uint32_t ulMSPI_3_En;
;;;854    	uint32_t ulMSPI_4_En;
;;;855    	uint32_t ulMSPI_5_En;
;;;856    	uint32_t ulMSPI_6_En;
;;;857    	uint32_t ulMSPI_7_En;
;;;858    
;;;859    	ulMSPI_0_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna0;
000008  f89000d8          LDRB     r0,[r0,#0xd8]
00000c  f0100f01          TST      r0,#1
;;;860    	ulMSPI_1_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna1;
000010  f3c00940          UBFX     r9,r0,#1,#1
;;;861    	ulMSPI_2_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna2;
000014  f3c00880          UBFX     r8,r0,#2,#1
;;;862    	ulMSPI_3_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna3;
000018  f3c007c0          UBFX     r7,r0,#3,#1
;;;863    	ulMSPI_4_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna4;
00001c  f3c01600          UBFX     r6,r0,#4,#1
;;;864    	ulMSPI_5_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna5;
000020  f3c01540          UBFX     r5,r0,#5,#1
;;;865    	ulMSPI_6_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna6;
000024  f3c01480          UBFX     r4,r0,#6,#1
;;;866    	ulMSPI_7_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna7;
000028  ea4f1ad0          LSR      r10,r0,#7
;;;867    
;;;868    	/////////////////////////////////////////////////////////////////////////////////
;;;869    	// MSPI GPIO Initialization
;;;870    	/////////////////////////////////////////////////////////////////////////////////
;;;871    	if(ulMSPI_0_En == SPI_DISABLE)
00002c  f000810a          BEQ.W    |L2.580|
;;;872    	{
;;;873    		GPIO_Init(_GPIO_MSPI_0_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;874    		GPIO_Init(_GPIO_MSPI_0_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;875    		GPIO_Init(_GPIO_MSPI_0_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;876    		GPIO_Init(_GPIO_MSPI_0_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;877    
;;;878    
;;;879    		GPIO_Set_PE(_GPIO_MSPI_0_CSN, GPIO_PE_PULL_DOWM);
;;;880    		GPIO_Set_PE(_GPIO_MSPI_0_CLK, GPIO_PE_PULL_DOWM);
;;;881    		GPIO_Set_PE(_GPIO_MSPI_0_MOSI, GPIO_PE_PULL_DOWM);
;;;882    		GPIO_Set_PE(_GPIO_MSPI_0_MISO, GPIO_PE_PULL_DOWM);
;;;883    	}
;;;884    	else
;;;885    	{
;;;886    		GPIO_Set_Mode(_GPIO_MSPI_0_CSN, GPIO_MODE_FUNC_0);
000030  2100              MOVS     r1,#0
000032  200b              MOVS     r0,#0xb
000034  f7fffffe          BL       GPIO_Set_Mode
;;;887    		GPIO_Set_Mode(_GPIO_MSPI_0_CLK, GPIO_MODE_FUNC_0);
000038  2100              MOVS     r1,#0
00003a  200c              MOVS     r0,#0xc
00003c  f7fffffe          BL       GPIO_Set_Mode
;;;888    		GPIO_Set_Mode(_GPIO_MSPI_0_MOSI, GPIO_MODE_FUNC_0);
000040  2100              MOVS     r1,#0
000042  200d              MOVS     r0,#0xd
000044  f7fffffe          BL       GPIO_Set_Mode
;;;889    		GPIO_Set_Mode(_GPIO_MSPI_0_MISO, GPIO_MODE_FUNC_0);
000048  2100              MOVS     r1,#0
00004a  200e              MOVS     r0,#0xe
00004c  f7fffffe          BL       GPIO_Set_Mode
;;;890    
;;;891    		GPIO_Set_DS(_GPIO_MSPI_0_CSN, PARAMSET_MSPI_0_CSN_DRVSTR_LEVEL);
000050  2100              MOVS     r1,#0
000052  200b              MOVS     r0,#0xb
000054  f7fffffe          BL       GPIO_Set_DS
;;;892    		GPIO_Set_DS(_GPIO_MSPI_0_CLK, PARAMSET_MSPI_0_CLK_DRVSTR_LEVEL);
000058  2103              MOVS     r1,#3
00005a  200c              MOVS     r0,#0xc
00005c  f7fffffe          BL       GPIO_Set_DS
;;;893    		GPIO_Set_DS(_GPIO_MSPI_0_MOSI, PARAMSET_MSPI_0_MOSI_DRVSTR_LEVEL);
000060  2101              MOVS     r1,#1
000062  200d              MOVS     r0,#0xd
000064  f7fffffe          BL       GPIO_Set_DS
                  |L2.104|
;;;894    	}
;;;895    
;;;896    	if(ulMSPI_1_En == SPI_DISABLE)
000068  f1b90f00          CMP      r9,#0
00006c  f0008113          BEQ.W    |L2.662|
;;;897    	{
;;;898    		GPIO_Init(_GPIO_MSPI_1_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;899    		GPIO_Init(_GPIO_MSPI_1_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;900    		GPIO_Init(_GPIO_MSPI_1_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;901    		GPIO_Init(_GPIO_MSPI_1_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;902    
;;;903    		GPIO_Set_PE(_GPIO_MSPI_1_CSN, GPIO_PE_PULL_DOWM);
;;;904    		GPIO_Set_PE(_GPIO_MSPI_1_CLK, GPIO_PE_PULL_DOWM);
;;;905    		GPIO_Set_PE(_GPIO_MSPI_1_MOSI, GPIO_PE_PULL_DOWM);
;;;906    		GPIO_Set_PE(_GPIO_MSPI_1_MISO, GPIO_PE_PULL_DOWM);
;;;907    	}
;;;908    	else
;;;909    	{
;;;910    		GPIO_Set_Mode(_GPIO_MSPI_1_CSN, GPIO_MODE_FUNC_0);
000070  2100              MOVS     r1,#0
000072  200f              MOVS     r0,#0xf
000074  f7fffffe          BL       GPIO_Set_Mode
;;;911    		GPIO_Set_Mode(_GPIO_MSPI_1_CLK, GPIO_MODE_FUNC_0);
000078  2100              MOVS     r1,#0
00007a  2010              MOVS     r0,#0x10
00007c  f7fffffe          BL       GPIO_Set_Mode
;;;912    		GPIO_Set_Mode(_GPIO_MSPI_1_MOSI, GPIO_MODE_FUNC_0);
000080  2100              MOVS     r1,#0
000082  2011              MOVS     r0,#0x11
000084  f7fffffe          BL       GPIO_Set_Mode
;;;913    		GPIO_Set_Mode(_GPIO_MSPI_1_MISO, GPIO_MODE_FUNC_0);
000088  2100              MOVS     r1,#0
00008a  2012              MOVS     r0,#0x12
00008c  f7fffffe          BL       GPIO_Set_Mode
;;;914    
;;;915    		GPIO_Set_DS(_GPIO_MSPI_1_CSN, PARAMSET_MSPI_1_CSN_DRVSTR_LEVEL);
000090  2100              MOVS     r1,#0
000092  200f              MOVS     r0,#0xf
000094  f7fffffe          BL       GPIO_Set_DS
;;;916    		GPIO_Set_DS(_GPIO_MSPI_1_CLK, PARAMSET_MSPI_1_CLK_DRVSTR_LEVEL);
000098  2103              MOVS     r1,#3
00009a  2010              MOVS     r0,#0x10
00009c  f7fffffe          BL       GPIO_Set_DS
;;;917    		GPIO_Set_DS(_GPIO_MSPI_1_MOSI, PARAMSET_MSPI_1_MOSI_DRVSTR_LEVEL);
0000a0  2101              MOVS     r1,#1
0000a2  2011              MOVS     r0,#0x11
0000a4  f7fffffe          BL       GPIO_Set_DS
                  |L2.168|
;;;918    	}
;;;919    
;;;920    	if(ulMSPI_2_En == SPI_DISABLE)
0000a8  f1b80f00          CMP      r8,#0
0000ac  f000811c          BEQ.W    |L2.744|
;;;921    	{
;;;922    		GPIO_Init(_GPIO_MSPI_2_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;923    		GPIO_Init(_GPIO_MSPI_2_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;924    		GPIO_Init(_GPIO_MSPI_2_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;925    		GPIO_Init(_GPIO_MSPI_2_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;926    
;;;927    		GPIO_Set_PE(_GPIO_MSPI_2_CSN, GPIO_PE_PULL_DOWM);
;;;928    		GPIO_Set_PE(_GPIO_MSPI_2_CLK, GPIO_PE_PULL_DOWM);
;;;929    		GPIO_Set_PE(_GPIO_MSPI_2_MOSI, GPIO_PE_PULL_DOWM);
;;;930    		GPIO_Set_PE(_GPIO_MSPI_2_MISO, GPIO_PE_PULL_DOWM);
;;;931    	}
;;;932    	else
;;;933    	{
;;;934    		GPIO_Set_Mode(_GPIO_MSPI_2_CSN, GPIO_MODE_FUNC_0);
0000b0  2100              MOVS     r1,#0
0000b2  2013              MOVS     r0,#0x13
0000b4  f7fffffe          BL       GPIO_Set_Mode
;;;935    		GPIO_Set_Mode(_GPIO_MSPI_2_CLK, GPIO_MODE_FUNC_0);
0000b8  2100              MOVS     r1,#0
0000ba  2014              MOVS     r0,#0x14
0000bc  f7fffffe          BL       GPIO_Set_Mode
;;;936    		GPIO_Set_Mode(_GPIO_MSPI_2_MOSI, GPIO_MODE_FUNC_0);
0000c0  2100              MOVS     r1,#0
0000c2  2015              MOVS     r0,#0x15
0000c4  f7fffffe          BL       GPIO_Set_Mode
;;;937    		GPIO_Set_Mode(_GPIO_MSPI_2_MISO, GPIO_MODE_FUNC_0);
0000c8  2100              MOVS     r1,#0
0000ca  2016              MOVS     r0,#0x16
0000cc  f7fffffe          BL       GPIO_Set_Mode
;;;938    
;;;939    		GPIO_Set_DS(_GPIO_MSPI_2_CSN, PARAMSET_MSPI_2_CSN_DRVSTR_LEVEL);
0000d0  2100              MOVS     r1,#0
0000d2  2013              MOVS     r0,#0x13
0000d4  f7fffffe          BL       GPIO_Set_DS
;;;940    		GPIO_Set_DS(_GPIO_MSPI_2_CLK, PARAMSET_MSPI_2_CLK_DRVSTR_LEVEL);
0000d8  2103              MOVS     r1,#3
0000da  2014              MOVS     r0,#0x14
0000dc  f7fffffe          BL       GPIO_Set_DS
;;;941    		GPIO_Set_DS(_GPIO_MSPI_2_MOSI, PARAMSET_MSPI_2_MOSI_DRVSTR_LEVEL);
0000e0  2101              MOVS     r1,#1
0000e2  2015              MOVS     r0,#0x15
0000e4  f7fffffe          BL       GPIO_Set_DS
                  |L2.232|
;;;942    	}
;;;943    
;;;944    	if(ulMSPI_3_En == SPI_DISABLE)
0000e8  2f00              CMP      r7,#0
0000ea  f0008126          BEQ.W    |L2.826|
;;;945    	{
;;;946    		GPIO_Init(_GPIO_MSPI_3_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;947    		GPIO_Init(_GPIO_MSPI_3_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;948    		GPIO_Init(_GPIO_MSPI_3_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;949    		GPIO_Init(_GPIO_MSPI_3_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;950    
;;;951    		GPIO_Set_PE(_GPIO_MSPI_3_CSN, GPIO_PE_PULL_DOWM);
;;;952    		GPIO_Set_PE(_GPIO_MSPI_3_CLK, GPIO_PE_PULL_DOWM);
;;;953    		GPIO_Set_PE(_GPIO_MSPI_3_MOSI, GPIO_PE_PULL_DOWM);
;;;954    		GPIO_Set_PE(_GPIO_MSPI_3_MISO, GPIO_PE_PULL_DOWM);
;;;955    	}
;;;956    	else
;;;957    	{
;;;958    		GPIO_Set_Mode(_GPIO_MSPI_3_CSN, GPIO_MODE_FUNC_0);
0000ee  2100              MOVS     r1,#0
0000f0  2017              MOVS     r0,#0x17
0000f2  f7fffffe          BL       GPIO_Set_Mode
;;;959    		GPIO_Set_Mode(_GPIO_MSPI_3_CLK, GPIO_MODE_FUNC_0);
0000f6  2100              MOVS     r1,#0
0000f8  2018              MOVS     r0,#0x18
0000fa  f7fffffe          BL       GPIO_Set_Mode
;;;960    		GPIO_Set_Mode(_GPIO_MSPI_3_MOSI, GPIO_MODE_FUNC_0);
0000fe  2100              MOVS     r1,#0
000100  2019              MOVS     r0,#0x19
000102  f7fffffe          BL       GPIO_Set_Mode
;;;961    		GPIO_Set_Mode(_GPIO_MSPI_3_MISO, GPIO_MODE_FUNC_0);
000106  2100              MOVS     r1,#0
000108  201a              MOVS     r0,#0x1a
00010a  f7fffffe          BL       GPIO_Set_Mode
;;;962    
;;;963    		GPIO_Set_DS(_GPIO_MSPI_3_CSN, PARAMSET_MSPI_3_CSN_DRVSTR_LEVEL);
00010e  2100              MOVS     r1,#0
000110  2017              MOVS     r0,#0x17
000112  f7fffffe          BL       GPIO_Set_DS
;;;964    		GPIO_Set_DS(_GPIO_MSPI_3_CLK, PARAMSET_MSPI_3_CLK_DRVSTR_LEVEL);
000116  2103              MOVS     r1,#3
000118  2018              MOVS     r0,#0x18
00011a  f7fffffe          BL       GPIO_Set_DS
;;;965    		GPIO_Set_DS(_GPIO_MSPI_3_MOSI, PARAMSET_MSPI_3_MOSI_DRVSTR_LEVEL);
00011e  2101              MOVS     r1,#1
000120  2019              MOVS     r0,#0x19
000122  f7fffffe          BL       GPIO_Set_DS
                  |L2.294|
;;;966    	}
;;;967    
;;;968    	if(ulMSPI_4_En == SPI_DISABLE)
000126  2e00              CMP      r6,#0
000128  f0008130          BEQ.W    |L2.908|
;;;969    	{
;;;970    		GPIO_Init(_GPIO_MSPI_4_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;971    		GPIO_Init(_GPIO_MSPI_4_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;972    		GPIO_Init(_GPIO_MSPI_4_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;973    		GPIO_Init(_GPIO_MSPI_4_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;974    
;;;975    		GPIO_Set_PE(_GPIO_MSPI_4_CSN, GPIO_PE_PULL_DOWM);
;;;976    		GPIO_Set_PE(_GPIO_MSPI_4_CLK, GPIO_PE_PULL_DOWM);
;;;977    		GPIO_Set_PE(_GPIO_MSPI_4_MOSI, GPIO_PE_PULL_DOWM);
;;;978    		GPIO_Set_PE(_GPIO_MSPI_4_MISO, GPIO_PE_PULL_DOWM);
;;;979    	}
;;;980    	else
;;;981    	{
;;;982    		GPIO_Set_Mode(_GPIO_MSPI_4_CSN, GPIO_MODE_FUNC_0);
00012c  2100              MOVS     r1,#0
00012e  201b              MOVS     r0,#0x1b
000130  f7fffffe          BL       GPIO_Set_Mode
;;;983    		GPIO_Set_Mode(_GPIO_MSPI_4_CLK, GPIO_MODE_FUNC_0);
000134  2100              MOVS     r1,#0
000136  201c              MOVS     r0,#0x1c
000138  f7fffffe          BL       GPIO_Set_Mode
;;;984    		GPIO_Set_Mode(_GPIO_MSPI_4_MOSI, GPIO_MODE_FUNC_0);
00013c  2100              MOVS     r1,#0
00013e  201d              MOVS     r0,#0x1d
000140  f7fffffe          BL       GPIO_Set_Mode
;;;985    		GPIO_Set_Mode(_GPIO_MSPI_4_MISO, GPIO_MODE_FUNC_0);
000144  2100              MOVS     r1,#0
000146  201e              MOVS     r0,#0x1e
000148  f7fffffe          BL       GPIO_Set_Mode
;;;986    
;;;987    		GPIO_Set_DS(_GPIO_MSPI_4_CSN, PARAMSET_MSPI_4_CSN_DRVSTR_LEVEL);
00014c  2100              MOVS     r1,#0
00014e  201b              MOVS     r0,#0x1b
000150  f7fffffe          BL       GPIO_Set_DS
;;;988    		GPIO_Set_DS(_GPIO_MSPI_4_CLK, PARAMSET_MSPI_4_CLK_DRVSTR_LEVEL);
000154  2102              MOVS     r1,#2
000156  201c              MOVS     r0,#0x1c
000158  f7fffffe          BL       GPIO_Set_DS
;;;989    		GPIO_Set_DS(_GPIO_MSPI_4_MOSI, PARAMSET_MSPI_4_MOSI_DRVSTR_LEVEL);
00015c  2102              MOVS     r1,#2
00015e  201d              MOVS     r0,#0x1d
000160  f7fffffe          BL       GPIO_Set_DS
                  |L2.356|
;;;990    	}
;;;991    
;;;992    	if(ulMSPI_5_En == SPI_DISABLE)
000164  2d00              CMP      r5,#0
000166  f000813a          BEQ.W    |L2.990|
;;;993    	{
;;;994    		GPIO_Init(_GPIO_MSPI_5_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;995    		GPIO_Init(_GPIO_MSPI_5_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;996    #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;997    	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;998    		GPIO_Init(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;999    	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1000   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1001   		GPIO_Init(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1002   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1003   		GPIO_Init(_GPIO_MSPI_5_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1004   
;;;1005   		GPIO_Set_PE(_GPIO_MSPI_5_CSN, GPIO_PE_PULL_DOWM);
;;;1006   		GPIO_Set_PE(_GPIO_MSPI_5_CLK, GPIO_PE_PULL_DOWM);
;;;1007   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1008   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1009   		GPIO_Set_PE(_GPIO_MSPI_5_MOSI, GPIO_PE_PULL_DOWM);
;;;1010   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1011   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1012   		GPIO_Set_PE(_GPIO_MSPI_5_MOSI, GPIO_PE_PULL_DOWM);
;;;1013   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1014   		GPIO_Set_PE(_GPIO_MSPI_5_MISO, GPIO_PE_PULL_DOWM);
;;;1015   	}
;;;1016   	else
;;;1017   	{
;;;1018   		GPIO_Set_Mode(_GPIO_MSPI_5_CSN, GPIO_MODE_FUNC_0);
00016a  2100              MOVS     r1,#0
00016c  201f              MOVS     r0,#0x1f
00016e  f7fffffe          BL       GPIO_Set_Mode
;;;1019   		GPIO_Set_Mode(_GPIO_MSPI_5_CLK, GPIO_MODE_FUNC_0);
000172  2100              MOVS     r1,#0
000174  2020              MOVS     r0,#0x20
000176  f7fffffe          BL       GPIO_Set_Mode
;;;1020   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1021   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1022   		GPIO_Set_Mode(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_0);
;;;1023   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1024   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1025   		GPIO_Set_Mode(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_0);
00017a  2100              MOVS     r1,#0
00017c  2021              MOVS     r0,#0x21
00017e  f7fffffe          BL       GPIO_Set_Mode
;;;1026   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1027   		GPIO_Set_Mode(_GPIO_MSPI_5_MISO, GPIO_MODE_FUNC_0);
000182  2100              MOVS     r1,#0
000184  2022              MOVS     r0,#0x22
000186  f7fffffe          BL       GPIO_Set_Mode
;;;1028   
;;;1029   		GPIO_Set_DS(_GPIO_MSPI_5_CSN, PARAMSET_MSPI_5_CSN_DRVSTR_LEVEL);
00018a  2100              MOVS     r1,#0
00018c  201f              MOVS     r0,#0x1f
00018e  f7fffffe          BL       GPIO_Set_DS
;;;1030   		GPIO_Set_DS(_GPIO_MSPI_5_CLK, PARAMSET_MSPI_5_CLK_DRVSTR_LEVEL);
000192  2102              MOVS     r1,#2
000194  2020              MOVS     r0,#0x20
000196  f7fffffe          BL       GPIO_Set_DS
;;;1031   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1032   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1033   		GPIO_Set_DS(_GPIO_MSPI_5_MOSI, PARAMSET_MSPI_5_MOSI_DRVSTR_LEVEL);
;;;1034   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1035   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1036   		GPIO_Set_DS(_GPIO_MSPI_5_MOSI, PARAMSET_MSPI_5_MOSI_DRVSTR_LEVEL);
00019a  2102              MOVS     r1,#2
00019c  2021              MOVS     r0,#0x21
00019e  f7fffffe          BL       GPIO_Set_DS
                  |L2.418|
;;;1037   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1038   	}
;;;1039   
;;;1040   	if(ulMSPI_6_En == SPI_DISABLE)
0001a2  2c00              CMP      r4,#0
0001a4  f0008144          BEQ.W    |L2.1072|
;;;1041   	{
;;;1042   		GPIO_Init(_GPIO_MSPI_6_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1043   		GPIO_Init(_GPIO_MSPI_6_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1044   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN))
;;;1045   		GPIO_Init(_GPIO_MSPI_6_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1046   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1047   		GPIO_Init(_GPIO_MSPI_6_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1048   
;;;1049   		GPIO_Set_PE(_GPIO_MSPI_6_CSN, GPIO_PE_PULL_DOWM);
;;;1050   		GPIO_Set_PE(_GPIO_MSPI_6_CLK, GPIO_PE_PULL_DOWM);
;;;1051   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN))
;;;1052   		GPIO_Set_PE(_GPIO_MSPI_6_MOSI, GPIO_PE_PULL_DOWM);
;;;1053   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1054   		GPIO_Set_PE(_GPIO_MSPI_6_MISO, GPIO_PE_PULL_DOWM);
;;;1055   	}
;;;1056   	else
;;;1057   	{
;;;1058   		GPIO_Set_Mode(_GPIO_MSPI_6_CSN, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_SSN
0001a8  2100              MOVS     r1,#0
0001aa  2023              MOVS     r0,#0x23
0001ac  f7fffffe          BL       GPIO_Set_Mode
;;;1059   		GPIO_Set_Mode(_GPIO_MSPI_6_CLK, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_SCLK
0001b0  2100              MOVS     r1,#0
0001b2  2024              MOVS     r0,#0x24
0001b4  f7fffffe          BL       GPIO_Set_Mode
;;;1060   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN))
;;;1061   		GPIO_Set_Mode(_GPIO_MSPI_6_MOSI, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_MOSI
;;;1062   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1063   		GPIO_Set_Mode(_GPIO_MSPI_6_MISO, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_MISO
0001b8  2100              MOVS     r1,#0
0001ba  2026              MOVS     r0,#0x26
0001bc  f7fffffe          BL       GPIO_Set_Mode
;;;1064   
;;;1065   		GPIO_Set_DS(_GPIO_MSPI_6_CSN, PARAMSET_MSPI_6_CSN_DRVSTR_LEVEL);
0001c0  2100              MOVS     r1,#0
0001c2  2023              MOVS     r0,#0x23
0001c4  f7fffffe          BL       GPIO_Set_DS
;;;1066   		GPIO_Set_DS(_GPIO_MSPI_6_CLK, PARAMSET_MSPI_6_CLK_DRVSTR_LEVEL);
0001c8  2102              MOVS     r1,#2
0001ca  2024              MOVS     r0,#0x24
0001cc  f7fffffe          BL       GPIO_Set_DS
                  |L2.464|
;;;1067   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN))
;;;1068   		GPIO_Set_DS(_GPIO_MSPI_6_MOSI, PARAMSET_MSPI_6_MOSI_DRVSTR_LEVEL);
;;;1069   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1070   	}
;;;1071   
;;;1072   #if (USED_VCF_SYNC_CONTROL == NO)
;;;1073   	if(ulMSPI_7_En == SPI_DISABLE)
0001d0  f1ba0f00          CMP      r10,#0
0001d4  f000814b          BEQ.W    |L2.1134|
;;;1074   	{
;;;1075   		GPIO_Init(_GPIO_MSPI_7_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1076   		GPIO_Init(_GPIO_MSPI_7_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1077   	#if !USED_PWM_GATE_CONTROL
;;;1078   		GPIO_Init(_GPIO_MSPI_7_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1079   	#endif
;;;1080   		GPIO_Init(_GPIO_MSPI_7_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1081   
;;;1082   		GPIO_Set_PE(_GPIO_MSPI_7_CSN, GPIO_PE_PULL_DOWM);
;;;1083   		GPIO_Set_PE(_GPIO_MSPI_7_CLK, GPIO_PE_PULL_DOWM);
;;;1084   	#if !USED_PWM_GATE_CONTROL
;;;1085   		GPIO_Set_PE(_GPIO_MSPI_7_MOSI, GPIO_PE_PULL_DOWM);
;;;1086   	#endif
;;;1087   		GPIO_Set_PE(_GPIO_MSPI_7_MISO, GPIO_PE_PULL_DOWM);
;;;1088   	}
;;;1089   	else
;;;1090   	{
;;;1091   		GPIO_Set_Mode(_GPIO_MSPI_7_CSN, GPIO_MODE_FUNC_0);
0001d8  2100              MOVS     r1,#0
0001da  2027              MOVS     r0,#0x27
0001dc  f7fffffe          BL       GPIO_Set_Mode
;;;1092   		GPIO_Set_Mode(_GPIO_MSPI_7_CLK, GPIO_MODE_FUNC_0);
0001e0  2100              MOVS     r1,#0
0001e2  2028              MOVS     r0,#0x28
0001e4  f7fffffe          BL       GPIO_Set_Mode
;;;1093   	#if !USED_PWM_GATE_CONTROL
;;;1094   		GPIO_Set_Mode(_GPIO_MSPI_7_MOSI, GPIO_MODE_FUNC_0);
;;;1095   	#endif
;;;1096   		GPIO_Set_Mode(_GPIO_MSPI_7_MISO, GPIO_MODE_FUNC_0);
0001e8  2100              MOVS     r1,#0
0001ea  202a              MOVS     r0,#0x2a
0001ec  f7fffffe          BL       GPIO_Set_Mode
;;;1097   
;;;1098   		GPIO_Set_DS(_GPIO_MSPI_7_CSN, PARAMSET_MSPI_7_CSN_DRVSTR_LEVEL);
0001f0  2100              MOVS     r1,#0
0001f2  2027              MOVS     r0,#0x27
0001f4  f7fffffe          BL       GPIO_Set_DS
;;;1099   		GPIO_Set_DS(_GPIO_MSPI_7_CLK, PARAMSET_MSPI_7_CLK_DRVSTR_LEVEL);
0001f8  2102              MOVS     r1,#2
0001fa  2028              MOVS     r0,#0x28
0001fc  f7fffffe          BL       GPIO_Set_DS
                  |L2.512|
;;;1100   	#if !USED_PWM_GATE_CONTROL
;;;1101   		GPIO_Set_DS(_GPIO_MSPI_7_MOSI, PARAMSET_MSPI_7_MOSI_DRVSTR_LEVEL);
;;;1102   	#endif
;;;1103   	}
;;;1104   #endif /* USED_VCF_SYNC_CONTROL */
;;;1105   	GPIO_Set_PE(_GPIO_MSPI_0_MISO, GPIO_PE_PULL_DOWM);
000200  2101              MOVS     r1,#1
000202  200e              MOVS     r0,#0xe
000204  f7fffffe          BL       GPIO_Set_PE
;;;1106   	GPIO_Set_PE(_GPIO_MSPI_1_MISO, GPIO_PE_PULL_DOWM);
000208  2101              MOVS     r1,#1
00020a  2012              MOVS     r0,#0x12
00020c  f7fffffe          BL       GPIO_Set_PE
;;;1107   	GPIO_Set_PE(_GPIO_MSPI_2_MISO, GPIO_PE_PULL_DOWM);
000210  2101              MOVS     r1,#1
000212  2016              MOVS     r0,#0x16
000214  f7fffffe          BL       GPIO_Set_PE
;;;1108   	GPIO_Set_PE(_GPIO_MSPI_3_MISO, GPIO_PE_PULL_DOWM);
000218  2101              MOVS     r1,#1
00021a  201a              MOVS     r0,#0x1a
00021c  f7fffffe          BL       GPIO_Set_PE
;;;1109   	GPIO_Set_PE(_GPIO_MSPI_4_MISO, GPIO_PE_PULL_DOWM);
000220  2101              MOVS     r1,#1
000222  201e              MOVS     r0,#0x1e
000224  f7fffffe          BL       GPIO_Set_PE
;;;1110   	GPIO_Set_PE(_GPIO_MSPI_5_MISO, GPIO_PE_PULL_DOWM);
000228  2101              MOVS     r1,#1
00022a  2022              MOVS     r0,#0x22
00022c  f7fffffe          BL       GPIO_Set_PE
;;;1111   	GPIO_Set_PE(_GPIO_MSPI_6_MISO, GPIO_PE_PULL_DOWM);
000230  2101              MOVS     r1,#1
000232  2026              MOVS     r0,#0x26
000234  f7fffffe          BL       GPIO_Set_PE
;;;1112   #if (USED_VCF_SYNC_CONTROL == NO)
;;;1113   	GPIO_Set_PE(_GPIO_MSPI_7_MISO, GPIO_PE_PULL_DOWM);
000238  e8bd47f0          POP      {r4-r10,lr}
00023c  2101              MOVS     r1,#1
00023e  202a              MOVS     r0,#0x2a
000240  f7ffbffe          B.W      GPIO_Set_PE
                  |L2.580|
000244  2300              MOVS     r3,#0                 ;873
000246  461a              MOV      r2,r3                 ;873
000248  2103              MOVS     r1,#3                 ;873
00024a  200b              MOVS     r0,#0xb               ;873
00024c  f7fffffe          BL       GPIO_Init
000250  2300              MOVS     r3,#0                 ;874
000252  461a              MOV      r2,r3                 ;874
000254  2103              MOVS     r1,#3                 ;874
000256  200c              MOVS     r0,#0xc               ;874
000258  f7fffffe          BL       GPIO_Init
00025c  2300              MOVS     r3,#0                 ;875
00025e  461a              MOV      r2,r3                 ;875
000260  2103              MOVS     r1,#3                 ;875
000262  200d              MOVS     r0,#0xd               ;875
000264  f7fffffe          BL       GPIO_Init
000268  2300              MOVS     r3,#0                 ;876
00026a  461a              MOV      r2,r3                 ;876
00026c  2103              MOVS     r1,#3                 ;876
00026e  200e              MOVS     r0,#0xe               ;876
000270  f7fffffe          BL       GPIO_Init
000274  2101              MOVS     r1,#1                 ;879
000276  200b              MOVS     r0,#0xb               ;879
000278  f7fffffe          BL       GPIO_Set_PE
00027c  2101              MOVS     r1,#1                 ;880
00027e  200c              MOVS     r0,#0xc               ;880
000280  f7fffffe          BL       GPIO_Set_PE
000284  2101              MOVS     r1,#1                 ;881
000286  200d              MOVS     r0,#0xd               ;881
000288  f7fffffe          BL       GPIO_Set_PE
00028c  2101              MOVS     r1,#1                 ;882
00028e  200e              MOVS     r0,#0xe               ;882
000290  f7fffffe          BL       GPIO_Set_PE
000294  e6e8              B        |L2.104|
                  |L2.662|
000296  2300              MOVS     r3,#0                 ;898
000298  461a              MOV      r2,r3                 ;898
00029a  2103              MOVS     r1,#3                 ;898
00029c  200f              MOVS     r0,#0xf               ;898
00029e  f7fffffe          BL       GPIO_Init
0002a2  2300              MOVS     r3,#0                 ;899
0002a4  461a              MOV      r2,r3                 ;899
0002a6  2103              MOVS     r1,#3                 ;899
0002a8  2010              MOVS     r0,#0x10              ;899
0002aa  f7fffffe          BL       GPIO_Init
0002ae  2300              MOVS     r3,#0                 ;900
0002b0  461a              MOV      r2,r3                 ;900
0002b2  2103              MOVS     r1,#3                 ;900
0002b4  2011              MOVS     r0,#0x11              ;900
0002b6  f7fffffe          BL       GPIO_Init
0002ba  2300              MOVS     r3,#0                 ;901
0002bc  461a              MOV      r2,r3                 ;901
0002be  2103              MOVS     r1,#3                 ;901
0002c0  2012              MOVS     r0,#0x12              ;901
0002c2  f7fffffe          BL       GPIO_Init
0002c6  2101              MOVS     r1,#1                 ;903
0002c8  200f              MOVS     r0,#0xf               ;903
0002ca  f7fffffe          BL       GPIO_Set_PE
0002ce  2101              MOVS     r1,#1                 ;904
0002d0  2010              MOVS     r0,#0x10              ;904
0002d2  f7fffffe          BL       GPIO_Set_PE
0002d6  2101              MOVS     r1,#1                 ;905
0002d8  2011              MOVS     r0,#0x11              ;905
0002da  f7fffffe          BL       GPIO_Set_PE
0002de  2101              MOVS     r1,#1                 ;906
0002e0  2012              MOVS     r0,#0x12              ;906
0002e2  f7fffffe          BL       GPIO_Set_PE
0002e6  e6df              B        |L2.168|
                  |L2.744|
0002e8  2300              MOVS     r3,#0                 ;922
0002ea  461a              MOV      r2,r3                 ;922
0002ec  2103              MOVS     r1,#3                 ;922
0002ee  2013              MOVS     r0,#0x13              ;922
0002f0  f7fffffe          BL       GPIO_Init
0002f4  2300              MOVS     r3,#0                 ;923
0002f6  461a              MOV      r2,r3                 ;923
0002f8  2103              MOVS     r1,#3                 ;923
0002fa  2014              MOVS     r0,#0x14              ;923
0002fc  f7fffffe          BL       GPIO_Init
000300  2300              MOVS     r3,#0                 ;924
000302  461a              MOV      r2,r3                 ;924
000304  2103              MOVS     r1,#3                 ;924
000306  2015              MOVS     r0,#0x15              ;924
000308  f7fffffe          BL       GPIO_Init
00030c  2300              MOVS     r3,#0                 ;925
00030e  461a              MOV      r2,r3                 ;925
000310  2103              MOVS     r1,#3                 ;925
000312  2016              MOVS     r0,#0x16              ;925
000314  f7fffffe          BL       GPIO_Init
000318  2101              MOVS     r1,#1                 ;927
00031a  2013              MOVS     r0,#0x13              ;927
00031c  f7fffffe          BL       GPIO_Set_PE
000320  2101              MOVS     r1,#1                 ;928
000322  2014              MOVS     r0,#0x14              ;928
000324  f7fffffe          BL       GPIO_Set_PE
000328  2101              MOVS     r1,#1                 ;929
00032a  2015              MOVS     r0,#0x15              ;929
00032c  f7fffffe          BL       GPIO_Set_PE
000330  2101              MOVS     r1,#1                 ;930
000332  2016              MOVS     r0,#0x16              ;930
000334  f7fffffe          BL       GPIO_Set_PE
000338  e6d6              B        |L2.232|
                  |L2.826|
00033a  2300              MOVS     r3,#0                 ;946
00033c  461a              MOV      r2,r3                 ;946
00033e  2103              MOVS     r1,#3                 ;946
000340  2017              MOVS     r0,#0x17              ;946
000342  f7fffffe          BL       GPIO_Init
000346  2300              MOVS     r3,#0                 ;947
000348  461a              MOV      r2,r3                 ;947
00034a  2103              MOVS     r1,#3                 ;947
00034c  2018              MOVS     r0,#0x18              ;947
00034e  f7fffffe          BL       GPIO_Init
000352  2300              MOVS     r3,#0                 ;948
000354  461a              MOV      r2,r3                 ;948
000356  2103              MOVS     r1,#3                 ;948
000358  2019              MOVS     r0,#0x19              ;948
00035a  f7fffffe          BL       GPIO_Init
00035e  2300              MOVS     r3,#0                 ;949
000360  461a              MOV      r2,r3                 ;949
000362  2103              MOVS     r1,#3                 ;949
000364  201a              MOVS     r0,#0x1a              ;949
000366  f7fffffe          BL       GPIO_Init
00036a  2101              MOVS     r1,#1                 ;951
00036c  2017              MOVS     r0,#0x17              ;951
00036e  f7fffffe          BL       GPIO_Set_PE
000372  2101              MOVS     r1,#1                 ;952
000374  2018              MOVS     r0,#0x18              ;952
000376  f7fffffe          BL       GPIO_Set_PE
00037a  2101              MOVS     r1,#1                 ;953
00037c  2019              MOVS     r0,#0x19              ;953
00037e  f7fffffe          BL       GPIO_Set_PE
000382  2101              MOVS     r1,#1                 ;954
000384  201a              MOVS     r0,#0x1a              ;954
000386  f7fffffe          BL       GPIO_Set_PE
00038a  e6cc              B        |L2.294|
                  |L2.908|
00038c  2300              MOVS     r3,#0                 ;970
00038e  461a              MOV      r2,r3                 ;970
000390  2103              MOVS     r1,#3                 ;970
000392  201b              MOVS     r0,#0x1b              ;970
000394  f7fffffe          BL       GPIO_Init
000398  2300              MOVS     r3,#0                 ;971
00039a  461a              MOV      r2,r3                 ;971
00039c  2103              MOVS     r1,#3                 ;971
00039e  201c              MOVS     r0,#0x1c              ;971
0003a0  f7fffffe          BL       GPIO_Init
0003a4  2300              MOVS     r3,#0                 ;972
0003a6  461a              MOV      r2,r3                 ;972
0003a8  2103              MOVS     r1,#3                 ;972
0003aa  201d              MOVS     r0,#0x1d              ;972
0003ac  f7fffffe          BL       GPIO_Init
0003b0  2300              MOVS     r3,#0                 ;973
0003b2  461a              MOV      r2,r3                 ;973
0003b4  2103              MOVS     r1,#3                 ;973
0003b6  201e              MOVS     r0,#0x1e              ;973
0003b8  f7fffffe          BL       GPIO_Init
0003bc  2101              MOVS     r1,#1                 ;975
0003be  201b              MOVS     r0,#0x1b              ;975
0003c0  f7fffffe          BL       GPIO_Set_PE
0003c4  2101              MOVS     r1,#1                 ;976
0003c6  201c              MOVS     r0,#0x1c              ;976
0003c8  f7fffffe          BL       GPIO_Set_PE
0003cc  2101              MOVS     r1,#1                 ;977
0003ce  201d              MOVS     r0,#0x1d              ;977
0003d0  f7fffffe          BL       GPIO_Set_PE
0003d4  2101              MOVS     r1,#1                 ;978
0003d6  201e              MOVS     r0,#0x1e              ;978
0003d8  f7fffffe          BL       GPIO_Set_PE
0003dc  e6c2              B        |L2.356|
                  |L2.990|
0003de  2300              MOVS     r3,#0                 ;994
0003e0  461a              MOV      r2,r3                 ;994
0003e2  2103              MOVS     r1,#3                 ;994
0003e4  201f              MOVS     r0,#0x1f              ;994
0003e6  f7fffffe          BL       GPIO_Init
0003ea  2300              MOVS     r3,#0                 ;995
0003ec  461a              MOV      r2,r3                 ;995
0003ee  2103              MOVS     r1,#3                 ;995
0003f0  2020              MOVS     r0,#0x20              ;995
0003f2  f7fffffe          BL       GPIO_Init
0003f6  2300              MOVS     r3,#0                 ;1001
0003f8  461a              MOV      r2,r3                 ;1001
0003fa  2103              MOVS     r1,#3                 ;1001
0003fc  2021              MOVS     r0,#0x21              ;1001
0003fe  f7fffffe          BL       GPIO_Init
000402  2300              MOVS     r3,#0                 ;1003
000404  461a              MOV      r2,r3                 ;1003
000406  2103              MOVS     r1,#3                 ;1003
000408  2022              MOVS     r0,#0x22              ;1003
00040a  f7fffffe          BL       GPIO_Init
00040e  2101              MOVS     r1,#1                 ;1005
000410  201f              MOVS     r0,#0x1f              ;1005
000412  f7fffffe          BL       GPIO_Set_PE
000416  2101              MOVS     r1,#1                 ;1006
000418  2020              MOVS     r0,#0x20              ;1006
00041a  f7fffffe          BL       GPIO_Set_PE
00041e  2101              MOVS     r1,#1                 ;1012
000420  2021              MOVS     r0,#0x21              ;1012
000422  f7fffffe          BL       GPIO_Set_PE
000426  2101              MOVS     r1,#1                 ;1014
000428  2022              MOVS     r0,#0x22              ;1014
00042a  f7fffffe          BL       GPIO_Set_PE
00042e  e6b8              B        |L2.418|
                  |L2.1072|
000430  2300              MOVS     r3,#0                 ;1042
000432  461a              MOV      r2,r3                 ;1042
000434  2103              MOVS     r1,#3                 ;1042
000436  2023              MOVS     r0,#0x23              ;1042
000438  f7fffffe          BL       GPIO_Init
00043c  2300              MOVS     r3,#0                 ;1043
00043e  461a              MOV      r2,r3                 ;1043
000440  2103              MOVS     r1,#3                 ;1043
000442  2024              MOVS     r0,#0x24              ;1043
000444  f7fffffe          BL       GPIO_Init
000448  2300              MOVS     r3,#0                 ;1047
00044a  461a              MOV      r2,r3                 ;1047
00044c  2103              MOVS     r1,#3                 ;1047
00044e  2026              MOVS     r0,#0x26              ;1047
000450  f7fffffe          BL       GPIO_Init
000454  2101              MOVS     r1,#1                 ;1049
000456  2023              MOVS     r0,#0x23              ;1049
000458  f7fffffe          BL       GPIO_Set_PE
00045c  2101              MOVS     r1,#1                 ;1050
00045e  2024              MOVS     r0,#0x24              ;1050
000460  f7fffffe          BL       GPIO_Set_PE
000464  2101              MOVS     r1,#1                 ;1054
000466  2026              MOVS     r0,#0x26              ;1054
000468  f7fffffe          BL       GPIO_Set_PE
00046c  e6b0              B        |L2.464|
                  |L2.1134|
00046e  2300              MOVS     r3,#0                 ;1075
000470  461a              MOV      r2,r3                 ;1075
000472  2103              MOVS     r1,#3                 ;1075
000474  2027              MOVS     r0,#0x27              ;1075
000476  f7fffffe          BL       GPIO_Init
00047a  2300              MOVS     r3,#0                 ;1076
00047c  461a              MOV      r2,r3                 ;1076
00047e  2103              MOVS     r1,#3                 ;1076
000480  2028              MOVS     r0,#0x28              ;1076
000482  f7fffffe          BL       GPIO_Init
000486  2300              MOVS     r3,#0                 ;1080
000488  461a              MOV      r2,r3                 ;1080
00048a  2103              MOVS     r1,#3                 ;1080
00048c  202a              MOVS     r0,#0x2a              ;1080
00048e  f7fffffe          BL       GPIO_Init
000492  2101              MOVS     r1,#1                 ;1082
000494  2027              MOVS     r0,#0x27              ;1082
000496  f7fffffe          BL       GPIO_Set_PE
00049a  2101              MOVS     r1,#1                 ;1083
00049c  2028              MOVS     r0,#0x28              ;1083
00049e  f7fffffe          BL       GPIO_Set_PE
0004a2  2101              MOVS     r1,#1                 ;1087
0004a4  202a              MOVS     r0,#0x2a              ;1087
0004a6  f7fffffe          BL       GPIO_Set_PE
0004aa  e6a9              B        |L2.512|
;;;1114   #endif /* (USED_VCF_SYNC_CONTROL == NO) */
;;;1115   }
;;;1116   
                          ENDP


                          AREA ||i.MSPI_ITConfig||, CODE, READONLY, ALIGN=2

                  MSPI_ITConfig PROC
;;;394    
;;;395    void MSPI_ITConfig(FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
000004  f44f2100          MOV      r1,#0x80000
000008  f8c21280          STR      r1,[r2,#0x280]
00000c  f8dfc014          LDR      r12,|L3.36|
000010  2320              MOVS     r3,#0x20
000012  f88c3400          STRB     r3,[r12,#0x400]
;;;396    {
;;;397    	NVIC_ClearPendingIRQ(EXTInterface_IRQn);
;;;398    	NVIC_SetPriority(EXTInterface_IRQn, MSPI_IRQn_Priority);
;;;399    
;;;400    	if(NewState != DISABLE)
000016  2800              CMP      r0,#0
000018  bf14              ITE      NE
00001a  f8c21100          STRNE    r1,[r2,#0x100]
00001e  f8c21180          STREQ    r1,[r2,#0x180]
;;;401    	{
;;;402    		NVIC_EnableIRQ(EXTInterface_IRQn);
;;;403    	}
;;;404    	else
;;;405    	{
;;;406    		NVIC_DisableIRQ(EXTInterface_IRQn);
;;;407    	}
;;;408    }
000022  4770              BX       lr
;;;409    
                          ENDP

                  |L3.36|
                          DCD      0xe000e013

                          AREA ||i.MSPI_Initialize||, CODE, READONLY, ALIGN=2

                  MSPI_Initialize PROC
;;;370    
;;;371    void MSPI_Initialize(void)
000000  491a              LDR      r1,|L4.108|
;;;372    {
000002  b510              PUSH     {r4,lr}
;;;373    	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;374    	Fncp_MSPI_IRQHandler = &MSPI_InterruptHandler;
000004  4818              LDR      r0,|L4.104|
;;;375    	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000006  6008              STR      r0,[r1,#0]  ; Fncp_MSPI_IRQHandler
000008  f7fffffe          BL       hal_mspi_GetCommonConfig
00000c  4604              MOV      r4,r0
;;;376    	
;;;377    	MSPI_GPIO_Init();
00000e  f7fffffe          BL       MSPI_GPIO_Init
;;;378    	
;;;379    	MSPI->tSPIENA.ulBulk = kptHalMspiCommonConf->tParam_SPIENA.ulBulk;
000012  f8d400d8          LDR      r0,[r4,#0xd8]
000016  f04f2140          MOV      r1,#0x40004000
00001a  6008              STR      r0,[r1,#0]
;;;380    	MSPI->tSPISCR.ulBulk = kptHalMspiCommonConf->tParam_SPISCR.ulBulk;
00001c  f8d400dc          LDR      r0,[r4,#0xdc]
000020  6048              STR      r0,[r1,#4]
;;;381    
;;;382    	MSPI->tSINTRENCLR.ulBulk = 0x1F;
000022  201f              MOVS     r0,#0x1f
000024  61c8              STR      r0,[r1,#0x1c]
;;;383    
;;;384    	MSPI->tSINTRMSCR.tBit.intmux_en = DISABLE;
000026  6948              LDR      r0,[r1,#0x14]
000028  f0200001          BIC      r0,r0,#1
00002c  6148              STR      r0,[r1,#0x14]
;;;385    	MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
00002e  6948              LDR      r0,[r1,#0x14]
000030  f0400002          ORR      r0,r0,#2
000034  6148              STR      r0,[r1,#0x14]
;;;386    	MSPI->tSINTRMSCR.tBit.introic_en = DISABLE;
000036  6948              LDR      r0,[r1,#0x14]
000038  f0200004          BIC      r0,r0,#4
00003c  6148              STR      r0,[r1,#0x14]
;;;387    	MSPI->tSINTRMSCR.tBit.intchksum_en = DISABLE;
00003e  6948              LDR      r0,[r1,#0x14]
000040  f0200008          BIC      r0,r0,#8
000044  6148              STR      r0,[r1,#0x14]
;;;388    	MSPI->tSINTRMSCR.tBit.intmisozero_en = DISABLE;
000046  6948              LDR      r0,[r1,#0x14]
000048  f0200010          BIC      r0,r0,#0x10
00004c  6148              STR      r0,[r1,#0x14]
;;;389    
;;;390    	SPI_ALL_ROIC_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
00004e  6988              LDR      r0,[r1,#0x18]
000050  f420707f          BIC      r0,r0,#0x3fc
000054  6188              STR      r0,[r1,#0x18]
;;;391    	SPI_ALL_CHECKSUM_ERROR_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
000056  6988              LDR      r0,[r1,#0x18]
000058  f420307f          BIC      r0,r0,#0x3fc00
00005c  6188              STR      r0,[r1,#0x18]
;;;392    	SPI_ALL_MISOZERO_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
00005e  6988              LDR      r0,[r1,#0x18]
000060  f420707f          BIC      r0,r0,#0x3fc
000064  6188              STR      r0,[r1,#0x18]
;;;393    }
000066  bd10              POP      {r4,pc}
;;;394    
                          ENDP

                  |L4.104|
                          DCD      MSPI_InterruptHandler
                  |L4.108|
                          DCD      Fncp_MSPI_IRQHandler

                          AREA ||i.MSPI_IntCLR||, CODE, READONLY, ALIGN=1

                  MSPI_IntCLR PROC
;;;421    
;;;422    void MSPI_IntCLR(void)
000000  f04f2040          MOV      r0,#0x40004000
                  |L5.4|
;;;423    {
;;;424    	while(1)
;;;425    	{
;;;426    		if(MSPI->tSPISTART.ulBulk == 0x00)
000004  6c41              LDR      r1,[r0,#0x44]
000006  2900              CMP      r1,#0
000008  d1fc              BNE      |L5.4|
;;;427    		{
;;;428    			break;
;;;429    		}
;;;430    	}
;;;431    }
00000a  4770              BX       lr
;;;432    
                          ENDP


                          AREA ||i.MSPI_InterruptHandler||, CODE, READONLY, ALIGN=2

                  MSPI_InterruptHandler PROC
;;;55     //#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;56     void MSPI_InterruptHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
;;;58     	__IO static int nextMSPISize;
;;;59     	const tHalPwmdrvCommonConf_t * pktHalPwmdrvCommonConf = hal_pwmdrv_GetCommonConfig();
000002  f7fffffe          BL       hal_pwmdrv_GetCommonConfig
;;;60     	const tHalMspiControlConf_t * tHalMSPIControlConf = hal_mspi_GetControlConfig();
000006  f7fffffe          BL       hal_mspi_GetControlConfig
;;;61     	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
00000a  f7fffffe          BL       HAL_GetSensingMode
;;;62     
;;;63     	if(SCRB->SYS_INT_ST.tBit.int_mspi != 0)
00000e  f04f4180          MOV      r1,#0x40000000
000012  6989              LDR      r1,[r1,#0x18]
000014  f0115f00          TST      r1,#0x20000000
;;;64     	{
;;;65     		MSPI->tSINTRENCLR.ulBulk = 0x1F;
;;;66     		switch(eSensingMode)
;;;67     		{
;;;68     #if USED_PEN_MODE_OPERATION
;;;69     			case SM_FINGER_PEN_ACTIVE_MODE:
;;;70     			{
;;;71     				tHalIntrHandle.eLocalSensingType = tHalMSPIControlConf->ePenPartialIndex[tHalIntrHandle.ulMSPIPenModeIntrCnt];
;;;72     
;;;73     				tHalIntrHandle.ulMSPIPenModeIntrCnt++;
;;;74     				if(tHalIntrHandle.ulMSPIPenModeIntrCnt > tHalMSPIControlConf->MSPI_LHBCountNum)
;;;75     				{
;;;76     					tHalIntrHandle.ulMSPIPenModeIntrCnt = 0;
;;;77     				}
;;;78     				nextMSPISize = tHalIntrHandle.ulMSPIPenModeIntrCnt;
;;;79     
;;;80     				hal_Info_SetControlActivePenRawDataType(hal_Info_GetControlActivePenOPType());
;;;81     
;;;82     				if(tHalIntrHandle.ulLocalIndexChangeStart == 1)
;;;83     				{
;;;84     					if(nextMSPISize == 0)
;;;85     					{
;;;86     	#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;87     						if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;88     						{
;;;89     							HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;90     						}
;;;91     						else
;;;92     						{
;;;93     							if(HAL_CheckActivePenTypeSwap())
;;;94     							{
;;;95     								if(HAL_CheckActivePenChangeType())
;;;96     								{
;;;97     									HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_DONE);
;;;98     								}
;;;99     							}
;;;100    							else
;;;101    							{
;;;102    	#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;103    								SRIC_SetLocalIndex(sensingRowStart);
;;;104    	#else /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;105    								SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;106    	#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;107    							}
;;;108    						}
;;;109    	#else /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;110    						if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;111    						{
;;;112    							HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;113    							MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;114    							break;
;;;115    						}
;;;116    	#endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;117    					}
;;;118    
;;;119    					switch(hal_Info_GetControlActivePenSettingType())
;;;120    					{
;;;121    						case ACTIVEPEN_TYPE_LOCAL_MS:
;;;122    						{
;;;123    	#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;124    							switch (nextMSPISize)
;;;125    							{
;;;126    								case 4:		// 03LHB
;;;127    								case 6:		// 07LHB
;;;128    								case 10:	// 13LHB
;;;129    	#if !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;130    								case 0:		// 15LHB
;;;131    	#endif /* !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;132    								{
;;;133    	#if USED_ADAPTIVE_LOCAL_SENSING
;;;134    									SRIC_SetRoicIndex(sensingRoicStart);
;;;135    	#endif /* USED_ADAPTIVE_LOCAL_SENSING */
;;;136    									SRIC_SetLocalIndex(sensingRowStart);
;;;137    									break;
;;;138    								}
;;;139    								default:
;;;140    									break;
;;;141    							}
;;;142    	#else /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;143    							switch (nextMSPISize)
;;;144    							{
;;;145    								case 4:		// 03LHB
;;;146    								case 6:		// 07LHB
;;;147    								case 8://10:	// 13LHB
;;;148    	#if !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;149    								case 0:		// 15LHB
;;;150    	#endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;151    								{
;;;152    									SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;153    									break;
;;;154    								}
;;;155    								default:
;;;156    									break;
;;;157    							}
;;;158    	#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;159    							break;
;;;160    						}
;;;161    						case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;162    						{
;;;163    							switch (nextMSPISize)
;;;164    							{
;;;165    								case 3:		// 03LHB
;;;166    								case 7:		// 07LHB
;;;167    								case 9:		// 13LHB
;;;168    	#if !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;169    								case 0:		// 15LHB
;;;170    	#endif /* !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;171    								{
;;;172    	#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;173    									SRIC_SetLocalIndex(sensingRowStart);
;;;174    	#else /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;175    									SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;176    	#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;177    									break;
;;;178    								}
;;;179    								default:
;;;180    									break;
;;;181    							}
;;;182    							break;
;;;183    						}
;;;184    						case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;185    						{
;;;186    	#if USED_LOCAL_IDLE_MODE_CONTROL
;;;187    		#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;188    							if(IS_ACTIVE_MODE(eSensingMode))
;;;189    							{
;;;190    								switch (nextMSPISize)
;;;191    								{
;;;192    									case 2:		// 03LHB
;;;193    									case 4:		// 05LHB
;;;194    									case 6:		// 07LHB
;;;195    	//								case 0:		// 15LHB // It must set time of Beacon LHB!!
;;;196    									{
;;;197    										SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;198    										break;
;;;199    									}
;;;200    									default:
;;;201    										break;
;;;202    								}
;;;203    							}
;;;204    		#else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;205    							if(IS_ACTIVE_MODE(eSensingMode))
;;;206    							{
;;;207    								switch (nextMSPISize)
;;;208    								{
;;;209    									case 2:		// 03LHB
;;;210    									case 6:		// 07LHB
;;;211    									case 10:	// 11LHB
;;;212    									case 0:		// 14LHB
;;;213    									{
;;;214    			#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;215    										SRIC_SetLocalIndex(sensingRowStart);
;;;216    			#else /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;217    										SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;218    			#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;219    										break;
;;;220    									}
;;;221    									default:
;;;222    										break;
;;;223    								}
;;;224    							}
;;;225    							else
;;;226    							{
;;;227    								switch (nextMSPISize)
;;;228    								{
;;;229    									case 3:		// 07LHB
;;;230    									case 6:		// 07LHB
;;;231    									{
;;;232    										uint32_t ulTempNextSPISize;
;;;233    										if(nextMSPISize == 3)
;;;234    										{
;;;235    											ulTempNextSPISize = nextMSPISize+3;
;;;236    										}
;;;237    										else if(nextMSPISize == 6)
;;;238    										{
;;;239    											ulTempNextSPISize = nextMSPISize+4;
;;;240    										}
;;;241    										SRIC_SetLocalIndex(((ulTempNextSPISize << 16) | sensingRowStart));
;;;242    										break;
;;;243    									}
;;;244    									default:
;;;245    										break;
;;;246    								}
;;;247    							}
;;;248    		#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;249    	#else /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;250    		#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;251    							switch (nextMSPISize)
;;;252    							{
;;;253    								case 2:		// 03LHB
;;;254    								case 4:		// 05LHB
;;;255    								case 6:		// 07LHB
;;;256    	//								case 0:		// 15LHB // It must set time of Beacon LHB!!
;;;257    								{
;;;258    									SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;259    									break;
;;;260    								}
;;;261    								default:
;;;262    									break;
;;;263    							}
;;;264    		#else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;265    							switch (nextMSPISize)
;;;266    							{
;;;267    								case 2:		// 03LHB
;;;268    								case 6:		// 07LHB
;;;269    								case 10:	// 11LHB
;;;270    			#if !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;271    								case 0:		// 15LHB
;;;272    			#endif /* !((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;273    								{
;;;274    			#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;275    									SRIC_SetLocalIndex(sensingRowStart);
;;;276    			#else /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;277    									SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;278    			#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;279    									break;
;;;280    								}
;;;281    								default:
;;;282    									break;
;;;283    							}
;;;284    		#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;285    
;;;286    	#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;287    							break;
;;;288    						}
;;;289    					}
;;;290    				}
;;;291    
;;;292    				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;293    				callPendSV();
;;;294    				break;
;;;295    			}
;;;296    #endif /*  */
;;;297    			case SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE:
;;;298    			case SM_FINGER_ONLY_ACTIVE_FRQ_HOP1_MODE:
;;;299    			case SM_FINGER_ONLY_ACTIVE_FRQ_HOP2_MODE:
;;;300    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_MAIN_MODE:
;;;301    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP1_MODE:
;;;302    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP2_MODE:
;;;303    			{
;;;304    #if !((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))
;;;305    				tHalIntrHandle.ulMSPIPenModeIntrCnt++;
;;;306    				if(tHalIntrHandle.ulMSPIPenModeIntrCnt > 1)
;;;307    				{
;;;308    					tHalIntrHandle.ulMSPIPenModeIntrCnt = 0;
;;;309    				}
;;;310    				nextMSPISize = tHalIntrHandle.ulMSPIPenModeIntrCnt;
;;;311    
;;;312    				if(nextMSPISize == 0)
;;;313    #endif /* !((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3)) */
;;;314    				{
;;;315    					if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;316    					{
;;;317    						HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;318    					}
;;;319    				}
;;;320    				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;321    
;;;322    				hal_set_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;323    				break;
;;;324    			}
;;;325    			case SM_FINGER_ONLY_IDLE_MODE:
;;;326    			case SM_FINGER_PEN_IDLE_MODE:
;;;327    			{
;;;328    //				_gT(_GPIO_TP_INTR);
;;;329    //				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;330    				if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;331    				{
;;;332    					HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;333    					MSPI_Set_BUFSIZE_FingerPenMode(0);
;;;334    				}
;;;335    #if USED_LOCAL_IDLE_30Hz
;;;336    				else
;;;337    				{
;;;338    					MSPI_Set_TLPMODE();
;;;339    					/*
;;;340    					 * ROIC Power Down!!
;;;341    					 */
;;;342    					MSPI_RegisterWrite((uint32_t)(0x01C0), 0);
;;;343    					MSPI_Set_AITMODE(HAL_GetSensingMode());
;;;344    					MSPI_Set_BUFSIZE_FingerPenMode(0);
;;;345    				}
;;;346    #endif /* USED_LOCAL_IDLE_30Hz */
;;;347    				hal_set_irq_flag(IRQ_ID_NI_SAMPLE);
;;;348    				break;
;;;349    			}
;;;350    			case SM_S3_ACTIVE_MODE:
;;;351    			case SM_S3_IDLE_MODE:
;;;352    			{
;;;353    				hal_set_irq_flag(IRQ_ID_S3_SAMPLE);
;;;354    				break;
;;;355    			}
;;;356    			default:
;;;357    				break;
;;;358    		}
;;;359    
;;;360    #if ECLK_NEED_DURING_MSPI_OPERATION
;;;361    		if(HAL_GetECLKOnOffControl())
;;;362    		{
;;;363    			HAL_ECLK_Off();
;;;364    		}
;;;365    #endif /* ECLK_NEED_DURING_MSPI_OPERATION */
;;;366    
;;;367    		MSPI->SPIAITSTART = MSPI_START_VAL;
;;;368    	}
;;;369    }
000018  bf08              IT       EQ
00001a  bd70              POPEQ    {r4-r6,pc}
00001c  211f              MOVS     r1,#0x1f              ;65
00001e  f04f2440          MOV      r4,#0x40004000        ;65
000022  61e1              STR      r1,[r4,#0x1c]         ;65
000024  2501              MOVS     r5,#1                 ;65
000026  2608              MOVS     r6,#8                 ;65
000028  f5b05f88          CMP      r0,#0x1100            ;66
00002c  d047              BEQ      |L6.190|
00002e  dc14              BGT      |L6.90|
000030  f2410203          MOV      r2,#0x1003            ;66
000034  eba00102          SUB      r1,r0,r2              ;66
000038  4290              CMP      r0,r2                 ;66
00003a  d01c              BEQ      |L6.118|
00003c  dc08              BGT      |L6.80|
00003e  f5a06000          SUB      r0,r0,#0x800          ;66
000042  3801              SUBS     r0,#1                 ;66
000044  bf12              ITEE     NE                    ;66
000046  28ff              CMPNE    r0,#0xff              ;66
000048  2003              MOVEQ    r0,#3                 ;353
00004a  f7fffffe          BLEQ     hal_set_irq_flag
00004e  e058              B        |L6.258|
                  |L6.80|
000050  2902              CMP      r1,#2                 ;66
000052  bf18              IT       NE                    ;66
000054  2906              CMPNE    r1,#6                 ;66
000056  d154              BNE      |L6.258|
000058  e00d              B        |L6.118|
                  |L6.90|
00005a  f1a00003          SUB      r0,r0,#3              ;66
00005e  f5b05000          SUBS     r0,r0,#0x2000         ;66
000062  bf1c              ITT      NE                    ;66
000064  2802              CMPNE    r0,#2                 ;66
000066  2806              CMPNE    r0,#6                 ;66
000068  d005              BEQ      |L6.118|
00006a  f1a000fd          SUB      r0,r0,#0xfd           ;66
00006e  f5b05f00          CMP      r0,#0x2000            ;66
000072  d024              BEQ      |L6.190|
000074  e045              B        |L6.258|
                  |L6.118|
000076  f7fffffe          BL       HAL_GetSensingChangeMode
00007a  f7fffffe          BL       HAL_CheckSensningModeChange
00007e  2800              CMP      r0,#0                 ;315
000080  bf1c              ITT      NE                    ;317
000082  2000              MOVNE    r0,#0                 ;317
000084  f7fffffe          BLNE     HAL_SetSensingChangeMode
000088  4822              LDR      r0,|L6.276|
00008a  6800              LDR      r0,[r0,#0]            ;320  ; nextMSPISize
00008c  f7fffffe          BL       HAL_GetSensingMode
000090  f4106f00          TST      r0,#0x800             ;320
000094  d10c              BNE      |L6.176|
000096  f0100f01          TST      r0,#1                 ;320
00009a  d009              BEQ      |L6.176|
00009c  62e6              STR      r6,[r4,#0x2c]         ;320
00009e  6960              LDR      r0,[r4,#0x14]         ;320
0000a0  f0200001          BIC      r0,r0,#1              ;320
0000a4  6160              STR      r0,[r4,#0x14]         ;320
0000a6  6960              LDR      r0,[r4,#0x14]         ;320
0000a8  f0400002          ORR      r0,r0,#2              ;320
0000ac  6160              STR      r0,[r4,#0x14]         ;320
0000ae  e000              B        |L6.178|
                  |L6.176|
0000b0  62e5              STR      r5,[r4,#0x2c]         ;320
                  |L6.178|
0000b2  6f20              LDR      r0,[r4,#0x70]         ;320
0000b4  f02000fe          BIC      r0,r0,#0xfe           ;320
0000b8  6720              STR      r0,[r4,#0x70]         ;320
0000ba  2001              MOVS     r0,#1                 ;322
0000bc  e01f              B        |L6.254|
                  |L6.190|
0000be  f7fffffe          BL       HAL_GetSensingChangeMode
0000c2  f7fffffe          BL       HAL_CheckSensningModeChange
0000c6  b1c8              CBZ      r0,|L6.252|
0000c8  2000              MOVS     r0,#0                 ;332
0000ca  f7fffffe          BL       HAL_SetSensingChangeMode
0000ce  f7fffffe          BL       HAL_GetSensingMode
0000d2  f4106f00          TST      r0,#0x800             ;332
0000d6  d10c              BNE      |L6.242|
0000d8  f0100f01          TST      r0,#1                 ;332
0000dc  d009              BEQ      |L6.242|
0000de  62e6              STR      r6,[r4,#0x2c]         ;332
0000e0  6960              LDR      r0,[r4,#0x14]         ;332
0000e2  f0200001          BIC      r0,r0,#1              ;332
0000e6  6160              STR      r0,[r4,#0x14]         ;332
0000e8  6960              LDR      r0,[r4,#0x14]         ;332
0000ea  f0400002          ORR      r0,r0,#2              ;332
0000ee  6160              STR      r0,[r4,#0x14]         ;332
0000f0  e000              B        |L6.244|
                  |L6.242|
0000f2  62e5              STR      r5,[r4,#0x2c]         ;332
                  |L6.244|
0000f4  6f20              LDR      r0,[r4,#0x70]         ;332
0000f6  f02000fe          BIC      r0,r0,#0xfe           ;332
0000fa  6720              STR      r0,[r4,#0x70]         ;332
                  |L6.252|
0000fc  2002              MOVS     r0,#2                 ;347
                  |L6.254|
0000fe  f7fffffe          BL       hal_set_irq_flag
                  |L6.258|
000102  f7fffffe          BL       HAL_GetECLKOnOffControl
000106  2800              CMP      r0,#0                 ;361
000108  bf18              IT       NE                    ;363
00010a  f7fffffe          BLNE     HAL_ECLK_Off
00010e  200f              MOVS     r0,#0xf               ;367
000110  62a0              STR      r0,[r4,#0x28]         ;367
000112  bd70              POP      {r4-r6,pc}
;;;370    
                          ENDP

                  |L6.276|
                          DCD      ||area_number.21||

                          AREA ||i.MSPI_RegisterMultiWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterMultiWrite PROC
;;;1424   
;;;1425   void MSPI_RegisterMultiWrite(uint32_t Addr, uint32_t * value)
000000  4b6d              LDR      r3,|L7.440|
;;;1426   {
000002  b410              PUSH     {r4}
;;;1427   	uint8_t iMspi;
;;;1428   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;1429   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;1430   
;;;1431   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 0;
000004  f8d3208c          LDR      r2,[r3,#0x8c]
000008  f4227200          BIC      r2,r2,#0x200
00000c  f8c3208c          STR      r2,[r3,#0x8c]
;;;1432   
;;;1433   	pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
000010  4a6a              LDR      r2,|L7.444|
;;;1434   	pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
;;;1435   
;;;1436   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1437   	{
;;;1438   		pMSPI_SEND_BUFF[iMspi].Addr = Addr;
000012  8010              STRH     r0,[r2,#0]
;;;1439   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000014  f8b2c002          LDRH     r12,[r2,#2]
;;;1440   		pMSPI_SEND_BUFF[iMspi].tBit.CKS = 0;
;;;1441   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 2;
000018  f42c4cff          BIC      r12,r12,#0x7f80
00001c  f42c4c00          BIC      r12,r12,#0x8000
000020  f50c7c80          ADD      r12,r12,#0x100
000024  f8a2c002          STRH     r12,[r2,#2]
;;;1442   		pMSPI_SEND_BUFF[iMspi].Data_M = value[iMspi] >> 16;
000028  f8d1c000          LDR      r12,[r1,#0]
00002c  ea4f4c1c          LSR      r12,r12,#16
000030  f8a2c004          STRH     r12,[r2,#4]
;;;1443   		pMSPI_SEND_BUFF[iMspi].Data_L = value[iMspi] & 0xFFFF;
000034  f8b1c000          LDRH     r12,[r1,#0]
000038  f8a2c006          STRH     r12,[r2,#6]
00003c  8110              STRH     r0,[r2,#8]            ;1438
00003e  f8b2c00a          LDRH     r12,[r2,#0xa]         ;1439
000042  f42c4cff          BIC      r12,r12,#0x7f80       ;1441
000046  f42c4c00          BIC      r12,r12,#0x8000       ;1441
00004a  f50c7c80          ADD      r12,r12,#0x100        ;1441
00004e  f8a2c00a          STRH     r12,[r2,#0xa]         ;1441
000052  f8d1c004          LDR      r12,[r1,#4]           ;1442
000056  ea4f4c1c          LSR      r12,r12,#16           ;1442
00005a  f8a2c00c          STRH     r12,[r2,#0xc]         ;1442
00005e  f8b1c004          LDRH     r12,[r1,#4]
000062  f8a2c00e          STRH     r12,[r2,#0xe]
000066  8210              STRH     r0,[r2,#0x10]         ;1438
000068  f8b2c012          LDRH     r12,[r2,#0x12]        ;1439
00006c  f42c4cff          BIC      r12,r12,#0x7f80       ;1441
000070  f42c4c00          BIC      r12,r12,#0x8000       ;1441
000074  f50c7c80          ADD      r12,r12,#0x100        ;1441
000078  f8a2c012          STRH     r12,[r2,#0x12]        ;1441
00007c  f8d1c008          LDR      r12,[r1,#8]           ;1442
000080  ea4f4c1c          LSR      r12,r12,#16           ;1442
000084  f8a2c014          STRH     r12,[r2,#0x14]        ;1442
000088  f8b1c008          LDRH     r12,[r1,#8]
00008c  f8a2c016          STRH     r12,[r2,#0x16]
000090  8310              STRH     r0,[r2,#0x18]         ;1438
000092  8b50              LDRH     r0,[r2,#0x1a]         ;1439
000094  f42040ff          BIC      r0,r0,#0x7f80         ;1441
000098  f4204000          BIC      r0,r0,#0x8000         ;1441
00009c  f5007080          ADD      r0,r0,#0x100          ;1441
0000a0  8350              STRH     r0,[r2,#0x1a]         ;1441
0000a2  68c8              LDR      r0,[r1,#0xc]          ;1442
0000a4  0c00              LSRS     r0,r0,#16             ;1442
0000a6  8390              STRH     r0,[r2,#0x1c]         ;1442
0000a8  8988              LDRH     r0,[r1,#0xc]
0000aa  83d0              STRH     r0,[r2,#0x1e]
;;;1444   	}
;;;1445   
;;;1446   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
0000ac  f04f2040          MOV      r0,#0x40004000
0000b0  6801              LDR      r1,[r0,#0]
0000b2  f4217180          BIC      r1,r1,#0x100
0000b6  6001              STR      r1,[r0,#0]
;;;1447   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
0000b8  6801              LDR      r1,[r0,#0]
0000ba  f4217100          BIC      r1,r1,#0x200
0000be  6001              STR      r1,[r0,#0]
;;;1448   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
0000c0  6801              LDR      r1,[r0,#0]
0000c2  f4216180          BIC      r1,r1,#0x400
0000c6  6001              STR      r1,[r0,#0]
;;;1449   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
0000c8  6801              LDR      r1,[r0,#0]
0000ca  f4216100          BIC      r1,r1,#0x800
0000ce  6001              STR      r1,[r0,#0]
;;;1450   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
0000d0  6801              LDR      r1,[r0,#0]
0000d2  f4215180          BIC      r1,r1,#0x1000
0000d6  6001              STR      r1,[r0,#0]
;;;1451   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
0000d8  6801              LDR      r1,[r0,#0]
0000da  f4215100          BIC      r1,r1,#0x2000
0000de  6001              STR      r1,[r0,#0]
;;;1452   
;;;1453   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
0000e0  6a01              LDR      r1,[r0,#0x20]
0000e2  f02101ff          BIC      r1,r1,#0xff
0000e6  1cc9              ADDS     r1,r1,#3
0000e8  6201              STR      r1,[r0,#0x20]
;;;1454   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000ea  6a01              LDR      r1,[r0,#0x20]
0000ec  f421417f          BIC      r1,r1,#0xff00
0000f0  f5017140          ADD      r1,r1,#0x300
0000f4  6201              STR      r1,[r0,#0x20]
;;;1455   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000f6  6a01              LDR      r1,[r0,#0x20]
0000f8  f421017f          BIC      r1,r1,#0xff0000
0000fc  f5013140          ADD      r1,r1,#0x30000
000100  6201              STR      r1,[r0,#0x20]
;;;1456   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
000102  6a01              LDR      r1,[r0,#0x20]
000104  f021417f          BIC      r1,r1,#0xff000000
000108  f1017140          ADD      r1,r1,#0x3000000
00010c  6201              STR      r1,[r0,#0x20]
;;;1457   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
00010e  6a41              LDR      r1,[r0,#0x24]
000110  f02101ff          BIC      r1,r1,#0xff
000114  1cc9              ADDS     r1,r1,#3
000116  6241              STR      r1,[r0,#0x24]
;;;1458   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
000118  6a41              LDR      r1,[r0,#0x24]
00011a  f421417f          BIC      r1,r1,#0xff00
00011e  f5017140          ADD      r1,r1,#0x300
000122  6241              STR      r1,[r0,#0x24]
;;;1459   
;;;1460   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
000124  6881              LDR      r1,[r0,#8]
000126  f421417f          BIC      r1,r1,#0xff00
00012a  6081              STR      r1,[r0,#8]
;;;1461   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
00012c  6881              LDR      r1,[r0,#8]
00012e  f02101ff          BIC      r1,r1,#0xff
000132  1cc9              ADDS     r1,r1,#3
000134  6081              STR      r1,[r0,#8]
;;;1462   
;;;1463   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
000136  6c82              LDR      r2,[r0,#0x48]
;;;1464   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;1465   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;1466   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;1467   
;;;1468   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;1469   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;1470   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;1471   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;1472   
;;;1473   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;1474   
;;;1475   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;1476   
;;;1477   	MSPI_IntCLR();
;;;1478   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 1;
;;;1479   }
000138  2100              MOVS     r1,#0
00013a  f361020c          BFI      r2,r1,#0,#13          ;1463
00013e  6482              STR      r2,[r0,#0x48]         ;1463
000140  2208              MOVS     r2,#8
000142  f8d0c048          LDR      r12,[r0,#0x48]        ;1464
000146  2402              MOVS     r4,#2                 ;1464
000148  f3644c1c          BFI      r12,r4,#16,#13        ;1464
00014c  f8c0c048          STR      r12,[r0,#0x48]        ;1464
000150  f8d0c04c          LDR      r12,[r0,#0x4c]        ;1465
000154  2404              MOVS     r4,#4                 ;1465
000156  f3640c0c          BFI      r12,r4,#0,#13         ;1465
00015a  f8c0c04c          STR      r12,[r0,#0x4c]        ;1465
00015e  f8d0c04c          LDR      r12,[r0,#0x4c]        ;1466
000162  2406              MOVS     r4,#6                 ;1466
000164  f3644c1c          BFI      r12,r4,#16,#13        ;1466
000168  f8c0c04c          STR      r12,[r0,#0x4c]        ;1466
00016c  f8d0c058          LDR      r12,[r0,#0x58]        ;1468
000170  f3620c0c          BFI      r12,r2,#0,#13         ;1468
000174  f8c0c058          STR      r12,[r0,#0x58]        ;1468
000178  6d82              LDR      r2,[r0,#0x58]         ;1469
00017a  f04f0c0a          MOV      r12,#0xa              ;1469
00017e  f36c421c          BFI      r2,r12,#16,#13        ;1469
000182  6582              STR      r2,[r0,#0x58]         ;1469
000184  6dc2              LDR      r2,[r0,#0x5c]         ;1470
000186  f04f0c0c          MOV      r12,#0xc              ;1470
00018a  f36c020c          BFI      r2,r12,#0,#13         ;1470
00018e  65c2              STR      r2,[r0,#0x5c]         ;1470
000190  6dc2              LDR      r2,[r0,#0x5c]         ;1471
000192  f04f0c0e          MOV      r12,#0xe              ;1471
000196  f36c421c          BFI      r2,r12,#16,#13        ;1471
00019a  65c2              STR      r2,[r0,#0x5c]         ;1471
00019c  6141              STR      r1,[r0,#0x14]         ;1473
00019e  210f              MOVS     r1,#0xf               ;1475
0001a0  6441              STR      r1,[r0,#0x44]         ;1475
                  |L7.418|
0001a2  6c41              LDR      r1,[r0,#0x44]         ;1475
0001a4  2900              CMP      r1,#0                 ;1475
0001a6  d1fc              BNE      |L7.418|
0001a8  f8d3008c          LDR      r0,[r3,#0x8c]         ;1478
0001ac  f4407000          ORR      r0,r0,#0x200          ;1478
0001b0  f8c3008c          STR      r0,[r3,#0x8c]         ;1478
0001b4  bc10              POP      {r4}
0001b6  4770              BX       lr
;;;1480   
                          ENDP

                  |L7.440|
                          DCD      0x40002000
                  |L7.444|
                          DCD      0x20040000

                          AREA ||i.MSPI_RegisterRead||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterRead PROC
;;;1332   
;;;1333   void MSPI_RegisterRead(uint32_t Addr, uint32_t * ReadBuf, eROIC_Read_Option_t eOption)
000000  b470              PUSH     {r4-r6}
;;;1334   {
;;;1335   	uint8_t iMspi;
;;;1336   	uint32_t ulAddr;
;;;1337   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;1338   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;1339   
;;;1340   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 0;
000002  f8dfc1c4          LDR      r12,|L8.456|
000006  f8dc308c          LDR      r3,[r12,#0x8c]
00000a  f4237300          BIC      r3,r3,#0x200
00000e  f8cc308c          STR      r3,[r12,#0x8c]
;;;1341   
;;;1342   	pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
000012  4b6e              LDR      r3,|L8.460|
;;;1343   	pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
000014  4c6e              LDR      r4,|L8.464|
;;;1344   
;;;1345   	ulAddr = Addr;
;;;1346   	switch(eOption)
000016  2a01              CMP      r2,#1
000018  d00d              BEQ      |L8.54|
00001a  2a02              CMP      r2,#2
;;;1347   	{
;;;1348   		case MSPI_READ_SM0_R0:
;;;1349   		{
;;;1350   			ulAddr = Addr | MSPI_ROIC_LEFT | MSPI_NORMALMODE;
;;;1351   			break;
;;;1352   		}
;;;1353   		case MSPI_READ_SM0_R1:
;;;1354   		{
;;;1355   			ulAddr = Addr | MSPI_ROIC_RIGHT | MSPI_NORMALMODE;
00001c  bf08              IT       EQ
00001e  f4406000          ORREQ    r0,r0,#0x800
000022  d008              BEQ      |L8.54|
000024  2a03              CMP      r2,#3                 ;1346
;;;1356   			break;
;;;1357   		}
;;;1358   		case MSPI_READ_SM1_R0:
;;;1359   		{
;;;1360   			ulAddr = Addr | MSPI_ROIC_LEFT | MSPI_SHAREMODE;
000026  bf08              IT       EQ
000028  f4405080          ORREQ    r0,r0,#0x1000
00002c  d003              BEQ      |L8.54|
00002e  2a04              CMP      r2,#4                 ;1346
;;;1361   			break;
;;;1362   		}
;;;1363   		case MSPI_READ_SM1_R1:
;;;1364   		{
;;;1365   			ulAddr = Addr | MSPI_ROIC_RIGHT | MSPI_SHAREMODE;
000030  bf08              IT       EQ
000032  f44050c0          ORREQ    r0,r0,#0x1800
                  |L8.54|
;;;1366   			break;
;;;1367   		}
;;;1368   	}
;;;1369   
;;;1370   	for (iMspi = 0; iMspi < MSPI_NUM; iMspi++)
;;;1371   	{
;;;1372   		pMSPI_SEND_BUFF[iMspi].Addr = ulAddr;
000036  8018              STRH     r0,[r3,#0]
;;;1373   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
000038  885a              LDRH     r2,[r3,#2]
;;;1374   		pMSPI_SEND_BUFF[iMspi].tBit.CKS = 0;
00003a  f42242ff          BIC      r2,r2,#0x7f80
;;;1375   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 1;//2;
00003e  f4424200          ORR      r2,r2,#0x8000
000042  3280              ADDS     r2,r2,#0x80
000044  805a              STRH     r2,[r3,#2]
;;;1376   		pMSPI_SEND_BUFF[iMspi].Data_M = 0;
000046  2200              MOVS     r2,#0
000048  809a              STRH     r2,[r3,#4]
;;;1377   		pMSPI_SEND_BUFF[iMspi].Data_L = 0;
00004a  80da              STRH     r2,[r3,#6]
00004c  8118              STRH     r0,[r3,#8]            ;1372
00004e  895d              LDRH     r5,[r3,#0xa]          ;1373
000050  f42545ff          BIC      r5,r5,#0x7f80         ;1374
000054  f4454500          ORR      r5,r5,#0x8000         ;1375
000058  3580              ADDS     r5,r5,#0x80           ;1375
00005a  815d              STRH     r5,[r3,#0xa]          ;1375
00005c  819a              STRH     r2,[r3,#0xc]          ;1376
00005e  81da              STRH     r2,[r3,#0xe]
000060  8218              STRH     r0,[r3,#0x10]         ;1372
000062  8a5d              LDRH     r5,[r3,#0x12]         ;1373
000064  f42545ff          BIC      r5,r5,#0x7f80         ;1374
000068  f4454500          ORR      r5,r5,#0x8000         ;1375
00006c  3580              ADDS     r5,r5,#0x80           ;1375
00006e  825d              STRH     r5,[r3,#0x12]         ;1375
000070  829a              STRH     r2,[r3,#0x14]         ;1376
000072  82da              STRH     r2,[r3,#0x16]
000074  8318              STRH     r0,[r3,#0x18]         ;1372
000076  8b58              LDRH     r0,[r3,#0x1a]         ;1373
000078  f42040ff          BIC      r0,r0,#0x7f80         ;1374
00007c  f4404000          ORR      r0,r0,#0x8000         ;1375
000080  3080              ADDS     r0,r0,#0x80           ;1375
000082  8358              STRH     r0,[r3,#0x1a]         ;1375
000084  839a              STRH     r2,[r3,#0x1c]         ;1376
;;;1378   	}
;;;1379   
;;;1380   	MSPI->tSPIENA.tBit.spiRxEna0 = PARAMSET_MSPI_ENA_spi_RX_Ena0;
000086  f04f2040          MOV      r0,#0x40004000
00008a  83da              STRH     r2,[r3,#0x1e]         ;1377
00008c  6803              LDR      r3,[r0,#0]
00008e  f4437380          ORR      r3,r3,#0x100
000092  6003              STR      r3,[r0,#0]
;;;1381   	MSPI->tSPIENA.tBit.spiRxEna1 = PARAMSET_MSPI_ENA_spi_RX_Ena1;
000094  6803              LDR      r3,[r0,#0]
000096  f4437300          ORR      r3,r3,#0x200
00009a  6003              STR      r3,[r0,#0]
;;;1382   	MSPI->tSPIENA.tBit.spiRxEna2 = PARAMSET_MSPI_ENA_spi_RX_Ena2;
00009c  6803              LDR      r3,[r0,#0]
00009e  f4436380          ORR      r3,r3,#0x400
0000a2  6003              STR      r3,[r0,#0]
;;;1383   	MSPI->tSPIENA.tBit.spiRxEna3 = PARAMSET_MSPI_ENA_spi_RX_Ena3;
0000a4  6803              LDR      r3,[r0,#0]
0000a6  f4436300          ORR      r3,r3,#0x800
0000aa  6003              STR      r3,[r0,#0]
;;;1384   	MSPI->tSPIENA.tBit.spiRxEna4 = PARAMSET_MSPI_ENA_spi_RX_Ena4;
0000ac  6803              LDR      r3,[r0,#0]
0000ae  f4235380          BIC      r3,r3,#0x1000
0000b2  6003              STR      r3,[r0,#0]
;;;1385   	MSPI->tSPIENA.tBit.spiRxEna5 = PARAMSET_MSPI_ENA_spi_RX_Ena5;
0000b4  6803              LDR      r3,[r0,#0]
0000b6  f4235300          BIC      r3,r3,#0x2000
0000ba  6003              STR      r3,[r0,#0]
;;;1386   	MSPI->tSPIENA.tBit.spiRxEna6 = PARAMSET_MSPI_ENA_spi_RX_Ena6;
0000bc  6803              LDR      r3,[r0,#0]
0000be  f4234380          BIC      r3,r3,#0x4000
0000c2  6003              STR      r3,[r0,#0]
;;;1387   	MSPI->tSPIENA.tBit.spiRxEna7 = PARAMSET_MSPI_ENA_spi_RX_Ena7;
0000c4  6803              LDR      r3,[r0,#0]
0000c6  f4234300          BIC      r3,r3,#0x8000
0000ca  6003              STR      r3,[r0,#0]
;;;1388   
;;;1389   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
0000cc  6a03              LDR      r3,[r0,#0x20]
0000ce  f02303ff          BIC      r3,r3,#0xff
0000d2  1cdb              ADDS     r3,r3,#3
0000d4  6203              STR      r3,[r0,#0x20]
;;;1390   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000d6  6a03              LDR      r3,[r0,#0x20]
0000d8  f423437f          BIC      r3,r3,#0xff00
0000dc  f5037340          ADD      r3,r3,#0x300
0000e0  6203              STR      r3,[r0,#0x20]
;;;1391   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000e2  6a03              LDR      r3,[r0,#0x20]
0000e4  f423037f          BIC      r3,r3,#0xff0000
0000e8  f5033340          ADD      r3,r3,#0x30000
0000ec  6203              STR      r3,[r0,#0x20]
;;;1392   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
0000ee  6a03              LDR      r3,[r0,#0x20]
0000f0  f023437f          BIC      r3,r3,#0xff000000
0000f4  f1037340          ADD      r3,r3,#0x3000000
0000f8  6203              STR      r3,[r0,#0x20]
;;;1393   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
0000fa  6a43              LDR      r3,[r0,#0x24]
0000fc  f02303ff          BIC      r3,r3,#0xff
000100  1cdb              ADDS     r3,r3,#3
000102  6243              STR      r3,[r0,#0x24]
;;;1394   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
000104  6a43              LDR      r3,[r0,#0x24]
000106  f423437f          BIC      r3,r3,#0xff00
00010a  f5037340          ADD      r3,r3,#0x300
00010e  6243              STR      r3,[r0,#0x24]
;;;1395   	MSPI->tSPITRSIZE1.tBit.spitrsize6 = 0x3;
000110  6a43              LDR      r3,[r0,#0x24]
000112  f423037f          BIC      r3,r3,#0xff0000
000116  f5033340          ADD      r3,r3,#0x30000
00011a  6243              STR      r3,[r0,#0x24]
;;;1396   	MSPI->tSPITRSIZE1.tBit.spitrsize7 = 0x3;
00011c  6a43              LDR      r3,[r0,#0x24]
00011e  f023437f          BIC      r3,r3,#0xff000000
000122  f1037340          ADD      r3,r3,#0x3000000
000126  6243              STR      r3,[r0,#0x24]
;;;1397   
;;;1398   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x1;
000128  6883              LDR      r3,[r0,#8]
00012a  f423437f          BIC      r3,r3,#0xff00
00012e  f5037380          ADD      r3,r3,#0x100
000132  6083              STR      r3,[r0,#8]
;;;1399   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x1;
000134  6883              LDR      r3,[r0,#8]
000136  f02303ff          BIC      r3,r3,#0xff
00013a  1c5b              ADDS     r3,r3,#1
00013c  6083              STR      r3,[r0,#8]
;;;1400   
;;;1401   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
00013e  6c83              LDR      r3,[r0,#0x48]
000140  f362030c          BFI      r3,r2,#0,#13
000144  6483              STR      r3,[r0,#0x48]
;;;1402   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
000146  2308              MOVS     r3,#8
000148  6c85              LDR      r5,[r0,#0x48]
00014a  2602              MOVS     r6,#2
00014c  f366451c          BFI      r5,r6,#16,#13
000150  6485              STR      r5,[r0,#0x48]
;;;1403   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
000152  6cc5              LDR      r5,[r0,#0x4c]
000154  2604              MOVS     r6,#4
000156  f366050c          BFI      r5,r6,#0,#13
00015a  64c5              STR      r5,[r0,#0x4c]
;;;1404   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
00015c  6cc5              LDR      r5,[r0,#0x4c]
00015e  2606              MOVS     r6,#6
000160  f366451c          BFI      r5,r6,#16,#13
000164  64c5              STR      r5,[r0,#0x4c]
;;;1405   
;;;1406   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
000166  6d85              LDR      r5,[r0,#0x58]
000168  f363050c          BFI      r5,r3,#0,#13
00016c  6585              STR      r5,[r0,#0x58]
;;;1407   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
00016e  6d83              LDR      r3,[r0,#0x58]
000170  250a              MOVS     r5,#0xa
000172  f365431c          BFI      r3,r5,#16,#13
000176  6583              STR      r3,[r0,#0x58]
;;;1408   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
000178  6dc3              LDR      r3,[r0,#0x5c]
00017a  250c              MOVS     r5,#0xc
00017c  f365030c          BFI      r3,r5,#0,#13
000180  65c3              STR      r3,[r0,#0x5c]
;;;1409   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
000182  6dc3              LDR      r3,[r0,#0x5c]
000184  250e              MOVS     r5,#0xe
000186  f365431c          BFI      r3,r5,#16,#13
00018a  65c3              STR      r3,[r0,#0x5c]
;;;1410   
;;;1411   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
00018c  6142              STR      r2,[r0,#0x14]
;;;1412   
;;;1413   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
00018e  220f              MOVS     r2,#0xf
000190  6442              STR      r2,[r0,#0x44]
                  |L8.402|
000192  6c42              LDR      r2,[r0,#0x44]
000194  2a00              CMP      r2,#0
000196  d1fc              BNE      |L8.402|
;;;1414   
;;;1415   	MSPI_IntCLR();
;;;1416   
;;;1417   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1418   	{
;;;1419   //		*ReadBuf++ = pMSPI_READ_BUFF[iMspi].Data;
;;;1420   		*ReadBuf++ = (uint32_t)(((pMSPI_READ_BUFF[iMspi].Data >> 16) & 0xFFFF) | ((pMSPI_READ_BUFF[iMspi].Data << 16) & 0xFFFF0000));
000198  6820              LDR      r0,[r4,#0]
00019a  ea4f4030          ROR      r0,r0,#16
00019e  6008              STR      r0,[r1,#0]
0001a0  68a0              LDR      r0,[r4,#8]
0001a2  ea4f4030          ROR      r0,r0,#16
0001a6  6048              STR      r0,[r1,#4]
0001a8  6920              LDR      r0,[r4,#0x10]
0001aa  ea4f4030          ROR      r0,r0,#16
0001ae  6088              STR      r0,[r1,#8]
0001b0  69a0              LDR      r0,[r4,#0x18]
0001b2  ea4f4030          ROR      r0,r0,#16
;;;1421   	}
;;;1422   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 1;
0001b6  60c8              STR      r0,[r1,#0xc]
0001b8  f8dc008c          LDR      r0,[r12,#0x8c]
0001bc  f4407000          ORR      r0,r0,#0x200
0001c0  f8cc008c          STR      r0,[r12,#0x8c]
;;;1423   }
0001c4  bc70              POP      {r4-r6}
0001c6  4770              BX       lr
;;;1424   
                          ENDP

                  |L8.456|
                          DCD      0x40002000
                  |L8.460|
                          DCD      0x20040000
                  |L8.464|
                          DCD      0x20040020

                          AREA ||i.MSPI_RegisterShareModeMultiWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterShareModeMultiWrite PROC
;;;1537   
;;;1538   void MSPI_RegisterShareModeMultiWrite(uint32_t Addr, uint32_t * value)
000000  b570              PUSH     {r4-r6,lr}
;;;1539   {
000002  b084              SUB      sp,sp,#0x10
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;1540   	uint32_t ulMspi, ulMode;
;;;1541   	uint32_t vValue[MSPI_NUM];
;;;1542   	uint32_t ulAddr;
;;;1543   
;;;1544   	for(ulMode = 0; ulMode < 2; ulMode++)
000008  f05f0400          MOVS.W   r4,#0
                  |L9.12|
;;;1545   	{
;;;1546   		ulAddr = Addr | (MSPI_SHAREMODE * ulMode);
00000c  ea463004          ORR      r0,r6,r4,LSL #12
;;;1547   		for(ulMspi = 0; ulMspi < MSPI_NUM; ulMspi++)
;;;1548   		{
;;;1549   			vValue[ulMspi] = value[ulMspi*2+ulMode];
000010  f8551024          LDR      r1,[r5,r4,LSL #2]
000014  9100              STR      r1,[sp,#0]
000016  eb050184          ADD      r1,r5,r4,LSL #2
00001a  688a              LDR      r2,[r1,#8]
00001c  9201              STR      r2,[sp,#4]
00001e  690a              LDR      r2,[r1,#0x10]
000020  9202              STR      r2,[sp,#8]
000022  6989              LDR      r1,[r1,#0x18]
;;;1550   		}
;;;1551   		MSPI_RegisterMultiWrite(ulAddr, &vValue[0]);
000024  9103              STR      r1,[sp,#0xc]
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       MSPI_RegisterMultiWrite
00002c  1c64              ADDS     r4,r4,#1
00002e  2c02              CMP      r4,#2
000030  d3ec              BCC      |L9.12|
;;;1552   	}
;;;1553   }
000032  b004              ADD      sp,sp,#0x10
000034  bd70              POP      {r4-r6,pc}
;;;1554   
                          ENDP


                          AREA ||i.MSPI_RegisterShareModeSingleWrite||, CODE, READONLY, ALIGN=1

                  MSPI_RegisterShareModeSingleWrite PROC
;;;1554   
;;;1555   void MSPI_RegisterShareModeSingleWrite(uint32_t Addr, uint32_t value, uint8_t ch)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1556   {
000004  b084              SUB      sp,sp,#0x10
000006  4690              MOV      r8,r2
000008  460c              MOV      r4,r1
00000a  4606              MOV      r6,r0
;;;1557   	uint32_t ulMspi, ulMode;
;;;1558   	uint32_t vValue[MSPI_NUM];
;;;1559   	uint32_t ulAddr;
;;;1560   
;;;1561   	for(ulMode = 0; ulMode < 2; ulMode++)
00000c  2500              MOVS     r5,#0
00000e  466f              MOV      r7,sp                 ;1558
                  |L10.16|
;;;1562   	{
;;;1563   		ulAddr = Addr | (MSPI_SHAREMODE * ulMode);
;;;1564   		for(ulMspi = 0; ulMspi < MSPI_NUM; ulMspi++)
000010  1f3b              SUBS     r3,r7,#4
000012  ea463005          ORR      r0,r6,r5,LSL #12      ;1563
000016  2102              MOVS     r1,#2
                  |L10.24|
;;;1565   		{
;;;1566   			vValue[ulMspi] = value;
000018  605c              STR      r4,[r3,#4]
00001a  f8434f08          STR      r4,[r3,#8]!
00001e  1e49              SUBS     r1,r1,#1
000020  d1fa              BNE      |L10.24|
;;;1567   		}
;;;1568   		MSPI_RegisterSingleWrite(ulAddr, &vValue[0], ch);
000022  4642              MOV      r2,r8
000024  4669              MOV      r1,sp
000026  f7fffffe          BL       MSPI_RegisterSingleWrite
00002a  1c6d              ADDS     r5,r5,#1
00002c  2d02              CMP      r5,#2
00002e  d3ef              BCC      |L10.16|
;;;1569   	}
;;;1570   }
000030  b004              ADD      sp,sp,#0x10
000032  e8bd81f0          POP      {r4-r8,pc}
;;;1571   
                          ENDP


                          AREA ||i.MSPI_RegisterSingleWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterSingleWrite PROC
;;;1480   
;;;1481   void MSPI_RegisterSingleWrite(uint32_t Addr, uint32_t * value, uint8_t ch)
000000  f8dfc174          LDR      r12,|L11.376|
;;;1482   {
000004  b430              PUSH     {r4,r5}
;;;1483   	uint8_t iMspi;
;;;1484   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;1485   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;1486   
;;;1487   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 0;
000006  f8dc308c          LDR      r3,[r12,#0x8c]
00000a  f4237300          BIC      r3,r3,#0x200
00000e  f8cc308c          STR      r3,[r12,#0x8c]
;;;1488   
;;;1489   	pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
000012  4b5a              LDR      r3,|L11.380|
;;;1490   	pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
;;;1491   
;;;1492   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1493   	{
;;;1494   		pMSPI_SEND_BUFF[iMspi].Addr = Addr;
000014  8018              STRH     r0,[r3,#0]
;;;1495   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000016  885c              LDRH     r4,[r3,#2]
;;;1496   		pMSPI_SEND_BUFF[iMspi].tBit.CKS = 0;
;;;1497   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 2;
000018  f42444ff          BIC      r4,r4,#0x7f80
00001c  f4244400          BIC      r4,r4,#0x8000
000020  f5047480          ADD      r4,r4,#0x100
000024  805c              STRH     r4,[r3,#2]
;;;1498   		pMSPI_SEND_BUFF[iMspi].Data_M = value[iMspi] >> 16;
000026  680c              LDR      r4,[r1,#0]
000028  0c24              LSRS     r4,r4,#16
00002a  809c              STRH     r4,[r3,#4]
;;;1499   		pMSPI_SEND_BUFF[iMspi].Data_L = value[iMspi] & 0xFFFF;
00002c  880c              LDRH     r4,[r1,#0]
00002e  80dc              STRH     r4,[r3,#6]
000030  8118              STRH     r0,[r3,#8]            ;1494
000032  895c              LDRH     r4,[r3,#0xa]          ;1495
000034  f42444ff          BIC      r4,r4,#0x7f80         ;1497
000038  f4244400          BIC      r4,r4,#0x8000         ;1497
00003c  f5047480          ADD      r4,r4,#0x100          ;1497
000040  815c              STRH     r4,[r3,#0xa]          ;1497
000042  684c              LDR      r4,[r1,#4]            ;1498
000044  0c24              LSRS     r4,r4,#16             ;1498
000046  819c              STRH     r4,[r3,#0xc]          ;1498
000048  888c              LDRH     r4,[r1,#4]
00004a  81dc              STRH     r4,[r3,#0xe]
00004c  8218              STRH     r0,[r3,#0x10]         ;1494
00004e  8a5c              LDRH     r4,[r3,#0x12]         ;1495
000050  f42444ff          BIC      r4,r4,#0x7f80         ;1497
000054  f4244400          BIC      r4,r4,#0x8000         ;1497
000058  f5047480          ADD      r4,r4,#0x100          ;1497
00005c  825c              STRH     r4,[r3,#0x12]         ;1497
00005e  688c              LDR      r4,[r1,#8]            ;1498
000060  0c24              LSRS     r4,r4,#16             ;1498
000062  829c              STRH     r4,[r3,#0x14]         ;1498
000064  890c              LDRH     r4,[r1,#8]
000066  82dc              STRH     r4,[r3,#0x16]
000068  8318              STRH     r0,[r3,#0x18]         ;1494
00006a  8b58              LDRH     r0,[r3,#0x1a]         ;1495
00006c  f42040ff          BIC      r0,r0,#0x7f80         ;1497
000070  f4204000          BIC      r0,r0,#0x8000         ;1497
000074  f5007080          ADD      r0,r0,#0x100          ;1497
000078  8358              STRH     r0,[r3,#0x1a]         ;1497
00007a  68c8              LDR      r0,[r1,#0xc]          ;1498
00007c  0c00              LSRS     r0,r0,#16             ;1498
00007e  8398              STRH     r0,[r3,#0x1c]         ;1498
000080  8988              LDRH     r0,[r1,#0xc]
000082  83d8              STRH     r0,[r3,#0x1e]
;;;1500   	}
;;;1501   
;;;1502   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
000084  f04f2040          MOV      r0,#0x40004000
000088  6801              LDR      r1,[r0,#0]
00008a  f4217180          BIC      r1,r1,#0x100
00008e  6001              STR      r1,[r0,#0]
;;;1503   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
000090  6801              LDR      r1,[r0,#0]
000092  f4217100          BIC      r1,r1,#0x200
000096  6001              STR      r1,[r0,#0]
;;;1504   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
000098  6801              LDR      r1,[r0,#0]
00009a  f4216180          BIC      r1,r1,#0x400
00009e  6001              STR      r1,[r0,#0]
;;;1505   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
0000a0  6801              LDR      r1,[r0,#0]
0000a2  f4216100          BIC      r1,r1,#0x800
0000a6  6001              STR      r1,[r0,#0]
;;;1506   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
0000a8  6801              LDR      r1,[r0,#0]
0000aa  f4215180          BIC      r1,r1,#0x1000
0000ae  6001              STR      r1,[r0,#0]
;;;1507   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
0000b0  6801              LDR      r1,[r0,#0]
0000b2  f4215100          BIC      r1,r1,#0x2000
0000b6  6001              STR      r1,[r0,#0]
;;;1508   
;;;1509   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
0000b8  6a01              LDR      r1,[r0,#0x20]
0000ba  f02101ff          BIC      r1,r1,#0xff
0000be  1cc9              ADDS     r1,r1,#3
0000c0  6201              STR      r1,[r0,#0x20]
;;;1510   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000c2  6a01              LDR      r1,[r0,#0x20]
0000c4  f421417f          BIC      r1,r1,#0xff00
0000c8  f5017140          ADD      r1,r1,#0x300
0000cc  6201              STR      r1,[r0,#0x20]
;;;1511   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000ce  6a01              LDR      r1,[r0,#0x20]
0000d0  f421017f          BIC      r1,r1,#0xff0000
0000d4  f5013140          ADD      r1,r1,#0x30000
0000d8  6201              STR      r1,[r0,#0x20]
;;;1512   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
0000da  6a01              LDR      r1,[r0,#0x20]
0000dc  f021417f          BIC      r1,r1,#0xff000000
0000e0  f1017140          ADD      r1,r1,#0x3000000
0000e4  6201              STR      r1,[r0,#0x20]
;;;1513   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
0000e6  6a41              LDR      r1,[r0,#0x24]
0000e8  f02101ff          BIC      r1,r1,#0xff
0000ec  1cc9              ADDS     r1,r1,#3
0000ee  6241              STR      r1,[r0,#0x24]
;;;1514   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
0000f0  6a41              LDR      r1,[r0,#0x24]
0000f2  f421417f          BIC      r1,r1,#0xff00
0000f6  f5017140          ADD      r1,r1,#0x300
0000fa  6241              STR      r1,[r0,#0x24]
;;;1515   
;;;1516   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
0000fc  6881              LDR      r1,[r0,#8]
0000fe  f421417f          BIC      r1,r1,#0xff00
000102  6081              STR      r1,[r0,#8]
;;;1517   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
000104  6881              LDR      r1,[r0,#8]
000106  f02101ff          BIC      r1,r1,#0xff
00010a  1cc9              ADDS     r1,r1,#3
00010c  6081              STR      r1,[r0,#8]
;;;1518   
;;;1519   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
00010e  6c83              LDR      r3,[r0,#0x48]
;;;1520   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;1521   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;1522   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;1523   
;;;1524   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;1525   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;1526   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;1527   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;1528   
;;;1529   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;1530   
;;;1531   	MSPI->tSPISTART.ulBulk = ch;
;;;1532   
;;;1533   	MSPI_IntCLR();
;;;1534   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 1;
;;;1535   }
000110  2100              MOVS     r1,#0
000112  f361030c          BFI      r3,r1,#0,#13          ;1519
000116  6483              STR      r3,[r0,#0x48]         ;1519
000118  2308              MOVS     r3,#8
00011a  6c84              LDR      r4,[r0,#0x48]         ;1520
00011c  2502              MOVS     r5,#2                 ;1520
00011e  f365441c          BFI      r4,r5,#16,#13         ;1520
000122  6484              STR      r4,[r0,#0x48]         ;1520
000124  6cc4              LDR      r4,[r0,#0x4c]         ;1521
000126  2504              MOVS     r5,#4                 ;1521
000128  f365040c          BFI      r4,r5,#0,#13          ;1521
00012c  64c4              STR      r4,[r0,#0x4c]         ;1521
00012e  6cc4              LDR      r4,[r0,#0x4c]         ;1522
000130  2506              MOVS     r5,#6                 ;1522
000132  f365441c          BFI      r4,r5,#16,#13         ;1522
000136  64c4              STR      r4,[r0,#0x4c]         ;1522
000138  6d84              LDR      r4,[r0,#0x58]         ;1524
00013a  f363040c          BFI      r4,r3,#0,#13          ;1524
00013e  6584              STR      r4,[r0,#0x58]         ;1524
000140  6d83              LDR      r3,[r0,#0x58]         ;1525
000142  240a              MOVS     r4,#0xa               ;1525
000144  f364431c          BFI      r3,r4,#16,#13         ;1525
000148  6583              STR      r3,[r0,#0x58]         ;1525
00014a  6dc3              LDR      r3,[r0,#0x5c]         ;1526
00014c  240c              MOVS     r4,#0xc               ;1526
00014e  f364030c          BFI      r3,r4,#0,#13          ;1526
000152  65c3              STR      r3,[r0,#0x5c]         ;1526
000154  6dc3              LDR      r3,[r0,#0x5c]         ;1527
000156  240e              MOVS     r4,#0xe               ;1527
000158  f364431c          BFI      r3,r4,#16,#13         ;1527
00015c  65c3              STR      r3,[r0,#0x5c]         ;1527
00015e  6141              STR      r1,[r0,#0x14]         ;1529
000160  6442              STR      r2,[r0,#0x44]         ;1531
                  |L11.354|
000162  6c41              LDR      r1,[r0,#0x44]         ;1531
000164  2900              CMP      r1,#0                 ;1531
000166  d1fc              BNE      |L11.354|
000168  f8dc008c          LDR      r0,[r12,#0x8c]        ;1534
00016c  f4407000          ORR      r0,r0,#0x200          ;1534
000170  f8cc008c          STR      r0,[r12,#0x8c]        ;1534
000174  bc30              POP      {r4,r5}
000176  4770              BX       lr
;;;1536   
                          ENDP

                  |L11.376|
                          DCD      0x40002000
                  |L11.380|
                          DCD      0x20040000

                          AREA ||i.MSPI_RegisterWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterWrite PROC
;;;1276   
;;;1277   void MSPI_RegisterWrite(uint32_t Addr, uint32_t value)
000000  4b5c              LDR      r3,|L12.372|
;;;1278   {
000002  b410              PUSH     {r4}
;;;1279   	uint8_t iMspi;
;;;1280   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;1281   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;1282   
;;;1283   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 0;
000004  f8d3208c          LDR      r2,[r3,#0x8c]
000008  f4227200          BIC      r2,r2,#0x200
00000c  f8c3208c          STR      r2,[r3,#0x8c]
;;;1284   
;;;1285   	pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
000010  4a59              LDR      r2,|L12.376|
;;;1286   	pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
;;;1287   
;;;1288   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1289   	{
;;;1290   		pMSPI_SEND_BUFF[iMspi].Addr = Addr;
000012  8010              STRH     r0,[r2,#0]
;;;1291   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000014  f8b2c002          LDRH     r12,[r2,#2]
;;;1292   		pMSPI_SEND_BUFF[iMspi].tBit.CKS = 0;
;;;1293   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 1;//2;
000018  f42c4cff          BIC      r12,r12,#0x7f80
00001c  f42c4c00          BIC      r12,r12,#0x8000
000020  f10c0c80          ADD      r12,r12,#0x80
000024  f8a2c002          STRH     r12,[r2,#2]
;;;1294   		pMSPI_SEND_BUFF[iMspi].Data_M = value >> 16;
000028  ea4f4c11          LSR      r12,r1,#16
00002c  f8a2c004          STRH     r12,[r2,#4]
;;;1295   		pMSPI_SEND_BUFF[iMspi].Data_L = value & 0xFFFF;
000030  80d1              STRH     r1,[r2,#6]
000032  8110              STRH     r0,[r2,#8]            ;1290
000034  8954              LDRH     r4,[r2,#0xa]          ;1291
000036  f42444ff          BIC      r4,r4,#0x7f80         ;1293
00003a  f4244400          BIC      r4,r4,#0x8000         ;1293
00003e  3480              ADDS     r4,r4,#0x80           ;1293
000040  8154              STRH     r4,[r2,#0xa]          ;1293
000042  f8a2c00c          STRH     r12,[r2,#0xc]         ;1294
000046  81d1              STRH     r1,[r2,#0xe]
000048  8210              STRH     r0,[r2,#0x10]         ;1290
00004a  8a54              LDRH     r4,[r2,#0x12]         ;1291
00004c  f42444ff          BIC      r4,r4,#0x7f80         ;1293
000050  f4244400          BIC      r4,r4,#0x8000         ;1293
000054  3480              ADDS     r4,r4,#0x80           ;1293
000056  8254              STRH     r4,[r2,#0x12]         ;1293
000058  f8a2c014          STRH     r12,[r2,#0x14]        ;1294
00005c  82d1              STRH     r1,[r2,#0x16]
00005e  8310              STRH     r0,[r2,#0x18]         ;1290
000060  8b50              LDRH     r0,[r2,#0x1a]         ;1291
000062  f42040ff          BIC      r0,r0,#0x7f80         ;1293
000066  f4204000          BIC      r0,r0,#0x8000         ;1293
00006a  3080              ADDS     r0,r0,#0x80           ;1293
00006c  8350              STRH     r0,[r2,#0x1a]         ;1293
00006e  f8a2c01c          STRH     r12,[r2,#0x1c]        ;1294
;;;1296   	}
;;;1297   
;;;1298   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
000072  f04f2040          MOV      r0,#0x40004000
000076  83d1              STRH     r1,[r2,#0x1e]         ;1295
000078  6801              LDR      r1,[r0,#0]
00007a  f4217180          BIC      r1,r1,#0x100
00007e  6001              STR      r1,[r0,#0]
;;;1299   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
000080  6801              LDR      r1,[r0,#0]
000082  f4217100          BIC      r1,r1,#0x200
000086  6001              STR      r1,[r0,#0]
;;;1300   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
000088  6801              LDR      r1,[r0,#0]
00008a  f4216180          BIC      r1,r1,#0x400
00008e  6001              STR      r1,[r0,#0]
;;;1301   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
000090  6801              LDR      r1,[r0,#0]
000092  f4216100          BIC      r1,r1,#0x800
000096  6001              STR      r1,[r0,#0]
;;;1302   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
000098  6801              LDR      r1,[r0,#0]
00009a  f4215180          BIC      r1,r1,#0x1000
00009e  6001              STR      r1,[r0,#0]
;;;1303   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
0000a0  6801              LDR      r1,[r0,#0]
0000a2  f4215100          BIC      r1,r1,#0x2000
0000a6  6001              STR      r1,[r0,#0]
;;;1304   
;;;1305   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
0000a8  6a01              LDR      r1,[r0,#0x20]
0000aa  f02101ff          BIC      r1,r1,#0xff
0000ae  1cc9              ADDS     r1,r1,#3
0000b0  6201              STR      r1,[r0,#0x20]
;;;1306   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000b2  6a01              LDR      r1,[r0,#0x20]
0000b4  f421417f          BIC      r1,r1,#0xff00
0000b8  f5017140          ADD      r1,r1,#0x300
0000bc  6201              STR      r1,[r0,#0x20]
;;;1307   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000be  6a01              LDR      r1,[r0,#0x20]
0000c0  f421017f          BIC      r1,r1,#0xff0000
0000c4  f5013140          ADD      r1,r1,#0x30000
0000c8  6201              STR      r1,[r0,#0x20]
;;;1308   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
0000ca  6a01              LDR      r1,[r0,#0x20]
0000cc  f021417f          BIC      r1,r1,#0xff000000
0000d0  f1017140          ADD      r1,r1,#0x3000000
0000d4  6201              STR      r1,[r0,#0x20]
;;;1309   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
0000d6  6a41              LDR      r1,[r0,#0x24]
0000d8  f02101ff          BIC      r1,r1,#0xff
0000dc  1cc9              ADDS     r1,r1,#3
0000de  6241              STR      r1,[r0,#0x24]
;;;1310   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
0000e0  6a41              LDR      r1,[r0,#0x24]
0000e2  f421417f          BIC      r1,r1,#0xff00
0000e6  f5017140          ADD      r1,r1,#0x300
0000ea  6241              STR      r1,[r0,#0x24]
;;;1311   
;;;1312   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
0000ec  6881              LDR      r1,[r0,#8]
0000ee  f421417f          BIC      r1,r1,#0xff00
0000f2  6081              STR      r1,[r0,#8]
;;;1313   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
0000f4  6881              LDR      r1,[r0,#8]
0000f6  f02101ff          BIC      r1,r1,#0xff
0000fa  1cc9              ADDS     r1,r1,#3
0000fc  6081              STR      r1,[r0,#8]
;;;1314   
;;;1315   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
0000fe  6c82              LDR      r2,[r0,#0x48]
;;;1316   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;1317   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;1318   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;1319   
;;;1320   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;1321   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;1322   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;1323   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;1324   
;;;1325   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;1326   
;;;1327   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;1328   
;;;1329   	MSPI_IntCLR();
;;;1330   	PWMDRV->ECLK_CR.tBit.eclk_force_on = 1;
;;;1331   }
000100  2100              MOVS     r1,#0
000102  f361020c          BFI      r2,r1,#0,#13          ;1315
000106  6482              STR      r2,[r0,#0x48]         ;1315
000108  6c82              LDR      r2,[r0,#0x48]         ;1316
00010a  f04f0c08          MOV      r12,#8
00010e  2402              MOVS     r4,#2                 ;1316
000110  f364421c          BFI      r2,r4,#16,#13         ;1316
000114  6482              STR      r2,[r0,#0x48]         ;1316
000116  6cc2              LDR      r2,[r0,#0x4c]         ;1317
000118  2404              MOVS     r4,#4                 ;1317
00011a  f364020c          BFI      r2,r4,#0,#13          ;1317
00011e  64c2              STR      r2,[r0,#0x4c]         ;1317
000120  6cc2              LDR      r2,[r0,#0x4c]         ;1318
000122  2406              MOVS     r4,#6                 ;1318
000124  f364421c          BFI      r2,r4,#16,#13         ;1318
000128  64c2              STR      r2,[r0,#0x4c]         ;1318
00012a  6d82              LDR      r2,[r0,#0x58]         ;1320
00012c  f36c020c          BFI      r2,r12,#0,#13         ;1320
000130  6582              STR      r2,[r0,#0x58]         ;1320
000132  6d82              LDR      r2,[r0,#0x58]         ;1321
000134  f04f0c0a          MOV      r12,#0xa              ;1321
000138  f36c421c          BFI      r2,r12,#16,#13        ;1321
00013c  6582              STR      r2,[r0,#0x58]         ;1321
00013e  6dc2              LDR      r2,[r0,#0x5c]         ;1322
000140  f04f0c0c          MOV      r12,#0xc              ;1322
000144  f36c020c          BFI      r2,r12,#0,#13         ;1322
000148  65c2              STR      r2,[r0,#0x5c]         ;1322
00014a  6dc2              LDR      r2,[r0,#0x5c]         ;1323
00014c  f04f0c0e          MOV      r12,#0xe              ;1323
000150  f36c421c          BFI      r2,r12,#16,#13        ;1323
000154  65c2              STR      r2,[r0,#0x5c]         ;1323
000156  6141              STR      r1,[r0,#0x14]         ;1325
000158  210f              MOVS     r1,#0xf               ;1327
00015a  6441              STR      r1,[r0,#0x44]         ;1327
                  |L12.348|
00015c  6c41              LDR      r1,[r0,#0x44]         ;1327
00015e  2900              CMP      r1,#0                 ;1327
000160  d1fc              BNE      |L12.348|
000162  f8d3008c          LDR      r0,[r3,#0x8c]         ;1330
000166  f4407000          ORR      r0,r0,#0x200          ;1330
00016a  f8c3008c          STR      r0,[r3,#0x8c]         ;1330
00016e  bc10              POP      {r4}
000170  4770              BX       lr
;;;1332   
                          ENDP

000172  0000              DCW      0x0000
                  |L12.372|
                          DCD      0x40002000
                  |L12.376|
                          DCD      0x20040000

                          AREA ||i.MSPI_Set_AITMODE||, CODE, READONLY, ALIGN=2

                  MSPI_Set_AITMODE PROC
;;;1176   
;;;1177   void MSPI_Set_AITMODE(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;1178   {
;;;1179   	uint8_t iMspi;
;;;1180   
;;;1181   #if USED_SSCG_ON_OFF_CONTORL_AITnTLP_MODE
;;;1182   	SCRB->SSCG_IN_CFG.tBit.sscgclk_sel = 1;	// SSCGCLK select. 0: no sscg, 1:sscg out
;;;1183   #endif
;;;1184   
;;;1185   #if USED_MSPEN_MSPI_24BIT_TRANSMODE
;;;1186   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_WORD;
;;;1187   #else /* USED_MSPEN_MSPI_24BIT_TRANSMODE */
;;;1188   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_HALF_WORD;
000002  f04f2440          MOV      r4,#0x40004000
000006  6861              LDR      r1,[r4,#4]
000008  f0210101          BIC      r1,r1,#1
00000c  6061              STR      r1,[r4,#4]
;;;1189   #endif /* USED_MSPEN_MSPI_24BIT_TRANSMODE */
;;;1190   
;;;1191       MSPI->tSPISCR.tBit.DUALACC 				= SPI_RX_SINGLE_MODE;//SPI_RX_SINGLE_MODE;//SPI_RX_DUAL_MODE;//SPI_RX_SINGLE_MODE;
00000e  6861              LDR      r1,[r4,#4]
000010  f0210102          BIC      r1,r1,#2
000014  6061              STR      r1,[r4,#4]
;;;1192       MSPI->tSPISCR.tBit.DUALBITORD 			= SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;//SPI_RX_DUAL_BIT_ORDER_MISO_MOSI;//SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;
000016  6861              LDR      r1,[r4,#4]
000018  f0210104          BIC      r1,r1,#4
00001c  6061              STR      r1,[r4,#4]
;;;1193       MSPI->tSPISCR.tBit.TXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
00001e  6861              LDR      r1,[r4,#4]
000020  f0210108          BIC      r1,r1,#8
000024  6061              STR      r1,[r4,#4]
;;;1194       MSPI->tSPISCR.tBit.RXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
000026  6861              LDR      r1,[r4,#4]
000028  f0210110          BIC      r1,r1,#0x10
00002c  6061              STR      r1,[r4,#4]
;;;1195       MSPI->tSPISCR.tBit.TXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
00002e  6861              LDR      r1,[r4,#4]
000030  f0210120          BIC      r1,r1,#0x20
000034  6061              STR      r1,[r4,#4]
;;;1196       MSPI->tSPISCR.tBit.RXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
000036  6861              LDR      r1,[r4,#4]
000038  f0210140          BIC      r1,r1,#0x40
00003c  6061              STR      r1,[r4,#4]
;;;1197   #if USED_S3_MSPI_4MHz_OPERATION
;;;1198       if(IS_S3_MODE(eSensingMode))
00003e  f4106f00          TST      r0,#0x800
;;;1199       {
;;;1200           MSPI->tSPISCR.tBit.SCLKDIV 			= SPI_SCLK_SPEED_12_DIV; // 48M/12Div = 4MHz
;;;1201           MSPI->tSPISCR.tBit.RXPOS 			= 0x2;
;;;1202       }
;;;1203       else
;;;1204       {
;;;1205           MSPI->tSPISCR.tBit.SCLKDIV 			= SPI_SCLK_SPEED_6_DIV; // 48M/6Div = 8MHz
000042  6860              LDR      r0,[r4,#4]
000044  f42040f0          BIC      r0,r0,#0x7800
000048  d009              BEQ      |L13.94|
00004a  f50040b0          ADD      r0,r0,#0x5800         ;1178
00004e  6060              STR      r0,[r4,#4]            ;1200
000050  6860              LDR      r0,[r4,#4]            ;1201
000052  f42060f0          BIC      r0,r0,#0x780          ;1201
000056  f5007080          ADD      r0,r0,#0x100          ;1201
00005a  6060              STR      r0,[r4,#4]            ;1201
00005c  e008              B        |L13.112|
                  |L13.94|
00005e  f5005020          ADD      r0,r0,#0x2800         ;1201
000062  6060              STR      r0,[r4,#4]
;;;1206           MSPI->tSPISCR.tBit.RXPOS 			= 0x2;
000064  6860              LDR      r0,[r4,#4]
000066  f42060f0          BIC      r0,r0,#0x780
00006a  f5007080          ADD      r0,r0,#0x100
00006e  6060              STR      r0,[r4,#4]
                  |L13.112|
;;;1207       }
;;;1208   #else
;;;1209       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_6_DIV;
;;;1210       MSPI->tSPISCR.tBit.RXPOS 				= 0x0;
;;;1211   #endif
;;;1212       MSPI->tSPISCR.tBit.MISO_ZERO_CHK_EN 	= DISABLE;
000070  6860              LDR      r0,[r4,#4]
000072  f4204000          BIC      r0,r0,#0x8000
000076  6060              STR      r0,[r4,#4]
;;;1213   
;;;1214       MSPI->MSPI_WFE_ENA						= BIT(0) | BIT(1) | BIT(2) | BIT(3); // Miso Interrupt SPI Number Setting
000078  200f              MOVS     r0,#0xf
00007a  63e0              STR      r0,[r4,#0x3c]
;;;1215   
;;;1216   	MSPI->tSPISTATELEN.tBit.PreShftLen		= 15;//16;
00007c  6b20              LDR      r0,[r4,#0x30]
00007e  f02000ff          BIC      r0,r0,#0xff
000082  300f              ADDS     r0,r0,#0xf
000084  6320              STR      r0,[r4,#0x30]
;;;1217   	MSPI->tSPISTATELEN.tBit.TmpIdleLen		= 1;//0;//1;
000086  6b20              LDR      r0,[r4,#0x30]
000088  f420407f          BIC      r0,r0,#0xff00
00008c  f5007080          ADD      r0,r0,#0x100
000090  6320              STR      r0,[r4,#0x30]
;;;1218   	MSPI->tSPISTATELEN.tBit.PostShftLen  	= 9;//10;
000092  6b20              LDR      r0,[r4,#0x30]
000094  f420007f          BIC      r0,r0,#0xff0000
000098  f5002010          ADD      r0,r0,#0x90000
00009c  6320              STR      r0,[r4,#0x30]
;;;1219   	MSPI->tSPISTATELEN.tBit.txbufnum 		= 10;//6;//7;
00009e  6b20              LDR      r0,[r4,#0x30]
0000a0  f02050f8          BIC      r0,r0,#0x1f000000
0000a4  f1006020          ADD      r0,r0,#0xa000000
0000a8  6320              STR      r0,[r4,#0x30]
;;;1220   
;;;1221   	MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
0000aa  2008              MOVS     r0,#8
0000ac  62e0              STR      r0,[r4,#0x2c]
;;;1222   
;;;1223   	MSPI->tSPIENA.tBit.spiRxEna0 = PARAMSET_MSPI_ENA_spi_RX_Ena0;
0000ae  6820              LDR      r0,[r4,#0]
0000b0  f4407080          ORR      r0,r0,#0x100
0000b4  6020              STR      r0,[r4,#0]
;;;1224   	MSPI->tSPIENA.tBit.spiRxEna1 = PARAMSET_MSPI_ENA_spi_RX_Ena1;
0000b6  6820              LDR      r0,[r4,#0]
0000b8  f4407000          ORR      r0,r0,#0x200
0000bc  6020              STR      r0,[r4,#0]
;;;1225   	MSPI->tSPIENA.tBit.spiRxEna2 = PARAMSET_MSPI_ENA_spi_RX_Ena2;
0000be  6820              LDR      r0,[r4,#0]
0000c0  f4406080          ORR      r0,r0,#0x400
0000c4  6020              STR      r0,[r4,#0]
;;;1226   	MSPI->tSPIENA.tBit.spiRxEna3 = PARAMSET_MSPI_ENA_spi_RX_Ena3;
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f4406000          ORR      r0,r0,#0x800
0000cc  6020              STR      r0,[r4,#0]
;;;1227   
;;;1228   	MSPI->tSPIMODE.tBit.aitmode = SPI_MODE_AITMODE;
0000ce  6b60              LDR      r0,[r4,#0x34]
0000d0  f0400001          ORR      r0,r0,#1
0000d4  6360              STR      r0,[r4,#0x34]
;;;1229   
;;;1230   	MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
0000d6  6960              LDR      r0,[r4,#0x14]
0000d8  f0400002          ORR      r0,r0,#2
0000dc  6160              STR      r0,[r4,#0x14]
;;;1231   
;;;1232   	switch(hal_Info_GetControlActivePenSettingType())
0000de  f7fffffe          BL       hal_Info_GetControlActivePenSettingType
0000e2  2800              CMP      r0,#0
0000e4  bf1e              ITTT     NE
0000e6  2801              CMPNE    r0,#1
0000e8  2802              CMPNE    r0,#2
;;;1233   	{
;;;1234   		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;1235   		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;1236   		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;1237   		{
;;;1238   			for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1239   			{
;;;1240   				MSPI_BUF->ReadCommand[iMspi].Addr = MSPI_BROADCAST | MSPI_RAWDATA; //0x2400;//READ_ALIGNED_BUF ;
;;;1241   				MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;1242   				MSPI_BUF->ReadCommand[iMspi].tBit.CKS = 0;
;;;1243   				MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = 13;
;;;1244   
;;;1245   //				for (i = 0; i < (SW97500_ADDR_CMD_NUM + ((SW97500_R0_RAW_CH_NUM + SW97500_R0_DUM_CH_NUM) * SW97500_BROADCAST_NUM))*2 ; i++)
;;;1246   //				{
;;;1247   //					MSPI_BUF->ReadCommand[iMspi].Data[i] = 0;
;;;1248   //				}
;;;1249   			}
;;;1250   
;;;1251   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;1252   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;1253   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = SZ_MSPIBUF_MUXDATA+1;
;;;1254   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;1255   
;;;1256   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1 - 2;
;;;1257   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;
;;;1258   
;;;1259   			MSPI->tSPIDATALEN.tBit.rxbitlen = 15;
;;;1260   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
;;;1261   
;;;1262   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;1263   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 1
;;;1264   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 1
;;;1265   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 1
;;;1266   
;;;1267   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;1268   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 1
;;;1269   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 1
;;;1270   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 1
;;;1271   
;;;1272   			break;
;;;1273   		}
;;;1274   	}
;;;1275   }
0000ea  bd10              POPNE    {r4,pc}
0000ec  f44f5110          MOV      r1,#0x2400            ;1240
0000f0  4859              LDR      r0,|L13.600|
0000f2  f8201f40          STRH     r1,[r0,#0x40]!        ;1240
0000f6  8842              LDRH     r2,[r0,#2]            ;1241
0000f8  f4424200          ORR      r2,r2,#0x8000         ;1241
0000fc  8042              STRH     r2,[r0,#2]            ;1241
0000fe  8842              LDRH     r2,[r0,#2]            ;1242
000100  f4224280          BIC      r2,r2,#0x4000         ;1242
000104  8042              STRH     r2,[r0,#2]            ;1242
000106  8842              LDRH     r2,[r0,#2]            ;1243
000108  f422527e          BIC      r2,r2,#0x3f80         ;1243
00010c  f50262d0          ADD      r2,r2,#0x680          ;1243
000110  8042              STRH     r2,[r0,#2]            ;1243
000112  f8a011cc          STRH     r1,[r0,#0x1cc]        ;1240
000116  f8b021ce          LDRH     r2,[r0,#0x1ce]        ;1241
00011a  f4424200          ORR      r2,r2,#0x8000         ;1241
00011e  f8a021ce          STRH     r2,[r0,#0x1ce]        ;1241
000122  f8b021ce          LDRH     r2,[r0,#0x1ce]        ;1242
000126  f4224280          BIC      r2,r2,#0x4000         ;1242
00012a  f8a021ce          STRH     r2,[r0,#0x1ce]        ;1242
00012e  f8b021ce          LDRH     r2,[r0,#0x1ce]        ;1243
000132  f422527e          BIC      r2,r2,#0x3f80         ;1243
000136  f50262d0          ADD      r2,r2,#0x680          ;1243
00013a  f8a021ce          STRH     r2,[r0,#0x1ce]        ;1243
00013e  f8a01398          STRH     r1,[r0,#0x398]        ;1240
000142  f8b0239a          LDRH     r2,[r0,#0x39a]        ;1241
000146  f4424200          ORR      r2,r2,#0x8000         ;1241
00014a  f8a0239a          STRH     r2,[r0,#0x39a]        ;1241
00014e  f8b0239a          LDRH     r2,[r0,#0x39a]        ;1242
000152  f4224280          BIC      r2,r2,#0x4000         ;1242
000156  f8a0239a          STRH     r2,[r0,#0x39a]        ;1242
00015a  f8b0239a          LDRH     r2,[r0,#0x39a]        ;1243
00015e  f422527e          BIC      r2,r2,#0x3f80         ;1243
000162  f50262d0          ADD      r2,r2,#0x680          ;1243
000166  f8a0239a          STRH     r2,[r0,#0x39a]        ;1243
00016a  483c              LDR      r0,|L13.604|
00016c  8001              STRH     r1,[r0,#0]            ;1240
00016e  f1000002          ADD      r0,r0,#2              ;1241
000172  8801              LDRH     r1,[r0,#0]            ;1241
000174  f4414100          ORR      r1,r1,#0x8000         ;1241
000178  8001              STRH     r1,[r0,#0]            ;1241
00017a  8801              LDRH     r1,[r0,#0]            ;1242
00017c  f4214180          BIC      r1,r1,#0x4000         ;1242
000180  8001              STRH     r1,[r0,#0]            ;1242
000182  8801              LDRH     r1,[r0,#0]            ;1243
000184  f421517e          BIC      r1,r1,#0x3f80         ;1243
000188  f50161d0          ADD      r1,r1,#0x680          ;1243
00018c  8001              STRH     r1,[r0,#0]            ;1243
00018e  6a20              LDR      r0,[r4,#0x20]         ;1251
000190  f02000ff          BIC      r0,r0,#0xff           ;1251
000194  f1000071          ADD      r0,r0,#0x71           ;1251
000198  6220              STR      r0,[r4,#0x20]         ;1251
00019a  6a20              LDR      r0,[r4,#0x20]         ;1252
00019c  f420407f          BIC      r0,r0,#0xff00         ;1252
0001a0  f50040e2          ADD      r0,r0,#0x7100         ;1252
0001a4  6220              STR      r0,[r4,#0x20]         ;1252
0001a6  6a20              LDR      r0,[r4,#0x20]         ;1253
0001a8  f420007f          BIC      r0,r0,#0xff0000       ;1253
0001ac  f50000e2          ADD      r0,r0,#0x710000       ;1253
0001b0  6220              STR      r0,[r4,#0x20]         ;1253
0001b2  6a20              LDR      r0,[r4,#0x20]         ;1254
0001b4  f020407f          BIC      r0,r0,#0xff000000     ;1254
0001b8  f10040e2          ADD      r0,r0,#0x71000000     ;1254
0001bc  6220              STR      r0,[r4,#0x20]         ;1254
0001be  68a0              LDR      r0,[r4,#8]            ;1256
0001c0  f420407f          BIC      r0,r0,#0xff00         ;1256
0001c4  f50040de          ADD      r0,r0,#0x6f00         ;1256
0001c8  60a0              STR      r0,[r4,#8]            ;1256
0001ca  68a0              LDR      r0,[r4,#8]            ;1257
0001cc  f02000ff          BIC      r0,r0,#0xff           ;1257
0001d0  60a0              STR      r0,[r4,#8]            ;1257
0001d2  68a0              LDR      r0,[r4,#8]            ;1259
0001d4  f0207078          BIC      r0,r0,#0x3e00000      ;1259
0001d8  f10070f0          ADD      r0,r0,#0x1e00000      ;1259
0001dc  60a0              STR      r0,[r4,#8]            ;1259
0001de  68a0              LDR      r0,[r4,#8]            ;1260
0001e0  f42010f8          BIC      r0,r0,#0x1f0000       ;1260
0001e4  f5002070          ADD      r0,r0,#0xf0000        ;1260
0001e8  60a0              STR      r0,[r4,#8]            ;1260
0001ea  6ca0              LDR      r0,[r4,#0x48]         ;1262
0001ec  f36f000c          BFC      r0,#0,#13             ;1262
0001f0  f1000010          ADD      r0,r0,#0x10           ;1262
0001f4  64a0              STR      r0,[r4,#0x48]         ;1262
0001f6  6ca0              LDR      r0,[r4,#0x48]         ;1263
0001f8  f36f401c          BFC      r0,#16,#13            ;1263
0001fc  f5000003          ADD      r0,r0,#0x830000       ;1263
000200  64a0              STR      r0,[r4,#0x48]         ;1263
000202  6ce0              LDR      r0,[r4,#0x4c]         ;1264
000204  f36f000c          BFC      r0,#0,#13             ;1264
000208  f10000f6          ADD      r0,r0,#0xf6           ;1264
00020c  64e0              STR      r0,[r4,#0x4c]         ;1264
00020e  6ce0              LDR      r0,[r4,#0x4c]         ;1265
000210  f36f401c          BFC      r0,#16,#13            ;1265
000214  f1007080          ADD      r0,r0,#0x1000000      ;1265
000218  f50000d2          ADD      r0,r0,#0x690000       ;1265
00021c  64e0              STR      r0,[r4,#0x4c]         ;1265
00021e  6da0              LDR      r0,[r4,#0x58]         ;1267
000220  f36f000c          BFC      r0,#0,#13             ;1267
000224  f50070ee          ADD      r0,r0,#0x1dc          ;1267
000228  65a0              STR      r0,[r4,#0x58]         ;1267
00022a  6da0              LDR      r0,[r4,#0x58]         ;1268
00022c  f36f401c          BFC      r0,#16,#13            ;1268
000230  f1006080          ADD      r0,r0,#0x4000000      ;1268
000234  f5002040          ADD      r0,r0,#0xc0000        ;1268
000238  65a0              STR      r0,[r4,#0x58]         ;1268
00023a  6de0              LDR      r0,[r4,#0x5c]         ;1269
00023c  f36f000c          BFC      r0,#0,#13             ;1269
000240  f200603c          ADD      r0,r0,#0x63c          ;1269
000244  65e0              STR      r0,[r4,#0x5c]         ;1269
000246  6de0              LDR      r0,[r4,#0x5c]         ;1270
000248  f36f401c          BFC      r0,#16,#13            ;1270
00024c  f1006000          ADD      r0,r0,#0x8000000      ;1270
000250  f50000d8          ADD      r0,r0,#0x6c0000       ;1270
000254  65e0              STR      r0,[r4,#0x5c]         ;1270
000256  bd10              POP      {r4,pc}
;;;1276   
                          ENDP

                  |L13.600|
                          DCD      0x20040000
                  |L13.604|
                          DCD      0x200405a4

                          AREA ||i.MSPI_Set_BUFSIZE_FingerPenMode||, CODE, READONLY, ALIGN=1

                  MSPI_Set_BUFSIZE_FingerPenMode PROC
;;;721    
;;;722    void MSPI_Set_BUFSIZE_FingerPenMode(int index)
000000  b510              PUSH     {r4,lr}
;;;723    {
;;;724    	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
000002  f7fffffe          BL       HAL_GetSensingMode
;;;725    
;;;726    #if USED_PEN_MODE_OPERATION
;;;727    	switch(hal_Info_GetControlActivePenSettingType())
;;;728    	{
;;;729    		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;730    		{
;;;731    			if(IS_FINGER_PEN_MODE(eSensingMode))
;;;732    			{
;;;733    				MSPI->SPIMUXNUM = sizeLut_MSPen[index]-1;
;;;734    			}
;;;735    			else
;;;736    			{
;;;737    				MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;738    			}
;;;739    			MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_MSPen[index];
;;;740    			break;
;;;741    		}
;;;742    	#if (USED_MODULE_DEF == MODULE_DEF_L_1)
;;;743    		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;744    		{
;;;745    			MSPI->SPIMUXNUM = sizeLut_Wacom[index]-1;
;;;746    			MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_Wacom[index];
;;;747    			break;
;;;748    		}
;;;749    	#endif /* (USED_MODULE_DEF == MODULE_DEF_L_1) */
;;;750    		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;751    		{
;;;752    			if(IS_FINGER_PEN_MODE(eSensingMode))
;;;753    			{
;;;754    	#if  USED_LOCAL_IDLE_MODE_CONTROL
;;;755    		#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;756    				if(IS_ACTIVE_MODE(eSensingMode))
;;;757    				{
;;;758    					MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;759    				}
;;;760    				else
;;;761    				{
;;;762    					uint32_t iMspi;
;;;763    					MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;764    					for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;765    					{
;;;766    						MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
;;;767    						MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1)-1;
;;;768    						MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
;;;769    						MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
;;;770    						MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
;;;771    						MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
;;;772    						MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;773    					}
;;;774    					MSPI->tSPIDATALEN.tBit.rxbitlen = 23;
;;;775    				}
;;;776    		#else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;777    				if(IS_ACTIVE_MODE(eSensingMode))
;;;778    				{
;;;779    					MSPI->SPIMUXNUM = sizeLut_WGP[index]-1;
;;;780    				}
;;;781    				else
;;;782    				{
;;;783    					MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;784    				}
;;;785    		#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;786    	#else /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;787    		#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;788    				MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;789    		#else /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;790    				MSPI->SPIMUXNUM = sizeLut_WGP[index] - 1;
;;;791    		#endif /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;792    	#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;793    				MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
;;;794    			}
;;;795    			else
;;;796    			{
;;;797    				// _gT(_GPIO_TP_INTR);
;;;798    				MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;799    	#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN))
;;;800    				MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;801    				MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;802    				MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;803    				MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;804    				MSPI->tSPITRSIZE1.tBit.spitrsize6 = SZ_MSPIBUF_MUXDATA+1;
;;;805    				MSPI->tSPITRSIZE1.tBit.spitrsize7 = SZ_MSPIBUF_MUXDATA+1;
;;;806    				MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;807    	#endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN)) */
;;;808    				MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_Wacom[index];
;;;809    			}
;;;810    			break;
;;;811    		}
;;;812    	}
;;;813    #else /* USED_PEN_MODE_OPERATION */
;;;814    	#if USED_MNT_S3_MODE_FUNCTION
;;;815    	if(IS_S3_MODE(eSensingMode))
000006  f4106f00          TST      r0,#0x800
;;;816    	{
;;;817    		MSPI->SPIMUXNUM = FINGER_IDLE_NI_MUX_NUM-1;
00000a  f04f0201          MOV      r2,#1
00000e  f04f2140          MOV      r1,#0x40004000
000012  d10d              BNE      |L14.48|
;;;818    	}
;;;819    	else
;;;820    	#endif /* USED_MNT_S3_MODE_FUNCTION */
;;;821    	{
;;;822    		if(IS_ACTIVE_MODE(eSensingMode))
000014  f0100f01          TST      r0,#1
000018  d00a              BEQ      |L14.48|
;;;823    		{
;;;824    			MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
00001a  2008              MOVS     r0,#8
00001c  62c8              STR      r0,[r1,#0x2c]
;;;825    			MSPI->tSINTRMSCR.tBit.intmux_en = DISABLE;
00001e  6948              LDR      r0,[r1,#0x14]
000020  f0200001          BIC      r0,r0,#1
000024  6148              STR      r0,[r1,#0x14]
;;;826    			MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
000026  6948              LDR      r0,[r1,#0x14]
000028  f0400002          ORR      r0,r0,#2
00002c  6148              STR      r0,[r1,#0x14]
00002e  e000              B        |L14.50|
                  |L14.48|
;;;827    		}
;;;828    		else
;;;829    		{
;;;830    			if(FINGER_IDLE_NI_MUX_NUM-1 <= 0)
;;;831    			{
;;;832    				MSPI->tSINTRMSCR.tBit.intmux_en = ENABLE;
;;;833    				MSPI->tSINTRMSCR.tBit.intframe_en = DISABLE;
;;;834    			}
;;;835    			else
;;;836    			{
;;;837    				MSPI->SPIMUXNUM = FINGER_IDLE_NI_MUX_NUM-1;
000030  62ca              STR      r2,[r1,#0x2c]
                  |L14.50|
;;;838    			}
;;;839    		}
;;;840    	}
;;;841    
;;;842    	MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
000032  6f08              LDR      r0,[r1,#0x70]
000034  f02000fe          BIC      r0,r0,#0xfe
000038  6708              STR      r0,[r1,#0x70]
;;;843    #endif /* USED_PEN_MODE_OPERATION */
;;;844    }
00003a  bd10              POP      {r4,pc}
;;;845    
                          ENDP


                          AREA ||i.MSPI_Set_TLPMODE||, CODE, READONLY, ALIGN=1

                  MSPI_Set_TLPMODE PROC
;;;1116   
;;;1117   void MSPI_Set_TLPMODE(void)
000000  f04f2040          MOV      r0,#0x40004000
;;;1118   {
;;;1119   #if USED_SSCG_ON_OFF_CONTORL_AITnTLP_MODE
;;;1120   	SCRB->SSCG_IN_CFG.tBit.sscgclk_sel = 0;	// SSCGCLK select. 0: no sscg, 1:sscg out
;;;1121   #endif
;;;1122   
;;;1123   	MSPI->tSPIMODE.tBit.aitmode 			= SPI_MODE_TLPMODE;
000004  6b41              LDR      r1,[r0,#0x34]
000006  f0210101          BIC      r1,r1,#1
00000a  6341              STR      r1,[r0,#0x34]
;;;1124   
;;;1125   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_HALF_WORD;
00000c  6841              LDR      r1,[r0,#4]
00000e  f0210101          BIC      r1,r1,#1
000012  6041              STR      r1,[r0,#4]
;;;1126       MSPI->tSPISCR.tBit.DUALACC 				= SPI_RX_SINGLE_MODE;
000014  6841              LDR      r1,[r0,#4]
000016  f0210102          BIC      r1,r1,#2
00001a  6041              STR      r1,[r0,#4]
;;;1127       MSPI->tSPISCR.tBit.DUALBITORD 			= SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;
00001c  6841              LDR      r1,[r0,#4]
00001e  f0210104          BIC      r1,r1,#4
000022  6041              STR      r1,[r0,#4]
;;;1128       MSPI->tSPISCR.tBit.TXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
000024  6841              LDR      r1,[r0,#4]
000026  f0210108          BIC      r1,r1,#8
00002a  6041              STR      r1,[r0,#4]
;;;1129       MSPI->tSPISCR.tBit.RXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
00002c  6841              LDR      r1,[r0,#4]
00002e  f0210110          BIC      r1,r1,#0x10
000032  6041              STR      r1,[r0,#4]
;;;1130       MSPI->tSPISCR.tBit.TXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
000034  6841              LDR      r1,[r0,#4]
000036  f0210120          BIC      r1,r1,#0x20
00003a  6041              STR      r1,[r0,#4]
;;;1131       MSPI->tSPISCR.tBit.RXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
00003c  6841              LDR      r1,[r0,#4]
00003e  f0210140          BIC      r1,r1,#0x40
000042  6041              STR      r1,[r0,#4]
;;;1132       MSPI->tSPISCR.tBit.RXPOS 				= 0x2;
000044  6841              LDR      r1,[r0,#4]
000046  f42161f0          BIC      r1,r1,#0x780
00004a  f5017180          ADD      r1,r1,#0x100
00004e  6041              STR      r1,[r0,#4]
;;;1133   #if (USED_ROIC_DEF == ROIC_SW97500)
;;;1134       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_7_DIV;
000050  6841              LDR      r1,[r0,#4]
000052  f42141f0          BIC      r1,r1,#0x7800
000056  f5015140          ADD      r1,r1,#0x3000
00005a  6041              STR      r1,[r0,#4]
;;;1135   #else /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;1136       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_3_DIV;
;;;1137   #endif /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;1138       MSPI->tSPISCR.tBit.MISO_ZERO_CHK_EN 	= DISABLE;
00005c  6841              LDR      r1,[r0,#4]
00005e  f4214100          BIC      r1,r1,#0x8000
000062  6041              STR      r1,[r0,#4]
;;;1139   
;;;1140   	MSPI->tSPIDATALEN.tBit.rxbitlen			= 15;
000064  6881              LDR      r1,[r0,#8]
000066  f0217178          BIC      r1,r1,#0x3e00000
00006a  f10171f0          ADD      r1,r1,#0x1e00000
00006e  6081              STR      r1,[r0,#8]
;;;1141   	MSPI->tSPIDATALEN.tBit.txbitlen			= 15;
000070  6881              LDR      r1,[r0,#8]
000072  f42111f8          BIC      r1,r1,#0x1f0000
000076  f5012170          ADD      r1,r1,#0xf0000
00007a  6081              STR      r1,[r0,#8]
;;;1142   	/*
;;;1143   	 * rxdata_len and txdata_len do not update in here!
;;;1144   	 * That update at read and write.
;;;1145   	 */
;;;1146   //	MSPI->tSPIDATALEN.tBit.rxdata_len		= 0x0;
;;;1147   //	MSPI->tSPIDATALEN.tBit.txdata_len		= 0x2;
;;;1148   
;;;1149   	MSPI->tSPISTATELEN.tBit.PreShftLen		= 16;
00007c  6b01              LDR      r1,[r0,#0x30]
00007e  f02101ff          BIC      r1,r1,#0xff
000082  3110              ADDS     r1,r1,#0x10
000084  6301              STR      r1,[r0,#0x30]
;;;1150   	MSPI->tSPISTATELEN.tBit.TmpIdleLen		= 2;
000086  6b01              LDR      r1,[r0,#0x30]
000088  f421417f          BIC      r1,r1,#0xff00
00008c  f5017100          ADD      r1,r1,#0x200
000090  6301              STR      r1,[r0,#0x30]
;;;1151   	MSPI->tSPISTATELEN.tBit.PostShftLen  	= 15;
000092  6b01              LDR      r1,[r0,#0x30]
000094  f421017f          BIC      r1,r1,#0xff0000
000098  f5012170          ADD      r1,r1,#0xf0000
00009c  6301              STR      r1,[r0,#0x30]
;;;1152   	MSPI->tSPISTATELEN.tBit.txbufnum 		= 7;
00009e  6b01              LDR      r1,[r0,#0x30]
0000a0  f02151f8          BIC      r1,r1,#0x1f000000
0000a4  f10161e0          ADD      r1,r1,#0x7000000
0000a8  6301              STR      r1,[r0,#0x30]
;;;1153   }
0000aa  4770              BX       lr
;;;1154   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  sizeLut_MSPen
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000003
                          DCD      0x00000006
                          DCD      0x00000003
                          DCD      0x00000003

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  sizeLut_WGP
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000008

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  sizeLut_UHD_WGP
                          DCD      0x00000008
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000008

                          AREA ||area_number.21||, DATA, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.data||
                  nextMSPISize
                          DCD      0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.data||
                  gFrameCnt
                          DCD      0x00000000

                          AREA ||area_number.23||, DATA, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.data||
                  ulTestMSPI_1ReadBuff
                          DCD      0x00000000

                          AREA ||area_number.24||, DATA, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.data||
                  ulTestMSPI_2ReadBuff
                          DCD      0x00000000

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  ulTestMSPI_3ReadBuff
                          DCD      0x00000000

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  ulTestMSPI_4ReadBuff
                          DCD      0x00000000

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  ulTestMSPI_1ReadBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.data||
                  ulTestMSPI_2ReadBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.29||, DATA, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.data||
                  ulTestMSPI_3ReadBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.30||, DATA, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.data||
                  ulTestMSPI_4ReadBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.31||, DATA, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.data||
                  ulTestMSPI_1WriteBuff
                          DCD      0x00000000

                          AREA ||area_number.32||, DATA, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.data||
                  ulTestMSPI_2WriteBuff
                          DCD      0x00000000

                          AREA ||area_number.33||, DATA, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.data||
                  ulTestMSPI_3WriteBuff
                          DCD      0x00000000

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  ulTestMSPI_4WriteBuff
                          DCD      0x00000000

                          AREA ||area_number.35||, DATA, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.data||
                  ulTestMSPI_1WriteBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.36||, DATA, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.data||
                  ulTestMSPI_2WriteBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  ulTestMSPI_3WriteBuff_REG
                          DCD      0x00000000

                          AREA ||area_number.38||, DATA, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.data||
                  ulTestMSPI_4WriteBuff_REG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\spi\\mspi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_mspi_c_2c05d597____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____REVSH|
#line 402
|__asm___6_mspi_c_2c05d597____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____RRX|
#line 587
|__asm___6_mspi_c_2c05d597____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
