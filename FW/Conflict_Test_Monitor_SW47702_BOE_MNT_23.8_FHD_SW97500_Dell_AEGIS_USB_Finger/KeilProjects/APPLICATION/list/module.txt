; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\module.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\module.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\module.crf ..\..\Module\module.c]
                          THUMB

                          AREA ||i.MODULE_Initialize||, CODE, READONLY, ALIGN=2

                  MODULE_Initialize PROC
;;;409    
;;;410    void MODULE_Initialize(void)
000000  b510              PUSH     {r4,lr}
;;;411    {
;;;412    	thisFixedConf = module_GetFixedConfig();
000002  f7fffffe          BL       module_GetFixedConfig
000006  4c0a              LDR      r4,|L1.48|
;;;413    #if USED_NOISE_HOPPING_FREQ
;;;414    	thisCommonConf = app_GetCommonConfig();
000008  6060              STR      r0,[r4,#4]  ; thisFixedConf
00000a  f7fffffe          BL       app_GetCommonConfig
;;;415    	ptAppInfo = app_GetInfo();
00000e  60a0              STR      r0,[r4,#8]  ; thisCommonConf
000010  f7fffffe          BL       app_GetInfo
;;;416    #endif
;;;417    #if USED_PEN_MODE_OPERATION
;;;418    	module_init_param();
;;;419    #endif
;;;420    #if (USED_ROIC_DEF == ROIC_SWL92406)
;;;421    	thisInfo         = algorithm_GetInfo();
;;;422    #endif
;;;423    #if USED_VCF_SYNC_CONTROL
;;;424    	initVcfGPIO();
;;;425    #endif /* USED_VCF_SYNC_CONTROL */
;;;426    //	GPIO_Initialize(); // 시점 변경!!
;;;427    
;;;428    	initBoardGPIO();
000014  60e0              STR      r0,[r4,#0xc]  ; ptAppInfo
000016  f7fffffe          BL       initBoardGPIO
;;;429    
;;;430    	SRIC_Initialize();
00001a  f7fffffe          BL       SRIC_Initialize
;;;431    	initECLK();
00001e  f7fffffe          BL       initECLK
;;;432    	delay_msec(10);
000022  e8bd4010          POP      {r4,lr}
000026  f2427010          MOV      r0,#0x2710
00002a  f7ffbffe          B.W      delay_us
;;;433    }
;;;434    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      ||.data||

                          AREA ||i.hal_clear_LocalType_flag||, CODE, READONLY, ALIGN=2

                  hal_clear_LocalType_flag PROC
;;;3041   
;;;3042   void hal_clear_LocalType_flag(void)
000000  4901              LDR      r1,|L2.8|
;;;3043   {
;;;3044   	gLocalTypeFlag = PARTIAL_PEN_BEACON;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;3045   }
000006  4770              BX       lr
;;;3046   
                          ENDP

                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.hal_clear_irq_flag||, CODE, READONLY, ALIGN=2

                  hal_clear_irq_flag PROC
;;;3009   
;;;3010   void hal_clear_irq_flag(int _id)
000000  4a01              LDR      r2,|L3.8|
;;;3011   {
;;;3012   	gbIrqFlag[_id] = 0;
000002  2100              MOVS     r1,#0
000004  5411              STRB     r1,[r2,r0]
;;;3013   }
000006  4770              BX       lr
;;;3014   
                          ENDP

                  |L3.8|
                          DCD      ||.bss||

                          AREA ||i.hal_clear_overlap_pen||, CODE, READONLY, ALIGN=2

                  hal_clear_overlap_pen PROC
;;;3025   
;;;3026   void hal_clear_overlap_pen(void)
000000  4901              LDR      r1,|L4.8|
;;;3027   {
;;;3028   	gucOverlapFPend = 0;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;3029   }
000006  4770              BX       lr
;;;3030   
                          ENDP

                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.hal_get_LocalType_flag||, CODE, READONLY, ALIGN=2

                  hal_get_LocalType_flag PROC
;;;3046   
;;;3047   ePartialSensing_t hal_get_LocalType_flag(void)
000000  4801              LDR      r0,|L5.8|
;;;3048   {
;;;3049   	return gLocalTypeFlag;
000002  7840              LDRB     r0,[r0,#1]  ; gLocalTypeFlag
;;;3050   }
000004  4770              BX       lr
;;;3051   
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.hal_get_irq_flag||, CODE, READONLY, ALIGN=2

                  hal_get_irq_flag PROC
;;;3014   
;;;3015   bool_t hal_get_irq_flag(int _id)
000000  4901              LDR      r1,|L6.8|
;;;3016   {
;;;3017   	return gbIrqFlag[_id];
000002  5c08              LDRB     r0,[r1,r0]
;;;3018   }
000004  4770              BX       lr
;;;3019   
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.bss||

                          AREA ||i.hal_get_overlap_pen||, CODE, READONLY, ALIGN=2

                  hal_get_overlap_pen PROC
;;;3030   
;;;3031   uint8_t hal_get_overlap_pen(void)
000000  4801              LDR      r0,|L7.8|
;;;3032   {
;;;3033   	return gucOverlapFPend;
000002  7800              LDRB     r0,[r0,#0]  ; gucOverlapFPend
;;;3034   }
000004  4770              BX       lr
;;;3035   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||i.hal_set_LocalType_flag||, CODE, READONLY, ALIGN=2

                  hal_set_LocalType_flag PROC
;;;3036   __IO ePartialSensing_t gLocalTypeFlag  = PARTIAL_PEN_BEACON;
;;;3037   void hal_set_LocalType_flag(ePartialSensing_t _id)
000000  4901              LDR      r1,|L8.8|
;;;3038   {
;;;3039   	gLocalTypeFlag = _id;
000002  7048              STRB     r0,[r1,#1]
;;;3040   }
000004  4770              BX       lr
;;;3041   
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.data||

                          AREA ||i.hal_set_irq_flag||, CODE, READONLY, ALIGN=2

                  hal_set_irq_flag PROC
;;;3004   __IO bool_t gbIrqFlag[IRQ_ID_MAX] = { 0, };
;;;3005   void hal_set_irq_flag(int _id)
000000  4a01              LDR      r2,|L9.8|
;;;3006   {
;;;3007   	gbIrqFlag[_id] = 1;
000002  2101              MOVS     r1,#1
000004  5411              STRB     r1,[r2,r0]
;;;3008   }
000006  4770              BX       lr
;;;3009   
                          ENDP

                  |L9.8|
                          DCD      ||.bss||

                          AREA ||i.hal_set_overlap_pen||, CODE, READONLY, ALIGN=2

                  hal_set_overlap_pen PROC
;;;3020   __IO uint8_t gucOverlapFPend = 0;
;;;3021   void hal_set_overlap_pen(void)
000000  4901              LDR      r1,|L10.8|
;;;3022   {
;;;3023   	gucOverlapFPend = 1;
000002  2001              MOVS     r0,#1
000004  7008              STRB     r0,[r1,#0]
;;;3024   }
000006  4770              BX       lr
;;;3025   
                          ENDP

                  |L10.8|
                          DCD      ||.data||

                          AREA ||i.module_Check_LcdOn||, CODE, READONLY, ALIGN=1

                  module_Check_LcdOn PROC
;;;628    
;;;629    bool_t module_Check_LcdOn(void)
000000  b510              PUSH     {r4,lr}
;;;630    {
;;;631    #if USED_OPERATION_STAND_ALONE
;;;632    //	if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x0)
;;;633    //	{
;;;634    //		Hal_VccOff_State();
;;;635    //		return NO;
;;;636    //	}
;;;637    	return YES;
;;;638    #else /* USED_OPERATION_STAND_ALONE */
;;;639    #if USED_FORCE_S3_MODE_OPER
;;;640    //	if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x0)
;;;641    	{
;;;642    //		Hal_VccOff_State();
;;;643    		return NO;
;;;644    	}
;;;645    #else /* USED_FORCE_S3_MODE_OPER */
;;;646    	if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x0)
000002  2035              MOVS     r0,#0x35
000004  f7fffffe          BL       GPIO_Get_IN
000008  2800              CMP      r0,#0
;;;647    	{
;;;648    		Hal_VccOff_State();
;;;649    		return NO;
;;;650    	}
;;;651    #endif /* USED_FORCE_S3_MODE_OPER */
;;;652    
;;;653    	return YES;
00000a  bf1c              ITT      NE
00000c  2001              MOVNE    r0,#1
;;;654    #endif /* USED_OPERATION_STAND_ALONE */
;;;655    }
00000e  bd10              POPNE    {r4,pc}
000010  f7fffffe          BL       Hal_VccOff_State
000014  2000              MOVS     r0,#0                 ;649
000016  bd10              POP      {r4,pc}
;;;656    
                          ENDP


                          AREA ||i.module_Check_SMT_Mode||, CODE, READONLY, ALIGN=1

                  module_Check_SMT_Mode PROC
;;;593    #if USED_SMT_OP_MODE
;;;594    bool_t module_Check_SMT_Mode(void)
000000  b510              PUSH     {r4,lr}
;;;595    {
;;;596    	if(IS_GPIO_PIN(_GPIO_SWCLK) == 0x00 && IS_GPIO_PIN(_GPIO_SWDIO) == 0x00)
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       GPIO_Get_IN
000008  b930              CBNZ     r0,|L12.24|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       GPIO_Get_IN
000010  2800              CMP      r0,#0
;;;597    	{
;;;598    		return YES;
000012  bf04              ITT      EQ
000014  2001              MOVEQ    r0,#1
;;;599    	}
;;;600    	return NO;
;;;601    }
000016  bd10              POPEQ    {r4,pc}
                  |L12.24|
000018  2000              MOVS     r0,#0                 ;600
00001a  bd10              POP      {r4,pc}
;;;602    
                          ENDP


                          AREA ||i.module_Check_TPEN||, CODE, READONLY, ALIGN=1

                  module_Check_TPEN PROC
;;;666    
;;;667    bool_t module_Check_TPEN(void)
000000  2000              MOVS     r0,#0
;;;668    {
;;;669    #if (!USED_VCF_SYNC_CONTROL)
;;;670    #if (CUSTOMER != MODEL_DEF_FHD_97500_MNT_S3)
;;;671    	if(IS_GPIO_PIN(_GPIO_TP_EN) == 0x0)
;;;672    	{
;;;673    		return YES;
;;;674    	}
;;;675    #endif /* (CUSTOMER != MODEL_DEF_FHD_97500_MNT_S3) */
;;;676    #endif /* (!USED_VCF_SYNC_CONTROL) */
;;;677    	return NO;
;;;678    }
000002  4770              BX       lr
;;;679    
                          ENDP


                          AREA ||i.module_Enter_SMT_Mode||, CODE, READONLY, ALIGN=1

                  module_Enter_SMT_Mode PROC
;;;602    
;;;603    void module_Enter_SMT_Mode(void)
000000  b510              PUSH     {r4,lr}
;;;604    {
;;;605    	GPIO_Init(_GPIO_PWM_SRIC, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  2103              MOVS     r1,#3
000008  202f              MOVS     r0,#0x2f
00000a  f7fffffe          BL       GPIO_Init
;;;606    	GPIO_Init(_GPIO_PWM_TPIC, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  2103              MOVS     r1,#3
000014  2030              MOVS     r0,#0x30
000016  f7fffffe          BL       GPIO_Init
00001a  f04f20e0          MOV      r0,#0xe000e000
00001e  f04f7100          MOV      r1,#0x2000000
000022  f8c01200          STR      r1,[r0,#0x200]
000026  f8c01180          STR      r1,[r0,#0x180]
;;;607    
;;;608    	NVIC_SetPendingIRQ(I2C_SLV_IRQn);
;;;609    	NVIC_DisableIRQ(I2C_SLV_IRQn);    /* Interrupt Disable */
;;;610    
;;;611    	GPIO_Init(_GPIO_SLV_SCL, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
00002a  2300              MOVS     r3,#0
00002c  461a              MOV      r2,r3
00002e  2103              MOVS     r1,#3
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       GPIO_Init
;;;612    	GPIO_Init(_GPIO_SLV_SDA, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
000036  2300              MOVS     r3,#0
000038  2103              MOVS     r1,#3
00003a  461a              MOV      r2,r3
00003c  4608              MOV      r0,r1
00003e  f7fffffe          BL       GPIO_Init
;;;613    	GPIO_Init(_GPIO_TP_INTR, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
000042  2301              MOVS     r3,#1
000044  2200              MOVS     r2,#0
000046  2103              MOVS     r1,#3
000048  e8bd4010          POP      {r4,lr}
00004c  2004              MOVS     r0,#4
00004e  f7ffbffe          B.W      GPIO_Init
;;;614    }
;;;615    
                          ENDP


                          AREA ||i.module_Exit_SMT_Mode||, CODE, READONLY, ALIGN=1

                  module_Exit_SMT_Mode PROC
;;;615    
;;;616    void module_Exit_SMT_Mode(void)
000000  f7ffbffe          B.W      I2C_Initialize
;;;617    {
;;;618    	I2C_Initialize();
;;;619    }
;;;620    
                          ENDP


                          AREA ||i.module_HW_Init||, CODE, READONLY, ALIGN=2

                  module_HW_Init PROC
;;;472    tGPIO_CtrlReg_t * _GPIO;
;;;473    void module_HW_Init(void)
000000  4923              LDR      r1,|L16.144|
;;;474    {
000002  b510              PUSH     {r4,lr}
;;;475    	_GPIO = GPIO;
000004  4821              LDR      r0,|L16.140|
;;;476    	/*
;;;477    	 * For Debug Pin
;;;478    	 */
;;;479    
;;;480    	GPIO_Init(_GPIO_TP_INTR, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
000006  6108              STR      r0,[r1,#0x10]  ; _GPIO
000008  2301              MOVS     r3,#1
00000a  2200              MOVS     r2,#0
00000c  2103              MOVS     r1,#3
00000e  2004              MOVS     r0,#4
000010  f7fffffe          BL       GPIO_Init
000014  2000              MOVS     r0,#0
000016  4604              MOV      r4,r0
                  |L16.24|
000018  f1005100          ADD      r1,r0,#0x20000000
00001c  f5012180          ADD      r1,r1,#0x40000
000020  600c              STR      r4,[r1,#0]
000022  604c              STR      r4,[r1,#4]
000024  3008              ADDS     r0,r0,#8
000026  f5b04fc0          CMP      r0,#0x6000
00002a  dbf5              BLT      |L16.24|
00002c  f7fffffe          BL       SCRB_Initialize
000030  f7fffffe          BL       TIMER_Initialize
000034  4817              LDR      r0,|L16.148|
000036  f880402c          STRB     r4,[r0,#0x2c]
00003a  200c              MOVS     r0,#0xc
00003c  f7fffffe          BL       TimerTick_Initialize
000040  2001              MOVS     r0,#1
000042  0784              LSLS     r4,r0,#30
000044  f8440fa4          STR      r0,[r4,#0xa4]!
000048  4813              LDR      r0,|L16.152|
00004a  f8501fc4          LDR      r1,[r0,#0xc4]!
00004e  f0410108          ORR      r1,r1,#8
000052  6001              STR      r1,[r0,#0]
000054  f7fffffe          BL       USB_DevInit
000058  f04f21e0          MOV      r1,#0xe000e000
00005c  f44f3080          MOV      r0,#0x10000
000060  f8c10280          STR      r0,[r1,#0x280]
000064  2207              MOVS     r2,#7
000066  60e2              STR      r2,[r4,#0xc]
000068  f8c10100          STR      r0,[r1,#0x100]
00006c  490b              LDR      r1,|L16.156|
00006e  2020              MOVS     r0,#0x20
000070  f8810400          STRB     r0,[r1,#0x400]
000074  f7fffffe          BL       HAL_PendSVHandlerInitialize
000078  f7fffffe          BL       I2C_Initialize
00007c  f7fffffe          BL       protocol_init
;;;481    
;;;482    	module_MspiBuff_Init();
;;;483    	module_System_Init();
;;;484    	module_Protocol_Init();
;;;485    	init_DSP_B();
000080  f7fffffe          BL       init_DSP_B
;;;486    	DSPA_Initialize();
000084  e8bd4010          POP      {r4,lr}
000088  f7ffbffe          B.W      DSPA_Initialize
;;;487    }
;;;488    
                          ENDP

                  |L16.140|
                          DCD      0x40000100
                  |L16.144|
                          DCD      ||.data||
                  |L16.148|
                          DCD      tHalIntrHandle
                  |L16.152|
                          DCD      0x20100000
                  |L16.156|
                          DCD      0xe000e010

                          AREA ||i.module_Init_Signal||, CODE, READONLY, ALIGN=2

                  module_Init_Signal PROC
;;;542    
;;;543    bool_t module_Init_Signal(void)
000000  b570              PUSH     {r4-r6,lr}
000002  481b              LDR      r0,|L17.112|
;;;544    {
;;;545    	bool_t bReg = NO;
000004  2500              MOVS     r5,#0
000006  7800              LDRB     r0,[r0,#0]  ; wdt_init
000008  2800              CMP      r0,#0
00000a  bf18              IT       NE
00000c  f7fffffe          BLNE     Hal_WDT_DeInit
000010  2302              MOVS     r3,#2
000012  2201              MOVS     r2,#1
000014  2103              MOVS     r1,#3
000016  2035              MOVS     r0,#0x35
000018  f7fffffe          BL       GPIO_Init
00001c  2101              MOVS     r1,#1
00001e  2035              MOVS     r0,#0x35
000020  f7fffffe          BL       GPIO_Set_PE
;;;546    	module_Watch_Disable();
;;;547    
;;;548    	module_Init_LcdOn();
;;;549    	module_Init_TPEN();
;;;550    #if USED_TP_RST_OPERATION
;;;551    	module_Init_TPRST();
;;;552    #endif /* USED_TP_RST_OPERATION */
;;;553    
;;;554    #if USED_MNT_S3_MODE_FUNCTION
;;;555    	initMNT_S3_MODE_GPIO();
000024  f7fffffe          BL       initMNT_S3_MODE_GPIO
000028  2401              MOVS     r4,#1
                  |L17.42|
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       GPIO_Get_IN
000030  b920              CBNZ     r0,|L17.60|
000032  2101              MOVS     r1,#1
000034  2007              MOVS     r0,#7
000036  f7fffffe          BL       GPIO_Set_DATA
00003a  2400              MOVS     r4,#0
                  |L17.60|
00003c  2035              MOVS     r0,#0x35
00003e  f7fffffe          BL       GPIO_Get_IN
000042  2801              CMP      r0,#1
000044  d004              BEQ      |L17.80|
000046  f7fffffe          BL       protocol_swip_GetMode
00004a  2802              CMP      r0,#2
00004c  d1ed              BNE      |L17.42|
00004e  e000              B        |L17.82|
                  |L17.80|
;;;556    
;;;557    	if(module_Check_S3_Power())
000050  b164              CBZ      r4,|L17.108|
                  |L17.82|
000052  2302              MOVS     r3,#2
000054  2201              MOVS     r2,#1
000056  2100              MOVS     r1,#0
000058  202e              MOVS     r0,#0x2e
00005a  f7fffffe          BL       GPIO_Init
00005e  2302              MOVS     r3,#2
000060  2201              MOVS     r2,#1
000062  2100              MOVS     r1,#0
000064  202d              MOVS     r0,#0x2d
000066  f7fffffe          BL       GPIO_Init
;;;558    	{
;;;559    		module_RollBack_Sync();
;;;560    		bReg = YES;
00006a  2501              MOVS     r5,#1
                  |L17.108|
;;;561    	}
;;;562    
;;;563    	/*
;;;564    	 * S3모드 진입 하게 될 경우 Signal Out이 High여야지만 PMIC가 구동 되면서 LCD_ON이 High가 됨!!
;;;565    	 */
;;;566    //	if(module_Wait_LcdOn() == NO)
;;;567    //	{
;;;568    //		/*
;;;569    //		 * Receive DFUP Command!!
;;;570    //		 */
;;;571    //		bReg = YES;
;;;572    //	}
;;;573    
;;;574    #else
;;;575    	#if USED_TP_RST_OPERATION
;;;576    	if(module_Wait_LcdOn() && module_Wait_TPRST())
;;;577    	{
;;;578    		module_RollBack_Sync();
;;;579    		return YES;
;;;580    	}
;;;581    	#else /* USED_TP_RST_OPERATION */
;;;582    	if(module_Wait_LcdOn())
;;;583    	{
;;;584    		module_RollBack_Sync();
;;;585    		return YES;
;;;586    	}
;;;587    	#endif /* USED_TP_RST_OPERATION */
;;;588    #endif
;;;589    
;;;590    	return bReg;
00006c  4628              MOV      r0,r5
;;;591    }
00006e  bd70              POP      {r4-r6,pc}
;;;592    
                          ENDP

                  |L17.112|
                          DCD      wdt_init

                          AREA ||i.module_Init_TPEN||, CODE, READONLY, ALIGN=1

                  module_Init_TPEN PROC
;;;656    
;;;657    bool_t module_Init_TPEN(void) // NOTE : missing return value
000000  2001              MOVS     r0,#1
;;;658    {
;;;659    #if (USED_VCF_SYNC_CONTROL == NO)
;;;660    #if (CUSTOMER != MODEL_DEF_FHD_97500_MNT_S3)
;;;661    	GPIO_Init(_GPIO_TP_EN, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
;;;662    #endif /* (CUSTOMER != MODEL_DEF_FHD_97500_MNT_S3) */
;;;663    #endif
;;;664    	return YES;
;;;665    }
000002  4770              BX       lr
;;;666    
                          ENDP


                          AREA ||i.module_Protocol_Init||, CODE, READONLY, ALIGN=2

                  module_Protocol_Init PROC
;;;441    
;;;442    void module_Protocol_Init(void)
000000  b510              PUSH     {r4,lr}
;;;443    {
;;;444    	int bSWreset = 0;
;;;445    	SCRB->USB_CTRL_UC.ulBulk = 0x01;
000002  2001              MOVS     r0,#1
000004  0784              LSLS     r4,r0,#30
000006  f8440fa4          STR      r0,[r4,#0xa4]!
;;;446    	HW_REG(BASE_USB_SRAM|0xC4) =  HW_REG(BASE_USB_SRAM|0xC4)  | BIT3;
00000a  480f              LDR      r0,|L19.72|
00000c  f8501fc4          LDR      r1,[r0,#0xc4]!
000010  f0410108          ORR      r1,r1,#8
000014  6001              STR      r1,[r0,#0]
;;;447    //	delay_ms(530); // NEC모델 적용 사항
;;;448    	USB_DevInit();
000016  f7fffffe          BL       USB_DevInit
00001a  f04f21e0          MOV      r1,#0xe000e000
00001e  f44f3080          MOV      r0,#0x10000
000022  f8c10280          STR      r0,[r1,#0x280]
;;;449    
;;;450    	if(bSWreset)
;;;451    	{
;;;452    		mUsbSoftRstSet();
;;;453    		while (wFOTGPeri_Port(0x100) & BIT4);
;;;454    	}
;;;455    
;;;456    	NVIC_ClearPendingIRQ(USB_IRQn);
;;;457    	SCRB->USB_INTR_CLR.ulBulk = 0x7; // USB CM3 Internal Interrupt clear!!
000026  2207              MOVS     r2,#7
000028  60e2              STR      r2,[r4,#0xc]
00002a  f8c10100          STR      r0,[r1,#0x100]
00002e  4907              LDR      r1,|L19.76|
000030  2020              MOVS     r0,#0x20
000032  f8810400          STRB     r0,[r1,#0x400]
;;;458    	NVIC_EnableIRQ (USB_IRQn);
;;;459    	NVIC_SetPriority(USB_IRQn, USB_IRQn_Priority);
;;;460    
;;;461    	//ETC
;;;462    	HAL_PendSVHandlerInitialize();
000036  f7fffffe          BL       HAL_PendSVHandlerInitialize
;;;463    
;;;464    	I2C_Initialize();
00003a  f7fffffe          BL       I2C_Initialize
;;;465    #if USED_TPIC_VCOM_LEVEL_I2CM_CONTROL
;;;466    	I2CM_Initialize();
;;;467    #endif /* USED_TPIC_VCOM_LEVEL_I2CM_CONTROL */
;;;468    
;;;469    	protocol_init();
00003e  e8bd4010          POP      {r4,lr}
000042  f7ffbffe          B.W      protocol_init
;;;470    }
;;;471    
                          ENDP

000046  0000              DCW      0x0000
                  |L19.72|
                          DCD      0x20100000
                  |L19.76|
                          DCD      0xe000e010

                          AREA ||i.module_S3_PGAMMA_I2C_SW_Disable||, CODE, READONLY, ALIGN=1

                  module_S3_PGAMMA_I2C_SW_Disable PROC
;;;875    
;;;876    void module_S3_PGAMMA_I2C_SW_Disable(void)
000000  b510              PUSH     {r4,lr}
;;;877    {
;;;878    	GPIO_Init(_GPIO_PGMA_SCL, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
000002  2301              MOVS     r3,#1
000004  2200              MOVS     r2,#0
000006  2103              MOVS     r1,#3
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       GPIO_Init
;;;879    	GPIO_Init(_GPIO_PGMA_SDL, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
00000e  2301              MOVS     r3,#1
000010  2200              MOVS     r2,#0
000012  2103              MOVS     r1,#3
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       GPIO_Init
;;;880    	delay_us(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       delay_us
;;;881    
;;;882    //	//Addr 0x74 //Data 0x00 0x00
;;;883    //	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;
;;;884    //	GPIO->tGPIO_AFIO_3.tBit.GPIOM10 = 0;
;;;885    //	GPIO->tGPIO_DIR_1.tBit.GPIOM10 = 1;
;;;886    //
;;;887    //	GPIO->tGPIO_AFIO_2.tBit.GPIOM09 = 0;
;;;888    //	GPIO->tGPIO_DIR_1.tBit.GPIOM09 = 1;
;;;889    //	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;
;;;890    
;;;891    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
000020  f04f4480          MOV      r4,#0x40000000
000024  f8d40104          LDR      r0,[r4,#0x104]
000028  f4206080          BIC      r0,r0,#0x400
00002c  f8c40104          STR      r0,[r4,#0x104]
;;;892    	delay_us(4);
000030  2004              MOVS     r0,#4
000032  f5047482          ADD      r4,r4,#0x104
000036  f7fffffe          BL       delay_us
;;;893    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00003a  6820              LDR      r0,[r4,#0]
00003c  f4207000          BIC      r0,r0,#0x200
000040  6020              STR      r0,[r4,#0]
;;;894    	delay_us(5);
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       delay_us
;;;895    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000048  6820              LDR      r0,[r4,#0]
00004a  f4406080          ORR      r0,r0,#0x400
00004e  6020              STR      r0,[r4,#0]
;;;896    	delay_us(5);
000050  2005              MOVS     r0,#5
000052  f7fffffe          BL       delay_us
;;;897    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000056  6820              LDR      r0,[r4,#0]
000058  f4407000          ORR      r0,r0,#0x200
00005c  6020              STR      r0,[r4,#0]
00005e  2004              MOVS     r0,#4
000060  f7fffffe          BL       delay_us
;;;898    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000064  6820              LDR      r0,[r4,#0]
000066  f4207000          BIC      r0,r0,#0x200
00006a  6020              STR      r0,[r4,#0]
00006c  2004              MOVS     r0,#4
00006e  f7fffffe          BL       delay_us
;;;899    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000072  6820              LDR      r0,[r4,#0]
000074  f4407000          ORR      r0,r0,#0x200
000078  6020              STR      r0,[r4,#0]
00007a  2004              MOVS     r0,#4
00007c  f7fffffe          BL       delay_us
;;;900    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000080  6820              LDR      r0,[r4,#0]
000082  f4207000          BIC      r0,r0,#0x200
000086  6020              STR      r0,[r4,#0]
000088  2004              MOVS     r0,#4
00008a  f7fffffe          BL       delay_us
;;;901    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00008e  6820              LDR      r0,[r4,#0]
000090  f4407000          ORR      r0,r0,#0x200
000094  6020              STR      r0,[r4,#0]
000096  2004              MOVS     r0,#4
000098  f7fffffe          BL       delay_us
;;;902    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00009c  6820              LDR      r0,[r4,#0]
00009e  f4207000          BIC      r0,r0,#0x200
0000a2  6020              STR      r0,[r4,#0]
;;;903    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f4206080          BIC      r0,r0,#0x400
0000aa  6020              STR      r0,[r4,#0]
;;;904    	delay_us(4);
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       delay_us
;;;905    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000b2  6820              LDR      r0,[r4,#0]
0000b4  f4407000          ORR      r0,r0,#0x200
0000b8  6020              STR      r0,[r4,#0]
0000ba  2004              MOVS     r0,#4
0000bc  f7fffffe          BL       delay_us
;;;906    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
0000c0  6820              LDR      r0,[r4,#0]
0000c2  f4207000          BIC      r0,r0,#0x200
0000c6  6020              STR      r0,[r4,#0]
;;;907    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
0000c8  6820              LDR      r0,[r4,#0]
0000ca  f4406080          ORR      r0,r0,#0x400
0000ce  6020              STR      r0,[r4,#0]
;;;908    	delay_us(4);
0000d0  2004              MOVS     r0,#4
0000d2  f7fffffe          BL       delay_us
;;;909    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000d6  6820              LDR      r0,[r4,#0]
0000d8  f4407000          ORR      r0,r0,#0x200
0000dc  6020              STR      r0,[r4,#0]
0000de  2004              MOVS     r0,#4
0000e0  f7fffffe          BL       delay_us
;;;910    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
0000e4  6820              LDR      r0,[r4,#0]
0000e6  f4207000          BIC      r0,r0,#0x200
0000ea  6020              STR      r0,[r4,#0]
;;;911    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
0000ec  6820              LDR      r0,[r4,#0]
0000ee  f4206080          BIC      r0,r0,#0x400
0000f2  6020              STR      r0,[r4,#0]
;;;912    	delay_us(4);
0000f4  2004              MOVS     r0,#4
0000f6  f7fffffe          BL       delay_us
;;;913    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000fa  6820              LDR      r0,[r4,#0]
0000fc  f4407000          ORR      r0,r0,#0x200
000100  6020              STR      r0,[r4,#0]
000102  2004              MOVS     r0,#4
000104  f7fffffe          BL       delay_us
;;;914    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000108  6820              LDR      r0,[r4,#0]
00010a  f4207000          BIC      r0,r0,#0x200
00010e  6020              STR      r0,[r4,#0]
000110  2004              MOVS     r0,#4
000112  f7fffffe          BL       delay_us
;;;915    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000116  6820              LDR      r0,[r4,#0]
000118  f4407000          ORR      r0,r0,#0x200
00011c  6020              STR      r0,[r4,#0]
00011e  2004              MOVS     r0,#4
000120  f7fffffe          BL       delay_us
;;;916    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000124  6820              LDR      r0,[r4,#0]
000126  f4207000          BIC      r0,r0,#0x200
00012a  6020              STR      r0,[r4,#0]
00012c  2004              MOVS     r0,#4
00012e  f7fffffe          BL       delay_us
;;;917    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000132  6820              LDR      r0,[r4,#0]
000134  f4407000          ORR      r0,r0,#0x200
000138  6020              STR      r0,[r4,#0]
00013a  2004              MOVS     r0,#4
00013c  f7fffffe          BL       delay_us
;;;918    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000140  6820              LDR      r0,[r4,#0]
000142  f4207000          BIC      r0,r0,#0x200
000146  6020              STR      r0,[r4,#0]
000148  2004              MOVS     r0,#4
00014a  f7fffffe          BL       delay_us
;;;919    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00014e  6820              LDR      r0,[r4,#0]
000150  f4407000          ORR      r0,r0,#0x200
000154  6020              STR      r0,[r4,#0]
000156  2004              MOVS     r0,#4
000158  f7fffffe          BL       delay_us
;;;920    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00015c  6820              LDR      r0,[r4,#0]
00015e  f4207000          BIC      r0,r0,#0x200
000162  6020              STR      r0,[r4,#0]
;;;921    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000164  6820              LDR      r0,[r4,#0]
000166  f4406080          ORR      r0,r0,#0x400
00016a  6020              STR      r0,[r4,#0]
;;;922    	delay_us(2);
00016c  2002              MOVS     r0,#2
00016e  f7fffffe          BL       delay_us
;;;923    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
000172  6820              LDR      r0,[r4,#0]
000174  f4206080          BIC      r0,r0,#0x400
000178  6020              STR      r0,[r4,#0]
;;;924    	delay_us(2);
00017a  2002              MOVS     r0,#2
00017c  f7fffffe          BL       delay_us
;;;925    
;;;926    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000180  6820              LDR      r0,[r4,#0]
000182  f4407000          ORR      r0,r0,#0x200
000186  6020              STR      r0,[r4,#0]
000188  2004              MOVS     r0,#4
00018a  f7fffffe          BL       delay_us
;;;927    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00018e  6820              LDR      r0,[r4,#0]
000190  f4207000          BIC      r0,r0,#0x200
000194  6020              STR      r0,[r4,#0]
000196  2004              MOVS     r0,#4
000198  f7fffffe          BL       delay_us
;;;928    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00019c  6820              LDR      r0,[r4,#0]
00019e  f4407000          ORR      r0,r0,#0x200
0001a2  6020              STR      r0,[r4,#0]
0001a4  2004              MOVS     r0,#4
0001a6  f7fffffe          BL       delay_us
;;;929    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001aa  6820              LDR      r0,[r4,#0]
0001ac  f4207000          BIC      r0,r0,#0x200
0001b0  6020              STR      r0,[r4,#0]
0001b2  2004              MOVS     r0,#4
0001b4  f7fffffe          BL       delay_us
;;;930    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001b8  6820              LDR      r0,[r4,#0]
0001ba  f4407000          ORR      r0,r0,#0x200
0001be  6020              STR      r0,[r4,#0]
0001c0  2004              MOVS     r0,#4
0001c2  f7fffffe          BL       delay_us
;;;931    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001c6  6820              LDR      r0,[r4,#0]
0001c8  f4207000          BIC      r0,r0,#0x200
0001cc  6020              STR      r0,[r4,#0]
0001ce  2004              MOVS     r0,#4
0001d0  f7fffffe          BL       delay_us
;;;932    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001d4  6820              LDR      r0,[r4,#0]
0001d6  f4407000          ORR      r0,r0,#0x200
0001da  6020              STR      r0,[r4,#0]
0001dc  2004              MOVS     r0,#4
0001de  f7fffffe          BL       delay_us
;;;933    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001e2  6820              LDR      r0,[r4,#0]
0001e4  f4207000          BIC      r0,r0,#0x200
0001e8  6020              STR      r0,[r4,#0]
0001ea  2004              MOVS     r0,#4
0001ec  f7fffffe          BL       delay_us
;;;934    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001f0  6820              LDR      r0,[r4,#0]
0001f2  f4407000          ORR      r0,r0,#0x200
0001f6  6020              STR      r0,[r4,#0]
0001f8  2004              MOVS     r0,#4
0001fa  f7fffffe          BL       delay_us
;;;935    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001fe  6820              LDR      r0,[r4,#0]
000200  f4207000          BIC      r0,r0,#0x200
000204  6020              STR      r0,[r4,#0]
000206  2004              MOVS     r0,#4
000208  f7fffffe          BL       delay_us
;;;936    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00020c  6820              LDR      r0,[r4,#0]
00020e  f4407000          ORR      r0,r0,#0x200
000212  6020              STR      r0,[r4,#0]
000214  2004              MOVS     r0,#4
000216  f7fffffe          BL       delay_us
;;;937    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00021a  6820              LDR      r0,[r4,#0]
00021c  f4207000          BIC      r0,r0,#0x200
000220  6020              STR      r0,[r4,#0]
000222  2004              MOVS     r0,#4
000224  f7fffffe          BL       delay_us
;;;938    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000228  6820              LDR      r0,[r4,#0]
00022a  f4407000          ORR      r0,r0,#0x200
00022e  6020              STR      r0,[r4,#0]
000230  2004              MOVS     r0,#4
000232  f7fffffe          BL       delay_us
;;;939    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000236  6820              LDR      r0,[r4,#0]
000238  f4207000          BIC      r0,r0,#0x200
00023c  6020              STR      r0,[r4,#0]
00023e  2004              MOVS     r0,#4
000240  f7fffffe          BL       delay_us
;;;940    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000244  6820              LDR      r0,[r4,#0]
000246  f4407000          ORR      r0,r0,#0x200
00024a  6020              STR      r0,[r4,#0]
00024c  2004              MOVS     r0,#4
00024e  f7fffffe          BL       delay_us
;;;941    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000252  6820              LDR      r0,[r4,#0]
000254  f4207000          BIC      r0,r0,#0x200
000258  6020              STR      r0,[r4,#0]
00025a  2004              MOVS     r0,#4
00025c  f7fffffe          BL       delay_us
;;;942    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000260  6820              LDR      r0,[r4,#0]
000262  f4407000          ORR      r0,r0,#0x200
000266  6020              STR      r0,[r4,#0]
000268  2004              MOVS     r0,#4
00026a  f7fffffe          BL       delay_us
;;;943    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00026e  6820              LDR      r0,[r4,#0]
000270  f4207000          BIC      r0,r0,#0x200
000274  6020              STR      r0,[r4,#0]
;;;944    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000276  6820              LDR      r0,[r4,#0]
000278  f4406080          ORR      r0,r0,#0x400
00027c  6020              STR      r0,[r4,#0]
;;;945    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
00027e  6820              LDR      r0,[r4,#0]
000280  f4206080          BIC      r0,r0,#0x400
000284  6020              STR      r0,[r4,#0]
;;;946    	delay_us(4);
000286  2004              MOVS     r0,#4
000288  f7fffffe          BL       delay_us
;;;947    
;;;948    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00028c  6820              LDR      r0,[r4,#0]
00028e  f4407000          ORR      r0,r0,#0x200
000292  6020              STR      r0,[r4,#0]
000294  2004              MOVS     r0,#4
000296  f7fffffe          BL       delay_us
;;;949    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00029a  6820              LDR      r0,[r4,#0]
00029c  f4207000          BIC      r0,r0,#0x200
0002a0  6020              STR      r0,[r4,#0]
0002a2  2004              MOVS     r0,#4
0002a4  f7fffffe          BL       delay_us
;;;950    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002a8  6820              LDR      r0,[r4,#0]
0002aa  f4407000          ORR      r0,r0,#0x200
0002ae  6020              STR      r0,[r4,#0]
0002b0  2004              MOVS     r0,#4
0002b2  f7fffffe          BL       delay_us
;;;951    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002b6  6820              LDR      r0,[r4,#0]
0002b8  f4207000          BIC      r0,r0,#0x200
0002bc  6020              STR      r0,[r4,#0]
0002be  2004              MOVS     r0,#4
0002c0  f7fffffe          BL       delay_us
;;;952    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002c4  6820              LDR      r0,[r4,#0]
0002c6  f4407000          ORR      r0,r0,#0x200
0002ca  6020              STR      r0,[r4,#0]
0002cc  2004              MOVS     r0,#4
0002ce  f7fffffe          BL       delay_us
;;;953    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002d2  6820              LDR      r0,[r4,#0]
0002d4  f4207000          BIC      r0,r0,#0x200
0002d8  6020              STR      r0,[r4,#0]
0002da  2004              MOVS     r0,#4
0002dc  f7fffffe          BL       delay_us
;;;954    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002e0  6820              LDR      r0,[r4,#0]
0002e2  f4407000          ORR      r0,r0,#0x200
0002e6  6020              STR      r0,[r4,#0]
0002e8  2004              MOVS     r0,#4
0002ea  f7fffffe          BL       delay_us
;;;955    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002ee  6820              LDR      r0,[r4,#0]
0002f0  f4207000          BIC      r0,r0,#0x200
0002f4  6020              STR      r0,[r4,#0]
0002f6  2004              MOVS     r0,#4
0002f8  f7fffffe          BL       delay_us
;;;956    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002fc  6820              LDR      r0,[r4,#0]
0002fe  f4407000          ORR      r0,r0,#0x200
000302  6020              STR      r0,[r4,#0]
000304  2004              MOVS     r0,#4
000306  f7fffffe          BL       delay_us
;;;957    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00030a  6820              LDR      r0,[r4,#0]
00030c  f4207000          BIC      r0,r0,#0x200
000310  6020              STR      r0,[r4,#0]
000312  2004              MOVS     r0,#4
000314  f7fffffe          BL       delay_us
;;;958    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000318  6820              LDR      r0,[r4,#0]
00031a  f4407000          ORR      r0,r0,#0x200
00031e  6020              STR      r0,[r4,#0]
000320  2004              MOVS     r0,#4
000322  f7fffffe          BL       delay_us
;;;959    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
000326  6820              LDR      r0,[r4,#0]
000328  f4207000          BIC      r0,r0,#0x200
00032c  6020              STR      r0,[r4,#0]
;;;960    	delay_us(4);
00032e  2004              MOVS     r0,#4
000330  f7fffffe          BL       delay_us
;;;961    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000334  6820              LDR      r0,[r4,#0]
000336  f4407000          ORR      r0,r0,#0x200
00033a  6020              STR      r0,[r4,#0]
00033c  2004              MOVS     r0,#4
00033e  f7fffffe          BL       delay_us
;;;962    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
000342  6820              LDR      r0,[r4,#0]
000344  f4207000          BIC      r0,r0,#0x200
000348  6020              STR      r0,[r4,#0]
;;;963    	delay_us(4);
00034a  2004              MOVS     r0,#4
00034c  f7fffffe          BL       delay_us
;;;964    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000350  6820              LDR      r0,[r4,#0]
000352  f4407000          ORR      r0,r0,#0x200
000356  6020              STR      r0,[r4,#0]
000358  2004              MOVS     r0,#4
00035a  f7fffffe          BL       delay_us
;;;965    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00035e  6820              LDR      r0,[r4,#0]
000360  f4207000          BIC      r0,r0,#0x200
000364  6020              STR      r0,[r4,#0]
000366  2004              MOVS     r0,#4
000368  f7fffffe          BL       delay_us
;;;966    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00036c  6820              LDR      r0,[r4,#0]
00036e  f4407000          ORR      r0,r0,#0x200
000372  6020              STR      r0,[r4,#0]
000374  2004              MOVS     r0,#4
000376  f7fffffe          BL       delay_us
;;;967    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00037a  6820              LDR      r0,[r4,#0]
00037c  f4207000          BIC      r0,r0,#0x200
000380  6020              STR      r0,[r4,#0]
;;;968    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000382  6820              LDR      r0,[r4,#0]
000384  f4406080          ORR      r0,r0,#0x400
000388  6020              STR      r0,[r4,#0]
;;;969    	//delay_us(2);
;;;970    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
00038a  6820              LDR      r0,[r4,#0]
00038c  f4206080          BIC      r0,r0,#0x400
000390  6020              STR      r0,[r4,#0]
;;;971    	delay_us(8);
000392  2008              MOVS     r0,#8
000394  f7fffffe          BL       delay_us
;;;972    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(2);
000398  6820              LDR      r0,[r4,#0]
00039a  f4407000          ORR      r0,r0,#0x200
00039e  6020              STR      r0,[r4,#0]
0003a0  2002              MOVS     r0,#2
0003a2  f7fffffe          BL       delay_us
;;;973    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
0003a6  6820              LDR      r0,[r4,#0]
0003a8  f4406080          ORR      r0,r0,#0x400
0003ac  6020              STR      r0,[r4,#0]
;;;974    
;;;975    	delay_us(10);
0003ae  200a              MOVS     r0,#0xa
0003b0  f7fffffe          BL       delay_us
;;;976    	GPIO_Init(_GPIO_PGMA_SCL, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
0003b4  2302              MOVS     r3,#2
0003b6  2201              MOVS     r2,#1
0003b8  2103              MOVS     r1,#3
0003ba  2009              MOVS     r0,#9
0003bc  f7fffffe          BL       GPIO_Init
;;;977    	GPIO_Init(_GPIO_PGMA_SDL, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
0003c0  2302              MOVS     r3,#2
0003c2  2201              MOVS     r2,#1
0003c4  2103              MOVS     r1,#3
0003c6  e8bd4010          POP      {r4,lr}
0003ca  200a              MOVS     r0,#0xa
0003cc  f7ffbffe          B.W      GPIO_Init
;;;978    }
;;;979    #endif /* USED_S3_PGAMMA_SW_I2C_CTRL */
                          ENDP


                          AREA ||i.module_S3_PGAMMA_I2C_SW_Enable||, CODE, READONLY, ALIGN=1

                  module_S3_PGAMMA_I2C_SW_Enable PROC
;;;771    #if USED_S3_PGAMMA_SW_I2C_CTRL
;;;772    void module_S3_PGAMMA_I2C_SW_Enable(void)
000000  b510              PUSH     {r4,lr}
;;;773    {
;;;774    	GPIO_Init(_GPIO_PGMA_SCL, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
000002  2301              MOVS     r3,#1
000004  2200              MOVS     r2,#0
000006  2103              MOVS     r1,#3
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       GPIO_Init
;;;775    	GPIO_Init(_GPIO_PGMA_SDL, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
00000e  2301              MOVS     r3,#1
000010  2200              MOVS     r2,#0
000012  2103              MOVS     r1,#3
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       GPIO_Init
;;;776    	delay_us(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       delay_us
;;;777    //	//Addr 0x74 //Data 0x00 0x02
;;;778    //	GPIO->tGPIO_DATA_1.tBit.GPIOM10 = 1;
;;;779    //	GPIO->tGPIO_AFIO_3.tBit.GPIOM10 = 0;
;;;780    //	GPIO->tGPIO_DIR_1.tBit.GPIOM10 = 1;
;;;781    //
;;;782    //	GPIO->tGPIO_AFIO_2.tBit.GPIOM09 = 0;
;;;783    //	GPIO->tGPIO_DIR_1.tBit.GPIOM09 = 1;
;;;784    //	GPIO->tGPIO_DATA_1.tBit.GPIOM09 = 1;
;;;785    
;;;786    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
000020  f04f4480          MOV      r4,#0x40000000
000024  f8d40104          LDR      r0,[r4,#0x104]
000028  f4206080          BIC      r0,r0,#0x400
00002c  f8c40104          STR      r0,[r4,#0x104]
;;;787    	delay_us(3);
000030  2003              MOVS     r0,#3
000032  f5047482          ADD      r4,r4,#0x104
000036  f7fffffe          BL       delay_us
;;;788    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00003a  6820              LDR      r0,[r4,#0]
00003c  f4207000          BIC      r0,r0,#0x200
000040  6020              STR      r0,[r4,#0]
;;;789    	delay_us(2);
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       delay_us
;;;790    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000048  6820              LDR      r0,[r4,#0]
00004a  f4406080          ORR      r0,r0,#0x400
00004e  6020              STR      r0,[r4,#0]
;;;791    	delay_us(3);
000050  2003              MOVS     r0,#3
000052  f7fffffe          BL       delay_us
;;;792    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000056  6820              LDR      r0,[r4,#0]
000058  f4407000          ORR      r0,r0,#0x200
00005c  6020              STR      r0,[r4,#0]
00005e  2004              MOVS     r0,#4
000060  f7fffffe          BL       delay_us
;;;793    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000064  6820              LDR      r0,[r4,#0]
000066  f4207000          BIC      r0,r0,#0x200
00006a  6020              STR      r0,[r4,#0]
00006c  2004              MOVS     r0,#4
00006e  f7fffffe          BL       delay_us
;;;794    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000072  6820              LDR      r0,[r4,#0]
000074  f4407000          ORR      r0,r0,#0x200
000078  6020              STR      r0,[r4,#0]
00007a  2004              MOVS     r0,#4
00007c  f7fffffe          BL       delay_us
;;;795    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000080  6820              LDR      r0,[r4,#0]
000082  f4207000          BIC      r0,r0,#0x200
000086  6020              STR      r0,[r4,#0]
000088  2004              MOVS     r0,#4
00008a  f7fffffe          BL       delay_us
;;;796    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00008e  6820              LDR      r0,[r4,#0]
000090  f4407000          ORR      r0,r0,#0x200
000094  6020              STR      r0,[r4,#0]
000096  2004              MOVS     r0,#4
000098  f7fffffe          BL       delay_us
;;;797    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00009c  6820              LDR      r0,[r4,#0]
00009e  f4207000          BIC      r0,r0,#0x200
0000a2  6020              STR      r0,[r4,#0]
;;;798    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f4206080          BIC      r0,r0,#0x400
0000aa  6020              STR      r0,[r4,#0]
;;;799    	delay_us(4);
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       delay_us
;;;800    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000b2  6820              LDR      r0,[r4,#0]
0000b4  f4407000          ORR      r0,r0,#0x200
0000b8  6020              STR      r0,[r4,#0]
0000ba  2004              MOVS     r0,#4
0000bc  f7fffffe          BL       delay_us
;;;801    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
0000c0  6820              LDR      r0,[r4,#0]
0000c2  f4207000          BIC      r0,r0,#0x200
0000c6  6020              STR      r0,[r4,#0]
;;;802    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
0000c8  6820              LDR      r0,[r4,#0]
0000ca  f4406080          ORR      r0,r0,#0x400
0000ce  6020              STR      r0,[r4,#0]
;;;803    	delay_us(4);
0000d0  2004              MOVS     r0,#4
0000d2  f7fffffe          BL       delay_us
;;;804    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000d6  6820              LDR      r0,[r4,#0]
0000d8  f4407000          ORR      r0,r0,#0x200
0000dc  6020              STR      r0,[r4,#0]
0000de  2004              MOVS     r0,#4
0000e0  f7fffffe          BL       delay_us
;;;805    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
0000e4  6820              LDR      r0,[r4,#0]
0000e6  f4207000          BIC      r0,r0,#0x200
0000ea  6020              STR      r0,[r4,#0]
;;;806    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
0000ec  6820              LDR      r0,[r4,#0]
0000ee  f4206080          BIC      r0,r0,#0x400
0000f2  6020              STR      r0,[r4,#0]
;;;807    	delay_us(4);
0000f4  2004              MOVS     r0,#4
0000f6  f7fffffe          BL       delay_us
;;;808    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0000fa  6820              LDR      r0,[r4,#0]
0000fc  f4407000          ORR      r0,r0,#0x200
000100  6020              STR      r0,[r4,#0]
000102  2004              MOVS     r0,#4
000104  f7fffffe          BL       delay_us
;;;809    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000108  6820              LDR      r0,[r4,#0]
00010a  f4207000          BIC      r0,r0,#0x200
00010e  6020              STR      r0,[r4,#0]
000110  2004              MOVS     r0,#4
000112  f7fffffe          BL       delay_us
;;;810    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000116  6820              LDR      r0,[r4,#0]
000118  f4407000          ORR      r0,r0,#0x200
00011c  6020              STR      r0,[r4,#0]
00011e  2004              MOVS     r0,#4
000120  f7fffffe          BL       delay_us
;;;811    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000124  6820              LDR      r0,[r4,#0]
000126  f4207000          BIC      r0,r0,#0x200
00012a  6020              STR      r0,[r4,#0]
00012c  2004              MOVS     r0,#4
00012e  f7fffffe          BL       delay_us
;;;812    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000132  6820              LDR      r0,[r4,#0]
000134  f4407000          ORR      r0,r0,#0x200
000138  6020              STR      r0,[r4,#0]
00013a  2004              MOVS     r0,#4
00013c  f7fffffe          BL       delay_us
;;;813    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000140  6820              LDR      r0,[r4,#0]
000142  f4207000          BIC      r0,r0,#0x200
000146  6020              STR      r0,[r4,#0]
000148  2004              MOVS     r0,#4
00014a  f7fffffe          BL       delay_us
;;;814    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00014e  6820              LDR      r0,[r4,#0]
000150  f4407000          ORR      r0,r0,#0x200
000154  6020              STR      r0,[r4,#0]
000156  2004              MOVS     r0,#4
000158  f7fffffe          BL       delay_us
;;;815    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00015c  6820              LDR      r0,[r4,#0]
00015e  f4207000          BIC      r0,r0,#0x200
000162  6020              STR      r0,[r4,#0]
;;;816    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000164  6820              LDR      r0,[r4,#0]
000166  f4406080          ORR      r0,r0,#0x400
00016a  6020              STR      r0,[r4,#0]
;;;817    	delay_us(2);
00016c  2002              MOVS     r0,#2
00016e  f7fffffe          BL       delay_us
;;;818    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
000172  6820              LDR      r0,[r4,#0]
000174  f4206080          BIC      r0,r0,#0x400
000178  6020              STR      r0,[r4,#0]
;;;819    	delay_us(2);
00017a  2002              MOVS     r0,#2
00017c  f7fffffe          BL       delay_us
;;;820    
;;;821    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000180  6820              LDR      r0,[r4,#0]
000182  f4407000          ORR      r0,r0,#0x200
000186  6020              STR      r0,[r4,#0]
000188  2004              MOVS     r0,#4
00018a  f7fffffe          BL       delay_us
;;;822    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00018e  6820              LDR      r0,[r4,#0]
000190  f4207000          BIC      r0,r0,#0x200
000194  6020              STR      r0,[r4,#0]
000196  2004              MOVS     r0,#4
000198  f7fffffe          BL       delay_us
;;;823    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00019c  6820              LDR      r0,[r4,#0]
00019e  f4407000          ORR      r0,r0,#0x200
0001a2  6020              STR      r0,[r4,#0]
0001a4  2004              MOVS     r0,#4
0001a6  f7fffffe          BL       delay_us
;;;824    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001aa  6820              LDR      r0,[r4,#0]
0001ac  f4207000          BIC      r0,r0,#0x200
0001b0  6020              STR      r0,[r4,#0]
0001b2  2004              MOVS     r0,#4
0001b4  f7fffffe          BL       delay_us
;;;825    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001b8  6820              LDR      r0,[r4,#0]
0001ba  f4407000          ORR      r0,r0,#0x200
0001be  6020              STR      r0,[r4,#0]
0001c0  2004              MOVS     r0,#4
0001c2  f7fffffe          BL       delay_us
;;;826    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001c6  6820              LDR      r0,[r4,#0]
0001c8  f4207000          BIC      r0,r0,#0x200
0001cc  6020              STR      r0,[r4,#0]
0001ce  2004              MOVS     r0,#4
0001d0  f7fffffe          BL       delay_us
;;;827    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001d4  6820              LDR      r0,[r4,#0]
0001d6  f4407000          ORR      r0,r0,#0x200
0001da  6020              STR      r0,[r4,#0]
0001dc  2004              MOVS     r0,#4
0001de  f7fffffe          BL       delay_us
;;;828    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001e2  6820              LDR      r0,[r4,#0]
0001e4  f4207000          BIC      r0,r0,#0x200
0001e8  6020              STR      r0,[r4,#0]
0001ea  2004              MOVS     r0,#4
0001ec  f7fffffe          BL       delay_us
;;;829    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0001f0  6820              LDR      r0,[r4,#0]
0001f2  f4407000          ORR      r0,r0,#0x200
0001f6  6020              STR      r0,[r4,#0]
0001f8  2004              MOVS     r0,#4
0001fa  f7fffffe          BL       delay_us
;;;830    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0001fe  6820              LDR      r0,[r4,#0]
000200  f4207000          BIC      r0,r0,#0x200
000204  6020              STR      r0,[r4,#0]
000206  2004              MOVS     r0,#4
000208  f7fffffe          BL       delay_us
;;;831    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00020c  6820              LDR      r0,[r4,#0]
00020e  f4407000          ORR      r0,r0,#0x200
000212  6020              STR      r0,[r4,#0]
000214  2004              MOVS     r0,#4
000216  f7fffffe          BL       delay_us
;;;832    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00021a  6820              LDR      r0,[r4,#0]
00021c  f4207000          BIC      r0,r0,#0x200
000220  6020              STR      r0,[r4,#0]
000222  2004              MOVS     r0,#4
000224  f7fffffe          BL       delay_us
;;;833    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000228  6820              LDR      r0,[r4,#0]
00022a  f4407000          ORR      r0,r0,#0x200
00022e  6020              STR      r0,[r4,#0]
000230  2004              MOVS     r0,#4
000232  f7fffffe          BL       delay_us
;;;834    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000236  6820              LDR      r0,[r4,#0]
000238  f4207000          BIC      r0,r0,#0x200
00023c  6020              STR      r0,[r4,#0]
00023e  2004              MOVS     r0,#4
000240  f7fffffe          BL       delay_us
;;;835    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000244  6820              LDR      r0,[r4,#0]
000246  f4407000          ORR      r0,r0,#0x200
00024a  6020              STR      r0,[r4,#0]
00024c  2004              MOVS     r0,#4
00024e  f7fffffe          BL       delay_us
;;;836    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
000252  6820              LDR      r0,[r4,#0]
000254  f4207000          BIC      r0,r0,#0x200
000258  6020              STR      r0,[r4,#0]
00025a  2004              MOVS     r0,#4
00025c  f7fffffe          BL       delay_us
;;;837    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000260  6820              LDR      r0,[r4,#0]
000262  f4407000          ORR      r0,r0,#0x200
000266  6020              STR      r0,[r4,#0]
000268  2004              MOVS     r0,#4
00026a  f7fffffe          BL       delay_us
;;;838    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00026e  6820              LDR      r0,[r4,#0]
000270  f4207000          BIC      r0,r0,#0x200
000274  6020              STR      r0,[r4,#0]
;;;839    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000276  6820              LDR      r0,[r4,#0]
000278  f4406080          ORR      r0,r0,#0x400
00027c  6020              STR      r0,[r4,#0]
;;;840    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
00027e  6820              LDR      r0,[r4,#0]
000280  f4206080          BIC      r0,r0,#0x400
000284  6020              STR      r0,[r4,#0]
;;;841    	delay_us(4);
000286  2004              MOVS     r0,#4
000288  f7fffffe          BL       delay_us
;;;842    
;;;843    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00028c  6820              LDR      r0,[r4,#0]
00028e  f4407000          ORR      r0,r0,#0x200
000292  6020              STR      r0,[r4,#0]
000294  2004              MOVS     r0,#4
000296  f7fffffe          BL       delay_us
;;;844    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00029a  6820              LDR      r0,[r4,#0]
00029c  f4207000          BIC      r0,r0,#0x200
0002a0  6020              STR      r0,[r4,#0]
0002a2  2004              MOVS     r0,#4
0002a4  f7fffffe          BL       delay_us
;;;845    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002a8  6820              LDR      r0,[r4,#0]
0002aa  f4407000          ORR      r0,r0,#0x200
0002ae  6020              STR      r0,[r4,#0]
0002b0  2004              MOVS     r0,#4
0002b2  f7fffffe          BL       delay_us
;;;846    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002b6  6820              LDR      r0,[r4,#0]
0002b8  f4207000          BIC      r0,r0,#0x200
0002bc  6020              STR      r0,[r4,#0]
0002be  2004              MOVS     r0,#4
0002c0  f7fffffe          BL       delay_us
;;;847    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002c4  6820              LDR      r0,[r4,#0]
0002c6  f4407000          ORR      r0,r0,#0x200
0002ca  6020              STR      r0,[r4,#0]
0002cc  2004              MOVS     r0,#4
0002ce  f7fffffe          BL       delay_us
;;;848    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002d2  6820              LDR      r0,[r4,#0]
0002d4  f4207000          BIC      r0,r0,#0x200
0002d8  6020              STR      r0,[r4,#0]
0002da  2004              MOVS     r0,#4
0002dc  f7fffffe          BL       delay_us
;;;849    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002e0  6820              LDR      r0,[r4,#0]
0002e2  f4407000          ORR      r0,r0,#0x200
0002e6  6020              STR      r0,[r4,#0]
0002e8  2004              MOVS     r0,#4
0002ea  f7fffffe          BL       delay_us
;;;850    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
0002ee  6820              LDR      r0,[r4,#0]
0002f0  f4207000          BIC      r0,r0,#0x200
0002f4  6020              STR      r0,[r4,#0]
0002f6  2004              MOVS     r0,#4
0002f8  f7fffffe          BL       delay_us
;;;851    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
0002fc  6820              LDR      r0,[r4,#0]
0002fe  f4407000          ORR      r0,r0,#0x200
000302  6020              STR      r0,[r4,#0]
000304  2004              MOVS     r0,#4
000306  f7fffffe          BL       delay_us
;;;852    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00030a  6820              LDR      r0,[r4,#0]
00030c  f4207000          BIC      r0,r0,#0x200
000310  6020              STR      r0,[r4,#0]
000312  2004              MOVS     r0,#4
000314  f7fffffe          BL       delay_us
;;;853    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000318  6820              LDR      r0,[r4,#0]
00031a  f4407000          ORR      r0,r0,#0x200
00031e  6020              STR      r0,[r4,#0]
000320  2004              MOVS     r0,#4
000322  f7fffffe          BL       delay_us
;;;854    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
000326  6820              LDR      r0,[r4,#0]
000328  f4207000          BIC      r0,r0,#0x200
00032c  6020              STR      r0,[r4,#0]
;;;855    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
00032e  6820              LDR      r0,[r4,#0]
000330  f4406080          ORR      r0,r0,#0x400
000334  6020              STR      r0,[r4,#0]
;;;856    	delay_us(4);
000336  2004              MOVS     r0,#4
000338  f7fffffe          BL       delay_us
;;;857    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00033c  6820              LDR      r0,[r4,#0]
00033e  f4407000          ORR      r0,r0,#0x200
000342  6020              STR      r0,[r4,#0]
000344  2004              MOVS     r0,#4
000346  f7fffffe          BL       delay_us
;;;858    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00034a  6820              LDR      r0,[r4,#0]
00034c  f4207000          BIC      r0,r0,#0x200
000350  6020              STR      r0,[r4,#0]
;;;859    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
000352  6820              LDR      r0,[r4,#0]
000354  f4206080          BIC      r0,r0,#0x400
000358  6020              STR      r0,[r4,#0]
;;;860    	delay_us(4);
00035a  2004              MOVS     r0,#4
00035c  f7fffffe          BL       delay_us
;;;861    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
000360  6820              LDR      r0,[r4,#0]
000362  f4407000          ORR      r0,r0,#0x200
000366  6020              STR      r0,[r4,#0]
000368  2004              MOVS     r0,#4
00036a  f7fffffe          BL       delay_us
;;;862    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;	delay_us(4);
00036e  6820              LDR      r0,[r4,#0]
000370  f4207000          BIC      r0,r0,#0x200
000374  6020              STR      r0,[r4,#0]
000376  2004              MOVS     r0,#4
000378  f7fffffe          BL       delay_us
;;;863    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(4);
00037c  6820              LDR      r0,[r4,#0]
00037e  f4407000          ORR      r0,r0,#0x200
000382  6020              STR      r0,[r4,#0]
000384  2004              MOVS     r0,#4
000386  f7fffffe          BL       delay_us
;;;864    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 0;
00038a  6820              LDR      r0,[r4,#0]
00038c  f4207000          BIC      r0,r0,#0x200
000390  6020              STR      r0,[r4,#0]
;;;865    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
000392  6820              LDR      r0,[r4,#0]
000394  f4406080          ORR      r0,r0,#0x400
000398  6020              STR      r0,[r4,#0]
;;;866    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 0;	// data
00039a  6820              LDR      r0,[r4,#0]
00039c  f4206080          BIC      r0,r0,#0x400
0003a0  6020              STR      r0,[r4,#0]
;;;867    	delay_us(6);
0003a2  2006              MOVS     r0,#6
0003a4  f7fffffe          BL       delay_us
;;;868    	GPIO->GPIOM_OUT.tBit.GPIOM09 = 1;	delay_us(2);
0003a8  6820              LDR      r0,[r4,#0]
0003aa  f4407000          ORR      r0,r0,#0x200
0003ae  6020              STR      r0,[r4,#0]
0003b0  2002              MOVS     r0,#2
0003b2  f7fffffe          BL       delay_us
;;;869    	GPIO->GPIOM_OUT.tBit.GPIOM10 = 1;	// data
0003b6  6820              LDR      r0,[r4,#0]
0003b8  f4406080          ORR      r0,r0,#0x400
0003bc  6020              STR      r0,[r4,#0]
;;;870    
;;;871    	delay_us(10);
0003be  200a              MOVS     r0,#0xa
0003c0  f7fffffe          BL       delay_us
;;;872    	GPIO_Init(_GPIO_PGMA_SCL, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
0003c4  2302              MOVS     r3,#2
0003c6  2201              MOVS     r2,#1
0003c8  2103              MOVS     r1,#3
0003ca  2009              MOVS     r0,#9
0003cc  f7fffffe          BL       GPIO_Init
;;;873    	GPIO_Init(_GPIO_PGMA_SDL, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
0003d0  2302              MOVS     r3,#2
0003d2  2201              MOVS     r2,#1
0003d4  2103              MOVS     r1,#3
0003d6  e8bd4010          POP      {r4,lr}
0003da  200a              MOVS     r0,#0xa
0003dc  f7ffbffe          B.W      GPIO_Init
;;;874    }
;;;875    
                          ENDP


                          AREA ||i.module_SignalOut_SMT_Mode||, CODE, READONLY, ALIGN=1

                  module_SignalOut_SMT_Mode PROC
;;;620    
;;;621    void module_SignalOut_SMT_Mode(void)
000000  b510              PUSH     {r4,lr}
;;;622    {
;;;623    	delay_us(500);
000002  f44f70fa          MOV      r0,#0x1f4
000006  f7fffffe          BL       delay_us
;;;624    	GPIO_Toggle(_GPIO_PWM_SRIC);
00000a  202f              MOVS     r0,#0x2f
00000c  f7fffffe          BL       GPIO_Toggle
;;;625    	GPIO_Toggle(_GPIO_PWM_TPIC);
000010  e8bd4010          POP      {r4,lr}
000014  2030              MOVS     r0,#0x30
000016  f7ffbffe          B.W      GPIO_Toggle
;;;626    }
;;;627    #endif /* USED_SMT_OP_MODE */
                          ENDP


                          AREA ||i.module_Skip_Event||, CODE, READONLY, ALIGN=1

                  module_Skip_Event PROC
;;;981    
;;;982    bool_t module_Skip_Event(void)
000000  b510              PUSH     {r4,lr}
;;;983    {
;;;984    #if USED_DO_NOT_TOUCH_REPORT
;;;985    	return YES;
;;;986    #else /* USED_DO_NOT_TOUCH_REPORT */
;;;987    #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;988    	if((module_Check_TPEN() == YES) || (HAL_GetTouchReportEnControl() == NO))
000002  f7fffffe          BL       HAL_GetTouchReportEnControl
000006  2800              CMP      r0,#0
;;;989    #else /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;990    	if(module_Check_TPEN() == YES)
;;;991    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;992    	{
;;;993    		return YES;
000008  bf0c              ITE      EQ
00000a  2001              MOVEQ    r0,#1
;;;994    	}
;;;995    	return NO;
00000c  2000              MOVNE    r0,#0
;;;996    #endif /* USED_DO_NOT_TOUCH_REPORT */
;;;997    }
00000e  bd10              POP      {r4,pc}
;;;998    
                          ENDP


                          AREA ||i.module_Start||, CODE, READONLY, ALIGN=1

                  module_Start PROC
;;;488    
;;;489    bool_t module_Start(void)
000000  2000              MOVS     r0,#0
;;;490    {
;;;491    	bool_t retVal = YES;
;;;492    
;;;493    	retVal = Hal_sric_start(NO);
000002  f7ffbffe          B.W      Hal_sric_start
;;;494    
;;;495    	return retVal;
;;;496    }
;;;497    
                          ENDP


                          AREA ||i.module_Stop||, CODE, READONLY, ALIGN=2

                  module_Stop PROC
;;;497    
;;;498    void module_Stop(bool_t bIsVCCOff)
000000  b510              PUSH     {r4,lr}
;;;499    {
000002  4604              MOV      r4,r0
000004  b08c              SUB      sp,sp,#0x30
;;;500    #if USED_ECLK_ON_OFF_CONTROL
;;;501    	HAL_SetECLKOnOffControl(NO);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;502    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;503    #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;504    	HAL_SetTPICMuxEnControl(NO, bIsVCCOff);
00000c  4621              MOV      r1,r4
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       HAL_SetTPICMuxEnControl
;;;505    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;506    #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;507    	HAL_SetTouchReportEnControl(NO);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       HAL_SetTouchReportEnControl
;;;508    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;509    //	GPIO_Init(_GPIO_TSYNC_OUT, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
;;;510    
;;;511    	tPWM_INTR_CFG_t tPWM_INTR_CFG[4] =
00001a  4816              LDR      r0,|L25.116|
00001c  f10d0e10          ADD      lr,sp,#0x10
000020  e8b0100e          LDM      r0!,{r1-r3,r12}
000024  e88d100e          STM      sp,{r1-r3,r12}
000028  e8b0100e          LDM      r0!,{r1-r3,r12}
00002c  e88e100e          STM      lr,{r1-r3,r12}
000030  c80f              LDM      r0,{r0-r3}
000032  f10d0c20          ADD      r12,sp,#0x20
000036  e88c000f          STM      r12,{r0-r3}
;;;512    	{
;;;513    		{VSYNC_IN_IRQn, VSYNC_IN_IRQn_Priority, DISABLE},
;;;514    		{TSYNC_IN_IRQn, TSYNC_IN_IRQn_Priority, DISABLE},
;;;515    		{TSYNC_OUT_IRQn, TSYNC_OUT_IRQn_Priority, DISABLE},
;;;516    		{PWMDRV_IRQn, PWMDRV_IRQn_Priority, DISABLE}
;;;517    	};
;;;518    	PWMDRV_ITConfig((tPWM_INTR_CFG_t *)&tPWM_INTR_CFG[0], 4);
00003a  2104              MOVS     r1,#4
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       PWMDRV_ITConfig
000042  f04f20e0          MOV      r0,#0xe000e000
000046  f44f7180          MOV      r1,#0x100
00004a  f8c01180          STR      r1,[r0,#0x180]
00004e  0049              LSLS     r1,r1,#1
000050  f8c01180          STR      r1,[r0,#0x180]
;;;519    
;;;520    	NVIC_DisableIRQ(GPIOA_IRQn);
;;;521    	NVIC_DisableIRQ(GPIOM_IRQn);
;;;522    	MSPI_ITConfig(DISABLE);
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       MSPI_ITConfig
;;;523    	MSPI_Cmd(DISABLE);
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       MSPI_Cmd
;;;524    	PWMDRV_Cmd(DISABLE);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       PWMDRV_Cmd
;;;525    
;;;526    	PARAM_SetMode(PARAM_MODE_NONE);
000066  f04f30ff          MOV      r0,#0xffffffff
00006a  f7fffffe          BL       PARAM_SetMode
;;;527    }
00006e  b00c              ADD      sp,sp,#0x30
000070  bd10              POP      {r4,pc}
;;;528    
                          ENDP

000072  0000              DCW      0x0000
                  |L25.116|
                          DCD      ||.constdata||

                          AREA ||i.module_Switch_Freq||, CODE, READONLY, ALIGN=2

                  module_Switch_Freq PROC
;;;1062   #if USED_NOISE_HOPPING_FREQ
;;;1063   bool_t module_Switch_Freq(eSENSING_FREQ_t _Freq)
000000  4a11              LDR      r2,|L26.72|
;;;1064   {
000002  b510              PUSH     {r4,lr}
;;;1065   	bool_t retVal = FALSE;
;;;1066   	bool_t bFreqUse = thisCommonConf->bUseFreqHopp;
000004  6892              LDR      r2,[r2,#8]  ; thisCommonConf
000006  2100              MOVS     r1,#0                 ;1065
;;;1067   
;;;1068   	if(_Freq == _FREQ_UNKNOWN_ || !bFreqUse)
000008  2800              CMP      r0,#0
00000a  7e53              LDRB     r3,[r2,#0x19]         ;1066
00000c  bf18              IT       NE
00000e  2b00              CMPNE    r3,#0
000010  d011              BEQ      |L26.54|
000012  490d              LDR      r1,|L26.72|
;;;1069   	{
;;;1070   		retVal = FALSE;
;;;1071   	}
;;;1072   	else
;;;1073   	{
;;;1074   		if(_Freq == thisCommonConf->MainFreq)
000014  7e93              LDRB     r3,[r2,#0x1a]
;;;1075   		{
;;;1076   			ptAppInfo->eSelectFreq = FREQ_MAIN;
000016  68c9              LDR      r1,[r1,#0xc]
000018  4283              CMP      r3,r0                 ;1074
00001a  d103              BNE      |L26.36|
00001c  2001              MOVS     r0,#1
00001e  7488              STRB     r0,[r1,#0x12]
;;;1077   			HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_FRQ_MAIN_MODE);
000020  2003              MOVS     r0,#3
000022  e005              B        |L26.48|
                  |L26.36|
;;;1078   		}
;;;1079   		else if(_Freq == thisCommonConf->HoppFreq1)
000024  7ed3              LDRB     r3,[r2,#0x1b]
000026  4283              CMP      r3,r0
000028  d107              BNE      |L26.58|
;;;1080   		{
;;;1081   			ptAppInfo->eSelectFreq = FREQ_HOPP1;
00002a  2002              MOVS     r0,#2
00002c  7488              STRB     r0,[r1,#0x12]
;;;1082   			HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_FRQ_HOP1_MODE);
00002e  2004              MOVS     r0,#4
                  |L26.48|
000030  f7fffffe          BL       HAL_SetSensingChangeMode
                  |L26.52|
;;;1083   		}
;;;1084   		else if(_Freq == thisCommonConf->HoppFreq2)
;;;1085   		{
;;;1086   			ptAppInfo->eSelectFreq = FREQ_HOPP2;
;;;1087   		}
;;;1088   		else
;;;1089   		{
;;;1090   			ptAppInfo->eSelectFreq = FREQ_UNKNOWN;
;;;1091   		}
;;;1092   
;;;1093   		retVal = TRUE;
000034  2101              MOVS     r1,#1
                  |L26.54|
;;;1094   	}
;;;1095   
;;;1096   	return retVal;
000036  4608              MOV      r0,r1
;;;1097   }
000038  bd10              POP      {r4,pc}
                  |L26.58|
00003a  7f12              LDRB     r2,[r2,#0x1c]         ;1084
00003c  4282              CMP      r2,r0                 ;1084
00003e  bf0c              ITE      EQ                    ;1086
000040  2003              MOVEQ    r0,#3                 ;1086
000042  2000              MOVNE    r0,#0                 ;1090
000044  7488              STRB     r0,[r1,#0x12]         ;1086
000046  e7f5              B        |L26.52|
;;;1098   #endif /* USED_NOISE_HOPPING_FREQ */
                          ENDP

                  |L26.72|
                          DCD      ||.data||

                          AREA ||i.module_Watch_Disable||, CODE, READONLY, ALIGN=2

                  module_Watch_Disable PROC
;;;534    extern __IO bool_t wdt_init;
;;;535    void module_Watch_Disable(void)
000000  4803              LDR      r0,|L27.16|
;;;536    {
;;;537    	if(wdt_init)
000002  7800              LDRB     r0,[r0,#0]  ; wdt_init
000004  2800              CMP      r0,#0                 ;536
;;;538    	{
;;;539    		Hal_WDT_DeInit();
;;;540    	}
;;;541    }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  f7ffbffe          B.W      Hal_WDT_DeInit
;;;542    
                          ENDP

00000e  0000              DCW      0x0000
                  |L27.16|
                          DCD      wdt_init

                          AREA ||i.module_Watch_Enable||, CODE, READONLY, ALIGN=1

                  module_Watch_Enable PROC
;;;528    
;;;529    void module_Watch_Enable(void)
000000  f7ffbffe          B.W      Hal_WDT_Init
;;;530    {
;;;531    	Hal_WDT_Init();
;;;532    }
;;;533    
                          ENDP


                          AREA ||i.module_read_S3_sample_data||, CODE, READONLY, ALIGN=2

                  module_read_S3_sample_data PROC
;;;2983   #if USED_MNT_S3_MODE_FUNCTION
;;;2984   void module_read_S3_sample_data(void)
000000  b4f8              PUSH     {r3-r7}
;;;2985   {
;;;2986   	int c, r;
;;;2987   	int width = COL_MAX;
;;;2988   	int height = NI_ROW_MAX;
;;;2989   	volatile unsigned long uiBaseAddr = BASE_RAW_SRAM;
000002  4811              LDR      r0,|L29.72|
;;;2990   
;;;2991   	for (r = 0 ; r < height ; ++r)
;;;2992   	{
;;;2993   		for (c = 0 ; c < width ; ++c)
;;;2994   		{
;;;2995   			HAL_NI_WRITE_RAW_IMAGE(r, c, *((volatile unsigned short *)((thisFixedConf->ulFullSensing_Remap_Table[r][c] + uiBaseAddr))));
000004  9000              STR      r0,[sp,#0]
000006  4811              LDR      r0,|L29.76|
000008  4d11              LDR      r5,|L29.80|
00000a  2300              MOVS     r3,#0                 ;2991
00000c  6844              LDR      r4,[r0,#4]  ; thisFixedConf
                  |L29.14|
00000e  eb030283          ADD      r2,r3,r3,LSL #2
000012  2000              MOVS     r0,#0                 ;2993
000014  eb051142          ADD      r1,r5,r2,LSL #5
000018  eb041c42          ADD      r12,r4,r2,LSL #5
                  |L29.28|
00001c  eb0c0240          ADD      r2,r12,r0,LSL #1
000020  9f00              LDR      r7,[sp,#0]
000022  8816              LDRH     r6,[r2,#0]
000024  5bf6              LDRH     r6,[r6,r7]
000026  f8216010          STRH     r6,[r1,r0,LSL #1]
00002a  8852              LDRH     r2,[r2,#2]
00002c  9e00              LDR      r6,[sp,#0]
00002e  5b92              LDRH     r2,[r2,r6]
000030  eb010640          ADD      r6,r1,r0,LSL #1
000034  1c80              ADDS     r0,r0,#2
000036  8072              STRH     r2,[r6,#2]
000038  2850              CMP      r0,#0x50
00003a  dbef              BLT      |L29.28|
00003c  1c5b              ADDS     r3,r3,#1
00003e  2b0a              CMP      r3,#0xa
000040  dbe5              BLT      |L29.14|
;;;2996   		}
;;;2997   	}
;;;2998   }
000042  bcf8              POP      {r3-r7}
000044  4770              BX       lr
;;;2999   #endif /* USED_MNT_S3_MODE_FUNCTION */
                          ENDP

000046  0000              DCW      0x0000
                  |L29.72|
                          DCD      0x20040000
                  |L29.76|
                          DCD      ||.data||
                  |L29.80|
                          DCD      FullSharedBuff

                          AREA ||i.module_read_full_sample_data||, CODE, READONLY, ALIGN=2

                  module_read_full_sample_data PROC
;;;2949   #else /* (USED_ROIC_DEF == ROIC_SWL92406) */
;;;2950   void module_read_full_sample_data(void)
000000  b4f8              PUSH     {r3-r7}
;;;2951   {
;;;2952   	int c, r;
;;;2953   	int width = COL_MAX;
;;;2954   	int height = ROW_MAX;
;;;2955   	volatile unsigned long uiBaseAddr = BASE_RAW_SRAM;
000002  4811              LDR      r0,|L30.72|
;;;2956   
;;;2957   	for (r = 0 ; r < height ; ++r)
;;;2958   	{
;;;2959   		for (c = 0 ; c < width ; ++c)
;;;2960   		{
;;;2961   			HAL_WRITE_RAW_IMAGE(r, c, *((volatile unsigned short *)((thisFixedConf->ulFullSensing_Remap_Table[r][c] + uiBaseAddr))));
000004  9000              STR      r0,[sp,#0]
000006  4811              LDR      r0,|L30.76|
000008  4d11              LDR      r5,|L30.80|
00000a  2300              MOVS     r3,#0                 ;2957
00000c  6844              LDR      r4,[r0,#4]  ; thisFixedConf
                  |L30.14|
00000e  eb030283          ADD      r2,r3,r3,LSL #2
000012  2000              MOVS     r0,#0                 ;2959
000014  eb051142          ADD      r1,r5,r2,LSL #5
000018  eb041c42          ADD      r12,r4,r2,LSL #5
                  |L30.28|
00001c  eb0c0240          ADD      r2,r12,r0,LSL #1
000020  9f00              LDR      r7,[sp,#0]
000022  8816              LDRH     r6,[r2,#0]
000024  5bf6              LDRH     r6,[r6,r7]
000026  f8216010          STRH     r6,[r1,r0,LSL #1]
00002a  8852              LDRH     r2,[r2,#2]
00002c  9e00              LDR      r6,[sp,#0]
00002e  5b92              LDRH     r2,[r2,r6]
000030  eb010640          ADD      r6,r1,r0,LSL #1
000034  1c80              ADDS     r0,r0,#2
000036  8072              STRH     r2,[r6,#2]
000038  2850              CMP      r0,#0x50
00003a  dbef              BLT      |L30.28|
00003c  1c5b              ADDS     r3,r3,#1
00003e  2b2d              CMP      r3,#0x2d
000040  dbe5              BLT      |L30.14|
;;;2962   		}
;;;2963   	}
;;;2964   }
000042  bcf8              POP      {r3-r7}
000044  4770              BX       lr
;;;2965   
                          ENDP

000046  0000              DCW      0x0000
                  |L30.72|
                          DCD      0x20040000
                  |L30.76|
                          DCD      ||.data||
                  |L30.80|
                          DCD      FullSharedBuff

                          AREA ||i.module_start_delay||, CODE, READONLY, ALIGN=1

                  module_start_delay PROC
;;;998    
;;;999    void module_start_delay(void)
000000  b510              PUSH     {r4,lr}
;;;1000   {
;;;1001   #if USED_OPERATION_STAND_ALONE
;;;1002   	delay_msec(20);
;;;1003   #else /* USED_OPERATION_STAND_ALONE */
;;;1004   	GPIO_Init(_GPIO_VSYNC, GPIO_MODE_FUNC_3, GPIO_DIR_INPUT, GPIO_DATA_NONE);
000002  2302              MOVS     r3,#2
000004  2201              MOVS     r2,#1
000006  2103              MOVS     r1,#3
000008  202d              MOVS     r0,#0x2d
00000a  f7fffffe          BL       GPIO_Init
;;;1005   	int i=0;
00000e  2400              MOVS     r4,#0
                  |L31.16|
;;;1006   #if ((USED_MODULE_DEF == MODULE_DEF_INX_1) && \
;;;1007   	(CUSTOMER == MODEL_DEF_FHD_92505_MS_FINGER_VBS))
;;;1008   	for(i=0; i<200; i++)
;;;1009   #else
;;;1010   	for(i=0; i<10; i++)
;;;1011   #endif
;;;1012   	{
;;;1013   		waitVsyncFalling();
000010  202d              MOVS     r0,#0x2d
000012  f7fffffe          BL       GPIO_Get_IN
000016  2800              CMP      r0,#0
000018  d0fa              BEQ      |L31.16|
                  |L31.26|
00001a  202d              MOVS     r0,#0x2d
00001c  f7fffffe          BL       GPIO_Get_IN
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L31.26|
000024  1c64              ADDS     r4,r4,#1
000026  2c0a              CMP      r4,#0xa               ;1010
000028  dbf2              BLT      |L31.16|
;;;1014   	}
;;;1015   #endif /* USED_OPERATION_STAND_ALONE */
;;;1016   }
00002a  bd10              POP      {r4,pc}
;;;1017   
                          ENDP


                          AREA ||i.module_wait_S3_sample_done||, CODE, READONLY, ALIGN=2

                  module_wait_S3_sample_done PROC
;;;1363   #endif
;;;1364   bool_t module_wait_S3_sample_done(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1365   {
;;;1366   	bool_t sCheckVCC = YES;
;;;1367   	bool_t bLocalSample = YES;
000004  2501              MOVS     r5,#1
000006  4c25              LDR      r4,|L32.156|
000008  2600              MOVS     r6,#0
                  |L32.10|
;;;1368   //	bool_t bIsOneceWFIFlag = YES;
;;;1369   //	eSENSING_MODE_t eSensingMode;
;;;1370   //	eSensingMode = HAL_GetSensingMode();
;;;1371   
;;;1372   	while(YES)
;;;1373   	{
;;;1374   		if(sCheckVCC)
;;;1375   		{
;;;1376   			if(IS_GPIO_PIN(_GPIO_S3_POWER_IN) == 0x0)
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       GPIO_Get_IN
000010  2800              CMP      r0,#0
;;;1377   			{
;;;1378   				sCheckVCC = YES;
000012  bf0c              ITE      EQ
000014  2001              MOVEQ    r0,#1
;;;1379   			}
;;;1380   			else
;;;1381   			{
;;;1382   				sCheckVCC = NO;
000016  2000              MOVNE    r0,#0
000018  78e1              LDRB     r1,[r4,#3]
;;;1383   			}
;;;1384   		}
;;;1385   		else
;;;1386   		{
;;;1387   			bLocalSample = NO;
;;;1388   			break;
;;;1389   		}
;;;1390   
;;;1391   		if(hal_get_irq_flag(IRQ_ID_S3_SAMPLE))
00001a  2900              CMP      r1,#0
00001c  bf1c              ITT      NE
00001e  70e6              STRBNE   r6,[r4,#3]
;;;1392   		{
;;;1393   			hal_clear_irq_flag(IRQ_ID_S3_SAMPLE);
;;;1394   			if(sCheckVCC)
000020  2800              CMPNE    r0,#0
000022  d02c              BEQ      |L32.126|
000024  481e              LDR      r0,|L32.160|
000026  9000              STR      r0,[sp,#0]            ;1391
000028  481e              LDR      r0,|L32.164|
00002a  4e1f              LDR      r6,|L32.168|
00002c  f04f0c00          MOV      r12,#0                ;1391
000030  6840              LDR      r0,[r0,#4]            ;1391  ; thisFixedConf
000032  bf00              NOP                            ;1391
                  |L32.52|
000034  eb0c038c          ADD      r3,r12,r12,LSL #2     ;1391
000038  f04f0100          MOV      r1,#0                 ;1391
00003c  eb061243          ADD      r2,r6,r3,LSL #5       ;1391
000040  eb001443          ADD      r4,r0,r3,LSL #5       ;1391
                  |L32.68|
000044  eb040341          ADD      r3,r4,r1,LSL #1       ;1391
000048  f8dd8000          LDR      r8,[sp,#0]            ;1391
00004c  881f              LDRH     r7,[r3,#0]            ;1391
00004e  f8377008          LDRH     r7,[r7,r8]            ;1391
000052  f8227011          STRH     r7,[r2,r1,LSL #1]     ;1391
000056  885b              LDRH     r3,[r3,#2]            ;1391
000058  9f00              LDR      r7,[sp,#0]            ;1391
00005a  5bdb              LDRH     r3,[r3,r7]            ;1391
00005c  eb020741          ADD      r7,r2,r1,LSL #1       ;1391
000060  f1010102          ADD      r1,r1,#2              ;1391
000064  807b              STRH     r3,[r7,#2]            ;1391
000066  2950              CMP      r1,#0x50              ;1391
000068  dbec              BLT      |L32.68|
00006a  f10c0c01          ADD      r12,r12,#1            ;1391
00006e  f1bc0f0a          CMP      r12,#0xa              ;1391
000072  dbdf              BLT      |L32.52|
000074  e000              B        |L32.120|
                  |L32.118|
000076  2500              MOVS     r5,#0                 ;1387
                  |L32.120|
;;;1395   			{
;;;1396   	#if USED_S3_WAKEUP_DEBUGING
;;;1397   				if(ulTestS3RawDataRead == YES)
;;;1398   	#endif
;;;1399   				module_read_S3_sample_data();
;;;1400   				break;
;;;1401   			}
;;;1402   		}
;;;1403   
;;;1404   		if(hal_get_irq_flag(IRQ_ID_NI_SAMPLE))
;;;1405   		{
;;;1406   			hal_clear_irq_flag(IRQ_ID_NI_SAMPLE);
;;;1407   		}
;;;1408   
;;;1409   		if(hal_get_irq_flag(IRQ_ID_FULL_SAMPLE))
;;;1410   		{
;;;1411   			hal_clear_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;1412   		}
;;;1413   
;;;1414   		if(hal_get_irq_flag(IRQ_ID_LOCAL_SAMPLE))
;;;1415   		{
;;;1416   			hal_clear_irq_flag(IRQ_ID_LOCAL_SAMPLE);
;;;1417   		}
;;;1418   //		__WFI();
;;;1419   	}
;;;1420   
;;;1421   	return bLocalSample;
000078  4628              MOV      r0,r5
;;;1422   }
00007a  e8bd83f8          POP      {r3-r9,pc}
                  |L32.126|
00007e  78a1              LDRB     r1,[r4,#2]
000080  2900              CMP      r1,#0                 ;1404
000082  bf18              IT       NE                    ;1404
000084  70a6              STRBNE   r6,[r4,#2]            ;1404
000086  7861              LDRB     r1,[r4,#1]            ;1404
000088  2900              CMP      r1,#0                 ;1409
00008a  bf18              IT       NE                    ;1409
00008c  7066              STRBNE   r6,[r4,#1]            ;1409
00008e  7921              LDRB     r1,[r4,#4]            ;1409
000090  2900              CMP      r1,#0                 ;1414
000092  bf18              IT       NE                    ;1414
000094  7126              STRBNE   r6,[r4,#4]            ;1414
000096  2800              CMP      r0,#0                 ;1404
000098  d1b7              BNE      |L32.10|
00009a  e7ec              B        |L32.118|
;;;1423   #endif /* USED_MNT_S3_MODE_FUNCTION */
                          ENDP

                  |L32.156|
                          DCD      ||.bss||
                  |L32.160|
                          DCD      0x20040000
                  |L32.164|
                          DCD      ||.data||
                  |L32.168|
                          DCD      FullSharedBuff

                          AREA ||i.module_wait_Vsync_signal||, CODE, READONLY, ALIGN=2

                  module_wait_Vsync_signal PROC
;;;1017   
;;;1018   void module_wait_Vsync_signal(eSensingMode_t _mode, int _waitCnt)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1019   {
;;;1020       int gDiscardFrameCnt = 0;
000004  2700              MOVS     r7,#0
000006  4c3f              LDR      r4,|L33.260|
000008  4d3f              LDR      r5,|L33.264|
00000a  4689              MOV      r9,r1                 ;1019
00000c  4680              MOV      r8,r0                 ;1019
00000e  463e              MOV      r6,r7                 ;1019
                  |L33.16|
;;;1021       bool_t bIsWaitSkip = NO;
;;;1022   	while(1)
;;;1023   	{
;;;1024   		if(_mode == LOCAL_MODE)
000010  f1b80f01          CMP      r8,#1
000014  d03f              BEQ      |L33.150|
                  |L33.22|
000016  2008              MOVS     r0,#8
000018  f7fffffe          BL       GPIO_Get_IN
00001c  2801              CMP      r0,#1
00001e  bf18              IT       NE
000020  2000              MOVNE    r0,#0
000022  7869              LDRB     r1,[r5,#1]
000024  2900              CMP      r1,#0
000026  bf1c              ITT      NE
000028  706e              STRBNE   r6,[r5,#1]
00002a  2800              CMPNE    r0,#0
00002c  d059              BEQ      |L33.226|
00002e  4938              LDR      r1,|L33.272|
000030  4836              LDR      r0,|L33.268|
000032  9000              STR      r0,[sp,#0]
000034  f8d1b004          LDR      r11,[r1,#4]  ; thisFixedConf
000038  f04f0000          MOV      r0,#0
                  |L33.60|
00003c  eb000180          ADD      r1,r0,r0,LSL #2
000040  f04f0200          MOV      r2,#0
000044  eb041341          ADD      r3,r4,r1,LSL #5
000048  eb0b1c41          ADD      r12,r11,r1,LSL #5
                  |L33.76|
00004c  eb0c0142          ADD      r1,r12,r2,LSL #1
000050  f8dde000          LDR      lr,[sp,#0]
000054  f8b1a000          LDRH     r10,[r1,#0]
000058  f83aa00e          LDRH     r10,[r10,lr]
00005c  f823a012          STRH     r10,[r3,r2,LSL #1]
000060  8849              LDRH     r1,[r1,#2]
000062  f8dda000          LDR      r10,[sp,#0]
000066  f831100a          LDRH     r1,[r1,r10]
00006a  eb030a42          ADD      r10,r3,r2,LSL #1
00006e  f1020202          ADD      r2,r2,#2
000072  f8aa1002          STRH     r1,[r10,#2]
000076  2a50              CMP      r2,#0x50
000078  dbe8              BLT      |L33.76|
00007a  1c40              ADDS     r0,r0,#1
00007c  282d              CMP      r0,#0x2d
00007e  dbdd              BLT      |L33.60|
                  |L33.128|
;;;1025   		{
;;;1026   			ePartialSensing_t ePartialSensing;
;;;1027   			ePartialSensing = module_wait_local_sample_done();
;;;1028   			if(ePartialSensing == PARTIAL_MAX)
;;;1029   			{
;;;1030   				bIsWaitSkip = YES;
;;;1031   			}
;;;1032   		}
;;;1033   		else
;;;1034   		{
;;;1035   			if(!module_wait_full_sample_done())
;;;1036   			{
;;;1037   				bIsWaitSkip = YES;
;;;1038   			}
;;;1039   		}
;;;1040   
;;;1041   		if(bIsWaitSkip)
;;;1042   		{
;;;1043   			break;
;;;1044   		}
;;;1045   		else if(tHalIntrHandle.ulVSyncFlag)
000080  4824              LDR      r0,|L33.276|
000082  6981              LDR      r1,[r0,#0x18]  ; tHalIntrHandle
000084  2900              CMP      r1,#0
000086  d0c3              BEQ      |L33.16|
;;;1046   		{
;;;1047   			tHalIntrHandle.ulVSyncFlag = 0;
000088  6186              STR      r6,[r0,#0x18]  ; tHalIntrHandle
;;;1048   
;;;1049   			if(gDiscardFrameCnt == _waitCnt)
00008a  454f              CMP      r7,r9
00008c  bf18              IT       NE
00008e  1c7f              ADDNE    r7,r7,#1
000090  d1be              BNE      |L33.16|
;;;1050   			{
;;;1051   				gDiscardFrameCnt = 0;
;;;1052   				break;
;;;1053   			}
;;;1054   			else
;;;1055   			{
;;;1056   				gDiscardFrameCnt++;
;;;1057   			}
;;;1058   		}
;;;1059   	}
;;;1060   }
000092  e8bd8ff8          POP      {r3-r11,pc}
                  |L33.150|
000096  2035              MOVS     r0,#0x35
000098  f7fffffe          BL       GPIO_Get_IN
00009c  2801              CMP      r0,#1
00009e  bf18              IT       NE
0000a0  2000              MOVNE    r0,#0
0000a2  7929              LDRB     r1,[r5,#4]
0000a4  2900              CMP      r1,#0
0000a6  bf1c              ITT      NE
0000a8  712e              STRBNE   r6,[r5,#4]
0000aa  2800              CMPNE    r0,#0
0000ac  d00e              BEQ      |L33.204|
0000ae  4918              LDR      r1,|L33.272|
0000b0  7848              LDRB     r0,[r1,#1]  ; gLocalTypeFlag
0000b2  704e              STRB     r6,[r1,#1]
0000b4  2816              CMP      r0,#0x16              ;1028
0000b6  bf08              IT       EQ
0000b8  e8bd8ff8          POPEQ    {r3-r11,pc}
0000bc  e7e0              B        |L33.128|
0000be  bf00              NOP      
                  |L33.192|
0000c0  f7fffffe          BL       Hal_VccOff_State
0000c4  e8bd4ff8          POP      {r3-r11,lr}
0000c8  f7ffbffe          B.W      SensingBufferInit
                  |L33.204|
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  2900              CMP      r1,#0
0000d0  bf18              IT       NE
0000d2  706e              STRBNE   r6,[r5,#1]
0000d4  78a9              LDRB     r1,[r5,#2]
0000d6  2900              CMP      r1,#0
0000d8  bf18              IT       NE
0000da  70ae              STRBNE   r6,[r5,#2]
0000dc  2800              CMP      r0,#0
0000de  d1da              BNE      |L33.150|
0000e0  e7ee              B        |L33.192|
                  |L33.226|
0000e2  78a9              LDRB     r1,[r5,#2]
0000e4  2900              CMP      r1,#0
0000e6  bf18              IT       NE
0000e8  70ae              STRBNE   r6,[r5,#2]
0000ea  7929              LDRB     r1,[r5,#4]
0000ec  2900              CMP      r1,#0
0000ee  bf18              IT       NE
0000f0  712e              STRBNE   r6,[r5,#4]
0000f2  78e9              LDRB     r1,[r5,#3]
0000f4  2900              CMP      r1,#0
0000f6  bf18              IT       NE
0000f8  70ee              STRBNE   r6,[r5,#3]
0000fa  2800              CMP      r0,#0
0000fc  d18b              BNE      |L33.22|
0000fe  e8bd8ff8          POP      {r3-r11,pc}
;;;1061   
                          ENDP

000102  0000              DCW      0x0000
                  |L33.260|
                          DCD      FullSharedBuff
                  |L33.264|
                          DCD      ||.bss||
                  |L33.268|
                          DCD      0x20040000
                  |L33.272|
                          DCD      ||.data||
                  |L33.276|
                          DCD      tHalIntrHandle

                          AREA ||i.module_wait_full_sample_done||, CODE, READONLY, ALIGN=2

                  module_wait_full_sample_done PROC
;;;1099   
;;;1100   bool_t module_wait_full_sample_done(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1101   {
;;;1102   	bool_t sCheckVCC = YES;
;;;1103   #if USED_TP_RST_OPERATION
;;;1104   	bool_t bCheckTPRST = YES;
;;;1105   #endif /* USED_TP_RST_OPERATION */
;;;1106   	bool_t bLocalSample = YES;
000004  2501              MOVS     r5,#1
000006  4c24              LDR      r4,|L34.152|
000008  2600              MOVS     r6,#0
                  |L34.10|
;;;1107   //	bool_t bIsOneceWFIFlag = YES;
;;;1108   
;;;1109   	while(YES)
;;;1110   	{
;;;1111   #if USED_MNT_S3_MODE_FUNCTION
;;;1112   		if(sCheckVCC)
;;;1113   		{
;;;1114   			if(IS_GPIO_PIN(_GPIO_S3_POWER_IN) == 0x1)
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       GPIO_Get_IN
000010  2801              CMP      r0,#1
;;;1115   			{
;;;1116   				sCheckVCC = YES;
;;;1117   			}
;;;1118   			else
;;;1119   			{
;;;1120   				sCheckVCC = NO;
000012  bf18              IT       NE
000014  2000              MOVNE    r0,#0
000016  7861              LDRB     r1,[r4,#1]
;;;1121   			}
;;;1122   		}
;;;1123   		else
;;;1124   		{
;;;1125   //			Hal_VccOff_State();
;;;1126   //			SensingBufferInit();
;;;1127   			bLocalSample = NO;
;;;1128   			break;
;;;1129   		}
;;;1130   
;;;1131   		if(hal_get_irq_flag(IRQ_ID_FULL_SAMPLE))
000018  2900              CMP      r1,#0
00001a  bf1c              ITT      NE
00001c  7066              STRBNE   r6,[r4,#1]
;;;1132   		{
;;;1133   			hal_clear_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;1134   			if(sCheckVCC == YES)
00001e  2800              CMPNE    r0,#0
000020  d02b              BEQ      |L34.122|
000022  481e              LDR      r0,|L34.156|
000024  9000              STR      r0,[sp,#0]            ;1131
000026  481e              LDR      r0,|L34.160|
000028  4e1e              LDR      r6,|L34.164|
00002a  f04f0c00          MOV      r12,#0                ;1131
00002e  6840              LDR      r0,[r0,#4]            ;1131  ; thisFixedConf
                  |L34.48|
000030  eb0c038c          ADD      r3,r12,r12,LSL #2     ;1131
000034  f04f0100          MOV      r1,#0                 ;1131
000038  eb061243          ADD      r2,r6,r3,LSL #5       ;1131
00003c  eb001443          ADD      r4,r0,r3,LSL #5       ;1131
                  |L34.64|
000040  eb040341          ADD      r3,r4,r1,LSL #1       ;1131
000044  f8dd8000          LDR      r8,[sp,#0]            ;1131
000048  881f              LDRH     r7,[r3,#0]            ;1131
00004a  f8377008          LDRH     r7,[r7,r8]            ;1131
00004e  f8227011          STRH     r7,[r2,r1,LSL #1]     ;1131
000052  885b              LDRH     r3,[r3,#2]            ;1131
000054  9f00              LDR      r7,[sp,#0]            ;1131
000056  5bdb              LDRH     r3,[r3,r7]            ;1131
000058  eb020741          ADD      r7,r2,r1,LSL #1       ;1131
00005c  f1010102          ADD      r1,r1,#2              ;1131
000060  807b              STRH     r3,[r7,#2]            ;1131
000062  2950              CMP      r1,#0x50              ;1131
000064  dbec              BLT      |L34.64|
000066  f10c0c01          ADD      r12,r12,#1            ;1131
00006a  f1bc0f2d          CMP      r12,#0x2d             ;1131
00006e  dbdf              BLT      |L34.48|
000070  e000              B        |L34.116|
                  |L34.114|
000072  2500              MOVS     r5,#0                 ;1127
                  |L34.116|
;;;1135   			{
;;;1136   				module_read_full_sample_data();
;;;1137   				break;
;;;1138   			}
;;;1139   		}
;;;1140   
;;;1141   		if(hal_get_irq_flag(IRQ_ID_NI_SAMPLE))
;;;1142   		{
;;;1143   			hal_clear_irq_flag(IRQ_ID_NI_SAMPLE);
;;;1144   		}
;;;1145   
;;;1146   		if(hal_get_irq_flag(IRQ_ID_LOCAL_SAMPLE))
;;;1147   		{
;;;1148   			hal_clear_irq_flag(IRQ_ID_LOCAL_SAMPLE);
;;;1149   		}
;;;1150   
;;;1151   		if(hal_get_irq_flag(IRQ_ID_S3_SAMPLE))
;;;1152   		{
;;;1153   			hal_clear_irq_flag(IRQ_ID_S3_SAMPLE);
;;;1154   		}
;;;1155   #else /* USED_MNT_S3_MODE_FUNCTION */
;;;1156   
;;;1157   	#if USED_TP_RST_OPERATION
;;;1158   		if(sCheckVCC && bCheckTPRST)
;;;1159   		{
;;;1160   			if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x1)
;;;1161   			{
;;;1162   				sCheckVCC = YES;
;;;1163   			}
;;;1164   			else
;;;1165   			{
;;;1166   				sCheckVCC = NO;
;;;1167   			}
;;;1168   
;;;1169   			if(IS_GPIO_PIN(_GPIO_TP_RST) == 0x1)
;;;1170   			{
;;;1171   				bCheckTPRST = YES;
;;;1172   			}
;;;1173   			else
;;;1174   			{
;;;1175   				bCheckTPRST = NO;
;;;1176   			}
;;;1177   		}
;;;1178   		else
;;;1179   		{
;;;1180   			if(sCheckVCC == NO)
;;;1181   			{
;;;1182   				Hal_VccOff_State();
;;;1183   			}
;;;1184   			else if(bCheckTPRST == NO)
;;;1185   			{
;;;1186   				Hal_TPRSTOff_State();
;;;1187   			}
;;;1188   			SensingBufferInit();
;;;1189   			bLocalSample = NO;
;;;1190   			break;
;;;1191   		}
;;;1192   
;;;1193   		if(hal_get_irq_flag(IRQ_ID_FULL_SAMPLE))
;;;1194   		{
;;;1195   			hal_clear_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;1196   			if(sCheckVCC && bCheckTPRST)
;;;1197   			{
;;;1198   				module_read_full_sample_data();
;;;1199   				break;
;;;1200   			}
;;;1201   		}
;;;1202   	#else /* USED_TP_RST_OPERATION */
;;;1203   		if(sCheckVCC)
;;;1204   		{
;;;1205   			if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x1)
;;;1206   			{
;;;1207   				sCheckVCC = YES;
;;;1208   			}
;;;1209   			else
;;;1210   			{
;;;1211   				sCheckVCC = NO;
;;;1212   			}
;;;1213   		}
;;;1214   		else
;;;1215   		{
;;;1216   			Hal_VccOff_State();
;;;1217   			SensingBufferInit();
;;;1218   			bLocalSample = NO;
;;;1219   			break;
;;;1220   		}
;;;1221   
;;;1222   		if(hal_get_irq_flag(IRQ_ID_FULL_SAMPLE))
;;;1223   		{
;;;1224   			hal_clear_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;1225   			if(sCheckVCC)
;;;1226   			{
;;;1227   				module_read_full_sample_data();
;;;1228   				break;
;;;1229   			}
;;;1230   		}
;;;1231   
;;;1232   	#endif /* USED_TP_RST_OPERATION */
;;;1233   		if(hal_get_irq_flag(IRQ_ID_NI_SAMPLE))
;;;1234   		{
;;;1235   			hal_clear_irq_flag(IRQ_ID_NI_SAMPLE);
;;;1236   		}
;;;1237   
;;;1238   		if(hal_get_irq_flag(IRQ_ID_LOCAL_SAMPLE))
;;;1239   		{
;;;1240   			hal_clear_irq_flag(IRQ_ID_LOCAL_SAMPLE);
;;;1241   		}
;;;1242   #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;1243   
;;;1244   //		if(bIsOneceWFIFlag)
;;;1245   //		{
;;;1246   //			__WFI();
;;;1247   //		}
;;;1248   //		bIsOneceWFIFlag = NO;
;;;1249   	}
;;;1250   
;;;1251   	return bLocalSample;
000074  4628              MOV      r0,r5
;;;1252   }
000076  e8bd83f8          POP      {r3-r9,pc}
                  |L34.122|
00007a  78a1              LDRB     r1,[r4,#2]
00007c  2900              CMP      r1,#0                 ;1141
00007e  bf18              IT       NE                    ;1141
000080  70a6              STRBNE   r6,[r4,#2]            ;1141
000082  7921              LDRB     r1,[r4,#4]            ;1141
000084  2900              CMP      r1,#0                 ;1146
000086  bf18              IT       NE                    ;1146
000088  7126              STRBNE   r6,[r4,#4]            ;1146
00008a  78e1              LDRB     r1,[r4,#3]            ;1146
00008c  2900              CMP      r1,#0                 ;1151
00008e  bf18              IT       NE                    ;1151
000090  70e6              STRBNE   r6,[r4,#3]            ;1151
000092  2800              CMP      r0,#0                 ;1141
000094  d1b9              BNE      |L34.10|
000096  e7ec              B        |L34.114|
;;;1253   
                          ENDP

                  |L34.152|
                          DCD      ||.bss||
                  |L34.156|
                          DCD      0x20040000
                  |L34.160|
                          DCD      ||.data||
                  |L34.164|
                          DCD      FullSharedBuff

                          AREA ||i.module_wait_local_sample_done||, CODE, READONLY, ALIGN=2

                  module_wait_local_sample_done PROC
;;;1424   
;;;1425   ePartialSensing_t module_wait_local_sample_done(void)
000000  b570              PUSH     {r4-r6,lr}
000002  4c12              LDR      r4,|L35.76|
;;;1426   {
000004  2500              MOVS     r5,#0
                  |L35.6|
;;;1427   	bool_t sCheckVCC = YES;
;;;1428   #if USED_TP_RST_OPERATION
;;;1429   	bool_t bCheckTPRST = YES;
;;;1430   #endif /* USED_TP_RST_OPERATION */
;;;1431   	ePartialSensing_t RetVal = PARTIAL_PEN_BEACON;
;;;1432   //	bool_t bIsOneceWFIFlag = YES;
;;;1433   
;;;1434   	while(YES)
;;;1435   	{
;;;1436   #if USED_TP_RST_OPERATION
;;;1437   		if(sCheckVCC && bCheckTPRST)
;;;1438   		{
;;;1439   			if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x1)
;;;1440   			{
;;;1441   				sCheckVCC = YES;
;;;1442   			}
;;;1443   			else
;;;1444   			{
;;;1445   				sCheckVCC = NO;
;;;1446   			}
;;;1447   
;;;1448   			if(IS_GPIO_PIN(_GPIO_TP_RST) == 0x1)
;;;1449   			{
;;;1450   				bCheckTPRST = YES;
;;;1451   			}
;;;1452   			else
;;;1453   			{
;;;1454   				bCheckTPRST = NO;
;;;1455   			}
;;;1456   		}
;;;1457   		else
;;;1458   		{
;;;1459   			if(sCheckVCC == NO)
;;;1460   			{
;;;1461   				Hal_VccOff_State();
;;;1462   			}
;;;1463   			else if(bCheckTPRST == NO)
;;;1464   			{
;;;1465   				Hal_TPRSTOff_State();
;;;1466   			}
;;;1467   			SensingBufferInit();
;;;1468   			RetVal = PARTIAL_MAX;
;;;1469   			break;
;;;1470   		}
;;;1471   
;;;1472   		if(hal_get_irq_flag(IRQ_ID_LOCAL_SAMPLE))
;;;1473   		{
;;;1474   			hal_clear_irq_flag(IRQ_ID_LOCAL_SAMPLE);
;;;1475   			if(sCheckVCC && bCheckTPRST)
;;;1476   			{
;;;1477   				RetVal = hal_get_LocalType_flag();
;;;1478   				hal_clear_LocalType_flag();
;;;1479   				break;
;;;1480   			}
;;;1481   		}
;;;1482   #else /* USED_TP_RST_OPERATION */
;;;1483   		if(sCheckVCC)
;;;1484   		{
;;;1485   			if(IS_GPIO_PIN(_GPIO_LCD_ON) == 0x1)
000006  2035              MOVS     r0,#0x35
000008  f7fffffe          BL       GPIO_Get_IN
00000c  2801              CMP      r0,#1
;;;1486   			{
;;;1487   				sCheckVCC = YES;
;;;1488   			}
;;;1489   			else
;;;1490   			{
;;;1491   				sCheckVCC = NO;
00000e  bf18              IT       NE
000010  2000              MOVNE    r0,#0
000012  7921              LDRB     r1,[r4,#4]
;;;1492   			}
;;;1493   		}
;;;1494   		else
;;;1495   		{
;;;1496   			Hal_VccOff_State();
;;;1497   			SensingBufferInit();
;;;1498   			RetVal = PARTIAL_MAX;
;;;1499   			break;
;;;1500   		}
;;;1501   
;;;1502   		if(hal_get_irq_flag(IRQ_ID_LOCAL_SAMPLE))
000014  2900              CMP      r1,#0
000016  bf1c              ITT      NE
000018  7125              STRBNE   r5,[r4,#4]
;;;1503   		{
;;;1504   			hal_clear_irq_flag(IRQ_ID_LOCAL_SAMPLE);
;;;1505   			if(sCheckVCC)
00001a  2800              CMPNE    r0,#0
00001c  d00a              BEQ      |L35.52|
00001e  490c              LDR      r1,|L35.80|
000020  7848              LDRB     r0,[r1,#1]            ;1502  ; gLocalTypeFlag
000022  704d              STRB     r5,[r1,#1]            ;1502
;;;1506   			{
;;;1507   				RetVal = hal_get_LocalType_flag();
;;;1508   				hal_clear_LocalType_flag();
;;;1509   				break;
;;;1510   			}
;;;1511   		}
;;;1512   #endif /* USED_TP_RST_OPERATION */
;;;1513   
;;;1514   		if(hal_get_irq_flag(IRQ_ID_FULL_SAMPLE))
;;;1515   		{
;;;1516   			hal_clear_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;1517   		}
;;;1518   
;;;1519   		if(hal_get_irq_flag(IRQ_ID_NI_SAMPLE))
;;;1520   		{
;;;1521   			hal_clear_irq_flag(IRQ_ID_NI_SAMPLE);
;;;1522   		}
;;;1523   //		if(bIsOneceWFIFlag)
;;;1524   //		{
;;;1525   //			__WFI();
;;;1526   //		}
;;;1527   //		bIsOneceWFIFlag = NO;
;;;1528   	}
;;;1529   
;;;1530   	return RetVal;
;;;1531   }
000024  bd70              POP      {r4-r6,pc}
000026  bf00              NOP                            ;1496
                  |L35.40|
000028  f7fffffe          BL       Hal_VccOff_State
00002c  f7fffffe          BL       SensingBufferInit
000030  2016              MOVS     r0,#0x16              ;1498
000032  bd70              POP      {r4-r6,pc}
                  |L35.52|
000034  7861              LDRB     r1,[r4,#1]
000036  2900              CMP      r1,#0                 ;1514
000038  bf18              IT       NE                    ;1514
00003a  7065              STRBNE   r5,[r4,#1]            ;1514
00003c  78a1              LDRB     r1,[r4,#2]            ;1514
00003e  2900              CMP      r1,#0                 ;1519
000040  bf18              IT       NE                    ;1519
000042  70a5              STRBNE   r5,[r4,#2]            ;1519
000044  2800              CMP      r0,#0                 ;1514
000046  d1de              BNE      |L35.6|
000048  e7ee              B        |L35.40|
;;;1532   
                          ENDP

00004a  0000              DCW      0x0000
                  |L35.76|
                          DCD      ||.bss||
                  |L35.80|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  gbIrqFlag
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0a000000          DCB      0x0a,0x00,0x00,0x00
                          DCD      0x00000003
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  0b000000          DCB      0x0b,0x00,0x00,0x00
                          DCD      0x00000003
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  0c000000          DCB      0x0c,0x00,0x00,0x00
                          DCD      0x00000003
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  0d000000          DCB      0x0d,0x00,0x00,0x00
                          DCD      0x00000003
00002c  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  gucOverlapFPend
000000  00                DCB      0x00
                  gLocalTypeFlag
000001  000000            DCB      0x00,0x00,0x00
                  thisFixedConf
                          DCD      0x00000000
                  thisCommonConf
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  _GPIO
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Module\\module.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_module_c_d5c75903____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___8_module_c_d5c75903____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_module_c_d5c75903____REVSH|
#line 402
|__asm___8_module_c_d5c75903____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_module_c_d5c75903____RRX|
#line 587
|__asm___8_module_c_d5c75903____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
