; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_label.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_label.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm_label.crf ..\..\App\Algorithm\Label\algorithm_label.c]
                          THUMB

                          AREA ||i.algorithm_label_Add_NewNode_to_LabelRecord||, CODE, READONLY, ALIGN=2

                  algorithm_label_Add_NewNode_to_LabelRecord PROC
;;;173    
;;;174    void algorithm_label_Add_NewNode_to_LabelRecord(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bBoundary, bool_t _bAdd2List, int mode)
000000  f8dfc094          LDR      r12,|L1.152|
;;;175    {
000004  b410              PUSH     {r4}
;;;176    	tLabelInfo_t	*temp_label;
;;;177    
;;;178    	temp_label = &thisInfo->tLabel;
000006  f8dcc008          LDR      r12,[r12,#8]  ; thisInfo
;;;179    
;;;180    	if(_d < 0) _d = 0;
00000a  2a00              CMP      r2,#0
00000c  f10c0c39          ADD      r12,r12,#0x39         ;178
000010  bfb8              IT       LT
000012  2200              MOVLT    r2,#0
;;;181    	
;;;182    	temp_label->tTable[_idx].tCoord.x      += _tCell.c * _d;
000014  ebc004c0          RSB      r4,r0,r0,LSL #3
000018  eb041040          ADD      r0,r4,r0,LSL #5
00001c  4460              ADD      r0,r0,r12
00001e  fa4ffc81          SXTB     r12,r1
000022  68c4              LDR      r4,[r0,#0xc]
;;;183    	temp_label->tTable[_idx].tCoord.y      += _tCell.r * _d;
000024  f3412107          SBFX     r1,r1,#8,#8
000028  fb0c4402          MLA      r4,r12,r2,r4          ;182
00002c  60c4              STR      r4,[r0,#0xc]          ;182
00002e  6904              LDR      r4,[r0,#0x10]
000030  2b00              CMP      r3,#0                 ;175
000032  fb014402          MLA      r4,r1,r2,r4
000036  6104              STR      r4,[r0,#0x10]
;;;184    	temp_label->tTable[_idx].ulExtStrength += _d;
000038  6984              LDR      r4,[r0,#0x18]
00003a  4414              ADD      r4,r4,r2
00003c  6184              STR      r4,[r0,#0x18]
;;;185    	if( _bBoundary == NO )
;;;186    	{
;;;187    		temp_label->tTable[_idx].ulStrength    += _d;
;;;188    		temp_label->tTable[_idx].usCellNum++;
;;;189    
;;;190    		if( temp_label->tTable[_idx].sMaxCellVal < _d )
;;;191    		{
;;;192    			temp_label->tTable[_idx].sMaxCellVal = _d;
;;;193    			temp_label->tTable[_idx].tMaxCell.r = _tCell.r;
;;;194    			temp_label->tTable[_idx].tMaxCell.c = _tCell.c;
;;;195    		}
;;;196    
;;;197    		if( temp_label->tTable[_idx].tRect.rs > _tCell.r )
;;;198    			temp_label->tTable[_idx].tRect.rs = _tCell.r;
;;;199    		if( temp_label->tTable[_idx].tRect.re < _tCell.r )
;;;200    			temp_label->tTable[_idx].tRect.re = _tCell.r;
;;;201    		if( temp_label->tTable[_idx].tRect.cs > _tCell.c )
;;;202    			temp_label->tTable[_idx].tRect.cs = _tCell.c;
;;;203    		if( temp_label->tTable[_idx].tRect.ce < _tCell.c )
;;;204    			temp_label->tTable[_idx].tRect.ce = _tCell.c;
;;;205    	}
;;;206    
;;;207    	// add ptr of Node into Tail of Linked-List
;;;208    //	if( _bAdd2List )
;;;209    //	{
;;;210    //		*temp_label->tTable[_idx].ptListTail = (uint32_t)GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;211    //		temp_label->tTable[_idx].ptListTail = (uint32_t *)*temp_label->tTable[_idx].ptListTail;
;;;212    //	}
;;;213    }
00003e  bf1c              ITT      NE
000040  bc10              POPNE    {r4}
000042  4770              BXNE     lr
000044  6943              LDR      r3,[r0,#0x14]         ;187
000046  4413              ADD      r3,r3,r2              ;187
000048  6143              STR      r3,[r0,#0x14]         ;187
00004a  88c3              LDRH     r3,[r0,#6]            ;188
00004c  1c5b              ADDS     r3,r3,#1              ;188
00004e  80c3              STRH     r3,[r0,#6]            ;188
000050  f9b03008          LDRSH    r3,[r0,#8]            ;190
000054  4293              CMP      r3,r2                 ;190
000056  da03              BGE      |L1.96|
000058  8102              STRH     r2,[r0,#8]            ;192
00005a  72c1              STRB     r1,[r0,#0xb]          ;193
00005c  f880c00a          STRB     r12,[r0,#0xa]         ;194
                  |L1.96|
000060  f9902002          LDRSB    r2,[r0,#2]            ;198
000064  428a              CMP      r2,r1                 ;198
000066  bfc8              IT       GT                    ;198
000068  460a              MOVGT    r2,r1                 ;198
00006a  7082              STRB     r2,[r0,#2]            ;198
00006c  f9902003          LDRSB    r2,[r0,#3]            ;200
000070  428a              CMP      r2,r1                 ;200
000072  bfc8              IT       GT                    ;200
000074  4611              MOVGT    r1,r2                 ;200
000076  70c1              STRB     r1,[r0,#3]            ;200
000078  f9901004          LDRSB    r1,[r0,#4]            ;202
00007c  4561              CMP      r1,r12                ;202
00007e  bfc8              IT       GT                    ;202
000080  4661              MOVGT    r1,r12                ;202
000082  7101              STRB     r1,[r0,#4]            ;202
000084  f9901005          LDRSB    r1,[r0,#5]            ;204
000088  4561              CMP      r1,r12                ;204
00008a  bfc8              IT       GT                    ;204
00008c  468c              MOVGT    r12,r1                ;204
00008e  f880c005          STRB     r12,[r0,#5]           ;204
000092  bc10              POP      {r4}
000094  4770              BX       lr
;;;214    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_GetConflictInfo||, CODE, READONLY, ALIGN=2

                  algorithm_label_GetConflictInfo PROC
;;;214    
;;;215    void algorithm_label_GetConflictInfo(bool_t _bModify, uint8_t _Direction, uint8_t _search_idx, tCell_t _tPos, tConflictInfo_t * _ptConflict, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;216    {
000004  b082              SUB      sp,sp,#8
;;;217    	int i, r_i, c_i;
;;;218    	uint8_t neighbor_label_id;
;;;219    
;;;220    	if( _search_idx == 0 )
;;;221    	{
;;;222    		_ptConflict->ulValue = 0x00000000;
;;;223    	}
;;;224    	else if( _search_idx > 0 )
;;;225    	{
;;;226    		_ptConflict->tInfo.NUM = 1;
000006  2501              MOVS     r5,#1
000008  e9dd480f          LDRD     r4,r8,[sp,#0x3c]      ;216
00000c  461f              MOV      r7,r3                 ;216
00000e  2a00              CMP      r2,#0                 ;220
000010  bf06              ITTE     EQ                    ;222
000012  2000              MOVEQ    r0,#0                 ;222
000014  6020              STREQ    r0,[r4,#0]            ;222
000016  70a5              STRBNE   r5,[r4,#2]
;;;227    	}
;;;228    
;;;229        if( _Direction == BOUNDARY_4_SEARCH_DIRECTION )
;;;230        {
;;;231        	for( i=0; i<BOUNDARY_4_SEARCH_TABLE[_search_idx].Num; i++ )
;;;232    		{
;;;233    #if (PAD_ == 0)
;;;234    			if((_tPos.r == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;235    				r_i = _tPos.r;
;;;236    			else
;;;237    				r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;238    
;;;239    			if((_tPos.c == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;240    				c_i = _tPos.c;
;;;241    			else
;;;242    				c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;243    #else 
;;;244    			r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;245    			c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;246    #endif
;;;247    
;;;248    			neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
000018  f8dfb188          LDR      r11,|L2.420|
00001c  f3472607          SBFX     r6,r7,#8,#8
000020  fa4ffc87          SXTB     r12,r7
000024  2904              CMP      r1,#4                 ;229
000026  d002              BEQ      |L2.46|
;;;249    
;;;250    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;251    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
;;;252    			{
;;;253    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
;;;254    				{
;;;255    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
;;;256    					_ptConflict->tInfo.NUM++;
;;;257    				}
;;;258    			}
;;;259    		}
;;;260        }
;;;261        else if( _Direction == BOUNDARY_8_SEARCH_DIRECTION )
000028  2908              CMP      r1,#8
00002a  d038              BEQ      |L2.158|
00002c  e06e              B        |L2.268|
                  |L2.46|
00002e  495e              LDR      r1,|L2.424|
000030  eb0202c2          ADD      r2,r2,r2,LSL #3       ;231
000034  2000              MOVS     r0,#0                 ;231
000036  5c8b              LDRB     r3,[r1,r2]            ;231
000038  2b00              CMP      r3,#0                 ;231
00003a  bfc8              IT       GT                    ;244
00003c  1853              ADDGT    r3,r2,r1              ;244
00003e  dd65              BLE      |L2.268|
                  |L2.64|
000040  eb030a40          ADD      r10,r3,r0,LSL #1      ;244
000044  f99a9002          LDRSB    r9,[r10,#2]           ;244
000048  f99aa001          LDRSB    r10,[r10,#1]          ;245
00004c  44b1              ADD      r9,r9,r6              ;244
00004e  eb090ec9          ADD      lr,r9,r9,LSL #3       ;248
000052  eb0e1949          ADD      r9,lr,r9,LSL #5       ;248
000056  44e2              ADD      r10,r10,r12           ;245
000058  eb0b0949          ADD      r9,r11,r9,LSL #1      ;248
00005c  44d1              ADD      r9,r9,r10             ;248
00005e  f5094960          ADD      r9,r9,#0xe000         ;248
000062  f8999747          LDRB     r9,[r9,#0x747]        ;248
000066  f1a90901          SUB      r9,r9,#1              ;248
00006a  f1b90f0f          CMP      r9,#0xf               ;251
00006e  d810              BHI      |L2.146|
000070  f8b4a000          LDRH     r10,[r4,#0]           ;253
000074  fa05f909          LSL      r9,r5,r9              ;253
000078  ea1a0f09          TST      r10,r9                ;253
00007c  d109              BNE      |L2.146|
00007e  ea4a0909          ORR      r9,r10,r9             ;255
000082  f8a49000          STRH     r9,[r4,#0]            ;255
000086  f8949002          LDRB     r9,[r4,#2]            ;256
00008a  f1090901          ADD      r9,r9,#1              ;256
00008e  f8849002          STRB     r9,[r4,#2]            ;256
                  |L2.146|
000092  f8119002          LDRB     r9,[r1,r2]            ;231
000096  1c40              ADDS     r0,r0,#1              ;231
000098  4581              CMP      r9,r0                 ;231
00009a  dcd1              BGT      |L2.64|
00009c  e036              B        |L2.268|
                  |L2.158|
;;;262        {
;;;263    		for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
00009e  4943              LDR      r1,|L2.428|
0000a0  eb021202          ADD      r2,r2,r2,LSL #4
0000a4  2000              MOVS     r0,#0
0000a6  5c8b              LDRB     r3,[r1,r2]
0000a8  2b00              CMP      r3,#0
;;;264    		{
;;;265    #if (PAD_ == 0)
;;;266    			if((_tPos.r == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;267    				r_i = _tPos.r;
;;;268    			else
;;;269    				r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;270    
;;;271    			if((_tPos.c == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;272    				c_i = _tPos.c;
;;;273    			else
;;;274    				c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;275    #else 
;;;276    			r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
0000aa  bfc8              IT       GT
0000ac  1853              ADDGT    r3,r2,r1
0000ae  dd2d              BLE      |L2.268|
                  |L2.176|
0000b0  eb030a40          ADD      r10,r3,r0,LSL #1
0000b4  f99a9002          LDRSB    r9,[r10,#2]
;;;277    			c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
0000b8  f99aa001          LDRSB    r10,[r10,#1]
0000bc  44b1              ADD      r9,r9,r6              ;276
;;;278    #endif
;;;279    
;;;280    			neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
0000be  eb090ec9          ADD      lr,r9,r9,LSL #3
0000c2  eb0e1949          ADD      r9,lr,r9,LSL #5
0000c6  44e2              ADD      r10,r10,r12           ;277
0000c8  eb0b0949          ADD      r9,r11,r9,LSL #1
0000cc  44d1              ADD      r9,r9,r10
0000ce  f5094960          ADD      r9,r9,#0xe000
0000d2  f8999747          LDRB     r9,[r9,#0x747]
0000d6  f1a90901          SUB      r9,r9,#1
;;;281    
;;;282    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;283    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
0000da  f1b90f0f          CMP      r9,#0xf
0000de  d810              BHI      |L2.258|
;;;284    			{
;;;285    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
0000e0  f8b4a000          LDRH     r10,[r4,#0]
0000e4  fa05f909          LSL      r9,r5,r9
0000e8  ea1a0f09          TST      r10,r9
0000ec  d109              BNE      |L2.258|
;;;286    				{
;;;287    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
0000ee  ea4a0909          ORR      r9,r10,r9
0000f2  f8a49000          STRH     r9,[r4,#0]
;;;288    					_ptConflict->tInfo.NUM++;
0000f6  f8949002          LDRB     r9,[r4,#2]
0000fa  f1090901          ADD      r9,r9,#1
0000fe  f8849002          STRB     r9,[r4,#2]
                  |L2.258|
000102  f8119002          LDRB     r9,[r1,r2]            ;263
000106  1c40              ADDS     r0,r0,#1              ;263
000108  4581              CMP      r9,r0                 ;263
00010a  dcd1              BGT      |L2.176|
                  |L2.268|
;;;289    				}
;;;290    			}
;;;291    		}
;;;292        }
;;;293    
;;;294    	if( _bModify == YES )
00010c  9802              LDR      r0,[sp,#8]
00010e  2801              CMP      r0,#1
;;;295    	{
;;;296    		if( _ptConflict->tInfo.NUM == 0 )
;;;297    		{
;;;298    
;;;299    
;;;300    		}
;;;301    		else if( _ptConflict->tInfo.NUM == 1 )
;;;302    		{
;;;303    			for( i=0; i<LOOSE_POSBUF_; i++ )
;;;304    			{
;;;305    				if( (_ptConflict->tInfo.BF & _BV(i)) )
;;;306    				{
;;;307    //					if(mode == LOCAL_FINGER_MODE)
;;;308    //					{
;;;309    //						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;310    //						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;311    //					}
;;;312    //					else
;;;313    					{
;;;314    						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;315    						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;316    					}
;;;317    				}
;;;318    			}
;;;319    		}
;;;320    		else if( _ptConflict->tInfo.NUM > 1 )
;;;321    		{
;;;322    			HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, LABEL_CONFLICT_MARKER);
;;;323    		}
;;;324    	}
;;;325    }
000110  bf1c              ITT      NE
000112  b006              ADDNE    sp,sp,#0x18
000114  e8bd8ff0          POPNE    {r4-r11,pc}
000118  78a1              LDRB     r1,[r4,#2]            ;296
00011a  2900              CMP      r1,#0                 ;296
00011c  bf04              ITT      EQ
00011e  b006              ADDEQ    sp,sp,#0x18
000120  e8bd8ff0          POPEQ    {r4-r11,pc}
000124  481f              LDR      r0,|L2.420|
000126  b27a              SXTB     r2,r7                 ;248
000128  eb020a00          ADD      r10,r2,r0             ;315
00012c  f3472007          SBFX     r0,r7,#8,#8           ;315
000130  eb0003c0          ADD      r3,r0,r0,LSL #3       ;314
000134  f24e7247          MOV      r2,#0xe747            ;315
000138  eb031040          ADD      r0,r3,r0,LSL #5       ;314
00013c  eb020940          ADD      r9,r2,r0,LSL #1       ;315
000140  2901              CMP      r1,#1                 ;301
000142  bf84              ITT      HI                    ;322
000144  203f              MOVHI    r0,#0x3f              ;322
000146  f80a0009          STRBHI   r0,[r10,r9]           ;322
00014a  bf1c              ITT      NE
00014c  b006              ADDNE    sp,sp,#0x18
00014e  e8bd8ff0          POPNE    {r4-r11,pc}
000152  f04f0600          MOV      r6,#0                 ;303
000156  eb0b0080          ADD      r0,r11,r0,LSL #2      ;314
00015a  eb00004c          ADD      r0,r0,r12,LSL #1      ;314
00015e  f5004b40          ADD      r11,r0,#0xc000        ;314
                  |L2.354|
000162  8820              LDRH     r0,[r4,#0]            ;305
000164  fa05f106          LSL      r1,r5,r6              ;305
000168  4208              TST      r0,r1                 ;305
00016a  d014              BEQ      |L2.406|
00016c  e9cd5800          STRD     r5,r8,[sp,#0]         ;305
000170  f9bb297e          LDRSH    r2,[r11,#0x97e]       ;314
000174  b2f0              UXTB     r0,r6                 ;314
000176  f04f0300          MOV      r3,#0                 ;314
00017a  4639              MOV      r1,r7                 ;314
00017c  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000180  ebc600c6          RSB      r0,r6,r6,LSL #3       ;315
000184  eb001146          ADD      r1,r0,r6,LSL #5       ;315
000188  4809              LDR      r0,|L2.432|
00018a  6880              LDR      r0,[r0,#8]            ;315  ; thisInfo
00018c  4408              ADD      r0,r0,r1              ;315
00018e  f890003a          LDRB     r0,[r0,#0x3a]         ;315
000192  f80a0009          STRB     r0,[r10,r9]           ;315
                  |L2.406|
000196  1c76              ADDS     r6,r6,#1              ;315
000198  2e10              CMP      r6,#0x10              ;303
00019a  dbe2              BLT      |L2.354|
00019c  b006              ADD      sp,sp,#0x18
00019e  e8bd8ff0          POP      {r4-r11,pc}
;;;326    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L2.420|
                          DCD      FullSharedBuff
                  |L2.424|
                          DCD      ||.data||+0x24
                  |L2.428|
                          DCD      ||.data||+0x51
                  |L2.432|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_Insert_NewRecord_to_LabelTable||, CODE, READONLY, ALIGN=2

                  algorithm_label_Insert_NewRecord_to_LabelTable PROC
;;;140    
;;;141    void algorithm_label_Insert_NewRecord_to_LabelTable(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bAdd2List, int mode)
000000  b41f              PUSH     {r0-r4}
;;;142    {
;;;143    	tLabelInfo_t	*temp_label;
;;;144    	
;;;145    	temp_label = &thisInfo->tLabel;
000002  491c              LDR      r1,|L3.116|
000004  6889              LDR      r1,[r1,#8]  ; thisInfo
000006  3139              ADDS     r1,r1,#0x39
;;;146    
;;;147    	if( _idx < LOOSE_POSBUF_ )
000008  2810              CMP      r0,#0x10
;;;148    	{
;;;149    		temp_label->tTable[_idx].cId          = _idx + 1;
;;;150    		temp_label->tTable[_idx].sMaxCellVal  = _d;
;;;151    		temp_label->tTable[_idx].tMaxCell     = _tCell;
;;;152    		temp_label->tTable[_idx].tRect.rs     = _tCell.r;
;;;153    		temp_label->tTable[_idx].tRect.re     = _tCell.r;
;;;154    		temp_label->tTable[_idx].tRect.cs     = _tCell.c;
;;;155    		temp_label->tTable[_idx].tRect.ce     = _tCell.c;
;;;156    		temp_label->tTable[_idx].tCoord.x     = _tCell.c * _d;
;;;157    		temp_label->tTable[_idx].tCoord.y     = _tCell.r * _d;
;;;158    		temp_label->tTable[_idx].ulStrength   = _d;
;;;159    		temp_label->tTable[_idx].ulExtStrength= _d;
;;;160    		temp_label->tTable[_idx].usCellNum    = 1;
;;;161    
;;;162    //		if( _bAdd2List )
;;;163    //		{
;;;164    //			temp_label->tTable[_idx].ptListHead = GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;165    //			temp_label->tTable[_idx].ptListTail = temp_label->tTable[_idx].ptListHead;
;;;166    //		}
;;;167    
;;;168    		HAL_WRITE_LABEL_IMAGE(_tCell.r, _tCell.c, temp_label->tTable[_idx].cId);
;;;169    
;;;170    		temp_label->ucNum++;
;;;171    	}
;;;172    }
00000a  bf22              ITTT     CS
00000c  b004              ADDCS    sp,sp,#0x10
00000e  bc10              POPCS    {r4}
000010  4770              BXCS     lr
000012  1c43              ADDS     r3,r0,#1              ;149
000014  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;149
000018  eb0c1040          ADD      r0,r12,r0,LSL #5      ;149
00001c  4408              ADD      r0,r0,r1              ;149
00001e  7043              STRB     r3,[r0,#1]            ;149
000020  8102              STRH     r2,[r0,#8]            ;150
000022  f8bd3004          LDRH     r3,[sp,#4]            ;151
000026  8143              STRH     r3,[r0,#0xa]          ;151
000028  f99dc005          LDRSB    r12,[sp,#5]           ;152
00002c  f880c002          STRB     r12,[r0,#2]           ;152
000030  f880c003          STRB     r12,[r0,#3]           ;153
000034  f99d3004          LDRSB    r3,[sp,#4]            ;154
000038  7103              STRB     r3,[r0,#4]            ;154
00003a  7143              STRB     r3,[r0,#5]            ;155
00003c  fb03f402          MUL      r4,r3,r2              ;156
000040  60c4              STR      r4,[r0,#0xc]          ;156
000042  fb0cf402          MUL      r4,r12,r2             ;157
000046  6104              STR      r4,[r0,#0x10]         ;157
000048  6142              STR      r2,[r0,#0x14]         ;158
00004a  6182              STR      r2,[r0,#0x18]         ;159
00004c  2201              MOVS     r2,#1                 ;160
00004e  80c2              STRH     r2,[r0,#6]            ;160
000050  4a09              LDR      r2,|L3.120|
000052  7840              LDRB     r0,[r0,#1]            ;168
000054  441a              ADD      r2,r2,r3              ;168
000056  eb0c03cc          ADD      r3,r12,r12,LSL #3     ;168
00005a  eb03134c          ADD      r3,r3,r12,LSL #5      ;168
00005e  f24e7c47          MOV      r12,#0xe747           ;168
000062  eb0c0343          ADD      r3,r12,r3,LSL #1      ;168
000066  54d0              STRB     r0,[r2,r3]            ;168
000068  7808              LDRB     r0,[r1,#0]            ;170
00006a  1c40              ADDS     r0,r0,#1              ;170
00006c  7008              STRB     r0,[r1,#0]            ;170
00006e  b004              ADD      sp,sp,#0x10
000070  bc10              POP      {r4}
000072  4770              BX       lr
;;;173    
                          ENDP

                  |L3.116|
                          DCD      ||.data||
                  |L3.120|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_MarkBoundary||, CODE, READONLY, ALIGN=2

                  algorithm_label_MarkBoundary PROC
;;;326    
;;;327    void algorithm_label_MarkBoundary(bool_t _bBoundary, int mode)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;328    {
;;;329        int l, i;
;;;330        tCell_t tCellPos;
;;;331        tConflictInfo_t tConflict;
;;;332        uint8_t rLabel_val;
;;;333    
;;;334    	tLabelInfo_t	*temp_label;
;;;335    
;;;336    	temp_label = &thisInfo->tLabel;
000004  4853              LDR      r0,|L4.340|
000006  b08f              SUB      sp,sp,#0x3c           ;328
000008  4689              MOV      r9,r1                 ;328
00000a  6880              LDR      r0,[r0,#8]  ; thisInfo
00000c  3039              ADDS     r0,r0,#0x39
;;;337    
;;;338        for( l=0; l<temp_label->ucValidNum; l++ )
00000e  9006              STR      r0,[sp,#0x18]
000010  2000              MOVS     r0,#0
000012  9005              STR      r0,[sp,#0x14]
000014  9806              LDR      r0,[sp,#0x18]
000016  f8900271          LDRB     r0,[r0,#0x271]
00001a  2800              CMP      r0,#0
;;;339        {
;;;340    		if( temp_label->tValidRect[l].cs > 0 )
;;;341    			temp_label->tValidRect[l].cs--;
;;;342    		if( temp_label->tValidRect[l].ce < (COL_MAX - 1) )
;;;343    			temp_label->tValidRect[l].ce++;
;;;344    		if( temp_label->tValidRect[l].rs > 0 )
;;;345    			temp_label->tValidRect[l].rs--;		
;;;346    		
;;;347    		{
;;;348    			if( temp_label->tValidRect[l].re < (ROW_MAX - 1) )
;;;349    				temp_label->tValidRect[l].re++;
;;;350    		}
;;;351    
;;;352        	for( tCellPos.r=temp_label->tValidRect[l].rs; tCellPos.r<= temp_label->tValidRect[l].re; tCellPos.r++ )
;;;353        	{
;;;354        		for( tCellPos.c=temp_label->tValidRect[l].cs; tCellPos.c<= temp_label->tValidRect[l].ce; tCellPos.c++ )
;;;355        		{
;;;356    				rLabel_val = HAL_READ_LABEL_IMAGE(tCellPos.r, tCellPos.c);
;;;357    
;;;358        			if( rLabel_val == 0 )
;;;359        			{
;;;360        				tConflict.ulValue = 0;
;;;361    
;;;362        				algorithm_label_GetConflictInfo(NO, BOUNDARY_4_SEARCH_DIRECTION, 0, tCellPos, &tConflict, mode);
;;;363    
;;;364        				if( tConflict.tInfo.NUM )
;;;365        				{
;;;366        					for(i=LOOSE_POSBUF_; i--; )
;;;367        					{
;;;368        						if( tConflict.tInfo.BF & _BV(i) )
00001c  bfc7              ITTEE    GT
00001e  f04f0801          MOVGT    r8,#1
000022  2700              MOVGT    r7,#0
;;;369        						{
;;;370    								int sum_delta;
;;;371    								
;;;372    //    							if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;373    //    							{
;;;374    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;375    //    							}
;;;376    //    							else if(mode == LOCAL_FINGER_MODE)
;;;377    //    							{
;;;378    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;379    //    							}
;;;380    //								else
;;;381    //								{
;;;382    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;383    //    							}
;;;384    
;;;385    //								if(mode == LOCAL_FINGER_MODE)
;;;386    //    								sum_delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;387    //								else
;;;388        								sum_delta = HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;389    								
;;;390    								if(sum_delta < 0)	sum_delta = 0;
;;;391    								
;;;392    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, sum_delta, _bBoundary, NO, mode);
;;;393        						}
;;;394        					}
;;;395    
;;;396        	    			HAL_WRITE_LABEL_IMAGE(tCellPos.r, tCellPos.c, LABEL_BOUNDARY_MARKER);
;;;397        				}
;;;398        			}
;;;399        		}
;;;400        	}
;;;401        }
;;;402    }
000024  b011              ADDLE    sp,sp,#0x44
000026  e8bd8ff0          POPLE    {r4-r11,pc}
00002a  bf00              NOP      
                  |L4.44|
00002c  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000030  eb010680          ADD      r6,r1,r0,LSL #2       ;340
000034  f9960274          LDRSB    r0,[r6,#0x274]        ;340
000038  2800              CMP      r0,#0                 ;340
00003a  bfc4              ITT      GT                    ;340
00003c  1e40              SUBGT    r0,r0,#1              ;340
00003e  f8860274          STRBGT   r0,[r6,#0x274]        ;341
000042  f9960275          LDRSB    r0,[r6,#0x275]        ;342
000046  284f              CMP      r0,#0x4f              ;342
000048  bfbc              ITT      LT                    ;342
00004a  1c40              ADDLT    r0,r0,#1              ;342
00004c  f8860275          STRBLT   r0,[r6,#0x275]        ;343
000050  f9960272          LDRSB    r0,[r6,#0x272]        ;344
000054  2800              CMP      r0,#0                 ;344
000056  bfc4              ITT      GT                    ;344
000058  1e40              SUBGT    r0,r0,#1              ;344
00005a  f8860272          STRBGT   r0,[r6,#0x272]        ;345
00005e  f9960273          LDRSB    r0,[r6,#0x273]        ;348
000062  282c              CMP      r0,#0x2c              ;348
000064  bfbc              ITT      LT                    ;348
000066  1c40              ADDLT    r0,r0,#1              ;348
000068  f8860273          STRBLT   r0,[r6,#0x273]        ;349
00006c  f9960272          LDRSB    r0,[r6,#0x272]        ;352
000070  f9961273          LDRSB    r1,[r6,#0x273]        ;352
000074  f360250f          BFI      r5,r0,#8,#8           ;352
000078  4288              CMP      r0,r1                 ;352
00007a  dc5c              BGT      |L4.310|
                  |L4.124|
00007c  f9960274          LDRSB    r0,[r6,#0x274]        ;354
000080  f9961275          LDRSB    r1,[r6,#0x275]        ;354
000084  f3600507          BFI      r5,r0,#0,#8           ;354
000088  4288              CMP      r0,r1                 ;354
00008a  dc4b              BGT      |L4.292|
00008c  f3452007          SBFX     r0,r5,#8,#8           ;354
000090  eb0001c0          ADD      r1,r0,r0,LSL #3       ;356
000094  eb011040          ADD      r0,r1,r0,LSL #5       ;356
000098  492f              LDR      r1,|L4.344|
00009a  eb010180          ADD      r1,r1,r0,LSL #2       ;388
00009e  9107              STR      r1,[sp,#0x1c]         ;356
0000a0  f24e7147          MOV      r1,#0xe747            ;356
0000a4  eb010040          ADD      r0,r1,r0,LSL #1       ;356
0000a8  f8cd0024          STR.W    r0,[sp,#0x24]         ;356
                  |L4.172|
0000ac  482a              LDR      r0,|L4.344|
0000ae  fa4ffa85          SXTB     r10,r5                ;356
0000b2  9909              LDR      r1,[sp,#0x24]         ;356
0000b4  4450              ADD      r0,r0,r10             ;356
0000b6  900a              STR      r0,[sp,#0x28]         ;356
0000b8  5c40              LDRB     r0,[r0,r1]            ;356
0000ba  bb50              CBNZ     r0,|L4.274|
0000bc  a804              ADD      r0,sp,#0x10           ;362
0000be  e9cd0900          STRD     r0,r9,[sp,#0]         ;362
0000c2  2200              MOVS     r2,#0                 ;362
0000c4  462b              MOV      r3,r5                 ;362
0000c6  2104              MOVS     r1,#4                 ;362
0000c8  9704              STR      r7,[sp,#0x10]         ;362
0000ca  4610              MOV      r0,r2                 ;362
0000cc  f7fffffe          BL       algorithm_label_GetConflictInfo
0000d0  f89d0012          LDRB     r0,[sp,#0x12]         ;364
0000d4  b1e8              CBZ      r0,|L4.274|
0000d6  9807              LDR      r0,[sp,#0x1c]         ;388
0000d8  240f              MOVS     r4,#0xf               ;366
0000da  eb00004a          ADD      r0,r0,r10,LSL #1      ;388
0000de  f5004b40          ADD      r11,r0,#0xc000        ;388
0000e2  bf00              NOP                            ;368
                  |L4.228|
0000e4  f8bd0010          LDRH     r0,[sp,#0x10]         ;368
0000e8  fa08f104          LSL      r1,r8,r4              ;368
0000ec  4208              TST      r0,r1                 ;368
0000ee  d00a              BEQ      |L4.262|
0000f0  f9bb297e          LDRSH    r2,[r11,#0x97e]       ;388
0000f4  2a00              CMP      r2,#0                 ;390
0000f6  db2b              BLT      |L4.336|
                  |L4.248|
0000f8  e9cd7900          STRD     r7,r9,[sp,#0]         ;392
0000fc  b2e0              UXTB     r0,r4                 ;392
0000fe  4629              MOV      r1,r5                 ;392
000100  9b0f              LDR      r3,[sp,#0x3c]         ;392
000102  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L4.262|
000106  1e64              SUBS     r4,r4,#1              ;392
000108  d2ec              BCS      |L4.228|
00010a  e9dd1209          LDRD     r1,r2,[sp,#0x24]      ;396
00010e  2012              MOVS     r0,#0x12              ;396
000110  5450              STRB     r0,[r2,r1]            ;396
                  |L4.274|
000112  f10a0001          ADD      r0,r10,#1             ;396
000116  b240              SXTB     r0,r0                 ;396
000118  f9961275          LDRSB    r1,[r6,#0x275]        ;396
00011c  f3600507          BFI      r5,r0,#0,#8           ;396
000120  4288              CMP      r0,r1                 ;396
000122  ddc3              BLE      |L4.172|
                  |L4.292|
000124  1228              ASRS     r0,r5,#8              ;396
000126  1c40              ADDS     r0,r0,#1              ;396
000128  b240              SXTB     r0,r0                 ;396
00012a  f9961273          LDRSB    r1,[r6,#0x273]        ;396
00012e  f360250f          BFI      r5,r0,#8,#8           ;396
000132  4288              CMP      r0,r1                 ;396
000134  dda2              BLE      |L4.124|
                  |L4.310|
000136  9805              LDR      r0,[sp,#0x14]         ;396
000138  1c40              ADDS     r0,r0,#1              ;396
00013a  9005              STR      r0,[sp,#0x14]         ;396
00013c  9806              LDR      r0,[sp,#0x18]         ;396
00013e  f8901271          LDRB     r1,[r0,#0x271]        ;396
000142  9805              LDR      r0,[sp,#0x14]         ;396
000144  4281              CMP      r1,r0                 ;396
000146  f73faf71          BGT      |L4.44|
00014a  b011              ADD      sp,sp,#0x44
00014c  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.336|
000150  2200              MOVS     r2,#0                 ;390
000152  e7d1              B        |L4.248|
;;;403    
                          ENDP

                  |L4.340|
                          DCD      ||.data||
                  |L4.344|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Merge||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge PROC
;;;1428   
;;;1429   void algorithm_label_Merge( uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1430   {
;;;1431   	int r, c, i, j;	//, pl,match_pl/*, match_pl_j*/;
;;;1432   //	tXY_t tPos_i, tPos_j, tPos_mean; //NOTE : warning????!!
;;;1433   	tXY_t tPos_i, tPos_j;
;;;1434   	int delta_i, delta_mean, delta_j, delta_target, delta_ratio;
;;;1435   	uint8_t ConflictNum;
;;;1436   	tCell_t node_i, node_mean, node_j;
;;;1437   	tConflictInfo_t tConflict;
;;;1438   	tRect_t tExpectConflictRect;
;;;1439     uint8_t rLabel_val, DiagonalFlag = 0;
;;;1440   
;;;1441   	tLabelInfo_t	*temp_label;
;;;1442   //	tCoordInfo_t 	*temp_coord;
;;;1443   
;;;1444   	temp_label = &thisInfo->tLabel;
000004  4bfd              LDR      r3,|L5.1020|
000006  b0a2              SUB      sp,sp,#0x88           ;1430
;;;1445   //	temp_coord = &thisInfo->tCoord;
;;;1446   
;;;1447   	for( i=_label_start_idx; i<temp_label->ucNum; i++ )
000008  460f              MOV      r7,r1
00000a  689a              LDR      r2,[r3,#8]            ;1444  ; thisInfo
00000c  3239              ADDS     r2,r2,#0x39           ;1444
00000e  9218              STR      r2,[sp,#0x60]
000010  7811              LDRB     r1,[r2,#0]
000012  42b9              CMP      r1,r7
;;;1448   	{
;;;1449   		if( temp_label->tTable[i].ulStrength == 0 )
;;;1450   		{
;;;1451   			continue;
;;;1452   		}
;;;1453   
;;;1454   		for( j=i+1; j<LOOSE_POSBUF_; j++ )
;;;1455   		{
;;;1456   			if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(j) )
;;;1457   			{
;;;1458   				if( temp_label->tTable[j].ulStrength == 0 )
;;;1459   				{
;;;1460   					temp_label->tTable[i].tConflictInfo.tInfo.BF &= ~_BV(j);
;;;1461   					temp_label->tTable[i].tConflictInfo.tInfo.NUM--;
;;;1462   
;;;1463   					continue;
;;;1464   				}
;;;1465   
;;;1466   				tPos_i.x  = (temp_label->tTable[i].tCoord.x + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1467   				tPos_i.x /= temp_label->tTable[i].ulStrength;
;;;1468   				tPos_i.y  = (temp_label->tTable[i].tCoord.y + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1469   				tPos_i.y /= temp_label->tTable[i].ulStrength;
;;;1470   
;;;1471   				tPos_j.x  = (temp_label->tTable[j].tCoord.x + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1472   				tPos_j.x /= temp_label->tTable[j].ulStrength;
;;;1473   				tPos_j.y  = (temp_label->tTable[j].tCoord.y + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1474   				tPos_j.y /= temp_label->tTable[j].ulStrength;
;;;1475   
;;;1476   				node_i.c = temp_label->tTable[i].tMaxCell.c;
;;;1477   				node_i.r = temp_label->tTable[i].tMaxCell.r;
;;;1478   
;;;1479   				delta_i = HAL_READ_DELTA_IMAGE(node_i.r, node_i.c);
;;;1480   
;;;1481   				node_j.c = temp_label->tTable[j].tMaxCell.c;
;;;1482   				node_j.r = temp_label->tTable[j].tMaxCell.r;
;;;1483   
;;;1484   				delta_j = HAL_READ_DELTA_IMAGE(node_j.r, node_j.c);
;;;1485   
;;;1486   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
000014  bfc7              ITTEE    GT
000016  eb020040          ADDGT    r0,r2,r0,LSL #1
00001a  901d              STRGT    r0,[sp,#0x74]
;;;1487   				{
;;;1488   					tExpectConflictRect.cs = MIN(temp_label->tTable[i].tRect.cs, temp_label->tTable[j].tRect.cs);
;;;1489   					tExpectConflictRect.ce = MAX(temp_label->tTable[i].tRect.ce, temp_label->tTable[j].tRect.ce);
;;;1490   					tExpectConflictRect.rs = MIN(temp_label->tTable[i].tRect.rs, temp_label->tTable[j].tRect.rs);
;;;1491   					tExpectConflictRect.re = MAX(temp_label->tTable[i].tRect.re, temp_label->tTable[j].tRect.re);
;;;1492   				}
;;;1493   				else
;;;1494   				{
;;;1495   					tExpectConflictRect.cs = MIN(node_i.c, node_j.c);
;;;1496   					tExpectConflictRect.ce = MAX(node_i.c, node_j.c);
;;;1497   					tExpectConflictRect.rs = MIN(node_i.r, node_j.r);
;;;1498   					tExpectConflictRect.re = MAX(node_i.r, node_j.r);
;;;1499   				}
;;;1500   
;;;1501   //				delta_mean = INT16_MIN;
;;;1502   				delta_mean = 0;
;;;1503   				ConflictNum = 0;
;;;1504   				node_mean.r = (node_i.r + node_j.r)>>1;
;;;1505   				node_mean.c = (node_i.c + node_j.c)>>1;
;;;1506   				for( r=tExpectConflictRect.rs; r<=tExpectConflictRect.re; r++ )
;;;1507   				{
;;;1508   					for( c=tExpectConflictRect.cs; c<= tExpectConflictRect.ce; c++ )
;;;1509   					{
;;;1510   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;1511   
;;;1512   						if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;1513   						{
;;;1514   							tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;1515   
;;;1516   							if( (tConflict.tInfo.BF & (_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1))) ==
;;;1517   									(_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1)) )
;;;1518   							{
;;;1519   								int16_t delta_t;
;;;1520   
;;;1521   								delta_t = HAL_READ_DELTA_IMAGE(r, c);
;;;1522   
;;;1523   								delta_mean += delta_t;
;;;1524   								ConflictNum++;
;;;1525   //								if( delta_mean < delta_t)
;;;1526   //								{
;;;1527   //									delta_mean = delta_t;
;;;1528   //									node_mean.r = r;
;;;1529   //									node_mean.c = c;
;;;1530   //								}
;;;1531   							}
;;;1532   						}
;;;1533   					}
;;;1534   				}
;;;1535   				if(ConflictNum)
;;;1536   					delta_mean /= ConflictNum;
;;;1537   				else
;;;1538   					delta_mean = HAL_READ_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;1539   
;;;1540   //				if( delta_mean == INT16_MIN )
;;;1541   //				{
;;;1542   //					delta_mean = HAL_READ_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;1543   //				}
;;;1544   
;;;1545   				delta_target = (delta_i*temp_label->tTable[j].ulStrength + delta_j*temp_label->tTable[i].ulStrength)/(temp_label->tTable[i].ulStrength + temp_label->tTable[j].ulStrength);
;;;1546   
;;;1547   				{
;;;1548   					delta_ratio = (delta_mean * 100)/delta_target;
;;;1549   				}
;;;1550   
;;;1551   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
;;;1552   				{
;;;1553   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeSmallThdPer;
;;;1554   				}
;;;1555   				else if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMediumNodeCnt )
;;;1556   				{
;;;1557   //					temp_label->iMergeThdPer = thisModeConf->Label.ucSmallMergeThdPer;
;;;1558   //					temp_label->iMergeThdPer += ((thisModeConf->Label.ucLargeMergeThdPer - thisModeConf->Label.ucSmallMergeThdPer)
;;;1559   //							*(temp_label->usValidCellCnt[_valid_area_idx] - thisModeConf->Label.usSmallTouchThd))
;;;1560   //							/(thisModeConf->Label.usLargeTouchThd - thisModeConf->Label.usSmallTouchThd);
;;;1561   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;1562   				}
;;;1563   				else
;;;1564   				{
;;;1565   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;1566   				}
;;;1567   				
;;;1568   				//Merge threshold for diagonal peak
;;;1569   				if(abs(node_j.c - node_i.c) == 1 && abs(node_j.r - node_i.r) == 1){
;;;1570   					DiagonalFlag = YES;
;;;1571   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeSmallDiagThdPer;
;;;1572   //					temp_label->iMergeThdPer >>= 1;
;;;1573   				}
;;;1574   				else
;;;1575   					DiagonalFlag = NO;
;;;1576   				
;;;1577   //				temp_label->iMergeThdPer += temp_label->LabelSplitFrmCnt;
;;;1578   //				if(temp_label->iMergeThdPer > thisModeConf->Label.ucMergeMediumThdPer) temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;1579   				
;;;1580   				if( temp_label->iMergeThdPer < delta_ratio )
;;;1581   				{
;;;1582   					int k;
;;;1583   					
;;;1584   					for( r=temp_label->tTable[j].tRect.rs; r<=temp_label->tTable[j].tRect.re; r++ )
;;;1585   					{
;;;1586   						for( c=temp_label->tTable[j].tRect.cs; c<=temp_label->tTable[j].tRect.ce; c++ )
;;;1587   						{
;;;1588   							tCell_t tNodePos = { .r = r, .c = c };
;;;1589   
;;;1590   							rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;1591   
;;;1592   							if( rLabel_val == temp_label->tTable[j].cId )
;;;1593   							{
;;;1594   								HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;1595   								algorithm_label_Add_NewNode_to_LabelRecord(i, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;1596   							}
;;;1597   							else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;1598   							{
;;;1599   								tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;1600   
;;;1601   								if( (tConflict.tInfo.BF & _BV(i)) && (tConflict.tInfo.BF & _BV(j)) )
;;;1602   								{
;;;1603   									tConflict.tInfo.NUM--;
;;;1604   									tConflict.tInfo.BF &= ~(tConflict.tInfo.BF & _BV(j));
;;;1605   								}
;;;1606   								else if( tConflict.tInfo.BF & _BV(j) )
;;;1607   								{
;;;1608   									tConflict.tInfo.BF |=  _BV(i);
;;;1609   									tConflict.tInfo.BF &= ~_BV(j);
;;;1610   								}
;;;1611   
;;;1612   								if( tConflict.tInfo.NUM == 1 || tConflict.tInfo.BF == 0 )
;;;1613   								{
;;;1614   									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;1615   									tConflict.ulValue = 0;
;;;1616   								}
;;;1617   								HAL_WRITE_CONFLICT_LABEL_IMAGE(r, c, tConflict.ulValue);
;;;1618   							}
;;;1619   						}
;;;1620   					}
;;;1621   
;;;1622   					temp_label->tTable[i].tConflictInfo.tInfo.BF |= temp_label->tTable[j].tConflictInfo.tInfo.BF;
;;;1623   					temp_label->tTable[i].tConflictInfo.tInfo.NUM = 0;
;;;1624   					for( k=LOOSE_POSBUF_; k--; )
;;;1625   					{
;;;1626   						if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(k) )
;;;1627   						{
;;;1628   							temp_label->tTable[i].tConflictInfo.tInfo.NUM++;
;;;1629   						}
;;;1630   					}
;;;1631   					// Merge S&R inter 2 Points iTh <== jTh
;;;1632   					{
;;;1633   
;;;1634   					}
;;;1635   					// Clear LabelTable & PosTable 2nd Point
;;;1636   					{
;;;1637   						memset(&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t) );
;;;1638   					}
;;;1639   				}
;;;1640   			}
;;;1641   		}
;;;1642   	}
;;;1643   }
00001c  b025              ADDLE    sp,sp,#0x94
00001e  e8bd8ff0          POPLE    {r4-r11,pc}
000022  bf00              NOP                            ;1449
                  |L5.36|
000024  ebc700c7          RSB      r0,r7,r7,LSL #3       ;1449
000028  eb001147          ADD      r1,r0,r7,LSL #5       ;1449
00002c  9818              LDR      r0,[sp,#0x60]         ;1449
00002e  180d              ADDS     r5,r1,r0              ;1449
000030  6968              LDR      r0,[r5,#0x14]         ;1449
000032  2800              CMP      r0,#0                 ;1449
000034  f000820b          BEQ.W    |L5.1102|
000038  1c78              ADDS     r0,r7,#1              ;1454
00003a  901c              STR      r0,[sp,#0x70]         ;1454
00003c  2810              CMP      r0,#0x10              ;1454
00003e  f2808206          BGE.W    |L5.1102|
000042  2001              MOVS     r0,#1                 ;1456
000044  40b8              LSLS     r0,r0,r7              ;1601
000046  9014              STR      r0,[sp,#0x50]         ;1601
                  |L5.72|
000048  991c              LDR      r1,[sp,#0x70]         ;1456
00004a  2201              MOVS     r2,#1                 ;1456
00004c  8ba8              LDRH     r0,[r5,#0x1c]         ;1456
00004e  fa02f101          LSL      r1,r2,r1              ;1456
000052  4208              TST      r0,r1                 ;1456
000054  9106              STR      r1,[sp,#0x18]         ;1456
000056  f00081f4          BEQ.W    |L5.1090|
00005a  991c              LDR      r1,[sp,#0x70]         ;1458
00005c  ebc102c1          RSB      r2,r1,r1,LSL #3       ;1458
000060  eb021241          ADD      r2,r2,r1,LSL #5       ;1458
000064  9918              LDR      r1,[sp,#0x60]         ;1458
000066  1856              ADDS     r6,r2,r1              ;1458
000068  6971              LDR      r1,[r6,#0x14]         ;1458
00006a  9108              STR      r1,[sp,#0x20]         ;1458
00006c  2900              CMP      r1,#0                 ;1458
00006e  d078              BEQ      |L5.354|
000070  68e9              LDR      r1,[r5,#0xc]          ;1466
000072  6968              LDR      r0,[r5,#0x14]         ;1466
000074  9005              STR      r0,[sp,#0x14]         ;1468
000076  eb010150          ADD      r1,r1,r0,LSR #1       ;1466
00007a  0209              LSLS     r1,r1,#8              ;1466
00007c  fbb1f1f0          UDIV     r1,r1,r0              ;1467
000080  6929              LDR      r1,[r5,#0x10]         ;1468
000082  eb010150          ADD      r1,r1,r0,LSR #1       ;1468
000086  0209              LSLS     r1,r1,#8              ;1468
000088  fbb1f0f0          UDIV     r0,r1,r0              ;1469
00008c  68f1              LDR      r1,[r6,#0xc]          ;1471
00008e  9808              LDR      r0,[sp,#0x20]         ;1471
000090  eb010050          ADD      r0,r1,r0,LSR #1       ;1471
000094  9908              LDR      r1,[sp,#0x20]         ;1472
000096  0200              LSLS     r0,r0,#8              ;1471
000098  fbb0f0f1          UDIV     r0,r0,r1              ;1472
00009c  6931              LDR      r1,[r6,#0x10]         ;1473
00009e  9808              LDR      r0,[sp,#0x20]         ;1473
0000a0  eb010050          ADD      r0,r1,r0,LSR #1       ;1473
0000a4  9908              LDR      r1,[sp,#0x20]         ;1474
0000a6  0200              LSLS     r0,r0,#8              ;1473
0000a8  fbb0f0f1          UDIV     r0,r0,r1              ;1474
0000ac  f995100a          LDRSB    r1,[r5,#0xa]          ;1476
0000b0  9104              STR      r1,[sp,#0x10]         ;1477
0000b2  f995000b          LDRSB    r0,[r5,#0xb]          ;1477
0000b6  9003              STR      r0,[sp,#0xc]          ;1479
0000b8  eb0002c0          ADD      r2,r0,r0,LSL #3       ;1479
0000bc  eb021040          ADD      r0,r2,r0,LSL #5       ;1479
0000c0  4acf              LDR      r2,|L5.1024|
0000c2  eb020080          ADD      r0,r2,r0,LSL #2       ;1479
0000c6  eb000041          ADD      r0,r0,r1,LSL #1       ;1479
0000ca  f5004040          ADD      r0,r0,#0xc000         ;1479
0000ce  f9b0097e          LDRSH    r0,[r0,#0x97e]        ;1479
0000d2  9015              STR      r0,[sp,#0x54]         ;1481
0000d4  f996100a          LDRSB    r1,[r6,#0xa]          ;1481
0000d8  9101              STR      r1,[sp,#4]            ;1482
0000da  f996000b          LDRSB    r0,[r6,#0xb]          ;1482
0000de  9000              STR      r0,[sp,#0]            ;1484
0000e0  eb0003c0          ADD      r3,r0,r0,LSL #3       ;1484
0000e4  eb031040          ADD      r0,r3,r0,LSL #5       ;1484
0000e8  eb020080          ADD      r0,r2,r0,LSL #2       ;1484
0000ec  eb000041          ADD      r0,r0,r1,LSL #1       ;1484
0000f0  f5004040          ADD      r0,r0,#0xc000         ;1484
0000f4  f9b0097e          LDRSH    r0,[r0,#0x97e]        ;1484
0000f8  901b              STR      r0,[sp,#0x6c]         ;1484
0000fa  981d              LDR      r0,[sp,#0x74]         ;1486
0000fc  f8b012f2          LDRH     r1,[r0,#0x2f2]        ;1486
000100  48be              LDR      r0,|L5.1020|
000102  910c              STR      r1,[sp,#0x30]         ;1486
000104  6840              LDR      r0,[r0,#4]            ;1486  ; thisModeConf
000106  900d              STR      r0,[sp,#0x34]         ;1486
000108  f8b00065          LDRH     r0,[r0,#0x65]         ;1486
00010c  901a              STR      r0,[sp,#0x68]         ;1486
00010e  4281              CMP      r1,r0                 ;1486
000110  d22f              BCS      |L5.370|
000112  f9951004          LDRSB    r1,[r5,#4]            ;1488
000116  f9960004          LDRSB    r0,[r6,#4]            ;1488
00011a  4281              CMP      r1,r0                 ;1488
00011c  bfb8              IT       LT                    ;1488
00011e  4608              MOVLT    r0,r1                 ;1488
000120  9a16              LDR      r2,[sp,#0x58]         ;1488
000122  f9951005          LDRSB    r1,[r5,#5]            ;1489
000126  f3604217          BFI      r2,r0,#16,#8          ;1488
00012a  f9960005          LDRSB    r0,[r6,#5]            ;1489
00012e  4281              CMP      r1,r0                 ;1489
000130  bfc8              IT       GT                    ;1489
000132  4608              MOVGT    r0,r1                 ;1489
000134  f360621f          BFI      r2,r0,#24,#8          ;1489
000138  f9950002          LDRSB    r0,[r5,#2]            ;1490
00013c  f9961002          LDRSB    r1,[r6,#2]            ;1490
000140  4288              CMP      r0,r1                 ;1490
000142  bfa8              IT       GE                    ;1490
000144  4608              MOVGE    r0,r1                 ;1490
000146  f3600207          BFI      r2,r0,#0,#8           ;1490
00014a  f9950003          LDRSB    r0,[r5,#3]            ;1491
00014e  f9961003          LDRSB    r1,[r6,#3]            ;1491
000152  4288              CMP      r0,r1                 ;1491
000154  bfd8              IT       LE                    ;1491
000156  4608              MOVLE    r0,r1                 ;1491
000158  f360220f          BFI      r2,r0,#8,#8           ;1491
00015c  9216              STR      r2,[sp,#0x58]         ;1488
00015e  e022              B        |L5.422|
000160  e7ff              B        |L5.354|
                  |L5.354|
000162  9906              LDR      r1,[sp,#0x18]         ;1460
000164  4388              BICS     r0,r0,r1              ;1460
000166  83a8              STRH     r0,[r5,#0x1c]         ;1460
000168  7fa8              LDRB     r0,[r5,#0x1e]         ;1461
00016a  1e40              SUBS     r0,r0,#1              ;1461
00016c  77a8              STRB     r0,[r5,#0x1e]         ;1461
00016e  f000b968          B.W      |L5.1090|
                  |L5.370|
000172  9901              LDR      r1,[sp,#4]            ;1495
000174  9804              LDR      r0,[sp,#0x10]         ;1495
000176  4288              CMP      r0,r1                 ;1495
000178  bfa8              IT       GE                    ;1495
00017a  4608              MOVGE    r0,r1                 ;1495
00017c  9916              LDR      r1,[sp,#0x58]         ;1495
00017e  f3604117          BFI      r1,r0,#16,#8          ;1495
000182  bfcc              ITE      GT                    ;1495
000184  9804              LDRGT    r0,[sp,#0x10]         ;1495
000186  9801              LDRLE    r0,[sp,#4]            ;1495
000188  f360611f          BFI      r1,r0,#24,#8          ;1495
00018c  9a00              LDR      r2,[sp,#0]            ;1497
00018e  9803              LDR      r0,[sp,#0xc]          ;1497
000190  4290              CMP      r0,r2                 ;1497
000192  bfa8              IT       GE                    ;1497
000194  4610              MOVGE    r0,r2                 ;1497
000196  f3600107          BFI      r1,r0,#0,#8           ;1497
00019a  bfcc              ITE      GT                    ;1497
00019c  9803              LDRGT    r0,[sp,#0xc]          ;1497
00019e  4610              MOVLE    r0,r2                 ;1497
0001a0  f360210f          BFI      r1,r0,#8,#8           ;1497
0001a4  9116              STR      r1,[sp,#0x58]         ;1497
                  |L5.422|
0001a6  9900              LDR      r1,[sp,#0]            ;1504
0001a8  9803              LDR      r0,[sp,#0xc]          ;1504
0001aa  f04f0300          MOV      r3,#0                 ;1502
0001ae  4408              ADD      r0,r0,r1              ;1504
0001b0  ea4f0060          ASR      r0,r0,#1              ;1504
0001b4  9020              STR      r0,[sp,#0x80]         ;1504
0001b6  9901              LDR      r1,[sp,#4]            ;1505
0001b8  9804              LDR      r0,[sp,#0x10]         ;1505
0001ba  461a              MOV      r2,r3                 ;1503
0001bc  4408              ADD      r0,r0,r1              ;1505
0001be  ea4f0060          ASR      r0,r0,#1              ;1505
0001c2  901f              STR      r0,[sp,#0x7c]         ;1506
0001c4  9816              LDR      r0,[sp,#0x58]         ;1506
0001c6  b241              SXTB     r1,r0                 ;1506
0001c8  f3402007          SBFX     r0,r0,#8,#8           ;1506
0001cc  900f              STR      r0,[sp,#0x3c]         ;1506
0001ce  4288              CMP      r0,r1                 ;1506
0001d0  db4d              BLT      |L5.622|
0001d2  9816              LDR      r0,[sp,#0x58]         ;1506
0001d4  f3404007          SBFX     r0,r0,#16,#8          ;1506
0001d8  901e              STR      r0,[sp,#0x78]         ;1506
0001da  9816              LDR      r0,[sp,#0x58]         ;1506
0001dc  ea4f6c20          ASR      r12,r0,#24            ;1506
                  |L5.480|
0001e0  981e              LDR      r0,[sp,#0x78]         ;1508
0001e2  4584              CMP      r12,r0                ;1508
0001e4  db3a              BLT      |L5.604|
0001e6  eb0104c1          ADD      r4,r1,r1,LSL #3       ;1510
0001ea  eb041941          ADD      r9,r4,r1,LSL #5       ;1510
0001ee  4c84              LDR      r4,|L5.1024|
0001f0  eb040889          ADD      r8,r4,r9,LSL #2       ;1521
0001f4  f8cd8044          STR      r8,[sp,#0x44]         ;1510
0001f8  eb040849          ADD      r8,r4,r9,LSL #1       ;1510
0001fc  eb0409c9          ADD      r9,r4,r9,LSL #3       ;1514
                  |L5.512|
000200  eb080400          ADD      r4,r8,r0              ;1510
000204  f5044460          ADD      r4,r4,#0xe000         ;1510
000208  f8944747          LDRB     r4,[r4,#0x747]        ;1510
00020c  2c3f              CMP      r4,#0x3f              ;1512
00020e  d122              BNE      |L5.598|
000210  eb090480          ADD      r4,r9,r0,LSL #2       ;1514
000214  f5044400          ADD      r4,r4,#0x8000         ;1514
000218  f896e001          LDRB     lr,[r6,#1]            ;1516
00021c  f8b4adec          LDRH     r10,[r4,#0xdec]       ;1514
000220  786c              LDRB     r4,[r5,#1]            ;1516
000222  f1ae0e01          SUB      lr,lr,#1              ;1516
000226  f1a40b01          SUB      r11,r4,#1             ;1516
00022a  2401              MOVS     r4,#1                 ;1516
00022c  fa04fb0b          LSL      r11,r4,r11            ;1516
000230  fa04f40e          LSL      r4,r4,lr              ;1516
000234  ea4b0b04          ORR      r11,r11,r4            ;1516
000238  fa1ff48a          UXTH     r4,r10                ;1516
00023c  ea3b0404          BICS     r4,r11,r4             ;1516
000240  d109              BNE      |L5.598|
000242  9c11              LDR      r4,[sp,#0x44]         ;1521
000244  1c52              ADDS     r2,r2,#1              ;1523
000246  eb040440          ADD      r4,r4,r0,LSL #1       ;1521
00024a  f5044440          ADD      r4,r4,#0xc000         ;1521
00024e  b2d2              UXTB     r2,r2                 ;1524
000250  f9b4497e          LDRSH    r4,[r4,#0x97e]        ;1521
000254  4423              ADD      r3,r3,r4              ;1523
                  |L5.598|
000256  1c40              ADDS     r0,r0,#1              ;1524
000258  4584              CMP      r12,r0                ;1524
00025a  dad1              BGE      |L5.512|
                  |L5.604|
00025c  980f              LDR      r0,[sp,#0x3c]         ;1524
00025e  1c49              ADDS     r1,r1,#1              ;1524
000260  4288              CMP      r0,r1                 ;1524
000262  dabd              BGE      |L5.480|
000264  2a00              CMP      r2,#0                 ;1535
000266  bf18              IT       NE                    ;1536
000268  fb93f0f2          SDIVNE   r0,r3,r2              ;1536
00026c  d10e              BNE      |L5.652|
                  |L5.622|
00026e  9820              LDR      r0,[sp,#0x80]         ;1538
000270  eb0001c0          ADD      r1,r0,r0,LSL #3       ;1538
000274  eb011140          ADD      r1,r1,r0,LSL #5       ;1538
000278  4861              LDR      r0,|L5.1024|
00027a  eb000181          ADD      r1,r0,r1,LSL #2       ;1538
00027e  981f              LDR      r0,[sp,#0x7c]         ;1538
000280  eb010040          ADD      r0,r1,r0,LSL #1       ;1538
000284  f5004040          ADD      r0,r0,#0xc000         ;1538
000288  f9b0097e          LDRSH    r0,[r0,#0x97e]        ;1538
                  |L5.652|
00028c  9a15              LDR      r2,[sp,#0x54]         ;1545
00028e  9908              LDR      r1,[sp,#0x20]         ;1545
000290  fb01f302          MUL      r3,r1,r2              ;1545
000294  9a1b              LDR      r2,[sp,#0x6c]         ;1545
000296  9905              LDR      r1,[sp,#0x14]         ;1545
000298  fb023301          MLA      r3,r2,r1,r3           ;1545
00029c  9a08              LDR      r2,[sp,#0x20]         ;1545
00029e  4411              ADD      r1,r1,r2              ;1545
0002a0  fbb3f1f1          UDIV     r1,r3,r1              ;1545
0002a4  2264              MOVS     r2,#0x64              ;1548
0002a6  4350              MULS     r0,r2,r0              ;1548
0002a8  fb90f0f1          SDIV     r0,r0,r1              ;1548
0002ac  9a1a              LDR      r2,[sp,#0x68]         ;1551
0002ae  990c              LDR      r1,[sp,#0x30]         ;1551
0002b0  4291              CMP      r1,r2                 ;1551
0002b2  990d              LDR      r1,[sp,#0x34]         ;1551
0002b4  bf34              ITE      CC                    ;1553
0002b6  f8912069          LDRBCC   r2,[r1,#0x69]         ;1553
0002ba  f891206a          LDRBCS   r2,[r1,#0x6a]         ;1561
0002be  9918              LDR      r1,[sp,#0x60]         ;1561
0002c0  f8c1231f          STR      r2,[r1,#0x31f]        ;1561
0002c4  9a04              LDR      r2,[sp,#0x10]         ;1569
0002c6  9901              LDR      r1,[sp,#4]            ;1569
0002c8  1a89              SUBS     r1,r1,r2              ;1569
0002ca  2901              CMP      r1,#1                 ;1569
0002cc  bf18              IT       NE                    ;1569
0002ce  f1b13fff          CMPNE    r1,#0xffffffff        ;1569
0002d2  d10e              BNE      |L5.754|
0002d4  9a03              LDR      r2,[sp,#0xc]          ;1569
0002d6  9900              LDR      r1,[sp,#0]            ;1569
0002d8  eba10102          SUB      r1,r1,r2              ;1569
0002dc  2901              CMP      r1,#1                 ;1569
0002de  bf18              IT       NE                    ;1569
0002e0  f1b13fff          CMPNE    r1,#0xffffffff        ;1569
0002e4  d105              BNE      |L5.754|
0002e6  990d              LDR      r1,[sp,#0x34]         ;1571
0002e8  f891206b          LDRB     r2,[r1,#0x6b]         ;1571
0002ec  9918              LDR      r1,[sp,#0x60]         ;1571
0002ee  f8c1231f          STR      r2,[r1,#0x31f]        ;1571
                  |L5.754|
0002f2  9918              LDR      r1,[sp,#0x60]         ;1580
0002f4  f8d1131f          LDR      r1,[r1,#0x31f]        ;1580
0002f8  4281              CMP      r1,r0                 ;1580
0002fa  da7d              BGE      |L5.1016|
0002fc  f9968002          LDRSB    r8,[r6,#2]            ;1584
000300  f9960003          LDRSB    r0,[r6,#3]            ;1584
000304  4540              CMP      r0,r8                 ;1584
000306  db78              BLT      |L5.1018|
                  |L5.776|
000308  f9964004          LDRSB    r4,[r6,#4]            ;1586
00030c  f9960005          LDRSB    r0,[r6,#5]            ;1586
000310  42a0              CMP      r0,r4                 ;1586
000312  db6c              BLT      |L5.1006|
000314  eb0800c8          ADD      r0,r8,r8,LSL #3       ;1510
000318  4939              LDR      r1,|L5.1024|
00031a  eb001048          ADD      r0,r0,r8,LSL #5       ;1510
00031e  eb010b80          ADD      r11,r1,r0,LSL #2      ;1521
000322  eb010940          ADD      r9,r1,r0,LSL #1       ;1510
000326  eb0100c0          ADD      r0,r1,r0,LSL #3       ;1514
00032a  fa4ffa88          SXTB     r10,r8                ;1588
00032e  9005              STR      r0,[sp,#0x14]         ;1514
                  |L5.816|
000330  eb090004          ADD      r0,r9,r4              ;1590
000334  f5004260          ADD      r2,r0,#0xe000         ;1590
000338  f9963001          LDRSB    r3,[r6,#1]            ;1592
00033c  f8920747          LDRB     r0,[r2,#0x747]        ;1590
000340  f3640107          BFI      r1,r4,#0,#8           ;1514
000344  f36a210f          BFI      r1,r10,#8,#8          ;1514
000348  4283              CMP      r3,r0                 ;1592
00034a  d110              BNE      |L5.878|
00034c  7868              LDRB     r0,[r5,#1]            ;1594
00034e  f8820747          STRB     r0,[r2,#0x747]        ;1594
000352  9a24              LDR      r2,[sp,#0x90]         ;1595
000354  2000              MOVS     r0,#0                 ;1595
000356  e9cd0200          STRD     r0,r2,[sp,#0]         ;1595
00035a  eb0b0044          ADD      r0,r11,r4,LSL #1      ;1595
00035e  f64c127e          MOV      r2,#0xc97e            ;1595
000362  5e82              LDRSH    r2,[r0,r2]            ;1595
000364  b2f8              UXTB     r0,r7                 ;1595
000366  2300              MOVS     r3,#0                 ;1595
000368  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
00036c  e03a              B        |L5.996|
                  |L5.878|
00036e  283f              CMP      r0,#0x3f              ;1597
000370  d138              BNE      |L5.996|
000372  9805              LDR      r0,[sp,#0x14]         ;1599
000374  f8ddc050          LDR      r12,[sp,#0x50]        ;1601
000378  eb000084          ADD      r0,r0,r4,LSL #2       ;1599
00037c  f5004300          ADD      r3,r0,#0x8000         ;1599
000380  f8d30dec          LDR      r0,[r3,#0xdec]        ;1599
000384  b281              UXTH     r1,r0                 ;1599
000386  ea110f0c          TST      r1,r12                ;1601
00038a  f8ddc018          LDR      r12,[sp,#0x18]        ;1606
00038e  ea010c0c          AND      r12,r1,r12            ;1606
000392  d00d              BEQ      |L5.944|
000394  f1bc0f00          CMP      r12,#0                ;1601
000398  d017              BEQ      |L5.970|
00039a  ea4f4e10          LSR      lr,r0,#16             ;1601
00039e  f1ae0e01          SUB      lr,lr,#1              ;1601
0003a2  f36e4017          BFI      r0,lr,#16,#8          ;1601
0003a6  ea21010c          BIC      r1,r1,r12             ;1604
0003aa  f361000f          BFI      r0,r1,#0,#16          ;1604
0003ae  e00c              B        |L5.970|
                  |L5.944|
0003b0  f1bc0f00          CMP      r12,#0                ;1606
0003b4  d009              BEQ      |L5.970|
0003b6  f8ddc050          LDR      r12,[sp,#0x50]        ;1608
0003ba  ea41010c          ORR      r1,r1,r12             ;1608
0003be  f8ddc018          LDR      r12,[sp,#0x18]        ;1609
0003c2  ea21010c          BIC      r1,r1,r12             ;1609
0003c6  f361000f          BFI      r0,r1,#0,#16          ;1609
                  |L5.970|
0003ca  f3c04107          UBFX     r1,r0,#16,#8          ;1609
0003ce  2901              CMP      r1,#1                 ;1612
0003d0  bf1c              ITT      NE                    ;1612
0003d2  b281              UXTHNE   r1,r0                 ;1612
0003d4  2900              CMPNE    r1,#0                 ;1612
0003d6  d103              BNE      |L5.992|
0003d8  7868              LDRB     r0,[r5,#1]            ;1614
0003da  f8820747          STRB     r0,[r2,#0x747]        ;1614
0003de  2000              MOVS     r0,#0                 ;1615
                  |L5.992|
0003e0  f8c30dec          STR      r0,[r3,#0xdec]        ;1617
                  |L5.996|
0003e4  f9960005          LDRSB    r0,[r6,#5]            ;1619
0003e8  1c64              ADDS     r4,r4,#1              ;1619
0003ea  42a0              CMP      r0,r4                 ;1619
0003ec  daa0              BGE      |L5.816|
                  |L5.1006|
0003ee  f9960003          LDRSB    r0,[r6,#3]            ;1619
0003f2  f1080801          ADD      r8,r8,#1              ;1619
0003f6  e005              B        |L5.1028|
                  |L5.1016|
0003f8  e023              B        |L5.1090|
                  |L5.1018|
0003fa  e006              B        |L5.1034|
                  |L5.1020|
                          DCD      ||.data||
                  |L5.1024|
                          DCD      FullSharedBuff
                  |L5.1028|
000404  4540              CMP      r0,r8                 ;1619
000406  f6bfaf7f          BGE      |L5.776|
                  |L5.1034|
00040a  8ba9              LDRH     r1,[r5,#0x1c]         ;1622
00040c  8bb0              LDRH     r0,[r6,#0x1c]         ;1622
00040e  2210              MOVS     r2,#0x10              ;1624
000410  4301              ORRS     r1,r1,r0              ;1622
000412  83a9              STRH     r1,[r5,#0x1c]         ;1622
000414  2000              MOVS     r0,#0                 ;1623
000416  77a8              STRB     r0,[r5,#0x1e]         ;1623
000418  2001              MOVS     r0,#1                 ;1624
00041a  4603              MOV      r3,r0                 ;1456
                  |L5.1052|
00041c  1e52              SUBS     r2,r2,#1              ;1456
00041e  fa03fc02          LSL      r12,r3,r2             ;1626
000422  ea110f0c          TST      r1,r12                ;1626
000426  d005              BEQ      |L5.1076|
000428  f895c01e          LDRB     r12,[r5,#0x1e]        ;1628
00042c  f10c0c01          ADD      r12,r12,#1            ;1628
000430  f885c01e          STRB     r12,[r5,#0x1e]        ;1628
                  |L5.1076|
000434  1c40              ADDS     r0,r0,#1              ;1628
000436  2810              CMP      r0,#0x10              ;1628
000438  ddf0              BLE      |L5.1052|
00043a  1c70              ADDS     r0,r6,#1              ;1637
00043c  2127              MOVS     r1,#0x27              ;1637
00043e  f7fffffe          BL       __aeabi_memclr
                  |L5.1090|
000442  981c              LDR      r0,[sp,#0x70]         ;1639
000444  1c40              ADDS     r0,r0,#1              ;1639
000446  901c              STR      r0,[sp,#0x70]         ;1639
000448  2810              CMP      r0,#0x10              ;1639
00044a  f6ffadfd          BLT      |L5.72|
                  |L5.1102|
00044e  9818              LDR      r0,[sp,#0x60]         ;1639
000450  1c7f              ADDS     r7,r7,#1              ;1639
000452  7800              LDRB     r0,[r0,#0]            ;1639
000454  4287              CMP      r7,r0                 ;1639
000456  f6ffade5          BLT      |L5.36|
00045a  b025              ADD      sp,sp,#0x94
00045c  e8bd8ff0          POP      {r4-r11,pc}
;;;1644   
                          ENDP


                          AREA ||i.algorithm_label_Merge_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge_PostProcess PROC
;;;1644   
;;;1645   void algorithm_label_Merge_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1646   {
000004  b092              SUB      sp,sp,#0x48
000006  4605              MOV      r5,r0
;;;1647   	int i, j, l, r, c;
;;;1648   	uint8_t ucDeleteLabel_num = 0;
000008  2000              MOVS     r0,#0
;;;1649       uint8_t rLabel_val;
;;;1650   
;;;1651   	tLabelInfo_t	*temp_label;
;;;1652   	temp_label = &thisInfo->tLabel;
00000a  9010              STR      r0,[sp,#0x40]
00000c  488d              LDR      r0,|L6.580|
;;;1653   
;;;1654   	for( i=_label_start_idx; i<temp_label->ucNum-1; i++ )
00000e  460c              MOV      r4,r1
000010  460e              MOV      r6,r1                 ;1646
000012  6880              LDR      r0,[r0,#8]            ;1652  ; thisInfo
000014  3039              ADDS     r0,r0,#0x39           ;1652
000016  900c              STR      r0,[sp,#0x30]
000018  7800              LDRB     r0,[r0,#0]
00001a  1e40              SUBS     r0,r0,#1
00001c  42a0              CMP      r0,r4
00001e  dd31              BLE      |L6.132|
                  |L6.32|
;;;1655   	{
;;;1656   		if( temp_label->tTable[i].ulStrength == 0 )
000020  ebc400c4          RSB      r0,r4,r4,LSL #3
000024  eb001144          ADD      r1,r0,r4,LSL #5
000028  980c              LDR      r0,[sp,#0x30]
00002a  4401              ADD      r1,r1,r0
00002c  6948              LDR      r0,[r1,#0x14]
00002e  b9f8              CBNZ     r0,|L6.112|
;;;1657   		{
;;;1658   			for( j=i+1; j<temp_label->ucNum; j++ )
000030  980c              LDR      r0,[sp,#0x30]
000032  1c62              ADDS     r2,r4,#1
000034  7803              LDRB     r3,[r0,#0]
000036  4293              CMP      r3,r2
000038  dd1e              BLE      |L6.120|
;;;1659   			{
;;;1660   				if( temp_label->tTable[j].ulStrength != 0 )
00003a  bf00              NOP      
                  |L6.60|
00003c  ebc200c2          RSB      r0,r2,r2,LSL #3
000040  f8ddc030          LDR      r12,[sp,#0x30]
000044  eb001042          ADD      r0,r0,r2,LSL #5
000048  4460              ADD      r0,r0,r12
00004a  6940              LDR      r0,[r0,#0x14]
00004c  b188              CBZ      r0,|L6.114|
;;;1661   				{
;;;1662   					temp_label->tTable[i] = temp_label->tTable[j];
00004e  ebc200c2          RSB      r0,r2,r2,LSL #3
000052  eb001242          ADD      r2,r0,r2,LSL #5
000056  eb02070c          ADD      r7,r2,r12
00005a  1c78              ADDS     r0,r7,#1
00005c  1c4b              ADDS     r3,r1,#1
00005e  4601              MOV      r1,r0
000060  2227              MOVS     r2,#0x27
000062  4618              MOV      r0,r3
000064  f7fffffe          BL       __aeabi_memcpy
;;;1663   					memset((void *)&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t));
000068  1c78              ADDS     r0,r7,#1
00006a  2127              MOVS     r1,#0x27
00006c  f7fffffe          BL       __aeabi_memclr
                  |L6.112|
;;;1664   
;;;1665   					break;
000070  e002              B        |L6.120|
                  |L6.114|
000072  1c52              ADDS     r2,r2,#1
000074  4293              CMP      r3,r2
000076  dce1              BGT      |L6.60|
                  |L6.120|
000078  980c              LDR      r0,[sp,#0x30]
00007a  1c64              ADDS     r4,r4,#1
00007c  7800              LDRB     r0,[r0,#0]
00007e  1e40              SUBS     r0,r0,#1
000080  42a0              CMP      r0,r4
000082  dccd              BGT      |L6.32|
                  |L6.132|
;;;1666   				}
;;;1667   			}
;;;1668   		}
;;;1669   	}
;;;1670   
;;;1671   	for( l=_label_start_idx; l<temp_label->ucNum; l++ )
000084  980c              LDR      r0,[sp,#0x30]
000086  9604              STR      r6,[sp,#0x10]
000088  7800              LDRB     r0,[r0,#0]
00008a  42b0              CMP      r0,r6
00008c  f34080d0          BLE.W    |L6.560|
;;;1672   	{
;;;1673   		if( temp_label->tTable[l].ulStrength != 0 )
;;;1674   		{
;;;1675   			int _Id = temp_label->tTable[l].cId;
;;;1676   			if( _Id != (l+1) )
;;;1677   			{
;;;1678   				for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
000090  980c              LDR      r0,[sp,#0x30]
;;;1679   				{
;;;1680   					for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
000092  4e6d              LDR      r6,|L6.584|
000094  eb000485          ADD      r4,r0,r5,LSL #2       ;1678
                  |L6.152|
000098  9804              LDR      r0,[sp,#0x10]         ;1673
00009a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;1673
00009e  eb011140          ADD      r1,r1,r0,LSL #5       ;1673
0000a2  980c              LDR      r0,[sp,#0x30]         ;1673
0000a4  180d              ADDS     r5,r1,r0              ;1673
0000a6  6968              LDR      r0,[r5,#0x14]         ;1673
0000a8  2800              CMP      r0,#0                 ;1673
0000aa  d07a              BEQ      |L6.418|
0000ac  9804              LDR      r0,[sp,#0x10]         ;1676
0000ae  f9952001          LDRSB    r2,[r5,#1]            ;1675
0000b2  f1000801          ADD      r8,r0,#1              ;1676
0000b6  4542              CMP      r2,r8                 ;1676
0000b8  d02b              BEQ      |L6.274|
0000ba  f9943272          LDRSB    r3,[r4,#0x272]        ;1678
0000be  f9940273          LDRSB    r0,[r4,#0x273]        ;1678
0000c2  4298              CMP      r0,r3                 ;1678
0000c4  bfa4              ITT      GE
0000c6  f24e7947          MOVGE    r9,#0xe747
;;;1681   					{
;;;1682   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;1683   
;;;1684   						if( rLabel_val == _Id )
;;;1685   						{
;;;1686   							HAL_WRITE_LABEL_IMAGE(r, c, l+1);
0000ca  f00807ff          ANDGE    r7,r8,#0xff
0000ce  db20              BLT      |L6.274|
                  |L6.208|
0000d0  f9940274          LDRSB    r0,[r4,#0x274]        ;1680
0000d4  f9941275          LDRSB    r1,[r4,#0x275]        ;1680
0000d8  1a09              SUBS     r1,r1,r0              ;1680
0000da  f1010c01          ADD      r12,r1,#1             ;1680
0000de  f1bc0f00          CMP      r12,#0                ;1680
0000e2  dd11              BLE      |L6.264|
0000e4  eb030cc3          ADD      r12,r3,r3,LSL #3      ;1680
0000e8  eb0c1c43          ADD      r12,r12,r3,LSL #5     ;1680
0000ec  eb060c4c          ADD      r12,r6,r12,LSL #1     ;1680
0000f0  4460              ADD      r0,r0,r12             ;1680
0000f2  4448              ADD      r0,r0,r9              ;1680
0000f4  f1110101          ADDS.W   r1,r1,#1              ;1680
                  |L6.248|
0000f8  f890c000          LDRB     r12,[r0,#0]           ;1684
0000fc  4594              CMP      r12,r2                ;1684
0000fe  bf08              IT       EQ
000100  7007              STRBEQ   r7,[r0,#0]
000102  1c40              ADDS     r0,r0,#1
000104  1e49              SUBS     r1,r1,#1
000106  d1f7              BNE      |L6.248|
                  |L6.264|
;;;1687   						}
000108  f9940273          LDRSB    r0,[r4,#0x273]
00010c  1c5b              ADDS     r3,r3,#1
00010e  4298              CMP      r0,r3
000110  dade              BGE      |L6.208|
                  |L6.274|
;;;1688   					}
;;;1689   				}
;;;1690   			}
;;;1691   
;;;1692   			memset((void *)&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
000112  1c68              ADDS     r0,r5,#1
000114  2127              MOVS     r1,#0x27
000116  f7fffffe          BL       __aeabi_memclr
;;;1693   			temp_label->tTable[l].cId = l+1;
00011a  f8858001          STRB     r8,[r5,#1]
;;;1694   			temp_label->tTable[l].tRect.cs = COL_MAX-1;
00011e  204f              MOVS     r0,#0x4f
000120  7128              STRB     r0,[r5,#4]
;;;1695   			temp_label->tTable[l].tRect.rs = ROW_MAX-1;
000122  202c              MOVS     r0,#0x2c
000124  70a8              STRB     r0,[r5,#2]
;;;1696   
;;;1697   			for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
000126  f9941272          LDRSB    r1,[r4,#0x272]
00012a  910d              STR      r1,[sp,#0x34]
00012c  f9940273          LDRSB    r0,[r4,#0x273]
000130  4288              CMP      r0,r1
000132  db74              BLT      |L6.542|
;;;1698   			{
;;;1699   				for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
;;;1700   				{
;;;1701   					tCell_t tNodePos = { .r = r, .c = c };
;;;1702   
;;;1703   					rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;1704   
;;;1705   					if( rLabel_val == l+1 )
;;;1706   					{
;;;1707   //						if(mode == LOCAL_FINGER_MODE)
;;;1708   //							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c), NO, NO, mode);
;;;1709   //						else
;;;1710   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;1711   					}
;;;1712   					else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;1713   					{
;;;1714   						int d;
;;;1715   						tConflictInfo_t tConflict;
;;;1716   
;;;1717   						algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tNodePos, &tConflict, mode);
;;;1718   
;;;1719   						if( tConflict.tInfo.BF & _BV(l) )
000134  9904              LDR      r1,[sp,#0x10]
000136  2001              MOVS     r0,#1
000138  4088              LSLS     r0,r0,r1
00013a  900f              STR      r0,[sp,#0x3c]
                  |L6.316|
00013c  f9945274          LDRSB    r5,[r4,#0x274]        ;1699
000140  f9940275          LDRSB    r0,[r4,#0x275]        ;1699
000144  42a8              CMP      r0,r5                 ;1699
000146  db5e              BLT      |L6.518|
000148  980d              LDR      r0,[sp,#0x34]         ;1680
00014a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;1680
00014e  eb011040          ADD      r0,r1,r0,LSL #5       ;1680
000152  eb060b40          ADD      r11,r6,r0,LSL #1      ;1680
000156  990d              LDR      r1,[sp,#0x34]         ;1701
000158  eb060080          ADD      r0,r6,r0,LSL #2       ;1710
00015c  fa4ff981          SXTB     r9,r1                 ;1701
000160  f8cd0018          STR.W    r0,[sp,#0x18]         ;1710
                  |L6.356|
000164  eb0b0005          ADD      r0,r11,r5             ;1703
000168  f5004060          ADD      r0,r0,#0xe000         ;1703
00016c  fa4ffa85          SXTB     r10,r5                ;1701
000170  f8900747          LDRB     r0,[r0,#0x747]        ;1703
000174  f36a0707          BFI      r7,r10,#0,#8          ;1701
000178  f369270f          BFI      r7,r9,#8,#8           ;1701
00017c  4540              CMP      r0,r8                 ;1705
00017e  d111              BNE      |L6.420|
000180  9914              LDR      r1,[sp,#0x50]         ;1710
000182  2000              MOVS     r0,#0                 ;1710
000184  e9cd0100          STRD     r0,r1,[sp,#0]         ;1710
000188  9806              LDR      r0,[sp,#0x18]         ;1710
00018a  f64c127e          MOV      r2,#0xc97e            ;1710
00018e  eb000045          ADD      r0,r0,r5,LSL #1       ;1710
000192  2300              MOVS     r3,#0                 ;1710
000194  5e82              LDRSH    r2,[r0,r2]            ;1710
000196  9804              LDR      r0,[sp,#0x10]         ;1710
000198  4639              MOV      r1,r7                 ;1710
00019a  b2c0              UXTB     r0,r0                 ;1710
00019c  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
0001a0  e02c              B        |L6.508|
                  |L6.418|
0001a2  e038              B        |L6.534|
                  |L6.420|
0001a4  283f              CMP      r0,#0x3f              ;1712
0001a6  d129              BNE      |L6.508|
0001a8  9914              LDR      r1,[sp,#0x50]         ;1717
0001aa  a80a              ADD      r0,sp,#0x28           ;1717
0001ac  e9cd0100          STRD     r0,r1,[sp,#0]         ;1717
0001b0  2200              MOVS     r2,#0                 ;1717
0001b2  463b              MOV      r3,r7                 ;1717
0001b4  2108              MOVS     r1,#8                 ;1717
0001b6  4610              MOV      r0,r2                 ;1717
0001b8  f7fffffe          BL       algorithm_label_GetConflictInfo
0001bc  f8bd1028          LDRH     r1,[sp,#0x28]
0001c0  980f              LDR      r0,[sp,#0x3c]
0001c2  4201              TST      r1,r0
0001c4  d01a              BEQ      |L6.508|
;;;1720   						{
;;;1721   //							if(mode == LOCAL_FINGER_MODE)
;;;1722   //								d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
;;;1723   //							else
;;;1724   								d = HAL_READ_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
0001c6  eb0901c9          ADD      r1,r9,r9,LSL #3
0001ca  eb011049          ADD      r0,r1,r9,LSL #5
0001ce  eb060080          ADD      r0,r6,r0,LSL #2
0001d2  eb00004a          ADD      r0,r0,r10,LSL #1
0001d6  f5004040          ADD      r0,r0,#0xc000
0001da  f89d102a          LDRB     r1,[sp,#0x2a]
0001de  f9b0097e          LDRSH    r0,[r0,#0x97e]
;;;1725   
;;;1726   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, d, NO, NO, mode);
0001e2  9a14              LDR      r2,[sp,#0x50]
0001e4  fb90f1f1          SDIV     r1,r0,r1              ;1724
0001e8  2000              MOVS     r0,#0
0001ea  e9cd0200          STRD     r0,r2,[sp,#0]
0001ee  9804              LDR      r0,[sp,#0x10]
0001f0  b20a              SXTH     r2,r1
0001f2  b2c0              UXTB     r0,r0
0001f4  2300              MOVS     r3,#0
0001f6  4639              MOV      r1,r7
0001f8  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L6.508|
;;;1727   						}
;;;1728   					}
;;;1729   				}
0001fc  f9940275          LDRSB    r0,[r4,#0x275]
000200  1c6d              ADDS     r5,r5,#1
000202  42a8              CMP      r0,r5
000204  daae              BGE      |L6.356|
                  |L6.518|
000206  980d              LDR      r0,[sp,#0x34]
000208  1c40              ADDS     r0,r0,#1
00020a  900d              STR      r0,[sp,#0x34]
00020c  f9941273          LDRSB    r1,[r4,#0x273]
000210  4281              CMP      r1,r0
000212  da93              BGE      |L6.316|
000214  e003              B        |L6.542|
                  |L6.534|
;;;1730   			}
;;;1731   		}
;;;1732   		else
;;;1733   		{
;;;1734   			ucDeleteLabel_num++;
000216  9810              LDR      r0,[sp,#0x40]
000218  1c40              ADDS     r0,r0,#1
00021a  b2c0              UXTB     r0,r0
00021c  9010              STR      r0,[sp,#0x40]
                  |L6.542|
00021e  9804              LDR      r0,[sp,#0x10]
000220  1c40              ADDS     r0,r0,#1
000222  9004              STR      r0,[sp,#0x10]
000224  980c              LDR      r0,[sp,#0x30]
000226  7801              LDRB     r1,[r0,#0]
000228  9804              LDR      r0,[sp,#0x10]
00022a  4281              CMP      r1,r0
00022c  f73faf34          BGT      |L6.152|
                  |L6.560|
;;;1735   		}
;;;1736   	}
;;;1737   
;;;1738   	temp_label->ucNum -= ucDeleteLabel_num;
000230  980c              LDR      r0,[sp,#0x30]
000232  7801              LDRB     r1,[r0,#0]
000234  9810              LDR      r0,[sp,#0x40]
000236  1a08              SUBS     r0,r1,r0
000238  990c              LDR      r1,[sp,#0x30]
00023a  7008              STRB     r0,[r1,#0]
;;;1739   }
00023c  b015              ADD      sp,sp,#0x54
00023e  e8bd8ff0          POP      {r4-r11,pc}
;;;1740   
                          ENDP

000242  0000              DCW      0x0000
                  |L6.580|
                          DCD      ||.data||
                  |L6.584|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_SearchValidArea||, CODE, READONLY, ALIGN=2

                  algorithm_label_SearchValidArea PROC
;;;726    
;;;727    void algorithm_label_SearchValidArea(tRect_t _tRect, int16_t _deltaThd, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;728    {
;;;729    	int32_t r, c, i, j;
;;;730    	uint8_t u_val, l_val, ul_val, ur_val;
;;;731    	uint8_t max_val1, max_val2, max_val3, min_val1, min_val2, min_val3;
;;;732    	uint8_t label_num;
;;;733    	int16_t delta;
;;;734    	uint8_t label_new, label_max;
;;;735    	uint8_t	map_val, eq_val, map_data;
;;;736    	uint8_t remap_index;
;;;737    	uint8_t ucEqTbl[(LOOSE_POSBUF_ + LABEL_MARGIN)];
;;;738    
;;;739    	tLabelInfo_t	*temp_label;
;;;740    
;;;741    	temp_label = &thisInfo->tLabel;
000004  49d2              LDR      r1,|L7.848|
000006  b094              SUB      sp,sp,#0x50           ;728
;;;742    
;;;743    	label_num = 0;
000008  f04f0800          MOV      r8,#0
00000c  6889              LDR      r1,[r1,#8]            ;741  ; thisInfo
;;;744    	memset((void *)ucEqTbl, 0x00, sizeof(uint8_t)*(LOOSE_POSBUF_ + LABEL_MARGIN));
00000e  f8cd8008          STR      r8,[sp,#8]
000012  f8cd801c          STR      r8,[sp,#0x1c]
000016  3139              ADDS     r1,r1,#0x39           ;741
000018  f8cd8030          STR      r8,[sp,#0x30]
00001c  9111              STR      r1,[sp,#0x44]
00001e  f8cd8000          STR      r8,[sp,#0]
000022  b241              SXTB     r1,r0
000024  f8cd8010          STR      r8,[sp,#0x10]
000028  f8cd8014          STR      r8,[sp,#0x14]
;;;745    
;;;746    	// Stage1
;;;747    	for (r = _tRect.rs; r <= _tRect.re; r++)
00002c  f3402207          SBFX     r2,r0,#8,#8
000030  f8cd8004          STR      r8,[sp,#4]            ;744
000034  f8cd8024          STR      r8,[sp,#0x24]         ;744
000038  f8cd8028          STR      r8,[sp,#0x28]         ;744
00003c  f8cd800c          STR      r8,[sp,#0xc]          ;744
000040  f8cd8018          STR      r8,[sp,#0x18]         ;744
000044  e9cd120e          STRD     r1,r2,[sp,#0x38]
000048  f8cd8020          STR      r8,[sp,#0x20]         ;744
00004c  f8cd802c          STR      r8,[sp,#0x2c]         ;744
000050  f8cd8034          STR      r8,[sp,#0x34]         ;744
000054  9110              STR      r1,[sp,#0x40]
000056  428a              CMP      r2,r1
000058  f2c0816d          BLT.W    |L7.822|
00005c  f3404107          SBFX     r1,r0,#16,#8          ;728
000060  ea4f6920          ASR      r9,r0,#24             ;728
000064  9112              STR      r1,[sp,#0x48]         ;728
                  |L7.102|
;;;748    	{
;;;749    		for (c = _tRect.cs; c <= _tRect.ce; c++)
000066  9f12              LDR      r7,[sp,#0x48]
000068  45b9              CMP      r9,r7
00006a  f2c080b0          BLT.W    |L7.462|
;;;750    		{
;;;751    //			if(mode == LOCAL_FINGER_MODE)
;;;752    //				delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;753    //			else
;;;754    				delta = HAL_READ_DELTA_IMAGE(r,c);
00006e  980e              LDR      r0,[sp,#0x38]
000070  49b8              LDR      r1,|L7.852|
000072  eb0002c0          ADD      r2,r0,r0,LSL #3
000076  eb021040          ADD      r0,r2,r0,LSL #5
00007a  eb010b80          ADD      r11,r1,r0,LSL #2
;;;755    
;;;756    			if ( delta >= _deltaThd)
;;;757    			{
;;;758    #if (PAD_ == 0)
;;;759    				if(r == 0)
;;;760    				{
;;;761    					u_val  = 0;
;;;762    					ul_val = 0;
;;;763    					ur_val = 0;
;;;764    				}
;;;765    				else
;;;766    				{
;;;767    					u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
;;;768    					if(c == 0)
;;;769    						ul_val = 0;
;;;770    					else 
;;;771    						ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;772    					
;;;773    					if(c == COL_MAX-1)
;;;774    						ur_val = 0;
;;;775    					else 
;;;776    						ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;777    				}
;;;778    				
;;;779    				if(c == 0)
;;;780    					l_val  = 0;
;;;781    				else
;;;782    					l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);
;;;783    #else
;;;784    				u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
00007e  eb010a40          ADD      r10,r1,r0,LSL #1
000082  bf00              NOP                            ;754
                  |L7.132|
000084  eb0b0047          ADD      r0,r11,r7,LSL #1      ;754
000088  f5004040          ADD      r0,r0,#0xc000         ;754
00008c  9915              LDR      r1,[sp,#0x54]         ;756
00008e  f9b0097e          LDRSH    r0,[r0,#0x97e]        ;754
000092  4288              CMP      r0,r1                 ;756
;;;785    				ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;786    				ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;787    				l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);				
;;;788    #endif
;;;789    				max_val1 = MAX(ul_val, l_val);
;;;790    				max_val2 = MAX(u_val, ur_val);
;;;791    				max_val3 = MAX(max_val1, max_val2);
;;;792    
;;;793    				if (max_val3 != 0)
;;;794    				{
;;;795    					if (u_val == 0)  u_val  = 127;
;;;796    					if (l_val == 0)  l_val  = 127;
;;;797    					if (ul_val == 0) ul_val = 127;
;;;798    					if (ur_val == 0) ur_val = 127;
;;;799    
;;;800    					min_val1 = MIN(u_val, l_val);
;;;801    					min_val2 = MIN(ul_val, ur_val);
;;;802    					min_val3 = MIN(min_val1, min_val2);
;;;803    
;;;804    					if (min_val3 != max_val3)
;;;805    					{
;;;806    						map_val = min_val3;
;;;807    						//*(thisInfo->ucEqTbl+max_val3) = min_val3;
;;;808    
;;;809    						if(u_val != 127)
;;;810    						{
;;;811    							remap_index = u_val;
;;;812    							while(remap_index != ucEqTbl[remap_index])
;;;813    							{
;;;814    								remap_index = ucEqTbl[remap_index];
;;;815    								if(min_val3 < remap_index)
;;;816    									ucEqTbl[remap_index] = min_val3;
;;;817    							}
;;;818    
;;;819    							if( ucEqTbl[u_val] > min_val3 )
;;;820    								ucEqTbl[u_val] = min_val3;
;;;821    						}
;;;822    						if(l_val != 127)
;;;823    						{
;;;824    							remap_index = l_val;
;;;825    							while(remap_index != ucEqTbl[remap_index])
;;;826    							{
;;;827    								remap_index = ucEqTbl[remap_index];
;;;828    								if(min_val3 < remap_index)
;;;829    									ucEqTbl[remap_index] = min_val3;
;;;830    							}
;;;831    
;;;832    							if( ucEqTbl[l_val] > min_val3 )
;;;833    							    ucEqTbl[l_val] = min_val3;
;;;834    						}
;;;835    						if(ul_val != 127)
;;;836    						{
;;;837    							remap_index = ul_val;
;;;838    							while(remap_index != ucEqTbl[remap_index])
;;;839    							{
;;;840    								remap_index = ucEqTbl[remap_index];
;;;841    								if(min_val3 < remap_index)
;;;842    									ucEqTbl[remap_index] = min_val3;
;;;843    							}
;;;844    
;;;845    							if( ucEqTbl[ul_val] > min_val3 )
;;;846    								ucEqTbl[ul_val] = min_val3;
;;;847    						}
;;;848    						if(ur_val != 127)
;;;849    						{
;;;850    							remap_index = ur_val;
;;;851    							while(remap_index != ucEqTbl[remap_index])
;;;852    							{
;;;853    								remap_index = ucEqTbl[remap_index];
;;;854    								if(min_val3 < remap_index)
;;;855    									ucEqTbl[remap_index] = min_val3;
;;;856    							}
;;;857    
;;;858    							if( ucEqTbl[ur_val] > min_val3 )
;;;859    								ucEqTbl[ur_val] = min_val3;
;;;860    						}
;;;861    					}
;;;862    					else
;;;863    					{
;;;864    						map_val = max_val3;
;;;865    					}
;;;866    				}
;;;867    				else
;;;868    				{
;;;869    					if( label_num < (LOOSE_POSBUF_ + LABEL_MARGIN) )
;;;870    					{
;;;871    						label_num++;
;;;872    					}
;;;873    
;;;874    					map_val = label_num;
;;;875    					ucEqTbl[label_num] = label_num;
;;;876    				}
;;;877    			}
;;;878    			else
;;;879    			{
;;;880    				map_val = 0;
000094  bfb8              IT       LT
000096  2300              MOVLT    r3,#0
000098  db7e              BLT      |L7.408|
00009a  eb0a0007          ADD      r0,r10,r7             ;784
00009e  f5004060          ADD      r0,r0,#0xe000         ;784
0000a2  f89056f4          LDRB     r5,[r0,#0x6f4]        ;785
0000a6  f890c746          LDRB     r12,[r0,#0x746]       ;787
0000aa  f89066f5          LDRB     r6,[r0,#0x6f5]        ;784
0000ae  f89046f6          LDRB     r4,[r0,#0x6f6]        ;786
0000b2  4565              CMP      r5,r12                ;789
0000b4  bf8c              ITE      HI                    ;789
0000b6  462b              MOVHI    r3,r5                 ;789
0000b8  4663              MOVLS    r3,r12                ;789
0000ba  42a6              CMP      r6,r4                 ;790
0000bc  bf8c              ITE      HI                    ;790
0000be  4630              MOVHI    r0,r6                 ;790
0000c0  4620              MOVLS    r0,r4                 ;790
0000c2  4283              CMP      r3,r0                 ;791
0000c4  bf98              IT       LS                    ;791
0000c6  4603              MOVLS    r3,r0                 ;791
0000c8  2b00              CMP      r3,#0                 ;793
0000ca  f0008129          BEQ.W    |L7.800|
0000ce  2e00              CMP      r6,#0                 ;795
0000d0  bf08              IT       EQ                    ;795
0000d2  267f              MOVEQ    r6,#0x7f              ;795
0000d4  f1bc0f00          CMP      r12,#0                ;796
0000d8  bf08              IT       EQ                    ;796
0000da  f04f0c7f          MOVEQ    r12,#0x7f             ;796
0000de  2d00              CMP      r5,#0                 ;797
0000e0  bf08              IT       EQ                    ;797
0000e2  257f              MOVEQ    r5,#0x7f              ;797
0000e4  2c00              CMP      r4,#0                 ;798
0000e6  bf08              IT       EQ                    ;798
0000e8  247f              MOVEQ    r4,#0x7f              ;798
0000ea  4566              CMP      r6,r12                ;800
0000ec  bf8c              ITE      HI                    ;800
0000ee  4660              MOVHI    r0,r12                ;800
0000f0  4630              MOVLS    r0,r6                 ;800
0000f2  42a5              CMP      r5,r4                 ;801
0000f4  bf8c              ITE      HI                    ;801
0000f6  4621              MOVHI    r1,r4                 ;801
0000f8  4629              MOVLS    r1,r5                 ;801
0000fa  4288              CMP      r0,r1                 ;802
0000fc  bf88              IT       HI                    ;802
0000fe  4608              MOVHI    r0,r1                 ;802
000100  4298              CMP      r0,r3                 ;804
000102  d05a              BEQ      |L7.442|
000104  4603              MOV      r3,r0                 ;806
000106  2e7f              CMP      r6,#0x7f              ;809
000108  d013              BEQ      |L7.306|
00010a  4631              MOV      r1,r6                 ;811
00010c  466a              MOV      r2,sp                 ;812
00010e  f81de001          LDRB     lr,[sp,r1]            ;812
000112  45b6              CMP      lr,r6                 ;812
000114  d009              BEQ      |L7.298|
000116  bf00              NOP                            ;814
                  |L7.280|
000118  f00e01ff          AND      r1,lr,#0xff           ;814
00011c  4288              CMP      r0,r1                 ;815
00011e  bf38              IT       CC                    ;816
000120  5450              STRBCC   r0,[r2,r1]            ;816
000122  f812e001          LDRB     lr,[r2,r1]            ;816
000126  458e              CMP      lr,r1                 ;816
000128  d1f6              BNE      |L7.280|
                  |L7.298|
00012a  5d91              LDRB     r1,[r2,r6]            ;819
00012c  4281              CMP      r1,r0                 ;819
00012e  bf88              IT       HI                    ;820
000130  5590              STRBHI   r0,[r2,r6]            ;820
                  |L7.306|
000132  f1bc0f7f          CMP      r12,#0x7f             ;822
000136  d012              BEQ      |L7.350|
000138  4661              MOV      r1,r12                ;824
00013a  466a              MOV      r2,sp                 ;825
00013c  f81d6001          LDRB     r6,[sp,r1]            ;825
000140  4566              CMP      r6,r12                ;825
000142  d006              BEQ      |L7.338|
                  |L7.324|
000144  b2f1              UXTB     r1,r6                 ;827
000146  4288              CMP      r0,r1                 ;828
000148  bf38              IT       CC                    ;829
00014a  5450              STRBCC   r0,[r2,r1]            ;829
00014c  5c56              LDRB     r6,[r2,r1]            ;829
00014e  428e              CMP      r6,r1                 ;829
000150  d1f8              BNE      |L7.324|
                  |L7.338|
000152  f812100c          LDRB     r1,[r2,r12]           ;832
000156  4281              CMP      r1,r0                 ;832
000158  bf88              IT       HI                    ;833
00015a  f802000c          STRBHI   r0,[r2,r12]           ;833
                  |L7.350|
00015e  2d7f              CMP      r5,#0x7f              ;835
000160  d013              BEQ      |L7.394|
000162  4629              MOV      r1,r5                 ;837
000164  466a              MOV      r2,sp                 ;838
000166  f81dc001          LDRB     r12,[sp,r1]           ;838
00016a  45ac              CMP      r12,r5                ;838
00016c  d009              BEQ      |L7.386|
00016e  bf00              NOP                            ;840
                  |L7.368|
000170  f00c01ff          AND      r1,r12,#0xff          ;840
000174  4288              CMP      r0,r1                 ;841
000176  bf38              IT       CC                    ;842
000178  5450              STRBCC   r0,[r2,r1]            ;842
00017a  f812c001          LDRB     r12,[r2,r1]           ;842
00017e  458c              CMP      r12,r1                ;842
000180  d1f6              BNE      |L7.368|
                  |L7.386|
000182  5d51              LDRB     r1,[r2,r5]            ;845
000184  4281              CMP      r1,r0                 ;845
000186  bf88              IT       HI                    ;846
000188  5550              STRBHI   r0,[r2,r5]            ;846
                  |L7.394|
00018a  2c7f              CMP      r4,#0x7f              ;848
00018c  d015              BEQ      |L7.442|
00018e  4621              MOV      r1,r4                 ;850
000190  466a              MOV      r2,sp                 ;851
000192  f81dc001          LDRB     r12,[sp,r1]           ;851
000196  e000              B        |L7.410|
                  |L7.408|
000198  e00f              B        |L7.442|
                  |L7.410|
00019a  45a4              CMP      r12,r4                ;851
00019c  d009              BEQ      |L7.434|
00019e  bf00              NOP                            ;853
                  |L7.416|
0001a0  f00c01ff          AND      r1,r12,#0xff          ;853
0001a4  4288              CMP      r0,r1                 ;854
0001a6  bf38              IT       CC                    ;855
0001a8  5450              STRBCC   r0,[r2,r1]            ;855
0001aa  f812c001          LDRB     r12,[r2,r1]           ;855
0001ae  458c              CMP      r12,r1                ;855
0001b0  d1f6              BNE      |L7.416|
                  |L7.434|
0001b2  5d11              LDRB     r1,[r2,r4]            ;858
0001b4  4281              CMP      r1,r0                 ;858
0001b6  bf88              IT       HI                    ;859
0001b8  5510              STRBHI   r0,[r2,r4]            ;859
                  |L7.442|
;;;881    			}
;;;882    			HAL_WRITE_LABEL_IMAGE(r, c, map_val);
0001ba  eb0a0007          ADD      r0,r10,r7
0001be  f5004060          ADD      r0,r0,#0xe000
0001c2  1c7f              ADDS     r7,r7,#1
0001c4  f8803747          STRB     r3,[r0,#0x747]
0001c8  45b9              CMP      r9,r7
0001ca  f6bfaf5b          BGE      |L7.132|
                  |L7.462|
0001ce  980e              LDR      r0,[sp,#0x38]
0001d0  990f              LDR      r1,[sp,#0x3c]
0001d2  1c40              ADDS     r0,r0,#1
0001d4  900e              STR      r0,[sp,#0x38]
0001d6  4281              CMP      r1,r0
0001d8  f6bfaf45          BGE      |L7.102|
;;;883    		}
;;;884    	}
;;;885    
;;;886    	label_num = MIN( label_num, (LOOSE_POSBUF_ + LABEL_MARGIN) );
0001dc  f1b80f38          CMP      r8,#0x38
0001e0  bf24              ITT      CS
0001e2  2238              MOVCS    r2,#0x38
0001e4  4690              MOVCS    r8,r2
0001e6  d205              BCS      |L7.500|
;;;887    
;;;888    	if( label_num > 0 )
0001e8  f1b80f00          CMP      r8,#0
;;;889    	{
;;;890    		// Stage2
;;;891    		for (i=label_num; i>0; i--)
0001ec  bf18              IT       NE
0001ee  4642              MOVNE    r2,r8
0001f0  d07d              BEQ      |L7.750|
0001f2  dd0b              BLE      |L7.524|
                  |L7.500|
0001f4  466b              MOV      r3,sp                 ;737
                  |L7.502|
;;;892    		{
;;;893    			eq_val = ucEqTbl[i];
0001f6  5c99              LDRB     r1,[r3,r2]
;;;894    			if (eq_val != i)
0001f8  4291              CMP      r1,r2
0001fa  d004              BEQ      |L7.518|
                  |L7.508|
;;;895    			{
;;;896    				do
;;;897    				{
;;;898    					j = eq_val;
0001fc  4608              MOV      r0,r1
;;;899    					eq_val = ucEqTbl[j];
0001fe  5c19              LDRB     r1,[r3,r0]
000200  4288              CMP      r0,r1
000202  d1fb              BNE      |L7.508|
;;;900    				} while (j != eq_val);
;;;901    				ucEqTbl[i] = eq_val;
000204  5499              STRB     r1,[r3,r2]
                  |L7.518|
000206  1e52              SUBS     r2,r2,#1
000208  2a00              CMP      r2,#0
00020a  dcf4              BGT      |L7.502|
                  |L7.524|
;;;902    			}
;;;903    		}
;;;904    
;;;905    		// Stage3
;;;906    		label_max = 1;
00020c  2201              MOVS     r2,#1
;;;907    		label_new = 1;
00020e  4615              MOV      r5,r2
;;;908    		for (i=1; i<=label_num; i++)
000210  f1b80f00          CMP      r8,#0
000214  bf1c              ITT      NE
000216  466b              MOVNE    r3,sp
000218  1c58              ADDNE    r0,r3,#1
00021a  d011              BEQ      |L7.576|
                  |L7.540|
;;;909    		{
;;;910    			eq_val = ucEqTbl[i];
00021c  7801              LDRB     r1,[r0,#0]
;;;911    			if (eq_val < label_max)
00021e  4291              CMP      r1,r2
;;;912    			{
;;;913    				ucEqTbl[i] = ucEqTbl[eq_val];
;;;914    			}
;;;915    			else if (eq_val > label_max)
;;;916    			{
;;;917    				label_new++;
;;;918    				label_max = eq_val;
;;;919    				ucEqTbl[i] = label_new;
;;;920    			}
;;;921    			else
;;;922    			{
;;;923    				ucEqTbl[i] = label_new;
000220  bf08              IT       EQ
000222  7005              STRBEQ   r5,[r0,#0]
000224  bf3c              ITT      CC                    ;913
000226  5c59              LDRBCC   r1,[r3,r1]            ;913
000228  7001              STRBCC   r1,[r0,#0]            ;913
00022a  d904              BLS      |L7.566|
00022c  f1050201          ADD      r2,r5,#1              ;917
000230  b2d5              UXTB     r5,r2                 ;917
000232  460a              MOV      r2,r1                 ;918
000234  7005              STRB     r5,[r0,#0]            ;919
                  |L7.566|
000236  f1000001          ADD      r0,r0,#1              ;919
00023a  f1b80801          SUBS     r8,r8,#1              ;919
;;;924    			}
00023e  d1ed              BNE      |L7.540|
                  |L7.576|
000240  e9dd020f          LDRD     r0,r2,[sp,#0x3c]
;;;925    		}
;;;926    
;;;927    		// Stage4
;;;928    		for (r = _tRect.rs; r <= _tRect.re; r++)
000244  4290              CMP      r0,r2
000246  db62              BLT      |L7.782|
000248  f8dfe108          LDR      lr,|L7.852|
00024c  466f              MOV      r7,sp                 ;737
00024e  f04f0800          MOV      r8,#0                 ;737
                  |L7.594|
;;;929    		{
;;;930    			for (c = _tRect.cs; c <= _tRect.ce; c++)
000252  9812              LDR      r0,[sp,#0x48]
000254  4581              CMP      r9,r0
000256  db56              BLT      |L7.774|
000258  eb0201c2          ADD      r1,r2,r2,LSL #3       ;754
00025c  eb011142          ADD      r1,r1,r2,LSL #5       ;754
000260  eb0e0a81          ADD      r10,lr,r1,LSL #2      ;754
;;;931    			{
;;;932    				map_val  = HAL_READ_LABEL_IMAGE(r,c);
;;;933    
;;;934    				if( map_val > 0 )
;;;935    				{
;;;936    
;;;937    					eq_val   = ucEqTbl[map_val];
;;;938    
;;;939    					if (map_val != 0 && eq_val <= (LOOSE_POSBUF_ + LABEL_MARGIN))
;;;940    					{
;;;941    						if(eq_val <= LOOSE_POSBUF_)
;;;942    							map_data = eq_val;
;;;943    						else
;;;944    							map_data = LOOSE_POSBUF_;
;;;945    					}
;;;946    					else
;;;947    					{
;;;948    						map_data = 0;
;;;949    					}
;;;950    
;;;951    					HAL_WRITE_LABEL_IMAGE(r, c, 0);
;;;952    
;;;953    					if( map_data > 0 )
;;;954    					{
;;;955    //						if(mode == LOCAL_FINGER_MODE)
;;;956    //							delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;957    //						else
;;;958    							delta = HAL_READ_DELTA_IMAGE(r, c);
;;;959    
;;;960    						if( temp_label->tValidRect[map_data-1].cs > c )
;;;961    							temp_label->tValidRect[map_data-1].cs = c;
;;;962    						if( temp_label->tValidRect[map_data-1].ce < c )
;;;963    							temp_label->tValidRect[map_data-1].ce = c;
;;;964    						if( temp_label->tValidRect[map_data-1].rs > r )
;;;965    							temp_label->tValidRect[map_data-1].rs = r;
;;;966    						if( temp_label->tValidRect[map_data-1].re < r )
;;;967    							temp_label->tValidRect[map_data-1].re = r;
;;;968    
;;;969    						if( temp_label->sValidMaxVal[map_data-1] < delta )
;;;970    						{
;;;971    							temp_label->sValidMaxVal[map_data-1] = delta;
;;;972    
;;;973    							temp_label->tValidMaxPos[map_data-1].r = r;
000264  fa4ffb82          SXTB     r11,r2
000268  eb0e0441          ADD      r4,lr,r1,LSL #1       ;784
                  |L7.620|
00026c  1821              ADDS     r1,r4,r0              ;932
00026e  f5014360          ADD      r3,r1,#0xe000         ;932
000272  f8931747          LDRB     r1,[r3,#0x747]        ;932
000276  b3d9              CBZ      r1,|L7.752|
000278  5c79              LDRB     r1,[r7,r1]            ;937
00027a  2938              CMP      r1,#0x38              ;939
00027c  bf88              IT       HI                    ;948
00027e  2100              MOVHI    r1,#0                 ;948
000280  d802              BHI      |L7.648|
000282  2910              CMP      r1,#0x10              ;941
000284  bf88              IT       HI                    ;944
000286  2110              MOVHI    r1,#0x10              ;944
                  |L7.648|
000288  f8838747          STRB     r8,[r3,#0x747]        ;951
00028c  b381              CBZ      r1,|L7.752|
00028e  eb0a0340          ADD      r3,r10,r0,LSL #1      ;958
000292  f64c167e          MOV      r6,#0xc97e            ;958
000296  5f9e              LDRSH    r6,[r3,r6]            ;958
000298  9b11              LDR      r3,[sp,#0x44]         ;961
00029a  eb030381          ADD      r3,r3,r1,LSL #2       ;961
00029e  f993c270          LDRSB    r12,[r3,#0x270]       ;961
0002a2  4584              CMP      r12,r0                ;961
0002a4  bfc8              IT       GT                    ;961
0002a6  4684              MOVGT    r12,r0                ;961
0002a8  f883c270          STRB     r12,[r3,#0x270]       ;961
0002ac  f993c271          LDRSB    r12,[r3,#0x271]       ;963
0002b0  4584              CMP      r12,r0                ;963
0002b2  bfd8              IT       LE                    ;963
0002b4  4684              MOVLE    r12,r0                ;963
0002b6  f883c271          STRB     r12,[r3,#0x271]       ;963
0002ba  f993c26e          LDRSB    r12,[r3,#0x26e]       ;965
0002be  4594              CMP      r12,r2                ;965
0002c0  bfc8              IT       GT                    ;965
0002c2  4694              MOVGT    r12,r2                ;965
0002c4  f883c26e          STRB     r12,[r3,#0x26e]       ;965
0002c8  f993c26f          LDRSB    r12,[r3,#0x26f]       ;967
0002cc  4594              CMP      r12,r2                ;967
0002ce  bfd8              IT       LE                    ;967
0002d0  4694              MOVLE    r12,r2                ;967
0002d2  f883c26f          STRB     r12,[r3,#0x26f]       ;967
0002d6  9b11              LDR      r3,[sp,#0x44]         ;969
0002d8  eb030141          ADD      r1,r3,r1,LSL #1       ;969
0002dc  f9b132d0          LDRSH    r3,[r1,#0x2d0]        ;969
0002e0  42b3              CMP      r3,r6                 ;969
0002e2  da08              BGE      |L7.758|
0002e4  f8a162d0          STRH     r6,[r1,#0x2d0]        ;971
0002e8  f881b2b1          STRB     r11,[r1,#0x2b1]
;;;974    							temp_label->tValidMaxPos[map_data-1].c = c;
0002ec  e001              B        |L7.754|
                  |L7.750|
0002ee  e022              B        |L7.822|
                  |L7.752|
0002f0  e006              B        |L7.768|
                  |L7.754|
0002f2  f88102b0          STRB     r0,[r1,#0x2b0]
                  |L7.758|
;;;975    						}
;;;976    
;;;977    
;;;978    						temp_label->usValidCellCnt[map_data-1]++;
0002f6  f8b132f0          LDRH     r3,[r1,#0x2f0]
0002fa  1c5b              ADDS     r3,r3,#1
0002fc  f8a132f0          STRH     r3,[r1,#0x2f0]
                  |L7.768|
000300  1c40              ADDS     r0,r0,#1
000302  4581              CMP      r9,r0
000304  dab2              BGE      |L7.620|
                  |L7.774|
000306  980f              LDR      r0,[sp,#0x3c]
000308  1c52              ADDS     r2,r2,#1
00030a  4290              CMP      r0,r2
00030c  daa1              BGE      |L7.594|
                  |L7.782|
;;;979    					}
;;;980    				}
;;;981    			}
;;;982    		}
;;;983    
;;;984    		temp_label->ucValidNum = MIN(label_new, LOOSE_POSBUF_);
00030e  2d10              CMP      r5,#0x10
000310  bf28              IT       CS
000312  2510              MOVCS    r5,#0x10
000314  9811              LDR      r0,[sp,#0x44]
000316  f8805271          STRB     r5,[r0,#0x271]
;;;985    	}
;;;986    	else{
;;;987    		temp_label->LabelSplitCnt = 0;
;;;988    		temp_label->LabelSplitFrmCnt = 0;
;;;989    		temp_label->LabelSplitMergeCnt = 0;
;;;990    	}
;;;991    }
00031a  b017              ADD      sp,sp,#0x5c
00031c  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.800|
000320  f1b80f38          CMP      r8,#0x38              ;869
000324  bf3c              ITT      CC                    ;871
000326  f1080001          ADDCC    r0,r8,#1              ;871
00032a  f00008ff          ANDCC    r8,r0,#0xff           ;871
00032e  4643              MOV      r3,r8                 ;875
000330  f80d8003          STRB     r8,[sp,r3]            ;875
000334  e741              B        |L7.442|
                  |L7.822|
000336  9911              LDR      r1,[sp,#0x44]         ;987
000338  2000              MOVS     r0,#0                 ;987
00033a  f8c10313          STR      r0,[r1,#0x313]        ;987
00033e  9911              LDR      r1,[sp,#0x44]         ;988
000340  f8c10319          STR      r0,[r1,#0x319]        ;988
000344  9911              LDR      r1,[sp,#0x44]         ;989
000346  f8a10317          STRH     r0,[r1,#0x317]        ;989
00034a  b017              ADD      sp,sp,#0x5c
00034c  e8bd8ff0          POP      {r4-r11,pc}
;;;992    
                          ENDP

                  |L7.848|
                          DCD      ||.data||
                  |L7.852|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Split||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split PROC
;;;998    
;;;999    void algorithm_label_Split(uint8_t _valid_area_idx, uint8_t _label_start_idx, int16_t _LowerThd, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1000   {
000004  b086              SUB      sp,sp,#0x18
;;;1001       int16_t threshold = INT16_MAX; // for labeling
;;;1002       int16_t threshold_next = 0;
;;;1003       uint8_t label_num;
;;;1004       tConflictInfo_t tConflict;
;;;1005       tCell_t tPos;
;;;1006   
;;;1007       int16_t LabelNoiseThd = 0;
;;;1008       int16_t delta;
;;;1009       uint8_t rLabel_val;
;;;1010   
;;;1011   #if defined(FAST_SPLIT)		//original
;;;1012       bool_t sort_en = YES;
;;;1013   #endif
;;;1014       // About 3 groups can be eliminated after re-ordering if it is small unmatched group.
;;;1015       // Grouping Start
;;;1016       label_num = _label_start_idx;
;;;1017   
;;;1018       threshold = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
000006  f8df926c          LDR      r9,|L8.628|
00000a  9103              STR      r1,[sp,#0xc]
00000c  4680              MOV      r8,r0                 ;1000
00000e  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
;;;1019   
;;;1020   //    algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1021   
;;;1022   //    if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usMediumNodeCnt )
;;;1023   //    {
;;;1024   //    	LabelNoiseThd = thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd;
;;;1025   ////    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1026   //    }
;;;1027   //    else if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usSmallNodeCnt )
;;;1028   //    {
;;;1029   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1030   //    }
;;;1031   //    else
;;;1032   //    {
;;;1033   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/10), 5);
;;;1034   //    }
;;;1035   
;;;1036   	LabelNoiseThd = thisModeConf->Label.ucLabelNoiseThd;
000012  f8d91004          LDR      r1,[r9,#4]  ; thisModeConf
000016  eb000048          ADD      r0,r0,r8,LSL #1       ;1018
;;;1037   
;;;1038   #if !defined(FAST_SPLIT)		//original
;;;1039   	uint8_t SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
00001a  2208              MOVS     r2,#8
00001c  f9b0630b          LDRSH    r6,[r0,#0x30b]        ;1018
000020  f8915062          LDRB     r5,[r1,#0x62]         ;1036
;;;1040   	if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
000024  9204              STR      r2,[sp,#0x10]
000026  f99022eb          LDRSB    r2,[r0,#0x2eb]
00002a  4f93              LDR      r7,|L8.632|
00002c  f04f0a00          MOV      r10,#0
000030  19d3              ADDS     r3,r2,r7
000032  f99022ec          LDRSB    r2,[r0,#0x2ec]
000036  f10d0b08          ADD      r11,sp,#8             ;1004
00003a  eb020cc2          ADD      r12,r2,r2,LSL #3
00003e  eb0c1c42          ADD      r12,r12,r2,LSL #5
000042  f24e7247          MOV      r2,#0xe747
000046  eb02024c          ADD      r2,r2,r12,LSL #1
00004a  5c9a              LDRB     r2,[r3,r2]
00004c  bb42              CBNZ     r2,|L8.160|
;;;1041   	{
;;;1042   		tConflict.ulValue = 0;
;;;1043   
;;;1044   		if(thisModeConf->Label.bSplitSearchDirc_4_On)SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
00004e  f8cda008          STR      r10,[sp,#8]
000052  f8911064          LDRB     r1,[r1,#0x64]
000056  2900              CMP      r1,#0
000058  bf1c              ITT      NE
00005a  2104              MOVNE    r1,#4
00005c  9104              STRNE    r1,[sp,#0x10]
;;;1045   		
;;;1046   		algorithm_label_GetConflictInfo(YES, SearchDirc, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
00005e  9909              LDR      r1,[sp,#0x24]
000060  2200              MOVS     r2,#0
000062  e9cdb100          STRD     r11,r1,[sp,#0]
000066  f8b002eb          LDRH     r0,[r0,#0x2eb]
00006a  f8ad0014          STRH     r0,[sp,#0x14]
00006e  e9dd1304          LDRD     r1,r3,[sp,#0x10]
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       algorithm_label_GetConflictInfo
;;;1047   
;;;1048   		if( tConflict.tInfo.NUM == 0 )
000078  f89d000a          LDRB     r0,[sp,#0xa]
00007c  b980              CBNZ     r0,|L8.160|
;;;1049   			algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
00007e  9809              LDR      r0,[sp,#0x24]
000080  9000              STR      r0,[sp,#0]
000082  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
000086  2301              MOVS     r3,#1
000088  eb000048          ADD      r0,r0,r8,LSL #1
00008c  f9b0230b          LDRSH    r2,[r0,#0x30b]
000090  f8b002eb          LDRH     r0,[r0,#0x2eb]
000094  f8ad0004          STRH     r0,[sp,#4]
000098  9901              LDR      r1,[sp,#4]
00009a  9803              LDR      r0,[sp,#0xc]
00009c  f7fffffe          BL       algorithm_label_Insert_NewRecord_to_LabelTable
                  |L8.160|
;;;1050   	}
;;;1051   
;;;1052   	thisInfo->tLabel.LabelSplitMergeCnt = 0;
0000a0  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
0000a4  f8a0a350          STRH     r10,[r0,#0x350]
                  |L8.168|
;;;1053   	
;;;1054       do
;;;1055       {
;;;1056       	threshold = MAX((threshold - LabelNoiseThd), _LowerThd);
0000a8  9908              LDR      r1,[sp,#0x20]
0000aa  1b70              SUBS     r0,r6,r5
0000ac  4288              CMP      r0,r1
0000ae  bfd8              IT       LE
0000b0  4608              MOVLE    r0,r1
0000b2  b206              SXTH     r6,r0
;;;1057   
;;;1058       	// process prev linked-list
;;;1059       	label_num = thisInfo->tLabel.ucNum;
0000b4  4a6f              LDR      r2,|L8.628|
0000b6  6890              LDR      r0,[r2,#8]  ; thisInfo
0000b8  f8901039          LDRB     r1,[r0,#0x39]
;;;1060   
;;;1061   		threshold_next = 0;
0000bc  9105              STR      r1,[sp,#0x14]
0000be  2100              MOVS     r1,#0
;;;1062   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
0000c0  eb000088          ADD      r0,r0,r8,LSL #2
0000c4  9103              STR      r1,[sp,#0xc]
0000c6  f99012ab          LDRSB    r1,[r0,#0x2ab]
0000ca  f99002ac          LDRSB    r0,[r0,#0x2ac]
0000ce  f361240f          BFI      r4,r1,#8,#8
0000d2  4281              CMP      r1,r0
0000d4  f30080c4          BGT.W    |L8.608|
                  |L8.216|
;;;1063   		{
;;;1064   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
0000d8  4866              LDR      r0,|L8.628|
0000da  6880              LDR      r0,[r0,#8]  ; thisInfo
0000dc  eb000088          ADD      r0,r0,r8,LSL #2
0000e0  f99012ad          LDRSB    r1,[r0,#0x2ad]
0000e4  f99002ae          LDRSB    r0,[r0,#0x2ae]
0000e8  f3610407          BFI      r4,r1,#0,#8
0000ec  4281              CMP      r1,r0
0000ee  dc7d              BGT      |L8.492|
0000f0  f3442007          SBFX     r0,r4,#8,#8
;;;1065   			{
;;;1066   //				if(mode == LOCAL_FINGER_MODE)
;;;1067   //				{
;;;1068   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1069   //				}
;;;1070   //				else
;;;1071   				{
;;;1072   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
0000f4  eb0001c0          ADD      r1,r0,r0,LSL #3
0000f8  eb011040          ADD      r0,r1,r0,LSL #5
0000fc  f24e7147          MOV      r1,#0xe747            ;1040
000100  eb070b80          ADD      r11,r7,r0,LSL #2
;;;1073   				}					
;;;1074   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
000104  eb010a40          ADD      r10,r1,r0,LSL #1
                  |L8.264|
000108  fa4ff984          SXTB     r9,r4
00010c  eb0b0049          ADD      r0,r11,r9,LSL #1      ;1072
000110  f64c157e          MOV      r5,#0xc97e            ;1072
000114  5f45              LDRSH    r5,[r0,r5]            ;1072
000116  eb090007          ADD      r0,r9,r7
;;;1075   
;;;1076   				if ((delta >= threshold) && (rLabel_val == 0))
00011a  42b5              CMP      r5,r6
00011c  f810000a          LDRB     r0,[r0,r10]           ;1074
000120  bfa8              IT       GE
000122  2800              CMPGE    r0,#0
000124  d005              BEQ      |L8.306|
;;;1077   				{
;;;1078   					tConflict.tInfo.SET = NO;
;;;1079   					tConflict.tInfo.NUM = 0;
;;;1080   					tConflict.tInfo.BF  = 0;
;;;1081   
;;;1082   					if(thisModeConf->Label.bSplitSearchDirc_4_On)
;;;1083   					{
;;;1084   						if(thisInfo->DrawingDirection == 1 || thisInfo->DrawingDirection == 2)SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
;;;1085   						else SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
;;;1086   					}
;;;1087   						
;;;1088   					algorithm_label_GetConflictInfo(YES, SearchDirc, 0, tPos, &tConflict, mode);
;;;1089   	
;;;1090   					if( tConflict.tInfo.NUM == 0 )
;;;1091   					{
;;;1092   						thisInfo->tLabel.LabelSplitMergeCnt++;
;;;1093   						if(thisInfo->TouchNumCnt > thisModeConf->Coord.ucTouchCountMax && label_num >= thisInfo->tCoord.tOrgPastPos[0].sFinger_)	continue;
;;;1094   						
;;;1095   						if( label_num < LOOSE_POSBUF_ )
;;;1096   						{
;;;1097   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1098   
;;;1099   							label_num++;
;;;1100   						}
;;;1101   					}
;;;1102   				}
;;;1103   				else if( delta < threshold )
000126  42b5              CMP      r5,r6
;;;1104   				{
;;;1105   					if( threshold_next < delta )
;;;1106   					{
;;;1107   						threshold_next = delta;
000128  bfbe              ITTT     LT
00012a  9803              LDRLT    r0,[sp,#0xc]
00012c  42a8              CMPLT    r0,r5
00012e  9503              STRLT    r5,[sp,#0xc]
000130  e07a              B        |L8.552|
                  |L8.306|
000132  f89d000b          LDRB     r0,[sp,#0xb]          ;1078
000136  f0200080          BIC      r0,r0,#0x80           ;1078
00013a  f88d000b          STRB     r0,[sp,#0xb]          ;1078
00013e  2000              MOVS     r0,#0                 ;1079
000140  f88d000a          STRB     r0,[sp,#0xa]          ;1079
000144  f8ad0008          STRH     r0,[sp,#8]            ;1080
000148  484a              LDR      r0,|L8.628|
00014a  6840              LDR      r0,[r0,#4]            ;1082  ; thisModeConf
00014c  f8900064          LDRB     r0,[r0,#0x64]         ;1082
000150  b158              CBZ      r0,|L8.362|
000152  4848              LDR      r0,|L8.628|
000154  6880              LDR      r0,[r0,#8]            ;1084  ; thisInfo
000156  f5005080          ADD      r0,r0,#0x1000         ;1084
00015a  f8900172          LDRB     r0,[r0,#0x172]        ;1084
00015e  2801              CMP      r0,#1                 ;1084
000160  bf16              ITET     NE                    ;1084
000162  2802              CMPNE    r0,#2                 ;1084
000164  2008              MOVEQ    r0,#8                 ;1084
000166  2004              MOVNE    r0,#4                 ;1085
000168  9004              STR      r0,[sp,#0x10]         ;1084
                  |L8.362|
00016a  9909              LDR      r1,[sp,#0x24]         ;1088
00016c  a802              ADD      r0,sp,#8              ;1088
00016e  e9cd0100          STRD     r0,r1,[sp,#0]         ;1088
000172  4623              MOV      r3,r4                 ;1088
000174  f04f0200          MOV      r2,#0                 ;1088
000178  f04f0001          MOV      r0,#1                 ;1088
00017c  9904              LDR      r1,[sp,#0x10]         ;1088
00017e  f7fffffe          BL       algorithm_label_GetConflictInfo
000182  f89d000a          LDRB     r0,[sp,#0xa]          ;1090
000186  2800              CMP      r0,#0                 ;1090
000188  d14e              BNE      |L8.552|
00018a  483a              LDR      r0,|L8.628|
00018c  6881              LDR      r1,[r0,#8]            ;1092  ; thisInfo
00018e  f8b12350          LDRH     r2,[r1,#0x350]        ;1092
000192  1c52              ADDS     r2,r2,#1              ;1092
000194  f8a12350          STRH     r2,[r1,#0x350]        ;1092
000198  6840              LDR      r0,[r0,#4]            ;1093  ; thisModeConf
00019a  f2411276          MOV      r2,#0x1176            ;1093
00019e  5a52              LDRH     r2,[r2,r1]            ;1093
0001a0  f8900102          LDRB     r0,[r0,#0x102]        ;1093
0001a4  4282              CMP      r2,r0                 ;1093
0001a6  d904              BLS      |L8.434|
0001a8  f89129d7          LDRB     r2,[r1,#0x9d7]        ;1093
0001ac  9805              LDR      r0,[sp,#0x14]         ;1093
0001ae  4282              CMP      r2,r0                 ;1093
0001b0  d93a              BLS      |L8.552|
                  |L8.434|
0001b2  9805              LDR      r0,[sp,#0x14]         ;1095
0001b4  2810              CMP      r0,#0x10              ;1095
0001b6  d237              BCS      |L8.552|
0001b8  f1000e01          ADD      lr,r0,#1              ;1095
0001bc  ebc002c0          RSB      r2,r0,r0,LSL #3       ;1095
0001c0  eb021040          ADD      r0,r2,r0,LSL #5       ;1095
0001c4  3139              ADDS     r1,r1,#0x39           ;1095
0001c6  4408              ADD      r0,r0,r1              ;1095
0001c8  9400              STR      r4,[sp,#0]            ;1095
0001ca  f880e001          STRB     lr,[r0,#1]            ;1095
0001ce  8105              STRH     r5,[r0,#8]            ;1095
0001d0  f8bd2000          LDRH     r2,[sp,#0]            ;1095
0001d4  8142              STRH     r2,[r0,#0xa]          ;1095
0001d6  f99d3001          LDRSB    r3,[sp,#1]            ;1095
0001da  7083              STRB     r3,[r0,#2]            ;1095
0001dc  70c3              STRB     r3,[r0,#3]            ;1095
0001de  f99d2000          LDRSB    r2,[sp,#0]            ;1095
0001e2  7102              STRB     r2,[r0,#4]            ;1095
0001e4  7142              STRB     r2,[r0,#5]            ;1095
0001e6  fb02fc05          MUL      r12,r2,r5             ;1095
0001ea  e000              B        |L8.494|
                  |L8.492|
0001ec  e02a              B        |L8.580|
                  |L8.494|
0001ee  f8c0c00c          STR      r12,[r0,#0xc]         ;1095
0001f2  fb03fc05          MUL      r12,r3,r5             ;1095
0001f6  f8c0c010          STR      r12,[r0,#0x10]        ;1095
0001fa  6145              STR      r5,[r0,#0x14]         ;1095
0001fc  6185              STR      r5,[r0,#0x18]         ;1095
0001fe  f04f0c01          MOV      r12,#1                ;1095
000202  f8a0c006          STRH     r12,[r0,#6]           ;1095
000206  eb030cc3          ADD      r12,r3,r3,LSL #3      ;1095
00020a  eb0c1c43          ADD      r12,r12,r3,LSL #5     ;1095
00020e  f24e7347          MOV      r3,#0xe747            ;1095
000212  443a              ADD      r2,r2,r7              ;1095
000214  eb03034c          ADD      r3,r3,r12,LSL #1      ;1095
000218  7840              LDRB     r0,[r0,#1]            ;1095
00021a  54d0              STRB     r0,[r2,r3]            ;1095
00021c  7808              LDRB     r0,[r1,#0]            ;1095
00021e  1c40              ADDS     r0,r0,#1              ;1095
000220  7008              STRB     r0,[r1,#0]            ;1095
000222  f00e00ff          AND      r0,lr,#0xff           ;1099
000226  9005              STR      r0,[sp,#0x14]         ;1099
                  |L8.552|
000228  4912              LDR      r1,|L8.628|
00022a  f1090001          ADD      r0,r9,#1
00022e  b240              SXTB     r0,r0
000230  6889              LDR      r1,[r1,#8]  ; thisInfo
000232  f3600407          BFI      r4,r0,#0,#8
000236  eb010188          ADD      r1,r1,r8,LSL #2
00023a  f99112ae          LDRSB    r1,[r1,#0x2ae]
00023e  4288              CMP      r0,r1
000240  f77faf62          BLE      |L8.264|
                  |L8.580|
000244  490b              LDR      r1,|L8.628|
000246  1220              ASRS     r0,r4,#8
000248  1c40              ADDS     r0,r0,#1
00024a  6889              LDR      r1,[r1,#8]  ; thisInfo
00024c  b240              SXTB     r0,r0
00024e  eb010188          ADD      r1,r1,r8,LSL #2
000252  f360240f          BFI      r4,r0,#8,#8
000256  f99112ac          LDRSB    r1,[r1,#0x2ac]
00025a  4288              CMP      r0,r1
00025c  f77faf3c          BLE      |L8.216|
                  |L8.608|
;;;1108   					}
;;;1109   				}
;;;1110   			}
;;;1111   		}
;;;1112   
;;;1113   		//if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallTouchThd/*thisModeConf->Label.usLargeTouchThd*/ )
;;;1114   		{
;;;1115   			LabelNoiseThd = (threshold - threshold_next);
000260  9803              LDR      r0,[sp,#0xc]
000262  1a30              SUBS     r0,r6,r0
000264  b205              SXTH     r5,r0
000266  9808              LDR      r0,[sp,#0x20]
000268  4286              CMP      r6,r0
00026a  f73faf1d          BGT      |L8.168|
;;;1116   		}
;;;1117       } while (threshold > _LowerThd);
;;;1118   #else
;;;1119   
;;;1120       if(sort_en == YES)
;;;1121       {
;;;1122       	int valid_sort_num;
;;;1123       	int temp_data;
;;;1124       	int max_pos;
;;;1125   		int comp_val;
;;;1126   		int split_num = 0;
;;;1127   		int split_num_first = 0;
;;;1128   		int split_start_num;
;;;1129       	tCell_t temp_pos;
;;;1130   
;;;1131   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1132   		{
;;;1133   			tConflict.ulValue = 0;
;;;1134   
;;;1135   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1136   
;;;1137   			if( tConflict.tInfo.NUM == 0 )
;;;1138   			{
;;;1139   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1140   				split_buf[split_num_first] = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
;;;1141   				split_pos[split_num_first] = thisInfo->tLabel.tValidMaxPos[_valid_area_idx];
;;;1142   				split_num_first++;
;;;1143   			}
;;;1144   		}
;;;1145   		split_start_num = split_num_first;
;;;1146   	
;;;1147   		comp_val = (threshold - LabelNoiseThd);
;;;1148       	split_num = MAX_SPLIT_NUM-1;
;;;1149   
;;;1150   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1151   		{
;;;1152   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1153   			{
;;;1154   //				if(mode == LOCAL_FINGER_MODE)
;;;1155   //				{
;;;1156   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1157   //				}
;;;1158   //				else
;;;1159   				{
;;;1160   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1161   				}
;;;1162   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1163   
;;;1164   				if(delta >= comp_val && rLabel_val == 0)
;;;1165   				{
;;;1166   					split_buf[split_num_first] = delta;
;;;1167   					split_pos[split_num_first] = tPos;
;;;1168   					split_num_first++;
;;;1169   				}
;;;1170   				else if(delta >= _LowerThd && rLabel_val == 0)
;;;1171   				{
;;;1172   					split_buf[split_num] = delta;
;;;1173   					split_pos[split_num] = tPos;
;;;1174   					split_num--;
;;;1175   					if(split_num < split_num_first)
;;;1176   					{
;;;1177   						tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].re;
;;;1178   						break;
;;;1179   					}
;;;1180   				}
;;;1181   			}
;;;1182   		}
;;;1183   		
;;;1184   		valid_sort_num = MAX_SPLIT_NUM - 1 - split_num + split_num_first;
;;;1185   		
;;;1186   		for(i=split_num_first; i<valid_sort_num; i++)
;;;1187   		{
;;;1188   			split_num++;
;;;1189   			split_buf[i] = split_buf[split_num];
;;;1190   			split_pos[i] = split_pos[split_num];
;;;1191   		}
;;;1192   
;;;1193   		for(i=split_num_first; i<valid_sort_num-1; i++)
;;;1194   		{
;;;1195   			temp_data = split_buf[i];
;;;1196   			max_pos = i;
;;;1197   			for(ii=i+1; ii<valid_sort_num; ii++)
;;;1198   			{
;;;1199   				if(temp_data < split_buf[ii])
;;;1200   					max_pos = ii, temp_data = split_buf[ii];
;;;1201   			}
;;;1202   			split_buf[max_pos] = split_buf[i];
;;;1203   			split_buf[i] = temp_data;
;;;1204   			temp_pos = split_pos[max_pos];
;;;1205   			split_pos[max_pos] = split_pos[i];
;;;1206   			split_pos[i] = temp_pos;
;;;1207   		}
;;;1208   
;;;1209       	label_num = thisInfo->tLabel.ucNum;
;;;1210   		for(i=split_start_num; i<valid_sort_num; i++)
;;;1211   		{
;;;1212   			rLabel_val = HAL_READ_LABEL_IMAGE(split_pos[i].r, split_pos[i].c);
;;;1213   
;;;1214   			if (rLabel_val == 0)
;;;1215   			{
;;;1216   				tConflict.tInfo.SET = NO;
;;;1217   				tConflict.tInfo.NUM = 0;
;;;1218   				tConflict.tInfo.BF  = 0;
;;;1219   
;;;1220   				algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, split_pos[i], &tConflict, mode);
;;;1221   
;;;1222   				if( tConflict.tInfo.NUM == 0 )
;;;1223   				{
;;;1224   					if( label_num < LOOSE_POSBUF_ )
;;;1225   					{
;;;1226   						algorithm_label_Insert_NewRecord_to_LabelTable(label_num, split_pos[i], split_buf[i], YES, mode);
;;;1227   
;;;1228   						label_num++;
;;;1229   					}
;;;1230   				}
;;;1231   			}
;;;1232   		}
;;;1233       }
;;;1234       else
;;;1235       {
;;;1236   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1237   		{
;;;1238   			tConflict.ulValue = 0;
;;;1239   
;;;1240   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1241   
;;;1242   			if( tConflict.tInfo.NUM == 0 )
;;;1243   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1244   		}
;;;1245   
;;;1246   		// process prev linked-list
;;;1247   		label_num = thisInfo->tLabel.ucNum;
;;;1248   
;;;1249   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1250   		{
;;;1251   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1252   			{
;;;1253   //				if(mode == LOCAL_FINGER_MODE)
;;;1254   //				{
;;;1255   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1256   //				}
;;;1257   //				else
;;;1258   				{
;;;1259   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1260   				}
;;;1261   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1262   
;;;1263   				if ((delta >= _LowerThd) && (rLabel_val == 0))
;;;1264   				{
;;;1265   					tConflict.tInfo.SET = NO;
;;;1266   					tConflict.tInfo.NUM = 0;
;;;1267   					tConflict.tInfo.BF  = 0;
;;;1268   
;;;1269   					algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1270   
;;;1271   					if( tConflict.tInfo.NUM == 0 )
;;;1272   					{
;;;1273   						if( label_num < LOOSE_POSBUF_ )
;;;1274   						{
;;;1275   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1276   
;;;1277   							label_num++;
;;;1278   						}
;;;1279   					}
;;;1280   				}
;;;1281   			}
;;;1282   		}
;;;1283       }
;;;1284   #endif
;;;1285   }
00026e  b00a              ADD      sp,sp,#0x28
000270  e8bd8ff0          POP      {r4-r11,pc}
;;;1286   
                          ENDP

                  |L8.628|
                          DCD      ||.data||
                  |L8.632|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_SplitNMerge_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_SplitNMerge_process PROC
;;;1827   
;;;1828   void algorithm_label_SplitNMerge_process(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1829   {
;;;1830   	uint8_t valid_area_idx, label_start_idx;
;;;1831   	uint16_t usLabelThd;
;;;1832   
;;;1833   	tOrigDeltaInfo_t	*temp_delta;
;;;1834   	tLabelInfo_t 		*temp_label;
;;;1835   
;;;1836   	temp_delta = &thisInfo->tDelta;
000004  4f36              LDR      r7,|L9.224|
000006  4680              MOV      r8,r0                 ;1829
000008  4639              MOV      r1,r7
00000a  68b8              LDR      r0,[r7,#8]  ; thisInfo
;;;1837   	temp_label = &thisInfo->tLabel;
;;;1838   	
;;;1839   	
;;;1840   #if ADAPTIVE_SEEDBASE
;;;1841   			int16_t AdaptiveSeedBase = 0;
;;;1842   			
;;;1843   			if(thisInfo->bIsPalm){
;;;1844   				AdaptiveSeedBase = thisModeConf->Label.usSeedBase - (temp_delta->iPosCnt>>4);
00000c  6849              LDR      r1,[r1,#4]
00000e  f100020d          ADD      r2,r0,#0xd            ;1836
000012  f1000539          ADD      r5,r0,#0x39           ;1837
000016  f8900fb2          LDRB     r0,[r0,#0xfb2]        ;1843
00001a  2800              CMP      r0,#0                 ;1843
;;;1845   				if(AdaptiveSeedBase < (thisModeConf->Label.usSeedBase>>1))
;;;1846   					AdaptiveSeedBase = (thisModeConf->Label.usSeedBase>>1);
;;;1847   			}
;;;1848   			else					
;;;1849   				AdaptiveSeedBase = thisModeConf->Label.usSeedBase;
00001c  bf08              IT       EQ
00001e  f9b1005f          LDRSHEQ  r0,[r1,#0x5f]
000022  d008              BEQ      |L9.54|
000024  f8b1305f          LDRH     r3,[r1,#0x5f]         ;1844
000028  6950              LDR      r0,[r2,#0x14]         ;1844
00002a  eba31020          SUB      r0,r3,r0,ASR #4       ;1844
00002e  b200              SXTH     r0,r0                 ;1844
000030  ebb00f53          CMP      r0,r3,LSR #1          ;1846
000034  db4f              BLT      |L9.214|
                  |L9.54|
;;;1850   			
;;;1851   			usLabelThd  = AdaptiveSeedBase;
;;;1852   			usLabelThd += ((temp_delta->iMaxStrength - AdaptiveSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
000036  6893              LDR      r3,[r2,#8]
000038  f8911061          LDRB     r1,[r1,#0x61]
00003c  1a1b              SUBS     r3,r3,r0
00003e  4359              MULS     r1,r3,r1
000040  eb0010a1          ADD      r0,r0,r1,ASR #6
;;;1853   #else			
;;;1854   			usLabelThd  = thisModeConf->Label.usSeedBase;
;;;1855   			usLabelThd += ((temp_delta->iMaxStrength - thisModeConf->Label.usSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
;;;1856   #endif		
;;;1857   	
;;;1858   	algorithm_label_SearchValidArea(temp_delta->tValidRect, usLabelThd, mode);
000044  6813              LDR      r3,[r2,#0]
000046  b201              SXTH     r1,r0
000048  4642              MOV      r2,r8
00004a  460e              MOV      r6,r1
00004c  4618              MOV      r0,r3
00004e  f7fffffe          BL       algorithm_label_SearchValidArea
;;;1859   
;;;1860   	if(thisModeConf->Palm.ucPalmDetectionOn == 2 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 1))
000052  6878              LDR      r0,[r7,#4]  ; thisModeConf
000054  f89001ff          LDRB     r0,[r0,#0x1ff]
000058  2802              CMP      r0,#2
00005a  d008              BEQ      |L9.110|
00005c  2803              CMP      r0,#3
00005e  d109              BNE      |L9.116|
000060  68b8              LDR      r0,[r7,#8]  ; thisInfo
000062  f5005080          ADD      r0,r0,#0x1000
000066  f8900178          LDRB     r0,[r0,#0x178]
00006a  2801              CMP      r0,#1
00006c  d102              BNE      |L9.116|
                  |L9.110|
;;;1861   		algorithm_label_palm_rejection(mode);
00006e  4640              MOV      r0,r8
000070  f7fffffe          BL       algorithm_label_palm_rejection
                  |L9.116|
;;;1862   	
;;;1863   	for( valid_area_idx=0; valid_area_idx<temp_label->ucValidNum; valid_area_idx++ )
000074  f8950271          LDRB     r0,[r5,#0x271]
000078  2400              MOVS     r4,#0
00007a  2800              CMP      r0,#0
00007c  d91e              BLS      |L9.188|
;;;1864   	{
;;;1865   		label_start_idx = temp_label->ucNum;
00007e  bf00              NOP      
                  |L9.128|
000080  f8959000          LDRB     r9,[r5,#0]
;;;1866   		
;;;1867   	#ifdef SHORT_COMPENSATION			
;;;1868   		algorithm_label_Delta_Compensation(valid_area_idx, label_start_idx, usLabelThd);
;;;1869   	#endif
;;;1870   		
;;;1871   		algorithm_label_Split(valid_area_idx, label_start_idx, usLabelThd, mode);
000084  4643              MOV      r3,r8
000086  4632              MOV      r2,r6
000088  4649              MOV      r1,r9
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       algorithm_label_Split
;;;1872   		label_start_idx = algorithm_label_Split_PostProcess(valid_area_idx, label_start_idx, mode);
000090  4642              MOV      r2,r8
000092  4649              MOV      r1,r9
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       algorithm_label_Split_PostProcess
00009a  4681              MOV      r9,r0
;;;1873   		algorithm_label_Merge(valid_area_idx, label_start_idx, mode);
00009c  4601              MOV      r1,r0
00009e  4642              MOV      r2,r8
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       algorithm_label_Merge
;;;1874   		algorithm_label_Merge_PostProcess(valid_area_idx, label_start_idx, mode);			
0000a6  4642              MOV      r2,r8
0000a8  4649              MOV      r1,r9
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       algorithm_label_Merge_PostProcess
0000b0  1c60              ADDS     r0,r4,#1
0000b2  b2c4              UXTB     r4,r0
0000b4  f8950271          LDRB     r0,[r5,#0x271]
0000b8  42a0              CMP      r0,r4
0000ba  d8e1              BHI      |L9.128|
                  |L9.188|
;;;1875   	}
;;;1876   
;;;1877   	if( thisModeConf->Label.bExpand )
0000bc  6878              LDR      r0,[r7,#4]  ; thisModeConf
0000be  f8900063          LDRB     r0,[r0,#0x63]
0000c2  2800              CMP      r0,#0
;;;1878   	{
;;;1879   		algorithm_label_MarkBoundary(YES, mode);
;;;1880   	}
;;;1881   
;;;1882   //#if (FingerAreaPenDeltaDelete==1 || FingerAreaPenDeltaNoAcc==1 || FingerAreaLineFilter == 1)		
;;;1883   //	if(thisModeConf->BaseLine.cFingerAreaPenDeltaDelete != 0 || thisModeConf->BaseLine.cFingerAreaPenDeltaNoAcc != 0 || thisModeConf->SensingFilter.sFingerAreaLineFilterLimit != 0)
;;;1884   //	{
;;;1885   //		int i;
;;;1886   //		for(i = 0; i<temp_label->ucNum; i++)
;;;1887   //		{
;;;1888   //			if(thisInfo->tPenInfo.LocalFingerArea.rs > temp_label->tTable[i].tRect.rs)thisInfo->tPenInfo.LocalFingerArea.rs = temp_label->tTable[i].tRect.rs;
;;;1889   //			if(thisInfo->tPenInfo.LocalFingerArea.re < temp_label->tTable[i].tRect.re)thisInfo->tPenInfo.LocalFingerArea.re = temp_label->tTable[i].tRect.re;
;;;1890   //			if(thisInfo->tPenInfo.LocalFingerArea.cs > temp_label->tTable[i].tRect.cs)thisInfo->tPenInfo.LocalFingerArea.cs = temp_label->tTable[i].tRect.cs;
;;;1891   //			if(thisInfo->tPenInfo.LocalFingerArea.ce < temp_label->tTable[i].tRect.ce)thisInfo->tPenInfo.LocalFingerArea.ce = temp_label->tTable[i].tRect.ce;
;;;1892   //		}
;;;1893   //	}	
;;;1894   //#endif
;;;1895   }
0000c4  bf08              IT       EQ
0000c6  e8bd87f0          POPEQ    {r4-r10,pc}
0000ca  4641              MOV      r1,r8                 ;1879
0000cc  e8bd47f0          POP      {r4-r10,lr}           ;1879
0000d0  2001              MOVS     r0,#1                 ;1879
0000d2  f7ffbffe          B.W      algorithm_label_MarkBoundary
                  |L9.214|
0000d6  f8b1005f          LDRH     r0,[r1,#0x5f]         ;1846
0000da  0840              LSRS     r0,r0,#1              ;1846
0000dc  e7ab              B        |L9.54|
;;;1896   
                          ENDP

0000de  0000              DCW      0x0000
                  |L9.224|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_Split_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split_PostProcess PROC
;;;1334   
;;;1335   uint8_t algorithm_label_Split_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1336   {
;;;1337   	//heon
;;;1338   	int sum = 0;
;;;1339   	
;;;1340   	int l;
;;;1341   	int16_t d, label_id;
;;;1342   	tConflictInfo_t tConflict;
;;;1343   	tCell_t tPos;
;;;1344   	uint8_t rtn_val = _label_start_idx;
000004  4688              MOV      r8,r1
;;;1345   
;;;1346   	tLabelInfo_t	*temp_label;
;;;1347   
;;;1348   	temp_label = &thisInfo->tLabel;
000006  4974              LDR      r1,|L10.472|
000008  4692              MOV      r10,r2                ;1336
00000a  b088              SUB      sp,sp,#0x20           ;1336
00000c  688a              LDR      r2,[r1,#8]  ; thisInfo
00000e  3239              ADDS     r2,r2,#0x39
;;;1349   
;;;1350   	for( tPos.r=temp_label->tValidRect[_valid_area_idx].rs; tPos.r<=temp_label->tValidRect[_valid_area_idx].re; tPos.r++ )
000010  eb020080          ADD      r0,r2,r0,LSL #2
000014  9205              STR      r2,[sp,#0x14]
000016  9004              STR      r0,[sp,#0x10]
000018  f9902272          LDRSB    r2,[r0,#0x272]
00001c  f9900273          LDRSB    r0,[r0,#0x273]
000020  f362250f          BFI      r5,r2,#8,#8
000024  4282              CMP      r2,r0
;;;1351   	{
;;;1352   		for( tPos.c=temp_label->tValidRect[_valid_area_idx].cs; tPos.c<=temp_label->tValidRect[_valid_area_idx].ce; tPos.c++ )
;;;1353   		{
;;;1354   			label_id = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1355   
;;;1356   			if( label_id == LABEL_CONFLICT_MARKER )
;;;1357   			{
;;;1358   				sum = 0;
;;;1359   				tConflict.ulValue = 0;
;;;1360   
;;;1361   				algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1362   				
;;;1363   				#if WeightedConflict
;;;1364   				for( l=LOOSE_POSBUF_; l--; )
;;;1365   				{
;;;1366   					if( (tConflict.tInfo.BF & _BV(l)) )
000026  bfd8              IT       LE
000028  2701              MOVLE    r7,#1
00002a  dc43              BGT      |L10.180|
                  |L10.44|
00002c  9804              LDR      r0,[sp,#0x10]         ;1352
00002e  9904              LDR      r1,[sp,#0x10]         ;1352
000030  f9900274          LDRSB    r0,[r0,#0x274]        ;1352
000034  f9911275          LDRSB    r1,[r1,#0x275]        ;1352
000038  f3600507          BFI      r5,r0,#0,#8           ;1352
00003c  4288              CMP      r0,r1                 ;1352
00003e  dc2f              BGT      |L10.160|
000040  f3452007          SBFX     r0,r5,#8,#8           ;1354
000044  eb0002c0          ADD      r2,r0,r0,LSL #3       ;1354
000048  f24e7147          MOV      r1,#0xe747            ;1354
00004c  eb021040          ADD      r0,r2,r0,LSL #5       ;1354
000050  eb010140          ADD      r1,r1,r0,LSL #1       ;1354
000054  9107              STR      r1,[sp,#0x1c]         ;1354
000056  4961              LDR      r1,|L10.476|
;;;1367   					{
;;;1368   						testLabelSum[l] = heon_algorithm(l+1, 0, tPos);
;;;1369   						sum += heon_algorithm(l+1, 0, tPos);
;;;1370   					}
;;;1371   				}
;;;1372   				testSum = sum;
;;;1373   				testConflictValue = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
000058  eb010180          ADD      r1,r1,r0,LSL #2
00005c  9106              STR      r1,[sp,#0x18]
00005e  495f              LDR      r1,|L10.476|
;;;1374   				#endif
;;;1375   				
;;;1376   				for( l=LOOSE_POSBUF_; l--; )
;;;1377   				{
;;;1378   					if( (tConflict.tInfo.BF & _BV(l)) )
;;;1379   					{
;;;1380   //						if(mode == LOCAL_FINGER_MODE)
;;;1381   //							d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1382   //						else
;;;1383   //						d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1384   
;;;1385   						#if WeightedConflict
;;;1386   							#if ConflictTest
;;;1387   								if(sum != 0 && tPos.c < COL_MAX >> 1){
;;;1388   									d = (HAL_READ_DELTA_IMAGE(tPos.r, tPos.c) * heon_algorithm(l+1, 0, tPos)/ sum);
;;;1389   									testNewD = d;
;;;1390   								}
;;;1391   								else
;;;1392   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1393   								
;;;1394   							#else
;;;1395   								if(sum != 0){
;;;1396   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c) * heon_algorithm(l+1, 0, tPos)/ sum;
;;;1397   									testNewD = d;
;;;1398   								}
;;;1399   								else
;;;1400   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1401   							#endif
;;;1402   								
;;;1403   						testOldD = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1404   						testRealD = d;
;;;1405   								
;;;1406   						#else
;;;1407   							d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1408   						#endif
;;;1409   						
;;;1410   						algorithm_label_Add_NewNode_to_LabelRecord(l, tPos, d, NO, NO, mode);
;;;1411   
;;;1412   						temp_label->tTable[l].tConflictInfo.tInfo.BF |= tConflict.tInfo.BF;
;;;1413   						if(rtn_val > l)        rtn_val = l;
;;;1414   					}
;;;1415   				}
;;;1416   
;;;1417   				tConflict.tInfo.SET = YES;
;;;1418   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, tConflict.ulValue);
000060  eb0100c0          ADD      r0,r1,r0,LSL #3
000064  f8cd000c          STR.W    r0,[sp,#0xc]
                  |L10.104|
000068  485c              LDR      r0,|L10.476|
00006a  fa4ff985          SXTB     r9,r5
00006e  eb090100          ADD      r1,r9,r0              ;1354
000072  9807              LDR      r0,[sp,#0x1c]         ;1354
000074  5c08              LDRB     r0,[r1,r0]            ;1354
000076  283f              CMP      r0,#0x3f              ;1356
000078  d020              BEQ      |L10.188|
;;;1419   			}
;;;1420   			else
;;;1421   			{
;;;1422   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, 0);
00007a  9803              LDR      r0,[sp,#0xc]
00007c  2100              MOVS     r1,#0
00007e  eb000089          ADD      r0,r0,r9,LSL #2
000082  f5004000          ADD      r0,r0,#0x8000
000086  f8c01dec          STR      r1,[r0,#0xdec]
00008a  bf00              NOP                            ;1352
                  |L10.140|
00008c  9904              LDR      r1,[sp,#0x10]         ;1352
00008e  f1090001          ADD      r0,r9,#1              ;1352
000092  b240              SXTB     r0,r0                 ;1352
000094  f9911275          LDRSB    r1,[r1,#0x275]        ;1352
000098  f3600507          BFI      r5,r0,#0,#8           ;1352
00009c  4288              CMP      r0,r1                 ;1352
00009e  dde3              BLE      |L10.104|
                  |L10.160|
0000a0  9904              LDR      r1,[sp,#0x10]         ;1350
0000a2  1228              ASRS     r0,r5,#8              ;1352
0000a4  1c40              ADDS     r0,r0,#1              ;1352
0000a6  b240              SXTB     r0,r0                 ;1350
0000a8  f9911273          LDRSB    r1,[r1,#0x273]        ;1350
0000ac  f360250f          BFI      r5,r0,#8,#8           ;1350
0000b0  4288              CMP      r0,r1                 ;1350
0000b2  ddbb              BLE      |L10.44|
                  |L10.180|
;;;1423   			}
;;;1424   		}
;;;1425   	}
;;;1426   	return rtn_val;
;;;1427   }
0000b4  b008              ADD      sp,sp,#0x20
0000b6  4640              MOV      r0,r8                 ;1426
0000b8  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.188|
0000bc  a802              ADD      r0,sp,#8              ;1361
0000be  2600              MOVS     r6,#0                 ;1358
0000c0  e9cd0a00          STRD     r0,r10,[sp,#0]        ;1361
0000c4  462b              MOV      r3,r5                 ;1361
0000c6  4632              MOV      r2,r6                 ;1361
0000c8  2108              MOVS     r1,#8                 ;1361
0000ca  9602              STR      r6,[sp,#8]            ;1361
0000cc  4630              MOV      r0,r6                 ;1361
0000ce  f7fffffe          BL       algorithm_label_GetConflictInfo
0000d2  f8dfb10c          LDR      r11,|L10.480|
0000d6  240f              MOVS     r4,#0xf               ;1364
                  |L10.216|
0000d8  f8bd0008          LDRH     r0,[sp,#8]            ;1366
0000dc  fa07f104          LSL      r1,r7,r4              ;1366
0000e0  4208              TST      r0,r1                 ;1366
0000e2  d00c              BEQ      |L10.254|
0000e4  462a              MOV      r2,r5                 ;1368
0000e6  2100              MOVS     r1,#0                 ;1368
0000e8  1c60              ADDS     r0,r4,#1              ;1368
0000ea  f7fffffe          BL       heon_algorithm
0000ee  f84b0024          STR      r0,[r11,r4,LSL #2]    ;1368
0000f2  462a              MOV      r2,r5                 ;1369
0000f4  2100              MOVS     r1,#0                 ;1369
0000f6  1c60              ADDS     r0,r4,#1              ;1369
0000f8  f7fffffe          BL       heon_algorithm
0000fc  4406              ADD      r6,r6,r0              ;1369
                  |L10.254|
0000fe  1e64              SUBS     r4,r4,#1              ;1369
000100  d2ea              BCS      |L10.216|
000102  4835              LDR      r0,|L10.472|
000104  240f              MOVS     r4,#0xf               ;1376
000106  6106              STR      r6,[r0,#0x10]         ;1372  ; testSum
000108  9a06              LDR      r2,[sp,#0x18]         ;1373
00010a  eb020249          ADD      r2,r2,r9,LSL #1       ;1373
00010e  f5024b40          ADD      r11,r2,#0xc000        ;1373
000112  f9bb297e          LDRSH    r2,[r11,#0x97e]       ;1373
000116  60c2              STR      r2,[r0,#0xc]          ;1376  ; testConflictValue
                  |L10.280|
000118  f8bd1008          LDRH     r1,[sp,#8]            ;1378
00011c  fa07f004          LSL      r0,r7,r4              ;1378
000120  4201              TST      r1,r0                 ;1378
000122  d047              BEQ      |L10.436|
000124  2e00              CMP      r6,#0                 ;1387
000126  bf18              IT       NE                    ;1387
000128  f1b90f28          CMPNE    r9,#0x28              ;1387
00012c  da1b              BGE      |L10.358|
00012e  462a              MOV      r2,r5                 ;1388
000130  2100              MOVS     r1,#0                 ;1388
000132  1c60              ADDS     r0,r4,#1              ;1388
000134  f7fffffe          BL       heon_algorithm
000138  f3452107          SBFX     r1,r5,#8,#8           ;1388
00013c  eb0102c1          ADD      r2,r1,r1,LSL #3       ;1388
000140  eb021241          ADD      r2,r2,r1,LSL #5       ;1388
000144  4925              LDR      r1,|L10.476|
000146  eb010182          ADD      r1,r1,r2,LSL #2       ;1388
00014a  b26a              SXTB     r2,r5                 ;1388
00014c  eb010142          ADD      r1,r1,r2,LSL #1       ;1388
000150  f5014140          ADD      r1,r1,#0xc000         ;1388
000154  f9b1197e          LDRSH    r1,[r1,#0x97e]        ;1388
000158  4348              MULS     r0,r1,r0              ;1388
00015a  fb90f0f6          SDIV     r0,r0,r6              ;1388
00015e  b202              SXTH     r2,r0                 ;1388
000160  481d              LDR      r0,|L10.472|
000162  6182              STR      r2,[r0,#0x18]         ;1389  ; testNewD
000164  e006              B        |L10.372|
                  |L10.358|
000166  f9bb097e          LDRSH    r0,[r11,#0x97e]       ;1392
00016a  f89d100a          LDRB     r1,[sp,#0xa]          ;1392
00016e  fb90f0f1          SDIV     r0,r0,r1              ;1392
000172  b202              SXTH     r2,r0                 ;1392
                  |L10.372|
000174  f9bb197e          LDRSH    r1,[r11,#0x97e]       ;1403
000178  f89d000a          LDRB     r0,[sp,#0xa]          ;1403
00017c  2300              MOVS     r3,#0                 ;1410
00017e  fb91f1f0          SDIV     r1,r1,r0              ;1403
000182  4815              LDR      r0,|L10.472|
000184  61c2              STR      r2,[r0,#0x1c]         ;1410  ; testRealD
000186  6141              STR      r1,[r0,#0x14]         ;1410  ; testOldD
000188  2000              MOVS     r0,#0                 ;1410
00018a  e9cd0a00          STRD     r0,r10,[sp,#0]        ;1410
00018e  b2e0              UXTB     r0,r4                 ;1410
000190  4629              MOV      r1,r5                 ;1410
000192  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000196  ebc400c4          RSB      r0,r4,r4,LSL #3       ;1412
00019a  eb001144          ADD      r1,r0,r4,LSL #5       ;1412
00019e  9805              LDR      r0,[sp,#0x14]         ;1412
0001a0  f8bd2008          LDRH     r2,[sp,#8]            ;1412
0001a4  4408              ADD      r0,r0,r1              ;1412
0001a6  8b81              LDRH     r1,[r0,#0x1c]         ;1412
0001a8  4311              ORRS     r1,r1,r2              ;1412
0001aa  8381              STRH     r1,[r0,#0x1c]         ;1412
0001ac  45a0              CMP      r8,r4                 ;1413
0001ae  bfc8              IT       GT                    ;1413
0001b0  f00408ff          ANDGT    r8,r4,#0xff           ;1413
                  |L10.436|
0001b4  1e64              SUBS     r4,r4,#1              ;1413
0001b6  d2af              BCS      |L10.280|
0001b8  f89d000b          LDRB     r0,[sp,#0xb]          ;1417
0001bc  f0400080          ORR      r0,r0,#0x80           ;1417
0001c0  f88d000b          STRB     r0,[sp,#0xb]          ;1417
0001c4  e9dd1002          LDRD     r1,r0,[sp,#8]         ;1417
0001c8  eb000089          ADD      r0,r0,r9,LSL #2       ;1418
0001cc  f5004000          ADD      r0,r0,#0x8000         ;1418
0001d0  f8c01dec          STR      r1,[r0,#0xdec]        ;1418
0001d4  e75a              B        |L10.140|
;;;1428   
                          ENDP

0001d6  0000              DCW      0x0000
                  |L10.472|
                          DCD      ||.data||
                  |L10.476|
                          DCD      FullSharedBuff
                  |L10.480|
                          DCD      ||.bss||+0xc

                          AREA ||i.algorithm_label_init||, CODE, READONLY, ALIGN=2

                  algorithm_label_init PROC
;;;79     
;;;80     void algorithm_label_init(void)
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c08              LDR      r4,|L11.40|
;;;81     {
;;;82     //	int r, c;
;;;83     
;;;84     	algorithm_label_init_param();
;;;85     //	thisCommonConf = algorithm_GetCommonConfig();
;;;86     	thisInfo       = algorithm_GetInfo();
000008  6060              STR      r0,[r4,#4]  ; thisModeConf
00000a  f7fffffe          BL       algorithm_GetInfo
;;;87     
;;;88     	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
00000e  60a0              STR      r0,[r4,#8]  ; thisInfo
000010  f640710e          MOV      r1,#0xf0e
000014  4805              LDR      r0,|L11.44|
000016  f7fffffe          BL       __aeabi_memclr4
;;;89     	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
00001a  e8bd4010          POP      {r4,lr}
00001e  f6434138          MOV      r1,#0x3c38
000022  4803              LDR      r0,|L11.48|
000024  f7ffbffe          B.W      __aeabi_memclr4
;;;90     //	for( r=-PAD_; r<ROW_MAX + PAD_; r++ )
;;;91     //	{
;;;92     //		for( c=-PAD_; c<COL_MAX + PAD_; c++ )
;;;93     //		{
;;;94     //			HAL_WRITE_LABEL_IMAGE(r, c, 0);
;;;95     //			HAL_WRITE_LABEL_LINKLIST_IMAGE(r, c, 0);
;;;96     //		}
;;;97     //	}
;;;98     }
;;;99     
                          ENDP

                  |L11.40|
                          DCD      ||.data||
                  |L11.44|
                          DCD      FullSharedBuff+0xe6f4
                  |L11.48|
                          DCD      FullSharedBuff+0x8ca0

                          AREA ||i.algorithm_label_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_label_init_param PROC
;;;99     
;;;100    void algorithm_label_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	thisModeConf   = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4901              LDR      r1,|L12.12|
000008  6048              STR      r0,[r1,#4]  ; thisModeConf
;;;103    }
00000a  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_initialise||, CODE, READONLY, ALIGN=2

                  algorithm_label_initialise PROC
;;;104    
;;;105    void algorithm_label_initialise(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;106    {
;;;107    //	int r, c, l; // NOTE : not used!!
;;;108    	int l;
;;;109    
;;;110    	tLabelInfo_t 		*temp_label;
;;;111    
;;;112    	temp_label = &thisInfo->tLabel;
000004  481c              LDR      r0,|L13.120|
;;;113    
;;;114    	temp_label->ucNum = 0;
000006  2400              MOVS     r4,#0
;;;115    	temp_label->ucValidNum = 0;
;;;116    
;;;117    	for( l=LOOSE_POSBUF_; l--; )
000008  2610              MOVS     r6,#0x10
00000a  6885              LDR      r5,[r0,#8]            ;114  ; thisInfo
00000c  2701              MOVS     r7,#1
;;;118    	{
;;;119    		memset(&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
;;;120    
;;;121    		temp_label->tValidRect[l].cs            = COL_MAX-1;
00000e  f04f084f          MOV      r8,#0x4f
000012  f8054f39          STRB     r4,[r5,#0x39]!        ;114
;;;122    		temp_label->tValidRect[l].ce            = 0;
;;;123    		temp_label->tValidRect[l].rs            = ROW_MAX-1;
000016  f04f092c          MOV      r9,#0x2c
00001a  f8854271          STRB     r4,[r5,#0x271]        ;115
                  |L13.30|
00001e  1e76              SUBS     r6,r6,#1
000020  ebc600c6          RSB      r0,r6,r6,LSL #3       ;119
000024  eb001046          ADD      r0,r0,r6,LSL #5       ;119
000028  4428              ADD      r0,r0,r5              ;119
00002a  2127              MOVS     r1,#0x27              ;119
00002c  1c40              ADDS     r0,r0,#1              ;119
00002e  f7fffffe          BL       __aeabi_memclr
000032  eb050086          ADD      r0,r5,r6,LSL #2       ;121
;;;124    		temp_label->tValidRect[l].re            = 0;
;;;125    		temp_label->sValidMaxVal[l]             = 0;
;;;126    		temp_label->usValidCellCnt[l]           = 0;
;;;127    		temp_label->tValidMaxPos[l].c           = 0;
;;;128    		temp_label->tValidMaxPos[l].r           = 0;
000036  1c7f              ADDS     r7,r7,#1
000038  f8808274          STRB     r8,[r0,#0x274]        ;121
00003c  f8804275          STRB     r4,[r0,#0x275]        ;122
000040  f8809272          STRB     r9,[r0,#0x272]        ;123
000044  f8804273          STRB     r4,[r0,#0x273]        ;124
000048  eb050046          ADD      r0,r5,r6,LSL #1       ;125
00004c  2f10              CMP      r7,#0x10
00004e  f8a042d2          STRH     r4,[r0,#0x2d2]        ;125
000052  f8a042f2          STRH     r4,[r0,#0x2f2]        ;126
000056  f88042b2          STRB     r4,[r0,#0x2b2]        ;127
00005a  f88042b3          STRB     r4,[r0,#0x2b3]
00005e  ddde              BLE      |L13.30|
;;;129    	}
;;;130    
;;;131    	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
000060  f640710e          MOV      r1,#0xf0e
000064  4805              LDR      r0,|L13.124|
000066  f7fffffe          BL       __aeabi_memclr4
;;;132    	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
00006a  e8bd47f0          POP      {r4-r10,lr}
00006e  f6434138          MOV      r1,#0x3c38
000072  4803              LDR      r0,|L13.128|
000074  f7ffbffe          B.W      __aeabi_memclr4
;;;133    }
;;;134    
                          ENDP

                  |L13.120|
                          DCD      ||.data||
                  |L13.124|
                          DCD      FullSharedBuff+0xe6f4
                  |L13.128|
                          DCD      FullSharedBuff+0x8ca0

                          AREA ||i.algorithm_label_palm_rejection||, CODE, READONLY, ALIGN=2

                  algorithm_label_palm_rejection PROC
;;;455    //#define KEEPPALMREGIONFRAME 50
;;;456    void algorithm_label_palm_rejection(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;457    {
000004  b0a7              SUB      sp,sp,#0x9c
;;;458    	tLabelInfo_t	*temp_label;
;;;459    	uint8_t IsPalm[LOOSE_POSBUF_] = {0,};		//0: Normal finger, 1: Big label(palm), 2: small label cascaded to big label 3: touch down label
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;460    	static int PalmRegionUpdateCnt = 0;
;;;461    	tRect_t CascadeRect[LOOSE_POSBUF_];
;;;462    	uint8_t PalmDetectingFlag = 0,PalmTouchDownFlag = 0, SavePalmRegion = 0, PalmCnt = 0;
00000e  9007              STR      r0,[sp,#0x1c]
;;;463    	int cl,pl,pl2,r,c;
;;;464    //	int tmp = 0;
;;;465    	
;;;466    	temp_label = &thisInfo->tLabel;
000010  49fe              LDR      r1,|L14.1036|
000012  9019              STR      r0,[sp,#0x64]
000014  6889              LDR      r1,[r1,#8]  ; thisInfo
;;;467    //	tmp = temp_label->ucValidNum;
;;;468    
;;;469    	thisInfo->bIsPalm = NO;
000016  9122              STR      r1,[sp,#0x88]
000018  f1010439          ADD      r4,r1,#0x39           ;466
00001c  f8810fb2          STRB     r0,[r1,#0xfb2]
000020  48fa              LDR      r0,|L14.1036|
;;;470    	//Initialize and counting touch down frame
;;;471    	if(temp_label->ucValidNum == 0)
000022  f89112aa          LDRB     r1,[r1,#0x2aa]
;;;472    	{
;;;473    		PalmRegionNum = 0;
;;;474    		memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;475    		temp_label->PalmTouchDownCnt = 0;
;;;476    		PalmRegionUpdateCnt = 0;
;;;477    	}
;;;478    	else if(temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX){
000026  6840              LDR      r0,[r0,#4]
000028  901d              STR      r0,[sp,#0x74]         ;457
00002a  b321              CBZ      r1,|L14.118|
00002c  991d              LDR      r1,[sp,#0x74]
00002e  f8940312          LDRB     r0,[r4,#0x312]
000032  f8911204          LDRB     r1,[r1,#0x204]
000036  4288              CMP      r0,r1
000038  bf3c              ITT      CC
00003a  1c40              ADDCC    r0,r0,#1
;;;479    		temp_label->PalmTouchDownCnt++;
00003c  f8840312          STRBCC   r0,[r4,#0x312]
                  |L14.64|
;;;480    		if(temp_label->PalmTouchDownCnt <= thisModeConf->Palm.ucPalm_IGNOREFRAMENUM)	PalmTouchDownFlag = YES;
;;;481    	}
;;;482    	
;;;483    	//Detect touch down
;;;484    	//compare peak value and nearby value when only 1 label
;;;485    	//if touch down palm, slope is lower than normal finger.
;;;486    	//Do not save palm region for touch down label.
;;;487    	if(temp_label->ucValidNum == 1 && temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX)
;;;488    	{
;;;489    		int neighbor_mean = 0;
;;;490    		tCell_t MaxPos;
;;;491    		uint16_t SlopeTh = 0;
;;;492    		
;;;493    		SlopeTh = thisModeConf->Palm.ucPalm_TOUCHDOWNSLOPETHRESHOLD;
;;;494    		MaxPos.r = temp_label->tValidMaxPos[0].r;
;;;495    			MaxPos.c = temp_label->tValidMaxPos[0].c;
;;;496    			if(0 < MaxPos.r && MaxPos.r < ROW_MAX-1 && 0 < MaxPos.c && MaxPos.c < COL_MAX-1)
;;;497    			{
;;;498    			for(r=MaxPos.r-1 ; r<=MaxPos.r+1 ; r++){
;;;499    				for(c=MaxPos.c-1 ; c<=MaxPos.c+1 ; c++){
;;;500    					if( !(r==MaxPos.r && c==MaxPos.c) )
;;;501    						neighbor_mean += HAL_READ_DELTA_IMAGE(r,c);
;;;502    				}
;;;503    			}
;;;504    			neighbor_mean >>= 3;	
;;;505    			if(temp_label->sValidMaxVal[0]*100/neighbor_mean < SlopeTh)	PalmTouchDownFlag = YES;
;;;506    		}
;;;507    	}
;;;508    	
;;;509    	for( cl=temp_label->ucValidNum; cl--; )
000040  f8940271          LDRB     r0,[r4,#0x271]
000044  1e41              SUBS     r1,r0,#1
000046  f0c08150          BCC.W    |L14.746|
00004a  4ff1              LDR      r7,|L14.1040|
00004c  f8dd8074          LDR      r8,[sp,#0x74]
000050  9a22              LDR      r2,[sp,#0x88]
;;;510    	{
;;;511    		uint8_t merged_flag = 0;
;;;512    		SavePalmRegion = NO;
;;;513    	
;;;514    		if(thisModeConf->Palm.usPalmLevel < temp_label->usValidCellCnt[cl] ){	//&& temp_label->usValidCellCnt[cl] < (thisModeConf->Palm.usPalmLevel<<6)){	//Certain Big palm
;;;515    			IsPalm[cl] = 1;
;;;516    			SavePalmRegion = YES;
;;;517    		}	//if first frame, palm threshold is in half. It is decided by experimental.
;;;518    //		else if((temp_label->PalmTouchDownCnt==1 && temp_label->usValidCellCnt[cl] > (thisModeConf->Palm.usPalmLevel>>1)) || PalmTouchDownFlag)	//Touch down label
;;;519    //			IsPalm[cl] = 3;
;;;520    		
;;;521    		if(IsPalm[cl])
;;;522    		{
;;;523    			//Merge previous palm region and new palm
;;;524    			for(pl=PalmRegionNum; pl--; )
;;;525    			{
;;;526    				if(PalmRectEnable[pl]){
;;;527    					if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl],thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
000052  f1070534          ADD      r5,r7,#0x34
000056  921a              STR      r2,[sp,#0x68]
                  |L14.88|
000058  eb040041          ADD      r0,r4,r1,LSL #1       ;514
00005c  f8b82200          LDRH     r2,[r8,#0x200]        ;514
000060  f8b002f2          LDRH     r0,[r0,#0x2f2]        ;514
000064  f04f0a00          MOV      r10,#0                ;512
000068  4282              CMP      r2,r0                 ;514
00006a  d20e              BCS      |L14.138|
00006c  2001              MOVS     r0,#1                 ;515
00006e  aa04              ADD      r2,sp,#0x10           ;515
000070  4682              MOV      r10,r0                ;516
000072  5450              STRB     r0,[r2,r1]            ;515
000074  e010              B        |L14.152|
                  |L14.118|
000076  4de5              LDR      r5,|L14.1036|
000078  2600              MOVS     r6,#0                 ;473
00007a  48e5              LDR      r0,|L14.1040|
00007c  702e              STRB     r6,[r5,#0]            ;473
00007e  f7fffffe          BL       __ARM_common_memclr4_10
000082  f8846312          STRB     r6,[r4,#0x312]        ;475
000086  622e              STR      r6,[r5,#0x20]         ;476  ; PalmRegionUpdateCnt
000088  e7da              B        |L14.64|
                  |L14.138|
00008a  a804              ADD      r0,sp,#0x10           ;521
00008c  5c40              LDRB     r0,[r0,r1]            ;521
00008e  2800              CMP      r0,#0                 ;521
;;;528    						PalmRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[pl]);
;;;529    						merged_flag = YES;
;;;530    						break;
;;;531    					}
;;;532    				}
;;;533    			}
;;;534    			//Save new palm region
;;;535    			if(!merged_flag && SavePalmRegion){
;;;536    				PalmRect[PalmRegionNum] = temp_label->tValidRect[cl];
;;;537    				PalmRectEnable[PalmRegionNum] = thisModeConf->Palm.ucPalm_KEEPPALMREGIONFRAME;
;;;538    				if(PalmRegionNum < LOOSE_POSBUF_)
;;;539    					PalmRegionNum++;
;;;540    			}
;;;541    			
;;;542    			thisInfo->bIsPalm = YES;
;;;543    		}
;;;544    		else{
;;;545    			PalmDetectingFlag = YES;
000090  bf04              ITT      EQ
000092  2001              MOVEQ    r0,#1
000094  9019              STREQ    r0,[sp,#0x64]
000096  d06c              BEQ      |L14.370|
                  |L14.152|
000098  48dc              LDR      r0,|L14.1036|
00009a  7806              LDRB     r6,[r0,#0]            ;524  ; PalmRegionNum
00009c  1e70              SUBS     r0,r6,#1              ;524
00009e  bf28              IT       CS                    ;527
0000a0  eb040981          ADDCS    r9,r4,r1,LSL #2       ;527
0000a4  d34f              BCC      |L14.326|
                  |L14.166|
0000a6  5c3a              LDRB     r2,[r7,r0]            ;526
0000a8  2a00              CMP      r2,#0                 ;526
0000aa  d04a              BEQ      |L14.322|
0000ac  f8553020          LDR      r3,[r5,r0,LSL #2]     ;527
0000b0  f8d9c272          LDR      r12,[r9,#0x272]       ;527
0000b4  f8982202          LDRB     r2,[r8,#0x202]        ;527
0000b8  f3432e07          SBFX     lr,r3,#8,#8           ;527
0000bc  fa4ffb8c          SXTB     r11,r12               ;527
0000c0  4496              ADD      lr,lr,r2              ;527
0000c2  45f3              CMP      r11,lr                ;527
0000c4  dc3d              BGT      |L14.322|
0000c6  f34c2e07          SBFX     lr,r12,#8,#8          ;527
0000ca  fa4ffb83          SXTB     r11,r3                ;527
0000ce  4496              ADD      lr,lr,r2              ;527
0000d0  45f3              CMP      r11,lr                ;527
0000d2  dc36              BGT      |L14.322|
0000d4  f34c4b07          SBFX     r11,r12,#16,#8        ;527
0000d8  eb026e23          ADD      lr,r2,r3,ASR #24      ;527
0000dc  45f3              CMP      r11,lr                ;527
0000de  dc30              BGT      |L14.322|
0000e0  f3434307          SBFX     r3,r3,#16,#8          ;527
0000e4  eb02622c          ADD      r2,r2,r12,ASR #24     ;527
0000e8  429a              CMP      r2,r3                 ;527
0000ea  db2a              BLT      |L14.322|
0000ec  eb050680          ADD      r6,r5,r0,LSL #2       ;528
0000f0  f8d93272          LDR      r3,[r9,#0x272]        ;528
0000f4  f8d6c000          LDR      r12,[r6,#0]           ;528
0000f8  f3434007          SBFX     r0,r3,#16,#8          ;528
0000fc  f34c4907          SBFX     r9,r12,#16,#8         ;528
000100  4548              CMP      r0,r9                 ;528
000102  bfa8              IT       GE                    ;528
000104  4648              MOVGE    r0,r9                 ;528
000106  f3604217          BFI      r2,r0,#16,#8          ;528
00010a  1618              ASRS     r0,r3,#24             ;528
00010c  ea4f692c          ASR      r9,r12,#24            ;528
000110  4548              CMP      r0,r9                 ;528
000112  bfd8              IT       LE                    ;528
000114  4648              MOVLE    r0,r9                 ;528
000116  f360621f          BFI      r2,r0,#24,#8          ;528
00011a  fa4ff983          SXTB     r9,r3                 ;528
00011e  fa4ff08c          SXTB     r0,r12                ;528
000122  4581              CMP      r9,r0                 ;528
000124  bfb8              IT       LT                    ;528
000126  4648              MOVLT    r0,r9                 ;528
000128  f3600207          BFI      r2,r0,#0,#8           ;528
00012c  f3432007          SBFX     r0,r3,#8,#8           ;528
000130  f34c2307          SBFX     r3,r12,#8,#8          ;528
000134  4298              CMP      r0,r3                 ;528
000136  bfd8              IT       LE                    ;528
000138  4618              MOVLE    r0,r3                 ;528
00013a  f360220f          BFI      r2,r0,#8,#8           ;528
00013e  6032              STR      r2,[r6,#0]            ;528
000140  e013              B        |L14.362|
                  |L14.322|
000142  1e40              SUBS     r0,r0,#1              ;528
000144  d2af              BCS      |L14.166|
                  |L14.326|
000146  f1ba0f00          CMP      r10,#0                ;535
00014a  d00e              BEQ      |L14.362|
00014c  eb040081          ADD      r0,r4,r1,LSL #2       ;536
000150  eb050386          ADD      r3,r5,r6,LSL #2       ;536
000154  f8d00272          LDR      r0,[r0,#0x272]        ;536
000158  6018              STR      r0,[r3,#0]            ;536
00015a  4aac              LDR      r2,|L14.1036|
00015c  f8980207          LDRB     r0,[r8,#0x207]        ;537
000160  55b8              STRB     r0,[r7,r6]            ;537
000162  2e10              CMP      r6,#0x10              ;538
000164  bf3c              ITT      CC                    ;539
000166  1c70              ADDCC    r0,r6,#1              ;539
000168  7010              STRBCC   r0,[r2,#0]            ;539
                  |L14.362|
00016a  2001              MOVS     r0,#1                 ;542
00016c  9a1a              LDR      r2,[sp,#0x68]         ;542
00016e  f8820fb2          STRB     r0,[r2,#0xfb2]        ;542
                  |L14.370|
000172  1e49              SUBS     r1,r1,#1              ;542
;;;546    		}
;;;547    	}
000174  f4bfaf70          BCS      |L14.88|
;;;548    	
;;;549    	if(PalmDetectingFlag)
000178  9819              LDR      r0,[sp,#0x64]
00017a  2800              CMP      r0,#0
00017c  d07d              BEQ      |L14.634|
;;;550    	{
;;;551    		int16_t MinDist = 0, Xdist = 0, Ydist = 0;
;;;552    		int8_t match_pl = 0;
;;;553    		//Expand Palm region method2
;;;554    		for(cl=temp_label->ucValidNum; cl--; )
00017e  f8940271          LDRB     r0,[r4,#0x271]
000182  1e42              SUBS     r2,r0,#1
000184  d379              BCC      |L14.634|
;;;555    		{
;;;556    			if((IsPalm[cl] & 0x80) == 0)
;;;557    			{
;;;558    				MinDist = thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST;
;;;559    				match_pl = -1;
;;;560    				for(pl=PalmRegionNum; pl--; )
;;;561    				{
;;;562    					if(PalmRectEnable[pl])
;;;563    					{
;;;564    						if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
000186  49a1              LDR      r1,|L14.1036|
000188  981d              LDR      r0,[sp,#0x74]
00018a  9023              STR      r0,[sp,#0x8c]         ;560
00018c  7808              LDRB     r0,[r1,#0]            ;560  ; PalmRegionNum
00018e  ae04              ADD      r6,sp,#0x10           ;459
000190  9018              STR      r0,[sp,#0x60]         ;459
                  |L14.402|
000192  5cb0              LDRB     r0,[r6,r2]            ;556
000194  901e              STR      r0,[sp,#0x78]         ;556
000196  f0100f80          TST      r0,#0x80              ;556
00019a  d16f              BNE      |L14.636|
00019c  9823              LDR      r0,[sp,#0x8c]         ;558
00019e  f04f31ff          MOV      r1,#0xffffffff        ;559
0001a2  f8900202          LDRB     r0,[r0,#0x202]        ;558
0001a6  911f              STR      r1,[sp,#0x7c]         ;559
0001a8  9918              LDR      r1,[sp,#0x60]         ;559
0001aa  901a              STR      r0,[sp,#0x68]         ;559
0001ac  1e49              SUBS     r1,r1,#1              ;559
0001ae  d365              BCC      |L14.636|
0001b0  eb040342          ADD      r3,r4,r2,LSL #1       ;514
0001b4  eb040982          ADD      r9,r4,r2,LSL #2       ;527
0001b8  9320              STR      r3,[sp,#0x80]         ;514
                  |L14.442|
0001ba  5c7b              LDRB     r3,[r7,r1]            ;562
0001bc  2b00              CMP      r3,#0                 ;562
0001be  d052              BEQ      |L14.614|
0001c0  eb050881          ADD      r8,r5,r1,LSL #2
0001c4  f8d9c272          LDR      r12,[r9,#0x272]
0001c8  f8d83000          LDR      r3,[r8,#0]
0001cc  fa4ffa8c          SXTB     r10,r12
0001d0  f3432b07          SBFX     r11,r3,#8,#8
0001d4  4483              ADD      r11,r11,r0
0001d6  45da              CMP      r10,r11
0001d8  dc45              BGT      |L14.614|
0001da  f34c2b07          SBFX     r11,r12,#8,#8
0001de  fa4ffa83          SXTB     r10,r3
0001e2  4483              ADD      r11,r11,r0
0001e4  45da              CMP      r10,r11
0001e6  dc3e              BGT      |L14.614|
0001e8  f34c4a07          SBFX     r10,r12,#16,#8
0001ec  eb006b23          ADD      r11,r0,r3,ASR #24
0001f0  45da              CMP      r10,r11
0001f2  dc38              BGT      |L14.614|
0001f4  f3434307          SBFX     r3,r3,#16,#8
0001f8  eb006c2c          ADD      r12,r0,r12,ASR #24
0001fc  459c              CMP      r12,r3
0001fe  db32              BLT      |L14.614|
;;;565    							Xdist = abs(temp_label->tValidMaxPos[cl].c - ((PalmRect[pl].cs+PalmRect[pl].ce)>>1)) - ((PalmRect[pl].ce-PalmRect[pl].cs)>>1);
000200  f8dda080          LDR      r10,[sp,#0x80]
000204  f998c002          LDRSB    r12,[r8,#2]
000208  f9983003          LDRSB    r3,[r8,#3]
00020c  f99aa2b2          LDRSB    r10,[r10,#0x2b2]
000210  eb0c0b03          ADD      r11,r12,r3
000214  ebba0a6b          SUBS     r10,r10,r11,ASR #1
000218  eba3030c          SUB      r3,r3,r12
00021c  bf48              IT       MI
00021e  f1ca0a00          RSBMI    r10,r10,#0
000222  ebba0363          SUBS     r3,r10,r3,ASR #1
;;;566    							if(Xdist < 0) Xdist = 0;
000226  bf48              IT       MI
000228  2300              MOVMI    r3,#0
;;;567    							Ydist = abs(temp_label->tValidMaxPos[cl].r - ((PalmRect[pl].rs+PalmRect[pl].re)>>1)) - ((PalmRect[pl].re-PalmRect[pl].rs)>>1);
00022a  f998c000          LDRSB    r12,[r8,#0]
00022e  f8dda080          LDR      r10,[sp,#0x80]
000232  f9988001          LDRSB    r8,[r8,#1]
000236  eb0c0b08          ADD      r11,r12,r8
00023a  f99aa2b3          LDRSB    r10,[r10,#0x2b3]
00023e  eba80c0c          SUB      r12,r8,r12
000242  ebba0a6b          SUBS     r10,r10,r11,ASR #1
000246  bf48              IT       MI
000248  f1ca0a00          RSBMI    r10,r10,#0
00024c  ebba0c6c          SUBS     r12,r10,r12,ASR #1
;;;568    							if(Ydist < 0) Ydist = 0;
000250  bf48              IT       MI
000252  f04f0c00          MOVMI    r12,#0
;;;569    							if(Xdist+Ydist < MinDist){
000256  4463              ADD      r3,r3,r12
000258  f8ddc068          LDR      r12,[sp,#0x68]
00025c  4563              CMP      r3,r12
00025e  da02              BGE      |L14.614|
;;;570    								MinDist = Xdist+Ydist;
;;;571    								match_pl = pl;
000260  931a              STR      r3,[sp,#0x68]
000262  b24b              SXTB     r3,r1
000264  931f              STR      r3,[sp,#0x7c]
                  |L14.614|
000266  1e49              SUBS     r1,r1,#1
000268  d2a7              BCS      |L14.442|
;;;572    							}
;;;573    						}
;;;574    						
;;;575    					}
;;;576    				}
;;;577    				if(match_pl != -1)
00026a  981f              LDR      r0,[sp,#0x7c]
00026c  f1b03fff          CMP      r0,#0xffffffff
000270  d038              BEQ      |L14.740|
;;;578    				{
;;;579    					PalmRect[match_pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[match_pl]);
000272  f8d91272          LDR      r1,[r9,#0x272]
000276  981f              LDR      r0,[sp,#0x7c]
000278  e001              B        |L14.638|
                  |L14.634|
00027a  e036              B        |L14.746|
                  |L14.636|
00027c  e032              B        |L14.740|
                  |L14.638|
00027e  eb050880          ADD      r8,r5,r0,LSL #2
000282  f3414c07          SBFX     r12,r1,#16,#8
000286  f8d83000          LDR      r3,[r8,#0]
00028a  f3434907          SBFX     r9,r3,#16,#8
00028e  45cc              CMP      r12,r9
000290  bfa8              IT       GE
000292  46cc              MOVGE    r12,r9
000294  f36c4017          BFI      r0,r12,#16,#8
000298  ea4f6921          ASR      r9,r1,#24
00029c  ea4f6c23          ASR      r12,r3,#24
0002a0  45e1              CMP      r9,r12
0002a2  bfc8              IT       GT
0002a4  46cc              MOVGT    r12,r9
0002a6  f36c601f          BFI      r0,r12,#24,#8
0002aa  fa4ff981          SXTB     r9,r1
0002ae  fa4ffc83          SXTB     r12,r3
0002b2  45e1              CMP      r9,r12
0002b4  bfb8              IT       LT
0002b6  46cc              MOVLT    r12,r9
0002b8  f36c0007          BFI      r0,r12,#0,#8
0002bc  f3412c07          SBFX     r12,r1,#8,#8
0002c0  f3432107          SBFX     r1,r3,#8,#8
0002c4  458c              CMP      r12,r1
0002c6  bfc8              IT       GT
0002c8  4661              MOVGT    r1,r12
0002ca  f361200f          BFI      r0,r1,#8,#8
0002ce  f8c80000          STR      r0,[r8,#0]
;;;580    					if(IsPalm[cl] == 0){
0002d2  981e              LDR      r0,[sp,#0x78]
0002d4  2800              CMP      r0,#0
;;;581    						IsPalm[cl] = 2;
0002d6  bf04              ITT      EQ
0002d8  2002              MOVEQ    r0,#2
0002da  54b0              STRBEQ   r0,[r6,r2]
;;;582    					}
;;;583    					IsPalm[cl] |= 0x80;
0002dc  5cb0              LDRB     r0,[r6,r2]
0002de  f0400080          ORR      r0,r0,#0x80
0002e2  54b0              STRB     r0,[r6,r2]
                  |L14.740|
0002e4  1e52              SUBS     r2,r2,#1
0002e6  f4bfaf54          BCS      |L14.402|
                  |L14.746|
;;;584    				}
;;;585    			}
;;;586    		}
;;;587    		
;;;588    		//Expand Palm region
;;;589    //		for(pl=PalmRegionNum; pl--; )
;;;590    //		{
;;;591    //			if(PalmRectEnable[pl])
;;;592    //			{
;;;593    //				uint8_t expand_flag = YES;
;;;594    //				while(expand_flag){
;;;595    //					expand_flag = NO;
;;;596    //					for( cl=temp_label->ucValidNum; cl--; )
;;;597    //					{
;;;598    //						if((IsPalm[cl] & 0x80) == 0)
;;;599    //						{
;;;600    //							if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
;;;601    //								PalmRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[pl]);
;;;602    //								expand_flag = YES;
;;;603    //								if(IsPalm[cl] == 0){
;;;604    //									IsPalm[cl] = 2;
;;;605    //								}
;;;606    //								IsPalm[cl] |= 0x80;
;;;607    //							}
;;;608    //						}
;;;609    //					}
;;;610    //				}
;;;611    //			}
;;;612    //		}
;;;613    	}
;;;614    	
;;;615    	//Release or downsize palm region
;;;616    	for(pl=PalmRegionNum; pl--; )
0002ea  4848              LDR      r0,|L14.1036|
0002ec  7800              LDRB     r0,[r0,#0]  ; PalmRegionNum
0002ee  9003              STR      r0,[sp,#0xc]
0002f0  f1b00b01          SUBS     r11,r0,#1
0002f4  d371              BCC      |L14.986|
;;;617    	{
;;;618    		if(PalmRectEnable[pl])
;;;619    		{
;;;620    			uint8_t TouchedFlag = 0, ParentLabelIdx = 0;
;;;621    			uint16_t MaxCellCnt = 0;
;;;622    			for( cl=temp_label->ucValidNum; cl--; )
;;;623    			{
;;;624    				if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){		//Overlap
0002f6  4845              LDR      r0,|L14.1036|
;;;625    					if( (IsPalm[cl] & 0x0F) > 0 )
;;;626    						TouchedFlag = 1;
;;;627    					else if(TouchedFlag == 0)	//For debugging
;;;628    						TouchedFlag = 2;
;;;629    					
;;;630    					if(MaxCellCnt < temp_label->usValidCellCnt[cl]){
;;;631    						MaxCellCnt = temp_label->usValidCellCnt[cl];
;;;632    						ParentLabelIdx = cl;
;;;633    					}
;;;634    				}
;;;635    			}
;;;636    			
;;;637    			//if no touch label in palm region during KEEPPALMREGIONFRAME, release palm region.
;;;638    			if(TouchedFlag == 0){
;;;639    				if(PalmRectEnable[pl])						PalmRectEnable[pl]--;
;;;640    //				if(PalmRectEnable[pl]==0 && PalmRegionNum>0)	PalmRegionNum--;		//Release palm region
;;;641    			}
;;;642    			else{
;;;643    				uint8_t CascadeFlag = YES;	//Cascade label based on parent label
;;;644    				uint8_t CheckCascade[LOOSE_POSBUF_] = {0};
;;;645    				
;;;646    				if(PalmRegionUpdateCnt++ > thisModeConf->Palm.ucPalm_PALM_REGION_UPDATE_PERIOD)
;;;647    				{
;;;648    					PalmRegionUpdateCnt = 0;
0002f8  9d1d              LDR      r5,[sp,#0x74]
0002fa  f8dfe114          LDR      lr,|L14.1040|
0002fe  6a00              LDR      r0,[r0,#0x20]  ; PalmRegionUpdateCnt
000300  f8cd0090          STR.W    r0,[sp,#0x90]         ;474
                  |L14.772|
000304  f81e800b          LDRB     r8,[lr,r11]           ;618
000308  f1b80f00          CMP      r8,#0                 ;618
00030c  d06d              BEQ      |L14.1002|
00030e  2700              MOVS     r7,#0                 ;620
000310  971d              STR      r7,[sp,#0x74]         ;622
000312  f8941271          LDRB     r1,[r4,#0x271]        ;622
000316  46ba              MOV      r10,r7                ;621
000318  1e48              SUBS     r0,r1,#1              ;622
00031a  d362              BCC      |L14.994|
00031c  4a3d              LDR      r2,|L14.1044|
00031e  f8951202          LDRB     r1,[r5,#0x202]        ;527
000322  eb02028b          ADD      r2,r2,r11,LSL #2      ;527
000326  921c              STR      r2,[sp,#0x70]         ;527
000328  f8d22000          LDR.W    r2,[r2,#0]            ;527
                  |L14.812|
00032c  eb040380          ADD      r3,r4,r0,LSL #2       ;624
000330  f3422607          SBFX     r6,r2,#8,#8           ;624
000334  f8d33272          LDR      r3,[r3,#0x272]        ;624
000338  440e              ADD      r6,r6,r1              ;624
00033a  fa4ffc83          SXTB     r12,r3                ;624
00033e  45b4              CMP      r12,r6                ;624
000340  dc25              BGT      |L14.910|
000342  f3432607          SBFX     r6,r3,#8,#8           ;624
000346  fa4ffc82          SXTB     r12,r2                ;624
00034a  440e              ADD      r6,r6,r1              ;624
00034c  45b4              CMP      r12,r6                ;624
00034e  dc1e              BGT      |L14.910|
000350  f3434c07          SBFX     r12,r3,#16,#8         ;624
000354  eb016622          ADD      r6,r1,r2,ASR #24      ;624
000358  45b4              CMP      r12,r6                ;624
00035a  dc18              BGT      |L14.910|
00035c  f3424c07          SBFX     r12,r2,#16,#8         ;624
000360  eb016323          ADD      r3,r1,r3,ASR #24      ;624
000364  459c              CMP      r12,r3                ;624
000366  dc12              BGT      |L14.910|
000368  ab04              ADD      r3,sp,#0x10           ;625
00036a  5c1b              LDRB     r3,[r3,r0]            ;625
00036c  f0130f0f          TST      r3,#0xf               ;625
000370  bf18              IT       NE                    ;626
000372  2701              MOVNE    r7,#1                 ;626
000374  d102              BNE      |L14.892|
000376  2f00              CMP      r7,#0                 ;627
000378  bf08              IT       EQ                    ;628
00037a  2702              MOVEQ    r7,#2                 ;628
                  |L14.892|
00037c  eb040340          ADD      r3,r4,r0,LSL #1       ;630
000380  f8b332f2          LDRH     r3,[r3,#0x2f2]        ;630
000384  4553              CMP      r3,r10                ;630
000386  d902              BLS      |L14.910|
000388  469a              MOV      r10,r3                ;631
00038a  b2c3              UXTB     r3,r0                 ;632
00038c  931d              STR      r3,[sp,#0x74]         ;632
                  |L14.910|
00038e  1e40              SUBS     r0,r0,#1              ;632
000390  d2cc              BCS      |L14.812|
000392  b31f              CBZ      r7,|L14.988|
000394  2000              MOVS     r0,#0                 ;644
000396  9018              STR      r0,[sp,#0x60]         ;644
000398  9019              STR      r0,[sp,#0x64]         ;644
00039a  901a              STR      r0,[sp,#0x68]         ;644
00039c  901b              STR      r0,[sp,#0x6c]         ;644
00039e  9824              LDR      r0,[sp,#0x90]         ;646
0003a0  1c41              ADDS     r1,r0,#1              ;646
0003a2  9124              STR      r1,[sp,#0x90]         ;646
0003a4  f8951203          LDRB     r1,[r5,#0x203]        ;646
0003a8  4288              CMP      r0,r1                 ;646
0003aa  dd76              BLE      |L14.1178|
0003ac  2000              MOVS     r0,#0
;;;649    					CascadeRect[pl] = temp_label->tValidRect[ParentLabelIdx];	//Initial cascade label
0003ae  9024              STR      r0,[sp,#0x90]
0003b0  a808              ADD      r0,sp,#0x20
0003b2  eb00038b          ADD      r3,r0,r11,LSL #2
0003b6  981d              LDR      r0,[sp,#0x74]
0003b8  ae18              ADD      r6,sp,#0x60           ;644
0003ba  eb040080          ADD      r0,r4,r0,LSL #2
0003be  f04f0a01          MOV      r10,#1                ;471
0003c2  f8d00272          LDR      r0,[r0,#0x272]
0003c6  6018              STR      r0,[r3,#0]
                  |L14.968|
;;;650    					while(CascadeFlag){
;;;651    						CascadeFlag = NO;
;;;652    						for( cl=temp_label->ucValidNum; cl--; )
0003c8  f8941271          LDRB     r1,[r4,#0x271]
0003cc  f04f0800          MOV      r8,#0                 ;651
0003d0  1e48              SUBS     r0,r1,#1
0003d2  d35f              BCC      |L14.1172|
                  |L14.980|
;;;653    						{
;;;654    							if(CheckCascade[cl] == NO){
0003d4  5c31              LDRB     r1,[r6,r0]
0003d6  b9c1              CBNZ     r1,|L14.1034|
0003d8  e008              B        |L14.1004|
                  |L14.986|
0003da  e065              B        |L14.1192|
                  |L14.988|
0003dc  f1b80f00          CMP      r8,#0                 ;639
0003e0  d05b              BEQ      |L14.1178|
                  |L14.994|
0003e2  f1a80001          SUB      r0,r8,#1              ;639
0003e6  f80e000b          STRB     r0,[lr,r11]           ;639
                  |L14.1002|
0003ea  e056              B        |L14.1178|
                  |L14.1004|
;;;655    								if(algorithm_nearby_rect(temp_label->tValidRect[cl], CascadeRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
0003ec  eb040180          ADD      r1,r4,r0,LSL #2
0003f0  f895c202          LDRB     r12,[r5,#0x202]
0003f4  f8d12272          LDR      r2,[r1,#0x272]
0003f8  6819              LDR      r1,[r3,#0]
0003fa  b257              SXTB     r7,r2
0003fc  f3412907          SBFX     r9,r1,#8,#8
000400  44e1              ADD      r9,r9,r12
000402  454f              CMP      r7,r9
000404  dc41              BGT      |L14.1162|
000406  b24f              SXTB     r7,r1
000408  e006              B        |L14.1048|
                  |L14.1034|
00040a  e03e              B        |L14.1162|
                  |L14.1036|
                          DCD      ||.data||
                  |L14.1040|
                          DCD      ||.bss||
                  |L14.1044|
                          DCD      ||.bss||+0x34
                  |L14.1048|
000418  f3422907          SBFX     r9,r2,#8,#8
00041c  44e1              ADD      r9,r9,r12
00041e  454f              CMP      r7,r9
000420  dc33              BGT      |L14.1162|
000422  f3424707          SBFX     r7,r2,#16,#8
000426  eb0c6921          ADD      r9,r12,r1,ASR #24
00042a  454f              CMP      r7,r9
00042c  dc2d              BGT      |L14.1162|
00042e  f3414707          SBFX     r7,r1,#16,#8
000432  eb0c6c22          ADD      r12,r12,r2,ASR #24
000436  45bc              CMP      r12,r7
000438  db27              BLT      |L14.1162|
00043a  f3424707          SBFX     r7,r2,#16,#8
00043e  f3414807          SBFX     r8,r1,#16,#8
000442  4547              CMP      r7,r8
000444  bfa8              IT       GE
000446  4647              MOVGE    r7,r8
000448  f3674c17          BFI      r12,r7,#16,#8
00044c  ea4f6822          ASR      r8,r2,#24
000450  160f              ASRS     r7,r1,#24
000452  45b8              CMP      r8,r7
000454  bfc8              IT       GT
000456  4647              MOVGT    r7,r8
000458  f3676c1f          BFI      r12,r7,#24,#8
00045c  fa4ff882          SXTB     r8,r2
000460  b24f              SXTB     r7,r1
000462  45b8              CMP      r8,r7
000464  bfb8              IT       LT
000466  4647              MOVLT    r7,r8
000468  f3670c07          BFI      r12,r7,#0,#8
00046c  f3422207          SBFX     r2,r2,#8,#8
000470  f3412107          SBFX     r1,r1,#8,#8
000474  428a              CMP      r2,r1
000476  bfc8              IT       GT
000478  4611              MOVGT    r1,r2
00047a  f3612c0f          BFI      r12,r1,#8,#8
;;;656    									CascadeRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], CascadeRect[pl]);	//Update cascade rect
;;;657    									CascadeFlag = YES;
;;;658    									CheckCascade[cl] = YES;
00047e  f8c3c000          STR      r12,[r3,#0]
000482  f04f0801          MOV      r8,#1                 ;657
000486  f806a000          STRB     r10,[r6,r0]
                  |L14.1162|
00048a  1e40              SUBS     r0,r0,#1
00048c  d2a2              BCS      |L14.980|
00048e  f1b80f00          CMP      r8,#0
000492  d199              BNE      |L14.968|
                  |L14.1172|
;;;659    								}
;;;660    							}
;;;661    						}
;;;662    					}
;;;663    					//downsize palm region
;;;664    //					PalmRect[pl] = CascadeRect[pl];
;;;665    //					PalmRect[pl].cs = ((CascadeRect[pl].cs + PalmRect[pl].cs)>>1);
;;;666    //					PalmRect[pl].ce = ((CascadeRect[pl].ce + PalmRect[pl].ce)>>1);
;;;667    //					PalmRect[pl].rs = ((CascadeRect[pl].rs + PalmRect[pl].rs)>>1);
;;;668    //					PalmRect[pl].re = ((CascadeRect[pl].re + PalmRect[pl].re)>>1);
;;;669    					
;;;670    					PalmRect[pl] = CascadeRect[pl];
000494  981c              LDR      r0,[sp,#0x70]
000496  6819              LDR      r1,[r3,#0]
000498  6001              STR      r1,[r0,#0]
                  |L14.1178|
00049a  f1bb0b01          SUBS     r11,r11,#1
;;;671    				}
;;;672    			}
;;;673    		}
00049e  f4bfaf31          BCS      |L14.772|
0004a2  4864              LDR      r0,|L14.1588|
0004a4  9924              LDR      r1,[sp,#0x90]         ;648
0004a6  6201              STR      r1,[r0,#0x20]         ;648  ; PalmRegionUpdateCnt
                  |L14.1192|
;;;674    	}
;;;675    	
;;;676    	//Merge overlapped palm region
;;;677    	for(pl=0; pl<PalmRegionNum; pl++)
0004a8  9803              LDR      r0,[sp,#0xc]
0004aa  2300              MOVS     r3,#0
0004ac  f8dfe184          LDR      lr,|L14.1588|
0004b0  2800              CMP      r0,#0
0004b2  dd58              BLE      |L14.1382|
0004b4  4d60              LDR      r5,|L14.1592|
0004b6  4684              MOV      r12,r0
0004b8  469b              MOV      r11,r3
0004ba  f1050934          ADD      r9,r5,#0x34           ;527
                  |L14.1214|
;;;678    	{
;;;679    		if(PalmRectEnable[pl])
0004be  5ce8              LDRB     r0,[r5,r3]
0004c0  2800              CMP      r0,#0
;;;680    		{
;;;681    			for(pl2 = pl+1; pl2 < PalmRegionNum; pl2++)
0004c2  bf1c              ITT      NE
0004c4  1c58              ADDNE    r0,r3,#1
0004c6  4560              CMPNE    r0,r12
0004c8  bfb8              IT       LT                    ;527
0004ca  eb090683          ADDLT    r6,r9,r3,LSL #2       ;527
0004ce  da47              BGE      |L14.1376|
                  |L14.1232|
;;;682    			{
;;;683    				if(PalmRectEnable[pl2])
0004d0  5c29              LDRB     r1,[r5,r0]
0004d2  b3e1              CBZ      r1,|L14.1358|
;;;684    				{
;;;685    					if(algorithm_nearby_rect(PalmRect[pl], PalmRect[pl2], 0)){
0004d4  f8591020          LDR      r1,[r9,r0,LSL #2]
0004d8  6832              LDR      r2,[r6,#0]
0004da  f3412707          SBFX     r7,r1,#8,#8
0004de  fa4ff882          SXTB     r8,r2
0004e2  45b8              CMP      r8,r7
0004e4  dc39              BGT      |L14.1370|
0004e6  fa4ff881          SXTB     r8,r1
0004ea  f3422707          SBFX     r7,r2,#8,#8
0004ee  45b8              CMP      r8,r7
0004f0  dc33              BGT      |L14.1370|
0004f2  f3424807          SBFX     r8,r2,#16,#8
0004f6  160f              ASRS     r7,r1,#24
0004f8  45b8              CMP      r8,r7
0004fa  dc2e              BGT      |L14.1370|
0004fc  f3414707          SBFX     r7,r1,#16,#8
000500  ea4f6822          ASR      r8,r2,#24
000504  45b8              CMP      r8,r7
000506  db28              BLT      |L14.1370|
000508  f3424807          SBFX     r8,r2,#16,#8
00050c  f3414a07          SBFX     r10,r1,#16,#8
000510  45d0              CMP      r8,r10
000512  bfa8              IT       GE
000514  46d0              MOVGE    r8,r10
000516  f3684717          BFI      r7,r8,#16,#8
00051a  ea4f6a22          ASR      r10,r2,#24
00051e  ea4f6821          ASR      r8,r1,#24
000522  45c2              CMP      r10,r8
000524  bfc8              IT       GT
000526  46d0              MOVGT    r8,r10
000528  f368671f          BFI      r7,r8,#24,#8
00052c  fa4ffa82          SXTB     r10,r2
000530  fa4ff881          SXTB     r8,r1
000534  45c2              CMP      r10,r8
000536  bfb8              IT       LT
000538  46d0              MOVLT    r8,r10
00053a  f3680707          BFI      r7,r8,#0,#8
00053e  f3422207          SBFX     r2,r2,#8,#8
000542  f3412107          SBFX     r1,r1,#8,#8
000546  428a              CMP      r2,r1
000548  bfc8              IT       GT
00054a  4611              MOVGT    r1,r2
00054c  e000              B        |L14.1360|
                  |L14.1358|
00054e  e004              B        |L14.1370|
                  |L14.1360|
000550  f361270f          BFI      r7,r1,#8,#8
;;;686    						PalmRect[pl] = algorithm_merge_rect(PalmRect[pl], PalmRect[pl2]);
;;;687    						PalmRectEnable[pl2] = NO;
000554  6037              STR      r7,[r6,#0]
000556  f805b000          STRB     r11,[r5,r0]
                  |L14.1370|
00055a  1c40              ADDS     r0,r0,#1
00055c  4560              CMP      r0,r12
00055e  dbb7              BLT      |L14.1232|
                  |L14.1376|
000560  1c5b              ADDS     r3,r3,#1
000562  4563              CMP      r3,r12
000564  dbab              BLT      |L14.1214|
                  |L14.1382|
;;;688    						
;;;689    					}
;;;690    				}
;;;691    			}
;;;692    		}
;;;693    	}
;;;694    	
;;;695    	//Rearrange PalmRect
;;;696    	PalmCnt = 0;
;;;697    	for(pl=0; pl<PalmRegionNum; pl++)
000566  9803              LDR      r0,[sp,#0xc]
000568  2200              MOVS     r2,#0                 ;696
00056a  b360              CBZ      r0,|L14.1478|
00056c  4b32              LDR      r3,|L14.1592|
00056e  9e03              LDR      r6,[sp,#0xc]          ;474
000570  f1030034          ADD      r0,r3,#0x34
000574  4680              MOV      r8,r0
000576  f1080501          ADD      r5,r8,#1
00057a  1c69              ADDS     r1,r5,#1
00057c  f1080c03          ADD      r12,r8,#3
000580  f1a00934          SUB      r9,r0,#0x34           ;474
                  |L14.1412|
;;;698    	{
;;;699    		if(PalmRectEnable[pl])
000584  781f              LDRB     r7,[r3,#0]
000586  b1b7              CBZ      r7,|L14.1462|
;;;700    		{
;;;701    			PalmRect[PalmCnt] = PalmRect[pl];
000588  eb080782          ADD      r7,r8,r2,LSL #2
00058c  f890a000          LDRB     r10,[r0,#0]
000590  f887a000          STRB     r10,[r7,#0]
000594  f895a000          LDRB     r10,[r5,#0]
000598  f887a001          STRB     r10,[r7,#1]
00059c  f891a000          LDRB     r10,[r1,#0]
0005a0  f887a002          STRB     r10,[r7,#2]
0005a4  f89ca000          LDRB     r10,[r12,#0]
0005a8  f887a003          STRB     r10,[r7,#3]
;;;702    			PalmRectEnable[PalmCnt] = PalmRectEnable[pl];
0005ac  781f              LDRB     r7,[r3,#0]
0005ae  f8097002          STRB     r7,[r9,r2]
0005b2  1c52              ADDS     r2,r2,#1
;;;703    			PalmCnt++;
0005b4  b2d2              UXTB     r2,r2
                  |L14.1462|
0005b6  1d00              ADDS     r0,r0,#4
0005b8  1d09              ADDS     r1,r1,#4
0005ba  1c5b              ADDS     r3,r3,#1
0005bc  1d2d              ADDS     r5,r5,#4
0005be  1e76              SUBS     r6,r6,#1
0005c0  f10c0c04          ADD      r12,r12,#4
;;;704    		}
0005c4  d1de              BNE      |L14.1412|
                  |L14.1478|
;;;705    	}
;;;706    	PalmRegionNum = PalmCnt;
0005c6  f88e2000          STRB     r2,[lr,#0]
;;;707    			
;;;708    	//Remove Palm label
;;;709    	{
;;;710    		int normal_label_num = 0;
0005ca  2000              MOVS     r0,#0
;;;711    		for(cl = 0;cl < temp_label->ucValidNum;cl++)
0005cc  f8942271          LDRB     r2,[r4,#0x271]
0005d0  4601              MOV      r1,r0
0005d2  2a00              CMP      r2,#0
0005d4  dd0f              BLE      |L14.1526|
0005d6  9e22              LDR      r6,[sp,#0x88]         ;471
0005d8  ab04              ADD      r3,sp,#0x10           ;459
0005da  2501              MOVS     r5,#1                 ;471
                  |L14.1500|
;;;712    		{
;;;713    			if((IsPalm[cl] & 0x0F) == 0){
0005dc  5c5a              LDRB     r2,[r3,r1]
0005de  f0120f0f          TST      r2,#0xf
;;;714    				temp_label->tValidRect[normal_label_num] = temp_label->tValidRect[cl];
;;;715    				temp_label->sValidMaxVal[normal_label_num] = temp_label->sValidMaxVal[cl];
;;;716    				temp_label->tValidMaxPos[normal_label_num] = temp_label->tValidMaxPos[cl];
;;;717    				temp_label->usValidCellCnt[normal_label_num] = temp_label->usValidCellCnt[cl];
;;;718    				normal_label_num++;
;;;719    			}
;;;720    			else
;;;721    				thisInfo->bIsPalm = YES;
0005e2  bf18              IT       NE
0005e4  f8865fb2          STRBNE   r5,[r6,#0xfb2]
0005e8  d00a              BEQ      |L14.1536|
0005ea  bf00              NOP      
                  |L14.1516|
0005ec  f8942271          LDRB     r2,[r4,#0x271]
0005f0  1c49              ADDS     r1,r1,#1
0005f2  428a              CMP      r2,r1
0005f4  dcf2              BGT      |L14.1500|
                  |L14.1526|
;;;722    		}
;;;723    		temp_label->ucValidNum = normal_label_num;
0005f6  f8840271          STRB     r0,[r4,#0x271]
;;;724    	}
;;;725    }
0005fa  b027              ADD      sp,sp,#0x9c
0005fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.1536|
000600  eb040c81          ADD      r12,r4,r1,LSL #2      ;714
000604  eb040280          ADD      r2,r4,r0,LSL #2       ;714
000608  f8dcc272          LDR      r12,[r12,#0x272]      ;714
00060c  f8c2c272          STR      r12,[r2,#0x272]       ;714
000610  eb040241          ADD      r2,r4,r1,LSL #1       ;715
000614  eb040c40          ADD      r12,r4,r0,LSL #1      ;715
000618  f8b272d2          LDRH     r7,[r2,#0x2d2]        ;715
00061c  f8ac72d2          STRH     r7,[r12,#0x2d2]       ;715
000620  f8b272b2          LDRH     r7,[r2,#0x2b2]        ;716
000624  f8ac72b2          STRH     r7,[r12,#0x2b2]       ;716
000628  f8b222f2          LDRH     r2,[r2,#0x2f2]        ;717
00062c  f8ac22f2          STRH     r2,[r12,#0x2f2]       ;717
000630  1c40              ADDS     r0,r0,#1              ;717
000632  e7db              B        |L14.1516|
;;;726    
                          ENDP

                  |L14.1588|
                          DCD      ||.data||
                  |L14.1592|
                          DCD      ||.bss||

                          AREA ||i.algorithm_label_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_process PROC
;;;2165   
;;;2166   void algorithm_label_process(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2167   {
000004  4682              MOV      r10,r0
000006  481e              LDR      r0,|L15.128|
000008  2400              MOVS     r4,#0
00000a  2610              MOVS     r6,#0x10
00000c  6885              LDR      r5,[r0,#8]  ; thisInfo
00000e  2701              MOVS     r7,#1
000010  f04f084f          MOV      r8,#0x4f
000014  f8054f39          STRB     r4,[r5,#0x39]!
000018  f04f092c          MOV      r9,#0x2c
00001c  f8854271          STRB     r4,[r5,#0x271]
                  |L15.32|
000020  1e76              SUBS     r6,r6,#1
000022  ebc600c6          RSB      r0,r6,r6,LSL #3
000026  eb001046          ADD      r0,r0,r6,LSL #5
00002a  4428              ADD      r0,r0,r5
00002c  2127              MOVS     r1,#0x27
00002e  1c40              ADDS     r0,r0,#1
000030  f7fffffe          BL       __aeabi_memclr
000034  eb050086          ADD      r0,r5,r6,LSL #2
000038  eb050146          ADD      r1,r5,r6,LSL #1
00003c  f8808274          STRB     r8,[r0,#0x274]
000040  f8804275          STRB     r4,[r0,#0x275]
000044  f8809272          STRB     r9,[r0,#0x272]
000048  f8804273          STRB     r4,[r0,#0x273]
00004c  f8a142d2          STRH     r4,[r1,#0x2d2]
000050  f8a142f2          STRH     r4,[r1,#0x2f2]
000054  f88142b2          STRB     r4,[r1,#0x2b2]
000058  1c7f              ADDS     r7,r7,#1
00005a  f88142b3          STRB     r4,[r1,#0x2b3]
00005e  2f10              CMP      r7,#0x10
000060  ddde              BLE      |L15.32|
000062  f640710e          MOV      r1,#0xf0e
000066  4807              LDR      r0,|L15.132|
000068  f7fffffe          BL       __aeabi_memclr4
00006c  f6434138          MOV      r1,#0x3c38
000070  4805              LDR      r0,|L15.136|
000072  f7fffffe          BL       __aeabi_memclr4
;;;2168   	algorithm_label_initialise(mode);
;;;2169   
;;;2170   //	if( (thisInfo->bTouchExpect && mode == FULL_MODE) | (thisInfo->bTouchExpect && mode == LOCAL_FINGER_MODE) 
;;;2171   //		| (thisInfo->bTouchExpect_local && mode == LOCAL_MODE) | (thisInfo->bTouchExpect_local && mode == LOCAL_HOVER_MODE))
;;;2172   	{
;;;2173   		algorithm_label_SplitNMerge_process(mode);
000076  4650              MOV      r0,r10
000078  e8bd47f0          POP      {r4-r10,lr}
00007c  f7ffbffe          B.W      algorithm_label_SplitNMerge_process
;;;2174   	}
;;;2175   }
                          ENDP

                  |L15.128|
                          DCD      ||.data||
                  |L15.132|
                          DCD      FullSharedBuff+0xe6f4
                  |L15.136|
                          DCD      FullSharedBuff+0x8ca0

                          AREA ||i.algorithm_merge_rect||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect PROC
;;;413    
;;;414    tRect_t algorithm_merge_rect(tRect_t RectA, tRect_t RectB)
000000  f3404c07          SBFX     r12,r0,#16,#8
;;;415    {
000004  f3414207          SBFX     r2,r1,#16,#8
000008  4603              MOV      r3,r0
;;;416    	tRect_t RectC;
;;;417    	
;;;418    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00000a  4594              CMP      r12,r2
00000c  bfb8              IT       LT
00000e  4662              MOVLT    r2,r12
000010  f3624017          BFI      r0,r2,#16,#8
000014  ea4f6c23          ASR      r12,r3,#24
000018  160a              ASRS     r2,r1,#24
;;;419    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
00001a  4594              CMP      r12,r2
00001c  bfc8              IT       GT
00001e  4662              MOVGT    r2,r12
000020  f362601f          BFI      r0,r2,#24,#8
000024  fa4ffc83          SXTB     r12,r3
000028  b24a              SXTB     r2,r1
;;;420    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
00002a  4594              CMP      r12,r2
00002c  bfb8              IT       LT
00002e  4662              MOVLT    r2,r12
000030  f3620007          BFI      r0,r2,#0,#8
000034  f3432207          SBFX     r2,r3,#8,#8
000038  f3412107          SBFX     r1,r1,#8,#8
;;;421    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
00003c  428a              CMP      r2,r1
00003e  bfd8              IT       LE
000040  460a              MOVLE    r2,r1
000042  f362200f          BFI      r0,r2,#8,#8
;;;422    	
;;;423    	return RectC;
;;;424    }
000046  4770              BX       lr
;;;425    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
                          ENDP


                          AREA ||i.algorithm_merge_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect_point PROC
;;;433    }
;;;434    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
000000  b470              PUSH     {r4-r6}
;;;435    {
;;;436    	tRect_t RectB, RectC;
;;;437    	
;;;438    	RectB.cs = 0 < (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)-1 : 0;
000002  ea4f2c21          ASR      r12,r1,#8
000006  4604              MOV      r4,r0                 ;435
000008  f1bc0f00          CMP      r12,#0
00000c  bfcc              ITE      GT
00000e  f1ac0301          SUBGT    r3,r12,#1
000012  2300              MOVLE    r3,#0
000014  b25b              SXTB     r3,r3
;;;439    	RectB.ce = (COL_MAX - 1) > (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)+1 : (COL_MAX - 1);
000016  254f              MOVS     r5,#0x4f
000018  ebb52f21          CMP      r5,r1,ASR #8
00001c  bfcc              ITE      GT
00001e  f10c0101          ADDGT    r1,r12,#1
000022  214f              MOVLE    r1,#0x4f
000024  b249              SXTB     r1,r1
;;;440    	RectB.rs = 0 < (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)-1 : 0;
000026  1215              ASRS     r5,r2,#8
000028  2d00              CMP      r5,#0
00002a  bfcc              ITE      GT
00002c  f1a50c01          SUBGT    r12,r5,#1
000030  f04f0c00          MOVLE    r12,#0
000034  fa4ffc8c          SXTB     r12,r12
;;;441    	RectB.re = (ROW_MAX - 1) > (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)+1 : (ROW_MAX - 1);
000038  262c              MOVS     r6,#0x2c
00003a  ebb62f22          CMP      r6,r2,ASR #8
00003e  bfcc              ITE      GT
000040  1c6a              ADDGT    r2,r5,#1
000042  222c              MOVLE    r2,#0x2c
000044  b252              SXTB     r2,r2
000046  f3444507          SBFX     r5,r4,#16,#8
;;;442    	
;;;443    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00004a  429d              CMP      r5,r3
00004c  bfb8              IT       LT
00004e  462b              MOVLT    r3,r5
000050  f3634017          BFI      r0,r3,#16,#8
000054  1623              ASRS     r3,r4,#24
;;;444    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
000056  428b              CMP      r3,r1
000058  bfc8              IT       GT
00005a  4619              MOVGT    r1,r3
00005c  f361601f          BFI      r0,r1,#24,#8
000060  b261              SXTB     r1,r4
;;;445    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
000062  4561              CMP      r1,r12
000064  bfb8              IT       LT
000066  468c              MOVLT    r12,r1
000068  f36c0007          BFI      r0,r12,#0,#8
00006c  f3442107          SBFX     r1,r4,#8,#8
;;;446    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
000070  4291              CMP      r1,r2
000072  bfc8              IT       GT
000074  460a              MOVGT    r2,r1
000076  f362200f          BFI      r0,r2,#8,#8
;;;447    	
;;;448    //	RectC.cs = RectA.cs < (PointA.x>>POS_BOOST_SHIFT_) ? RectA.cs : (PointA.x>>POS_BOOST_SHIFT_);
;;;449    //	RectC.ce = RectA.ce > (PointA.x>>POS_BOOST_SHIFT_) ? RectA.ce : (PointA.x>>POS_BOOST_SHIFT_);
;;;450    //	RectC.rs = RectA.rs < (PointA.y>>POS_BOOST_SHIFT_) ? RectA.rs : (PointA.y>>POS_BOOST_SHIFT_);
;;;451    //	RectC.re = RectA.re > (PointA.y>>POS_BOOST_SHIFT_) ? RectA.re : (PointA.y>>POS_BOOST_SHIFT_);
;;;452    	
;;;453    	return RectC;
;;;454    }
00007a  bc70              POP      {r4-r6}
00007c  4770              BX       lr
;;;455    //#define KEEPPALMREGIONFRAME 50
                          ENDP


                          AREA ||i.algorithm_nearby_rect||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect PROC
;;;403    
;;;404    bool_t algorithm_nearby_rect(tRect_t RectA, tRect_t RectB, uint8_t dist_th)
000000  f3412c07          SBFX     r12,r1,#8,#8
;;;405    {
000004  b243              SXTB     r3,r0
;;;406    	if(RectA.rs <= RectB.re+dist_th && RectB.rs <= RectA.re+dist_th){
000006  4494              ADD      r12,r12,r2
000008  4563              CMP      r3,r12
00000a  dc13              BGT      |L18.52|
00000c  f3402c07          SBFX     r12,r0,#8,#8          ;405
000010  b24b              SXTB     r3,r1                 ;405
000012  4494              ADD      r12,r12,r2
000014  4563              CMP      r3,r12
000016  dc0d              BGT      |L18.52|
000018  f3404307          SBFX     r3,r0,#16,#8
;;;407    		if(RectA.cs <= RectB.ce+dist_th && RectB.cs <= RectA.ce+dist_th){
00001c  eb026c21          ADD      r12,r2,r1,ASR #24
000020  4563              CMP      r3,r12
000022  dc07              BGT      |L18.52|
000024  f3414107          SBFX     r1,r1,#16,#8
000028  eb026020          ADD      r0,r2,r0,ASR #24
00002c  4288              CMP      r0,r1
;;;408    			return YES;
00002e  bfa4              ITT      GE
000030  2001              MOVGE    r0,#1
;;;409    		}
;;;410    	}
;;;411    	return NO;
;;;412    }
000032  4770              BXGE     lr
                  |L18.52|
000034  2000              MOVS     r0,#0                 ;411
000036  4770              BX       lr
;;;413    
                          ENDP


                          AREA ||i.algorithm_nearby_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect_point PROC
;;;424    }
;;;425    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
000000  b410              PUSH     {r4}
;;;426    {
000002  fa4ffc80          SXTB     r12,r0
;;;427    	if(RectA.rs <= (PointA.y>>POS_BOOST_SHIFT_)+dist_th && RectA.re+dist_th >= (PointA.y>>POS_BOOST_SHIFT_)){
000006  eb032422          ADD      r4,r3,r2,ASR #8
00000a  4564              CMP      r4,r12
00000c  db13              BLT      |L19.54|
00000e  f3402c07          SBFX     r12,r0,#8,#8          ;426
000012  449c              ADD      r12,r12,r3
000014  ebbc2f22          CMP      r12,r2,ASR #8
000018  db0d              BLT      |L19.54|
00001a  f3404207          SBFX     r2,r0,#16,#8
;;;428    		if(RectA.cs <= (PointA.x>>POS_BOOST_SHIFT_)+dist_th && RectA.ce+dist_th >= (PointA.x>>POS_BOOST_SHIFT_)){
00001e  eb032c21          ADD      r12,r3,r1,ASR #8
000022  4562              CMP      r2,r12
000024  dc07              BGT      |L19.54|
000026  eb036020          ADD      r0,r3,r0,ASR #24
00002a  ebb02f21          CMP      r0,r1,ASR #8
;;;429    			return YES;
00002e  bfa2              ITTT     GE
000030  2001              MOVGE    r0,#1
;;;430    		}
;;;431    	}
;;;432    	return NO;
;;;433    }
000032  bc10              POPGE    {r4}
000034  4770              BXGE     lr
                  |L19.54|
000036  2000              MOVS     r0,#0                 ;432
000038  bc10              POP      {r4}
00003a  4770              BX       lr
;;;434    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
                          ENDP


                          AREA ||i.heon_algorithm||, CODE, READONLY, ALIGN=2

                  heon_algorithm PROC
;;;1289   int testLabelArray2[4];
;;;1290   int heon_algorithm(int id, uint8_t _search_idx, tCell_t _tPos)
000000  e92d0ff0          PUSH     {r4-r11}
;;;1291   {
;;;1292   	int i, r_i, c_i;
;;;1293   	uint8_t neighbor_label_id;
;;;1294   	int sum = 0;
;;;1295   
;;;1296   	for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
000004  f8dfc0a4          LDR      r12,|L20.172|
000008  eb011301          ADD      r3,r1,r1,LSL #4
00000c  4680              MOV      r8,r0                 ;1291
00000e  f81c1003          LDRB     r1,[r12,r3]
000012  2000              MOVS     r0,#0                 ;1294
000014  2900              CMP      r1,#0                 ;1291
;;;1297   	{
;;;1298   #if (PAD_ == 0)
;;;1299   			if((_tPos.r == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;1300   				r_i = _tPos.r;
;;;1301   			else
;;;1302   				r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;1303   
;;;1304   			if((_tPos.c == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;1305   				c_i = _tPos.c;
;;;1306   			else
;;;1307   				c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;1308   #else 
;;;1309   			r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;1310   			c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;1311   #endif
;;;1312   
;;;1313   		if(HAL_READ_LABEL_IMAGE(r_i,c_i) == id)
;;;1314   		{
;;;1315   			if(id==1)
;;;1316   				testLabelArray[i] = HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1317   			else
;;;1318   				testLabelArray2[i] = HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1319   			
;;;1320   			sum += HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1321   		}
;;;1322   	}
;;;1323   	
;;;1324   	return sum;
;;;1325   }
000016  bf04              ITT      EQ
000018  e8bd0ff0          POPEQ    {r4-r11}
00001c  4770              BXEQ     lr
00001e  4e24              LDR      r6,|L20.176|
000020  4463              ADD      r3,r3,r12             ;1296
000022  1c9c              ADDS     r4,r3,#2              ;1296
000024  f1030c01          ADD      r12,r3,#1             ;1296
000028  4b22              LDR      r3,|L20.180|
00002a  f1060510          ADD      r5,r6,#0x10           ;1296
00002e  f3422907          SBFX     r9,r2,#8,#8           ;1296
000032  fa4ffa82          SXTB     r10,r2                ;1296
000036  bf00              NOP                            ;1309
                  |L20.56|
000038  f9942000          LDRSB    r2,[r4,#0]            ;1309
00003c  eb090702          ADD      r7,r9,r2              ;1309
000040  f99c2000          LDRSB    r2,[r12,#0]           ;1310
000044  eb070bc7          ADD      r11,r7,r7,LSL #3      ;1313
000048  eb0b1747          ADD      r7,r11,r7,LSL #5      ;1313
00004c  4452              ADD      r2,r2,r10             ;1310
00004e  eb030b47          ADD      r11,r3,r7,LSL #1      ;1313
000052  4493              ADD      r11,r11,r2            ;1313
000054  f50b4b60          ADD      r11,r11,#0xe000       ;1313
000058  f89bb747          LDRB     r11,[r11,#0x747]      ;1313
00005c  45c3              CMP      r11,r8                ;1313
00005e  d117              BNE      |L20.144|
000060  eb030b87          ADD      r11,r3,r7,LSL #2      ;1318
000064  eb0b0b42          ADD      r11,r11,r2,LSL #1     ;1318
000068  f50b4b40          ADD      r11,r11,#0xc000       ;1318
00006c  f1b80f01          CMP      r8,#1                 ;1315
000070  f9bbb97e          LDRSH    r11,[r11,#0x97e]      ;1318
000074  bf14              ITE      NE                    ;1318
000076  f8c5b000          STRNE    r11,[r5,#0]           ;1318
00007a  f8c6b000          STREQ    r11,[r6,#0]           ;1316
00007e  eb030787          ADD      r7,r3,r7,LSL #2       ;1320
000082  eb070242          ADD      r2,r7,r2,LSL #1       ;1320
000086  f5024240          ADD      r2,r2,#0xc000         ;1320
00008a  f9b2297e          LDRSH    r2,[r2,#0x97e]        ;1320
00008e  4410              ADD      r0,r0,r2              ;1320
                  |L20.144|
000090  1e49              SUBS     r1,r1,#1              ;1320
000092  f1040402          ADD      r4,r4,#2              ;1320
000096  f1050504          ADD      r5,r5,#4              ;1320
00009a  f1060604          ADD      r6,r6,#4              ;1320
00009e  f10c0c02          ADD      r12,r12,#2            ;1320
0000a2  d1c9              BNE      |L20.56|
0000a4  e8bd0ff0          POP      {r4-r11}
0000a8  4770              BX       lr
;;;1326   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L20.172|
                          DCD      ||.data||+0x51
                  |L20.176|
                          DCD      ||.bss||+0x5c
                  |L20.180|
                          DCD      FullSharedBuff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PalmRectEnable
                          %        12
                  testLabelSum
                          %        40
                  PalmRect
                          %        40
                  testLabelArray
                          %        16
                  testLabelArray2
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  PalmRegionNum
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  testConflictValue
                          DCD      0x00000000
                  testSum
                          DCD      0x00000000
                  testOldD
                          DCD      0x00000000
                  testNewD
                          DCD      0x00000000
                  testRealD
                          DCD      0x00000000
                  PalmRegionUpdateCnt
                          DCD      0x00000000
                  BOUNDARY_4_SEARCH_TABLE
000024  04ff0000          DCB      0x04,0xff,0x00,0x00
000028  ff010000          DCB      0xff,0x01,0x00,0x00
00002c  0103ff00          DCB      0x01,0x03,0xff,0x00
000030  00ff0001          DCB      0x00,0xff,0x00,0x01
000034  000003ff          DCB      0x00,0x00,0x03,0xff
000038  0000ff01          DCB      0x00,0x00,0xff,0x01
00003c  00000003          DCB      0x00,0x00,0x00,0x03
000040  00ff0100          DCB      0x00,0xff,0x01,0x00
000044  00010000          DCB      0x00,0x01,0x00,0x00
000048  03ff0001          DCB      0x03,0xff,0x00,0x01
00004c  00000100          DCB      0x00,0x00,0x01,0x00
000050  00                DCB      0x00
                  BOUNDARY_8_SEARCH_TABLE
000051  08ff00            DCB      0x08,0xff,0x00
000054  ffff00ff          DCB      0xff,0xff,0x00,0xff
000058  01ff0100          DCB      0x01,0xff,0x01,0x00
00005c  01010001          DCB      0x01,0x01,0x00,0x01
000060  ff010701          DCB      0xff,0x01,0x07,0x01
000064  010001ff          DCB      0x01,0x00,0x01,0xff
000068  01ff00ff          DCB      0x01,0xff,0x00,0xff
00006c  ff00ff01          DCB      0xff,0x00,0xff,0x01
000070  ff000006          DCB      0xff,0x00,0x00,0x06
000074  ff01ff00          DCB      0xff,0x01,0xff,0x00
000078  ffff00ff          DCB      0xff,0xff,0x00,0xff
00007c  01ff0100          DCB      0x01,0xff,0x01,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  05ffff00          DCB      0x05,0xff,0xff,0x00
000088  ff01ff01          DCB      0xff,0x01,0xff,0x01
00008c  00010100          DCB      0x00,0x01,0x01,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  0006ffff          DCB      0x00,0x06,0xff,0xff
000098  00ff01ff          DCB      0x00,0xff,0x01,0xff
00009c  01000101          DCB      0x01,0x00,0x01,0x01
0000a0  00010000          DCB      0x00,0x01,0x00,0x00
0000a4  00000501          DCB      0x00,0x00,0x05,0x01
0000a8  ff010001          DCB      0xff,0x01,0x00,0x01
0000ac  010001ff          DCB      0x01,0x00,0x01,0xff
0000b0  01000000          DCB      0x01,0x00,0x00,0x00
0000b4  00000006          DCB      0x00,0x00,0x00,0x06
0000b8  01ff0100          DCB      0x01,0xff,0x01,0x00
0000bc  01010001          DCB      0x01,0x01,0x00,0x01
0000c0  ff01ff00          DCB      0xff,0x01,0xff,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  04010100          DCB      0x04,0x01,0x01,0x00
0000cc  01ff01ff          DCB      0x01,0xff,0x01,0xff
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00050101          DCB      0x00,0x05,0x01,0x01
0000dc  0001ff01          DCB      0x00,0x01,0xff,0x01
0000e0  ff00ffff          DCB      0xff,0x00,0xff,0xff
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  0000              DCB      0x00,0x00

                          AREA ||i.__ARM_common_memclr4_10||, COMGROUP=__ARM_common_memclr4_10, CODE, READONLY, ALIGN=1

                  __ARM_common_memclr4_10 PROC
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  8101              STRH     r1,[r0,#8]
000008  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Label\\algorithm_label.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_label_c_b54f614d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REVSH|
#line 402
|__asm___17_algorithm_label_c_b54f614d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____RRX|
#line 587
|__asm___17_algorithm_label_c_b54f614d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
