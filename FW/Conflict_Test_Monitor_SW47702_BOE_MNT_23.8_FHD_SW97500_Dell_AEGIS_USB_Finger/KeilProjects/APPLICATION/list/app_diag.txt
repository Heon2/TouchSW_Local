; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\app_diag.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\app_diag.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\app_diag.crf ..\..\App\app_diag.c]
                          THUMB

                          AREA ||i.app_diag_Init||, CODE, READONLY, ALIGN=2

                  app_diag_Init PROC
;;;49     
;;;50     void app_diag_Init(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	sptAlgorithmInfo = algorithm_GetInfo();
000002  f7fffffe          BL       algorithm_GetInfo
000006  4901              LDR      r1,|L1.12|
000008  6008              STR      r0,[r1,#0]  ; sptAlgorithmInfo
;;;53     }
00000a  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  |L1.12|
                          DCD      ||.data||

                          AREA ||i.app_diag_oper_handler||, CODE, READONLY, ALIGN=2

                  app_diag_oper_handler PROC
;;;63     __IO uint32_t ulFrame2Count;
;;;64     eTouchOperMainState_t app_diag_oper_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;65     {
000004  b091              SUB      sp,sp,#0x44
;;;66     	eTouchOperMainState_t main_state;
;;;67     	eDiagOperSubState_t sub_state; // NOTE : enumerated another type
;;;68     	bool_t bLoop = YES;
000006  2001              MOVS     r0,#1
000008  9006              STR      r0,[sp,#0x18]
00000a  f7fffffe          BL       algorithm_GetInfo
00000e  49fe              LDR      r1,|L2.1032|
;;;69     	int i;
;;;70     	uint8_t r, c;
;;;71     	uint16_t deltaData;
;;;72     	uint32_t ulTempData;
;;;73     #if USED_PEN_MODE_OPERATION
;;;74     	TEST_LOCAL_STATE = 0;
;;;75     #endif /* USED_PEN_MODE_OPERATION */
;;;76     
;;;77     	app_diag_Init();
;;;78     	
;;;79     	sub_state = TOUCH_DIAG_OPER_ENTER;
;;;80     	sptAlgorithmInfo->bDiagMode = YES;
000010  6008              STR      r0,[r1,#0]  ; sptAlgorithmInfo
000012  f5005080          ADD      r0,r0,#0x1000
000016  2101              MOVS     r1,#1
000018  f8801026          STRB     r1,[r0,#0x26]
;;;81      
;;;82         while(bLoop)
;;;83         {
;;;84         	switch(sub_state)
;;;85         	{
;;;86     			case TOUCH_DIAG_OPER_ENTER:
;;;87     			{
;;;88     				sub_state = TOUCH_DIAG_OPER_WAIT;
;;;89     				break;
;;;90     			}
;;;91     			case TOUCH_DIAG_OPER_WAIT:
;;;92     			{
;;;93     //#ifdef MODE_WDT
;;;94     //				KICK_DOG();
;;;95     //#endif /* MODE_WDT */
;;;96     				protocol_swip_PendReadyStatus();
;;;97     				sub_state = TOUCH_DIAG_OPER_NORMAL;
;;;98     				break;
;;;99     			}
;;;100    			case TOUCH_DIAG_OPER_NORMAL:
;;;101    			{
;;;102    				const tModuleCommonConf_t * lptModuleCommonConf = module_GetCommonConfig();
;;;103    				const tAlgorithmModeConf_t * lptAlgorithmConf = algorithm_GetModeConfig();
;;;104    
;;;105    				switch(protocol_swip_GetTestType())
;;;106    				{
;;;107    					case CTT_ABS:
;;;108    					{
;;;109    						for(r = 0; r < ROW_MAX; r++)
;;;110    						{
;;;111    							for(c = 0; c < COL_MAX; c++)
00001c  48fb              LDR      r0,|L2.1036|
00001e  9004              STR      r0,[sp,#0x10]         ;82
000020  e00a              B        |L2.56|
                  |L2.34|
000022  9808              LDR      r0,[sp,#0x20]         ;84
000024  b140              CBZ      r0,|L2.56|
000026  2803              CMP      r0,#3                 ;84
000028  d00e              BEQ      |L2.72|
00002a  2804              CMP      r0,#4                 ;84
00002c  d006              BEQ      |L2.60|
00002e  2805              CMP      r0,#5                 ;84
000030  f04082f2          BNE.W    |L2.1560|
000034  f000bc2c          B.W      |L2.2192|
                  |L2.56|
000038  2004              MOVS     r0,#4                 ;88
00003a  e002              B        |L2.66|
                  |L2.60|
00003c  f7fffffe          BL       protocol_swip_PendReadyStatus
000040  2003              MOVS     r0,#3                 ;97
                  |L2.66|
000042  9008              STR      r0,[sp,#0x20]         ;88
000044  f000bae8          B.W      |L2.1560|
                  |L2.72|
000048  f7fffffe          BL       module_GetCommonConfig
00004c  f7fffffe          BL       algorithm_GetModeConfig
000050  4606              MOV      r6,r0                 ;103
000052  f7fffffe          BL       protocol_swip_GetTestType
000056  2809              CMP      r0,#9                 ;105
000058  f08082de          BCS.W    |L2.1560|
00005c  e8dff000          TBB      [pc,r0]               ;105
000060  fd05fcfd          DCB      0xfd,0x05,0xfc,0xfd
000064  fdfbfaf9          DCB      0xfd,0xfb,0xfa,0xf9
000068  c000              DCB      0xc0,0x00
00006a  4ce9              LDR      r4,|L2.1040|
00006c  2500              MOVS     r5,#0                 ;109
00006e  f64847a0          MOV      r7,#0x8ca0
000072  bf00              NOP      
                  |L2.116|
000074  eb050085          ADD      r0,r5,r5,LSL #2
000078  eb041040          ADD      r0,r4,r0,LSL #5
00007c  21a0              MOVS     r1,#0xa0
00007e  f50050e1          ADD      r0,r0,#0x1c20
000082  f7fffffe          BL       __aeabi_memclr4
000086  eb0500c5          ADD      r0,r5,r5,LSL #3
00008a  eb001045          ADD      r0,r0,r5,LSL #5
00008e  eb0400c0          ADD      r0,r4,r0,LSL #3
000092  4438              ADD      r0,r0,r7
000094  f44f71a0          MOV      r1,#0x140
000098  f7fffffe          BL       __aeabi_memclr4
00009c  1c68              ADDS     r0,r5,#1
00009e  b2c5              UXTB     r5,r0
0000a0  2d2d              CMP      r5,#0x2d
0000a2  d3e7              BCC      |L2.116|
;;;112    							{
;;;113    								HAL_WRITE_ABS_IMAGE(r, c, 0);
;;;114    								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;115    							}
;;;116    						}
;;;117    
;;;118    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0000a4  7870              LDRB     r0,[r6,#1]
0000a6  2500              MOVS     r5,#0
0000a8  2800              CMP      r0,#0
0000aa  dd05              BLE      |L2.184|
                  |L2.172|
;;;119    						{
;;;120    							module_wait_full_sample_done();
0000ac  f7fffffe          BL       module_wait_full_sample_done
0000b0  7870              LDRB     r0,[r6,#1]
0000b2  1c6d              ADDS     r5,r5,#1
0000b4  42a8              CMP      r0,r5
0000b6  dcf9              BGT      |L2.172|
                  |L2.184|
;;;121    						}
;;;122    
;;;123    						// ABS
;;;124    						ulFrame1Count = protocol_swip_GetABSAvrCount();
0000b8  f7fffffe          BL       protocol_swip_GetABSAvrCount
0000bc  4fd2              LDR      r7,|L2.1032|
0000be  60b8              STR      r0,[r7,#8]  ; ulFrame1Count
;;;125    						if(ulFrame1Count == 0)
0000c0  68b8              LDR      r0,[r7,#8]  ; ulFrame1Count
0000c2  2800              CMP      r0,#0
;;;126    						{
;;;127    							ulFrame1Count = 10;     // Default value
0000c4  bf04              ITT      EQ
0000c6  200a              MOVEQ    r0,#0xa
0000c8  60b8              STREQ    r0,[r7,#8]  ; ulFrame1Count
;;;128    						}
;;;129    
;;;130    						for(i=0; i<ulFrame1Count; i++)
0000ca  2500              MOVS     r5,#0
0000cc  68b8              LDR      r0,[r7,#8]  ; ulFrame1Count
0000ce  4285              CMP      r5,r0
;;;131    						{
;;;132    							module_wait_full_sample_done();
;;;133    
;;;134    							alogorithm_linefilter_2();
;;;135    
;;;136    							for(r = ROW_MAX; r--; )
;;;137    							{
;;;138    								for(c = COL_MAX; c--; )
0000d0  bf38              IT       CC
0000d2  f64856e0          MOVCC    r6,#0x8de0
0000d6  d244              BCS      |L2.354|
                  |L2.216|
0000d8  f7fffffe          BL       module_wait_full_sample_done
0000dc  f7fffffe          BL       alogorithm_linefilter_2
0000e0  f05f022c          MOVS.W   r2,#0x2c              ;136
                  |L2.228|
0000e4  eb0200c2          ADD      r0,r2,r2,LSL #3
0000e8  eb001042          ADD      r0,r0,r2,LSL #5
0000ec  eb0400c0          ADD      r0,r4,r0,LSL #3
0000f0  eb020182          ADD      r1,r2,r2,LSL #2
0000f4  4430              ADD      r0,r0,r6
0000f6  eb041141          ADD      r1,r4,r1,LSL #5
;;;139    								{
;;;140    									ulTempData = HAL_READ_COMMON_IMAGE(r, c);
;;;141    									HAL_WRITE_COMMON_IMAGE(r, c, (ulTempData + (uint32_t)HAL_READ_RAW_IMAGE(r,c)));
0000fa  f850cd04          LDR      r12,[r0,#-4]!
0000fe  f8b1809e          LDRH     r8,[r1,#0x9e]
000102  2326              MOVS     r3,#0x26
000104  44c4              ADD      r12,r12,r8
000106  f840c904          STR      r12,[r0],#-4
00010a  f8b1809c          LDRH     r8,[r1,#0x9c]
00010e  f850c908          LDR      r12,[r0],#-8
000112  44c4              ADD      r12,r12,r8
000114  f8c0c008          STR      r12,[r0,#8]
000118  f8b1809a          LDRH     r8,[r1,#0x9a]
00011c  f8d0c004          LDR      r12,[r0,#4]
000120  44c4              ADD      r12,r12,r8
000122  f8c0c004          STR      r12,[r0,#4]
000126  f8d0c000          LDR      r12,[r0,#0]
00012a  f8318f98          LDRH     r8,[r1,#0x98]!
00012e  44c4              ADD      r12,r12,r8
000130  f8c0c000          STR      r12,[r0,#0]
                  |L2.308|
000134  f850cd04          LDR      r12,[r0,#-4]!
000138  f8318c02          LDRH     r8,[r1,#-2]
00013c  1e5b              SUBS     r3,r3,#1
00013e  44c4              ADD      r12,r12,r8
000140  f840c904          STR      r12,[r0],#-4
000144  f8318d04          LDRH     r8,[r1,#-4]!
000148  f8d0c000          LDR      r12,[r0,#0]
00014c  44c4              ADD      r12,r12,r8
00014e  f8c0c000          STR      r12,[r0,#0]
000152  d1ef              BNE      |L2.308|
000154  1e51              SUBS     r1,r2,#1              ;138
000156  b2ca              UXTB     r2,r1                 ;138
000158  d2c4              BCS      |L2.228|
00015a  68b8              LDR      r0,[r7,#8]            ;138  ; ulFrame1Count
00015c  1c6d              ADDS     r5,r5,#1              ;138
00015e  4285              CMP      r5,r0                 ;138
000160  d3ba              BCC      |L2.216|
                  |L2.354|
;;;142    								}
;;;143    							}
;;;144    						}
;;;145    
;;;146    						for(r = ROW_MAX; r--; )
000162  232c              MOVS     r3,#0x2c
                  |L2.356|
000164  eb030cc3          ADD      r12,r3,r3,LSL #3      ;111
;;;147    						{
;;;148    							for(c = COL_MAX; c--; )
000168  2050              MOVS     r0,#0x50
00016a  eb030283          ADD      r2,r3,r3,LSL #2       ;111
00016e  eb0c1c43          ADD      r12,r12,r3,LSL #5     ;111
000172  2101              MOVS     r1,#1
000174  eb041242          ADD      r2,r4,r2,LSL #5       ;111
000178  eb040ccc          ADD      r12,r4,r12,LSL #3     ;111
                  |L2.380|
00017c  1e40              SUBS     r0,r0,#1              ;111
00017e  b2c0              UXTB     r0,r0
;;;149    							{
;;;150    								HAL_WRITE_ABS_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c)/ulFrame1Count));
000180  eb0c0580          ADD      r5,r12,r0,LSL #2
000184  f5054500          ADD      r5,r5,#0x8000
000188  f8d56ca0          LDR      r6,[r5,#0xca0]
00018c  68bd              LDR      r5,[r7,#8]  ; ulFrame1Count
00018e  fbb6f6f5          UDIV     r6,r6,r5
000192  eb020540          ADD      r5,r2,r0,LSL #1
000196  f5055580          ADD      r5,r5,#0x1000
00019a  1e40              SUBS     r0,r0,#1
00019c  f8a56c20          STRH     r6,[r5,#0xc20]
0001a0  b2c0              UXTB     r0,r0                 ;148
0001a2  eb0c0580          ADD      r5,r12,r0,LSL #2
0001a6  f5054500          ADD      r5,r5,#0x8000
0001aa  68be              LDR      r6,[r7,#8]  ; ulFrame1Count
0001ac  f8d55ca0          LDR      r5,[r5,#0xca0]
0001b0  1c89              ADDS     r1,r1,#2
0001b2  fbb5f6f6          UDIV     r6,r5,r6
0001b6  eb020540          ADD      r5,r2,r0,LSL #1
0001ba  f5055580          ADD      r5,r5,#0x1000
0001be  2951              CMP      r1,#0x51
0001c0  f8a56c20          STRH     r6,[r5,#0xc20]
0001c4  dbda              BLT      |L2.380|
0001c6  1e59              SUBS     r1,r3,#1              ;148
0001c8  b2cb              UXTB     r3,r1                 ;148
0001ca  d2cb              BCS      |L2.356|
;;;151    							}
;;;152    						}
;;;153    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
0001cc  4891              LDR      r0,|L2.1044|
0001ce  e9d01000          LDRD     r1,r0,[r0,#0]
0001d2  e9cd1009          STRD     r1,r0,[sp,#0x24]
0001d6  a809              ADD      r0,sp,#0x24
;;;154    						{
;;;155    							.bIsRotated = NO,
;;;156    							.ucCol_ = COL_MAX,
;;;157    							.ucRow_ = ROW_MAX,
;;;158    							.ucBufferCol_ = COL_MAX,
;;;159    							.ucKey_ = 0,
;;;160    							.tDataType = datatypeof(uint16_t)
;;;161    						};
;;;162    
;;;163    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_ABS_IMAGE_PTR());
0001d8  f50451e1          ADD      r1,r4,#0x1c20
;;;164    
;;;165    						break;
0001dc  f000ba1a          B.W      |L2.1556|
;;;166    					}
;;;167    #if USED_PEN_MODE_OPERATION
;;;168    					case CTT_DC_ABS:
;;;169    					{
;;;170    //						uint16_t read_raw_data;
;;;171    						uint8_t BaseOffset = lptAlgorithmConf->BaseLine.ucPP_MUX_Select * PEN_COORD_ROW_MAX;
;;;172    
;;;173    						for (r = 0; r < ROW_MAX; r++)
;;;174    						{
;;;175    							for (c = 0; c < COL_MAX; c++)
;;;176    							{
;;;177    								HAL_WRITE_DC_ABS_IMAGE(r, c, 0);
;;;178    								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;179    							}
;;;180    						}
;;;181    
;;;182    						eSENSING_CHANGE_MODE_t _mode = HAL_GetSensingChangeMode();
;;;183    						ePartialSensing_t RetVal = PARTIAL_PEN_BEACON;
;;;184    						sensingRowStart = 0;
;;;185    						HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_MODE);
;;;186    						while (YES)
;;;187    						{
;;;188    //#ifdef MODE_WDT
;;;189    //							KICK_DOG();
;;;190    //#endif /* MODE_WDT */
;;;191    							RetVal = module_wait_local_sample_done();
;;;192    							if (RetVal == LOCAL_OP_LAST_LHB)
;;;193    								break;
;;;194    						}
;;;195    
;;;196    //#ifdef MODE_WDT
;;;197    //							KICK_DOG();
;;;198    //#endif /* MODE_WDT */
;;;199    						module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;200    
;;;201    						// module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;202    						// while (YES)
;;;203    						// {
;;;204    						// 	RetVal = module_wait_local_sample_done();
;;;205    						// 	if(RetVal == LOCAL_OP_LAST_LHB)
;;;206    						// 		break;
;;;207    						// }
;;;208    						// ulFrame1Count = protocol_swip_GetDCABSCount();
;;;209    						// if(ulFrame1Count == 0)
;;;210    						// {
;;;211    							ulFrame1Count = 10;     // Default value
;;;212    						// }
;;;213    
;;;214    						for (i = 0; i < ulFrame1Count; i++)
;;;215    						{
;;;216    							while (YES)
;;;217    							{
;;;218    //#ifdef MODE_WDT
;;;219    //								KICK_DOG();
;;;220    //#endif /* MODE_WDT */
;;;221    								RetVal = module_wait_local_sample_done();
;;;222    								switch (RetVal)
;;;223    								{
;;;224    									case PARTIAL_PEN_COORD1:
;;;225    									case PARTIAL_PEN_COORD2:
;;;226    									case PARTIAL_PEN_COORD3:
;;;227    									case PARTIAL_PEN_COORD4:
;;;228    									{
;;;229    										currentRowStart = sensingRowStart;
;;;230    										for (r = 0; r < PEN_COORD_ROW_MAX; r++)
;;;231    										{
;;;232    											for (c = 0; c < COL_MAX; c++)
;;;233    											{
;;;234    												ulTempData = HAL_READ_COMMON_IMAGE(r + currentRowStart, c);
;;;235    												HAL_WRITE_COMMON_IMAGE(r + currentRowStart, c, (ulTempData + (uint32_t)HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c)));
;;;236    												// read_raw_data = HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c);
;;;237    												// HAL_WRITE_DC_ABS_IMAGE(r + currentRowStart, c, read_raw_data);
;;;238    											}
;;;239    										}
;;;240    										sensingRowStart += 5;
;;;241    										break;
;;;242    									}
;;;243    
;;;244    									default:
;;;245    										break;
;;;246    								}
;;;247    								
;;;248    								if (sensingRowStart > (ROW_MAX - PEN_COORD_ROW_MAX))
;;;249    								{
;;;250    									sensingRowStart = 0;
;;;251    									break;
;;;252    								}
;;;253    							}
;;;254    						}
;;;255    
;;;256    						for (r = 0; r < ROW_MAX; r++)
;;;257    						{
;;;258    							for (c = 0; c < COL_MAX; c++)
;;;259    							{
;;;260    								HAL_WRITE_DC_ABS_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c)/ulFrame1Count));
;;;261    							}
;;;262    						}
;;;263    
;;;264    						HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_SEARCH_MODE);	// Return Change Finger Mode
;;;265    
;;;266    						// HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_GET_NORMAL);
;;;267    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;268    						{
;;;269    							.bIsRotated = NO,
;;;270    							.ucCol_ = COL_MAX,
;;;271    							.ucRow_ = ROW_MAX,
;;;272    							.ucBufferCol_ = COL_MAX,
;;;273    							.ucKey_ = 0,
;;;274    							.tDataType = datatypeof(uint16_t)
;;;275    						};
;;;276    
;;;277    //#ifdef MODE_WDT
;;;278    //						KICK_DOG();
;;;279    //#endif /* MODE_WDT */
;;;280    						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_DC_ABS_IMAGE_PTR());
;;;281    						break;
;;;282    					}
;;;283    #endif /* USED_PEN_MODE_OPERATION */
;;;284    					case CTT_OPEN:
;;;285    					{
;;;286    
;;;287    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0001e0  7870              LDRB     r0,[r6,#1]
0001e2  2400              MOVS     r4,#0
0001e4  2800              CMP      r0,#0
0001e6  dd05              BLE      |L2.500|
                  |L2.488|
;;;288    						{
;;;289    							module_wait_full_sample_done();
0001e8  f7fffffe          BL       module_wait_full_sample_done
0001ec  7870              LDRB     r0,[r6,#1]
0001ee  1c64              ADDS     r4,r4,#1
0001f0  42a0              CMP      r0,r4
0001f2  dcf9              BGT      |L2.488|
                  |L2.500|
0001f4  4c86              LDR      r4,|L2.1040|
;;;290    						}
;;;291    
;;;292    						for(r=0; r<ROW_MAX; r++)
0001f6  2500              MOVS     r5,#0
                  |L2.504|
;;;293    						{
;;;294    							for(c=0; c<COL_MAX; c++)
0001f8  eb050085          ADD      r0,r5,r5,LSL #2
0001fc  eb041040          ADD      r0,r4,r0,LSL #5
000200  21a0              MOVS     r1,#0xa0
000202  f50050e1          ADD      r0,r0,#0x1c20
000206  f7fffffe          BL       __aeabi_memclr4
00020a  1c68              ADDS     r0,r5,#1
00020c  b2c5              UXTB     r5,r0
00020e  2d2d              CMP      r5,#0x2d
000210  d3f2              BCC      |L2.504|
;;;295    							{
;;;296    								HAL_WRITE_OPEN_1_IMAGE(r, c, 0);
;;;297    							}
;;;298    						}
;;;299    
;;;300    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_OPEN_TEST_STEP1));
000212  2000              MOVS     r0,#0
000214  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;301    
;;;302    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
000218  7870              LDRB     r0,[r6,#1]
00021a  2500              MOVS     r5,#0
00021c  2800              CMP      r0,#0
00021e  dd05              BLE      |L2.556|
                  |L2.544|
;;;303    						{
;;;304    							module_wait_full_sample_done();
000220  f7fffffe          BL       module_wait_full_sample_done
000224  7870              LDRB     r0,[r6,#1]
000226  1c6d              ADDS     r5,r5,#1
000228  42a8              CMP      r0,r5
00022a  dcf9              BGT      |L2.544|
                  |L2.556|
;;;305    						}
;;;306    
;;;307    						module_wait_full_sample_done();
00022c  f7fffffe          BL       module_wait_full_sample_done
;;;308    
;;;309    						for(r=ROW_MAX; r--; )
000230  f05f022c          MOVS.W   r2,#0x2c
                  |L2.564|
;;;310    						{
;;;311    							for(c=COL_MAX; c--; )
000234  eb020082          ADD      r0,r2,r2,LSL #2
000238  eb041040          ADD      r0,r4,r0,LSL #5
00023c  f100019e          ADD      r1,r0,#0x9e
;;;312    							{
;;;313    								HAL_WRITE_OPEN_1_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
000240  f50050e6          ADD      r0,r0,#0x1cc0
000244  f831c902          LDRH     r12,[r1],#-2
000248  f820cc02          STRH     r12,[r0,#-2]
00024c  f831c904          LDRH     r12,[r1],#-4
000250  e004              B        |L2.604|
000252  e0c1              B        |L2.984|
000254  e032              B        |L2.700|
000256  e30f              B        |L2.2168|
000258  e1ee              B        |L2.1592|
00025a  e1dd              B        |L2.1560|
                  |L2.604|
00025c  f820cc04          STRH     r12,[r0,#-4]
000260  f8b1c002          LDRH     r12,[r1,#2]
000264  f820cc06          STRH     r12,[r0,#-6]
000268  f8b1c000          LDRH     r12,[r1,#0]
00026c  f820cd08          STRH     r12,[r0,#-8]!
000270  f05f0326          MOVS.W   r3,#0x26
                  |L2.628|
000274  f831cc02          LDRH     r12,[r1,#-2]
000278  f820cc02          STRH     r12,[r0,#-2]
00027c  f831cd04          LDRH     r12,[r1,#-4]!
000280  f820cd04          STRH     r12,[r0,#-4]!
000284  1e5b              SUBS     r3,r3,#1
000286  d1f5              BNE      |L2.628|
000288  1e51              SUBS     r1,r2,#1              ;311
00028a  b2ca              UXTB     r2,r1                 ;311
00028c  d2d2              BCS      |L2.564|
;;;314    							}
;;;315    						}
;;;316    
;;;317    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_OPEN_TEST_RECOVERY);
00028e  2009              MOVS     r0,#9
000290  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;318    
;;;319    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
000294  7870              LDRB     r0,[r6,#1]
000296  2500              MOVS     r5,#0
000298  2800              CMP      r0,#0
00029a  dd05              BLE      |L2.680|
                  |L2.668|
;;;320    						{
;;;321    							module_wait_full_sample_done();
00029c  f7fffffe          BL       module_wait_full_sample_done
0002a0  7870              LDRB     r0,[r6,#1]
0002a2  1c6d              ADDS     r5,r5,#1
0002a4  42a8              CMP      r0,r5
0002a6  dcf9              BGT      |L2.668|
                  |L2.680|
;;;322    						}
;;;323    
;;;324    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
0002a8  485a              LDR      r0,|L2.1044|
0002aa  e9d01002          LDRD     r1,r0,[r0,#8]
0002ae  e9cd1009          STRD     r1,r0,[sp,#0x24]
0002b2  a809              ADD      r0,sp,#0x24
;;;325    						{
;;;326    							.bIsRotated = NO,
;;;327    							.ucCol_ = COL_MAX,
;;;328    							.ucRow_ = ROW_MAX,
;;;329    							.ucBufferCol_ = COL_MAX,
;;;330    							.ucKey_ = 0,
;;;331    							.tDataType = datatypeof(uint16_t)
;;;332    						};
;;;333    
;;;334    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_OPEN_1_IMAGE_PTR());
0002b4  f50451e1          ADD      r1,r4,#0x1c20
;;;335    
;;;336    						break;
0002b8  f000b9ac          B.W      |L2.1556|
                  |L2.700|
0002bc  f8df8150          LDR      r8,|L2.1040|
;;;337    					}
;;;338    					case CTT_SHORT_1:
;;;339    					{
;;;340    						uint8_t j = 0;
;;;341    #if (USED_ROIC_DEF == ROIC_SW97500)
;;;342    						int16_t sDiff = 0;
;;;343    
;;;344    						for (r = 0; r < ROW_MAX; r++)
0002c0  2400              MOVS     r4,#0
;;;345    						{
;;;346    							for (c = 0; c < COL_MAX; c++)
0002c2  bf00              NOP      
                  |L2.708|
0002c4  eb040084          ADD      r0,r4,r4,LSL #2
0002c8  eb081040          ADD      r0,r8,r0,LSL #5
0002cc  21a0              MOVS     r1,#0xa0
0002ce  f50050e1          ADD      r0,r0,#0x1c20
0002d2  f7fffffe          BL       __aeabi_memclr4
0002d6  1c60              ADDS     r0,r4,#1
0002d8  b2c4              UXTB     r4,r0
0002da  2c2d              CMP      r4,#0x2d
0002dc  d3f2              BCC      |L2.708|
;;;347    							{
;;;348    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;349    							}
;;;350    						}
;;;351    
;;;352    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0002de  7870              LDRB     r0,[r6,#1]
0002e0  2400              MOVS     r4,#0
0002e2  2800              CMP      r0,#0
0002e4  dd06              BLE      |L2.756|
;;;353    						{
;;;354    							module_wait_full_sample_done();
0002e6  bf00              NOP      
                  |L2.744|
0002e8  f7fffffe          BL       module_wait_full_sample_done
0002ec  7870              LDRB     r0,[r6,#1]
0002ee  1c64              ADDS     r4,r4,#1
0002f0  42a0              CMP      r0,r4
0002f2  dcf9              BGT      |L2.744|
                  |L2.756|
;;;355    						}
;;;356    
;;;357    						module_wait_full_sample_done();
0002f4  f7fffffe          BL       module_wait_full_sample_done
;;;358    
;;;359    //						// STEP 1 ~ 5
;;;360    //						for (j = 0; j < 5; j++)
;;;361    //						{
;;;362    //							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP1 + j));
;;;363    //
;;;364    //							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;365    //							{
;;;366    //								module_wait_full_sample_done();
;;;367    //							}
;;;368    //
;;;369    //							module_wait_full_sample_done();
;;;370    //
;;;371    //							for (r = ROW_MAX; r--;)
;;;372    //							{
;;;373    //								if (r % 5 == j)
;;;374    //								{
;;;375    //									for (c = COL_MAX; c--;)
;;;376    //									{
;;;377    //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;378    //										HAL_WRITE_BASELINE_2_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;379    //#endif
;;;380    //									}
;;;381    //								}
;;;382    //							}
;;;383    //						}
;;;384    
;;;385    						// STEP 6 ~ 10
;;;386    						for (j = 0; j < 5; j++)
;;;387    						{
;;;388    							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP6 + j));
;;;389    
;;;390    							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;391    							{
;;;392    								module_wait_full_sample_done();
;;;393    							}
;;;394    
;;;395    							module_wait_full_sample_done();
;;;396    
;;;397    							for (r = ROW_MAX; r--;)
;;;398    							{
;;;399    								if (r % 5 == j)
0002f8  4d47              LDR      r5,|L2.1048|
0002fa  2400              MOVS     r4,#0                 ;386
;;;400    								{
;;;401    									for (c = COL_MAX; c--;)
;;;402    									{
;;;403    										sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;404    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)(4095 - sDiff));
0002fc  f64079ff          MOV      r9,#0xfff
                  |L2.768|
000300  f104000f          ADD      r0,r4,#0xf            ;388
000304  b2c0              UXTB     r0,r0                 ;388
000306  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
00030a  7870              LDRB     r0,[r6,#1]            ;390
00030c  2700              MOVS     r7,#0                 ;390
00030e  2800              CMP      r0,#0                 ;390
000310  dd06              BLE      |L2.800|
000312  bf00              NOP                            ;392
                  |L2.788|
000314  f7fffffe          BL       module_wait_full_sample_done
000318  7870              LDRB     r0,[r6,#1]            ;392
00031a  1c7f              ADDS     r7,r7,#1              ;392
00031c  42b8              CMP      r0,r7                 ;392
00031e  dcf9              BGT      |L2.788|
                  |L2.800|
000320  f7fffffe          BL       module_wait_full_sample_done
000324  f05f022c          MOVS.W   r2,#0x2c              ;397
                  |L2.808|
000328  fba51002          UMULL    r1,r0,r5,r2           ;399
00032c  0880              LSRS     r0,r0,#2              ;399
00032e  4240              RSBS     r0,r0,#0              ;399
000330  eb000080          ADD      r0,r0,r0,LSL #2       ;399
000334  4410              ADD      r0,r0,r2              ;399
000336  42a0              CMP      r0,r4                 ;399
000338  d130              BNE      |L2.924|
00033a  eb020082          ADD      r0,r2,r2,LSL #2       ;401
00033e  eb081140          ADD      r1,r8,r0,LSL #5       ;401
000342  f101009e          ADD      r0,r1,#0x9e           ;401
000346  f50151e6          ADD      r1,r1,#0x1cc0
00034a  f830c902          LDRH     r12,[r0],#-2
00034e  464f              MOV      r7,r9
000350  eba90c0c          SUB      r12,r9,r12
000354  f821cc02          STRH     r12,[r1,#-2]
000358  f830c904          LDRH     r12,[r0],#-4
00035c  f05f0326          MOVS.W   r3,#0x26
000360  eba90c0c          SUB      r12,r9,r12
000364  f821cc04          STRH     r12,[r1,#-4]
000368  f8b0c002          LDRH     r12,[r0,#2]
00036c  eba90c0c          SUB      r12,r9,r12
000370  f821cc06          STRH     r12,[r1,#-6]
000374  f8b0c000          LDRH     r12,[r0,#0]
000378  eba90c0c          SUB      r12,r9,r12
00037c  f821cd08          STRH     r12,[r1,#-8]!
                  |L2.896|
000380  f830cc02          LDRH     r12,[r0,#-2]
000384  1e5b              SUBS     r3,r3,#1
000386  eba70c0c          SUB      r12,r7,r12
00038a  f821cc02          STRH     r12,[r1,#-2]
00038e  f830cd04          LDRH     r12,[r0,#-4]!
000392  eba70c0c          SUB      r12,r7,r12
000396  f821cd04          STRH     r12,[r1,#-4]!
00039a  d1f1              BNE      |L2.896|
                  |L2.924|
00039c  1e51              SUBS     r1,r2,#1              ;401
00039e  b2ca              UXTB     r2,r1                 ;401
0003a0  d2c2              BCS      |L2.808|
0003a2  1c60              ADDS     r0,r4,#1              ;401
0003a4  b2c4              UXTB     r4,r0                 ;401
0003a6  2c05              CMP      r4,#5                 ;401
0003a8  d3aa              BCC      |L2.768|
;;;405    									}
;;;406    								}
;;;407    							}
;;;408    						}
;;;409    #else /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;410    						for (r = 0; r < ROW_MAX; r++)
;;;411    						{
;;;412    							for (c = 0; c < COL_MAX; c++)
;;;413    							{
;;;414    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;415    							}
;;;416    						}
;;;417    
;;;418    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;419    						{
;;;420    //#ifdef MODE_WDT
;;;421    //							KICK_DOG();
;;;422    //#endif /* MODE_WDT */
;;;423    							module_wait_full_sample_done();
;;;424    						}
;;;425    
;;;426    //#ifdef MODE_WDT
;;;427    //						KICK_DOG();
;;;428    //#endif /* MODE_WDT */
;;;429    						module_wait_full_sample_done();
;;;430    
;;;431    						// STEP 1 ~ 5
;;;432    						for (j = 0; j < 5; j++)
;;;433    						{
;;;434    							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP1 + j));
;;;435    
;;;436    							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;437    							{
;;;438    //#ifdef MODE_WDT
;;;439    //								KICK_DOG();
;;;440    //#endif /* MODE_WDT */
;;;441    								module_wait_full_sample_done();
;;;442    							}
;;;443    
;;;444    //#ifdef MODE_WDT
;;;445    //							KICK_DOG();
;;;446    //#endif /* MODE_WDT */
;;;447    							module_wait_full_sample_done();
;;;448    
;;;449    							for (r = ROW_MAX; r--;)
;;;450    							{
;;;451    								if (r % 5 == j)
;;;452    								{
;;;453    									for (c = COL_MAX; c--;)
;;;454    									{
;;;455    										HAL_WRITE_SHORT_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;456    									}
;;;457    								}
;;;458    							}
;;;459    						}
;;;460    #endif /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;461    
;;;462    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT1_TEST_RECOVERY);
0003aa  2016              MOVS     r0,#0x16
0003ac  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;463    
;;;464    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0003b0  7870              LDRB     r0,[r6,#1]
0003b2  2400              MOVS     r4,#0
0003b4  2800              CMP      r0,#0
0003b6  dd05              BLE      |L2.964|
                  |L2.952|
;;;465    						{
;;;466    							module_wait_full_sample_done();
0003b8  f7fffffe          BL       module_wait_full_sample_done
0003bc  7870              LDRB     r0,[r6,#1]
0003be  1c64              ADDS     r4,r4,#1
0003c0  42a0              CMP      r0,r4
0003c2  dcf9              BGT      |L2.952|
                  |L2.964|
;;;467    						}
;;;468    
;;;469    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
0003c4  4813              LDR      r0,|L2.1044|
0003c6  e9d01004          LDRD     r1,r0,[r0,#0x10]
0003ca  e9cd1009          STRD     r1,r0,[sp,#0x24]
0003ce  a809              ADD      r0,sp,#0x24
;;;470    						{
;;;471    							.bIsRotated = NO,
;;;472    							.ucCol_ = COL_MAX,
;;;473    							.ucRow_ = ROW_MAX,
;;;474    							.ucBufferCol_ = COL_MAX,
;;;475    							.ucKey_ = 0,
;;;476    							.tDataType = datatypeof(uint16_t)
;;;477    						};
;;;478    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_SHORT_IMAGE_PTR());
0003d0  f50851e1          ADD      r1,r8,#0x1c20
;;;479    						break;
0003d4  f000b91e          B.W      |L2.1556|
                  |L2.984|
0003d8  4c0d              LDR      r4,|L2.1040|
;;;480    					}
;;;481    					case CTT_SHORT_2:
;;;482    					{
;;;483    						int16_t sDiff = 0;
;;;484    
;;;485    						for(r=0; r<ROW_MAX; r++)
0003da  2500              MOVS     r5,#0
                  |L2.988|
;;;486    						{
;;;487    							for(c=0; c<COL_MAX; c++)
0003dc  eb050085          ADD      r0,r5,r5,LSL #2
0003e0  eb041040          ADD      r0,r4,r0,LSL #5
0003e4  21a0              MOVS     r1,#0xa0
0003e6  f50050e1          ADD      r0,r0,#0x1c20
0003ea  f7fffffe          BL       __aeabi_memclr4
0003ee  1c68              ADDS     r0,r5,#1
0003f0  b2c5              UXTB     r5,r0
0003f2  2d2d              CMP      r5,#0x2d
0003f4  d3f2              BCC      |L2.988|
;;;488    							{
;;;489    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;490    							}
;;;491    						}
;;;492    
;;;493    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0003f6  7870              LDRB     r0,[r6,#1]
0003f8  2500              MOVS     r5,#0
0003fa  2800              CMP      r0,#0
0003fc  dd11              BLE      |L2.1058|
;;;494    						{
;;;495    							module_wait_full_sample_done();
0003fe  bf00              NOP      
                  |L2.1024|
000400  f7fffffe          BL       module_wait_full_sample_done
000404  7870              LDRB     r0,[r6,#1]
000406  e009              B        |L2.1052|
                  |L2.1032|
                          DCD      ||.data||
                  |L2.1036|
                          DCD      FullSharedBuff+0xc8d8
                  |L2.1040|
                          DCD      FullSharedBuff
                  |L2.1044|
                          DCD      ||.constdata||
                  |L2.1048|
                          DCD      0xcccccccd
                  |L2.1052|
00041c  1c6d              ADDS     r5,r5,#1
00041e  42a8              CMP      r0,r5
000420  dcee              BGT      |L2.1024|
                  |L2.1058|
;;;496    						}
;;;497    						module_wait_full_sample_done();
000422  f7fffffe          BL       module_wait_full_sample_done
;;;498    
;;;499    
;;;500    #if (USED_ROIC_DEF == ROIC_SW97500)
;;;501    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP1);
000426  2017              MOVS     r0,#0x17
000428  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;502    
;;;503    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
00042c  7870              LDRB     r0,[r6,#1]
00042e  2500              MOVS     r5,#0
000430  2800              CMP      r0,#0
000432  dd05              BLE      |L2.1088|
                  |L2.1076|
;;;504    						{
;;;505    							module_wait_full_sample_done();
000434  f7fffffe          BL       module_wait_full_sample_done
000438  7870              LDRB     r0,[r6,#1]
00043a  1c6d              ADDS     r5,r5,#1
00043c  42a8              CMP      r0,r5
00043e  dcf9              BGT      |L2.1076|
                  |L2.1088|
;;;506    						}
;;;507    
;;;508    						module_wait_full_sample_done();
000440  f7fffffe          BL       module_wait_full_sample_done
;;;509    
;;;510    						for(r = ROW_MAX; r--;)
000444  222c              MOVS     r2,#0x2c
;;;511    						{
;;;512    							for(c = COL_MAX; c--;)
000446  f64305e0          MOV      r5,#0x38e0
00044a  bf00              NOP      
                  |L2.1100|
00044c  eb020082          ADD      r0,r2,r2,LSL #2
000450  eb041140          ADD      r1,r4,r0,LSL #5
000454  f101009e          ADD      r0,r1,#0x9e
000458  4429              ADD      r1,r1,r5
;;;513    							{
;;;514    								HAL_WRITE_SHORT_2_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
00045a  f830c902          LDRH     r12,[r0],#-2
00045e  f821cc02          STRH     r12,[r1,#-2]
000462  f830c904          LDRH     r12,[r0],#-4
000466  f821cc04          STRH     r12,[r1,#-4]
00046a  f8b0c002          LDRH     r12,[r0,#2]
00046e  f821cc06          STRH     r12,[r1,#-6]
000472  f8b0c000          LDRH     r12,[r0,#0]
000476  f821cd08          STRH     r12,[r1,#-8]!
00047a  2326              MOVS     r3,#0x26
                  |L2.1148|
00047c  f830cc02          LDRH     r12,[r0,#-2]
000480  f821cc02          STRH     r12,[r1,#-2]
000484  f830cd04          LDRH     r12,[r0,#-4]!
000488  f821cd04          STRH     r12,[r1,#-4]!
00048c  1e5b              SUBS     r3,r3,#1
00048e  d1f5              BNE      |L2.1148|
000490  1e51              SUBS     r1,r2,#1              ;512
000492  b2ca              UXTB     r2,r1                 ;512
000494  d2da              BCS      |L2.1100|
;;;515    							}
;;;516    						}
;;;517    
;;;518    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP2);
000496  2018              MOVS     r0,#0x18
000498  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;519    
;;;520    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
00049c  7870              LDRB     r0,[r6,#1]
00049e  2500              MOVS     r5,#0
0004a0  2800              CMP      r0,#0
0004a2  dd05              BLE      |L2.1200|
                  |L2.1188|
;;;521    						{
;;;522    							module_wait_full_sample_done();
0004a4  f7fffffe          BL       module_wait_full_sample_done
0004a8  7870              LDRB     r0,[r6,#1]
0004aa  1c6d              ADDS     r5,r5,#1
0004ac  42a8              CMP      r0,r5
0004ae  dcf9              BGT      |L2.1188|
                  |L2.1200|
;;;523    						}
;;;524    
;;;525    						module_wait_full_sample_done();
0004b0  f7fffffe          BL       module_wait_full_sample_done
;;;526    
;;;527    						for(r = ROW_MAX; r--;)
0004b4  f04f0c2c          MOV      r12,#0x2c
;;;528    						{
;;;529    							for(c = COL_MAX; c--;)
;;;530    							{
;;;531    								if(c % 2 == 0)
;;;532    								{
;;;533    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;534    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;535    								}
;;;536    							}
;;;537    						}
;;;538    
;;;539    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP3);
;;;540    
;;;541    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;542    						{
;;;543    							module_wait_full_sample_done();
;;;544    						}
;;;545    
;;;546    						module_wait_full_sample_done();
;;;547    
;;;548    						for(r = ROW_MAX; r--;)
;;;549    						{
;;;550    							for(c = COL_MAX; c--;)
;;;551    							{
;;;552    								if(c % 2 == 1)
;;;553    								{
;;;554    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;555    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;556    								}
;;;557    							}
;;;558    						}
;;;559    
;;;560    						for(r = ROW_MAX; r--;)
;;;561    						{
;;;562    							for(c = COL_MAX; c--;)
;;;563    							{
;;;564    								sDiff = (int16_t)HAL_READ_SHORT_2_IMAGE(r, c) - (int16_t)HAL_READ_SHORT_IMAGE(r, c);
;;;565    								if(sDiff < 0)
;;;566    								{
;;;567    									sDiff = 0;
;;;568    								}
;;;569    								HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)(4095 - sDiff));
;;;570    							}
;;;571    						}
;;;572    #else /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;573    #if 1
;;;574    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP1));
;;;575    
;;;576    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;577    						{
;;;578    //#ifdef MODE_WDT
;;;579    //							KICK_DOG();
;;;580    //#endif /* MODE_WDT */
;;;581    							module_wait_full_sample_done();
;;;582    						}
;;;583    						// ulFrame1Count = protocol_swip_GetShortAvrCount();
;;;584                            // if(ulFrame1Count == 0)
;;;585    						// {
;;;586                            // 	ulFrame1Count = 5;      // Default value
;;;587    						// }
;;;588    
;;;589    						// for(i=0; i<ulFrame1Count; i++)
;;;590    						// {
;;;591    //#ifdef MODE_WDT
;;;592    //						KICK_DOG();
;;;593    //#endif /* MODE_WDT */
;;;594    						module_wait_full_sample_done();
;;;595    
;;;596    						for(r=ROW_MAX; r--; )
;;;597    						{
;;;598    							for(c=COL_MAX; c--; )
;;;599    							{
;;;600    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;601    
;;;602    								// SRIC 1~2
;;;603    								if (c < 6)
;;;604    								{
;;;605    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;606    								}
;;;607    								else if (c == 6)
;;;608    								{
;;;609    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;610    								}
;;;611    								else if (c == 7)
;;;612    								{
;;;613    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;614    								}
;;;615    								else if (c >= 8 && c <= 19)
;;;616    								{
;;;617    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;618    								}
;;;619    								 else if (c >= 22 && c <= 27)
;;;620    								{
;;;621    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;622    								}
;;;623      								// SRIC 3~4
;;;624    								if (c >= 28 && c <= 33)
;;;625    								{
;;;626    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;627    								}
;;;628    								else if (c == 34)
;;;629    								{
;;;630    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;631    								}
;;;632    								else if (c == 35)
;;;633    								{
;;;634    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;635    								}
;;;636    								else if (c >= 36 && c <= 47)
;;;637    								{
;;;638    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;639    								}
;;;640    								 else if (c >= 50 && c <= 55)
;;;641    								{
;;;642    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;643    								}
;;;644    								// SRIC 5~6
;;;645    								if (c >= 56 && c <= 61)
;;;646    								{
;;;647    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;648    								}
;;;649    								else if (c == 62)
;;;650    								{
;;;651    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;652    								}
;;;653    								else if (c == 63)
;;;654    								{
;;;655    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;656    								}
;;;657    								else if (c >= 64 && c <= 75)
;;;658    								{
;;;659    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;660    								}
;;;661    								 else if (c >= 78 && c <= 83)
;;;662    								{
;;;663    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;664    								}
;;;665    							}
;;;666    						}
;;;667    
;;;668    #endif
;;;669    #if 1
;;;670    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP2));
;;;671    
;;;672    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;673    						{
;;;674    //#ifdef MODE_WDT
;;;675    //							KICK_DOG();
;;;676    //#endif /* MODE_WDT */
;;;677    							module_wait_full_sample_done();
;;;678    						}
;;;679    						// ulFrame1Count = protocol_swip_GetShortAvrCount();
;;;680                            // if(ulFrame1Count == 0)
;;;681    						// {
;;;682                            // 	ulFrame1Count = 5;      // Default value
;;;683    						// }
;;;684    
;;;685    						// for(i=0; i<ulFrame1Count; i++)
;;;686    						// {
;;;687    //#ifdef MODE_WDT
;;;688    //						KICK_DOG();
;;;689    //#endif /* MODE_WDT */
;;;690    						module_wait_full_sample_done();
;;;691    
;;;692    						for(r=ROW_MAX; r--; )
;;;693    						{
;;;694    							for(c=COL_MAX; c--; )
;;;695    							{
;;;696    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;697    								// SRIC 1~2
;;;698    								if (c < 6)
;;;699    								{
;;;700    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;701    								}
;;;702    								else if (c == 6)
;;;703    								{
;;;704    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;705    								}
;;;706    								else if (c == 7)
;;;707    								{
;;;708    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;709    								}
;;;710    								else if (c >= 8 && c <= 19)
;;;711    								{
;;;712    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;713    								}
;;;714    								else if (c == 20)
;;;715    								{
;;;716    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;717    								}
;;;718    								else if (c == 21)
;;;719    								{
;;;720    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;721    								}
;;;722    								 else if (c >= 22 && c <= 27)
;;;723    								{
;;;724    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;725    								}
;;;726    								// SRIC 3~4
;;;727    								if (c >= 28 && c <= 33)
;;;728    								{
;;;729    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;730    								}
;;;731    								else if (c == 34)
;;;732    								{
;;;733    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;734    								}
;;;735    								else if (c == 35)
;;;736    								{
;;;737    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;738    								}
;;;739    								else if (c >= 36 && c <= 47)
;;;740    								{
;;;741    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;742    								}
;;;743    								else if (c == 48)
;;;744    								{
;;;745    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;746    								}
;;;747    								else if (c == 49)
;;;748    								{
;;;749    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;750    								}
;;;751    								 else if (c >= 50 && c <= 55)
;;;752    								{
;;;753    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;754    								}
;;;755    								// SRIC 5~6
;;;756    								if (c >= 56 && c <= 61)
;;;757    								{
;;;758    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;759    								}
;;;760    								else if (c == 62)
;;;761    								{
;;;762    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;763    								}
;;;764    								else if (c == 63)
;;;765    								{
;;;766    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;767    								}
;;;768    								else if (c >= 64 && c <= 75)
;;;769    								{
;;;770    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;771    								}
;;;772    								else if (c == 76)
;;;773    								{
;;;774    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;775    								}
;;;776    								else if (c == 77)
;;;777    								{
;;;778    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;779    								}
;;;780    								 else if (c >= 78 && c <= 83)
;;;781    								{
;;;782    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;783    								}
;;;784    							}
;;;785    						}
;;;786    #endif
;;;787    
;;;788    #if 1
;;;789    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP3));
;;;790    
;;;791    
;;;792    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;793    						{
;;;794    //#ifdef MODE_WDT
;;;795    //							KICK_DOG();
;;;796    //#endif /* MODE_WDT */
;;;797    							module_wait_full_sample_done();
;;;798    						}
;;;799    						// ulFrame1Count = protocol_swip_GetShortAvrCount();
;;;800                            // if(ulFrame1Count == 0)
;;;801    						// {
;;;802                            // 	ulFrame1Count = 5;      // Default value
;;;803    						// }
;;;804    
;;;805    						// for(i=0; i<ulFrame1Count; i++)
;;;806    						// {
;;;807    //#ifdef MODE_WDT
;;;808    //						KICK_DOG();
;;;809    //#endif /* MODE_WDT */
;;;810    						module_wait_full_sample_done();
;;;811    
;;;812    						for(r=ROW_MAX; r--; )
;;;813    						{
;;;814    							for(c=COL_MAX; c--; )
;;;815    							{
;;;816    								// SRIC 1~2
;;;817    								if (c == 6 || c == 20 || c == 34 || c == 48 || c == 62 || c == 76)
;;;818    								{
;;;819    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;820    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;821    								}
;;;822    							}
;;;823    						}
;;;824    #endif
;;;825    #if 1
;;;826    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP4));
;;;827    
;;;828    
;;;829    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;830    						{
;;;831    //#ifdef MODE_WDT
;;;832    //							KICK_DOG();
;;;833    //#endif /* MODE_WDT */
;;;834    							module_wait_full_sample_done();
;;;835    						}
;;;836    						// ulFrame1Count = protocol_swip_GetShortAvrCount();
;;;837                            // if(ulFrame1Count == 0)
;;;838    						// {
;;;839                            // 	ulFrame1Count = 5;      // Default value
;;;840    						// }
;;;841    
;;;842    						// for(i=0; i<ulFrame1Count; i++)
;;;843    						// {
;;;844    //#ifdef MODE_WDT
;;;845    //						KICK_DOG();
;;;846    //#endif /* MODE_WDT */
;;;847    						module_wait_full_sample_done();
;;;848    
;;;849    						for(r=ROW_MAX; r--; )
;;;850    						{
;;;851    							for(c=COL_MAX; c--; )
;;;852    							{
;;;853    								// SRIC 1~2
;;;854    								if (c == 7 || c == 21 || c == 35 || c == 49 || c == 63 || c == 77)
;;;855    								{
;;;856    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;857    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;858    								}
;;;859    							}
;;;860    						}
;;;861    #endif
;;;862    #endif /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;863    
;;;864    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_RECOVERY);
;;;865    
;;;866    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;867    						{
;;;868    							module_wait_full_sample_done();
;;;869    						}
;;;870    
;;;871    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;872    						{
;;;873    							.bIsRotated = NO,
;;;874    							.ucCol_ = COL_MAX,
;;;875    							.ucRow_ = ROW_MAX,
;;;876    							.ucBufferCol_ = COL_MAX,
;;;877    							.ucKey_ = 0,
;;;878    							.tDataType = datatypeof(uint16_t)
;;;879    						};
;;;880    
;;;881    //#ifdef MODE_WDT
;;;882    //						KICK_DOG();
;;;883    //#endif /* MODE_WDT */
;;;884    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_SHORT_IMAGE_PTR());
;;;885    						break;
;;;886    					}
;;;887    
;;;888    #if USED_PEN_MODE_OPERATION
;;;889    //					case CTT_DC_ABS_JITTER:
;;;890    //					{
;;;891    //						uint16_t *pBaseImage;
;;;892    //						uint16_t read_raw_data;
;;;893    //						int delta;
;;;894    //						uint8_t BaseOffset = lptAlgorithmConf->BaseLine.ucPP_MUX_Select * PEN_COORD_ROW_MAX;
;;;895    //						eActivePenType_t eActivePenRawDataType = hal_Info_GetControlActivePenRawDataType();
;;;896    //
;;;897    //						for (r = 0; r < ROW_MAX; r++)
;;;898    //						{
;;;899    //							for (c = 0; c < COL_MAX; c++)
;;;900    //							{
;;;901    //								HAL_WRITE_DC_ABS_JITTER_IMAGE(r, c, 0);
;;;902    //							}
;;;903    //						}
;;;904    //
;;;905    //						eSENSING_CHANGE_MODE_t _mode = HAL_GetSensingChangeMode();
;;;906    //						ePartialSensing_t RetVal = PARTIAL_PEN_BEACON;
;;;907    //						sensingRowStart = 0;
;;;908    //						HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_MODE);
;;;909    //						while (YES)
;;;910    //						{
;;;911    //							RetVal = module_wait_local_sample_done();
;;;912    //							if (RetVal == LOCAL_OP_LAST_LHB)
;;;913    //								break;
;;;914    //						}
;;;915    //
;;;916    //						module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;917    //
;;;918    //						// ulFrame2Count = protocol_swip_GetJitterCheckCount();
;;;919    //
;;;920    //						// if(ulFrame2Count == 0)
;;;921    //						// {
;;;922    //							ulFrame2Count = 50;     // Default value
;;;923    //						// }
;;;924    //
;;;925    //						hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;926    //#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN)
;;;927    //#elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;928    //#elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN)
;;;929    //						algorithm_local_baseline_init();
;;;930    //						algorithm_baseline_tracking_initial_local();
;;;931    //#elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WACOM_PEN)
;;;932    //						algorithm_local_baseline_init();
;;;933    //						algorithm_baseline_2_tracking_initial_local();
;;;934    //#elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_PEN)
;;;935    //						algorithm_local_baseline_init();
;;;936    //						algorithm_baseline_2_tracking_initial_local();
;;;937    //#elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;938    //						algorithm_local_baseline_init();
;;;939    //						algorithm_baseline_tracking_initial_local();
;;;940    //#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) */
;;;941    //
;;;942    //#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;943    //						pBaseImage = HAL_GET_LOCAL_BASELINE_IMAGE_PTR();
;;;944    //#else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;945    //						if(eActivePenRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;946    //						{
;;;947    //							pBaseImage = HAL_GET_LOCAL_BASELINE_IMAGE_PTR();
;;;948    //						}
;;;949    //						else
;;;950    //						{
;;;951    //							pBaseImage = HAL_GET_LOCAL_BASELINE_IMAGE_2_PTR();
;;;952    //						}
;;;953    //#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;954    //
;;;955    //						for (i = 0; i < ulFrame2Count; i++)
;;;956    //						{
;;;957    //							while (YES)
;;;958    //							{
;;;959    //								RetVal = module_wait_local_sample_done();
;;;960    //								// alogorithm_local_linefilter_1(LOCAL_MODE);
;;;961    //								switch (RetVal)
;;;962    //								{
;;;963    //									case PARTIAL_PEN_COORD1:
;;;964    //									case PARTIAL_PEN_COORD2:
;;;965    //									case PARTIAL_PEN_COORD3:
;;;966    //									case PARTIAL_PEN_COORD4:
;;;967    //									{
;;;968    //										currentRowStart = sensingRowStart;
;;;969    //										for (r = 0; r < PEN_COORD_ROW_MAX; r++)
;;;970    //										{
;;;971    //											for (c = 0; c < COL_MAX; c++)
;;;972    //											{
;;;973    //												read_raw_data = HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c);
;;;974    //												delta = (signed)pBaseImage[((r + currentRowStart) * COL_MAX) + c] - (signed)read_raw_data;
;;;975    //												if (delta < 0)
;;;976    //												{
;;;977    //													delta = -delta;
;;;978    //												}
;;;979    //												if (HAL_READ_DC_ABS_JITTER_IMAGE(r + currentRowStart, c) < delta)
;;;980    //												{
;;;981    //													HAL_WRITE_DC_ABS_JITTER_IMAGE(r + currentRowStart, c, delta);
;;;982    //												}
;;;983    //											}
;;;984    //										}
;;;985    //
;;;986    //										sensingRowStart += 4;
;;;987    //										break;
;;;988    //									}
;;;989    //									default:
;;;990    //										break;
;;;991    //								}
;;;992    //
;;;993    //								if (sensingRowStart > (ROW_MAX - PEN_COORD_ROW_MAX))
;;;994    //								{
;;;995    //									sensingRowStart = 0;
;;;996    //									break;
;;;997    //								}
;;;998    //							}
;;;999    //						}
;;;1000   //
;;;1001   //						HAL_SetSensingChangeMode(SM_CHANGE_FINGER_PEN_SEARCH_MODE);	// Return Change Finger Mode
;;;1002   //
;;;1003   //						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;1004   //						{
;;;1005   //							.bIsRotated = NO,
;;;1006   //							.ucCol_ = COL_MAX,
;;;1007   //							.ucRow_ = ROW_MAX,
;;;1008   //							.ucBufferCol_ = COL_MAX,
;;;1009   //							.ucKey_ = 0,
;;;1010   //							.tDataType = datatypeof(uint16_t)
;;;1011   //						};
;;;1012   //
;;;1013   //						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_DC_ABS_JITTER_IMAGE_PTR());
;;;1014   //						break;
;;;1015   //					}
;;;1016   #endif /* USED_PEN_MODE_OPERATION */					
;;;1017   					case CTT_JITTER:
;;;1018   					{
;;;1019   						// _gT(_GPIO_TP_INTR);
;;;1020   //						eSENSING_MODE_t eSensingMode;
;;;1021   						uint16_t * pBaselineImage;
;;;1022   //						uint32_t * pCommonImage;
;;;1023   
;;;1024   //						eSensingMode = HAL_GetSensingMode();
;;;1025   
;;;1026   						const tModuleModeConf_t * kptModuleModeConf = NULL;
;;;1027   						kptModuleModeConf = module_GetModeConfig();
;;;1028   
;;;1029   						for (r = 0; r < ROW_MAX; r++)
;;;1030   						{
;;;1031   							for (c = 0; c < COL_MAX; c++)
;;;1032   							{
;;;1033   								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;1034   								HAL_WRITE_JITTER_IMAGE(r, c, INT16_MIN);
;;;1035   							}
;;;1036   						}
;;;1037   
;;;1038   						pBaselineImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(eSensingMode, BASELINE_TYPE_FULL);
;;;1039   
;;;1040   						memset((void *)pBaselineImage, 0x00, (uint16_t)ROW_MAX*COL_MAX);
;;;1041   
;;;1042   						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;1043   						{
;;;1044   //#ifdef MODE_WDT
;;;1045   //							KICK_DOG();
;;;1046   //#endif /* MODE_WDT */
;;;1047   							module_wait_full_sample_done();
;;;1048   						}
;;;1049   
;;;1050   						// Jitter
;;;1051   						// ulFrame1Count = protocol_swip_GetJitterAvrCount();
;;;1052   						// if(ulFrame1Count == 0)
;;;1053   						// {
;;;1054   						ulFrame1Count = 50; // Default value
;;;1055   											// }
;;;1056   
;;;1057   						for (i = 0; i < ulFrame1Count; i++)
;;;1058   						{
;;;1059   							module_wait_full_sample_done();
;;;1060   
;;;1061   							for (r = ROW_MAX; r--;)
;;;1062   							{
;;;1063   								for (c = COL_MAX; c--;)
;;;1064   								{
;;;1065   									ulTempData = HAL_READ_COMMON_IMAGE(r, c);
;;;1066   									HAL_WRITE_COMMON_IMAGE(r, c, (ulTempData + (uint32_t)HAL_READ_RAW_IMAGE(r, c)));
;;;1067   								}
;;;1068   							}
;;;1069   						}
;;;1070   
;;;1071   						for (r = ROW_MAX; r--;)
;;;1072   						{
;;;1073   							for (c = COL_MAX; c--;)
;;;1074   							{
;;;1075   								g_pFingerBaseImage[c+(r*COL_MAX)] = (uint16_t)(HAL_READ_COMMON_IMAGE(r, c) / ulFrame1Count);
;;;1076   //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;1077   //								HAL_WRITE_BASELINE_2_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c) / ulFrame1Count));
;;;1078   //#endif
;;;1079   							}
;;;1080   						}
;;;1081   
;;;1082   //						pCommonImage = HAL_GET_COMMON_IMAGE_PTR();
;;;1083   //						for(r = 0; r < ROW_MAX * COL_MAX; r++)
;;;1084   //						{
;;;1085   //							(*pBaselineImage++) = (uint16_t)((*pCommonImage++) / ulFrame1Count);
;;;1086   //						}
;;;1087   
;;;1088   						// ulFrame2Count = protocol_swip_GetJitterCheckCount();
;;;1089   						// if(ulFrame2Count == 0)
;;;1090   						// {
;;;1091   						ulFrame2Count = 50; // Default value
;;;1092   											// }
;;;1093   
;;;1094   						for (i = 0; i < ulFrame2Count; i++)
;;;1095   						{
;;;1096   //#ifdef MODE_WDT
;;;1097   //							KICK_DOG();
;;;1098   //#endif /* MODE_WDT */
;;;1099   							module_wait_full_sample_done();
;;;1100   
;;;1101   							alogorithm_linefilter_2();
;;;1102   //							alogorithm_linefilter(HAL_GetSensingMode());
;;;1103   
;;;1104   							for (r = ROW_MAX; r--;)
;;;1105   							{
;;;1106   								for (c = COL_MAX; c--;)
;;;1107   								{
;;;1108   									deltaData = (uint16_t)ABS(HAL_READ_RAW_IMAGE(r, c) - g_pFingerBaseImage[c+(r*COL_MAX)]);
;;;1109   									deltaData >>= kptModuleModeConf->ucOvrShift;
;;;1110   //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;1111   //									deltaData = (uint16_t)ABS(HAL_READ_RAW_IMAGE(r, c) - HAL_READ_BASELINE_2_IMAGE(r, c));
;;;1112   //									deltaData >>= kptModuleModeConf->ucOvrShift;
;;;1113   //#endif
;;;1114   									if (deltaData > HAL_READ_JITTER_IMAGE(r, c))
;;;1115   									{
;;;1116   										HAL_WRITE_JITTER_IMAGE(r, c, deltaData);
;;;1117   									}
;;;1118   								}
;;;1119   							}
;;;1120   						}
;;;1121   
;;;1122   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;1123   						{
;;;1124   							.bIsRotated = NO,
;;;1125   							.ucCol_ = COL_MAX,
;;;1126   							.ucRow_ = ROW_MAX,
;;;1127   							.ucBufferCol_ = COL_MAX + 2*PAD_,
;;;1128   							.ucKey_ = 0,
;;;1129   							.tDataType = datatypeof(uint16_t)
;;;1130   						};
;;;1131   
;;;1132   //#ifdef MODE_WDT
;;;1133   //						KICK_DOG();
;;;1134   //#endif /* MODE_WDT */
;;;1135   						// _gT(_GPIO_TP_INTR);
;;;1136   						// _gT(_GPIO_TP_INTR);
;;;1137   						// protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_ABS_IMAGE_PTR());
;;;1138   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_JITTER_IMAGE_PTR());
;;;1139   						break;
;;;1140   					}
;;;1141   					case CTT_CRC_CHECK:
;;;1142   					{
;;;1143   						fw_crc_value = 0xFFFFFFFF;//GetCRCValue((const uint16_t *)(CODE_SRAM_APP_START_BASE_ADDR), CODE_SRAM_APP_BYTE_SIZE - CODE_SRAM_APP_RESERV_BYTE_SIZE - SFLASH_CRC_CODE_BYTE_SIZE);
;;;1144   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;1145   						{
;;;1146   							.bIsRotated = NO,
;;;1147   							.ucCol_ = 1,
;;;1148   							.ucRow_ = 1,
;;;1149   							.ucBufferCol_ = 1,
;;;1150   							.ucKey_ = 0,
;;;1151   							.tDataType = datatypeof(uint32_t)
;;;1152   						};
;;;1153   //#ifdef MODE_WDT
;;;1154   //						KICK_DOG();
;;;1155   //#endif /* MODE_WDT */
;;;1156   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)((uint32_t *)&fw_crc_value));
;;;1157   						break;
;;;1158   					}
;;;1159   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1160   					case CTT_TP_INFO_WRITE:
;;;1161   					{
;;;1162   //						protocol_swip_SetTestType(CTT_NONE);
;;;1163   //#ifdef MODE_WDT
;;;1164   //						KICK_DOG();
;;;1165   //#endif /* MODE_WDT */
;;;1166   						protocol_swip_PendReadyStatus();
;;;1167   //#ifdef MODE_WDT
;;;1168   //						KICK_DOG();
;;;1169   //#endif /* MODE_WDT */
;;;1170   						protocol_swip_PendReadyStatus();
;;;1171   
;;;1172   						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1173   						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 1);
;;;1174   
;;;1175   						module_Stop(NO);
;;;1176   
;;;1177   						FLITF_TPInspectionInfoCodeFlashWrite(protocol_swip_GetPTInspectionSetBufPrt());
;;;1178   
;;;1179   //#ifdef MODE_WDT
;;;1180   //						KICK_DOG();
;;;1181   //#endif /* MODE_WDT */
;;;1182   						protocol_swip_PendReadyStatus();
;;;1183   						break;
;;;1184   					}
;;;1185   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1186   				} /* switch(protocol_swip_GetTestType()) */
;;;1187   
;;;1188   //				module_Stop();
;;;1189   //				test_state = CTT_NONE; // NOTE : not used!!
;;;1190   
;;;1191   				break;
;;;1192   			}
;;;1193   			case TOUCH_DIAG_OPER_EXIT:
;;;1194   			{
;;;1195   				module_Stop(NO);
;;;1196   
;;;1197   //#ifdef MODE_WDT
;;;1198   //				KICK_DOG();
;;;1199   //#endif /* MODE_WDT */
;;;1200   				protocol_swip_PendReadyStatus();
;;;1201   
;;;1202   //#ifdef MODE_WDT
;;;1203   //				WDT->WDOG_LOAD = 0;
;;;1204   //#endif /* MODE_WDT */
;;;1205   
;;;1206   				bLoop = NO;
;;;1207   				continue;
;;;1208   				/* no break */
;;;1209   			}
;;;1210       	}
;;;1211   
;;;1212       	switch( protocol_swip_GetMode() )
;;;1213       	{
;;;1214   			case M_TOUCH_NORMAL:
;;;1215   			{
;;;1216   				sub_state = TOUCH_DIAG_OPER_EXIT;
;;;1217   				main_state = TOUCH_MAIN_OPERATION_NORMAL;
;;;1218   				break;
;;;1219   			}
;;;1220   			case M_WATCH_DOG_RESET:
;;;1221   			{
;;;1222   				sub_state = TOUCH_DIAG_OPER_EXIT;
;;;1223   				main_state = TOUCH_MAIN_OPERATION_RESET;
;;;1224   				break;
;;;1225   			}
;;;1226       	}
;;;1227       }
;;;1228   
;;;1229       return main_state;
;;;1230   }
0004b8  274f              MOVS     r7,#0x4f
0004ba  f04f094e          MOV      r9,#0x4e              ;531
0004be  f64145be          MOV      r5,#0x1cbe            ;529
0004c2  bf00              NOP                            ;529
                  |L2.1220|
0004c4  eb0c008c          ADD      r0,r12,r12,LSL #2     ;529
0004c8  eb041140          ADD      r1,r4,r0,LSL #5       ;529
0004cc  f101009c          ADD      r0,r1,#0x9c           ;529
0004d0  4429              ADD      r1,r1,r5              ;529
0004d2  f8308902          LDRH     r8,[r0],#-2           ;534
0004d6  f8218c02          STRH     r8,[r1,#-2]           ;534
0004da  1f09              SUBS     r1,r1,#4              ;534
0004dc  2202              MOVS     r2,#2                 ;534
0004de  234e              MOVS     r3,#0x4e              ;534
                  |L2.1248|
0004e0  f1c2084f          RSB      r8,r2,#0x4f           ;531
0004e4  f0180f01          TST      r8,#1                 ;531
0004e8  bf04              ITT      EQ                    ;534
0004ea  f8b08000          LDRHEQ   r8,[r0,#0]            ;534
0004ee  f8a18000          STRHEQ   r8,[r1,#0]            ;534
0004f2  1e80              SUBS     r0,r0,#2              ;534
0004f4  1e89              SUBS     r1,r1,#2              ;534
0004f6  1c52              ADDS     r2,r2,#1              ;534
0004f8  1e5b              SUBS     r3,r3,#1              ;534
0004fa  d1f1              BNE      |L2.1248|
0004fc  f1bc0101          SUBS     r1,r12,#1             ;529
000500  f0010cff          AND      r12,r1,#0xff          ;529
000504  d2de              BCS      |L2.1220|
000506  2019              MOVS     r0,#0x19              ;539
000508  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
00050c  7870              LDRB     r0,[r6,#1]            ;541
00050e  f04f0800          MOV      r8,#0                 ;541
000512  2800              CMP      r0,#0                 ;541
000514  dd07              BLE      |L2.1318|
000516  bf00              NOP                            ;543
                  |L2.1304|
000518  f7fffffe          BL       module_wait_full_sample_done
00051c  7870              LDRB     r0,[r6,#1]            ;543
00051e  f1080801          ADD      r8,r8,#1              ;543
000522  4540              CMP      r0,r8                 ;543
000524  dcf8              BGT      |L2.1304|
                  |L2.1318|
000526  f7fffffe          BL       module_wait_full_sample_done
00052a  f04f082c          MOV      r8,#0x2c              ;548
00052e  bf00              NOP                            ;550
                  |L2.1328|
000530  eb080088          ADD      r0,r8,r8,LSL #2       ;550
000534  eb041040          ADD      r0,r4,r0,LSL #5       ;550
000538  46bc              MOV      r12,r7
00053a  f100019e          ADD      r1,r0,#0x9e           ;550
00053e  f36f0c5e          BFC      r12,#1,#30            ;552
000542  4428              ADD      r0,r0,r5              ;550
000544  f1bc0f00          CMP      r12,#0                ;552
000548  bf1c              ITT      NE                    ;555
00054a  f8b1c000          LDRHNE   r12,[r1,#0]           ;555
00054e  f8a0c000          STRHNE   r12,[r0,#0]           ;555
000552  2201              MOVS     r2,#1                 ;557
000554  46cc              MOV      r12,r9                ;552
000556  234f              MOVS     r3,#0x4f              ;557
000558  f36f0c5e          BFC      r12,#1,#30            ;552
00055c  1e80              SUBS     r0,r0,#2              ;552
00055e  1e89              SUBS     r1,r1,#2              ;552
000560  f1bc0f00          CMP      r12,#0                ;552
000564  bf1c              ITT      NE                    ;555
000566  f8b1c000          LDRHNE   r12,[r1,#0]           ;555
00056a  f8a0c000          STRHNE   r12,[r0,#0]           ;555
00056e  1e80              SUBS     r0,r0,#2              ;555
000570  1e89              SUBS     r1,r1,#2              ;555
000572  1c52              ADDS     r2,r2,#1              ;555
000574  f1b30301          SUBS.W   r3,r3,#1              ;555
                  |L2.1400|
000578  f1c20c4f          RSB      r12,r2,#0x4f          ;552
00057c  f36f0c5e          BFC      r12,#1,#30            ;552
000580  f1bc0f01          CMP      r12,#1                ;552
000584  bf04              ITT      EQ                    ;555
000586  f8b1c000          LDRHEQ   r12,[r1,#0]           ;555
00058a  f8a0c000          STRHEQ   r12,[r0,#0]           ;555
00058e  1e80              SUBS     r0,r0,#2              ;555
000590  1e89              SUBS     r1,r1,#2              ;555
000592  1c52              ADDS     r2,r2,#1              ;555
000594  1e5b              SUBS     r3,r3,#1              ;555
000596  d1ef              BNE      |L2.1400|
000598  f1b80101          SUBS     r1,r8,#1              ;550
00059c  f00108ff          AND      r8,r1,#0xff           ;550
0005a0  d2c6              BCS      |L2.1328|
0005a2  f04f0c2c          MOV      r12,#0x2c             ;560
0005a6  f64308de          MOV      r8,#0x38de            ;562
0005aa  f64077ff          MOV      r7,#0xfff             ;404
0005ae  bf00              NOP                            ;562
                  |L2.1456|
0005b0  eb0c008c          ADD      r0,r12,r12,LSL #2     ;562
0005b4  eb041040          ADD      r0,r4,r0,LSL #5       ;562
0005b8  eb000208          ADD      r2,r0,r8              ;562
0005bc  4428              ADD      r0,r0,r5              ;562
0005be  2350              MOVS     r3,#0x50              ;562
                  |L2.1472|
0005c0  f8321902          LDRH     r1,[r2],#-2           ;564
0005c4  f8b09000          LDRH     r9,[r0,#0]            ;564
0005c8  eba10109          SUB      r1,r1,r9              ;564
0005cc  b209              SXTH     r1,r1                 ;564
0005ce  2900              CMP      r1,#0                 ;565
0005d0  bfb8              IT       LT                    ;567
0005d2  2100              MOVLT    r1,#0                 ;567
0005d4  1a79              SUBS     r1,r7,r1              ;569
0005d6  f8201902          STRH     r1,[r0],#-2           ;569
0005da  1e5b              SUBS     r3,r3,#1              ;569
0005dc  d1f0              BNE      |L2.1472|
0005de  f1bc0101          SUBS     r1,r12,#1             ;562
0005e2  f0010cff          AND      r12,r1,#0xff          ;562
0005e6  d2e3              BCS      |L2.1456|
0005e8  201f              MOVS     r0,#0x1f              ;864
0005ea  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
0005ee  7870              LDRB     r0,[r6,#1]            ;866
0005f0  2500              MOVS     r5,#0                 ;866
0005f2  2800              CMP      r0,#0                 ;866
0005f4  dd06              BLE      |L2.1540|
0005f6  bf00              NOP                            ;868
                  |L2.1528|
0005f8  f7fffffe          BL       module_wait_full_sample_done
0005fc  7870              LDRB     r0,[r6,#1]            ;868
0005fe  1c6d              ADDS     r5,r5,#1              ;868
000600  42a8              CMP      r0,r5                 ;868
000602  dcf9              BGT      |L2.1528|
                  |L2.1540|
000604  48ab              LDR      r0,|L2.2228|
000606  e9d01006          LDRD     r1,r0,[r0,#0x18]      ;871
00060a  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;871
00060e  a809              ADD      r0,sp,#0x24           ;871
000610  f50451e1          ADD      r1,r4,#0x1c20         ;884
                  |L2.1556|
000614  f7fffffe          BL       protocol_swip_PendTestResult
                  |L2.1560|
000618  f7fffffe          BL       protocol_swip_GetMode
00061c  2800              CMP      r0,#0                 ;1212
00061e  f000813d          BEQ.W    |L2.2204|
000622  2811              CMP      r0,#0x11              ;1212
000624  f0008140          BEQ.W    |L2.2216|
000628  9806              LDR      r0,[sp,#0x18]         ;1218
00062a  2800              CMP      r0,#0                 ;1218
00062c  f47facf9          BNE      |L2.34|
                  |L2.1584|
000630  9807              LDR      r0,[sp,#0x1c]         ;1229
000632  b011              ADD      sp,sp,#0x44
000634  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1592|
000638  f7fffffe          BL       module_GetModeConfig
00063c  2700              MOVS     r7,#0                 ;1029
00063e  f8df9278          LDR      r9,|L2.2232|
000642  4d9e              LDR      r5,|L2.2236|
000644  4604              MOV      r4,r0                 ;1027
000646  f6484a9c          MOV      r10,#0x8c9c           ;1031
00064a  f64c0bd6          MOV      r11,#0xc8d6           ;1031
00064e  46b8              MOV      r8,r7                 ;1031
                  |L2.1616|
000650  eb0700c7          ADD      r0,r7,r7,LSL #3       ;1031
000654  eb001047          ADD      r0,r0,r7,LSL #5       ;1031
000658  eb0501c0          ADD      r1,r5,r0,LSL #3       ;1031
00065c  eb01030a          ADD      r3,r1,r10             ;1031
000660  eb050080          ADD      r0,r5,r0,LSL #2       ;1031
000664  eb00020b          ADD      r2,r0,r11             ;1031
000668  f8c38004          STR      r8,[r3,#4]            ;1034
00066c  f8a29002          STRH     r9,[r2,#2]            ;1034
000670  f8438f08          STR      r8,[r3,#8]!           ;1033
000674  f8229f04          STRH     r9,[r2,#4]!           ;1034
000678  f8c38004          STR      r8,[r3,#4]            ;1034
00067c  f8a29002          STRH     r9,[r2,#2]            ;1034
000680  f8438f08          STR      r8,[r3,#8]!           ;1033
000684  4641              MOV      r1,r8                 ;1033
000686  4648              MOV      r0,r9                 ;1034
000688  f8229f04          STRH     r9,[r2,#4]!           ;1034
00068c  f04f0c26          MOV      r12,#0x26             ;1034
                  |L2.1680|
000690  6059              STR      r1,[r3,#4]            ;1034
000692  8050              STRH     r0,[r2,#2]            ;1034
000694  f8431f08          STR      r1,[r3,#8]!           ;1033
000698  f8220f04          STRH     r0,[r2,#4]!           ;1034
00069c  f1bc0c01          SUBS     r12,r12,#1            ;1034
0006a0  d1f6              BNE      |L2.1680|
0006a2  1c78              ADDS     r0,r7,#1              ;1034
0006a4  b2c7              UXTB     r7,r0                 ;1034
0006a6  2f2d              CMP      r7,#0x2d              ;1034
0006a8  d3d2              BCC      |L2.1616|
0006aa  4f85              LDR      r7,|L2.2240|
0006ac  f44f6161          MOV      r1,#0xe10             ;1040
0006b0  6838              LDR      r0,[r7,#0]            ;1040  ; g_pFingerBaseImage
0006b2  f7fffffe          BL       __aeabi_memclr
0006b6  7870              LDRB     r0,[r6,#1]            ;1042
0006b8  f04f0800          MOV      r8,#0                 ;1042
0006bc  2800              CMP      r0,#0                 ;1042
0006be  dd06              BLE      |L2.1742|
                  |L2.1728|
0006c0  f7fffffe          BL       module_wait_full_sample_done
0006c4  7870              LDRB     r0,[r6,#1]            ;1047
0006c6  f1080801          ADD      r8,r8,#1              ;1047
0006ca  4540              CMP      r0,r8                 ;1047
0006cc  dcf8              BGT      |L2.1728|
                  |L2.1742|
0006ce  4e7d              LDR      r6,|L2.2244|
0006d0  f04f0b32          MOV      r11,#0x32             ;1054
0006d4  f8c6b008          STR      r11,[r6,#8]           ;1054  ; ulFrame1Count
0006d8  68b0              LDR      r0,[r6,#8]            ;1057  ; ulFrame1Count
0006da  f04f0800          MOV      r8,#0                 ;1057
0006de  4580              CMP      r8,r0                 ;1057
0006e0  bf38              IT       CC                    ;138
0006e2  f64859e0          MOVCC    r9,#0x8de0            ;138
0006e6  d243              BCS      |L2.1904|
                  |L2.1768|
0006e8  f7fffffe          BL       module_wait_full_sample_done
0006ec  f05f022c          MOVS.W   r2,#0x2c              ;1061
                  |L2.1776|
0006f0  eb0200c2          ADD      r0,r2,r2,LSL #3       ;1063
0006f4  eb001042          ADD      r0,r0,r2,LSL #5       ;1063
0006f8  eb0500c0          ADD      r0,r5,r0,LSL #3       ;1063
0006fc  eb020182          ADD      r1,r2,r2,LSL #2       ;1063
000700  4448              ADD      r0,r0,r9              ;1063
000702  eb051141          ADD      r1,r5,r1,LSL #5       ;1063
000706  f850cd04          LDR      r12,[r0,#-4]!         ;1066
00070a  f8b1a09e          LDRH     r10,[r1,#0x9e]        ;1066
00070e  2326              MOVS     r3,#0x26              ;1066
000710  44d4              ADD      r12,r12,r10           ;1066
000712  f840c904          STR      r12,[r0],#-4          ;1066
000716  f8b1a09c          LDRH     r10,[r1,#0x9c]        ;1066
00071a  f850c908          LDR      r12,[r0],#-8          ;1066
00071e  44d4              ADD      r12,r12,r10           ;1066
000720  f8c0c008          STR      r12,[r0,#8]           ;1066
000724  f8b1a09a          LDRH     r10,[r1,#0x9a]        ;1066
000728  f8d0c004          LDR      r12,[r0,#4]           ;1066
00072c  44d4              ADD      r12,r12,r10           ;1066
00072e  f8c0c004          STR      r12,[r0,#4]           ;1066
000732  f8d0c000          LDR      r12,[r0,#0]           ;1066
000736  f831af98          LDRH     r10,[r1,#0x98]!       ;1066
00073a  44d4              ADD      r12,r12,r10           ;1066
00073c  f8c0c000          STR      r12,[r0,#0]           ;1066
                  |L2.1856|
000740  f850cd04          LDR      r12,[r0,#-4]!         ;1066
000744  f831ac02          LDRH     r10,[r1,#-2]          ;1066
000748  1e5b              SUBS     r3,r3,#1              ;1066
00074a  44d4              ADD      r12,r12,r10           ;1066
00074c  f840c904          STR      r12,[r0],#-4          ;1066
000750  f831ad04          LDRH     r10,[r1,#-4]!         ;1066
000754  f8d0c000          LDR      r12,[r0,#0]           ;1066
000758  44d4              ADD      r12,r12,r10           ;1066
00075a  f8c0c000          STR      r12,[r0,#0]           ;1066
00075e  d1ef              BNE      |L2.1856|
000760  1e51              SUBS     r1,r2,#1              ;1063
000762  b2ca              UXTB     r2,r1                 ;1063
000764  d2c4              BCS      |L2.1776|
000766  68b0              LDR      r0,[r6,#8]            ;1063  ; ulFrame1Count
000768  f1080801          ADD      r8,r8,#1              ;1063
00076c  4580              CMP      r8,r0                 ;1063
00076e  d3bb              BCC      |L2.1768|
                  |L2.1904|
000770  f8d78000          LDR      r8,[r7,#0]            ;1038
000774  202c              MOVS     r0,#0x2c              ;1071
                  |L2.1910|
000776  eb0003c0          ADD      r3,r0,r0,LSL #3       ;111
00077a  2150              MOVS     r1,#0x50              ;1073
00077c  eb031340          ADD      r3,r3,r0,LSL #5       ;111
000780  2201              MOVS     r2,#1                 ;1073
000782  eb000c80          ADD      r12,r0,r0,LSL #2      ;111
000786  eb0503c3          ADD      r3,r5,r3,LSL #3       ;111
                  |L2.1930|
00078a  1e49              SUBS     r1,r1,#1              ;111
00078c  b2c9              UXTB     r1,r1                 ;1073
00078e  eb030981          ADD      r9,r3,r1,LSL #2       ;1075
000792  f5094900          ADD      r9,r9,#0x8000         ;1075
000796  f8d6a008          LDR      r10,[r6,#8]           ;1075  ; ulFrame1Count
00079a  f8d99ca0          LDR      r9,[r9,#0xca0]        ;1075
00079e  fbb9f9fa          UDIV     r9,r9,r10             ;1075
0007a2  eb011a0c          ADD      r10,r1,r12,LSL #4     ;1075
0007a6  1e49              SUBS     r1,r1,#1              ;1075
0007a8  f828901a          STRH     r9,[r8,r10,LSL #1]    ;1075
0007ac  b2c9              UXTB     r1,r1                 ;1073
0007ae  eb030981          ADD      r9,r3,r1,LSL #2       ;1075
0007b2  f5094900          ADD      r9,r9,#0x8000         ;1075
0007b6  f8d6a008          LDR      r10,[r6,#8]           ;1075  ; ulFrame1Count
0007ba  f8d99ca0          LDR      r9,[r9,#0xca0]        ;1075
0007be  1c92              ADDS     r2,r2,#2              ;1075
0007c0  fbb9f9fa          UDIV     r9,r9,r10             ;1075
0007c4  eb011a0c          ADD      r10,r1,r12,LSL #4     ;1075
0007c8  2a51              CMP      r2,#0x51              ;1075
0007ca  f828901a          STRH     r9,[r8,r10,LSL #1]    ;1075
0007ce  dbdc              BLT      |L2.1930|
0007d0  1e40              SUBS     r0,r0,#1              ;1073
0007d2  b2c0              UXTB     r0,r0                 ;1073
0007d4  d2cf              BCS      |L2.1910|
0007d6  f8c6b00c          STR      r11,[r6,#0xc]         ;1091  ; ulFrame2Count
0007da  68f1              LDR      r1,[r6,#0xc]          ;1094  ; ulFrame2Count
0007dc  f04f0800          MOV      r8,#0                 ;1094
0007e0  4588              CMP      r8,r1                 ;1094
0007e2  bf38              IT       CC                    ;1106
0007e4  f64c1676          MOVCC    r6,#0xc976            ;1106
0007e8  d23e              BCS      |L2.2152|
0007ea  bf00              NOP                            ;1099
                  |L2.2028|
0007ec  f7fffffe          BL       module_wait_full_sample_done
0007f0  f7fffffe          BL       alogorithm_linefilter_2
0007f4  f05f032c          MOVS.W   r3,#0x2c              ;1104
                  |L2.2040|
0007f8  6839              LDR      r1,[r7,#0]            ;1106  ; g_pFingerBaseImage
0007fa  eb030083          ADD      r0,r3,r3,LSL #2       ;1106
0007fe  eb011140          ADD      r1,r1,r0,LSL #5       ;1106
000802  f101029e          ADD      r2,r1,#0x9e           ;1106
000806  eb051040          ADD      r0,r5,r0,LSL #5       ;1106
00080a  f100019e          ADD      r1,r0,#0x9e           ;1106
00080e  eb0300c3          ADD      r0,r3,r3,LSL #3       ;1106
000812  eb001043          ADD      r0,r0,r3,LSL #5       ;1106
000816  eb050080          ADD      r0,r5,r0,LSL #2       ;1106
00081a  4430              ADD      r0,r0,r6              ;1106
00081c  f04f0950          MOV      r9,#0x50              ;1106
                  |L2.2080|
000820  f8b1b000          LDRH     r11,[r1,#0]           ;1108
000824  f8b2a000          LDRH     r10,[r2,#0]           ;1108
000828  ebbb0c0a          SUBS     r12,r11,r10           ;1108
00082c  bf48              IT       MI                    ;1108
00082e  ebaa0c0b          SUBMI    r12,r10,r11           ;1108
000832  fa1ffc8c          UXTH     r12,r12               ;1108
000836  f894a000          LDRB     r10,[r4,#0]           ;1109
00083a  fa2cfc0a          LSR      r12,r12,r10           ;1109
00083e  f9b0a000          LDRSH    r10,[r0,#0]           ;1114
000842  45e2              CMP      r10,r12               ;1114
000844  bfb8              IT       LT                    ;1116
000846  f8a0c000          STRHLT   r12,[r0,#0]           ;1116
00084a  1e80              SUBS     r0,r0,#2              ;1116
00084c  1e89              SUBS     r1,r1,#2              ;1116
00084e  1e92              SUBS     r2,r2,#2              ;1116
000850  f1b90901          SUBS     r9,r9,#1              ;1116
000854  d1e4              BNE      |L2.2080|
000856  1e58              SUBS     r0,r3,#1              ;1106
000858  b2c3              UXTB     r3,r0                 ;1106
00085a  d2cd              BCS      |L2.2040|
00085c  4819              LDR      r0,|L2.2244|
00085e  68c0              LDR      r0,[r0,#0xc]          ;1106  ; ulFrame2Count
000860  f1080801          ADD      r8,r8,#1              ;1106
000864  4580              CMP      r8,r0                 ;1106
000866  d3c1              BCC      |L2.2028|
                  |L2.2152|
000868  4812              LDR      r0,|L2.2228|
00086a  e9d01008          LDRD     r1,r0,[r0,#0x20]      ;1122
00086e  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;1122
000872  a809              ADD      r0,sp,#0x24           ;1122
000874  9904              LDR      r1,[sp,#0x10]         ;1139
000876  e6cd              B        |L2.1556|
                  |L2.2168|
000878  4912              LDR      r1,|L2.2244|
00087a  f04f30ff          MOV      r0,#0xffffffff        ;1143
00087e  6048              STR      r0,[r1,#4]            ;1143  ; fw_crc_value
000880  480c              LDR      r0,|L2.2228|
000882  e9d0100a          LDRD     r1,r0,[r0,#0x28]      ;1144
000886  e9cd1000          STRD     r1,r0,[sp,#0]         ;1144
00088a  4668              MOV      r0,sp                 ;1144
00088c  490e              LDR      r1,|L2.2248|
00088e  e6c1              B        |L2.1556|
                  |L2.2192|
000890  2000              MOVS     r0,#0                 ;1195
000892  f7fffffe          BL       module_Stop
000896  f7fffffe          BL       protocol_swip_PendReadyStatus
00089a  e6c9              B        |L2.1584|
                  |L2.2204|
00089c  2001              MOVS     r0,#1                 ;1217
00089e  9007              STR      r0,[sp,#0x1c]         ;1218
0008a0  9806              LDR      r0,[sp,#0x18]         ;1218
0008a2  2800              CMP      r0,#0                 ;1218
0008a4  d1f4              BNE      |L2.2192|
0008a6  e6c3              B        |L2.1584|
                  |L2.2216|
0008a8  2004              MOVS     r0,#4                 ;1223
0008aa  9007              STR      r0,[sp,#0x1c]         ;1218
0008ac  9806              LDR      r0,[sp,#0x18]         ;1224
0008ae  2800              CMP      r0,#0                 ;1224
0008b0  d1ee              BNE      |L2.2192|
0008b2  e6bd              B        |L2.1584|
;;;1231   #endif
                          ENDP

                  |L2.2228|
                          DCD      ||.constdata||
                  |L2.2232|
                          DCD      0xffff8000
                  |L2.2236|
                          DCD      FullSharedBuff
                  |L2.2240|
                          DCD      g_pFingerBaseImage
                  |L2.2244|
                          DCD      ||.data||
                  |L2.2248|
                          DCD      ||.data||+0x4

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2d505000          DCB      0x2d,0x50,0x50,0x00
000004  00820000          DCB      0x00,0x82,0x00,0x00
000008  2d505000          DCB      0x2d,0x50,0x50,0x00
00000c  00820000          DCB      0x00,0x82,0x00,0x00
000010  2d505000          DCB      0x2d,0x50,0x50,0x00
000014  00820000          DCB      0x00,0x82,0x00,0x00
000018  2d505000          DCB      0x2d,0x50,0x50,0x00
00001c  00820000          DCB      0x00,0x82,0x00,0x00
000020  2d505200          DCB      0x2d,0x50,0x52,0x00
000024  00820000          DCB      0x00,0x82,0x00,0x00
000028  01010100          DCB      0x01,0x01,0x01,0x00
00002c  0084              DCB      0x00,0x84

                          AREA ||.data||, DATA, ALIGN=2

                  sptAlgorithmInfo
                          DCD      0x00000000
                  fw_crc_value
                          DCD      0x00000000
                  ulFrame1Count
                          DCD      0x00000000
                  ulFrame2Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\app_diag.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_453c945c____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___10_app_diag_c_453c945c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_453c945c____REVSH|
#line 402
|__asm___10_app_diag_c_453c945c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_453c945c____RRX|
#line 587
|__asm___10_app_diag_c_453c945c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
