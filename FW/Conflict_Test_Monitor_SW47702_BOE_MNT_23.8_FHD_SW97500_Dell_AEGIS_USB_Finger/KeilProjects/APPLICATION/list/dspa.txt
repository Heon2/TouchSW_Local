; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\dspa.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\dspa.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\dspa.crf ..\..\Hal\dspA\dspA.c]
                          THUMB

                          AREA ||i.Calc_LineFilter_Value||, CODE, READONLY, ALIGN=1

                  Calc_LineFilter_Value PROC
;;;271    
;;;272    int32_t Calc_LineFilter_Value(int32_t sum, int16_t cnt)
000000  2900              CMP      r1,#0
;;;273    {
;;;274        int32_t avg;
;;;275        
;;;276        if(cnt != 0)
;;;277            avg = sum / cnt;
000002  bf14              ITE      NE
000004  fb90f0f1          SDIVNE   r0,r0,r1
;;;278        else
;;;279            avg = 0;
000008  2000              MOVEQ    r0,#0
;;;280        
;;;281        return avg;
;;;282    }
00000a  4770              BX       lr
;;;283    
                          ENDP


                          AREA ||i.DSPA_CalculateDelta_Process||, CODE, READONLY, ALIGN=2

                  DSPA_CalculateDelta_Process PROC
;;;283    
;;;284    void DSPA_CalculateDelta_Process(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;285    uint32_t SRC1_ADDR,
;;;286    uint32_t SRC2_ADDR,
;;;287    uint32_t SRC3_ADDR,
;;;288    uint32_t DST_ADDR,
;;;289    uint8_t CAL1_WithCoef,
;;;290    uint8_t CAL2_MODE,
;;;291    uint8_t SRC2_DIV,
;;;292    uint8_t DST_DIV,
;;;293    uint8_t GetValueEnable,
;;;294    uint16_t Const_a,
;;;295    uint16_t Const_b,
;;;296    uint8_t Const_n, 
;;;297    uint8_t SRC2_DataType,
;;;298    uint8_t DST_DataType,
;;;299    int32_t PosTH, 
;;;300    int32_t NegTH, 
;;;301    int32_t GroupTH, 
;;;302    uint8_t cs,
;;;303    uint8_t ce,
;;;304    bool_t LocalColumnEn,
;;;305    uint8_t Row_Size, 
;;;306    bool_t mux_sum,		
;;;307    bool_t PadMode,		
;;;308    uint8_t OpMode		 // 0 : Pen , 1 : Finger, 2 : Phase, 3 : LineFilter
;;;309    )
;;;310    {
000004  b093              SUB      sp,sp,#0x4c
;;;311    	uint32_t Src1_Addr, Src2_Addr;
;;;312    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN || USED_PEN_PROTOCOL ==PEN_PROTOCOL_MSnWGP_PEN)
;;;313    	if((gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS && thisInfo->tPenInfo.bPen_phase[mux_sum] == 1) && OpMode == 0)
;;;314    	{
;;;315    		Src1_Addr = SRC2_ADDR;
;;;316    		Src2_Addr = SRC1_ADDR;
;;;317    	}
;;;318    	else
;;;319    #endif
;;;320    	{
;;;321    		Src1_Addr = SRC1_ADDR;
;;;322    		Src2_Addr = SRC2_ADDR;
;;;323    	}
;;;324    
;;;325    	uint8_t col_size,row_size,end_r;
;;;326    	uint8_t start_r = 0;
000006  2500              MOVS     r5,#0
000008  e9ddc32d          LDRD     r12,r3,[sp,#0xb4]     ;310
00000c  f8dd9088          LDR      r9,[sp,#0x88]
000010  9e24              LDR      r6,[sp,#0x90]
000012  9a30              LDR      r2,[sp,#0xc0]
000014  e9cd1005          STRD     r1,r0,[sp,#0x14]
;;;327    	uint8_t ColMaxOffset = 0;
;;;328    	uint8_t start_c = cs;
;;;329    	
;;;330    	if(LocalColumnEn)
000018  f8cdc008          STR      r12,[sp,#8]
00001c  992f              LDR      r1,[sp,#0xbc]         ;310
00001e  4628              MOV      r0,r5                 ;327
000020  b139              CBZ      r1,|L2.50|
;;;331    	{
;;;332    		col_size = ce-start_c;
000022  eba3010c          SUB      r1,r3,r12
000026  b2c9              UXTB     r1,r1
;;;333    		row_size = 1;
000028  9101              STR      r1,[sp,#4]
00002a  2101              MOVS     r1,#1
;;;334    		end_r = Row_Size;
00002c  9203              STR      r2,[sp,#0xc]
00002e  9100              STR      r1,[sp,#0]
000030  e006              B        |L2.64|
                  |L2.50|
;;;335    	}
;;;336    	else
;;;337    	{
;;;338    		start_c = 0;
000032  2100              MOVS     r1,#0
;;;339    		col_size = COL_MAX;
000034  9102              STR      r1,[sp,#8]
000036  2150              MOVS     r1,#0x50
000038  e9cd2100          STRD     r2,r1,[sp,#0]
;;;340    		row_size = Row_Size;
;;;341    		end_r = 1;
00003c  2101              MOVS     r1,#1
00003e  9103              STR      r1,[sp,#0xc]
                  |L2.64|
;;;342    	}
;;;343    	
;;;344    #if PAD_ > 0	
;;;345    	if(PadMode == 1)
000040  9932              LDR      r1,[sp,#0xc8]
000042  2901              CMP      r1,#1
000044  d10d              BNE      |L2.98|
;;;346    	{
;;;347    		if(LocalColumnEn)
000046  992f              LDR      r1,[sp,#0xbc]
000048  2900              CMP      r1,#0
00004a  d07d              BEQ      |L2.328|
;;;348    		{
;;;349    			col_size = ce-start_c;
00004c  9802              LDR      r0,[sp,#8]
00004e  1a18              SUBS     r0,r3,r0
000050  b2c0              UXTB     r0,r0
;;;350    			row_size = 1;
000052  9001              STR      r0,[sp,#4]
000054  2001              MOVS     r0,#1
;;;351    			start_r = PAD_;
000056  4605              MOV      r5,r0
;;;352    			end_r = Row_Size+PAD_;
000058  9000              STR      r0,[sp,#0]
00005a  1c50              ADDS     r0,r2,#1
00005c  b2c0              UXTB     r0,r0
;;;353    			ColMaxOffset = 2*PAD_;
00005e  9003              STR      r0,[sp,#0xc]
000060  2002              MOVS     r0,#2
                  |L2.98|
;;;354    		}
;;;355    		else
;;;356    		{
;;;357    			start_c = 0;
;;;358    			col_size = COL_MAX+2*PAD_;
;;;359    			row_size = Row_Size+2*PAD_;
;;;360    			end_r = 1;
;;;361    		}
;;;362    	}
;;;363    #endif
;;;364    		
;;;365    	for(int r = start_r; r<end_r; r++)
000062  9903              LDR      r1,[sp,#0xc]
000064  428d              CMP      r5,r1
000066  f28081af          BGE.W    |L2.968|
00006a  bf00              NOP      
                  |L2.108|
00006c  e9dd1200          LDRD     r1,r2,[sp,#0]
000070  4cea              LDR      r4,|L2.1052|
000072  3050              ADDS     r0,r0,#0x50
;;;366    	{
;;;367    		DSPA_ParamSet
000074  fb02f701          MUL      r7,r2,r1
000078  f04f0801          MOV      r8,#1                 ;333
00007c  f8cd0010          STR.W    r0,[sp,#0x10]
                  |L2.128|
000080  e9ddb120          LDRD     r11,r1,[sp,#0x80]
000084  e9ddc325          LDRD     r12,r3,[sp,#0x94]
000088  f8dde09c          LDR      lr,[sp,#0x9c]
00008c  f8cde048          STR      lr,[sp,#0x48]
000090  e9dde000          LDRD     lr,r0,[sp,#0]
000094  f8cde044          STR      lr,[sp,#0x44]
000098  f8dde0a0          LDR      lr,[sp,#0xa0]
00009c  f8cde040          STR      lr,[sp,#0x40]
0000a0  f8dda08c          LDR      r10,[sp,#0x8c]
0000a4  f8dde0a4          LDR      lr,[sp,#0xa4]
0000a8  f8cde03c          STR      lr,[sp,#0x3c]
0000ac  f8dde010          LDR      lr,[sp,#0x10]
0000b0  9a02              LDR      r2,[sp,#8]
0000b2  fb05220e          MLA      r2,r5,lr,r2
0000b6  f8dde018          LDR      lr,[sp,#0x18]
0000ba  eb0e0e42          ADD      lr,lr,r2,LSL #1
0000be  f8cde038          STR      lr,[sp,#0x38]
0000c2  f8dde014          LDR      lr,[sp,#0x14]
0000c6  eb0e0e42          ADD      lr,lr,r2,LSL #1
0000ca  f8cde034          STR      lr,[sp,#0x34]
0000ce  f8dde054          LDR      lr,[sp,#0x54]
0000d2  f8cde030          STR      lr,[sp,#0x30]
0000d6  f8dde058          LDR      lr,[sp,#0x58]
0000da  eb0e0e42          ADD      lr,lr,r2,LSL #1
0000de  f8cde02c          STR      lr,[sp,#0x2c]
0000e2  e9dd2e2a          LDRD     r2,lr,[sp,#0xa8]
0000e6  f8cde028          STR      lr,[sp,#0x28]
0000ea  f44f7efa          MOV      lr,#0x1f4
0000ee  f8cde024          STR      lr,[sp,#0x24]
0000f2  f1ce0e00          RSB      lr,lr,#0
0000f6  f8cde020          STR      lr,[sp,#0x20]
0000fa  f8dde0b0          LDR      lr,[sp,#0xb0]
0000fe  f8cde01c          STR      lr,[sp,#0x1c]
000102  f8c48004          STR      r8,[r4,#4]
000106  f8d4e008          LDR      lr,[r4,#8]
00010a  f02e0e10          BIC      lr,lr,#0x10
00010e  f8c4e008          STR      lr,[r4,#8]
000112  f8d4e008          LDR      lr,[r4,#8]
000116  f36b0e00          BFI      lr,r11,#0,#1
00011a  f8c4e008          STR      lr,[r4,#8]
00011e  f8d4b008          LDR      r11,[r4,#8]
000122  f3610b43          BFI      r11,r1,#1,#3
000126  f8c4b008          STR      r11,[r4,#8]
00012a  f8d4b00c          LDR      r11,[r4,#0xc]
00012e  f3690b00          BFI      r11,r9,#0,#1
000132  f8c4b00c          STR      r11,[r4,#0xc]
000136  f8d4b00c          LDR      r11,[r4,#0xc]
00013a  f36a0b41          BFI      r11,r10,#1,#1
00013e  f8c4b00c          STR      r11,[r4,#0xc]
000142  f8d4a00c          LDR      r10,[r4,#0xc]
000146  e000              B        |L2.330|
                  |L2.328|
000148  e05c              B        |L2.516|
                  |L2.330|
00014a  f3660a82          BFI      r10,r6,#2,#1
00014e  f8c4a00c          STR      r10,[r4,#0xc]
000152  f8d4a010          LDR      r10,[r4,#0x10]
000156  f36c0a09          BFI      r10,r12,#0,#10
00015a  f8c4a010          STR      r10,[r4,#0x10]
00015e  f8d4c010          LDR      r12,[r4,#0x10]
000162  f3632c93          BFI      r12,r3,#10,#10
000166  f8c4c010          STR      r12,[r4,#0x10]
00016a  f8dde048          LDR      lr,[sp,#0x48]
00016e  6923              LDR      r3,[r4,#0x10]
000170  f36e5317          BFI      r3,lr,#20,#4
000174  6123              STR      r3,[r4,#0x10]
000176  6963              LDR      r3,[r4,#0x14]
000178  f3600307          BFI      r3,r0,#0,#8
00017c  6163              STR      r3,[r4,#0x14]
00017e  f8dde044          LDR      lr,[sp,#0x44]
000182  6963              LDR      r3,[r4,#0x14]
000184  f36e230f          BFI      r3,lr,#8,#8
000188  6163              STR      r3,[r4,#0x14]
00018a  6963              LDR      r3,[r4,#0x14]
00018c  f367431f          BFI      r3,r7,#16,#16
000190  6163              STR      r3,[r4,#0x14]
000192  f8dde040          LDR      lr,[sp,#0x40]
000196  69a3              LDR      r3,[r4,#0x18]
000198  f36e0301          BFI      r3,lr,#0,#2
00019c  61a3              STR      r3,[r4,#0x18]
00019e  f8dde03c          LDR      lr,[sp,#0x3c]
0001a2  69a3              LDR      r3,[r4,#0x18]
0001a4  f36e0383          BFI      r3,lr,#2,#2
0001a8  61a3              STR      r3,[r4,#0x18]
0001aa  69a3              LDR      r3,[r4,#0x18]
0001ac  f360130b          BFI      r3,r0,#4,#8
0001b0  61a3              STR      r3,[r4,#0x18]
0001b2  f8dde038          LDR      lr,[sp,#0x38]
0001b6  f8c4e01c          STR      lr,[r4,#0x1c]
0001ba  f8dde034          LDR      lr,[sp,#0x34]
0001be  f8c4e020          STR      lr,[r4,#0x20]
0001c2  f8dde030          LDR      lr,[sp,#0x30]
0001c6  f8c4e024          STR      lr,[r4,#0x24]
0001ca  f8dde02c          LDR      lr,[sp,#0x2c]
0001ce  f8c4e028          STR      lr,[r4,#0x28]
0001d2  62e2              STR      r2,[r4,#0x2c]
0001d4  f8dde028          LDR      lr,[sp,#0x28]
0001d8  f8c4e030          STR      lr,[r4,#0x30]
0001dc  f8dde024          LDR      lr,[sp,#0x24]
0001e0  f8c4e034          STR      lr,[r4,#0x34]
0001e4  f8dde020          LDR      lr,[sp,#0x20]
0001e8  f8c4e038          STR      lr,[r4,#0x38]
0001ec  f8dde01c          LDR      lr,[sp,#0x1c]
0001f0  f8c4e03c          STR      lr,[r4,#0x3c]
0001f4  f1b90f01          CMP      r9,#1
0001f8  d00e              BEQ      |L2.536|
                  |L2.506|
0001fa  2007              MOVS     r0,#7
0001fc  f7fffffe          BL       hal_get_irq_flag
000200  b9c0              CBNZ     r0,|L2.564|
000202  e012              B        |L2.554|
                  |L2.516|
000204  2100              MOVS     r1,#0                 ;357
000206  9102              STR      r1,[sp,#8]            ;358
000208  2152              MOVS     r1,#0x52              ;358
00020a  9101              STR      r1,[sp,#4]            ;359
00020c  1c91              ADDS     r1,r2,#2              ;359
00020e  b2c9              UXTB     r1,r1                 ;359
000210  9100              STR      r1,[sp,#0]            ;360
000212  2101              MOVS     r1,#1                 ;360
000214  9103              STR      r1,[sp,#0xc]          ;360
000216  e729              B        |L2.108|
                  |L2.536|
000218  2907              CMP      r1,#7                 ;360
00021a  bf14              ITE      NE                    ;360
00021c  f04f3050          MOVNE    r0,#0x50505050        ;360
000220  f04f3001          MOVEQ    r0,#0x1010101         ;360
000224  64a0              STR      r0,[r4,#0x48]         ;360
000226  64e0              STR      r0,[r4,#0x4c]         ;360
000228  e7e7              B        |L2.506|
                  |L2.554|
00022a  f8c48000          STR      r8,[r4,#0]            ;360
00022e  487c              LDR      r0,|L2.1056|
000230  f7fffffe          BL       DSPA_WaitForIrq
                  |L2.564|
;;;368    		(
;;;369    			CAL1_WithCoef,                         // CAL1 : With/Without Coef
;;;370    			CAL2_MODE,                        // CAL2 :
;;;371    			SRC2_DIV,                         // SRC2_DIV
;;;372    			DST_DIV,                            // DST_DIV
;;;373    			GetValueEnable,                         // Get Value Enable
;;;374    			Const_a,                            // Const_a
;;;375    			Const_b,                            // Const_b
;;;376    			Const_n,                            // Const_n
;;;377    			col_size,       // Node COL Size
;;;378    			row_size,       // Node ROW Size
;;;379    			col_size*row_size,  // Node Total Size
;;;380    			SRC2_DataType,                           // SRC2 DataType
;;;381    			DST_DataType,                           // DST DataType
;;;382    			Src1_Addr+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),//LOCALRAWIMAGE,                 // SRC1 Address
;;;383    			Src2_Addr+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),//LOCALBASELINE,                // SRC2 Address
;;;384    			SRC3_ADDR,                                  		// SRC3 Address
;;;385    			DST_ADDR+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),               // DST Address
;;;386    			PosTH, //thisModeConf->Label.usLocalSeedBase,   //thisModeConf->BaseLine.sBlockPosThd,         // Positive ���� Thd
;;;387    			NegTH,       // Negative ���� Thd
;;;388    			500,        // Upper Line Count Thd
;;;389    			-500,       // Lower Line Count Thd
;;;390    			GroupTH, //thisModeConf->Label.usLocalSeedBase,                    // TGroup Thd (Label Seed)
;;;391    			LINE_FILTER_HOR
;;;392    		);
;;;393    	
;;;394    		DSPA_Start(1);
;;;395    		
;;;396    		if(GetValueEnable)
000234  2e00              CMP      r6,#0
000236  d046              BEQ      |L2.710|
;;;397    		{
;;;398    			if(LocalColumnEn)
000238  982f              LDR      r0,[sp,#0xbc]
00023a  2800              CMP      r0,#0
00023c  9833              LDR      r0,[sp,#0xcc]
00023e  d058              BEQ      |L2.754|
;;;399    			{
;;;400    				if(OpMode == 0)
000240  b110              CBZ      r0,|L2.584|
;;;401    				{
;;;402    					if(thisInfo->tDelta_local.iMaxStrength < tDSPAOutPutInfo.usPositiveMaxData)
;;;403    					{
;;;404    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;405    						thisInfo->tDelta_local.tMaxCellPos.r = r;
;;;406    						thisInfo->tDelta_local.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx+start_c;
;;;407    					}
;;;408    					
;;;409    					if(thisInfo->tDelta_local.iMinStrength > tDSPAOutPutInfo.sNegativeMaxData)
;;;410    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;411    					
;;;412    					if( thisInfo->tDelta_local.tValidRect.cs > tDSPAOutPutInfo.ulTouchAreaCol_sIdx+start_c )
;;;413    						thisInfo->tDelta_local.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx+start_c;
;;;414    					if( thisInfo->tDelta_local.tValidRect.ce < tDSPAOutPutInfo.ulTouchAreaCol_eIdx+start_c )
;;;415    						thisInfo->tDelta_local.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx+start_c;
;;;416    					if(tDSPAOutPutInfo.ulPositiveCellNum > 0)
;;;417    					{
;;;418    						if( thisInfo->tDelta_local.tValidRect.rs > r )
;;;419    							thisInfo->tDelta_local.tValidRect.rs = r;
;;;420    						if( thisInfo->tDelta_local.tValidRect.re < r )
;;;421    							thisInfo->tDelta_local.tValidRect.re = r;
;;;422    					}
;;;423    				}
;;;424    				else if(OpMode == 2)
000242  2802              CMP      r0,#2
000244  d040              BEQ      |L2.712|
000246  e0ba              B        |L2.958|
                  |L2.584|
000248  4876              LDR      r0,|L2.1060|
00024a  4a75              LDR      r2,|L2.1056|
00024c  6840              LDR      r0,[r0,#4]            ;402  ; thisInfo
00024e  8911              LDRH     r1,[r2,#8]            ;402  ; tDSPAOutPutInfo
000250  f8d03e40          LDR      r3,[r0,#0xe40]        ;402
000254  428b              CMP      r3,r1                 ;402
000256  da08              BGE      |L2.618|
000258  f8c01e40          STR      r1,[r0,#0xe40]        ;405
00025c  f8805e61          STRB     r5,[r0,#0xe61]        ;405
000260  7c13              LDRB     r3,[r2,#0x10]         ;406  ; tDSPAOutPutInfo
000262  9902              LDR      r1,[sp,#8]            ;406
000264  4419              ADD      r1,r1,r3              ;406
000266  f8801e60          STRB     r1,[r0,#0xe60]        ;406
                  |L2.618|
00026a  f9b2301c          LDRSH    r3,[r2,#0x1c]         ;410  ; tDSPAOutPutInfo
00026e  f8d01e5c          LDR      r1,[r0,#0xe5c]        ;410
000272  4299              CMP      r1,r3                 ;410
000274  bfc8              IT       GT                    ;410
000276  4619              MOVGT    r1,r3                 ;410
000278  f8c01e5c          STR      r1,[r0,#0xe5c]        ;412
00027c  f8d2c030          LDR      r12,[r2,#0x30]        ;412  ; tDSPAOutPutInfo
000280  9902              LDR      r1,[sp,#8]            ;412
000282  f9903e3a          LDRSB    r3,[r0,#0xe3a]        ;412
000286  4461              ADD      r1,r1,r12             ;412
000288  428b              CMP      r3,r1                 ;412
00028a  bf88              IT       HI                    ;413
00028c  f8801e3a          STRBHI   r1,[r0,#0xe3a]        ;413
000290  f9903e3b          LDRSB    r3,[r0,#0xe3b]        ;414
000294  f8d2c034          LDR      r12,[r2,#0x34]        ;414  ; tDSPAOutPutInfo
000298  9902              LDR      r1,[sp,#8]            ;414
00029a  4461              ADD      r1,r1,r12             ;414
00029c  428b              CMP      r3,r1                 ;414
00029e  bf38              IT       CC                    ;415
0002a0  f8801e3b          STRBCC   r1,[r0,#0xe3b]        ;415
0002a4  6811              LDR      r1,[r2,#0]            ;416  ; tDSPAOutPutInfo
0002a6  2900              CMP      r1,#0                 ;416
0002a8  d00d              BEQ      |L2.710|
0002aa  f9901e38          LDRSB    r1,[r0,#0xe38]        ;419
0002ae  42a9              CMP      r1,r5                 ;419
0002b0  bfc8              IT       GT                    ;419
0002b2  4629              MOVGT    r1,r5                 ;419
0002b4  f8801e38          STRB     r1,[r0,#0xe38]        ;419
0002b8  f9901e39          LDRSB    r1,[r0,#0xe39]        ;421
0002bc  42a9              CMP      r1,r5                 ;421
0002be  bfd8              IT       LE                    ;421
0002c0  4629              MOVLE    r1,r5                 ;421
0002c2  f8801e39          STRB     r1,[r0,#0xe39]        ;421
                  |L2.710|
0002c6  e07a              B        |L2.958|
                  |L2.712|
;;;425    				{
;;;426    					if(thisInfo->tDelta_local.iMaxStrength < tDSPAOutPutInfo.usPositiveMaxData)
;;;427    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
0002c8  4856              LDR      r0,|L2.1060|
0002ca  4955              LDR      r1,|L2.1056|
0002cc  6842              LDR      r2,[r0,#4]  ; thisInfo
0002ce  890b              LDRH     r3,[r1,#8]  ; tDSPAOutPutInfo
0002d0  f8d20e40          LDR      r0,[r2,#0xe40]
0002d4  4298              CMP      r0,r3
0002d6  bfd8              IT       LE
0002d8  4618              MOVLE    r0,r3
;;;428    					
;;;429    					if(thisInfo->tDelta_local.iMinStrength > tDSPAOutPutInfo.sNegativeMaxData)
;;;430    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;					
0002da  f8c20e40          STR      r0,[r2,#0xe40]
0002de  f9b1101c          LDRSH    r1,[r1,#0x1c]  ; tDSPAOutPutInfo
0002e2  f8d20e5c          LDR      r0,[r2,#0xe5c]
0002e6  4288              CMP      r0,r1
0002e8  bfc8              IT       GT
0002ea  4608              MOVGT    r0,r1
0002ec  f8c20e5c          STR      r0,[r2,#0xe5c]        ;427
0002f0  e065              B        |L2.958|
                  |L2.754|
;;;431    				}
;;;432    			}
;;;433    			else
;;;434    			{
;;;435    				if(OpMode == 1)
0002f2  2801              CMP      r0,#1
0002f4  d003              BEQ      |L2.766|
;;;436    				{
;;;437    					thisInfo->tDelta.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;438    					thisInfo->tDelta.tValidRect.rs = tDSPAOutPutInfo.ulTouchAreaRow_sIdx;
;;;439    					thisInfo->tDelta.tValidRect.re = tDSPAOutPutInfo.ulTouchAreaRow_eIdx;
;;;440    					thisInfo->tDelta.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx;
;;;441    					thisInfo->tDelta.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx;
;;;442    					thisInfo->tDelta.tMaxCellPos.r = tDSPAOutPutInfo.ulPositiveMaxData_RowIdx;
;;;443    					thisInfo->tDelta.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx;
;;;444    					thisInfo->tDelta.iPosSum = tDSPAOutPutInfo.ulPositiveCellTotalSum;
;;;445    					thisInfo->tDelta.iPosCnt = tDSPAOutPutInfo.ulPositiveCellNum;
;;;446    					thisInfo->tDelta.tMinCellPos.r = tDSPAOutPutInfo.ulNegativeMaxData_RowIdx;
;;;447    					thisInfo->tDelta.tMinCellPos.c = tDSPAOutPutInfo.ulNegativeMaxData_ColIdx;
;;;448    					thisInfo->tDelta.iNegCnt = tDSPAOutPutInfo.ulNegativeCellNum;
;;;449    					thisInfo->tDelta.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;450    					thisInfo->tDelta.iNegSum = tDSPAOutPutInfo.lNegativeCellTotalSum;
;;;451    				}
;;;452    				else
;;;453    				{
;;;454    					if(OpMode == 0)
0002f6  b398              CBZ      r0,|L2.864|
;;;455    					{
;;;456    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;457    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;458    						thisInfo->tDelta_local.tMaxCellPos.r = tDSPAOutPutInfo.ulPositiveMaxData_RowIdx;
;;;459    						thisInfo->tDelta_local.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx;
;;;460    						thisInfo->tDelta_local.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx;
;;;461    						thisInfo->tDelta_local.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx;
;;;462    						thisInfo->tDelta_local.tValidRect.rs = tDSPAOutPutInfo.ulTouchAreaRow_sIdx;
;;;463    						thisInfo->tDelta_local.tValidRect.re = tDSPAOutPutInfo.ulTouchAreaRow_eIdx;
;;;464    						thisInfo->tDelta_local.iNegSum = tDSPAOutPutInfo.lNegativeCellTotalSum;
;;;465    					}
;;;466    					else if(OpMode == 2)
0002f8  2802              CMP      r0,#2
0002fa  d056              BEQ      |L2.938|
0002fc  e05f              B        |L2.958|
                  |L2.766|
0002fe  4949              LDR      r1,|L2.1060|
000300  4847              LDR      r0,|L2.1056|
000302  6849              LDR      r1,[r1,#4]            ;437  ; thisInfo
000304  8902              LDRH     r2,[r0,#8]            ;437  ; tDSPAOutPutInfo
000306  f8c12015          STR      r2,[r1,#0x15]         ;437
00030a  f8902028          LDRB     r2,[r0,#0x28]         ;438  ; tDSPAOutPutInfo
00030e  734a              STRB     r2,[r1,#0xd]          ;438
000310  f890202c          LDRB     r2,[r0,#0x2c]         ;439  ; tDSPAOutPutInfo
000314  738a              STRB     r2,[r1,#0xe]          ;439
000316  f8902030          LDRB     r2,[r0,#0x30]         ;440  ; tDSPAOutPutInfo
00031a  73ca              STRB     r2,[r1,#0xf]          ;440
00031c  f8902034          LDRB     r2,[r0,#0x34]         ;441  ; tDSPAOutPutInfo
000320  740a              STRB     r2,[r1,#0x10]         ;441
000322  7b02              LDRB     r2,[r0,#0xc]          ;442  ; tDSPAOutPutInfo
000324  f8812036          STRB     r2,[r1,#0x36]         ;442
000328  7c02              LDRB     r2,[r0,#0x10]         ;443  ; tDSPAOutPutInfo
00032a  f8812035          STRB     r2,[r1,#0x35]         ;443
00032e  6842              LDR      r2,[r0,#4]            ;444  ; tDSPAOutPutInfo
000330  f8c12025          STR      r2,[r1,#0x25]         ;444
000334  6802              LDR      r2,[r0,#0]            ;445  ; tDSPAOutPutInfo
000336  f8c12021          STR      r2,[r1,#0x21]         ;445
00033a  f8902020          LDRB     r2,[r0,#0x20]         ;446  ; tDSPAOutPutInfo
00033e  f8812038          STRB     r2,[r1,#0x38]         ;446
000342  f8902024          LDRB     r2,[r0,#0x24]         ;447  ; tDSPAOutPutInfo
000346  f8812037          STRB     r2,[r1,#0x37]         ;447
00034a  6942              LDR      r2,[r0,#0x14]         ;448  ; tDSPAOutPutInfo
00034c  f8c12029          STR      r2,[r1,#0x29]         ;448
000350  f9b0201c          LDRSH    r2,[r0,#0x1c]         ;449  ; tDSPAOutPutInfo
000354  f8c12031          STR      r2,[r1,#0x31]         ;449
000358  6980              LDR      r0,[r0,#0x18]         ;450  ; tDSPAOutPutInfo
00035a  f8c1002d          STR      r0,[r1,#0x2d]         ;450
00035e  e02e              B        |L2.958|
                  |L2.864|
000360  e7ff              B        |L2.866|
                  |L2.866|
000362  4830              LDR      r0,|L2.1060|
000364  492e              LDR      r1,|L2.1056|
000366  6840              LDR      r0,[r0,#4]            ;456  ; thisInfo
000368  890a              LDRH     r2,[r1,#8]            ;456  ; tDSPAOutPutInfo
00036a  f8c02e40          STR      r2,[r0,#0xe40]        ;457
00036e  f9b1201c          LDRSH    r2,[r1,#0x1c]         ;457  ; tDSPAOutPutInfo
000372  f8c02e5c          STR      r2,[r0,#0xe5c]        ;458
000376  7b0a              LDRB     r2,[r1,#0xc]          ;458  ; tDSPAOutPutInfo
000378  f8802e61          STRB     r2,[r0,#0xe61]        ;458
00037c  7c0a              LDRB     r2,[r1,#0x10]         ;459  ; tDSPAOutPutInfo
00037e  f8802e60          STRB     r2,[r0,#0xe60]        ;459
000382  f8912030          LDRB     r2,[r1,#0x30]         ;460  ; tDSPAOutPutInfo
000386  f8802e3a          STRB     r2,[r0,#0xe3a]        ;460
00038a  f8912034          LDRB     r2,[r1,#0x34]         ;461  ; tDSPAOutPutInfo
00038e  f8802e3b          STRB     r2,[r0,#0xe3b]        ;461
000392  f8912028          LDRB     r2,[r1,#0x28]         ;462  ; tDSPAOutPutInfo
000396  f8802e38          STRB     r2,[r0,#0xe38]        ;462
00039a  f891202c          LDRB     r2,[r1,#0x2c]         ;463  ; tDSPAOutPutInfo
00039e  f8802e39          STRB     r2,[r0,#0xe39]        ;463
0003a2  6989              LDR      r1,[r1,#0x18]         ;464  ; tDSPAOutPutInfo
0003a4  f8c01e58          STR      r1,[r0,#0xe58]        ;464
0003a8  e009              B        |L2.958|
                  |L2.938|
;;;467    					{
;;;468    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
0003aa  481e              LDR      r0,|L2.1060|
0003ac  491c              LDR      r1,|L2.1056|
0003ae  6840              LDR      r0,[r0,#4]  ; thisInfo
0003b0  890a              LDRH     r2,[r1,#8]  ; tDSPAOutPutInfo
;;;469    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;					
0003b2  f8c02e40          STR      r2,[r0,#0xe40]
0003b6  f9b1101c          LDRSH    r1,[r1,#0x1c]  ; tDSPAOutPutInfo
0003ba  f8c01e5c          STR      r1,[r0,#0xe5c]
                  |L2.958|
0003be  9803              LDR      r0,[sp,#0xc]
0003c0  1c6d              ADDS     r5,r5,#1
0003c2  4285              CMP      r5,r0
0003c4  f6ffae5c          BLT      |L2.128|
                  |L2.968|
;;;470    					}
;;;471    				}
;;;472    			}
;;;473    		}
;;;474    	}
;;;475    	
;;;476    #if PAD_ > 0	
;;;477    	if(PadMode == 1)
0003c8  9832              LDR      r0,[sp,#0xc8]
0003ca  2801              CMP      r0,#1
;;;478    	{	
;;;479    		thisInfo->tDelta_local.tMaxCellPos.r -= PAD_;
;;;480    		thisInfo->tDelta_local.tValidRect.rs -= PAD_;
;;;481    		thisInfo->tDelta_local.tValidRect.re -= PAD_;
;;;482    		thisInfo->tDelta_local.tMaxCellPos.c -= PAD_;
;;;483    		thisInfo->tDelta_local.tValidRect.cs -= PAD_;
;;;484    		thisInfo->tDelta_local.tValidRect.ce -= PAD_;	
;;;485    	}
;;;486    #endif
;;;487    }
0003cc  bf1c              ITT      NE
0003ce  b017              ADDNE    sp,sp,#0x5c
0003d0  e8bd8ff0          POPNE    {r4-r11,pc}
0003d4  4813              LDR      r0,|L2.1060|
0003d6  6840              LDR      r0,[r0,#4]            ;479  ; thisInfo
0003d8  f8901e61          LDRB     r1,[r0,#0xe61]        ;479
0003dc  1e49              SUBS     r1,r1,#1              ;479
0003de  f8801e61          STRB     r1,[r0,#0xe61]        ;479
0003e2  f8901e38          LDRB     r1,[r0,#0xe38]        ;480
0003e6  1e49              SUBS     r1,r1,#1              ;480
0003e8  f8801e38          STRB     r1,[r0,#0xe38]        ;480
0003ec  f8901e39          LDRB     r1,[r0,#0xe39]        ;481
0003f0  1e49              SUBS     r1,r1,#1              ;481
0003f2  f8801e39          STRB     r1,[r0,#0xe39]        ;481
0003f6  f8901e60          LDRB     r1,[r0,#0xe60]        ;482
0003fa  1e49              SUBS     r1,r1,#1              ;482
0003fc  f8801e60          STRB     r1,[r0,#0xe60]        ;482
000400  f8901e3a          LDRB     r1,[r0,#0xe3a]        ;483
000404  1e49              SUBS     r1,r1,#1              ;483
000406  f8801e3a          STRB     r1,[r0,#0xe3a]        ;483
00040a  f8901e3b          LDRB     r1,[r0,#0xe3b]        ;484
00040e  1e49              SUBS     r1,r1,#1              ;484
000410  f8801e3b          STRB     r1,[r0,#0xe3b]        ;484
000414  b017              ADD      sp,sp,#0x5c
000416  e8bd8ff0          POP      {r4-r11,pc}
;;;488    
                          ENDP

00041a  0000              DCW      0x0000
                  |L2.1052|
                          DCD      0x40003000
                  |L2.1056|
                          DCD      ||.bss||
                  |L2.1060|
                          DCD      ||.data||

                          AREA ||i.DSPA_Initialize||, CODE, READONLY, ALIGN=2

                  DSPA_Initialize PROC
;;;97     
;;;98     void DSPA_Initialize(void)
000000  490b              LDR      r1,|L3.48|
;;;99     {
;;;100    	Fncp_DSP_A_IRQHandler = DSP_A_InterruptHandler;
000002  480a              LDR      r0,|L3.44|
000004  6008              STR      r0,[r1,#0]  ; Fncp_DSP_A_IRQHandler
000006  490b              LDR      r1,|L3.52|
000008  2080              MOVS     r0,#0x80
00000a  f8810400          STRB     r0,[r1,#0x400]
00000e  f04f21e0          MOV      r1,#0xe000e000
000012  01c0              LSLS     r0,r0,#7
000014  f8c10100          STR      r0,[r1,#0x100]
;;;101    
;;;102    	NVIC_SetPriority(DSP_A_IRQn, DSP_A_IRQn_Priority);
;;;103        NVIC_EnableIRQ(DSP_A_IRQn);
;;;104    
;;;105        DSPA->dspa_int_en.tBit.int_op_end = 0x1; // Interrupt Enable
000018  4807              LDR      r0,|L3.56|
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  f0410101          ORR      r1,r1,#1
000020  6641              STR      r1,[r0,#0x64]
;;;106        DSPA->dspa_int_en.tBit.int_tmode = 0x0; // Interrupt Enable
000022  6e41              LDR      r1,[r0,#0x64]
000024  f0210108          BIC      r1,r1,#8
000028  6641              STR      r1,[r0,#0x64]
;;;107    }
00002a  4770              BX       lr
;;;108    
                          ENDP

                  |L3.44|
                          DCD      DSP_A_InterruptHandler
                  |L3.48|
                          DCD      Fncp_DSP_A_IRQHandler
                  |L3.52|
                          DCD      0xe000e00e
                  |L3.56|
                          DCD      0x40003000

                          AREA ||i.DSPA_LineFilter_2nd_Stage||, CODE, READONLY, ALIGN=2

                  DSPA_LineFilter_2nd_Stage PROC
;;;488    
;;;489    void DSPA_LineFilter_2nd_Stage(uint32_t TmpDeltaAddr, uint32_t LF_BUF2_ADDR , uint32_t LF_BUF3_ADDR, uint32_t RowIdx,uint8_t RowSize, int32_t PosTHD,int32_t NegTHD)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;490    {  	
000004  b094              SUB      sp,sp,#0x50
;;;491    	int32_t *pLF_BUF2 = (int32_t *)LF_BUF2_ADDR;
;;;492    	int32_t *pLF_BUF3 = (int32_t *)LF_BUF3_ADDR;
;;;493    
;;;494    	memset(pLF_BUF2, 0, 8*sizeof(int32_t));	
000006  f04f0c00          MOV      r12,#0
00000a  e9dd761b          LDRD     r7,r6,[sp,#0x6c]      ;490
00000e  f8dd8068          LDR      r8,[sp,#0x68]
000012  f8c1c000          STR      r12,[r1,#0]
000016  f8c1c004          STR      r12,[r1,#4]
00001a  f8c1c008          STR      r12,[r1,#8]
00001e  f8c1c00c          STR      r12,[r1,#0xc]
000022  f8c1c010          STR      r12,[r1,#0x10]
000026  f8c1c014          STR      r12,[r1,#0x14]
00002a  f8c1c018          STR      r12,[r1,#0x18]
;;;495    	memset(pLF_BUF3, 0, 8*sizeof(int32_t));
00002e  f8c1c01c          STR      r12,[r1,#0x1c]
000032  f8c2c000          STR      r12,[r2,#0]
000036  f8c2c004          STR      r12,[r2,#4]
00003a  f8c2c008          STR      r12,[r2,#8]
00003e  f8c2c00c          STR      r12,[r2,#0xc]
000042  f8c2c010          STR      r12,[r2,#0x10]
000046  f8c2c014          STR      r12,[r2,#0x14]
00004a  4615              MOV      r5,r2                 ;492
00004c  f8c2c018          STR      r12,[r2,#0x18]
;;;496    
;;;497    	DSPA_CalculateDelta_Process(
000050  f8c5c01c          STR      r12,[r5,#0x1c]
000054  2203              MOVS     r2,#3
000056  e9cd8c10          STRD     r8,r12,[sp,#0x40]
00005a  e9cdc212          STRD     r12,r2,[sp,#0x48]
00005e  2250              MOVS     r2,#0x50
000060  e9cdc20d          STRD     r12,r2,[sp,#0x34]
000064  2202              MOVS     r2,#2
000066  f8cdc03c          STR      r12,[sp,#0x3c]
00006a  f8cdc010          STR      r12,[sp,#0x10]
00006e  f8cdc014          STR      r12,[sp,#0x14]
000072  f8cdc018          STR      r12,[sp,#0x18]
000076  f8cdc01c          STR      r12,[sp,#0x1c]
00007a  9208              STR      r2,[sp,#0x20]
00007c  e9cd2709          STRD     r2,r7,[sp,#0x24]
000080  f44f78fa          MOV      r8,#0x1f4
000084  e9cd680b          STRD     r6,r8,[sp,#0x2c]
000088  2201              MOVS     r2,#1
00008a  2606              MOVS     r6,#6
00008c  f8cdc000          STR      r12,[sp,#0]
000090  e9cd6201          STRD     r6,r2,[sp,#4]
000094  460c              MOV      r4,r1                 ;491
000096  4418              ADD      r0,r0,r3
000098  9203              STR      r2,[sp,#0xc]
00009a  4623              MOV      r3,r4
00009c  4a21              LDR      r2,|L4.292|
00009e  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;498    		TmpDeltaAddr+RowIdx, LF_BUF2_ADDR, (uint32_t)&LINEFILTERBUFST1[0], LF_BUF2_ADDR,	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;499    		0,LINEFILTER_ST2, 1,1,0, 0,0,0, WORD,WORD,   										//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;500    		PosTHD,NegTHD,500,                     												//PosTH,NegTH,GroupTH 
;;;501    		0,COL_MAX, 0, RowSize, 0,0,3);      												//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;502    		
;;;503    	pLF_BUF3[0] = Calc_LineFilter_Value(pLF_BUF2[0],DSPA->dspa_gen_reg2.Linefilter.n_cnt0);
0000a2  4821              LDR      r0,|L4.296|
0000a4  6822              LDR      r2,[r4,#0]
0000a6  6d01              LDR      r1,[r0,#0x50]
0000a8  b209              SXTH     r1,r1
0000aa  2900              CMP      r1,#0
0000ac  bf18              IT       NE
0000ae  fb92f1f1          SDIVNE   r1,r2,r1
;;;504    	pLF_BUF3[1] = Calc_LineFilter_Value(pLF_BUF2[1],DSPA->dspa_gen_reg2.Linefilter.n_cnt1);
0000b2  6029              STR      r1,[r5,#0]
0000b4  6862              LDR      r2,[r4,#4]
0000b6  6d01              LDR      r1,[r0,#0x50]
0000b8  1409              ASRS     r1,r1,#16
0000ba  bf18              IT       NE
0000bc  fb92f1f1          SDIVNE   r1,r2,r1
;;;505    	pLF_BUF3[2] = Calc_LineFilter_Value(pLF_BUF2[2],DSPA->dspa_gen_reg3.Linefilter.n_cnt2);
0000c0  6069              STR      r1,[r5,#4]
0000c2  68a2              LDR      r2,[r4,#8]
0000c4  6d41              LDR      r1,[r0,#0x54]
0000c6  b209              SXTH     r1,r1
0000c8  2900              CMP      r1,#0
0000ca  bf18              IT       NE
0000cc  fb92f1f1          SDIVNE   r1,r2,r1
;;;506    	pLF_BUF3[3] = Calc_LineFilter_Value(pLF_BUF2[3],DSPA->dspa_gen_reg3.Linefilter.n_cnt3);
0000d0  60a9              STR      r1,[r5,#8]
0000d2  68e2              LDR      r2,[r4,#0xc]
0000d4  6d41              LDR      r1,[r0,#0x54]
0000d6  1409              ASRS     r1,r1,#16
0000d8  bf18              IT       NE
0000da  fb92f1f1          SDIVNE   r1,r2,r1
;;;507    	pLF_BUF3[4] = Calc_LineFilter_Value(pLF_BUF2[4],DSPA->dspa_gen_reg4.Linefilter.n_cnt4);
0000de  60e9              STR      r1,[r5,#0xc]
0000e0  6922              LDR      r2,[r4,#0x10]
0000e2  6d81              LDR      r1,[r0,#0x58]
0000e4  b209              SXTH     r1,r1
0000e6  2900              CMP      r1,#0
0000e8  bf18              IT       NE
0000ea  fb92f1f1          SDIVNE   r1,r2,r1
;;;508    	pLF_BUF3[5] = Calc_LineFilter_Value(pLF_BUF2[5],DSPA->dspa_gen_reg4.Linefilter.n_cnt5);
0000ee  6129              STR      r1,[r5,#0x10]
0000f0  6962              LDR      r2,[r4,#0x14]
0000f2  6d81              LDR      r1,[r0,#0x58]
0000f4  1409              ASRS     r1,r1,#16
0000f6  bf18              IT       NE
0000f8  fb92f1f1          SDIVNE   r1,r2,r1
;;;509    	pLF_BUF3[6] = Calc_LineFilter_Value(pLF_BUF2[6],DSPA->dspa_gen_reg5.Linefilter.n_cnt6);
0000fc  6169              STR      r1,[r5,#0x14]
0000fe  69a2              LDR      r2,[r4,#0x18]
000100  6dc1              LDR      r1,[r0,#0x5c]
000102  b209              SXTH     r1,r1
000104  2900              CMP      r1,#0
000106  bf18              IT       NE
000108  fb92f1f1          SDIVNE   r1,r2,r1
;;;510    	pLF_BUF3[7] = Calc_LineFilter_Value(pLF_BUF2[7],DSPA->dspa_gen_reg5.Linefilter.n_cnt7);
00010c  61a9              STR      r1,[r5,#0x18]
00010e  69e1              LDR      r1,[r4,#0x1c]
000110  6dc0              LDR      r0,[r0,#0x5c]
000112  1400              ASRS     r0,r0,#16
000114  bf18              IT       NE
000116  fb91f0f0          SDIVNE   r0,r1,r0
00011a  61e8              STR      r0,[r5,#0x1c]
;;;511    }
00011c  b014              ADD      sp,sp,#0x50
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;512    
                          ENDP

000122  0000              DCW      0x0000
                  |L4.292|
                          DCD      DspA_LF_ArrayS32_1
                  |L4.296|
                          DCD      0x40003000

                          AREA ||i.DSPA_ParamSet||, CODE, READONLY, ALIGN=2

                  DSPA_ParamSet PROC
;;;150    
;;;151    void DSPA_ParamSet(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;152            uint8_t     cal1_mode,
;;;153            uint8_t     cal2_mode,
;;;154            uint8_t     src2_div_en,
;;;155            uint8_t     dst_div_en,
;;;156            uint8_t     get_value_en,
;;;157            uint16_t    const_a,
;;;158            uint16_t    const_b,
;;;159            uint8_t     const_n,
;;;160            uint8_t     x_size,
;;;161            uint8_t     y_size,
;;;162            uint16_t    total_node_size,
;;;163            uint8_t     src2_dtype,
;;;164            uint8_t     dst_dtype,
;;;165            uint32_t    src1_addr,
;;;166            uint32_t    src2_addr,
;;;167            uint32_t    src3_addr,
;;;168            uint32_t    dst_addr,
;;;169            int32_t     thd1,
;;;170            int32_t     thd2,
;;;171            int32_t     thd3,
;;;172            int32_t     thd4,
;;;173            int32_t     thd5,
;;;174            uint8_t     filter_dir
;;;175    )
;;;176    {
;;;177        DSPA->dspa_init                    = 1;
000004  f8dfc148          LDR      r12,|L5.336|
000008  e9dd641a          LDRD     r6,r4,[sp,#0x68]      ;176
00000c  e9dd590d          LDRD     r5,r9,[sp,#0x34]      ;176
000010  e9dd8712          LDRD     r8,r7,[sp,#0x48]      ;176
000014  e9ddba09          LDRD     r11,r10,[sp,#0x24]    ;176
000018  f04f0e01          MOV      lr,#1
00001c  f8cce004          STR      lr,[r12,#4]
;;;178    
;;;179        if (filter_dir == LINE_FILTER_HOR)
000020  2c00              CMP      r4,#0
;;;180            DSPA->dspa_mode.tBit.sens_dir          = 0;
000022  bf04              ITT      EQ
000024  f8dce008          LDREQ    lr,[r12,#8]
000028  f02e0e10          BICEQ    lr,lr,#0x10
00002c  d006              BEQ      |L5.60|
;;;181        else if(filter_dir == LINE_FILTER_VER)
00002e  2c01              CMP      r4,#1
;;;182            DSPA->dspa_mode.tBit.sens_dir          = 1;
000030  bf04              ITT      EQ
000032  f8dce008          LDREQ    lr,[r12,#8]
000036  f04e0e10          ORREQ    lr,lr,#0x10
00003a  d101              BNE      |L5.64|
                  |L5.60|
00003c  f8cce008          STR      lr,[r12,#8]
                  |L5.64|
;;;183    
;;;184        DSPA->dspa_mode.tBit.cal1_mode         = cal1_mode;
000040  f8dce008          LDR      lr,[r12,#8]
000044  f3600e00          BFI      lr,r0,#0,#1
000048  f8cce008          STR      lr,[r12,#8]
;;;185        DSPA->dspa_mode.tBit.cal2_mode         = cal2_mode;
00004c  f8dc0008          LDR      r0,[r12,#8]
000050  f3610043          BFI      r0,r1,#1,#3
000054  f8cc0008          STR      r0,[r12,#8]
;;;186    
;;;187        DSPA->dspa_cal_ctrl.tBit.src2_div_en   = src2_div_en;
000058  f8dc000c          LDR      r0,[r12,#0xc]
00005c  f3620000          BFI      r0,r2,#0,#1
000060  f8cc000c          STR      r0,[r12,#0xc]
;;;188        DSPA->dspa_cal_ctrl.tBit.dst_div_en    = dst_div_en;
000064  f8dc000c          LDR      r0,[r12,#0xc]
000068  f3630041          BFI      r0,r3,#1,#1
00006c  f8cc000c          STR      r0,[r12,#0xc]
;;;189        DSPA->dspa_cal_ctrl.tBit.get_val_en    = get_value_en;
000070  f8dc000c          LDR      r0,[r12,#0xc]
000074  f36b0082          BFI      r0,r11,#2,#1
000078  f8cc000c          STR      r0,[r12,#0xc]
;;;190    
;;;191        DSPA->dspa_cal_const.tBit.const_a      = const_a;
00007c  f8dc0010          LDR      r0,[r12,#0x10]
000080  f36a0009          BFI      r0,r10,#0,#10
000084  f8cc0010          STR      r0,[r12,#0x10]
;;;192        DSPA->dspa_cal_const.tBit.const_b      = const_b;
000088  980b              LDR      r0,[sp,#0x2c]
00008a  f8dc3010          LDR      r3,[r12,#0x10]
00008e  f3602393          BFI      r3,r0,#10,#10
000092  f8cc3010          STR      r3,[r12,#0x10]
;;;193        DSPA->dspa_cal_const.tBit.const_n      = const_n;
000096  980c              LDR      r0,[sp,#0x30]
000098  f8dc3010          LDR      r3,[r12,#0x10]
00009c  f3605317          BFI      r3,r0,#20,#4
0000a0  f8cc3010          STR      r3,[r12,#0x10]
;;;194    
;;;195        DSPA->dspa_size_cfg.tBit.xsize         = x_size;
0000a4  f8dc0014          LDR      r0,[r12,#0x14]
0000a8  f3650007          BFI      r0,r5,#0,#8
0000ac  f8cc0014          STR      r0,[r12,#0x14]
;;;196        DSPA->dspa_size_cfg.tBit.ysize         = y_size;
0000b0  f8dc0014          LDR      r0,[r12,#0x14]
0000b4  f369200f          BFI      r0,r9,#8,#8
0000b8  f8cc0014          STR      r0,[r12,#0x14]
;;;197        DSPA->dspa_size_cfg.tBit.datalen       = total_node_size;
0000bc  980f              LDR      r0,[sp,#0x3c]
0000be  f8dc3014          LDR      r3,[r12,#0x14]
0000c2  f360431f          BFI      r3,r0,#16,#16
0000c6  f8cc3014          STR      r3,[r12,#0x14]
;;;198    
;;;199        DSPA->dspa_dsize.tBit.src2_dsize       = src2_dtype;
0000ca  9810              LDR      r0,[sp,#0x40]
0000cc  f8dc3018          LDR      r3,[r12,#0x18]
0000d0  f3600301          BFI      r3,r0,#0,#2
0000d4  f8cc3018          STR      r3,[r12,#0x18]
;;;200        DSPA->dspa_dsize.tBit.dst_dsize        = dst_dtype;
0000d8  9811              LDR      r0,[sp,#0x44]
0000da  f8dc3018          LDR      r3,[r12,#0x18]
0000de  f3600383          BFI      r3,r0,#2,#2
0000e2  f8cc3018          STR      r3,[r12,#0x18]
;;;201        DSPA->dspa_dsize.tBit.tot_xsize        = x_size;
0000e6  f8dc0018          LDR      r0,[r12,#0x18]
0000ea  f365100b          BFI      r0,r5,#4,#8
0000ee  f8cc0018          STR      r0,[r12,#0x18]
;;;202    
;;;203        DSPA->dspa_src1_addr                 = src1_addr;
0000f2  f8cc801c          STR      r8,[r12,#0x1c]
;;;204        DSPA->dspa_src2_addr                 = src2_addr;
0000f6  f8cc7020          STR      r7,[r12,#0x20]
;;;205        DSPA->dspa_src3_addr                 = src3_addr;
0000fa  9814              LDR      r0,[sp,#0x50]
0000fc  f8cc0024          STR      r0,[r12,#0x24]
;;;206        DSPA->dspa_dst_addr                  = dst_addr;
000100  9815              LDR      r0,[sp,#0x54]
000102  f8cc0028          STR      r0,[r12,#0x28]
;;;207    
;;;208        DSPA->dspa_lf_uppth                  = thd1;
000106  9816              LDR      r0,[sp,#0x58]
000108  f8cc002c          STR      r0,[r12,#0x2c]
;;;209        DSPA->dspa_lf_lowth                  = (uint32_t)thd2;
00010c  9817              LDR      r0,[sp,#0x5c]
00010e  f8cc0030          STR      r0,[r12,#0x30]
;;;210        DSPA->dspa_lcnt_uppth                = thd3;
000112  9818              LDR      r0,[sp,#0x60]
000114  f8cc0034          STR      r0,[r12,#0x34]
;;;211        DSPA->dspa_lcnt_lowth                = (uint32_t)thd4;
000118  9819              LDR      r0,[sp,#0x64]
00011a  f8cc0038          STR      r0,[r12,#0x38]
;;;212        DSPA->dspa_param_th                  = thd5;
00011e  f8cc603c          STR      r6,[r12,#0x3c]
;;;213    
;;;214        if ( src2_div_en == 1 )
000122  2a01              CMP      r2,#1
;;;215        {
;;;216            if( cal2_mode == LINECELLCOUNT )
;;;217            {
;;;218                DSPA->dspa_gen_reg0.w  = (1 << 24) | (1 << 16) | (1 << 8) | 1;
;;;219                DSPA->dspa_gen_reg1.w  = (1 << 24) | (1 << 16) | (1 << 8) | 1;
;;;220            }
;;;221            else    // Linfilter Step 1,2,3
;;;222            {
;;;223                if (filter_dir == LINE_FILTER_HOR)
;;;224                {
;;;225                    DSPA->dspa_gen_reg0.w  = (COL_MAX << 0)
;;;226                                             | (COL_MAX << 8)
;;;227                                             | (COL_MAX << 16)
;;;228                                             | (COL_MAX << 24);
;;;229                    DSPA->dspa_gen_reg1.w  = (COL_MAX << 0)
;;;230                                             | (COL_MAX << 8)
;;;231                                             | (COL_MAX << 16)
;;;232                                             | (COL_MAX << 24);
;;;233                }
;;;234                else
;;;235                {
;;;236                    DSPA->dspa_gen_reg0.w  = (1 << 0)
;;;237                                             | (1 << 8)
;;;238                                             | (1 << 16)
;;;239                                             | (1 << 24);
;;;240                    DSPA->dspa_gen_reg1.w  = (1 << 0)
;;;241                                             | (1 << 8)
;;;242                                             | (1 << 16)
;;;243                                             | (1 << 24);
;;;244                }
;;;245            }
;;;246        }
;;;247    
;;;248    //    if( _DEF_TEST_MODE_EN_ )
;;;249    //    {
;;;250    //        DSPA->dspa_tmode_cfg.tBit.tmode_brk_en =  1;
;;;251    //        DSPA->dspa_tmode_cfg.tBit.tmode_brk_pos = _DEF_TEST_MODE_NODE_POS_;
;;;252    //    }
;;;253    }
000124  bf18              IT       NE
000126  e8bd8ff0          POPNE    {r4-r11,pc}
00012a  f04f3001          MOV      r0,#0x1010101         ;218
00012e  2907              CMP      r1,#7                 ;216
000130  d000              BEQ      |L5.308|
000132  b12c              CBZ      r4,|L5.320|
                  |L5.308|
000134  f8cc0048          STR      r0,[r12,#0x48]        ;218
000138  f8cc004c          STR      r0,[r12,#0x4c]        ;219
00013c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.320|
000140  f04f3050          MOV      r0,#0x50505050        ;225
000144  f8cc0048          STR      r0,[r12,#0x48]        ;225
000148  f8cc004c          STR      r0,[r12,#0x4c]        ;229
00014c  e8bd8ff0          POP      {r4-r11,pc}
;;;254    
                          ENDP

                  |L5.336|
                          DCD      0x40003000

                          AREA ||i.DSPA_Start||, CODE, READONLY, ALIGN=2

                  DSPA_Start PROC
;;;254    
;;;255    void DSPA_Start(bool_t bIsWait)
000000  b510              PUSH     {r4,lr}
;;;256    {
000002  4604              MOV      r4,r0
;;;257    	if(hal_get_irq_flag(IRQ_ID_DSPA) == 0)
000004  2007              MOVS     r0,#7
000006  f7fffffe          BL       hal_get_irq_flag
00000a  2800              CMP      r0,#0
;;;258    	{
;;;259    		DSPA->dspa_start = 1;
;;;260    		if(bIsWait)
;;;261    		{
;;;262    			DSPA_WaitForIrq(&tDSPAOutPutInfo);
;;;263    		}
;;;264    	}
;;;265    }
00000c  bf18              IT       NE
00000e  bd10              POPNE    {r4,pc}
000010  2001              MOVS     r0,#1                 ;259
000012  4905              LDR      r1,|L6.40|
000014  6008              STR      r0,[r1,#0]            ;259
000016  2c00              CMP      r4,#0                 ;260
000018  bf08              IT       EQ
00001a  bd10              POPEQ    {r4,pc}
00001c  4803              LDR      r0,|L6.44|
00001e  e8bd4010          POP      {r4,lr}               ;262
000022  f7ffbffe          B.W      DSPA_WaitForIrq
;;;266    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x40003000
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.DSPA_WaitForIrq||, CODE, READONLY, ALIGN=2

                  DSPA_WaitForIrq PROC
;;;109    int LoopCntDspA = 0;
;;;110    void DSPA_WaitForIrq(tDSPAOutPutInfo_t * ptOutPutInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;111    {
;;;112    //	uint32_t ulMinValue;
;;;113    //	uint32_t ulMaxValue;
;;;114    	LoopCntDspA = 0;
000002  4d25              LDR      r5,|L7.152|
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;111
000008  612e              STR      r6,[r5,#0x10]  ; LoopCntDspA
                  |L7.10|
;;;115    	while(YES)
;;;116    	{
;;;117    	    if(hal_get_irq_flag(IRQ_ID_DSPA))
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       hal_get_irq_flag
000010  2800              CMP      r0,#0
000012  d036              BEQ      |L7.130|
;;;118    	    {
;;;119    	    	hal_clear_irq_flag(IRQ_ID_DSPA);
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       hal_clear_irq_flag
;;;120    			LoopCntDspA = 0;
;;;121    			if(DSPA->dspa_cal_ctrl.tBit.get_val_en)
00001a  4920              LDR      r1,|L7.156|
00001c  612e              STR      r6,[r5,#0x10]  ; LoopCntDspA
00001e  68c8              LDR      r0,[r1,#0xc]
000020  f0100f04          TST      r0,#4
;;;122    			{
;;;123    				ptOutPutInfo->ulPositiveCellNum = (DSPA->dspa_gen_reg0.w  >>  0) & 0xffff;
;;;124    				ptOutPutInfo->usPositiveMaxData = (DSPA->dspa_gen_reg0.w  >> 16) & 0xffff;
;;;125    				ptOutPutInfo->ulPositiveCellTotalSum = (int32_t)(DSPA->dspa_gen_reg1.w );
;;;126    				ptOutPutInfo->ulPositiveMaxData_ColIdx = (DSPA->dspa_gen_reg2.w  >>  0) & 0xff;
;;;127    				ptOutPutInfo->ulPositiveMaxData_RowIdx = (DSPA->dspa_gen_reg2.w  >>  8) & 0xff;
;;;128    				ptOutPutInfo->ulNegativeMaxData_ColIdx = (DSPA->dspa_gen_reg2.w  >> 16) & 0xff;
;;;129    				ptOutPutInfo->ulNegativeMaxData_RowIdx = (DSPA->dspa_gen_reg2.w  >> 24) & 0xff;
;;;130    
;;;131    				ptOutPutInfo->ulNegativeCellNum = (DSPA->dspa_gen_reg3.w  >>  0) & 0xffff;
;;;132    				ptOutPutInfo->sNegativeMaxData = (DSPA->dspa_gen_reg3.w  >> 16) & 0xffff;
;;;133    				ptOutPutInfo->lNegativeCellTotalSum = (int32_t)DSPA->dspa_gen_reg4.w;
;;;134    
;;;135    				ptOutPutInfo->ulTouchAreaCol_sIdx = (DSPA->dspa_gen_reg5.w  >>  0) & 0xff;
;;;136    				ptOutPutInfo->ulTouchAreaCol_eIdx = (DSPA->dspa_gen_reg5.w  >>  8) & 0xff;
;;;137    				ptOutPutInfo->ulTouchAreaRow_sIdx = (DSPA->dspa_gen_reg5.w  >> 16) & 0xff;
;;;138    				ptOutPutInfo->ulTouchAreaRow_eIdx = (DSPA->dspa_gen_reg5.w  >> 24) & 0xff;
;;;139    			}
;;;140    	    	break;
;;;141    	    }
;;;142    		
;;;143    		if(++LoopCntDspA > 32000)
;;;144    		{
;;;145    			hal_clear_irq_flag(IRQ_ID_DSPA);
;;;146    			break;
;;;147    		}
;;;148    	}
;;;149    }
000024  bf08              IT       EQ
000026  bd70              POPEQ    {r4-r6,pc}
000028  6c88              LDR      r0,[r1,#0x48]         ;123
00002a  b280              UXTH     r0,r0                 ;123
00002c  6020              STR      r0,[r4,#0]            ;124
00002e  6c88              LDR      r0,[r1,#0x48]         ;124
000030  0c00              LSRS     r0,r0,#16             ;124
000032  8120              STRH     r0,[r4,#8]            ;124
000034  6cc8              LDR      r0,[r1,#0x4c]         ;125
000036  6060              STR      r0,[r4,#4]            ;126
000038  6d08              LDR      r0,[r1,#0x50]         ;126
00003a  b2c0              UXTB     r0,r0                 ;126
00003c  6120              STR      r0,[r4,#0x10]         ;127
00003e  6d08              LDR      r0,[r1,#0x50]         ;127
000040  f3c02007          UBFX     r0,r0,#8,#8           ;127
000044  60e0              STR      r0,[r4,#0xc]          ;128
000046  6d08              LDR      r0,[r1,#0x50]         ;128
000048  f3c04007          UBFX     r0,r0,#16,#8          ;128
00004c  6260              STR      r0,[r4,#0x24]         ;129
00004e  6d08              LDR      r0,[r1,#0x50]         ;129
000050  0e00              LSRS     r0,r0,#24             ;129
000052  6220              STR      r0,[r4,#0x20]         ;131
000054  6d48              LDR      r0,[r1,#0x54]         ;131
000056  b280              UXTH     r0,r0                 ;131
000058  6160              STR      r0,[r4,#0x14]         ;132
00005a  6d48              LDR      r0,[r1,#0x54]         ;132
00005c  1400              ASRS     r0,r0,#16             ;132
00005e  83a0              STRH     r0,[r4,#0x1c]         ;132
000060  6d88              LDR      r0,[r1,#0x58]         ;133
000062  61a0              STR      r0,[r4,#0x18]         ;135
000064  6dc8              LDR      r0,[r1,#0x5c]         ;135
000066  b2c0              UXTB     r0,r0                 ;135
000068  6320              STR      r0,[r4,#0x30]         ;136
00006a  6dc8              LDR      r0,[r1,#0x5c]         ;136
00006c  f3c02007          UBFX     r0,r0,#8,#8           ;136
000070  6360              STR      r0,[r4,#0x34]         ;137
000072  6dc8              LDR      r0,[r1,#0x5c]         ;137
000074  f3c04007          UBFX     r0,r0,#16,#8          ;137
000078  62a0              STR      r0,[r4,#0x28]         ;138
00007a  6dc8              LDR      r0,[r1,#0x5c]         ;138
00007c  0e00              LSRS     r0,r0,#24             ;138
00007e  62e0              STR      r0,[r4,#0x2c]         ;138
000080  bd70              POP      {r4-r6,pc}
                  |L7.130|
000082  6928              LDR      r0,[r5,#0x10]         ;143  ; LoopCntDspA
000084  1c40              ADDS     r0,r0,#1              ;143
000086  6128              STR      r0,[r5,#0x10]         ;143  ; LoopCntDspA
000088  f5b04ffa          CMP      r0,#0x7d00            ;143
00008c  ddbd              BLE      |L7.10|
00008e  e8bd4070          POP      {r4-r6,lr}            ;145
000092  2007              MOVS     r0,#7                 ;145
000094  f7ffbffe          B.W      hal_clear_irq_flag
;;;150    
                          ENDP

                  |L7.152|
                          DCD      ||.data||
                  |L7.156|
                          DCD      0x40003000

                          AREA ||i.DSPA_WaitOK||, CODE, READONLY, ALIGN=2

                  DSPA_WaitOK PROC
;;;266    
;;;267    void DSPA_WaitOK(void)
000000  4801              LDR      r0,|L8.8|
;;;268    {
;;;269    	DSPA_WaitForIrq(&tDSPAOutPutInfo);
000002  f7ffbffe          B.W      DSPA_WaitForIrq
;;;270    }
;;;271    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.DSP_A_InterruptHandler||, CODE, READONLY, ALIGN=2

                  DSP_A_InterruptHandler PROC
;;;86     
;;;87     void DSP_A_InterruptHandler(void)
000000  b510              PUSH     {r4,lr}
000002  f04f21e0          MOV      r1,#0xe000e000
000006  f44f4080          MOV      r0,#0x4000
00000a  f8c10280          STR      r0,[r1,#0x280]
;;;88     {
;;;89         NVIC_ClearPendingIRQ(DSP_A_IRQn);
;;;90     
;;;91         if( DSPA->dspa_status.tBit.int_op_end_sts )
00000e  4c07              LDR      r4,|L9.44|
000010  6ee0              LDR      r0,[r4,#0x6c]
000012  f0100f01          TST      r0,#1
;;;92         {
;;;93         	hal_set_irq_flag(IRQ_ID_DSPA);
;;;94             DSPA->dspa_int_clr.tBit.int_op_end_clr = 0x1; // Interrupt Clear
;;;95         }
;;;96     }
000016  bf08              IT       EQ
000018  bd10              POPEQ    {r4,pc}
00001a  2007              MOVS     r0,#7                 ;93
00001c  f7fffffe          BL       hal_set_irq_flag
000020  6ea0              LDR      r0,[r4,#0x68]         ;94
000022  f0400001          ORR      r0,r0,#1              ;94
000026  66a0              STR      r0,[r4,#0x68]         ;94
000028  bd10              POP      {r4,pc}
;;;97     
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x40003000

                          AREA ||i.algorithm_baseline_calculate_delta_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_baseline_calculate_delta_dspA PROC
;;;711    
;;;712    void algorithm_baseline_calculate_delta_dspA(int mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;713    {
000004  b094              SUB      sp,sp,#0x50
000006  4607              MOV      r7,r0
;;;714    	uint16_t * pBaseImage;
;;;715    	uint32_t Dst_Addr;
;;;716    #if (PAD_ > 0)	
;;;717    	Dst_Addr = (uint32_t)&DSPATMPDELTA_Finger[0][0];
000008  f8df80cc          LDR      r8,|L10.216|
;;;718    //	memset(DSPATMPDELTA_Finger,0,sizeof(DSPATMPDELTA_Finger));
;;;719    #else
;;;720    	Dst_Addr = (uint32_t)&DELTAIMAGE[0][0];
;;;721    #endif
;;;722    
;;;723    #if USED_NOISE_HOPPING_FREQ
;;;724    	tAppInfo_t * pAppInfo = app_GetInfo();
00000c  f7fffffe          BL       app_GetInfo
;;;725    	if(pAppInfo->eSelectFreq == FREQ_MAIN)
000010  7c80              LDRB     r0,[r0,#0x12]
000012  2801              CMP      r0,#1
;;;726    	{
;;;727    		pBaseImage = g_pFingerBaseImage;
000014  bf07              ITTEE    EQ
000016  4831              LDREQ    r0,|L10.220|
000018  6801              LDREQ    r1,[r0,#0]  ; g_pFingerBaseImage
;;;728    	}
;;;729    	else
;;;730    	{
;;;731    		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
00001a  4831              LDRNE    r0,|L10.224|
00001c  f2454160          MOVNE    r1,#0x5460
000020  bf18              IT       NE
000022  4401              ADDNE    r1,r0
;;;732    	}
;;;733    #else /* USED_NOISE_HOPPING_FREQ */
;;;734    	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;735    #endif /* USED_NOISE_HOPPING_FREQ */
;;;736    
;;;737    	DSPA_CalculateDelta_Process(
000024  2401              MOVS     r4,#1
000026  2500              MOVS     r5,#0
000028  202d              MOVS     r0,#0x2d
00002a  e9cd0510          STRD     r0,r5,[sp,#0x40]
00002e  4e2d              LDR      r6,|L10.228|
000030  e9cd5412          STRD     r5,r4,[sp,#0x48]
000034  68f2              LDR      r2,[r6,#0xc]  ; thisModeConf
000036  2350              MOVS     r3,#0x50
000038  f8b2005f          LDRH     r0,[r2,#0x5f]
00003c  e9cd350e          STRD     r3,r5,[sp,#0x38]
000040  e9cd050c          STRD     r0,r5,[sp,#0x30]
000044  f9b2000b          LDRSH    r0,[r2,#0xb]
000048  f9b22009          LDRSH    r2,[r2,#9]
00004c  e9cd200a          STRD     r2,r0,[sp,#0x28]
000050  9408              STR      r4,[sp,#0x20]
000052  9409              STR      r4,[sp,#0x24]
000054  68b0              LDR      r0,[r6,#8]  ; ptModuleModeConf
000056  4643              MOV      r3,r8
000058  2200              MOVS     r2,#0
00005a  7800              LDRB     r0,[r0,#0]
00005c  9405              STR      r4,[sp,#0x14]
00005e  e9cd4006          STRD     r4,r0,[sp,#0x18]
000062  9404              STR      r4,[sp,#0x10]
000064  9400              STR      r4,[sp,#0]
000066  e9cd4501          STRD     r4,r5,[sp,#4]
00006a  481d              LDR      r0,|L10.224|
00006c  9503              STR      r5,[sp,#0xc]
00006e  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;738    		(uint32_t)&RAWIMAGE[0][0], (uint32_t)(&pBaseImage[0]), 0,Dst_Addr,																					//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR
;;;739    		WITHCOEF,SUBTRACTION, 0,0,1, 1,1,ptModuleModeConf->ucOvrShift, HALFWORD,HALFWORD,														//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;740    		(int32_t)thisModeConf->BaseLine.sAccumPosSumThd,(int32_t)thisModeConf->BaseLine.sAccumNegSumThd,(int32_t)thisModeConf->Label.usSeedBase, 	//PosTH,NegTH,GroupTH 
;;;741    		0,COL_MAX, 0, ROW_MAX, 0, 0, 1);																										//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;742    	
;;;743    	if(  thisInfo->tDelta.iMaxStrength > thisModeConf->Label.usSeedBase)
000072  6870              LDR      r0,[r6,#4]  ; thisInfo
000074  68f2              LDR      r2,[r6,#0xc]  ; thisModeConf
000076  f8d01015          LDR      r1,[r0,#0x15]
00007a  f8b2205f          LDRH     r2,[r2,#0x5f]
00007e  4291              CMP      r1,r2
;;;744    	{
;;;745    		thisInfo->bTouchExpect = YES;
000080  bfcc              ITE      GT
000082  f8804fb5          STRBGT   r4,[r0,#0xfb5]
;;;746    	}
;;;747    	else thisInfo->bTouchExpect = NO;
000086  f8805fb5          STRBLE   r5,[r0,#0xfb5]
;;;748    
;;;749    	
;;;750    #if (PAD_ > 0)
;;;751    	algorithm_delta_padding(mode);
00008a  b2f8              UXTB     r0,r7
00008c  f04f08a0          MOV      r8,#0xa0
000090  2803              CMP      r0,#3
000092  bf04              ITT      EQ
000094  4c14              LDREQ    r4,|L10.232|
000096  4815              LDREQ    r0,|L10.236|
000098  d01c              BEQ      |L10.212|
00009a  2801              CMP      r0,#1
00009c  d018              BEQ      |L10.208|
00009e  4c0e              LDR      r4,|L10.216|
0000a0  4813              LDR      r0,|L10.240|
0000a2  252d              MOVS     r5,#0x2d
                  |L10.164|
0000a4  2600              MOVS     r6,#0
0000a6  f10007a6          ADD      r7,r0,#0xa6
0000aa  2d00              CMP      r5,#0
;;;752    #endif
;;;753    }
0000ac  bf9c              ITT      LS
0000ae  b014              ADDLS    sp,sp,#0x50
0000b0  e8bd81f0          POPLS    {r4-r8,pc}
                  |L10.180|
0000b4  4642              MOV      r2,r8
0000b6  4621              MOV      r1,r4
0000b8  4638              MOV      r0,r7
0000ba  f7fffffe          BL       __aeabi_memcpy
0000be  1c70              ADDS     r0,r6,#1
0000c0  b286              UXTH     r6,r0
0000c2  34a0              ADDS     r4,r4,#0xa0
0000c4  37a4              ADDS     r7,r7,#0xa4
0000c6  42b5              CMP      r5,r6
0000c8  d8f4              BHI      |L10.180|
0000ca  b014              ADD      sp,sp,#0x50
0000cc  e8bd81f0          POP      {r4-r8,pc}
                  |L10.208|
0000d0  4c05              LDR      r4,|L10.232|
0000d2  4808              LDR      r0,|L10.244|
                  |L10.212|
0000d4  2505              MOVS     r5,#5
0000d6  e7e5              B        |L10.164|
                          ENDP

                  |L10.216|
                          DCD      DspA_TmpDelta_Finger
                  |L10.220|
                          DCD      g_pFingerBaseImage
                  |L10.224|
                          DCD      FullSharedBuff
                  |L10.228|
                          DCD      ||.data||
                  |L10.232|
                          DCD      DspA_TmpDelta
                  |L10.236|
                          DCD      DspA_TmpDelta_Pad
                  |L10.240|
                          DCD      FullSharedBuff+0xc8d8
                  |L10.244|
                          DCD      LocalSharedBuff+0x44c0

                          AREA ||i.algorithm_delta_padding||, CODE, READONLY, ALIGN=2

                  algorithm_delta_padding PROC
;;;542    
;;;543    void algorithm_delta_padding(uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;544    {
;;;545        uint16_t r,end_r;
;;;546        int16_t *psrc;
;;;547        int16_t *pdst;
;;;548        uint32_t MemTransSize;
;;;549        
;;;550        MemTransSize = COL_MAX*sizeof(int16_t);
000004  f04f08a0          MOV      r8,#0xa0
;;;551       
;;;552    	if(mode == LOCAL_HOVER_MODE)
000008  2803              CMP      r0,#3
;;;553    	{
;;;554    		psrc = &DSPATMPDELTA[0][0];
00000a  bf04              ITT      EQ
00000c  4c0f              LDREQ    r4,|L11.76|
;;;555    		pdst = &DSPATMPDELTA_PAD[0][0];	
00000e  4810              LDREQ    r0,|L11.80|
000010  d01a              BEQ      |L11.72|
;;;556    		end_r = PEN_COORD_ROW_MAX;		
;;;557    	}
;;;558    	else if(mode == LOCAL_MODE)
000012  2801              CMP      r0,#1
000014  d016              BEQ      |L11.68|
;;;559    	{
;;;560    		psrc = &DSPATMPDELTA[0][0];
;;;561    		pdst = &LOCALDELTAIMAGE[0][0];	
;;;562    		end_r = PEN_COORD_ROW_MAX;		
;;;563    	}
;;;564    	else
;;;565    	{
;;;566    		psrc = &DSPATMPDELTA_Finger[0][0];
000016  4c0f              LDR      r4,|L11.84|
;;;567    		pdst = HAL_GET_DELTA_IMAGE_PTR();
000018  480f              LDR      r0,|L11.88|
;;;568    		end_r = ROW_MAX;
00001a  252d              MOVS     r5,#0x2d
                  |L11.28|
;;;569    	}
;;;570    
;;;571    	pdst += (COL_MAX + 2*PAD_+PAD_);
;;;572    
;;;573    	for( r=0; r<end_r; r++ )
00001c  2600              MOVS     r6,#0
00001e  f10007a6          ADD      r7,r0,#0xa6           ;571
000022  2d00              CMP      r5,#0
;;;574    	{
;;;575    		memcpy(pdst, psrc, MemTransSize);
;;;576    
;;;577    		psrc += COL_MAX;
;;;578    		pdst += (COL_MAX + 2*PAD_);
;;;579    	}
;;;580    }
000024  bf98              IT       LS
000026  e8bd81f0          POPLS    {r4-r8,pc}
                  |L11.42|
00002a  4642              MOV      r2,r8                 ;575
00002c  4621              MOV      r1,r4                 ;575
00002e  4638              MOV      r0,r7                 ;575
000030  f7fffffe          BL       __aeabi_memcpy
000034  1c70              ADDS     r0,r6,#1              ;573
000036  b286              UXTH     r6,r0                 ;573
000038  34a0              ADDS     r4,r4,#0xa0           ;573
00003a  37a4              ADDS     r7,r7,#0xa4           ;573
00003c  42b5              CMP      r5,r6                 ;573
00003e  d8f4              BHI      |L11.42|
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L11.68|
000044  4c01              LDR      r4,|L11.76|
000046  4805              LDR      r0,|L11.92|
                  |L11.72|
000048  2505              MOVS     r5,#5                 ;562
00004a  e7e7              B        |L11.28|
;;;581    
                          ENDP

                  |L11.76|
                          DCD      DspA_TmpDelta
                  |L11.80|
                          DCD      DspA_TmpDelta_Pad
                  |L11.84|
                          DCD      DspA_TmpDelta_Finger
                  |L11.88|
                          DCD      FullSharedBuff+0xc8d8
                  |L11.92|
                          DCD      LocalSharedBuff+0x44c0

                          AREA ||i.algorithm_init_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_init_dspA PROC
;;;54     
;;;55     void algorithm_init_dspA(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	ptModuleModeConf = module_GetModeConfig();
000002  f7fffffe          BL       module_GetModeConfig
000006  4c09              LDR      r4,|L12.44|
;;;58     	thisModeConf     = algorithm_GetModeConfig();
000008  60a0              STR      r0,[r4,#8]  ; ptModuleModeConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;59     	thisInfo         = algorithm_GetInfo();
00000e  60e0              STR      r0,[r4,#0xc]  ; thisModeConf
000010  f7fffffe          BL       algorithm_GetInfo
;;;60     	memset(LINEFILTERBUFST1, 0, sizeof(LINEFILTERBUFST1));
000014  6060              STR      r0,[r4,#4]  ; thisInfo
000016  4806              LDR      r0,|L12.48|
000018  2100              MOVS     r1,#0
00001a  6001              STR      r1,[r0,#0]  ; DspA_LF_ArrayS32_1
00001c  6041              STR      r1,[r0,#4]  ; DspA_LF_ArrayS32_1
00001e  6081              STR      r1,[r0,#8]  ; DspA_LF_ArrayS32_1
000020  60c1              STR      r1,[r0,#0xc]  ; DspA_LF_ArrayS32_1
000022  6101              STR      r1,[r0,#0x10]  ; DspA_LF_ArrayS32_1
000024  6141              STR      r1,[r0,#0x14]  ; DspA_LF_ArrayS32_1
000026  6181              STR      r1,[r0,#0x18]  ; DspA_LF_ArrayS32_1
000028  61c1              STR      r1,[r0,#0x1c]  ; DspA_LF_ArrayS32_1
;;;61     	
;;;62     //#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN))
;;;63     //	BaseAddr_Finger = (uint32_t)&BASELINEIMAGE[0][0];
;;;64     //#else 
;;;65     //	BaseAddr_Finger = (uint32_t)&BASELINEIMAGE_2[0][0];
;;;66     //#endif 
;;;67     }
00002a  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  |L12.44|
                          DCD      ||.data||
                  |L12.48|
                          DCD      DspA_LF_ArrayS32_1

                          AREA ||i.algorithm_init_param_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_init_param_dspA PROC
;;;68     
;;;69     void algorithm_init_param_dspA(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71     	thisModeConf     = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c03              LDR      r4,|L13.20|
;;;72     	ptModuleModeConf = module_GetModeConfig();
000008  60e0              STR      r0,[r4,#0xc]  ; thisModeConf
00000a  f7fffffe          BL       module_GetModeConfig
00000e  60a0              STR      r0,[r4,#8]  ; ptModuleModeConf
;;;73     //#if (USED_DSPA_FUNC_FOR_PEN_LOCAL || USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_FINGER)
;;;74     //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;75     //	if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;76     //	{
;;;77     //		BaseAddr_Finger = (uint32_t)&BASELINEIMAGE[0][0];
;;;78     //	}
;;;79     //	else
;;;80     //	{
;;;81     //		BaseAddr_Finger = (uint32_t)&BASELINEIMAGE_2[0][0];
;;;82     //	}
;;;83     //#endif
;;;84     //#endif
;;;85     }
000010  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      ||.data||

                          AREA ||i.algorithm_local_mode_calculate_delta_loop_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_local_mode_calculate_delta_loop_dspA PROC
;;;623    
;;;624    void algorithm_local_mode_calculate_delta_loop_dspA(uint8_t cs, uint8_t ce, uint8_t mode, bool_t MuxSum)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;625    {
000004  b097              SUB      sp,sp,#0x5c
000006  4699              MOV      r9,r3
000008  4680              MOV      r8,r0
;;;626    	uint32_t Dst_Addr;
;;;627    	bool_t get_val_1st=0,get_val_2nd=0,LocalCol=1;
00000a  2300              MOVS     r3,#0
00000c  2601              MOVS     r6,#1
;;;628    	
;;;629    	if(mode == LOCAL_SEARCH_MODE)
;;;630    	{
;;;631    		Dst_Addr = (uint32_t)&LOCALDELTAIMAGE[0][0];
00000e  489a              LDR      r0,|L14.632|
000010  4615              MOV      r5,r2                 ;625
000012  460f              MOV      r7,r1                 ;625
000014  9315              STR      r3,[sp,#0x54]         ;629
000016  9014              STR      r0,[sp,#0x50]         ;629
000018  2a04              CMP      r2,#4                 ;629
00001a  bf04              ITT      EQ                    ;629
00001c  4682              MOVEQ    r10,r0                ;629
;;;632    		LocalCol = 0;
00001e  2600              MOVEQ    r6,#0
000020  d007              BEQ      |L14.50|
;;;633    	}
;;;634    	else if(mode == LOCAL_HOVER_MODE)
000022  2d03              CMP      r5,#3
;;;635    	{
;;;636    		Dst_Addr = (uint32_t)&DSPATMPDELTA[0][0];
000024  bf08              IT       EQ
000026  f8dfa254          LDREQ    r10,|L14.636|
00002a  d002              BEQ      |L14.50|
;;;637    	}
;;;638    	else if(mode == LOCAL_MODE)	
00002c  2d01              CMP      r5,#1
00002e  f00080ed          BEQ.W    |L14.524|
                  |L14.50|
;;;639    	{
;;;640    		get_val_1st = !MuxSum;
;;;641    		get_val_2nd = 1;
;;;642    #if (PAD_ > 0)	
;;;643    		Dst_Addr = (uint32_t)&DSPATMPDELTA[0][0];		
;;;644    #else
;;;645    		Dst_Addr = (uint32_t)&LOCALDELTAIMAGE[0][0];
;;;646    #endif	
;;;647    	}	
;;;648    
;;;649    	DSPA_CalculateDelta_Process(
000032  2100              MOVS     r1,#0
000034  f8dfc248          LDR      r12,|L14.640|
000038  2005              MOVS     r0,#5
00003a  e9cd0110          STRD     r0,r1,[sp,#0x40]
00003e  9112              STR      r1,[sp,#0x48]
000040  9113              STR      r1,[sp,#0x4c]
000042  f8dc000c          LDR      r0,[r12,#0xc]  ; thisModeConf
000046  4c8f              LDR      r4,|L14.644|
000048  f8b0206d          LDRH     r2,[r0,#0x6d]
00004c  2001              MOVS     r0,#1
00004e  9008              STR      r0,[sp,#0x20]
000050  e9cd280c          STRD     r2,r8,[sp,#0x30]
000054  940b              STR      r4,[sp,#0x2c]
000056  e9cd0209          STRD     r0,r2,[sp,#0x24]
00005a  e9cd760e          STRD     r7,r6,[sp,#0x38]
00005e  f8dc2008          LDR      r2,[r12,#8]  ; ptModuleModeConf
000062  7892              LDRB     r2,[r2,#2]
000064  e9cd3004          STRD     r3,r0,[sp,#0x10]
000068  e9cd0206          STRD     r0,r2,[sp,#0x18]
00006c  9000              STR      r0,[sp,#0]
00006e  e9cd0101          STRD     r0,r1,[sp,#4]
000072  9103              STR      r1,[sp,#0xc]
000074  e9dc1005          LDRD     r1,r0,[r12,#0x14]
000078  4653              MOV      r3,r10
00007a  2200              MOVS     r2,#0
00007c  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;650    		BaseAddr, RawAddr, 0, Dst_Addr,																		//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;651    		WITHCOEF,SUBTRACTION, 0,0,get_val_1st, 1,1,(ptModuleModeConf->ucLocalOvrShift), HALFWORD,HALFWORD,  //CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;652    		(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;653    		cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                  		//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;654    			
;;;655    	if(MuxSum)
000080  f1b90f00          CMP      r9,#0
000084  d04d              BEQ      |L14.290|
;;;656    	{
;;;657    		DSPA_CalculateDelta_Process(
000086  2005              MOVS     r0,#5
000088  2400              MOVS     r4,#0
00008a  9010              STR      r0,[sp,#0x40]
00008c  e9cd9411          STRD     r9,r4,[sp,#0x44]
000090  f8dfb1ec          LDR      r11,|L14.640|
000094  9413              STR      r4,[sp,#0x4c]
000096  f04f0901          MOV      r9,#1
00009a  f8db000c          LDR      r0,[r11,#0xc]  ; thisModeConf
00009e  4979              LDR      r1,|L14.644|
0000a0  4b79              LDR      r3,|L14.648|
0000a2  f8b0006d          LDRH     r0,[r0,#0x6d]
0000a6  f8cd9020          STR      r9,[sp,#0x20]
0000aa  f8cd9024          STR      r9,[sp,#0x24]
0000ae  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000b2  e9cd080c          STRD     r0,r8,[sp,#0x30]
0000b6  e9cd760e          STRD     r7,r6,[sp,#0x38]
0000ba  f8db0008          LDR      r0,[r11,#8]  ; ptModuleModeConf
0000be  2200              MOVS     r2,#0
0000c0  7880              LDRB     r0,[r0,#2]
0000c2  e9cd4904          STRD     r4,r9,[sp,#0x10]
0000c6  e9cd9006          STRD     r9,r0,[sp,#0x18]
0000ca  f8cd9000          STR      r9,[sp,#0]
0000ce  e9cd9401          STRD     r9,r4,[sp,#4]
0000d2  9403              STR      r4,[sp,#0xc]
0000d4  e9db0107          LDRD     r0,r1,[r11,#0x1c]
0000d8  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;658    			BaseAddr_MuxSum, RawAddr_MuxSum, 0, (uint32_t)&DSPATMPDELTA[PEN_COORD_ROW_MAX][0],					//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;659    			WITHCOEF,SUBTRACTION, 0,0,0, 1,1,(ptModuleModeConf->ucLocalOvrShift), HALFWORD,HALFWORD,         	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;660    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;661    			cs,ce, LocalCol, PEN_COORD_ROW_MAX,MuxSum, 0, 0);                                                   //cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;662    		
;;;663    		DSPA_CalculateDelta_Process(
0000dc  2005              MOVS     r0,#5
0000de  e9cd0410          STRD     r0,r4,[sp,#0x40]
0000e2  9412              STR      r4,[sp,#0x48]
0000e4  9413              STR      r4,[sp,#0x4c]
0000e6  f8db000c          LDR      r0,[r11,#0xc]  ; thisModeConf
0000ea  4966              LDR      r1,|L14.644|
0000ec  4653              MOV      r3,r10
0000ee  f8b0006d          LDRH     r0,[r0,#0x6d]
0000f2  f8cd9020          STR      r9,[sp,#0x20]
0000f6  e9cd080c          STRD     r0,r8,[sp,#0x30]
0000fa  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000fe  f8cd9024          STR      r9,[sp,#0x24]
000102  e9cd760e          STRD     r7,r6,[sp,#0x38]
000106  9815              LDR      r0,[sp,#0x54]
000108  e9cd0404          STRD     r0,r4,[sp,#0x10]
00010c  9406              STR      r4,[sp,#0x18]
00010e  9407              STR      r4,[sp,#0x1c]
000110  9400              STR      r4,[sp,#0]
000112  9401              STR      r4,[sp,#4]
000114  9402              STR      r4,[sp,#8]
000116  2200              MOVS     r2,#0
000118  495b              LDR      r1,|L14.648|
00011a  4618              MOV      r0,r3
00011c  9403              STR      r4,[sp,#0xc]
00011e  f7fffffe          BL       DSPA_CalculateDelta_Process
                  |L14.290|
;;;664    			Dst_Addr, (uint32_t)&DSPATMPDELTA[PEN_COORD_ROW_MAX][0], 0, Dst_Addr, 								//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;665    			0,ADDER, 0,0,get_val_2nd, 0,0,0, HALFWORD,HALFWORD,                                             	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;666    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;667    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                       //cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;668    	}
;;;669    
;;;670    	if(mode == LOCAL_SEARCH_MODE)
000122  2d04              CMP      r5,#4
000124  d07c              BEQ      |L14.544|
000126  20a0              MOVS     r0,#0xa0
000128  9000              STR      r0,[sp,#0]
00012a  2d03              CMP      r5,#3
00012c  bf04              ITT      EQ
00012e  4c53              LDREQ    r4,|L14.636|
000130  4856              LDREQ    r0,|L14.652|
000132  d069              BEQ      |L14.520|
000134  2d01              CMP      r5,#1
000136  bf04              ITT      EQ
000138  4c50              LDREQ    r4,|L14.636|
00013a  9814              LDREQ    r0,[sp,#0x50]
00013c  d064              BEQ      |L14.520|
00013e  4c54              LDR      r4,|L14.656|
000140  4854              LDR      r0,|L14.660|
000142  f04f092d          MOV      r9,#0x2d
000146  bf00              NOP      
                  |L14.328|
000148  f1000ba6          ADD      r11,r0,#0xa6
00014c  f04f0a00          MOV      r10,#0
000150  f1b90f00          CMP      r9,#0
000154  d90d              BLS      |L14.370|
                  |L14.342|
000156  4621              MOV      r1,r4
000158  4658              MOV      r0,r11
00015a  9a00              LDR      r2,[sp,#0]
00015c  f7fffffe          BL       __aeabi_memcpy
000160  f10a0001          ADD      r0,r10,#1
000164  fa1ffa80          UXTH     r10,r0
000168  34a0              ADDS     r4,r4,#0xa0
00016a  f10b0ba4          ADD      r11,r11,#0xa4
00016e  45d1              CMP      r9,r10
000170  d8f1              BHI      |L14.342|
                  |L14.370|
;;;671    	{
;;;672    		//Pen_Detection_Acc_Process
;;;673    		DSPA_CalculateDelta_Process(
;;;674    			(uint32_t)(&g_pFullHoverImage[currentRowStart*COL_MAX]), (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)(&g_pFullHoverImage[currentRowStart*COL_MAX]),	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;675    			0,ADDER, 0,0,1, 0,0,0, HALFWORD,HALFWORD,                                                                                                           //CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;676    			(int32_t)thisModeConf->Label.usLocalSeedBase,thisModeConf->BaseLine.sAccumNegSumThd,(int32_t)thisModeConf->Label.usLocalSeedBase,                                              		//PosTH,NegTH,GroupTH 
;;;677    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                                                                    	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;678    	}	
;;;679    #if (PAD_ > 0)
;;;680    	else
;;;681    		algorithm_delta_padding(mode);
;;;682    #endif
;;;683    	
;;;684    	if(mode == LOCAL_HOVER_MODE)
000172  2d03              CMP      r5,#3
;;;685    	{
;;;686    		uint16_t hover_weight = 0;
;;;687    		if(thisModeConf->Label.ucHoverOutCheckFrm < 6)
;;;688    			hover_weight = thisModeConf->Label.ucHoverOutCheckFrm/2;
;;;689    		else if(thisModeConf->Label.ucHoverOutCheckFrm < 8)
;;;690    			hover_weight = 2;
;;;691    		else if(thisModeConf->Label.ucHoverOutCheckFrm < 16)
;;;692    			hover_weight = 3;
;;;693    		else 
;;;694    			hover_weight = 4;
;;;695    
;;;696    #if (PAD_ > 0)		
;;;697    		DSPA_CalculateDelta_Process(
;;;698    			(uint32_t)&DSPATMPDELTA_PAD[0][0], (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)&LOCALDELTAIMAGE[0][0], 	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;699    			1,ADDER, 0,0,1, 1<<hover_weight,(1<<hover_weight)-1,(uint8_t)hover_weight, HALFWORD,HALFWORD,         		//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;700    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,       		//PosTH,NegTH,GroupTH 
;;;701    			cs+PAD_,ce+PAD_, LocalCol, PEN_COORD_ROW_MAX, 0, 1, 0);                                                  	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;702    #else
;;;703    		DSPA_CalculateDelta_Process(
;;;704    			(uint32_t)&DSPATMPDELTA[0][0], (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)&LOCALDELTAIMAGE[0][0], 		//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;705    			1,ADDER, 0,0,1, 1<<hover_weight,(1<<hover_weight)-1,(uint8_t)hover_weight, HALFWORD,HALFWORD,         	 	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;706    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,       		//PosTH,NegTH,GroupTH 
;;;707    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                             	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;708    #endif
;;;709    	}
;;;710    }
000174  bf1c              ITT      NE
000176  b017              ADDNE    sp,sp,#0x5c
000178  e8bd8ff0          POPNE    {r4-r11,pc}
00017c  4840              LDR      r0,|L14.640|
00017e  68c3              LDR      r3,[r0,#0xc]          ;687  ; thisModeConf
000180  f893007f          LDRB     r0,[r3,#0x7f]         ;687
000184  2806              CMP      r0,#6                 ;687
000186  bf38              IT       CC                    ;688
000188  0840              LSRCC    r0,r0,#1              ;688
00018a  d307              BCC      |L14.412|
00018c  2808              CMP      r0,#8                 ;689
00018e  bf38              IT       CC                    ;690
000190  2002              MOVCC    r0,#2                 ;690
000192  d303              BCC      |L14.412|
000194  2810              CMP      r0,#0x10              ;691
000196  bf34              ITE      CC                    ;692
000198  2003              MOVCC    r0,#3                 ;692
00019a  2004              MOVCS    r0,#4                 ;694
                  |L14.412|
00019c  2200              MOVS     r2,#0                 ;697
00019e  f04f0c05          MOV      r12,#5                ;697
0001a2  f8cdc040          STR      r12,[sp,#0x40]        ;697
0001a6  2101              MOVS     r1,#1                 ;697
0001a8  e9cd2111          STRD     r2,r1,[sp,#0x44]      ;697
0001ac  9213              STR      r2,[sp,#0x4c]         ;697
0001ae  f8b3306d          LDRH     r3,[r3,#0x6d]         ;697
0001b2  f1070c01          ADD      r12,r7,#1             ;697
0001b6  f1080401          ADD      r4,r8,#1              ;697
0001ba  f00c0cff          AND      r12,r12,#0xff         ;697
0001be  b2e4              UXTB     r4,r4                 ;697
0001c0  960f              STR      r6,[sp,#0x3c]         ;697
0001c2  930c              STR      r3,[sp,#0x30]         ;697
0001c4  e9cd4c0d          STRD     r4,r12,[sp,#0x34]     ;697
0001c8  f8dfc0b8          LDR      r12,|L14.644|
0001cc  f8cdc02c          STR      r12,[sp,#0x2c]        ;697
0001d0  9108              STR      r1,[sp,#0x20]         ;697
0001d2  e9cd1309          STRD     r1,r3,[sp,#0x24]      ;697
0001d6  fa01f300          LSL      r3,r1,r0              ;697
0001da  f1a30c01          SUB      r12,r3,#1             ;697
0001de  b29b              UXTH     r3,r3                 ;697
0001e0  e9cd1304          STRD     r1,r3,[sp,#0x10]      ;697
0001e4  e9cd1200          STRD     r1,r2,[sp,#0]         ;697
0001e8  fa1ffc8c          UXTH     r12,r12               ;697
0001ec  9202              STR      r2,[sp,#8]            ;697
0001ee  e9cdc006          STRD     r12,r0,[sp,#0x18]     ;697
0001f2  9b14              LDR      r3,[sp,#0x50]         ;697
0001f4  4825              LDR      r0,|L14.652|
0001f6  9203              STR      r2,[sp,#0xc]          ;697
0001f8  4619              MOV      r1,r3                 ;697
0001fa  bf00              NOP                            ;697
                  |L14.508|
0001fc  f7fffffe          BL       DSPA_CalculateDelta_Process
000200  b017              ADD      sp,sp,#0x5c
000202  e8bd8ff0          POP      {r4-r11,pc}
000206  e00b              B        |L14.544|
                  |L14.520|
000208  e033              B        |L14.626|
00020a  bf00              NOP                            ;640
                  |L14.524|
00020c  f1b90f00          CMP      r9,#0                 ;640
000210  bf14              ITE      NE                    ;640
000212  2300              MOVNE    r3,#0                 ;640
000214  2301              MOVEQ    r3,#1                 ;640
000216  2001              MOVS     r0,#1                 ;641
000218  f8dfa060          LDR      r10,|L14.636|
00021c  9015              STR      r0,[sp,#0x54]         ;640
00021e  e708              B        |L14.50|
                  |L14.544|
000220  2000              MOVS     r0,#0                 ;673
000222  2105              MOVS     r1,#5                 ;673
000224  e9cd1010          STRD     r1,r0,[sp,#0x40]      ;673
000228  4b15              LDR      r3,|L14.640|
00022a  9012              STR      r0,[sp,#0x48]         ;673
00022c  9013              STR      r0,[sp,#0x4c]         ;673
00022e  68da              LDR      r2,[r3,#0xc]          ;673  ; thisModeConf
000230  f8b2106d          LDRH     r1,[r2,#0x6d]         ;673
000234  e9cd180c          STRD     r1,r8,[sp,#0x30]      ;673
000238  e9cd760e          STRD     r7,r6,[sp,#0x38]      ;673
00023c  f9b2c00b          LDRSH    r12,[r2,#0xb]         ;673
000240  2201              MOVS     r2,#1                 ;673
000242  f8cdc02c          STR      r12,[sp,#0x2c]        ;673
000246  9208              STR      r2,[sp,#0x20]         ;673
000248  e9cd2109          STRD     r2,r1,[sp,#0x24]      ;673
00024c  e9cd2004          STRD     r2,r0,[sp,#0x10]      ;673
000250  9006              STR      r0,[sp,#0x18]         ;673
000252  9007              STR      r0,[sp,#0x1c]         ;673
000254  9000              STR      r0,[sp,#0]            ;673
000256  9001              STR      r0,[sp,#4]            ;673
000258  9002              STR      r0,[sp,#8]            ;673
00025a  9003              STR      r0,[sp,#0xc]          ;673
00025c  480e              LDR      r0,|L14.664|
00025e  6a99              LDR      r1,[r3,#0x28]         ;673  ; g_pFullHoverImage
000260  2200              MOVS     r2,#0                 ;673
000262  8800              LDRH     r0,[r0,#0]            ;673  ; currentRowStart
000264  eb000080          ADD      r0,r0,r0,LSL #2       ;673
000268  eb011340          ADD      r3,r1,r0,LSL #5       ;673
00026c  4618              MOV      r0,r3                 ;673
00026e  9914              LDR      r1,[sp,#0x50]         ;673
000270  e7c4              B        |L14.508|
                  |L14.626|
000272  f04f0905          MOV      r9,#5                 ;673
000276  e767              B        |L14.328|
;;;711    
                          ENDP

                  |L14.632|
                          DCD      LocalSharedBuff+0x44c0
                  |L14.636|
                          DCD      DspA_TmpDelta
                  |L14.640|
                          DCD      ||.data||
                  |L14.644|
                          DCD      0xfffffe0c
                  |L14.648|
                          DCD      DspA_TmpDelta+0x320
                  |L14.652|
                          DCD      DspA_TmpDelta_Pad
                  |L14.656|
                          DCD      DspA_TmpDelta_Finger
                  |L14.660|
                          DCD      FullSharedBuff+0xc8d8
                  |L14.664|
                          DCD      currentRowStart

                          AREA ||i.alogorithm_dspA_get_addr||, CODE, READONLY, ALIGN=2

                  alogorithm_dspA_get_addr PROC
;;;581    
;;;582    void alogorithm_dspA_get_addr(uint8_t mode)
000000  e92d03f0          PUSH     {r4-r9}
;;;583    {
;;;584    	raw_idx = base_idx = 0;
000004  492c              LDR      r1,|L15.184|
000006  2700              MOVS     r7,#0
;;;585    	if(thisModeConf->BaseLine.ucPP_MUX_Select)
;;;586    	{
;;;587    		raw_idx = PEN_COORD_ROW_MAX;
000008  2605              MOVS     r6,#5
00000a  704f              STRB     r7,[r1,#1]            ;584
00000c  700f              STRB     r7,[r1,#0]            ;584
00000e  68ca              LDR      r2,[r1,#0xc]          ;585  ; thisModeConf
;;;588    		if(thisModeConf->BaseLine.bPen_2BASE)base_idx = ROW_MAX;
000010  242d              MOVS     r4,#0x2d
000012  f8928042          LDRB     r8,[r2,#0x42]         ;585
000016  f1b80f00          CMP      r8,#0                 ;585
00001a  d005              BEQ      |L15.40|
00001c  700e              STRB     r6,[r1,#0]            ;587
00001e  f892303e          LDRB     r3,[r2,#0x3e]
000022  2b00              CMP      r3,#0
000024  bf18              IT       NE
000026  704c              STRBNE   r4,[r1,#1]
                  |L15.40|
;;;589    	}
;;;590    
;;;591    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;592    	RawAddr = (uint32_t)&LOCALDATARAW_3[0][0]+((raw_idx*COL_MAX)<<1);	
;;;593    #else
;;;594    	RawAddr = (uint32_t)&LOCALRAWIMAGE[0][0]+((raw_idx*COL_MAX)<<1);
000028  780b              LDRB     r3,[r1,#0]  ; raw_idx
00002a  4d24              LDR      r5,|L15.188|
00002c  eb030383          ADD      r3,r3,r3,LSL #2
000030  eb051343          ADD      r3,r5,r3,LSL #5
;;;595    #endif
;;;596    	BaseAddr = (uint32_t)(&g_pLocalBaseImage[0])+(((currentRowStart+base_idx)*COL_MAX)<<1);	
000034  614b              STR      r3,[r1,#0x14]  ; RawAddr
000036  4b22              LDR      r3,|L15.192|
000038  f8b3c000          LDRH     r12,[r3,#0]  ; currentRowStart
00003c  784b              LDRB     r3,[r1,#1]  ; base_idx
00003e  4463              ADD      r3,r3,r12
000040  eb030983          ADD      r9,r3,r3,LSL #2
000044  6a4b              LDR      r3,[r1,#0x24]  ; g_pLocalBaseImage
000046  eb031949          ADD      r9,r3,r9,LSL #5
;;;597    	
;;;598    	if( (thisModeConf->BaseLine.b2MUX_SUM_LocalMode == YES && mode!=LOCAL_SEARCH_MODE) || (thisModeConf->BaseLine.b2MUX_SUM_LocalSearchMode == YES && mode==LOCAL_SEARCH_MODE) )
00004a  f8c19018          STR      r9,[r1,#0x18]  ; BaseAddr
00004e  f892903d          LDRB     r9,[r2,#0x3d]
000052  f1b90f01          CMP      r9,#1
000056  d00e              BEQ      |L15.118|
000058  f892903c          LDRB     r9,[r2,#0x3c]
00005c  f1b90f01          CMP      r9,#1
000060  bf0e              ITEE     EQ
000062  2804              CMPEQ    r0,#4
;;;599    	{
;;;600    		raw_idx_MuxSum = base_idx_MuxSum = 0;
;;;601    		if(thisModeConf->BaseLine.ucPP_MUX_Select == 0)
;;;602    		{
;;;603    			raw_idx_MuxSum = PEN_COORD_ROW_MAX;
;;;604    			if(thisModeConf->BaseLine.bPen_2BASE)base_idx_MuxSum = ROW_MAX;
;;;605    		}
;;;606    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;607    		RawAddr_MuxSum = (uint32_t)&LOCALDATARAW_3[0][0]+((raw_idx_MuxSum*COL_MAX)<<1);	
;;;608    #else		
;;;609    		RawAddr_MuxSum = (uint32_t)&LOCALRAWIMAGE[0][0]+((raw_idx_MuxSum*COL_MAX)<<1);
;;;610    #endif
;;;611    		BaseAddr_MuxSum = (uint32_t)(&g_pLocalBaseImage[0])+(((currentRowStart+base_idx_MuxSum)*COL_MAX)<<1);
;;;612    	}
;;;613    }
000064  e8bd03f0          POPNE    {r4-r9}
000068  4770              BXNE     lr
                  |L15.106|
00006a  70cf              STRB     r7,[r1,#3]            ;600
00006c  708f              STRB     r7,[r1,#2]            ;600
00006e  f1b80f00          CMP      r8,#0                 ;601
000072  d111              BNE      |L15.152|
000074  e00a              B        |L15.140|
                  |L15.118|
000076  2804              CMP      r0,#4                 ;598
000078  d1f7              BNE      |L15.106|
00007a  f892903c          LDRB     r9,[r2,#0x3c]         ;598
00007e  f1b90f01          CMP      r9,#1                 ;598
000082  bf1c              ITT      NE
000084  e8bd03f0          POPNE    {r4-r9}
000088  4770              BXNE     lr
00008a  e7ee              B        |L15.106|
                  |L15.140|
00008c  708e              STRB     r6,[r1,#2]            ;603
00008e  f892003e          LDRB     r0,[r2,#0x3e]         ;604
000092  2800              CMP      r0,#0                 ;604
000094  bf18              IT       NE                    ;604
000096  70cc              STRBNE   r4,[r1,#3]            ;604
                  |L15.152|
000098  7888              LDRB     r0,[r1,#2]            ;609  ; raw_idx_MuxSum
00009a  eb000080          ADD      r0,r0,r0,LSL #2       ;609
00009e  eb051040          ADD      r0,r5,r0,LSL #5       ;609
0000a2  6208              STR      r0,[r1,#0x20]         ;611  ; RawAddr_MuxSum
0000a4  78c8              LDRB     r0,[r1,#3]            ;611  ; base_idx_MuxSum
0000a6  4460              ADD      r0,r0,r12             ;611
0000a8  eb000080          ADD      r0,r0,r0,LSL #2       ;611
0000ac  eb031040          ADD      r0,r3,r0,LSL #5       ;611
0000b0  61c8              STR      r0,[r1,#0x1c]         ;611  ; BaseAddr_MuxSum
0000b2  e8bd03f0          POP      {r4-r9}
0000b6  4770              BX       lr
;;;614    
                          ENDP

                  |L15.184|
                          DCD      ||.data||
                  |L15.188|
                          DCD      LocalSharedBuff
                  |L15.192|
                          DCD      currentRowStart

                          AREA ||i.alogorithm_linefilter_dspA||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_dspA PROC
;;;513    extern int16_t sLFOffsetRow[ROW_MAX];
;;;514    void alogorithm_linefilter_dspA(uint32_t RAW_ADDR,uint32_t BASE_ADDR, uint32_t TmpDeltaAddr, uint32_t LF_BUF2_ADDR , uint32_t LF_BUF3_ADDR, uint8_t row_max, int32_t PosTHD,int32_t NegTHD, bool_t mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;515    {	
000004  b095              SUB      sp,sp,#0x54
;;;516    	DSPA_CalculateDelta_Process(
000006  2400              MOVS     r4,#0
000008  9823              LDR      r0,[sp,#0x8c]
00000a  f04f0803          MOV      r8,#3
00000e  e9cd4812          STRD     r4,r8,[sp,#0x48]
000012  f8ddb094          LDR      r11,[sp,#0x94]
000016  e9cd0410          STRD     r0,r4,[sp,#0x40]
00001a  f44f76fa          MOV      r6,#0x1f4
00001e  f04f0950          MOV      r9,#0x50
000022  e9cd640c          STRD     r6,r4,[sp,#0x30]
000026  e9cd940e          STRD     r9,r4,[sp,#0x38]
00002a  f1c60a00          RSB      r10,r6,#0
00002e  2501              MOVS     r5,#1
000030  f8cda02c          STR      r10,[sp,#0x2c]
000034  9508              STR      r5,[sp,#0x20]
000036  9404              STR      r4,[sp,#0x10]
000038  9405              STR      r4,[sp,#0x14]
00003a  9406              STR      r4,[sp,#0x18]
00003c  9407              STR      r4,[sp,#0x1c]
00003e  e9cd5609          STRD     r5,r6,[sp,#0x24]
000042  e9cd4500          STRD     r4,r5,[sp,#0]
000046  9403              STR      r4,[sp,#0xc]
000048  9402              STR      r4,[sp,#8]
00004a  2200              MOVS     r2,#0
00004c  9b17              LDR      r3,[sp,#0x5c]
00004e  9815              LDR      r0,[sp,#0x54]
000050  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;517    		RAW_ADDR, BASE_ADDR, 0, TmpDeltaAddr,				//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  	
;;;518    		0, SUBTRACTION, 0,0,0, 0,0,0, HALFWORD,HALFWORD,	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;519    		500,-500,500,                      					//PosTH,NegTH,GroupTH 
;;;520    		0,COL_MAX, 0, row_max, 0, 0, 3);      				//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode	
;;;521    	
;;;522    	int i,j,row_size;
;;;523    	for(i=0; i<row_max; i+=8)
000054  9823              LDR      r0,[sp,#0x8c]
000056  2700              MOVS     r7,#0
000058  2800              CMP      r0,#0
00005a  bfc7              ITTEE    GT
00005c  3808              SUBGT    r0,r0,#8
;;;524    	{
;;;525    		uint32_t AddrOffset = (i*COL_MAX)<<1;
;;;526    		if(i > row_max-8)row_size = row_max-i;
00005e  9014              STRGT    r0,[sp,#0x50]
;;;527    		else row_size = 8;
;;;528    		
;;;529    		DSPA_LineFilter_2nd_Stage(TmpDeltaAddr,LF_BUF2_ADDR,LF_BUF3_ADDR,((i*COL_MAX)<<1),row_size,PosTHD,NegTHD);
;;;530    
;;;531    		DSPA_CalculateDelta_Process(
;;;532    			RAW_ADDR+AddrOffset, LF_BUF3_ADDR, 0, RAW_ADDR+AddrOffset, 	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;533    			0, SUBTRACTION, 1,0,0, 0,0,0, WORD,HALFWORD,          		//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;534    			500,-500,500,                      							//PosTH,NegTH,GroupTH 
;;;535    			0,COL_MAX, 0, row_size, 0, 0, 3);      						//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;536    		
;;;537    		if(mode == 0)
;;;538    			for(j=0;j<row_size;j++)
;;;539    				sLFOffsetRow[i+j] = LINEFILTERBUFST3_Finger[j];
;;;540    	}
;;;541    }
000060  b019              ADDLE    sp,sp,#0x64
000062  e8bd8ff0          POPLE    {r4-r11,pc}
000066  bf00              NOP                            ;525
                  |L16.104|
000068  9914              LDR      r1,[sp,#0x50]         ;526
00006a  eb070087          ADD      r0,r7,r7,LSL #2       ;525
00006e  ea4f1a40          LSL      r10,r0,#5             ;525
000072  428f              CMP      r7,r1                 ;526
000074  bfc6              ITTE     GT                    ;526
000076  9923              LDRGT    r1,[sp,#0x8c]         ;526
000078  eba10907          SUBGT    r9,r1,r7              ;526
00007c  f04f0908          MOVLE    r9,#8                 ;527
000080  f0090cff          AND      r12,r9,#0xff          ;529
000084  e9dd2117          LDRD     r2,r1,[sp,#0x5c]      ;529
000088  2600              MOVS     r6,#0                 ;529
00008a  9d22              LDR      r5,[sp,#0x88]         ;529
00008c  9b24              LDR      r3,[sp,#0x90]         ;529
00008e  600e              STR      r6,[r1,#0]            ;529
000090  604e              STR      r6,[r1,#4]            ;529
000092  608e              STR      r6,[r1,#8]            ;529
000094  60ce              STR      r6,[r1,#0xc]          ;529
000096  610e              STR      r6,[r1,#0x10]         ;529
000098  614e              STR      r6,[r1,#0x14]         ;529
00009a  618e              STR      r6,[r1,#0x18]         ;529
00009c  61ce              STR      r6,[r1,#0x1c]         ;529
00009e  602e              STR      r6,[r5,#0]            ;529
0000a0  606e              STR      r6,[r5,#4]            ;529
0000a2  60ae              STR      r6,[r5,#8]            ;529
0000a4  60ee              STR      r6,[r5,#0xc]          ;529
0000a6  612e              STR      r6,[r5,#0x10]         ;529
0000a8  616e              STR      r6,[r5,#0x14]         ;529
0000aa  61ae              STR      r6,[r5,#0x18]         ;529
0000ac  61ee              STR      r6,[r5,#0x1c]         ;529
0000ae  f04f0803          MOV      r8,#3                 ;529
0000b2  e9cdc610          STRD     r12,r6,[sp,#0x40]     ;529
0000b6  e9cd6812          STRD     r6,r8,[sp,#0x48]      ;529
0000ba  f04f0c50          MOV      r12,#0x50             ;529
0000be  e9cdc60e          STRD     r12,r6,[sp,#0x38]     ;529
0000c2  f44f78fa          MOV      r8,#0x1f4             ;529
0000c6  e9cd860c          STRD     r8,r6,[sp,#0x30]      ;529
0000ca  9605              STR      r6,[sp,#0x14]         ;529
0000cc  9606              STR      r6,[sp,#0x18]         ;529
0000ce  e9cd3b0a          STRD     r3,r11,[sp,#0x28]     ;529
0000d2  f04f0c02          MOV      r12,#2                ;529
0000d6  9604              STR      r6,[sp,#0x10]         ;529
0000d8  f8cdc020          STR      r12,[sp,#0x20]        ;529
0000dc  f04f0801          MOV      r8,#1                 ;529
0000e0  f8cdc024          STR      r12,[sp,#0x24]        ;529
0000e4  9607              STR      r6,[sp,#0x1c]         ;529
0000e6  2306              MOVS     r3,#6                 ;529
0000e8  9600              STR      r6,[sp,#0]            ;529
0000ea  e9cd3801          STRD     r3,r8,[sp,#4]         ;529
0000ee  eb02000a          ADD      r0,r2,r10             ;529
0000f2  460c              MOV      r4,r1                 ;529
0000f4  460b              MOV      r3,r1                 ;529
0000f6  4a4a              LDR      r2,|L16.544|
0000f8  f8cd800c          STR      r8,[sp,#0xc]          ;529
0000fc  f7fffffe          BL       DSPA_CalculateDelta_Process
000100  4848              LDR      r0,|L16.548|
000102  6822              LDR      r2,[r4,#0]            ;529
000104  6d01              LDR      r1,[r0,#0x50]         ;529
000106  b209              SXTH     r1,r1                 ;529
000108  2900              CMP      r1,#0                 ;529
00010a  bf18              IT       NE                    ;529
00010c  fb92f1f1          SDIVNE   r1,r2,r1              ;529
000110  6029              STR      r1,[r5,#0]            ;529
000112  6862              LDR      r2,[r4,#4]            ;529
000114  6d01              LDR      r1,[r0,#0x50]         ;529
000116  1409              ASRS     r1,r1,#16             ;529
000118  bf18              IT       NE                    ;529
00011a  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00011e  6069              STR      r1,[r5,#4]            ;529
000120  68a2              LDR      r2,[r4,#8]            ;529
000122  6d41              LDR      r1,[r0,#0x54]         ;529
000124  b209              SXTH     r1,r1                 ;529
000126  2900              CMP      r1,#0                 ;529
000128  bf18              IT       NE                    ;529
00012a  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00012e  60a9              STR      r1,[r5,#8]            ;529
000130  68e2              LDR      r2,[r4,#0xc]          ;529
000132  6d41              LDR      r1,[r0,#0x54]         ;529
000134  1409              ASRS     r1,r1,#16             ;529
000136  bf18              IT       NE                    ;529
000138  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00013c  60e9              STR      r1,[r5,#0xc]          ;529
00013e  6922              LDR      r2,[r4,#0x10]         ;529
000140  6d81              LDR      r1,[r0,#0x58]         ;529
000142  b209              SXTH     r1,r1                 ;529
000144  2900              CMP      r1,#0                 ;529
000146  bf18              IT       NE                    ;529
000148  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00014c  6129              STR      r1,[r5,#0x10]         ;529
00014e  6962              LDR      r2,[r4,#0x14]         ;529
000150  6d81              LDR      r1,[r0,#0x58]         ;529
000152  1409              ASRS     r1,r1,#16             ;529
000154  bf18              IT       NE                    ;529
000156  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00015a  6169              STR      r1,[r5,#0x14]         ;529
00015c  69a2              LDR      r2,[r4,#0x18]         ;529
00015e  6dc1              LDR      r1,[r0,#0x5c]         ;529
000160  b209              SXTH     r1,r1                 ;529
000162  2900              CMP      r1,#0                 ;529
000164  bf18              IT       NE                    ;529
000166  fb92f1f1          SDIVNE   r1,r2,r1              ;529
00016a  61a9              STR      r1,[r5,#0x18]         ;529
00016c  69e1              LDR      r1,[r4,#0x1c]         ;529
00016e  6dc0              LDR      r0,[r0,#0x5c]         ;529
000170  1400              ASRS     r0,r0,#16             ;529
000172  bf18              IT       NE                    ;529
000174  fb91f0f0          SDIVNE   r0,r1,r0              ;529
000178  61e8              STR      r0,[r5,#0x1c]         ;531
00017a  f00901ff          AND      r1,r9,#0xff           ;531
00017e  2003              MOVS     r0,#3                 ;531
000180  e9cd1610          STRD     r1,r6,[sp,#0x40]      ;531
000184  e9cd6012          STRD     r6,r0,[sp,#0x48]      ;531
000188  2150              MOVS     r1,#0x50              ;531
00018a  e9cd160e          STRD     r1,r6,[sp,#0x38]      ;531
00018e  f44f70fa          MOV      r0,#0x1f4             ;531
000192  e9cd060c          STRD     r0,r6,[sp,#0x30]      ;531
000196  4241              RSBS     r1,r0,#0              ;531
000198  9606              STR      r6,[sp,#0x18]         ;531
00019a  2202              MOVS     r2,#2                 ;531
00019c  9604              STR      r6,[sp,#0x10]         ;531
00019e  9605              STR      r6,[sp,#0x14]         ;531
0001a0  910b              STR      r1,[sp,#0x2c]         ;531
0001a2  e9cd6207          STRD     r6,r2,[sp,#0x1c]      ;531
0001a6  e9cd8009          STRD     r8,r0,[sp,#0x24]      ;531
0001aa  e9cd6800          STRD     r6,r8,[sp,#0]         ;531
0001ae  9815              LDR      r0,[sp,#0x54]         ;531
0001b0  e9cd8602          STRD     r8,r6,[sp,#8]         ;531
0001b4  eb00030a          ADD      r3,r0,r10             ;531
0001b8  4618              MOV      r0,r3                 ;531
0001ba  2200              MOVS     r2,#0                 ;531
0001bc  9922              LDR      r1,[sp,#0x88]         ;531
0001be  f7fffffe          BL       DSPA_CalculateDelta_Process
0001c2  9826              LDR      r0,[sp,#0x98]         ;537
0001c4  bb20              CBNZ     r0,|L16.528|
0001c6  f1a90201          SUB      r2,r9,#1              ;538
0001ca  2a00              CMP      r2,#0                 ;538
0001cc  dd16              BLE      |L16.508|
0001ce  4917              LDR      r1,|L16.556|
0001d0  4815              LDR      r0,|L16.552|
0001d2  eb010147          ADD      r1,r1,r7,LSL #1       ;538
0001d6  1e89              SUBS     r1,r1,#2              ;538
0001d8  f0190f01          TST      r9,#1
0001dc  d103              BNE      |L16.486|
0001de  f8303f04          LDRH     r3,[r0,#4]!           ;539
0001e2  f8213f02          STRH     r3,[r1,#2]!           ;539
                  |L16.486|
0001e6  6843              LDR      r3,[r0,#4]            ;538
0001e8  1052              ASRS     r2,r2,#1              ;538
0001ea  d007              BEQ      |L16.508|
                  |L16.492|
0001ec  f830cf08          LDRH     r12,[r0,#8]!
0001f0  804b              STRH     r3,[r1,#2]            ;539
0001f2  6843              LDR      r3,[r0,#4]            ;539
0001f4  f821cf04          STRH     r12,[r1,#4]!          ;539
0001f8  1e52              SUBS     r2,r2,#1              ;539
0001fa  d1f7              BNE      |L16.492|
                  |L16.508|
0001fc  f1b90001          SUBS     r0,r9,#1              ;539
000200  d406              BMI      |L16.528|
000202  490b              LDR      r1,|L16.560|
000204  183a              ADDS     r2,r7,r0              ;539
000206  f8311020          LDRH     r1,[r1,r0,LSL #2]     ;539
00020a  4808              LDR      r0,|L16.556|
00020c  f8201012          STRH     r1,[r0,r2,LSL #1]     ;539
                  |L16.528|
000210  9823              LDR      r0,[sp,#0x8c]         ;540
000212  3708              ADDS     r7,r7,#8              ;540
000214  4287              CMP      r7,r0                 ;540
000216  f6ffaf27          BLT      |L16.104|
00021a  b019              ADD      sp,sp,#0x64
00021c  e8bd8ff0          POP      {r4-r11,pc}
;;;542    
                          ENDP

                  |L16.544|
                          DCD      DspA_LF_ArrayS32_1
                  |L16.548|
                          DCD      0x40003000
                  |L16.552|
                          DCD      DspA_LF_ArrayS32_3_Finger-0x4
                  |L16.556|
                          DCD      sLFOffsetRow
                  |L16.560|
                          DCD      DspA_LF_ArrayS32_3_Finger

                          AREA ||i.alogorithm_local_linefilter_dspA||, CODE, READONLY, ALIGN=2

                  alogorithm_local_linefilter_dspA PROC
;;;614    
;;;615    void alogorithm_local_linefilter_dspA(bool_t MuxSum, uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;616    {	
;;;617    	alogorithm_linefilter_dspA(RawAddr,BaseAddr,(uint32_t)&DSPATMPDELTA[0][0],(uint32_t)&LINEFILTERBUFST2[0],(uint32_t)&LINEFILTERBUFST3[0],PEN_COORD_ROW_MAX,
000004  4c1b              LDR      r4,|L17.116|
000006  4607              MOV      r7,r0                 ;616
000008  b086              SUB      sp,sp,#0x18           ;616
00000a  68e0              LDR      r0,[r4,#0xc]  ; thisModeConf
00000c  68a1              LDR      r1,[r4,#8]  ; ptModuleModeConf
00000e  2505              MOVS     r5,#5
000010  f9b02055          LDRSH    r2,[r0,#0x55]
000014  7889              LDRB     r1,[r1,#2]
000016  f9b00053          LDRSH    r0,[r0,#0x53]
00001a  408a              LSLS     r2,r2,r1
00001c  4088              LSLS     r0,r0,r1
00001e  f8df8058          LDR      r8,|L17.120|
000022  e9cd0202          STRD     r0,r2,[sp,#8]
000026  e9cd8500          STRD     r8,r5,[sp,#0]
00002a  2601              MOVS     r6,#1
00002c  9604              STR      r6,[sp,#0x10]
00002e  e9d40105          LDRD     r0,r1,[r4,#0x14]
000032  4b12              LDR      r3,|L17.124|
000034  4a12              LDR      r2,|L17.128|
000036  f7fffffe          BL       alogorithm_linefilter_dspA
;;;618    	(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),1);
;;;619    	if(MuxSum)
00003a  2f00              CMP      r7,#0
;;;620    		alogorithm_linefilter_dspA(RawAddr_MuxSum,BaseAddr_MuxSum,(uint32_t)&DSPATMPDELTA[0][0],(uint32_t)&LINEFILTERBUFST2[0],(uint32_t)&LINEFILTERBUFST3[0],PEN_COORD_ROW_MAX,
;;;621    		(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),1);
;;;622    }
00003c  bf04              ITT      EQ
00003e  b006              ADDEQ    sp,sp,#0x18
000040  e8bd81f0          POPEQ    {r4-r8,pc}
000044  68e0              LDR      r0,[r4,#0xc]          ;620  ; thisModeConf
000046  68a1              LDR      r1,[r4,#8]            ;620  ; ptModuleModeConf
000048  4b0c              LDR      r3,|L17.124|
00004a  f9b02055          LDRSH    r2,[r0,#0x55]         ;620
00004e  7889              LDRB     r1,[r1,#2]            ;620
000050  f9b00053          LDRSH    r0,[r0,#0x53]         ;620
000054  408a              LSLS     r2,r2,r1              ;620
000056  4088              LSLS     r0,r0,r1              ;620
000058  e9cd0202          STRD     r0,r2,[sp,#8]         ;620
00005c  e9cd8500          STRD     r8,r5,[sp,#0]         ;620
000060  9604              STR      r6,[sp,#0x10]         ;620
000062  e9d41007          LDRD     r1,r0,[r4,#0x1c]      ;620
000066  4a06              LDR      r2,|L17.128|
000068  f7fffffe          BL       alogorithm_linefilter_dspA
00006c  b006              ADD      sp,sp,#0x18
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;623    
                          ENDP

000072  0000              DCW      0x0000
                  |L17.116|
                          DCD      ||.data||
                  |L17.120|
                          DCD      DspA_LF_ArrayS32_3
                  |L17.124|
                          DCD      DspA_LF_ArrayS32_2
                  |L17.128|
                          DCD      DspA_TmpDelta

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tDSPAOutPutInfo
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  raw_idx
000000  00                DCB      0x00
                  base_idx
000001  00                DCB      0x00
                  raw_idx_MuxSum
000002  00                DCB      0x00
                  base_idx_MuxSum
000003  00                DCB      0x00
                  thisInfo
                          DCD      0x00000000
                  ptModuleModeConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  LoopCntDspA
                          DCD      0x00000000
                  RawAddr
                          DCD      0x00000000
                  BaseAddr
                          DCD      0x00000000
                  BaseAddr_MuxSum
                          DCD      0x00000000
                  RawAddr_MuxSum
                          DCD      0x00000000
                  g_pLocalBaseImage
                          DCD      0x00000000
                  g_pFullHoverImage
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\dspA\\dspA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_dspA_c_bffd97c3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____REVSH|
#line 402
|__asm___6_dspA_c_bffd97c3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____RRX|
#line 587
|__asm___6_dspA_c_bffd97c3____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
