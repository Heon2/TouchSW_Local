; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\roic_ctrl_sw97500.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\roic_ctrl_sw97500.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\roic_ctrl_sw97500.crf ..\..\Module\SRIC\ROIC\SW97500\roic_ctrl_sw97500.c]
                          THUMB

                          AREA ||i.SW97500_Initialize||, CODE, READONLY, ALIGN=2

                  SW97500_Initialize PROC
;;;343    
;;;344    void SW97500_Initialize(void)
000000  b510              PUSH     {r4,lr}
;;;345    {
;;;346    	s_pktmoduleSRICCommonConf = module_SRIC_GetCommonConfig();
000002  f7fffffe          BL       module_SRIC_GetCommonConfig
000006  4901              LDR      r1,|L1.12|
000008  6008              STR      r0,[r1,#0]  ; s_pktmoduleSRICCommonConf
;;;347    }
00000a  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  |L1.12|
                          DCD      ||.data||

                          AREA ||i.SW97500_RawDataLocalRuntimeCalibration||, CODE, READONLY, ALIGN=2

                  SW97500_RawDataLocalRuntimeCalibration PROC
;;;1244   
;;;1245   void SW97500_RawDataLocalRuntimeCalibration(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1246   {
000004  b083              SUB      sp,sp,#0xc
;;;1247   	bool_t bIsCRRegChange = NO;
000006  2400              MOVS     r4,#0
;;;1248   	uint32_t r, c, g;
;;;1249   	uint32_t ulRealMSPI_Idx;
;;;1250   	uint16_t temp_data;
;;;1251   	int16_t temp_diff;
;;;1252   	int16_t sCRAdjustValue;
;;;1253   	tSW97500_ROIC_CR_MUX_t *  pCR_MUX_Tune;
;;;1254   	uint32_t ulCRRegTempBulk, ulCRRegAdustBulk;
;;;1255   #ifdef MODE_WDT
;;;1256   	KICK_DOG();
000008  f7fffffe          BL       Hal_Kick_DOG
;;;1257   #endif /* MODE_WDT */
;;;1258   #if USED_ONLY_LOCAL_MODE
;;;1259   	while(YES)
;;;1260   	{
;;;1261   		lDataIndex = module_wait_local_sample_done();
;;;1262   
;;;1263   		if(lDataIndex == LOCAL_FINGER_LAST_LHB)
;;;1264   		{
;;;1265   			break;
;;;1266   		}
;;;1267   	}
;;;1268   #else /* USED_ONLY_LOCAL_MODE */
;;;1269   	module_wait_full_sample_done();
00000c  f7fffffe          BL       module_wait_full_sample_done
;;;1270   #endif /* USED_ONLY_LOCAL_MODE */
;;;1271   	g_ptSRICConfig = (tModuleSRICCommonConf_t *)&(s_ptParamPreMainSet->tParamCommonConf.tModule.tSRIC_Conf);
000010  48ca              LDR      r0,|L2.828|
000012  49cb              LDR      r1,|L2.832|
000014  6800              LDR      r0,[r0,#0]  ; s_ptParamPreMainSet
;;;1272   	g_pR0_CR_MUX_Tune = (tSW97500_ROIC_CR_MUX_t *)&g_ptSRICConfig->tParam_R0_CR1_MUX1_1[0].ulBulk;
000016  f50062e0          ADD      r2,r0,#0x700
00001a  f200607c          ADD      r0,r0,#0x67c
00001e  e9c10203          STRD     r0,r2,[r1,#0xc]
000022  f5007001          ADD      r0,r0,#0x204
;;;1273   	g_pR1_CR_MUX_Tune = (tSW97500_ROIC_CR_MUX_t *)&g_ptSRICConfig->tParam_R1_CR1_MUX1_1[0].ulBulk;
;;;1274   
;;;1275   	memset((void*)(&RawValue_Row_Line_Sum[0][0][0]), 0, sizeof(uint32_t)*DEF_LOCAL_TUNE_ROW_LINE_NUM*DEF_LOCAL_TUNE_ROW_ROIC_NUM*DEF_LOCAL_TUNE_ROW_CR_GROUP_NUM);
000026  6148              STR      r0,[r1,#0x14]  ; g_pR1_CR_MUX_Tune
000028  f44f71c0          MOV      r1,#0x180
00002c  48c5              LDR      r0,|L2.836|
00002e  f7fffffe          BL       __aeabi_memclr4
;;;1276   	memset((void*)(&RawValue_Row_Line_Cnt[0][0][0]), 0, sizeof(uint8_t)*DEF_LOCAL_TUNE_ROW_LINE_NUM*DEF_LOCAL_TUNE_ROW_ROIC_NUM*DEF_LOCAL_TUNE_ROW_CR_GROUP_NUM);
000032  2160              MOVS     r1,#0x60
000034  48c4              LDR      r0,|L2.840|
000036  f7fffffe          BL       __aeabi_memclr4
;;;1277   	memset((void*)(&RawValue_Col_Line_Sum[0][0]), 0, sizeof(uint32_t)*DEF_LOCAL_TUNE_COL_LINE_NUM*DEF_LOCAL_TUNE_COL_CR_IDX_NUM);
00003a  2170              MOVS     r1,#0x70
00003c  48c3              LDR      r0,|L2.844|
00003e  f7fffffe          BL       __aeabi_memclr4
;;;1278   	memset((void*)(&RawValue_Col_Line_Cnt[0][0]), 0, sizeof(uint8_t)*DEF_LOCAL_TUNE_COL_LINE_NUM*DEF_LOCAL_TUNE_COL_CR_IDX_NUM);
000042  48c3              LDR      r0,|L2.848|
000044  2100              MOVS     r1,#0
;;;1279   
;;;1280   
;;;1281   	for( r=ROW_MAX; r--; )
;;;1282   	{
;;;1283   		for( c=COL_MAX; c--; )
;;;1284   		{
;;;1285   			temp_data = HAL_READ_RAW_IMAGE(r, c);
;;;1286   			if(r == 0)
;;;1287   			{
;;;1288   				RawValue_Row_Line_Sum[0][ulMSPIIndex[c]][ulROIC_gNum[c]] += temp_data;
000046  4fc3              LDR      r7,|L2.852|
000048  f8c01270          STR      r1,[r0,#0x270]        ;1278  ; RawValue_Col_Line_Cnt
00004c  f8c01274          STR      r1,[r0,#0x274]        ;1278  ; RawValue_Col_Line_Cnt
000050  f8c01278          STR      r1,[r0,#0x278]        ;1278  ; RawValue_Col_Line_Cnt
000054  f8c0127c          STR      r1,[r0,#0x27c]        ;1278  ; RawValue_Col_Line_Cnt
000058  f8c01280          STR      r1,[r0,#0x280]        ;1278  ; RawValue_Col_Line_Cnt
00005c  f8c01284          STR      r1,[r0,#0x284]        ;1278  ; RawValue_Col_Line_Cnt
;;;1289   				RawValue_Row_Line_Cnt[0][ulMSPIIndex[c]][ulROIC_gNum[c]]++;
;;;1290   			}
;;;1291   			else if(r ==  ROW_MAX - 1)
;;;1292   			{
;;;1293   				RawValue_Row_Line_Sum[1][ulMSPIIndex[c]][ulROIC_gNum[c]] += temp_data;
;;;1294   				RawValue_Row_Line_Cnt[1][ulMSPIIndex[c]][ulROIC_gNum[c]]++;
;;;1295   			}
;;;1296   			else
;;;1297   			{
;;;1298   				if(c == 0)
;;;1299   				{
;;;1300   					RawValue_Col_Line_Sum[0][ulCRIndex[r]] += temp_data;
;;;1301   					RawValue_Col_Line_Cnt[0][ulCRIndex[r]]++;
;;;1302   				}
;;;1303   				else if(c == COL_MAX - 1)
;;;1304   				{
;;;1305   					RawValue_Col_Line_Sum[1][ulCRIndex[r]] += temp_data;
;;;1306   					RawValue_Col_Line_Cnt[1][ulCRIndex[r]]++;
;;;1307   				}
;;;1308   			}
;;;1309   		}
;;;1310   	}
;;;1311   
;;;1312   	/*
;;;1313   	 * Top & Bottom Edge
;;;1314   	 */
;;;1315   #if 1
;;;1316   	for(r = 0; r < DEF_LOCAL_TUNE_ROW_LINE_NUM; r++)
;;;1317   	{
;;;1318   		for(c = 0; c < DEF_LOCAL_TUNE_ROW_ROIC_NUM; c++)
;;;1319   		{
;;;1320   			for(g = 0; g < DEF_LOCAL_TUNE_ROW_CR_GROUP_NUM; g++)
;;;1321   			{
;;;1322   				temp_data = RawValue_Row_Line_Sum[r][c][g];
;;;1323   				temp_data /= RawValue_Row_Line_Cnt[r][c][g];
;;;1324   				temp_diff = (int16_t)temp_data - (int16_t)DEF_LOCAL_TAGET_VALUE;
;;;1325   				sCRAdjustValue = temp_diff / DEF_LOCAL_CR_1STEP_VALUE;
;;;1326   				if(sCRAdjustValue != 0)
;;;1327   				{
;;;1328   					bIsCRRegChange = YES;
;;;1329   					if(c < DEF_ROIC_NUM)
;;;1330   					{
;;;1331   						ulRealMSPI_Idx = c;
;;;1332   						pCR_MUX_Tune = g_pR0_CR_MUX_Tune; /* R0 */
;;;1333   					}
;;;1334   					else
;;;1335   					{
;;;1336   						ulRealMSPI_Idx = c - DEF_ROIC_NUM;
;;;1337   						pCR_MUX_Tune = g_pR1_CR_MUX_Tune; /* R1 */
;;;1338   					}
;;;1339   
;;;1340   					uint32_t ulShiftLevel;
;;;1341   
;;;1342   					switch(ucRowLineCRRegIdx[r][1])
;;;1343   					{
;;;1344   						case 1: /* R1 */
;;;1345   						case 3: /* R3 */
;;;1346   						{
;;;1347   							ulShiftLevel = g*5;
;;;1348   //							switch(g)
;;;1349   //							{
;;;1350   //								case 0:
;;;1351   //								{
;;;1352   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r1g1  += sCRAdjustValue;
;;;1353   //									break;
;;;1354   //								}
;;;1355   //								case 1:
;;;1356   //								{
;;;1357   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r1g2 += sCRAdjustValue;
;;;1358   //									break;
;;;1359   //								}
;;;1360   //								case 2:
;;;1361   //								{
;;;1362   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r1g3 += sCRAdjustValue;
;;;1363   //									break;
;;;1364   //								}
;;;1365   //							}
;;;1366   							break;
;;;1367   						}
;;;1368   						case 2: /* R2 */
;;;1369   						{
;;;1370   							ulShiftLevel = (g*5) + 15;
;;;1371   //							switch(g)
;;;1372   //							{
;;;1373   //								case 0:
;;;1374   //								{
;;;1375   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r2g1 += sCRAdjustValue;
;;;1376   //									break;
;;;1377   //								}
;;;1378   //								case 1:
;;;1379   //								{
;;;1380   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r2g2 += sCRAdjustValue;
;;;1381   //									break;
;;;1382   //								}
;;;1383   //								case 2:
;;;1384   //								{
;;;1385   //									pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].tBit.cr1_r2g3 += sCRAdjustValue;
;;;1386   //									break;
;;;1387   //								}
;;;1388   //							}
;;;1389   							break;
;;;1390   						}
;;;1391   					}
;;;1392   
;;;1393   
;;;1394   					ulCRRegTempBulk = pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].ulBulk;
;;;1395   					ulCRRegAdustBulk = (ulCRRegTempBulk >> ulShiftLevel) & 0x1F;
;;;1396   
;;;1397   					if(sCRAdjustValue > 0)
;;;1398   					{
;;;1399   						ulCRRegAdustBulk += sCRAdjustValue;
;;;1400   						if(ulCRRegAdustBulk > 31)
;;;1401   						{
;;;1402   							ulCRRegAdustBulk = 31;
;;;1403   						}
;;;1404   					}
;;;1405   					else
;;;1406   					{
;;;1407   						if((int16_t)ulCRRegAdustBulk + sCRAdjustValue > 0)
;;;1408   						{
;;;1409   							ulCRRegAdustBulk = (uint32_t)((int16_t)ulCRRegAdustBulk + sCRAdjustValue);
;;;1410   						}
;;;1411   						else
;;;1412   						{
;;;1413   							ulCRRegAdustBulk = 0;
;;;1414   						}
;;;1415   					}
;;;1416   
;;;1417   					ulCRRegTempBulk &= (~(0x1F<<ulShiftLevel));
;;;1418   					ulCRRegTempBulk |= (ulCRRegAdustBulk<<ulShiftLevel);
;;;1419   					pCR_MUX_Tune[ulRealMSPI_Idx + (ucRowLineCRRegIdx[r][0] * DEF_ROIC_NUM)].ulBulk = ulCRRegTempBulk;
;;;1420   				}
;;;1421   			}
;;;1422   		}
;;;1423   	}
;;;1424   #endif
;;;1425   	/*
;;;1426   	 * Left Right Edge
;;;1427   	 */
;;;1428   #if 1
;;;1429   	for(c = 0; c < DEF_LOCAL_TUNE_COL_LINE_NUM; c++)
;;;1430   	{
;;;1431   		for(r = 0; r < DEF_LOCAL_TUNE_COL_CR_IDX_NUM; r++)
;;;1432   		{
;;;1433   			temp_data = RawValue_Col_Line_Sum[c][r];
;;;1434   			temp_data /= RawValue_Col_Line_Cnt[c][r];
;;;1435   			if(temp_data > 0)
;;;1436   			{
;;;1437   				temp_diff = (int16_t)temp_data - (int16_t)DEF_LOCAL_TAGET_VALUE;
;;;1438   				sCRAdjustValue = temp_diff / DEF_LOCAL_CR_1STEP_VALUE;
;;;1439   			}
;;;1440   			else
;;;1441   			{
;;;1442   				sCRAdjustValue = 0;
;;;1443   			}
;;;1444   
;;;1445   			if(sCRAdjustValue != 0)
;;;1446   			{
;;;1447   				bIsCRRegChange = YES;
;;;1448   
;;;1449   				if(ucColLineCRMSPIIdx[c][1] == 0)
;;;1450   				{
;;;1451   					pCR_MUX_Tune = g_pR0_CR_MUX_Tune; /* R0 */
;;;1452   				}
;;;1453   				else
;;;1454   				{
;;;1455   					pCR_MUX_Tune = g_pR1_CR_MUX_Tune; /* R1 */
;;;1456   				}
;;;1457   
;;;1458   				int16_t sRegValue;
;;;1459   
;;;1460   				switch(r)
;;;1461   				{
;;;1462   					case 0:case 2:case 3:case 4:case 5:case 6:case 7:
;;;1463   					case 8:case 9:case 10:case 11:case 13:
;;;1464   					{
;;;1465   						sRegValue = pCR_MUX_Tune[ucColLineCRMSPIIdx[c][0] + (ucColLineCRRegIdx[r]*DEF_ROIC_NUM)].tBit.cr1_r1g1;
;;;1466   						if(sCRAdjustValue > 0)
;;;1467   						{
;;;1468   							sRegValue += sCRAdjustValue;
;;;1469   							if(sRegValue > 31)
;;;1470   							{
;;;1471   								sRegValue = 31;
;;;1472   							}
;;;1473   						}
;;;1474   						else
;;;1475   						{
;;;1476   							if(sRegValue + sCRAdjustValue > 0)
;;;1477   							{
;;;1478   								sRegValue += sCRAdjustValue;
;;;1479   							}
;;;1480   							else
;;;1481   							{
;;;1482   								sRegValue = 0;
;;;1483   							}
;;;1484   						}
;;;1485   						pCR_MUX_Tune[ucColLineCRMSPIIdx[c][0] + (ucColLineCRRegIdx[r]*DEF_ROIC_NUM)].tBit.cr1_r1g1 = sRegValue;
;;;1486   
;;;1487   						break;
;;;1488   					}
;;;1489   					case 1:case 12:
;;;1490   					{
;;;1491   						sRegValue = pCR_MUX_Tune[ucColLineCRMSPIIdx[c][0] + (ucColLineCRRegIdx[r]*DEF_ROIC_NUM)].tBit.cr1_r2g1;
;;;1492   						if(sCRAdjustValue > 0)
;;;1493   						{
;;;1494   							sRegValue += sCRAdjustValue;
;;;1495   							if(sRegValue > 31)
;;;1496   							{
;;;1497   								sRegValue = 31;
;;;1498   							}
;;;1499   						}
;;;1500   						else
;;;1501   						{
;;;1502   							if(sRegValue + sCRAdjustValue > 0)
;;;1503   							{
;;;1504   								sRegValue += sCRAdjustValue;
;;;1505   							}
;;;1506   							else
;;;1507   							{
;;;1508   								sRegValue = 0;
;;;1509   							}
;;;1510   						}
;;;1511   						pCR_MUX_Tune[ucColLineCRMSPIIdx[c][0] + (ucColLineCRRegIdx[r]*DEF_ROIC_NUM)].tBit.cr1_r2g1 = sRegValue;
;;;1512   						break;
;;;1513   					}
;;;1514   				}
;;;1515   			}
;;;1516   		}
;;;1517   	}
;;;1518   #endif
;;;1519   
;;;1520   	if(bIsCRRegChange)
;;;1521   	{
;;;1522   		HAL_SetROICRegSetChangeMode(ROIC_REG_SET_CHAGNE_LOCAL_CR_TUNE);
;;;1523   #ifdef MODE_WDT
;;;1524   		KICK_DOG();
;;;1525   #endif /* MODE_WDT */
;;;1526   #if USED_ONLY_LOCAL_MODE
;;;1527   		while(YES)
;;;1528   		{
;;;1529   			lDataIndex = module_wait_local_sample_done();
;;;1530   
;;;1531   			if(lDataIndex == LOCAL_OP_LAST_LHB)
;;;1532   			{
;;;1533   				break;
;;;1534   			}
;;;1535   		}
;;;1536   #else /* USED_ONLY_LOCAL_MODE */
;;;1537   		module_wait_full_sample_done();
;;;1538   #endif /* USED_ONLY_LOCAL_MODE */
;;;1539   	}
;;;1540   }
000060  f8c01288          STR      r1,[r0,#0x288]  ; RawValue_Col_Line_Cnt
000064  f1000520          ADD      r5,r0,#0x20           ;1275
000068  f50076d0          ADD      r6,r0,#0x1a0          ;1276
00006c  f200207e          ADD      r0,r0,#0x27e          ;1276
000070  212c              MOVS     r1,#0x2c
000072  f1070850          ADD      r8,r7,#0x50           ;1288
000076  f1a70b3b          SUB      r11,r7,#0x3b          ;1300
00007a  9000              STR      r0,[sp,#0]            ;1306
                  |L2.124|
00007c  4ab6              LDR      r2,|L2.856|
00007e  eb010381          ADD      r3,r1,r1,LSL #2       ;1285
000082  204f              MOVS     r0,#0x4f
000084  eb021943          ADD      r9,r2,r3,LSL #5       ;1285
                  |L2.136|
000088  f8392010          LDRH     r2,[r9,r0,LSL #1]     ;1285
00008c  b131              CBZ      r1,|L2.156|
00008e  292c              CMP      r1,#0x2c              ;1291
000090  d019              BEQ      |L2.198|
000092  2800              CMP      r0,#0                 ;1298
000094  d07e              BEQ      |L2.404|
000096  284f              CMP      r0,#0x4f              ;1303
000098  d07d              BEQ      |L2.406|
00009a  e02c              B        |L2.246|
                  |L2.156|
00009c  5c3b              LDRB     r3,[r7,r0]            ;1288
00009e  eb030a43          ADD      r10,r3,r3,LSL #1      ;1288
0000a2  f8183000          LDRB     r3,[r8,r0]            ;1288
0000a6  eb050c8a          ADD      r12,r5,r10,LSL #2     ;1288
0000aa  f85ce023          LDR      lr,[r12,r3,LSL #2]    ;1288
0000ae  4472              ADD      r2,r2,lr              ;1288
0000b0  f84c2023          STR      r2,[r12,r3,LSL #2]    ;1288
0000b4  eb0a0206          ADD      r2,r10,r6             ;1289
0000b8  f813c002          LDRB     r12,[r3,r2]           ;1289
0000bc  f10c0c01          ADD      r12,r12,#1            ;1289
0000c0  f803c002          STRB     r12,[r3,r2]           ;1289
0000c4  e017              B        |L2.246|
                  |L2.198|
0000c6  5c3b              LDRB     r3,[r7,r0]            ;1293
0000c8  f818c000          LDRB     r12,[r8,r0]           ;1293
0000cc  eb030a43          ADD      r10,r3,r3,LSL #1      ;1293
0000d0  eb05038a          ADD      r3,r5,r10,LSL #2      ;1293
0000d4  eb03038c          ADD      r3,r3,r12,LSL #2      ;1293
0000d8  f8d3e0c0          LDR      lr,[r3,#0xc0]         ;1293
0000dc  4472              ADD      r2,r2,lr              ;1293
0000de  f8c320c0          STR      r2,[r3,#0xc0]         ;1294
0000e2  eb0c0206          ADD      r2,r12,r6             ;1294
0000e6  f10a0330          ADD      r3,r10,#0x30          ;1294
0000ea  f812c003          LDRB     r12,[r2,r3]           ;1294
0000ee  f10c0c01          ADD      r12,r12,#1            ;1294
0000f2  f802c003          STRB     r12,[r2,r3]           ;1294
                  |L2.246|
0000f6  1e40              SUBS     r0,r0,#1              ;1294
0000f8  d2c6              BCS      |L2.136|
                  |L2.250|
0000fa  1e49              SUBS     r1,r1,#1              ;1306
0000fc  d2be              BCS      |L2.124|
0000fe  4e90              LDR      r6,|L2.832|
000100  2300              MOVS     r3,#0                 ;1316
000102  f1060708          ADD      r7,r6,#8              ;1342
                  |L2.262|
000106  4a8f              LDR      r2,|L2.836|
000108  eb030c43          ADD      r12,r3,r3,LSL #1      ;1322
00010c  f50271c0          ADD      r1,r2,#0x180          ;1276
000110  eb02128c          ADD      r2,r2,r12,LSL #6      ;1322
000114  eb01110c          ADD      r1,r1,r12,LSL #4      ;1323
000118  e9cd1200          STRD     r1,r2,[sp,#0]         ;1342
00011c  2000              MOVS     r0,#0                 ;1318
00011e  eb070b43          ADD      r11,r7,r3,LSL #1      ;1342
                  |L2.290|
000122  f8ddc004          LDR      r12,[sp,#4]           ;1322
000126  eb000240          ADD      r2,r0,r0,LSL #1       ;1322
00012a  eb0c0982          ADD      r9,r12,r2,LSL #2      ;1322
00012e  f8ddc000          LDR      r12,[sp,#0]           ;1323
000132  2100              MOVS     r1,#0                 ;1320
000134  eb0c0802          ADD      r8,r12,r2             ;1323
                  |L2.312|
000138  f8392021          LDRH     r2,[r9,r1,LSL #2]     ;1322
00013c  f818c001          LDRB     r12,[r8,r1]           ;1323
000140  b292              UXTH     r2,r2                 ;1322
000142  fbb2f2fc          UDIV     r2,r2,r12             ;1323
000146  f2a2726c          SUB      r2,r2,#0x76c          ;1323
00014a  b212              SXTH     r2,r2                 ;1324
00014c  f2466c67          MOV      r12,#0x6667           ;1325
000150  fb02f20c          MUL      r2,r2,r12             ;1325
000154  ea4f5ca2          ASR      r12,r2,#22            ;1325
000158  ebbc72e2          SUBS     r2,r12,r2,ASR #31     ;1325
00015c  d05c              BEQ      |L2.536|
00015e  2401              MOVS     r4,#1                 ;1328
000160  2808              CMP      r0,#8                 ;1329
000162  bf27              ITTEE    CS                    ;1336
000164  f1a00508          SUBCS    r5,r0,#8              ;1336
000168  f8d6a014          LDRCS    r10,[r6,#0x14]        ;1337  ; g_pR1_CR_MUX_Tune
00016c  4605              MOVCC    r5,r0                 ;1331
00016e  f8d6a010          LDRCC    r10,[r6,#0x10]        ;1332  ; g_pR0_CR_MUX_Tune
000172  f89be001          LDRB     lr,[r11,#1]           ;1342
000176  f1be0f01          CMP      lr,#1                 ;1342
00017a  d02b              BEQ      |L2.468|
00017c  f1be0f02          CMP      lr,#2                 ;1342
000180  bf04              ITT      EQ                    ;1370
000182  eb010c81          ADDEQ    r12,r1,r1,LSL #2      ;1370
000186  f10c0c0f          ADDEQ    r12,r12,#0xf          ;1370
00018a  d025              BEQ      |L2.472|
00018c  f1be0f03          CMP      lr,#3                 ;1342
000190  d020              BEQ      |L2.468|
000192  e021              B        |L2.472|
                  |L2.404|
000194  e000              B        |L2.408|
                  |L2.406|
000196  e00d              B        |L2.436|
                  |L2.408|
000198  f81b0001          LDRB     r0,[r11,r1]           ;1300
00019c  4b6b              LDR      r3,|L2.844|
00019e  f853c020          LDR      r12,[r3,r0,LSL #2]    ;1300
0001a2  4462              ADD      r2,r2,r12             ;1300
0001a4  f8432020          STR      r2,[r3,r0,LSL #2]     ;1300
0001a8  f1030270          ADD      r2,r3,#0x70           ;1301
0001ac  5c13              LDRB     r3,[r2,r0]            ;1301
0001ae  1c5b              ADDS     r3,r3,#1              ;1301
0001b0  5413              STRB     r3,[r2,r0]            ;1301
0001b2  e7a2              B        |L2.250|
                  |L2.436|
0001b4  f81b0001          LDRB     r0,[r11,r1]           ;1305
0001b8  4b64              LDR      r3,|L2.844|
0001ba  eb030380          ADD      r3,r3,r0,LSL #2       ;1305
0001be  f8d3c038          LDR      r12,[r3,#0x38]        ;1305
0001c2  4462              ADD      r2,r2,r12             ;1305
0001c4  639a              STR      r2,[r3,#0x38]         ;1305
0001c6  9a00              LDR      r2,[sp,#0]            ;1306
0001c8  9b00              LDR      r3,[sp,#0]            ;1306
0001ca  5c82              LDRB     r2,[r0,r2]            ;1306
0001cc  1c52              ADDS     r2,r2,#1              ;1306
0001ce  54c2              STRB     r2,[r0,r3]            ;1306
0001d0  204e              MOVS     r0,#0x4e              ;1306
0001d2  e759              B        |L2.136|
                  |L2.468|
0001d4  eb010c81          ADD      r12,r1,r1,LSL #2      ;1347
                  |L2.472|
0001d8  f817e013          LDRB     lr,[r7,r3,LSL #1]     ;1394
0001dc  eb0505ce          ADD      r5,r5,lr,LSL #3       ;1394
0001e0  eb0a0a85          ADD      r10,r10,r5,LSL #2     ;1394
0001e4  f8da5000          LDR      r5,[r10,#0]           ;1394
0001e8  fa25fe0c          LSR      lr,r5,r12             ;1395
0001ec  f00e0e1f          AND      lr,lr,#0x1f           ;1395
0001f0  2a00              CMP      r2,#0                 ;1397
0001f2  4472              ADD      r2,r2,lr              ;1407
0001f4  dd02              BLE      |L2.508|
0001f6  2a1f              CMP      r2,#0x1f              ;1402
0001f8  d903              BLS      |L2.514|
0001fa  e09d              B        |L2.824|
                  |L2.508|
0001fc  2a00              CMP      r2,#0                 ;1407
0001fe  bfd8              IT       LE                    ;1413
000200  2200              MOVLE    r2,#0                 ;1413
                  |L2.514|
000202  f04f0e1f          MOV      lr,#0x1f              ;1417
000206  fa0efe0c          LSL      lr,lr,r12             ;1417
00020a  ea25050e          BIC      r5,r5,lr              ;1417
00020e  fa02f20c          LSL      r2,r2,r12             ;1418
000212  432a              ORRS     r2,r2,r5              ;1418
000214  f8ca2000          STR      r2,[r10,#0]           ;1419
                  |L2.536|
000218  1c49              ADDS     r1,r1,#1              ;1419
00021a  2903              CMP      r1,#3                 ;1420
00021c  d38c              BCC      |L2.312|
00021e  1c40              ADDS     r0,r0,#1              ;1420
000220  2810              CMP      r0,#0x10              ;1420
000222  f4ffaf7e          BCC      |L2.290|
000226  1c5b              ADDS     r3,r3,#1              ;1420
000228  2b02              CMP      r3,#2                 ;1420
00022a  f4ffaf6c          BCC      |L2.262|
00022e  f8dfe11c          LDR      lr,|L2.844|
000232  f8df9128          LDR      r9,|L2.860|
000236  2200              MOVS     r2,#0                 ;1429
000238  f10e0b70          ADD      r11,lr,#0x70          ;1301
                  |L2.572|
00023c  ebc201c2          RSB      r1,r2,r2,LSL #3       ;1433
000240  2000              MOVS     r0,#0                 ;1431
000242  eb090a42          ADD      r10,r9,r2,LSL #1      ;1449
000246  eb0e08c1          ADD      r8,lr,r1,LSL #3       ;1433
00024a  eb0b0741          ADD      r7,r11,r1,LSL #1      ;1434
00024e  bf00              NOP                            ;1433
                  |L2.592|
000250  f8381020          LDRH     r1,[r8,r0,LSL #2]     ;1433
000254  5c3b              LDRB     r3,[r7,r0]            ;1434
000256  b289              UXTH     r1,r1                 ;1433
000258  fbb1f1f3          UDIV     r1,r1,r3              ;1434
00025c  2900              CMP      r1,#0                 ;1435
00025e  d056              BEQ      |L2.782|
000260  f2a1716c          SUB      r1,r1,#0x76c          ;1435
000264  b209              SXTH     r1,r1                 ;1437
000266  f2466367          MOV      r3,#0x6667            ;1438
00026a  4359              MULS     r1,r3,r1              ;1438
00026c  158b              ASRS     r3,r1,#22             ;1438
00026e  ebb371e1          SUBS     r1,r3,r1,ASR #31      ;1438
000272  d04c              BEQ      |L2.782|
000274  f89a3001          LDRB     r3,[r10,#1]           ;1449
000278  2401              MOVS     r4,#1                 ;1447
00027a  2b00              CMP      r3,#0                 ;1449
00027c  bf0c              ITE      EQ                    ;1451
00027e  6933              LDREQ    r3,[r6,#0x10]         ;1451  ; g_pR0_CR_MUX_Tune
000280  6973              LDRNE    r3,[r6,#0x14]         ;1455  ; g_pR1_CR_MUX_Tune
000282  280e              CMP      r0,#0xe               ;1460
000284  d243              BCS      |L2.782|
000286  e8dff000          TBB      [pc,r0]               ;1460
00028a  0724              DCB      0x07,0x24
00028c  07070707          DCB      0x07,0x07,0x07,0x07
000290  07070707          DCB      0x07,0x07,0x07,0x07
000294  07072407          DCB      0x07,0x07,0x24,0x07
000298  f8dfc0c4          LDR      r12,|L2.864|
00029c  f8195012          LDRB     r5,[r9,r2,LSL #1]     ;1465
0002a0  f81cc000          LDRB     r12,[r12,r0]          ;1465
0002a4  eb050ccc          ADD      r12,r5,r12,LSL #3     ;1465
0002a8  f813502c          LDRB     r5,[r3,r12,LSL #2]    ;1465
0002ac  2900              CMP      r1,#0                 ;1466
0002ae  f005051f          AND      r5,r5,#0x1f           ;1465
0002b2  4429              ADD      r1,r1,r5              ;1476
0002b4  dd03              BLE      |L2.702|
0002b6  291f              CMP      r1,#0x1f              ;1469
0002b8  bfc8              IT       GT                    ;1471
0002ba  211f              MOVGT    r1,#0x1f              ;1471
0002bc  e002              B        |L2.708|
                  |L2.702|
0002be  2900              CMP      r1,#0                 ;1476
0002c0  bfd8              IT       LE                    ;1482
0002c2  2100              MOVLE    r1,#0                 ;1482
                  |L2.708|
0002c4  f813502c          LDRB     r5,[r3,r12,LSL #2]    ;1485
0002c8  f3610504          BFI      r5,r1,#0,#5           ;1485
0002cc  f803502c          STRB     r5,[r3,r12,LSL #2]    ;1485
0002d0  e01d              B        |L2.782|
0002d2  f8dfc08c          LDR      r12,|L2.864|
0002d6  f8195012          LDRB     r5,[r9,r2,LSL #1]     ;1491
0002da  f81cc000          LDRB     r12,[r12,r0]          ;1491
0002de  eb050ccc          ADD      r12,r5,r12,LSL #3     ;1491
0002e2  eb03038c          ADD      r3,r3,r12,LSL #2      ;1491
0002e6  f8b3c001          LDRH     r12,[r3,#1]           ;1491
0002ea  2900              CMP      r1,#0                 ;1492
0002ec  f3cc1cc4          UBFX     r12,r12,#7,#5         ;1491
0002f0  4461              ADD      r1,r1,r12             ;1502
0002f2  dd03              BLE      |L2.764|
0002f4  291f              CMP      r1,#0x1f              ;1495
0002f6  bfc8              IT       GT                    ;1497
0002f8  211f              MOVGT    r1,#0x1f              ;1497
0002fa  e002              B        |L2.770|
                  |L2.764|
0002fc  2900              CMP      r1,#0                 ;1502
0002fe  bfd8              IT       LE                    ;1508
000300  2100              MOVLE    r1,#0                 ;1508
                  |L2.770|
000302  f8b3c001          LDRH     r12,[r3,#1]           ;1511
000306  f3611ccb          BFI      r12,r1,#7,#5          ;1511
00030a  f8a3c001          STRH     r12,[r3,#1]           ;1511
                  |L2.782|
00030e  1c40              ADDS     r0,r0,#1              ;1511
000310  280e              CMP      r0,#0xe               ;1515
000312  d39d              BCC      |L2.592|
000314  1c52              ADDS     r2,r2,#1              ;1515
000316  2a02              CMP      r2,#2                 ;1515
000318  d390              BCC      |L2.572|
00031a  2c00              CMP      r4,#0                 ;1520
00031c  bf04              ITT      EQ
00031e  b003              ADDEQ    sp,sp,#0xc
000320  e8bd8ff0          POPEQ    {r4-r11,pc}
000324  2002              MOVS     r0,#2                 ;1522
000326  f7fffffe          BL       HAL_SetROICRegSetChangeMode
00032a  f7fffffe          BL       Hal_Kick_DOG
00032e  b003              ADD      sp,sp,#0xc            ;1537
000330  e8bd4ff0          POP      {r4-r11,lr}           ;1537
000334  f7ffbffe          B.W      module_wait_full_sample_done
                  |L2.824|
000338  221f              MOVS     r2,#0x1f              ;1402
00033a  e762              B        |L2.514|
;;;1541   #endif /* USED_RUNTIME_LOCAL_TUNE_RAWDATA */
                          ENDP

                  |L2.828|
                          DCD      s_ptParamPreMainSet
                  |L2.832|
                          DCD      ||.data||
                  |L2.836|
                          DCD      ||.bss||+0x20
                  |L2.840|
                          DCD      ||.bss||+0x1a0
                  |L2.844|
                          DCD      ||.bss||+0x200
                  |L2.848|
                          DCD      ||.bss||
                  |L2.852|
                          DCD      ||.data||+0x53
                  |L2.856|
                          DCD      FullSharedBuff
                  |L2.860|
                          DCD      ||.data||+0x4
                  |L2.864|
                          DCD      ||.data||+0x45

                          AREA ||i.SW97500_Reg_AFESetting||, CODE, READONLY, ALIGN=2

                  SW97500_Reg_AFESetting PROC
;;;249    #if USED_NOISE_HOPPING_FREQ
;;;250    static void SW97500_Reg_AFESetting(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;251    {
000002  b08a              SUB      sp,sp,#0x28
;;;252    	if (IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
000004  f0100f02          TST      r0,#2
000008  d051              BEQ      |L3.174|
;;;253    	{
;;;254    		MSPI_RegisterWrite((0x030 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_PRD.ulBulk);
00000a  4c85              LDR      r4,|L3.544|
00000c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00000e  6ac1              LDR      r1,[r0,#0x2c]
000010  f2420030          MOV      r0,#0x2030
000014  f7fffffe          BL       MSPI_RegisterWrite
;;;255    		MSPI_RegisterWrite((0x034 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SMPL_CTL.ulBulk);
000018  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00001a  6b01              LDR      r1,[r0,#0x30]
00001c  f2420034          MOV      r0,#0x2034
000020  f7fffffe          BL       MSPI_RegisterWrite
;;;256    		MSPI_RegisterWrite((0x038 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_RSTP_NUM1.ulBulk);
000024  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000026  6b41              LDR      r1,[r0,#0x34]
000028  f2420038          MOV      r0,#0x2038
00002c  f7fffffe          BL       MSPI_RegisterWrite
;;;257    		MSPI_RegisterWrite((0x03C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM1.ulBulk);
000030  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000032  6b81              LDR      r1,[r0,#0x38]
000034  f242003c          MOV      r0,#0x203c
000038  f7fffffe          BL       MSPI_RegisterWrite
;;;258    		MSPI_RegisterWrite((0x040 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM2.ulBulk);
00003c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00003e  6bc1              LDR      r1,[r0,#0x3c]
000040  f44f5001          MOV      r0,#0x2040
000044  f7fffffe          BL       MSPI_RegisterWrite
;;;259    		MSPI_RegisterWrite((0x044 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_NUM1.ulBulk);
000048  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00004a  6c01              LDR      r1,[r0,#0x40]
00004c  f2420044          MOV      r0,#0x2044
000050  f7fffffe          BL       MSPI_RegisterWrite
;;;260    		MSPI_RegisterWrite((0x048 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM1.ulBulk);
000054  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000056  6c41              LDR      r1,[r0,#0x44]
000058  f2420048          MOV      r0,#0x2048
00005c  f7fffffe          BL       MSPI_RegisterWrite
;;;261    		MSPI_RegisterWrite((0x04C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM2.ulBulk);
000060  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000062  6c81              LDR      r1,[r0,#0x48]
000064  f242004c          MOV      r0,#0x204c
000068  f7fffffe          BL       MSPI_RegisterWrite
;;;262    
;;;263    		MSPI_RegisterWrite((0x050 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH0_NUM1.ulBulk);
00006c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00006e  6cc1              LDR      r1,[r0,#0x4c]
000070  f2420050          MOV      r0,#0x2050
000074  f7fffffe          BL       MSPI_RegisterWrite
;;;264    		MSPI_RegisterWrite((0x054 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH1_NUM1.ulBulk);
000078  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00007a  6d01              LDR      r1,[r0,#0x50]
00007c  f2420054          MOV      r0,#0x2054
000080  f7fffffe          BL       MSPI_RegisterWrite
;;;265    		MSPI_RegisterWrite((0x058 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH_NUM2.ulBulk);
000084  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000086  6d41              LDR      r1,[r0,#0x54]
000088  f2420058          MOV      r0,#0x2058
00008c  f7fffffe          BL       MSPI_RegisterWrite
;;;266    		MSPI_RegisterWrite((0x05C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_CTL.ulBulk);
000090  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000092  6d81              LDR      r1,[r0,#0x58]
000094  f242005c          MOV      r0,#0x205c
000098  f7fffffe          BL       MSPI_RegisterWrite
;;;267    		MSPI_RegisterWrite((0x060 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_NUM1.ulBulk);
00009c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00009e  6dc1              LDR      r1,[r0,#0x5c]
0000a0  b00a              ADD      sp,sp,#0x28
0000a2  f2420060          MOV      r0,#0x2060
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      MSPI_RegisterWrite
                  |L3.174|
;;;268    	}
;;;269    	else if (IS_ACTIVE_MODE_FRQ_HOP1(eSensingMode))
0000ae  f0100f04          TST      r0,#4
;;;270    	{
;;;271    		tSRIC_CFGR_PWM_PRD_t tParam_CFGR_PWM_PRD;
;;;272    		tParam_CFGR_PWM_PRD.tBit.pwm_prd1 = 48;
;;;273    		tParam_CFGR_PWM_PRD.tBit.pwm_prd2 = 48;
;;;274    		MSPI_RegisterWrite((0x030 | MSPI_BROADCAST), tParam_CFGR_PWM_PRD.ulBulk);
;;;275    
;;;276    		tSRIC_CFGR_PHTCR_NUM1_t tParam_CFGR_PHTCR_NUM1;
;;;277    		tParam_CFGR_PHTCR_NUM1.tBit.phtcr_num1_1 = 42;
;;;278    		tParam_CFGR_PHTCR_NUM1.tBit.phtcr_num1_2 = 42;
;;;279    		MSPI_RegisterWrite((0x03C | MSPI_BROADCAST), tParam_CFGR_PHTCR_NUM1.ulBulk);
;;;280    
;;;281    		tSRIC_CFGR_PHTCR_NUM2_t tParam_CFGR_PHTCR_NUM2;
;;;282    		tParam_CFGR_PHTCR_NUM2.tBit.phtcr_num2_1 = 32;
;;;283    		tParam_CFGR_PHTCR_NUM2.tBit.phtcr_num2_2 = 32;
;;;284    		MSPI_RegisterWrite((0x040 | MSPI_BROADCAST), tParam_CFGR_PHTCR_NUM2.ulBulk);
;;;285    
;;;286    		tSRIC_CFGR_VCR_NUM1_t tParam_CFGR_VCR_NUM1;
;;;287    		tParam_CFGR_VCR_NUM1.tBit.vcr_num1_1 = 38;
;;;288    		tParam_CFGR_VCR_NUM1.tBit.vcr_num1_2 = 38;
;;;289    		MSPI_RegisterWrite((0x044 | MSPI_BROADCAST), tParam_CFGR_VCR_NUM1.ulBulk);
;;;290    
;;;291    		tSRIC_CFGR_VCR_EN_NUM1_t tParam_CFGR_VCR_EN_NUM1;
;;;292    		tParam_CFGR_VCR_EN_NUM1.tBit.vcr_en_num1_1 = 46;
;;;293    		tParam_CFGR_VCR_EN_NUM1.tBit.vcr_en_num1_2 = 46;
;;;294    		MSPI_RegisterWrite((0x048 | MSPI_BROADCAST), tParam_CFGR_VCR_EN_NUM1.ulBulk);
;;;295    
;;;296    		tSRIC_CFGR_PHTH0_NUM1_t tParam_CFGR_PHTH0_NUM1;
;;;297    		tParam_CFGR_PHTH0_NUM1.tBit.phth0_num1_1 = 10;
;;;298    		tParam_CFGR_PHTH0_NUM1.tBit.phth0_num1_2 = 10;
;;;299    		MSPI_RegisterWrite((0x050 | MSPI_BROADCAST), tParam_CFGR_PHTH0_NUM1.ulBulk);
;;;300    
;;;301    		tSRIC_CFGR_PHTH1_NUM1_t tParam_CFGR_PHTH1_NUM1;
;;;302    		tParam_CFGR_PHTH1_NUM1.tBit.phth1_num1_1 = 10;
;;;303    		tParam_CFGR_PHTH1_NUM1.tBit.phth1_num1_2 = 10;
;;;304    		MSPI_RegisterWrite((0x054 | MSPI_BROADCAST), tParam_CFGR_PHTH1_NUM1.ulBulk);
;;;305    
;;;306    		tSRIC_CFGR_PHTH_NUM2_t tParam_CFGR_PHTH_NUM2;
;;;307    		tParam_CFGR_PHTH_NUM2.tBit.phth0_num2 = 1;
;;;308    		tParam_CFGR_PHTH_NUM2.tBit.phth1_num2 = 30;
;;;309    		MSPI_RegisterWrite((0x058 | MSPI_BROADCAST), tParam_CFGR_PHTH_NUM2.ulBulk);
;;;310    
;;;311    		tSRIC_CFGR_PHT_NUM1_t tParam_CFGR_PHT_NUM1;
;;;312    		tParam_CFGR_PHT_NUM1.tBit.pht_num1 = 20;
;;;313    		tParam_CFGR_PHT_NUM1.tBit.pht_num2 = 12;
;;;314    		MSPI_RegisterWrite((0x060 | MSPI_BROADCAST), tParam_CFGR_PHT_NUM1.ulBulk);
;;;315    	}
;;;316    }
0000b2  bf04              ITT      EQ
0000b4  b00a              ADDEQ    sp,sp,#0x28
0000b6  bd10              POPEQ    {r4,pc}
0000b8  f8bd0000          LDRH     r0,[sp,#0]            ;272
0000bc  f4004070          AND      r0,r0,#0xf000         ;272
0000c0  3030              ADDS     r0,r0,#0x30           ;272
0000c2  f8ad0000          STRH     r0,[sp,#0]            ;272
0000c6  f8bd0001          LDRH     r0,[sp,#1]            ;273
0000ca  f000000f          AND      r0,r0,#0xf            ;273
0000ce  f5007040          ADD      r0,r0,#0x300          ;273
0000d2  f8ad0001          STRH     r0,[sp,#1]            ;273
0000d6  9900              LDR      r1,[sp,#0]            ;274
0000d8  f2420030          MOV      r0,#0x2030            ;274
0000dc  f7fffffe          BL       MSPI_RegisterWrite
0000e0  f8bd0004          LDRH     r0,[sp,#4]            ;277
0000e4  f4004070          AND      r0,r0,#0xf000         ;277
0000e8  302a              ADDS     r0,r0,#0x2a           ;277
0000ea  f8ad0004          STRH     r0,[sp,#4]            ;277
0000ee  f8bd0005          LDRH     r0,[sp,#5]            ;278
0000f2  f000000f          AND      r0,r0,#0xf            ;278
0000f6  f5007028          ADD      r0,r0,#0x2a0          ;278
0000fa  f8ad0005          STRH     r0,[sp,#5]            ;278
0000fe  9901              LDR      r1,[sp,#4]            ;279
000100  f242003c          MOV      r0,#0x203c            ;279
000104  f7fffffe          BL       MSPI_RegisterWrite
000108  f8bd0008          LDRH     r0,[sp,#8]            ;282
00010c  f4004070          AND      r0,r0,#0xf000         ;282
000110  3020              ADDS     r0,r0,#0x20           ;282
000112  f8ad0008          STRH     r0,[sp,#8]            ;282
000116  f8bd0009          LDRH     r0,[sp,#9]            ;283
00011a  f000000f          AND      r0,r0,#0xf            ;283
00011e  f5007000          ADD      r0,r0,#0x200          ;283
000122  f8ad0009          STRH     r0,[sp,#9]            ;283
000126  9902              LDR      r1,[sp,#8]            ;284
000128  f44f5001          MOV      r0,#0x2040            ;284
00012c  f7fffffe          BL       MSPI_RegisterWrite
000130  f8bd000c          LDRH     r0,[sp,#0xc]          ;287
000134  f4004070          AND      r0,r0,#0xf000         ;287
000138  3026              ADDS     r0,r0,#0x26           ;287
00013a  f8ad000c          STRH     r0,[sp,#0xc]          ;287
00013e  f8bd000d          LDRH     r0,[sp,#0xd]          ;288
000142  f000000f          AND      r0,r0,#0xf            ;288
000146  f5007018          ADD      r0,r0,#0x260          ;288
00014a  f8ad000d          STRH     r0,[sp,#0xd]          ;288
00014e  9903              LDR      r1,[sp,#0xc]          ;289
000150  f2420044          MOV      r0,#0x2044            ;289
000154  f7fffffe          BL       MSPI_RegisterWrite
000158  f8bd0010          LDRH     r0,[sp,#0x10]         ;292
00015c  f4004070          AND      r0,r0,#0xf000         ;292
000160  302e              ADDS     r0,r0,#0x2e           ;292
000162  f8ad0010          STRH     r0,[sp,#0x10]         ;292
000166  f8bd0011          LDRH     r0,[sp,#0x11]         ;293
00016a  f000000f          AND      r0,r0,#0xf            ;293
00016e  f5007038          ADD      r0,r0,#0x2e0          ;293
000172  f8ad0011          STRH     r0,[sp,#0x11]         ;293
000176  9904              LDR      r1,[sp,#0x10]         ;294
000178  f2420048          MOV      r0,#0x2048            ;294
00017c  f7fffffe          BL       MSPI_RegisterWrite
000180  f8bd0014          LDRH     r0,[sp,#0x14]         ;297
000184  f4004070          AND      r0,r0,#0xf000         ;297
000188  300a              ADDS     r0,r0,#0xa            ;297
00018a  f8ad0014          STRH     r0,[sp,#0x14]         ;297
00018e  f8bd0015          LDRH     r0,[sp,#0x15]         ;298
000192  f000000f          AND      r0,r0,#0xf            ;298
000196  30a0              ADDS     r0,r0,#0xa0           ;298
000198  f8ad0015          STRH     r0,[sp,#0x15]         ;298
00019c  9905              LDR      r1,[sp,#0x14]         ;299
00019e  f2420050          MOV      r0,#0x2050            ;299
0001a2  f7fffffe          BL       MSPI_RegisterWrite
0001a6  f8bd0018          LDRH     r0,[sp,#0x18]         ;302
0001aa  f4004070          AND      r0,r0,#0xf000         ;302
0001ae  300a              ADDS     r0,r0,#0xa            ;302
0001b0  f8ad0018          STRH     r0,[sp,#0x18]         ;302
0001b4  f8bd0019          LDRH     r0,[sp,#0x19]         ;303
0001b8  f000000f          AND      r0,r0,#0xf            ;303
0001bc  30a0              ADDS     r0,r0,#0xa0           ;303
0001be  f8ad0019          STRH     r0,[sp,#0x19]         ;303
0001c2  9906              LDR      r1,[sp,#0x18]         ;304
0001c4  f2420054          MOV      r0,#0x2054            ;304
0001c8  f7fffffe          BL       MSPI_RegisterWrite
0001cc  f8bd001c          LDRH     r0,[sp,#0x1c]         ;307
0001d0  f4004070          AND      r0,r0,#0xf000         ;307
0001d4  1c40              ADDS     r0,r0,#1              ;307
0001d6  f8ad001c          STRH     r0,[sp,#0x1c]         ;307
0001da  f8bd001d          LDRH     r0,[sp,#0x1d]         ;308
0001de  f000000f          AND      r0,r0,#0xf            ;308
0001e2  f50070f0          ADD      r0,r0,#0x1e0          ;308
0001e6  f8ad001d          STRH     r0,[sp,#0x1d]         ;308
0001ea  9907              LDR      r1,[sp,#0x1c]         ;309
0001ec  f2420058          MOV      r0,#0x2058            ;309
0001f0  f7fffffe          BL       MSPI_RegisterWrite
0001f4  f8bd0020          LDRH     r0,[sp,#0x20]         ;312
0001f8  f4004070          AND      r0,r0,#0xf000         ;312
0001fc  3014              ADDS     r0,r0,#0x14           ;312
0001fe  f8ad0020          STRH     r0,[sp,#0x20]         ;312
000202  f8bd0021          LDRH     r0,[sp,#0x21]         ;313
000206  f000000f          AND      r0,r0,#0xf            ;313
00020a  30c0              ADDS     r0,r0,#0xc0           ;313
00020c  f8ad0021          STRH     r0,[sp,#0x21]         ;313
000210  9908              LDR      r1,[sp,#0x20]         ;314
000212  b00a              ADD      sp,sp,#0x28           ;314
000214  f2420060          MOV      r0,#0x2060            ;314
000218  e8bd4010          POP      {r4,lr}               ;314
00021c  f7ffbffe          B.W      MSPI_RegisterWrite
;;;317    
                          ENDP

                  |L3.544|
                          DCD      ||.data||

                          AREA ||i.SW97500_Reg_CRTuneSetting||, CODE, READONLY, ALIGN=2

                  SW97500_Reg_CRTuneSetting PROC
;;;166    
;;;167    static bool_t SW97500_Reg_CRTuneSetting(eROIC_REG_SET_CHANGE_MODE_t eMode)
000000  b570              PUSH     {r4-r6,lr}
;;;168    {
;;;169    	bool_t bReg = YES;
;;;170    	MSPI_RegisterShareModeMultiWrite((0x100 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX1_1[0].ulBulk);
000002  4c6c              LDR      r4,|L4.436|
000004  4606              MOV      r6,r0                 ;168
000006  2501              MOVS     r5,#1                 ;169
000008  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00000a  f1000184          ADD      r1,r0,#0x84
00000e  0228              LSLS     r0,r5,#8
000010  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;171    	MSPI_RegisterShareModeMultiWrite((0x104 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX1_2[0].ulBulk);
000014  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000016  f10001a4          ADD      r1,r0,#0xa4
00001a  f44f7082          MOV      r0,#0x104
00001e  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;172    	MSPI_RegisterShareModeMultiWrite((0x108 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX2[0].ulBulk);
000022  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000024  f10001c4          ADD      r1,r0,#0xc4
000028  f44f7084          MOV      r0,#0x108
00002c  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;173    	MSPI_RegisterShareModeMultiWrite((0x10C | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX3[0].ulBulk);
000030  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000032  f10001e4          ADD      r1,r0,#0xe4
000036  f44f7086          MOV      r0,#0x10c
00003a  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;174    	MSPI_RegisterShareModeMultiWrite((0x110 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX4[0].ulBulk);
00003e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000040  f5007182          ADD      r1,r0,#0x104
000044  f44f7088          MOV      r0,#0x110
000048  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;175    	MSPI_RegisterShareModeMultiWrite((0x114 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX5[0].ulBulk);
00004c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00004e  f5007192          ADD      r1,r0,#0x124
000052  f44f708a          MOV      r0,#0x114
000056  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;176    	MSPI_RegisterShareModeMultiWrite((0x118 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX6[0].ulBulk);
00005a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00005c  f50071a2          ADD      r1,r0,#0x144
000060  f44f708c          MOV      r0,#0x118
000064  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;177    	MSPI_RegisterShareModeMultiWrite((0x11C | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX7[0].ulBulk);
000068  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00006a  f50071b2          ADD      r1,r0,#0x164
00006e  f44f708e          MOV      r0,#0x11c
000072  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;178    	MSPI_RegisterShareModeMultiWrite((0x120 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX8[0].ulBulk);
000076  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000078  f50071c2          ADD      r1,r0,#0x184
00007c  f44f7090          MOV      r0,#0x120
000080  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;179    	MSPI_RegisterShareModeMultiWrite((0x124 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX9[0].ulBulk);
000084  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000086  f50071d2          ADD      r1,r0,#0x1a4
00008a  f44f7092          MOV      r0,#0x124
00008e  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;180    	MSPI_RegisterShareModeMultiWrite((0x128 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX10_1[0].ulBulk);
000092  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000094  f50071e2          ADD      r1,r0,#0x1c4
000098  f44f7094          MOV      r0,#0x128
00009c  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;181    	MSPI_RegisterShareModeMultiWrite((0x12C | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR1_MUX10_2[0].ulBulk);
0000a0  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000a2  f50071f2          ADD      r1,r0,#0x1e4
0000a6  f44f7096          MOV      r0,#0x12c
0000aa  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;182    
;;;183    	MSPI_RegisterShareModeMultiWrite((0x100 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX1_1[0].ulBulk);
0000ae  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000b0  f5007101          ADD      r1,r0,#0x204
0000b4  f44f6010          MOV      r0,#0x900
0000b8  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;184    	MSPI_RegisterShareModeMultiWrite((0x104 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX1_2[0].ulBulk);
0000bc  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000be  f5007109          ADD      r1,r0,#0x224
0000c2  f6401004          MOV      r0,#0x904
0000c6  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;185    	MSPI_RegisterShareModeMultiWrite((0x108 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX2[0].ulBulk);
0000ca  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000cc  f5007111          ADD      r1,r0,#0x244
0000d0  f6401008          MOV      r0,#0x908
0000d4  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;186    	MSPI_RegisterShareModeMultiWrite((0x10C | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX3[0].ulBulk);
0000d8  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000da  f5007119          ADD      r1,r0,#0x264
0000de  f640100c          MOV      r0,#0x90c
0000e2  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;187    	MSPI_RegisterShareModeMultiWrite((0x110 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX4[0].ulBulk);
0000e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000e8  f5007121          ADD      r1,r0,#0x284
0000ec  f44f6011          MOV      r0,#0x910
0000f0  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;188    	MSPI_RegisterShareModeMultiWrite((0x114 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX5[0].ulBulk);
0000f4  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000f6  f5007129          ADD      r1,r0,#0x2a4
0000fa  f6401014          MOV      r0,#0x914
0000fe  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;189    	MSPI_RegisterShareModeMultiWrite((0x118 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX6[0].ulBulk);
000102  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000104  f5007131          ADD      r1,r0,#0x2c4
000108  f6401018          MOV      r0,#0x918
00010c  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;190    	MSPI_RegisterShareModeMultiWrite((0x11C | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX7[0].ulBulk);
000110  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000112  f5007139          ADD      r1,r0,#0x2e4
000116  f640101c          MOV      r0,#0x91c
00011a  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;191    	MSPI_RegisterShareModeMultiWrite((0x120 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX8[0].ulBulk);
00011e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000120  f5007141          ADD      r1,r0,#0x304
000124  f44f6012          MOV      r0,#0x920
000128  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;192    	MSPI_RegisterShareModeMultiWrite((0x124 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX9[0].ulBulk);
00012c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00012e  f5007149          ADD      r1,r0,#0x324
000132  f6401024          MOV      r0,#0x924
000136  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;193    	MSPI_RegisterShareModeMultiWrite((0x128 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX10_1[0].ulBulk);
00013a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00013c  f5007151          ADD      r1,r0,#0x344
000140  f6401028          MOV      r0,#0x928
000144  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;194    	MSPI_RegisterShareModeMultiWrite((0x12C | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR1_MUX10_2[0].ulBulk);
000148  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00014a  f5007159          ADD      r1,r0,#0x364
00014e  f640102c          MOV      r0,#0x92c
000152  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;195    
;;;196    	if(eMode == ROIC_REG_SET_CHAGNE_CR_TUNE)
000156  2e01              CMP      r6,#1
000158  d129              BNE      |L4.430|
;;;197    	{
;;;198    		MSPI_RegisterShareModeMultiWrite((0x130 | MSPI_ROIC_LEFT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R0_CR_M1_LTUNE[0].ulBulk);
00015a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00015c  f5007161          ADD      r1,r0,#0x384
000160  f44f7098          MOV      r0,#0x130
000164  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;199    		MSPI_RegisterShareModeMultiWrite((0x130 | MSPI_ROIC_RIGHT), (uint32_t *)&s_pktmoduleSRICCommonConf->tParam_R1_CR_M1_LTUNE[0].ulBulk);
000168  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00016a  f5007169          ADD      r1,r0,#0x3a4
00016e  f44f6013          MOV      r0,#0x930
000172  f7fffffe          BL       MSPI_RegisterShareModeMultiWrite
;;;200    
;;;201    		MSPI_RegisterWrite((0x134 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk);
000176  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000178  f8d013c4          LDR      r1,[r0,#0x3c4]
00017c  f2421034          MOV      r0,#0x2134
000180  f7fffffe          BL       MSPI_RegisterWrite
;;;202    		MSPI_RegisterWrite((0x138 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_TUNE_LOWER.ulBulk);
000184  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000186  f8d013c8          LDR      r1,[r0,#0x3c8]
00018a  f2421038          MOV      r0,#0x2138
00018e  f7fffffe          BL       MSPI_RegisterWrite
;;;203    		MSPI_RegisterWrite((0x13C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_TUNE_UPPER.ulBulk);
000192  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000194  f8d013cc          LDR      r1,[r0,#0x3cc]
000198  f242103c          MOV      r0,#0x213c
00019c  f7fffffe          BL       MSPI_RegisterWrite
;;;204    		MSPI_RegisterWrite((0x140 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_TUNE_GROUP.ulBulk);
0001a0  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001a2  f8d013d0          LDR      r1,[r0,#0x3d0]
0001a6  f44f5005          MOV      r0,#0x2140
0001aa  f7fffffe          BL       MSPI_RegisterWrite
                  |L4.430|
;;;205    	}
;;;206    
;;;207    	return bReg;
0001ae  4628              MOV      r0,r5
;;;208    }
0001b0  bd70              POP      {r4-r6,pc}
;;;209    
                          ENDP

0001b2  0000              DCW      0x0000
                  |L4.436|
                          DCD      ||.data||

                          AREA ||i.SW97500_RegisterInit||, CODE, READONLY, ALIGN=2

                  SW97500_RegisterInit PROC
;;;370    tSRIC_CFGR_PRODUCT_ID_t tTestProductROICBuf[MSPI_NUM] = {0,};
;;;371    bool_t SW97500_RegisterInit(eSENSING_MODE_t eSensingMode)
000000  b538              PUSH     {r3-r5,lr}
;;;372    {
;;;373    #if USED_SRIC_REG_INIT_RETRY
;;;374    //	uint32_t ulMSPI_Idx;
;;;375    	tSRIC_SPIS_CFG_t tSRIC_SPIS_CFG;
;;;376    	// tSRIC_CFGR_SYS_CFG_t tSRIC_CFGR_SYS_CFG;
;;;377    
;;;378    	MSPI_RegisterRead((uint32_t)(0x0000), (uint32_t *)&tTestProductROICBuf[0], MSPI_READ_SM0_R0);
000002  2201              MOVS     r2,#1
000004  494e              LDR      r1,|L5.320|
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       MSPI_RegisterRead
;;;379    
;;;380    	tSRIC_SPIS_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk;
00000c  4c4d              LDR      r4,|L5.324|
00000e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000010  6800              LDR      r0,[r0,#0]
000012  9000              STR      r0,[sp,#0]
;;;381    	tSRIC_SPIS_CFG.tBit.spis_irq_en = 0;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0200001          BIC      r0,r0,#1
00001c  f88d0000          STRB     r0,[sp,#0]
;;;382    	MSPI_RegisterWrite((0x004 | MSPI_BROADCAST), tSRIC_SPIS_CFG.ulBulk);
000020  9900              LDR      r1,[sp,#0]
000022  f2420004          MOV      r0,#0x2004
000026  f7fffffe          BL       MSPI_RegisterWrite
;;;383    	MSPI_RegisterWrite((0x004 | MSPI_ROIC_RIGHT | MSPI_NORMALMODE), s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk);
00002a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00002c  6801              LDR      r1,[r0,#0]
00002e  f6400004          MOV      r0,#0x804
000032  f7fffffe          BL       MSPI_RegisterWrite
;;;384    
;;;385    	// tSRIC_CFGR_SYS_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_SYS_CFG.ulBulk;
;;;386    	// tSRIC_CFGR_SYS_CFG.tBit.buf_clk_on = 0;
;;;387    	// tSRIC_CFGR_SYS_CFG.tBit.tg_clk_all_on = 0;
;;;388    	// MSPI_RegisterWrite((0x010 | MSPI_BROADCAST), tSRIC_CFGR_SYS_CFG.ulBulk);
;;;389    
;;;390    
;;;391    //	{
;;;392    //		MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM0_R1); // (0x004 | MSPI_ROIC_RIGHT | MSPI_NORMALMODE)
;;;393    //		for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;394    //		{
;;;395    //			if(ulReadBuf[ulMSPI_Idx] != s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk)
;;;396    //			{
;;;397    //				return NO;
;;;398    //			}
;;;399    //		}
;;;400    //
;;;401    //		MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM1_R0);
;;;402    //		for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;403    //		{
;;;404    //			if(ulReadBuf[ulMSPI_Idx] != 0x00)
;;;405    //			{
;;;406    //				return NO;
;;;407    //			}
;;;408    //		}
;;;409    //
;;;410    //		MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM1_R1);
;;;411    //		for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;412    //		{
;;;413    //			if(ulReadBuf[ulMSPI_Idx] != 0x00)
;;;414    //			{
;;;415    //				return NO;
;;;416    //			}
;;;417    //		}
;;;418    //	}
;;;419    
;;;420    		MSPI_RegisterWrite((0x008 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_SPIS_ERROR_CLR.ulBulk);
000036  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000038  6841              LDR      r1,[r0,#4]
00003a  f2420008          MOV      r0,#0x2008
00003e  f7fffffe          BL       MSPI_RegisterWrite
;;;421    
;;;422    		MSPI_RegisterWrite((0x01C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_CH_EN.ulBulk);
000042  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000044  6981              LDR      r1,[r0,#0x18]
000046  f242001c          MOV      r0,#0x201c
00004a  f7fffffe          BL       MSPI_RegisterWrite
;;;423    		if(SW97500_Register_Check(0x01C, s_pktmoduleSRICCommonConf->tParam_CFGR_CH_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
00004e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000050  6981              LDR      r1,[r0,#0x18]
000052  2300              MOVS     r3,#0
000054  461a              MOV      r2,r3
000056  201c              MOVS     r0,#0x1c
000058  f7fffffe          BL       SW97500_Register_Check
00005c  2800              CMP      r0,#0
;;;424    		{
;;;425    			return NO;
;;;426    		}
;;;427    
;;;428    		MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
;;;429    		if(SW97500_Register_Check(0x020, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;430    		{
;;;431    			return NO;
;;;432    		}
;;;433    
;;;434    		MSPI_RegisterWrite((0x024 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk);
;;;435    		if(SW97500_Register_Check(0x024, s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;436    		{
;;;437    			return NO;
;;;438    		}
;;;439    
;;;440    	#if USED_NOISE_HOPPING_FREQ
;;;441    		SW97500_Reg_AFESetting(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
;;;442    //		if(SW97500_Reg_AFESetting_RWCheck(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE) == NO)
;;;443    //		{
;;;444    //			return NO;
;;;445    //		}
;;;446    	#else /* USED_NOISE_HOPPING_FREQ */
;;;447    			MSPI_RegisterWrite((0x030 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_PRD.ulBulk);
;;;448    			MSPI_RegisterWrite((0x034 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SMPL_CTL.ulBulk);
;;;449    			MSPI_RegisterWrite((0x038 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_RSTP_NUM1.ulBulk);
;;;450    			MSPI_RegisterWrite((0x03C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM1.ulBulk);
;;;451    			MSPI_RegisterWrite((0x040 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM2.ulBulk);
;;;452    			MSPI_RegisterWrite((0x044 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_NUM1.ulBulk);
;;;453    			MSPI_RegisterWrite((0x048 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM1.ulBulk);
;;;454    			MSPI_RegisterWrite((0x04C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM2.ulBulk);
;;;455    			MSPI_RegisterWrite((0x050 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH0_NUM1.ulBulk);
;;;456    			MSPI_RegisterWrite((0x054 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH1_NUM1.ulBulk);
;;;457    			MSPI_RegisterWrite((0x058 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH_NUM2.ulBulk);
;;;458    			MSPI_RegisterWrite((0x05C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_CTL.ulBulk);
;;;459    			MSPI_RegisterWrite((0x060 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_NUM1.ulBulk);
;;;460    	#endif /* USED_NOISE_HOPPING_FREQ */
;;;461    
;;;462    		// PWM
;;;463    		MSPI_RegisterWrite((0x028 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_CTL.ulBulk);
;;;464    		if(SW97500_Register_Check(0x028, s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_CTL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;465    		{
;;;466    			return NO;
;;;467    		}
;;;468    
;;;469    		MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
;;;470    		if(SW97500_Register_Check(0x020, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;471    		{
;;;472    			return NO;
;;;473    		}
;;;474    
;;;475    		MSPI_RegisterWrite((0x064 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_ADC_CTRL.ulBulk);
;;;476    //		if(SW97500_Register_Check(0x064, s_pktmoduleSRICCommonConf->tParam_CFGR_ADC_CTRL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;477    //		{
;;;478    //			return NO;
;;;479    //		}
;;;480    
;;;481    		// Pad Off
;;;482    		MSPI_RegisterWrite((0x06C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk);
;;;483    
;;;484    		MSPI_RegisterWrite((0x14C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SSU_PW_CTRL.ulBulk);
;;;485    //		if(SW97500_Register_Check(0x14C, s_pktmoduleSRICCommonConf->tParam_CFGR_SSU_PW_CTRL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;486    //		{
;;;487    //			return NO;
;;;488    //		}
;;;489    
;;;490    		MSPI_RegisterWrite((0x078 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_00.ulBulk);
;;;491    //		if(SW97500_Register_Check(0x078, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_00.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;492    //		{
;;;493    //			return NO;
;;;494    //		}
;;;495    
;;;496    		MSPI_RegisterWrite((0x07C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_01.ulBulk);
;;;497    //		if(SW97500_Register_Check(0x07C, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_01.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL) == NO)
;;;498    //		{
;;;499    //			return NO;
;;;500    //		}
;;;501    
;;;502    		MSPI_RegisterWrite((0x144 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk);
;;;503    
;;;504    		SW97500_Reg_CRTuneSetting(ROIC_REG_SET_CHAGNE_CR_TUNE);
;;;505    
;;;506    	return YES;
;;;507    
;;;508    #else /* USED_SRIC_REG_INIT_RETRY */
;;;509    	//	bool_t bReg = YES;
;;;510    	#if SRIC_REGISTER_RW_CHECK
;;;511    		uint32_t ulMSPI_Idx;
;;;512    		bGlobal_Reg = YES;
;;;513    	#endif
;;;514    		tSRIC_SPIS_CFG_t tSRIC_SPIS_CFG;
;;;515    		MSPI_RegisterRead((uint32_t)(0x0000), (uint32_t *)&tTestProductROICBuf[0], MSPI_READ_SM0_R0);
;;;516    
;;;517    		tSRIC_SPIS_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk;
;;;518    		tSRIC_SPIS_CFG.tBit.spis_irq_en = 0;
;;;519    		MSPI_RegisterWrite((0x004 | MSPI_BROADCAST), tSRIC_SPIS_CFG.ulBulk);
;;;520    		MSPI_RegisterWrite((0x004 | MSPI_ROIC_RIGHT | MSPI_NORMALMODE), s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk);
;;;521    	#if SRIC_REGISTER_RW_CHECK
;;;522    		if(bGlobal_Reg)
;;;523    		{
;;;524    			MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM0_R0);
;;;525    			for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;526    			{
;;;527    				if(ulReadBuf[ulMSPI_Idx] != 0x00)
;;;528    				{
;;;529    					bGlobal_Reg = FALSE;
;;;530    					_gT(_GPIO_TP_INTR);
;;;531    				}
;;;532    			}
;;;533    		}
;;;534    
;;;535    		if(bGlobal_Reg)
;;;536    		{
;;;537    			MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM0_R1); // (0x004 | MSPI_ROIC_RIGHT | MSPI_NORMALMODE)
;;;538    			for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;539    			{
;;;540    				if(ulReadBuf[ulMSPI_Idx] != s_pktmoduleSRICCommonConf->tParam_SPIS_CFG.ulBulk)
;;;541    				{
;;;542    					bGlobal_Reg = FALSE;
;;;543    					_gT(_GPIO_TP_INTR);
;;;544    				}
;;;545    			}
;;;546    		}
;;;547    
;;;548    		if(bGlobal_Reg)
;;;549    		{
;;;550    			MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM1_R0);
;;;551    			for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;552    			{
;;;553    				if(ulReadBuf[ulMSPI_Idx] != 0x00)
;;;554    				{
;;;555    					bGlobal_Reg = FALSE;
;;;556    					_gT(_GPIO_TP_INTR);
;;;557    				}
;;;558    			}
;;;559    		}
;;;560    
;;;561    		if(bGlobal_Reg)
;;;562    		{
;;;563    			MSPI_RegisterRead(0x004, &ulReadBuf[0], MSPI_READ_SM1_R1);
;;;564    			for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;565    			{
;;;566    				if(ulReadBuf[ulMSPI_Idx] != 0x00)
;;;567    				{
;;;568    					bGlobal_Reg = FALSE;
;;;569    					_gT(_GPIO_TP_INTR);
;;;570    				}
;;;571    			}
;;;572    		}
;;;573    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;574    
;;;575    	//	tSRIC_SPIS_ERROR_CLR.tBit.pwm_fault_clr = 1;
;;;576    	//	tSRIC_SPIS_ERROR_CLR.tBit.spi_chksum_clr = 1;
;;;577    	//	tSRIC_SPIS_ERROR_CLR.tBit.tsync_fault_clr = 1;
;;;578    	//	MSPI_RegisterWrite((0x008 | MSPI_BROADCAST), tSRIC_SPIS_ERROR_CLR.ulBulk);
;;;579    		MSPI_RegisterWrite((0x008 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_SPIS_ERROR_CLR.ulBulk);
;;;580    
;;;581    		MSPI_RegisterWrite((0x01C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_CH_EN.ulBulk);
;;;582    	#if SRIC_REGISTER_RW_CHECK
;;;583    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x01C, s_pktmoduleSRICCommonConf->tParam_CFGR_CH_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;584    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;585    
;;;586    		MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
;;;587    	#if SRIC_REGISTER_RW_CHECK
;;;588    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x020, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;589    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;590    
;;;591    		MSPI_RegisterWrite((0x024 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk);
;;;592    	#if SRIC_REGISTER_RW_CHECK
;;;593    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x024, s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;594    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;595    
;;;596    	#if USED_NOISE_HOPPING_FREQ
;;;597    		SW97500_Reg_AFESetting(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
;;;598    	#if SRIC_REGISTER_RW_CHECK
;;;599    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Reg_AFESetting_RWCheck(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
;;;600    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;601    	#else /* USED_NOISE_HOPPING_FREQ */
;;;602    			MSPI_RegisterWrite((0x030 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_PRD.ulBulk);
;;;603    		#if SRIC_REGISTER_RW_CHECK
;;;604    			SW97500_Register_Check(0x030, s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_PRD.ulBulk);
;;;605    			delay_msec(1);
;;;606    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;607    
;;;608    			MSPI_RegisterWrite((0x034 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SMPL_CTL.ulBulk);
;;;609    
;;;610    			MSPI_RegisterWrite((0x038 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_RSTP_NUM1.ulBulk);
;;;611    		#if SRIC_REGISTER_RW_CHECK
;;;612    			SW97500_Register_Check(0x038, s_pktmoduleSRICCommonConf->tParam_CFGR_RSTP_NUM1.ulBulk);
;;;613    			delay_msec(1);
;;;614    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;615    
;;;616    			MSPI_RegisterWrite((0x03C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM1.ulBulk);
;;;617    		#if SRIC_REGISTER_RW_CHECK
;;;618    			SW97500_Register_Check(0x03C, s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM1.ulBulk);
;;;619    			delay_msec(1);
;;;620    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;621    
;;;622    			MSPI_RegisterWrite((0x040 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM2.ulBulk);
;;;623    		#if SRIC_REGISTER_RW_CHECK
;;;624    			SW97500_Register_Check(0x040, s_pktmoduleSRICCommonConf->tParam_CFGR_PHTCR_NUM2.ulBulk);
;;;625    			delay_msec(1);
;;;626    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;627    
;;;628    			MSPI_RegisterWrite((0x044 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_NUM1.ulBulk);
;;;629    		#if SRIC_REGISTER_RW_CHECK
;;;630    			SW97500_Register_Check(0x044, s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_NUM1.ulBulk);
;;;631    			delay_msec(1);
;;;632    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;633    
;;;634    			MSPI_RegisterWrite((0x048 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM1.ulBulk);
;;;635    		#if SRIC_REGISTER_RW_CHECK
;;;636    			SW97500_Register_Check(0x048, s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM1.ulBulk);
;;;637    			delay_msec(1);
;;;638    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;639    
;;;640    			MSPI_RegisterWrite((0x04C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM2.ulBulk);
;;;641    		#if SRIC_REGISTER_RW_CHECK
;;;642    			SW97500_Register_Check(0x04C, s_pktmoduleSRICCommonConf->tParam_CFGR_VCR_EN_NUM2.ulBulk);
;;;643    			delay_msec(1);
;;;644    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;645    
;;;646    			MSPI_RegisterWrite((0x050 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH0_NUM1.ulBulk);
;;;647    		#if SRIC_REGISTER_RW_CHECK
;;;648    			SW97500_Register_Check(0x050, s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH0_NUM1.ulBulk);
;;;649    			delay_msec(1);
;;;650    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;651    
;;;652    			MSPI_RegisterWrite((0x054 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH1_NUM1.ulBulk);
;;;653    		#if SRIC_REGISTER_RW_CHECK
;;;654    			SW97500_Register_Check(0x054, s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH1_NUM1.ulBulk);
;;;655    			delay_msec(1);
;;;656    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;657    
;;;658    
;;;659    			MSPI_RegisterWrite((0x058 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHTH_NUM2.ulBulk);
;;;660    
;;;661    			MSPI_RegisterWrite((0x05C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_CTL.ulBulk);
;;;662    		#if SRIC_REGISTER_RW_CHECK
;;;663    			SW97500_Register_Check(0x05C, s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_CTL.ulBulk);
;;;664    			delay_msec(1);
;;;665    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;666    
;;;667    			MSPI_RegisterWrite((0x060 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_NUM1.ulBulk);
;;;668    		#if SRIC_REGISTER_RW_CHECK
;;;669    			SW97500_Register_Check(0x060, s_pktmoduleSRICCommonConf->tParam_CFGR_PHT_NUM1.ulBulk);
;;;670    			delay_msec(1);
;;;671    		#endif /* SRIC_REGISTER_RW_CHECK */
;;;672    	#endif /* USED_NOISE_HOPPING_FREQ */
;;;673    
;;;674    		// PWM
;;;675    		MSPI_RegisterWrite((0x028 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_CTL.ulBulk);
;;;676    
;;;677    	#if SRIC_REGISTER_RW_CHECK
;;;678    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x028, s_pktmoduleSRICCommonConf->tParam_CFGR_PWM_CTL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;679    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;680    
;;;681    		MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
;;;682    	#if SRIC_REGISTER_RW_CHECK
;;;683    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x020, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;684    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;685    
;;;686    		MSPI_RegisterWrite((0x064 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_ADC_CTRL.ulBulk);
;;;687    	#if SRIC_REGISTER_RW_CHECK
;;;688    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x064, s_pktmoduleSRICCommonConf->tParam_CFGR_ADC_CTRL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;689    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;690    
;;;691    		// Pad Off
;;;692    		MSPI_RegisterWrite((0x06C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk);
;;;693    
;;;694    		MSPI_RegisterWrite((0x14C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SSU_PW_CTRL.ulBulk);
;;;695    	#if SRIC_REGISTER_RW_CHECK
;;;696    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x14C, s_pktmoduleSRICCommonConf->tParam_CFGR_SSU_PW_CTRL.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;697    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;698    
;;;699    		MSPI_RegisterWrite((0x078 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_00.ulBulk);
;;;700    	#if SRIC_REGISTER_RW_CHECK
;;;701    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x078, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_00.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;702    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;703    
;;;704    		MSPI_RegisterWrite((0x07C | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_01.ulBulk);
;;;705    	#if SRIC_REGISTER_RW_CHECK
;;;706    		if(bGlobal_Reg) bGlobal_Reg = SW97500_Register_Check(0x07C, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_01.ulBulk, NULL, REG_RW_CHECK_TYPE_ALL);
;;;707    	#endif /* SRIC_REGISTER_RW_CHECK */
;;;708    
;;;709    		MSPI_RegisterWrite((0x144 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk);
;;;710    
;;;711    		SW97500_Reg_CRTuneSetting(ROIC_REG_SET_CHAGNE_CR_TUNE);
;;;712    
;;;713    	#if SRIC_REGISTER_RW_CHECK
;;;714    		return bGlobal_Reg;
;;;715    	#else
;;;716    		return YES;
;;;717    	#endif
;;;718    #endif /* USED_SRIC_REG_INIT_RETRY */
;;;719    }
00005e  bf08              IT       EQ
000060  bd38              POPEQ    {r3-r5,pc}
000062  6820              LDR      r0,[r4,#0]            ;428  ; s_pktmoduleSRICCommonConf
000064  69c1              LDR      r1,[r0,#0x1c]         ;428
000066  f2420020          MOV      r0,#0x2020            ;428
00006a  f7fffffe          BL       MSPI_RegisterWrite
00006e  6820              LDR      r0,[r4,#0]            ;429  ; s_pktmoduleSRICCommonConf
000070  69c1              LDR      r1,[r0,#0x1c]         ;429
000072  2300              MOVS     r3,#0                 ;429
000074  461a              MOV      r2,r3                 ;429
000076  2020              MOVS     r0,#0x20              ;429
000078  f7fffffe          BL       SW97500_Register_Check
00007c  2800              CMP      r0,#0                 ;429
00007e  bf08              IT       EQ
000080  bd38              POPEQ    {r3-r5,pc}
000082  6820              LDR      r0,[r4,#0]            ;434  ; s_pktmoduleSRICCommonConf
000084  6a01              LDR      r1,[r0,#0x20]         ;434
000086  f2420024          MOV      r0,#0x2024            ;434
00008a  f7fffffe          BL       MSPI_RegisterWrite
00008e  6820              LDR      r0,[r4,#0]            ;435  ; s_pktmoduleSRICCommonConf
000090  6a01              LDR      r1,[r0,#0x20]         ;435
000092  2300              MOVS     r3,#0                 ;435
000094  461a              MOV      r2,r3                 ;435
000096  2024              MOVS     r0,#0x24              ;435
000098  f7fffffe          BL       SW97500_Register_Check
00009c  2800              CMP      r0,#0                 ;435
00009e  bf08              IT       EQ
0000a0  bd38              POPEQ    {r3-r5,pc}
0000a2  f2410003          MOV      r0,#0x1003            ;441
0000a6  f7fffffe          BL       SW97500_Reg_AFESetting
0000aa  6820              LDR      r0,[r4,#0]            ;463  ; s_pktmoduleSRICCommonConf
0000ac  6a41              LDR      r1,[r0,#0x24]         ;463
0000ae  f2420028          MOV      r0,#0x2028            ;463
0000b2  f7fffffe          BL       MSPI_RegisterWrite
0000b6  6820              LDR      r0,[r4,#0]            ;464  ; s_pktmoduleSRICCommonConf
0000b8  6a41              LDR      r1,[r0,#0x24]         ;464
0000ba  2300              MOVS     r3,#0                 ;464
0000bc  461a              MOV      r2,r3                 ;464
0000be  2028              MOVS     r0,#0x28              ;464
0000c0  f7fffffe          BL       SW97500_Register_Check
0000c4  2800              CMP      r0,#0                 ;464
0000c6  bf08              IT       EQ
0000c8  bd38              POPEQ    {r3-r5,pc}
0000ca  6820              LDR      r0,[r4,#0]            ;469  ; s_pktmoduleSRICCommonConf
0000cc  69c1              LDR      r1,[r0,#0x1c]         ;469
0000ce  f2420020          MOV      r0,#0x2020            ;469
0000d2  f7fffffe          BL       MSPI_RegisterWrite
0000d6  6820              LDR      r0,[r4,#0]            ;470  ; s_pktmoduleSRICCommonConf
0000d8  69c1              LDR      r1,[r0,#0x1c]         ;470
0000da  2300              MOVS     r3,#0                 ;470
0000dc  461a              MOV      r2,r3                 ;470
0000de  2020              MOVS     r0,#0x20              ;470
0000e0  f7fffffe          BL       SW97500_Register_Check
0000e4  2800              CMP      r0,#0                 ;470
0000e6  bf08              IT       EQ
0000e8  bd38              POPEQ    {r3-r5,pc}
0000ea  6820              LDR      r0,[r4,#0]            ;475  ; s_pktmoduleSRICCommonConf
0000ec  6e01              LDR      r1,[r0,#0x60]         ;475
0000ee  f2420064          MOV      r0,#0x2064            ;475
0000f2  f7fffffe          BL       MSPI_RegisterWrite
0000f6  6820              LDR      r0,[r4,#0]            ;482  ; s_pktmoduleSRICCommonConf
0000f8  6e81              LDR      r1,[r0,#0x68]         ;482
0000fa  f242006c          MOV      r0,#0x206c            ;482
0000fe  f7fffffe          BL       MSPI_RegisterWrite
000102  6820              LDR      r0,[r4,#0]            ;484  ; s_pktmoduleSRICCommonConf
000104  f8d013dc          LDR      r1,[r0,#0x3dc]        ;484
000108  f242104c          MOV      r0,#0x214c            ;484
00010c  f7fffffe          BL       MSPI_RegisterWrite
000110  6820              LDR      r0,[r4,#0]            ;490  ; s_pktmoduleSRICCommonConf
000112  6f41              LDR      r1,[r0,#0x74]         ;490
000114  f2420078          MOV      r0,#0x2078            ;490
000118  f7fffffe          BL       MSPI_RegisterWrite
00011c  6820              LDR      r0,[r4,#0]            ;496  ; s_pktmoduleSRICCommonConf
00011e  6f81              LDR      r1,[r0,#0x78]         ;496
000120  f242007c          MOV      r0,#0x207c            ;496
000124  f7fffffe          BL       MSPI_RegisterWrite
000128  6820              LDR      r0,[r4,#0]            ;502  ; s_pktmoduleSRICCommonConf
00012a  f8d013d4          LDR      r1,[r0,#0x3d4]        ;502
00012e  f2421044          MOV      r0,#0x2144            ;502
000132  f7fffffe          BL       MSPI_RegisterWrite
000136  2001              MOVS     r0,#1                 ;504
000138  f7fffffe          BL       SW97500_Reg_CRTuneSetting
00013c  2001              MOVS     r0,#1                 ;506
00013e  bd38              POP      {r3-r5,pc}
;;;720    
                          ENDP

                  |L5.320|
                          DCD      ||.bss||
                  |L5.324|
                          DCD      ||.data||

                          AREA ||i.SW97500_RegisterSingleWrite||, CODE, READONLY, ALIGN=1

                  SW97500_RegisterSingleWrite PROC
;;;720    
;;;721    void SW97500_RegisterSingleWrite(uint32_t addr,ROICSel_TypeDef type, uint32_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;722    {
000002  4615              MOV      r5,r2
000004  4604              MOV      r4,r0
;;;723    	if (type == RO_LEFT)
000006  2900              CMP      r1,#0
000008  d031              BEQ      |L6.110|
;;;724    	{
;;;725    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_0);
;;;726    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_1);
;;;727    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_2);
;;;728    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_3);
;;;729    	}
;;;730    	else if (type == RO_RIGHT)
00000a  2901              CMP      r1,#1
00000c  d015              BEQ      |L6.58|
;;;731    	{
;;;732    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_0);
;;;733    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_1);
;;;734    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_2);
;;;735    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_3);
;;;736    	}
;;;737    	else if (type == RO_ALL)
00000e  2902              CMP      r1,#2
;;;738    	{
;;;739    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_0);
;;;740    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_1);
;;;741    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_2);
;;;742    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_LEFT), value, SPI_CH_SEL_3);
;;;743    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_0);
;;;744    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_1);
;;;745    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_2);
;;;746    		MSPI_RegisterShareModeSingleWrite((addr | MSPI_ROIC_RIGHT), value, SPI_CH_SEL_3);
;;;747    	}
;;;748    }
000010  bf18              IT       NE
000012  bd70              POPNE    {r4-r6,pc}
000014  2201              MOVS     r2,#1                 ;739
000016  4629              MOV      r1,r5                 ;739
000018  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
00001c  2202              MOVS     r2,#2                 ;740
00001e  4629              MOV      r1,r5                 ;740
000020  4620              MOV      r0,r4                 ;740
000022  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000026  2204              MOVS     r2,#4                 ;741
000028  4629              MOV      r1,r5                 ;741
00002a  4620              MOV      r0,r4                 ;741
00002c  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000030  2208              MOVS     r2,#8                 ;742
000032  4629              MOV      r1,r5                 ;742
000034  4620              MOV      r0,r4                 ;742
000036  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
                  |L6.58|
00003a  f4446000          ORR      r0,r4,#0x800          ;732
00003e  2201              MOVS     r2,#1                 ;732
000040  4629              MOV      r1,r5                 ;732
000042  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000046  f4446000          ORR      r0,r4,#0x800          ;733
00004a  2202              MOVS     r2,#2                 ;733
00004c  4629              MOV      r1,r5                 ;733
00004e  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000052  f4446000          ORR      r0,r4,#0x800          ;734
000056  2204              MOVS     r2,#4                 ;734
000058  4629              MOV      r1,r5                 ;734
00005a  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
00005e  f4446000          ORR      r0,r4,#0x800          ;735
000062  4629              MOV      r1,r5                 ;735
000064  e8bd4070          POP      {r4-r6,lr}            ;735
000068  2208              MOVS     r2,#8                 ;735
00006a  f7ffbffe          B.W      MSPI_RegisterShareModeSingleWrite
                  |L6.110|
00006e  2201              MOVS     r2,#1                 ;725
000070  4629              MOV      r1,r5                 ;725
000072  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000076  2202              MOVS     r2,#2                 ;726
000078  4629              MOV      r1,r5                 ;726
00007a  4620              MOV      r0,r4                 ;726
00007c  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
000080  2204              MOVS     r2,#4                 ;727
000082  4629              MOV      r1,r5                 ;727
000084  4620              MOV      r0,r4                 ;727
000086  f7fffffe          BL       MSPI_RegisterShareModeSingleWrite
00008a  4629              MOV      r1,r5                 ;728
00008c  4620              MOV      r0,r4                 ;728
00008e  e8bd4070          POP      {r4-r6,lr}            ;728
000092  2208              MOVS     r2,#8                 ;728
000094  f7ffbffe          B.W      MSPI_RegisterShareModeSingleWrite
;;;749    
                          ENDP


                          AREA ||i.SW97500_Register_Check||, CODE, READONLY, ALIGN=2

                  SW97500_Register_Check PROC
;;;81     
;;;82     static bool_t SW97500_Register_Check(uint32_t Addr, uint32_t ulValue, uint32_t * pValue, elRegRWCheckType_t eRWCheckType)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;83     {
000004  b085              SUB      sp,sp,#0x14
000006  4683              MOV      r11,r0
;;;84     	bool_t bReg = YES;
;;;85     	uint32_t ulRWCheckNum;
;;;86     	uint32_t ulOptionOrderIndex[4];
;;;87     	uint32_t ulMSPI_Idx, ulOption_Idx;
;;;88     
;;;89     	switch(eRWCheckType)
000008  2000              MOVS     r0,#0
;;;90     	{
;;;91     		case REG_RW_CHECK_TYPE_ALL:
;;;92     		{
;;;93     			ulRWCheckNum = 4;
;;;94     			ulOptionOrderIndex[0] = 0;
;;;95     			ulOptionOrderIndex[1] = 1;
;;;96     			ulOptionOrderIndex[2] = 2;
00000a  9000              STR      r0,[sp,#0]
00000c  2002              MOVS     r0,#2
;;;97     			ulOptionOrderIndex[3] = 3;
00000e  9002              STR      r0,[sp,#8]
000010  2401              MOVS     r4,#1                 ;84
000012  2003              MOVS     r0,#3
;;;98     			break;
;;;99     		}
;;;100    		case REG_RW_CHECK_TYPE_LEFT:
;;;101    		{
;;;102    			ulRWCheckNum = 2;
;;;103    			ulOptionOrderIndex[0] = 0;
;;;104    			ulOptionOrderIndex[1] = 2;
;;;105    			break;
;;;106    		}
;;;107    		case REG_RW_CHECK_TYPE_RIGHT:
;;;108    		{
;;;109    			ulRWCheckNum = 2;
;;;110    			ulOptionOrderIndex[0] = 1;
;;;111    			ulOptionOrderIndex[1] = 3;
;;;112    			break;
;;;113    		}
;;;114    		case REG_RW_CHECK_TYPE_SINGLE_SM0_R0:
;;;115    		{
;;;116    			ulRWCheckNum = 1;
;;;117    			ulOptionOrderIndex[0] = 0;
;;;118    			break;
;;;119    		}
;;;120    		case REG_RW_CHECK_TYPE_SINGLE_SM0_R1:
;;;121    		{
;;;122    			ulRWCheckNum = 1;
;;;123    			ulOptionOrderIndex[0] = 1;
;;;124    			break;
;;;125    		}
;;;126    		case REG_RW_CHECK_TYPE_SINGLE_SM1_R0:
;;;127    		{
;;;128    			ulRWCheckNum = 1;
;;;129    			ulOptionOrderIndex[0] = 2;
;;;130    			break;
;;;131    		}
;;;132    		case REG_RW_CHECK_TYPE_SINGLE_SM1_R1:
;;;133    		{
;;;134    			ulRWCheckNum = 1;
;;;135    			ulOptionOrderIndex[0] = 3;
;;;136    			break;
;;;137    		}
;;;138    	}
;;;139    	for(ulOption_Idx = 0; ulOption_Idx < ulRWCheckNum; ulOption_Idx++)
;;;140    	{
;;;141    		MSPI_RegisterRead(Addr, &ulReadBuf[0], (eROIC_Read_Option_t)(MSPI_READ_SM0_R0 + ulOptionOrderIndex[ulOption_Idx]));
000014  4e21              LDR      r6,|L7.156|
000016  4690              MOV      r8,r2                 ;83
000018  460f              MOV      r7,r1                 ;83
00001a  f04f0904          MOV      r9,#4                 ;93
00001e  9401              STR      r4,[sp,#4]            ;96
000020  2500              MOVS     r5,#0                 ;139
000022  46ea              MOV      r10,sp                ;86
000024  f8cd000c          STR.W    r0,[sp,#0xc]
                  |L7.40|
000028  f81a0025          LDRB     r0,[r10,r5,LSL #2]
00002c  491b              LDR      r1,|L7.156|
00002e  1c40              ADDS     r0,r0,#1
000030  b2c2              UXTB     r2,r0
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       MSPI_RegisterRead
;;;142    		for(ulMSPI_Idx = 0; ulMSPI_Idx < MSPI_NUM; ulMSPI_Idx++)
;;;143    		{
;;;144    			if(pValue == NULL)
000038  f1b80f00          CMP      r8,#0
00003c  d01d              BEQ      |L7.122|
;;;145    			{
;;;146    				if(ulReadBuf[ulMSPI_Idx] != ulValue)
;;;147    				{
;;;148    					bReg = NO;
;;;149    //					_gT(_GPIO_TP_INTR);
;;;150    				}
;;;151    			}
;;;152    			else
;;;153    			{
;;;154    				if(ulReadBuf[ulMSPI_Idx] != pValue[ulMSPI_Idx*2 + ulOption_Idx])
00003e  f8580025          LDR      r0,[r8,r5,LSL #2]
000042  6831              LDR      r1,[r6,#0]  ; ulReadBuf
000044  4281              CMP      r1,r0
;;;155    				{
;;;156    					bReg = NO;
000046  bf18              IT       NE
000048  2400              MOVNE    r4,#0
00004a  eb080085          ADD      r0,r8,r5,LSL #2       ;154
00004e  6871              LDR      r1,[r6,#4]            ;154  ; ulReadBuf
000050  6882              LDR      r2,[r0,#8]            ;154
000052  4291              CMP      r1,r2                 ;154
000054  bf18              IT       NE
000056  2400              MOVNE    r4,#0
000058  68b2              LDR      r2,[r6,#8]            ;154  ; ulReadBuf
00005a  6901              LDR      r1,[r0,#0x10]         ;154
00005c  428a              CMP      r2,r1                 ;154
00005e  bf18              IT       NE
000060  2400              MOVNE    r4,#0
000062  68f1              LDR      r1,[r6,#0xc]          ;154  ; ulReadBuf
000064  6980              LDR      r0,[r0,#0x18]         ;154
000066  4281              CMP      r1,r0                 ;154
000068  d000              BEQ      |L7.108|
                  |L7.106|
00006a  2400              MOVS     r4,#0
                  |L7.108|
00006c  1c6d              ADDS     r5,r5,#1
00006e  454d              CMP      r5,r9
000070  d3da              BCC      |L7.40|
;;;157    //					_gT(_GPIO_TP_INTR);
;;;158    				}
;;;159    			}
;;;160    		}
;;;161    	}
;;;162    
;;;163    	return bReg;
;;;164    }
000072  b005              ADD      sp,sp,#0x14
000074  4620              MOV      r0,r4                 ;163
000076  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.122|
00007a  6830              LDR      r0,[r6,#0]            ;146  ; ulReadBuf
00007c  42b8              CMP      r0,r7                 ;146
00007e  bf18              IT       NE                    ;148
000080  2400              MOVNE    r4,#0                 ;148
000082  6870              LDR      r0,[r6,#4]            ;146  ; ulReadBuf
000084  42b8              CMP      r0,r7                 ;146
000086  bf18              IT       NE                    ;148
000088  2400              MOVNE    r4,#0                 ;148
00008a  68b0              LDR      r0,[r6,#8]            ;146  ; ulReadBuf
00008c  42b8              CMP      r0,r7                 ;146
00008e  bf18              IT       NE                    ;148
000090  2400              MOVNE    r4,#0                 ;148
000092  68f0              LDR      r0,[r6,#0xc]          ;146  ; ulReadBuf
000094  42b8              CMP      r0,r7                 ;146
000096  d0e9              BEQ      |L7.108|
000098  e7e7              B        |L7.106|
;;;165    #endif /* (SRIC_REGISTER_RW_CHECK || USED_SRIC_REG_INIT_RETRY) */
                          ENDP

00009a  0000              DCW      0x0000
                  |L7.156|
                          DCD      ||.bss||+0x10

                          AREA ||i.SW97500_Reset||, CODE, READONLY, ALIGN=1

                  SW97500_Reset PROC
;;;348    
;;;349    void SW97500_Reset(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;350    {
000002  4604              MOV      r4,r0
;;;351    	GPIO_Init(_GPIO_RSTN_SRIC,GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
000004  2301              MOVS     r3,#1
000006  2200              MOVS     r2,#0
000008  2103              MOVS     r1,#3
00000a  2034              MOVS     r0,#0x34
00000c  f7fffffe          BL       GPIO_Init
;;;352    
;;;353    	delay_usec(100);
000010  2064              MOVS     r0,#0x64
000012  f7fffffe          BL       delay_us
;;;354    
;;;355    #if !USED_OPERATION_STAND_ALONE
;;;356    	if(!IS_S3_MODE(eSensingMode))
000016  f4146f00          TST      r4,#0x800
00001a  d109              BNE      |L8.48|
                  |L8.28|
;;;357    	{
;;;358    		while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 1);
00001c  202e              MOVS     r0,#0x2e
00001e  f7fffffe          BL       GPIO_Get_IN
000022  2801              CMP      r0,#1
000024  d0fa              BEQ      |L8.28|
                  |L8.38|
;;;359    		while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
000026  202e              MOVS     r0,#0x2e
000028  f7fffffe          BL       GPIO_Get_IN
00002c  2800              CMP      r0,#0
00002e  d0fa              BEQ      |L8.38|
                  |L8.48|
;;;360    	}
;;;361    	delay_usec(10);
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_us
;;;362    #endif /* !USED_OPERATION_STAND_ALONE */
;;;363    	GPIO_Set_DATA(_GPIO_RSTN_SRIC, GPIO_DATA_LOW);
000036  2100              MOVS     r1,#0
000038  2034              MOVS     r0,#0x34
00003a  f7fffffe          BL       GPIO_Set_DATA
;;;364    	delay_usec(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       delay_us
;;;365    	GPIO_Set_DATA(_GPIO_RSTN_SRIC, GPIO_DATA_HIGH);
000044  2101              MOVS     r1,#1
000046  2034              MOVS     r0,#0x34
000048  f7fffffe          BL       GPIO_Set_DATA
;;;366    	delay_usec(100);
00004c  e8bd4010          POP      {r4,lr}
000050  2064              MOVS     r0,#0x64
000052  f7ffbffe          B.W      delay_us
;;;367    }
;;;368    
                          ENDP


                          AREA ||i.SW97500_Run||, CODE, READONLY, ALIGN=2

                  SW97500_Run PROC
;;;749    
;;;750    void SW97500_Run(uint8_t Enable)
000000  b538              PUSH     {r3-r5,lr}
;;;751    {
000002  4604              MOV      r4,r0
;;;752    	tSRIC_CFGR_TC_START_t tSRIC_CFGR_TC_START;
;;;753    	tSRIC_CFGR_SYS_CFG_t tSRIC_CFGR_SYS_CFG;
;;;754    
;;;755    	tSRIC_CFGR_SYS_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_SYS_CFG.ulBulk;
000004  4818              LDR      r0,|L9.104|
000006  6800              LDR      r0,[r0,#0]  ; s_pktmoduleSRICCommonConf
000008  68c0              LDR      r0,[r0,#0xc]
00000a  9000              STR      r0,[sp,#0]
;;;756    	tSRIC_CFGR_SYS_CFG.tBit.tg_reset = ENABLE;
00000c  f89d0000          LDRB     r0,[sp,#0]
000010  f0400001          ORR      r0,r0,#1
000014  f88d0000          STRB     r0,[sp,#0]
;;;757    	MSPI_RegisterWrite((0x010 | MSPI_BROADCAST), tSRIC_CFGR_SYS_CFG.ulBulk);
000018  9900              LDR      r1,[sp,#0]
00001a  f2420010          MOV      r0,#0x2010
00001e  f7fffffe          BL       MSPI_RegisterWrite
;;;758    	tSRIC_CFGR_SYS_CFG.tBit.tg_reset = DISABLE;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  f88d0000          STRB     r0,[sp,#0]
;;;759    	MSPI_RegisterWrite((0x010 | MSPI_BROADCAST), tSRIC_CFGR_SYS_CFG.ulBulk);
00002e  9900              LDR      r1,[sp,#0]
000030  f2420010          MOV      r0,#0x2010
000034  f7fffffe          BL       MSPI_RegisterWrite
;;;760    	delay_ms(1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       delay_ms
;;;761    
;;;762    	tSRIC_CFGR_TC_START.ulBulk = 0;
00003e  2000              MOVS     r0,#0
000040  9000              STR      r0,[sp,#0]
;;;763    	tSRIC_CFGR_TC_START.tBit.tc_start = Enable;
000042  f89d0000          LDRB     r0,[sp,#0]
000046  f3640000          BFI      r0,r4,#0,#1
00004a  f88d0000          STRB     r0,[sp,#0]
;;;764    	tSRIC_CFGR_TC_START.tBit.scan_cont = Enable;
00004e  f89d0000          LDRB     r0,[sp,#0]
000052  f3640041          BFI      r0,r4,#1,#1
000056  f88d0000          STRB     r0,[sp,#0]
;;;765    	MSPI_RegisterWrite((0x014 | MSPI_BROADCAST), tSRIC_CFGR_TC_START.ulBulk);
00005a  9900              LDR      r1,[sp,#0]
00005c  e8bd4038          POP      {r3-r5,lr}
000060  f2420014          MOV      r0,#0x2014
000064  f7ffbffe          B.W      MSPI_RegisterWrite
;;;766    //	SW97500_Register_Check(0x014, tSRIC_CFGR_TC_START.ulBulk);
;;;767    }
;;;768    
                          ENDP

                  |L9.104|
                          DCD      ||.data||

                          AREA ||i.SW97500_SetActiveOperationMode||, CODE, READONLY, ALIGN=2

                  SW97500_SetActiveOperationMode PROC
;;;919    
;;;920    void SW97500_SetActiveOperationMode(void)
000000  b510              PUSH     {r4,lr}
;;;921    {
;;;922    	tSRIC_CFGR_DIC_CFG_t tSRIC_CFGR_DIC_CFG;
;;;923    
;;;924    	MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
000002  4c4c              LDR      r4,|L10.308|
000004  b082              SUB      sp,sp,#8              ;921
000006  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000008  69c1              LDR      r1,[r0,#0x1c]
00000a  f2420020          MOV      r0,#0x2020
00000e  f7fffffe          BL       MSPI_RegisterWrite
;;;925    	MSPI_RegisterWrite((0x024 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk);
000012  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000014  6a01              LDR      r1,[r0,#0x20]
000016  f2420024          MOV      r0,#0x2024
00001a  f7fffffe          BL       MSPI_RegisterWrite
;;;926    	MSPI_RegisterWrite((0x078 | MSPI_BROADCAST), s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_CFG_00.ulBulk);
00001e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000020  6f41              LDR      r1,[r0,#0x74]
000022  f2420078          MOV      r0,#0x2078
000026  f7fffffe          BL       MSPI_RegisterWrite
;;;927    	
;;;928    	// ACTIVE Gain
;;;929    	tSRIC_CFGR_SENSE_CTRL_t tSRIC_CFGR_SENSE_CTRL;
;;;930    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_bcon = 0;
00002a  f89d0000          LDRB     r0,[sp,#0]
00002e  f0200003          BIC      r0,r0,#3
000032  f88d0000          STRB     r0,[sp,#0]
;;;931    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_stc_insel = 0;
000036  f89d0000          LDRB     r0,[sp,#0]
00003a  f0200004          BIC      r0,r0,#4
00003e  f88d0000          STRB     r0,[sp,#0]
;;;932    	tSRIC_CFGR_SENSE_CTRL.tBit.int_ref = 2;
000042  f89d0000          LDRB     r0,[sp,#0]
000046  f0200018          BIC      r0,r0,#0x18
00004a  3010              ADDS     r0,r0,#0x10
00004c  f88d0000          STRB     r0,[sp,#0]
;;;933    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_ref = 2;
000050  f89d0000          LDRB     r0,[sp,#0]
000054  f0200060          BIC      r0,r0,#0x60
000058  3040              ADDS     r0,r0,#0x40
00005a  f88d0000          STRB     r0,[sp,#0]
;;;934    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcon = CFGR_SENSE_CTRL_lv_ssu_bcon;
00005e  f8bd0000          LDRH     r0,[sp,#0]
000062  f4207060          BIC      r0,r0,#0x380
000066  f8ad0000          STRH     r0,[sp,#0]
;;;935    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcons = CFGR_SENSE_CTRL_lv_ssu_bcons;
00006a  f89d0001          LDRB     r0,[sp,#1]
00006e  f020001c          BIC      r0,r0,#0x1c
000072  1d00              ADDS     r0,r0,#4
000074  f88d0001          STRB     r0,[sp,#1]
;;;936    	tSRIC_CFGR_SENSE_CTRL.tBit.hv_ssu_bcon = CFGR_SENSE_CTRL_hv_ssu_bcon;
000078  f89d0001          LDRB     r0,[sp,#1]
00007c  f02000e0          BIC      r0,r0,#0xe0
000080  3080              ADDS     r0,r0,#0x80
000082  f88d0001          STRB     r0,[sp,#1]
;;;937    	tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = CFGR_SENSE_CTRL_integ_half;
000086  f89d0002          LDRB     r0,[sp,#2]
00008a  f0400001          ORR      r0,r0,#1
00008e  f88d0002          STRB     r0,[sp,#2]
;;;938    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_gc = CFGR_SENSE_CTRL_pre_gc;
000092  f89d0002          LDRB     r0,[sp,#2]
000096  f040000e          ORR      r0,r0,#0xe
00009a  f88d0002          STRB     r0,[sp,#2]
;;;939    	tSRIC_CFGR_SENSE_CTRL.tBit.int_gc = 7;
00009e  f89d0002          LDRB     r0,[sp,#2]
0000a2  f0400070          ORR      r0,r0,#0x70
0000a6  f88d0002          STRB     r0,[sp,#2]
;;;940    	tSRIC_CFGR_SENSE_CTRL.tBit.powsel = 0;
0000aa  f89d0002          LDRB     r0,[sp,#2]
0000ae  f0200080          BIC      r0,r0,#0x80
0000b2  f88d0002          STRB     r0,[sp,#2]
;;;941    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_bs_lp = CFGR_SENSE_CTRL_pre_bs_lp;
0000b6  f89d0003          LDRB     r0,[sp,#3]
0000ba  f0200001          BIC      r0,r0,#1
0000be  f88d0003          STRB     r0,[sp,#3]
;;;942    	tSRIC_CFGR_SENSE_CTRL.tBit.int_bs_lp = CFGR_SENSE_CTRL_int_bs_lp;
0000c2  f89d0003          LDRB     r0,[sp,#3]
0000c6  f0200002          BIC      r0,r0,#2
0000ca  f88d0003          STRB     r0,[sp,#3]
;;;943    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_bs_lp = CFGR_SENSE_CTRL_sha_bs_lp;
0000ce  f89d0003          LDRB     r0,[sp,#3]
0000d2  f0200004          BIC      r0,r0,#4
0000d6  f88d0003          STRB     r0,[sp,#3]
;;;944    	MSPI_RegisterWrite((0x144 | MSPI_BROADCAST), tSRIC_CFGR_SENSE_CTRL.ulBulk);
0000da  9900              LDR      r1,[sp,#0]
0000dc  f2421044          MOV      r0,#0x2144
0000e0  f7fffffe          BL       MSPI_RegisterWrite
;;;945    	
;;;946    	tSRIC_CFGR_DIC_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk;
0000e4  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000e6  6a00              LDR      r0,[r0,#0x20]
0000e8  9000              STR      r0,[sp,#0]
;;;947    	tSRIC_CFGR_DIC_CFG.tBit.sd_off = 0;
0000ea  f89d0000          LDRB     r0,[sp,#0]
0000ee  f0200001          BIC      r0,r0,#1
0000f2  f88d0000          STRB     r0,[sp,#0]
;;;948    	tSRIC_CFGR_DIC_CFG.tBit.stuck_abd = 0;
0000f6  f89d0001          LDRB     r0,[sp,#1]
0000fa  f0200008          BIC      r0,r0,#8
0000fe  f88d0001          STRB     r0,[sp,#1]
;;;949    	tSRIC_CFGR_DIC_CFG.tBit.cfgr_abd = 0;
000102  f89d0001          LDRB     r0,[sp,#1]
000106  f0200010          BIC      r0,r0,#0x10
00010a  f88d0001          STRB     r0,[sp,#1]
;;;950    	MSPI_RegisterWrite((0x024 | MSPI_BROADCAST), tSRIC_CFGR_DIC_CFG.ulBulk);
00010e  9900              LDR      r1,[sp,#0]
000110  f2420024          MOV      r0,#0x2024
000114  f7fffffe          BL       MSPI_RegisterWrite
;;;951    
;;;952    	// ACTIVE GTUNE
;;;953    	tSRIC_CR_GTUNE_t tSRIC_CR_GTUNE;
;;;954    	tSRIC_CR_GTUNE.tBit.cr_gtune = 0;
000118  f89d0004          LDRB     r0,[sp,#4]
00011c  f0200007          BIC      r0,r0,#7
000120  f88d0004          STRB     r0,[sp,#4]
;;;955    	MSPI_RegisterWrite((0x134 | MSPI_BROADCAST), tSRIC_CR_GTUNE.ulBulk);
000124  9901              LDR      r1,[sp,#4]
000126  b002              ADD      sp,sp,#8
000128  f2421034          MOV      r0,#0x2134
00012c  e8bd4010          POP      {r4,lr}
000130  f7ffbffe          B.W      MSPI_RegisterWrite
;;;956    }
;;;957    
                          ENDP

                  |L10.308|
                          DCD      ||.data||

                          AREA ||i.SW97500_SetDiagTestOperationMode||, CODE, READONLY, ALIGN=2

                  SW97500_SetDiagTestOperationMode PROC
;;;957    
;;;958    void SW97500_SetDiagTestOperationMode(eDIAG_TEST_CHANGE_MODE_t TestMode)
000000  b510              PUSH     {r4,lr}
;;;959    {
000002  b082              SUB      sp,sp,#8
;;;960    	tSRIC_CFGR_DIC_CFG_t tSRIC_CFGR_DIC_CFG;
;;;961    	tSRIC_CFGR_MUX_EN_t tSRIC_CFGR_MUX_EN;
;;;962    	tSRIC_CR_GTUNE_t tSRIC_CR_GTUNE;
;;;963    	tSRIC_CFGR_TUNE_LOWER_t tCFGR_TUNE_LOWER;
;;;964    	tSRIC_CFGR_TUNE_GROUP_t tSRIC_CFGR_TUNE_GROUP;
;;;965    	tSRIC_CFGR_TUNE_UPPER_t tSRIC_CFGR_TUNE_UPPER;
;;;966    	tSRIC_SPIS_CFG_t tSRIC_SPIS_CFG;
;;;967    	tSRIC_CFGR_TG_STUCK_t tSRIC_CFGR_TG_STUCK;
;;;968    	tSRIC_CFGR_SENSE_CTRL_t tSRIC_CFGR_SENSE_CTRL;
;;;969    
;;;970    	switch(TestMode)
000004  2820              CMP      r0,#0x20
;;;971    	{
;;;972    		case DIAG_CHANGE_SHORT1_TEST_STEP1:
;;;973    			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;974    			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 5;
;;;975    			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;976    
;;;977    			break;
;;;978    		case DIAG_CHANGE_SHORT1_TEST_STEP2:
;;;979    			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;980    			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 4;
;;;981    			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;982    
;;;983    			break;
;;;984    		case DIAG_CHANGE_SHORT1_TEST_STEP3:
;;;985    			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;986    			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 3;
;;;987    			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;988    
;;;989    			break;
;;;990    		case DIAG_CHANGE_SHORT1_TEST_STEP4:
;;;991    			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;992    			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 2;
;;;993    			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;994    
;;;995    			break;
;;;996    		case DIAG_CHANGE_SHORT1_TEST_STEP5:
;;;997    			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;998    			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 1;
;;;999    			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1000   			break;
;;;1001   
;;;1002   		case DIAG_CHANGE_SHORT1_TEST_STEP6:	// <<<<
;;;1003   			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;1004   			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 5;
;;;1005   			tSRIC_CR_GTUNE.ulBulk = s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk;
;;;1006   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1007   
;;;1008   			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1009   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1010   			break;
;;;1011   
;;;1012   		case DIAG_CHANGE_SHORT1_TEST_STEP7:	// <<<<
;;;1013   			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;1014   			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 4;
;;;1015   			tSRIC_CR_GTUNE.ulBulk = s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk;
;;;1016   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1017   
;;;1018   			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1019   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1020   			break;
;;;1021   		case DIAG_CHANGE_SHORT1_TEST_STEP8:	// <<<<
;;;1022   			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;1023   			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 3;
;;;1024   			tSRIC_CR_GTUNE.ulBulk = s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk;
;;;1025   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1026   
;;;1027   			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1028   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1029   			break;
;;;1030   		case DIAG_CHANGE_SHORT1_TEST_STEP9:	// <<<<
;;;1031   			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;1032   			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 2;
;;;1033   			tSRIC_CR_GTUNE.ulBulk = s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk;
;;;1034   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1035   
;;;1036   			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1037   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1038   			break;
;;;1039   		case DIAG_CHANGE_SHORT1_TEST_STEP10:	// <<<<
;;;1040   			tSRIC_CFGR_MUX_EN.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk;
;;;1041   			tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 1;
;;;1042   			tSRIC_CR_GTUNE.ulBulk = s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk;
;;;1043   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1044   
;;;1045   			SW97500_RegisterSingleWrite(0x020, RO_ALL, tSRIC_CFGR_MUX_EN.ulBulk);
;;;1046   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1047   			break;
;;;1048   
;;;1049   		case DIAG_CHANGE_SHORT1_TEST_RECOVERY:
;;;1050   			SW97500_RegisterSingleWrite(0x020, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CFGR_MUX_EN.ulBulk);
;;;1051   			SW97500_RegisterSingleWrite(0x134, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk);
;;;1052   			break;
;;;1053   
;;;1054   		case DIAG_CHANGE_SHORT2_TEST_STEP1:	// All Node CR OFF
;;;1055   			tSRIC_CFGR_TG_STUCK.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk;
;;;1056   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_odd_en = 1; // 1 : Low Stuck, 3 : High Stuck
;;;1057   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_even_en = 1;
;;;1058   			SW97500_RegisterSingleWrite(0x06C, RO_ALL, tSRIC_CFGR_TG_STUCK.ulBulk);
;;;1059   
;;;1060   			tSRIC_CFGR_SENSE_CTRL.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk;
;;;1061   			tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = 0;
;;;1062   			SW97500_RegisterSingleWrite(0x144, RO_ALL, tSRIC_CFGR_SENSE_CTRL.ulBulk);
;;;1063   			break;
;;;1064   		case DIAG_CHANGE_SHORT2_TEST_STEP2:	// 1st Frame // Even Node CR OFF
;;;1065   			tSRIC_CFGR_TG_STUCK.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk;
;;;1066   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_odd_en = 3;
;;;1067   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_even_en = 1;
;;;1068   			SW97500_RegisterSingleWrite(0x06C, RO_RIGHT, tSRIC_CFGR_TG_STUCK.ulBulk);
;;;1069   
;;;1070   			tSRIC_CFGR_TG_STUCK.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk;
;;;1071   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_odd_en = 1;
;;;1072   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_even_en = 3;
;;;1073   			SW97500_RegisterSingleWrite(0x06C, RO_LEFT, tSRIC_CFGR_TG_STUCK.ulBulk);
;;;1074   
;;;1075   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1076   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1077   
;;;1078   			tSRIC_CFGR_SENSE_CTRL.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk;
;;;1079   			tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = 0;
;;;1080   			SW97500_RegisterSingleWrite(0x144, RO_ALL, tSRIC_CFGR_SENSE_CTRL.ulBulk);
;;;1081   			break;
;;;1082   		case DIAG_CHANGE_SHORT2_TEST_STEP3:	// 2nd Frame // Odd Node CR OFF
;;;1083   			tSRIC_CFGR_TG_STUCK.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk;
;;;1084   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_odd_en = 1;
;;;1085   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_even_en = 3;
;;;1086   			SW97500_RegisterSingleWrite(0x06C, RO_RIGHT, tSRIC_CFGR_TG_STUCK.ulBulk);
;;;1087   
;;;1088   			tSRIC_CFGR_TG_STUCK.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk;
;;;1089   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_odd_en = 3;
;;;1090   			tSRIC_CFGR_TG_STUCK.tBit.stuck_vcr_even_en = 1;
;;;1091   			SW97500_RegisterSingleWrite(0x06C, RO_LEFT, tSRIC_CFGR_TG_STUCK.ulBulk);
;;;1092   
;;;1093   			tSRIC_CR_GTUNE.tBit.cr_gtune = 3;
;;;1094   			SW97500_RegisterSingleWrite(0x134, RO_ALL, tSRIC_CR_GTUNE.ulBulk);
;;;1095   
;;;1096   			tSRIC_CFGR_SENSE_CTRL.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk;
;;;1097   			tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = 0;
;;;1098   			SW97500_RegisterSingleWrite(0x144, RO_ALL, tSRIC_CFGR_SENSE_CTRL.ulBulk);
;;;1099   			break;
;;;1100   		case DIAG_CHANGE_SHORT2_TEST_RECOVERY:
;;;1101   
;;;1102   			SW97500_RegisterSingleWrite(0x06C, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CFGR_TG_STUCK.ulBulk);
;;;1103   			SW97500_RegisterSingleWrite(0x134, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CR_GTUNE.ulBulk);
;;;1104   			SW97500_RegisterSingleWrite(0x144, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CFGR_SENSE_CTRL.ulBulk);
;;;1105   			break;
;;;1106   
;;;1107   		case DIAG_CHANGE_OPEN_TEST_STEP1:
;;;1108   #if USED_PWM_GATE_CONTROL
;;;1109   			PWMDRV->PWM_MUX_CR.tBit.finger_en = 0;
;;;1110   			PWMDRV->PWM_MUX_CR.tBit.finger_dmy_en = 0;
;;;1111   #endif /* USED_PWM_GATE_CONTROL */
;;;1112   			tSRIC_CFGR_DIC_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk;
;;;1113   			tSRIC_CFGR_DIC_CFG.tBit.sd_float = 1;
;;;1114   			SW97500_RegisterSingleWrite(0x024, RO_ALL, tSRIC_CFGR_DIC_CFG.ulBulk);
;;;1115   			break;
;;;1116   		case DIAG_CHANGE_OPEN_TEST_RECOVERY:
;;;1117   #if USED_PWM_GATE_CONTROL
;;;1118   			PWMDRV->PWM_MUX_CR.ulBulk = hal_pwmdrv_GetControlConfig()->tCP_PWM_MUX_CR.ulBulk;
;;;1119   #endif /* USED_PWM_GATE_CONTROL */
;;;1120   			SW97500_RegisterSingleWrite(0x024, RO_ALL, s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk);
;;;1121   			break;
;;;1122   		default:
;;;1123   			break;
;;;1124   	}
;;;1125   }
000006  bf24              ITT      CS
000008  b002              ADDCS    sp,sp,#8
00000a  bd10              POPCS    {r4,pc}
00000c  e8dff000          TBB      [pc,r0]
000010  fefdfdfd          DCB      0xfe,0xfd,0xfd,0xfd
000014  fdfdfdfd          DCB      0xfd,0xfd,0xfd,0xfd
000018  fdfc1024          DCB      0xfd,0xfc,0x10,0x24
00001c  384c6073          DCB      0x38,0x4c,0x60,0x73
000020  97bbdffb          DCB      0x97,0xbb,0xdf,0xfb
000024  fdfdfaf9          DCB      0xfd,0xfd,0xfa,0xf9
000028  f8f7fdfd          DCB      0xf8,0xf7,0xfd,0xfd
00002c  fdfdfdf6          DCB      0xfd,0xfd,0xfd,0xf6
000030  48fe              LDR      r0,|L11.1068|
000032  6800              LDR      r0,[r0,#0]            ;973  ; s_pktmoduleSRICCommonConf
000034  69c0              LDR      r0,[r0,#0x1c]         ;973
000036  9001              STR      r0,[sp,#4]            ;973
000038  f8bd0005          LDRH     r0,[sp,#5]            ;974
00003c  f4207060          BIC      r0,r0,#0x380          ;974
000040  f5007020          ADD      r0,r0,#0x280          ;974
000044  f8ad0005          STRH     r0,[sp,#5]            ;974
000048  9a01              LDR      r2,[sp,#4]            ;975
00004a  b002              ADD      sp,sp,#8              ;975
00004c  2102              MOVS     r1,#2                 ;975
00004e  e8bd4010          POP      {r4,lr}               ;975
000052  2020              MOVS     r0,#0x20              ;975
000054  f7ffbffe          B.W      SW97500_RegisterSingleWrite
000058  48f4              LDR      r0,|L11.1068|
00005a  6800              LDR      r0,[r0,#0]            ;979  ; s_pktmoduleSRICCommonConf
00005c  69c0              LDR      r0,[r0,#0x1c]         ;979
00005e  9001              STR      r0,[sp,#4]            ;979
000060  f8bd0005          LDRH     r0,[sp,#5]            ;980
000064  f4207060          BIC      r0,r0,#0x380          ;980
000068  f5007000          ADD      r0,r0,#0x200          ;980
00006c  f8ad0005          STRH     r0,[sp,#5]            ;980
000070  9a01              LDR      r2,[sp,#4]            ;981
000072  b002              ADD      sp,sp,#8              ;981
000074  2102              MOVS     r1,#2                 ;981
000076  e8bd4010          POP      {r4,lr}               ;981
00007a  2020              MOVS     r0,#0x20              ;981
00007c  f7ffbffe          B.W      SW97500_RegisterSingleWrite
000080  48ea              LDR      r0,|L11.1068|
000082  6800              LDR      r0,[r0,#0]            ;985  ; s_pktmoduleSRICCommonConf
000084  69c0              LDR      r0,[r0,#0x1c]         ;985
000086  9001              STR      r0,[sp,#4]            ;985
000088  f8bd0005          LDRH     r0,[sp,#5]            ;986
00008c  f4207060          BIC      r0,r0,#0x380          ;986
000090  f50070c0          ADD      r0,r0,#0x180          ;986
000094  f8ad0005          STRH     r0,[sp,#5]            ;986
000098  9a01              LDR      r2,[sp,#4]            ;987
00009a  b002              ADD      sp,sp,#8              ;987
00009c  2102              MOVS     r1,#2                 ;987
00009e  e8bd4010          POP      {r4,lr}               ;987
0000a2  2020              MOVS     r0,#0x20              ;987
0000a4  f7ffbffe          B.W      SW97500_RegisterSingleWrite
0000a8  48e0              LDR      r0,|L11.1068|
0000aa  6800              LDR      r0,[r0,#0]            ;991  ; s_pktmoduleSRICCommonConf
0000ac  69c0              LDR      r0,[r0,#0x1c]         ;991
0000ae  9001              STR      r0,[sp,#4]            ;991
0000b0  f8bd0005          LDRH     r0,[sp,#5]            ;992
0000b4  f4207060          BIC      r0,r0,#0x380          ;992
0000b8  f5007080          ADD      r0,r0,#0x100          ;992
0000bc  f8ad0005          STRH     r0,[sp,#5]            ;992
0000c0  9a01              LDR      r2,[sp,#4]            ;993
0000c2  b002              ADD      sp,sp,#8              ;993
0000c4  2102              MOVS     r1,#2                 ;993
0000c6  e8bd4010          POP      {r4,lr}               ;993
0000ca  2020              MOVS     r0,#0x20              ;993
0000cc  f7ffbffe          B.W      SW97500_RegisterSingleWrite
0000d0  48d6              LDR      r0,|L11.1068|
0000d2  6800              LDR      r0,[r0,#0]            ;997  ; s_pktmoduleSRICCommonConf
0000d4  69c0              LDR      r0,[r0,#0x1c]         ;997
0000d6  9001              STR      r0,[sp,#4]            ;997
0000d8  f8bd0005          LDRH     r0,[sp,#5]            ;998
0000dc  f4207060          BIC      r0,r0,#0x380          ;998
0000e0  3080              ADDS     r0,r0,#0x80           ;998
0000e2  f8ad0005          STRH     r0,[sp,#5]            ;998
0000e6  9a01              LDR      r2,[sp,#4]            ;999
0000e8  b002              ADD      sp,sp,#8              ;999
0000ea  2102              MOVS     r1,#2                 ;999
0000ec  e8bd4010          POP      {r4,lr}               ;999
0000f0  2020              MOVS     r0,#0x20              ;999
0000f2  f7ffbffe          B.W      SW97500_RegisterSingleWrite
0000f6  48cd              LDR      r0,|L11.1068|
0000f8  6800              LDR      r0,[r0,#0]            ;1003  ; s_pktmoduleSRICCommonConf
0000fa  69c1              LDR      r1,[r0,#0x1c]         ;1003
0000fc  9101              STR      r1,[sp,#4]            ;1003
0000fe  f8bd1005          LDRH     r1,[sp,#5]            ;1004
000102  f4217160          BIC      r1,r1,#0x380          ;1004
000106  f5017120          ADD      r1,r1,#0x280          ;1004
00010a  f8ad1005          STRH     r1,[sp,#5]            ;1004
00010e  f8d003c4          LDR      r0,[r0,#0x3c4]        ;1005
000112  9000              STR      r0,[sp,#0]            ;1005
000114  f89d0000          LDRB     r0,[sp,#0]            ;1006
000118  f0200007          BIC      r0,r0,#7              ;1006
00011c  1cc0              ADDS     r0,r0,#3              ;1006
00011e  f88d0000          STRB     r0,[sp,#0]            ;1006
000122  9a01              LDR      r2,[sp,#4]            ;1008
000124  2102              MOVS     r1,#2                 ;1008
000126  2020              MOVS     r0,#0x20              ;1008
000128  f7fffffe          BL       SW97500_RegisterSingleWrite
00012c  9a00              LDR      r2,[sp,#0]            ;1009
00012e  b002              ADD      sp,sp,#8              ;1009
000130  2102              MOVS     r1,#2                 ;1009
000132  e8bd4010          POP      {r4,lr}               ;1009
000136  f44f709a          MOV      r0,#0x134             ;1009
00013a  f7ffbffe          B.W      SW97500_RegisterSingleWrite
00013e  48bb              LDR      r0,|L11.1068|
000140  6800              LDR      r0,[r0,#0]            ;1013  ; s_pktmoduleSRICCommonConf
000142  69c1              LDR      r1,[r0,#0x1c]         ;1013
000144  9101              STR      r1,[sp,#4]            ;1013
000146  f8bd1005          LDRH     r1,[sp,#5]            ;1014
00014a  f4217160          BIC      r1,r1,#0x380          ;1014
00014e  f5017100          ADD      r1,r1,#0x200          ;1014
000152  f8ad1005          STRH     r1,[sp,#5]            ;1014
000156  f8d003c4          LDR      r0,[r0,#0x3c4]        ;1015
00015a  9000              STR      r0,[sp,#0]            ;1015
00015c  f89d0000          LDRB     r0,[sp,#0]            ;1016
000160  f0200007          BIC      r0,r0,#7              ;1016
000164  1cc0              ADDS     r0,r0,#3              ;1016
000166  f88d0000          STRB     r0,[sp,#0]            ;1016
00016a  9a01              LDR      r2,[sp,#4]            ;1018
00016c  2102              MOVS     r1,#2                 ;1018
00016e  2020              MOVS     r0,#0x20              ;1018
000170  f7fffffe          BL       SW97500_RegisterSingleWrite
000174  9a00              LDR      r2,[sp,#0]            ;1019
000176  b002              ADD      sp,sp,#8              ;1019
000178  2102              MOVS     r1,#2                 ;1019
00017a  e8bd4010          POP      {r4,lr}               ;1019
00017e  f44f709a          MOV      r0,#0x134             ;1019
000182  f7ffbffe          B.W      SW97500_RegisterSingleWrite
000186  48a9              LDR      r0,|L11.1068|
000188  6800              LDR      r0,[r0,#0]            ;1022  ; s_pktmoduleSRICCommonConf
00018a  69c1              LDR      r1,[r0,#0x1c]         ;1022
00018c  9101              STR      r1,[sp,#4]            ;1022
00018e  f8bd1005          LDRH     r1,[sp,#5]            ;1023
000192  f4217160          BIC      r1,r1,#0x380          ;1023
000196  f50171c0          ADD      r1,r1,#0x180          ;1023
00019a  f8ad1005          STRH     r1,[sp,#5]            ;1023
00019e  f8d003c4          LDR      r0,[r0,#0x3c4]        ;1024
0001a2  9000              STR      r0,[sp,#0]            ;1024
0001a4  f89d0000          LDRB     r0,[sp,#0]            ;1025
0001a8  f0200007          BIC      r0,r0,#7              ;1025
0001ac  1cc0              ADDS     r0,r0,#3              ;1025
0001ae  f88d0000          STRB     r0,[sp,#0]            ;1025
0001b2  9a01              LDR      r2,[sp,#4]            ;1027
0001b4  2102              MOVS     r1,#2                 ;1027
0001b6  2020              MOVS     r0,#0x20              ;1027
0001b8  f7fffffe          BL       SW97500_RegisterSingleWrite
0001bc  9a00              LDR      r2,[sp,#0]            ;1028
0001be  b002              ADD      sp,sp,#8              ;1028
0001c0  2102              MOVS     r1,#2                 ;1028
0001c2  e8bd4010          POP      {r4,lr}               ;1028
0001c6  f44f709a          MOV      r0,#0x134             ;1028
0001ca  f7ffbffe          B.W      SW97500_RegisterSingleWrite
0001ce  4897              LDR      r0,|L11.1068|
0001d0  6800              LDR      r0,[r0,#0]            ;1031  ; s_pktmoduleSRICCommonConf
0001d2  69c1              LDR      r1,[r0,#0x1c]         ;1031
0001d4  9101              STR      r1,[sp,#4]            ;1031
0001d6  f8bd1005          LDRH     r1,[sp,#5]            ;1032
0001da  f4217160          BIC      r1,r1,#0x380          ;1032
0001de  f5017180          ADD      r1,r1,#0x100          ;1032
0001e2  f8ad1005          STRH     r1,[sp,#5]            ;1032
0001e6  f8d003c4          LDR      r0,[r0,#0x3c4]        ;1033
0001ea  9000              STR      r0,[sp,#0]            ;1033
0001ec  f89d0000          LDRB     r0,[sp,#0]            ;1034
0001f0  f0200007          BIC      r0,r0,#7              ;1034
0001f4  1cc0              ADDS     r0,r0,#3              ;1034
0001f6  f88d0000          STRB     r0,[sp,#0]            ;1034
0001fa  e008              B        |L11.526|
0001fc  e10a              B        |L11.1044|
0001fe  e0be              B        |L11.894|
000200  e072              B        |L11.744|
000202  e047              B        |L11.660|
000204  e034              B        |L11.624|
000206  e010              B        |L11.554|
000208  e13d              B        |L11.1158|
00020a  e14d              B        |L11.1192|
00020c  e11f              B        |L11.1102|
                  |L11.526|
00020e  9a01              LDR      r2,[sp,#4]            ;1036
000210  2102              MOVS     r1,#2                 ;1036
000212  2020              MOVS     r0,#0x20              ;1036
000214  f7fffffe          BL       SW97500_RegisterSingleWrite
000218  9a00              LDR      r2,[sp,#0]            ;1037
00021a  b002              ADD      sp,sp,#8              ;1037
00021c  2102              MOVS     r1,#2                 ;1037
00021e  e8bd4010          POP      {r4,lr}               ;1037
000222  f44f709a          MOV      r0,#0x134             ;1037
000226  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.554|
00022a  4880              LDR      r0,|L11.1068|
00022c  6800              LDR      r0,[r0,#0]            ;1040  ; s_pktmoduleSRICCommonConf
00022e  69c1              LDR      r1,[r0,#0x1c]         ;1040
000230  9101              STR      r1,[sp,#4]            ;1040
000232  f8bd1005          LDRH     r1,[sp,#5]            ;1041
000236  f4217160          BIC      r1,r1,#0x380          ;1041
00023a  3180              ADDS     r1,r1,#0x80           ;1041
00023c  f8ad1005          STRH     r1,[sp,#5]            ;1041
000240  f8d003c4          LDR      r0,[r0,#0x3c4]        ;1042
000244  9000              STR      r0,[sp,#0]            ;1042
000246  f89d0000          LDRB     r0,[sp,#0]            ;1043
00024a  f0200007          BIC      r0,r0,#7              ;1043
00024e  1cc0              ADDS     r0,r0,#3              ;1043
000250  f88d0000          STRB     r0,[sp,#0]            ;1043
000254  9a01              LDR      r2,[sp,#4]            ;1045
000256  2102              MOVS     r1,#2                 ;1045
000258  2020              MOVS     r0,#0x20              ;1045
00025a  f7fffffe          BL       SW97500_RegisterSingleWrite
00025e  9a00              LDR      r2,[sp,#0]            ;1046
000260  b002              ADD      sp,sp,#8              ;1046
000262  2102              MOVS     r1,#2                 ;1046
000264  e8bd4010          POP      {r4,lr}               ;1046
000268  f44f709a          MOV      r0,#0x134             ;1046
00026c  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.624|
000270  4c6e              LDR      r4,|L11.1068|
000272  6820              LDR      r0,[r4,#0]            ;1050  ; s_pktmoduleSRICCommonConf
000274  69c2              LDR      r2,[r0,#0x1c]         ;1050
000276  2102              MOVS     r1,#2                 ;1050
000278  2020              MOVS     r0,#0x20              ;1050
00027a  f7fffffe          BL       SW97500_RegisterSingleWrite
00027e  6820              LDR      r0,[r4,#0]            ;1051  ; s_pktmoduleSRICCommonConf
000280  f8d023c4          LDR      r2,[r0,#0x3c4]        ;1051
000284  b002              ADD      sp,sp,#8              ;1051
000286  2102              MOVS     r1,#2                 ;1051
000288  e8bd4010          POP      {r4,lr}               ;1051
00028c  f44f709a          MOV      r0,#0x134             ;1051
000290  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.660|
000294  4c65              LDR      r4,|L11.1068|
000296  6820              LDR      r0,[r4,#0]            ;1055  ; s_pktmoduleSRICCommonConf
000298  6e80              LDR      r0,[r0,#0x68]         ;1055
00029a  9001              STR      r0,[sp,#4]            ;1055
00029c  f89d0004          LDRB     r0,[sp,#4]            ;1056
0002a0  f02000c0          BIC      r0,r0,#0xc0           ;1056
0002a4  3040              ADDS     r0,r0,#0x40           ;1056
0002a6  f88d0004          STRB     r0,[sp,#4]            ;1056
0002aa  f89d0005          LDRB     r0,[sp,#5]            ;1057
0002ae  f0200003          BIC      r0,r0,#3              ;1057
0002b2  1c40              ADDS     r0,r0,#1              ;1057
0002b4  f88d0005          STRB     r0,[sp,#5]            ;1057
0002b8  9a01              LDR      r2,[sp,#4]            ;1058
0002ba  2102              MOVS     r1,#2                 ;1058
0002bc  206c              MOVS     r0,#0x6c              ;1058
0002be  f7fffffe          BL       SW97500_RegisterSingleWrite
0002c2  6820              LDR      r0,[r4,#0]            ;1060  ; s_pktmoduleSRICCommonConf
0002c4  f8d003d4          LDR      r0,[r0,#0x3d4]        ;1060
0002c8  9000              STR      r0,[sp,#0]            ;1060
0002ca  f89d0002          LDRB     r0,[sp,#2]            ;1061
0002ce  f0200001          BIC      r0,r0,#1              ;1061
0002d2  f88d0002          STRB     r0,[sp,#2]            ;1061
0002d6  9a00              LDR      r2,[sp,#0]            ;1062
0002d8  b002              ADD      sp,sp,#8              ;1062
0002da  2102              MOVS     r1,#2                 ;1062
0002dc  e8bd4010          POP      {r4,lr}               ;1062
0002e0  f44f70a2          MOV      r0,#0x144             ;1062
0002e4  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.744|
0002e8  4c50              LDR      r4,|L11.1068|
0002ea  6820              LDR      r0,[r4,#0]            ;1065  ; s_pktmoduleSRICCommonConf
0002ec  6e80              LDR      r0,[r0,#0x68]         ;1065
0002ee  9001              STR      r0,[sp,#4]            ;1065
0002f0  f89d0004          LDRB     r0,[sp,#4]            ;1066
0002f4  f04000c0          ORR      r0,r0,#0xc0           ;1066
0002f8  f88d0004          STRB     r0,[sp,#4]            ;1066
0002fc  f89d0005          LDRB     r0,[sp,#5]            ;1067
000300  f0200003          BIC      r0,r0,#3              ;1067
000304  1c40              ADDS     r0,r0,#1              ;1067
000306  f88d0005          STRB     r0,[sp,#5]            ;1067
00030a  9a01              LDR      r2,[sp,#4]            ;1068
00030c  2101              MOVS     r1,#1                 ;1068
00030e  206c              MOVS     r0,#0x6c              ;1068
000310  f7fffffe          BL       SW97500_RegisterSingleWrite
000314  6820              LDR      r0,[r4,#0]            ;1070  ; s_pktmoduleSRICCommonConf
000316  6e80              LDR      r0,[r0,#0x68]         ;1070
000318  9001              STR      r0,[sp,#4]            ;1070
00031a  f89d0004          LDRB     r0,[sp,#4]            ;1071
00031e  f02000c0          BIC      r0,r0,#0xc0           ;1071
000322  3040              ADDS     r0,r0,#0x40           ;1071
000324  f88d0004          STRB     r0,[sp,#4]            ;1071
000328  f89d0005          LDRB     r0,[sp,#5]            ;1072
00032c  f0400003          ORR      r0,r0,#3              ;1072
000330  f88d0005          STRB     r0,[sp,#5]            ;1072
000334  9a01              LDR      r2,[sp,#4]            ;1073
000336  2100              MOVS     r1,#0                 ;1073
000338  206c              MOVS     r0,#0x6c              ;1073
00033a  f7fffffe          BL       SW97500_RegisterSingleWrite
00033e  f89d0000          LDRB     r0,[sp,#0]            ;1075
000342  f0200007          BIC      r0,r0,#7              ;1075
000346  1cc0              ADDS     r0,r0,#3              ;1075
000348  f88d0000          STRB     r0,[sp,#0]            ;1075
00034c  9a00              LDR      r2,[sp,#0]            ;1076
00034e  2102              MOVS     r1,#2                 ;1076
000350  f44f709a          MOV      r0,#0x134             ;1076
000354  f7fffffe          BL       SW97500_RegisterSingleWrite
000358  6820              LDR      r0,[r4,#0]            ;1078  ; s_pktmoduleSRICCommonConf
00035a  f8d003d4          LDR      r0,[r0,#0x3d4]        ;1078
00035e  9000              STR      r0,[sp,#0]            ;1078
000360  f89d0002          LDRB     r0,[sp,#2]            ;1079
000364  f0200001          BIC      r0,r0,#1              ;1079
000368  f88d0002          STRB     r0,[sp,#2]            ;1079
00036c  9a00              LDR      r2,[sp,#0]            ;1080
00036e  b002              ADD      sp,sp,#8              ;1080
000370  2102              MOVS     r1,#2                 ;1080
000372  e8bd4010          POP      {r4,lr}               ;1080
000376  f44f70a2          MOV      r0,#0x144             ;1080
00037a  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.894|
00037e  4c2b              LDR      r4,|L11.1068|
000380  6820              LDR      r0,[r4,#0]            ;1083  ; s_pktmoduleSRICCommonConf
000382  6e80              LDR      r0,[r0,#0x68]         ;1083
000384  9001              STR      r0,[sp,#4]            ;1083
000386  f89d0004          LDRB     r0,[sp,#4]            ;1084
00038a  f02000c0          BIC      r0,r0,#0xc0           ;1084
00038e  3040              ADDS     r0,r0,#0x40           ;1084
000390  f88d0004          STRB     r0,[sp,#4]            ;1084
000394  f89d0005          LDRB     r0,[sp,#5]            ;1085
000398  f0400003          ORR      r0,r0,#3              ;1085
00039c  f88d0005          STRB     r0,[sp,#5]            ;1085
0003a0  9a01              LDR      r2,[sp,#4]            ;1086
0003a2  2101              MOVS     r1,#1                 ;1086
0003a4  206c              MOVS     r0,#0x6c              ;1086
0003a6  f7fffffe          BL       SW97500_RegisterSingleWrite
0003aa  6820              LDR      r0,[r4,#0]            ;1088  ; s_pktmoduleSRICCommonConf
0003ac  6e80              LDR      r0,[r0,#0x68]         ;1088
0003ae  9001              STR      r0,[sp,#4]            ;1088
0003b0  f89d0004          LDRB     r0,[sp,#4]            ;1089
0003b4  f04000c0          ORR      r0,r0,#0xc0           ;1089
0003b8  f88d0004          STRB     r0,[sp,#4]            ;1089
0003bc  f89d0005          LDRB     r0,[sp,#5]            ;1090
0003c0  f0200003          BIC      r0,r0,#3              ;1090
0003c4  1c40              ADDS     r0,r0,#1              ;1090
0003c6  f88d0005          STRB     r0,[sp,#5]            ;1090
0003ca  9a01              LDR      r2,[sp,#4]            ;1091
0003cc  2100              MOVS     r1,#0                 ;1091
0003ce  206c              MOVS     r0,#0x6c              ;1091
0003d0  f7fffffe          BL       SW97500_RegisterSingleWrite
0003d4  f89d0000          LDRB     r0,[sp,#0]            ;1093
0003d8  f0200007          BIC      r0,r0,#7              ;1093
0003dc  1cc0              ADDS     r0,r0,#3              ;1093
0003de  f88d0000          STRB     r0,[sp,#0]            ;1093
0003e2  9a00              LDR      r2,[sp,#0]            ;1094
0003e4  2102              MOVS     r1,#2                 ;1094
0003e6  f44f709a          MOV      r0,#0x134             ;1094
0003ea  f7fffffe          BL       SW97500_RegisterSingleWrite
0003ee  6820              LDR      r0,[r4,#0]            ;1096  ; s_pktmoduleSRICCommonConf
0003f0  f8d003d4          LDR      r0,[r0,#0x3d4]        ;1096
0003f4  9000              STR      r0,[sp,#0]            ;1096
0003f6  f89d0002          LDRB     r0,[sp,#2]            ;1097
0003fa  f0200001          BIC      r0,r0,#1              ;1097
0003fe  f88d0002          STRB     r0,[sp,#2]            ;1097
000402  9a00              LDR      r2,[sp,#0]            ;1098
000404  b002              ADD      sp,sp,#8              ;1098
000406  2102              MOVS     r1,#2                 ;1098
000408  e8bd4010          POP      {r4,lr}               ;1098
00040c  f44f70a2          MOV      r0,#0x144             ;1098
000410  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.1044|
000414  4c05              LDR      r4,|L11.1068|
000416  6820              LDR      r0,[r4,#0]            ;1102  ; s_pktmoduleSRICCommonConf
000418  6e82              LDR      r2,[r0,#0x68]         ;1102
00041a  2102              MOVS     r1,#2                 ;1102
00041c  206c              MOVS     r0,#0x6c              ;1102
00041e  f7fffffe          BL       SW97500_RegisterSingleWrite
000422  6820              LDR      r0,[r4,#0]            ;1103  ; s_pktmoduleSRICCommonConf
000424  f8d023c4          LDR      r2,[r0,#0x3c4]        ;1103
000428  2102              MOVS     r1,#2                 ;1103
00042a  e001              B        |L11.1072|
                  |L11.1068|
                          DCD      ||.data||
                  |L11.1072|
000430  f44f709a          MOV      r0,#0x134             ;1103
000434  f7fffffe          BL       SW97500_RegisterSingleWrite
000438  6820              LDR      r0,[r4,#0]            ;1104  ; s_pktmoduleSRICCommonConf
00043a  f8d023d4          LDR      r2,[r0,#0x3d4]        ;1104
00043e  b002              ADD      sp,sp,#8              ;1104
000440  2102              MOVS     r1,#2                 ;1104
000442  e8bd4010          POP      {r4,lr}               ;1104
000446  f44f70a2          MOV      r0,#0x144             ;1104
00044a  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.1102|
00044e  4817              LDR      r0,|L11.1196|
000450  f8501f88          LDR      r1,[r0,#0x88]!        ;1109
000454  f0210140          BIC      r1,r1,#0x40           ;1109
000458  6001              STR      r1,[r0,#0]            ;1109
00045a  6801              LDR      r1,[r0,#0]            ;1110
00045c  f4217100          BIC      r1,r1,#0x200          ;1110
000460  6001              STR      r1,[r0,#0]            ;1110
000462  4813              LDR      r0,|L11.1200|
000464  6800              LDR      r0,[r0,#0]            ;1112  ; s_pktmoduleSRICCommonConf
000466  6a00              LDR      r0,[r0,#0x20]         ;1112
000468  9000              STR      r0,[sp,#0]            ;1112
00046a  f89d0000          LDRB     r0,[sp,#0]            ;1113
00046e  f0400002          ORR      r0,r0,#2              ;1113
000472  f88d0000          STRB     r0,[sp,#0]            ;1113
000476  9a00              LDR      r2,[sp,#0]            ;1114
000478  b002              ADD      sp,sp,#8              ;1114
00047a  2102              MOVS     r1,#2                 ;1114
00047c  e8bd4010          POP      {r4,lr}               ;1114
000480  2024              MOVS     r0,#0x24              ;1114
000482  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.1158|
000486  f7fffffe          BL       hal_pwmdrv_GetControlConfig
00048a  f8d00120          LDR      r0,[r0,#0x120]        ;1118
00048e  4907              LDR      r1,|L11.1196|
000490  f8c10088          STR      r0,[r1,#0x88]         ;1118
000494  4806              LDR      r0,|L11.1200|
000496  6800              LDR      r0,[r0,#0]            ;1120  ; s_pktmoduleSRICCommonConf
000498  6a02              LDR      r2,[r0,#0x20]         ;1120
00049a  b002              ADD      sp,sp,#8              ;1120
00049c  2102              MOVS     r1,#2                 ;1120
00049e  e8bd4010          POP      {r4,lr}               ;1120
0004a2  2024              MOVS     r0,#0x24              ;1120
0004a4  f7ffbffe          B.W      SW97500_RegisterSingleWrite
                  |L11.1192|
0004a8  b002              ADD      sp,sp,#8
0004aa  bd10              POP      {r4,pc}
;;;1126   
                          ENDP

                  |L11.1196|
                          DCD      0x40002000
                  |L11.1200|
                          DCD      ||.data||

                          AREA ||i.SW97500_SetIdleOperationMode||, CODE, READONLY, ALIGN=1

                  SW97500_SetIdleOperationMode PROC
;;;878    
;;;879    void SW97500_SetIdleOperationMode(void)
000000  b500              PUSH     {lr}
;;;880    {
000002  b085              SUB      sp,sp,#0x14
;;;881    	// IDLE SRIC Setting
;;;882    	tSRIC_CFGR_MUX_EN_t tSRIC_CFGR_MUX_EN;
;;;883    	tSRIC_CFGR_MUX_EN.tBit.mux_bit_en = 0x7FF;
000004  f8bd0004          LDRH     r0,[sp,#4]
000008  f4004000          AND      r0,r0,#0x8000
00000c  f20070ff          ADD      r0,r0,#0x7ff
000010  f8ad0004          STRH     r0,[sp,#4]
;;;884    	tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 0;
000014  f8bd0005          LDRH     r0,[sp,#5]
000018  f4207060          BIC      r0,r0,#0x380
00001c  f8ad0005          STRH     r0,[sp,#5]
;;;885    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tot = 1;
000020  f89d0006          LDRB     r0,[sp,#6]
000024  f020003c          BIC      r0,r0,#0x3c
000028  1d00              ADDS     r0,r0,#4
00002a  f88d0006          STRB     r0,[sp,#6]
;;;886    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tsync = 1;
00002e  f8bd0006          LDRH     r0,[sp,#6]
000032  f4207070          BIC      r0,r0,#0x3c0
000036  3040              ADDS     r0,r0,#0x40
000038  f8ad0006          STRH     r0,[sp,#6]
;;;887    	tSRIC_CFGR_MUX_EN.tBit.m1_mux_en = 1;
00003c  f89d0007          LDRB     r0,[sp,#7]
000040  f0400004          ORR      r0,r0,#4
000044  f88d0007          STRB     r0,[sp,#7]
;;;888    	MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), tSRIC_CFGR_MUX_EN.ulBulk);
000048  9901              LDR      r1,[sp,#4]
00004a  f2420020          MOV      r0,#0x2020
00004e  f7fffffe          BL       MSPI_RegisterWrite
;;;889    	
;;;890    	// IDLE CR TUNE
;;;891    	tSRIC_CFGR_MUX_CFG_00_t tSRIC_CFGR_MUX_CFG_00;
;;;892    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_00 = 0x0B;
000052  f89d0008          LDRB     r0,[sp,#8]
000056  f020000f          BIC      r0,r0,#0xf
00005a  300b              ADDS     r0,r0,#0xb
00005c  f88d0008          STRB     r0,[sp,#8]
;;;893    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_01 = 0x0C;
000060  f89d0008          LDRB     r0,[sp,#8]
000064  f02000f0          BIC      r0,r0,#0xf0
000068  30c0              ADDS     r0,r0,#0xc0
00006a  f88d0008          STRB     r0,[sp,#8]
;;;894    	MSPI_RegisterWrite((0x078 | MSPI_BROADCAST), tSRIC_CFGR_MUX_CFG_00.ulBulk);
00006e  9902              LDR      r1,[sp,#8]
000070  f2420078          MOV      r0,#0x2078
000074  f7fffffe          BL       MSPI_RegisterWrite
;;;895    
;;;896    	// IDLE Gain
;;;897    	tSRIC_CFGR_SENSE_CTRL_t tSRIC_CFGR_SENSE_CTRL;
;;;898    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_bcon = 0;
000078  f89d0000          LDRB     r0,[sp,#0]
00007c  f0200003          BIC      r0,r0,#3
000080  f88d0000          STRB     r0,[sp,#0]
;;;899    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_stc_insel = 0;
000084  f89d0000          LDRB     r0,[sp,#0]
000088  f0200004          BIC      r0,r0,#4
00008c  f88d0000          STRB     r0,[sp,#0]
;;;900    	tSRIC_CFGR_SENSE_CTRL.tBit.int_ref = 2;
000090  f89d0000          LDRB     r0,[sp,#0]
000094  f0200018          BIC      r0,r0,#0x18
000098  3010              ADDS     r0,r0,#0x10
00009a  f88d0000          STRB     r0,[sp,#0]
;;;901    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_ref = 2;
00009e  f89d0000          LDRB     r0,[sp,#0]
0000a2  f0200060          BIC      r0,r0,#0x60
0000a6  3040              ADDS     r0,r0,#0x40
0000a8  f88d0000          STRB     r0,[sp,#0]
;;;902    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcon = CFGR_SENSE_CTRL_lv_ssu_bcon;
0000ac  f8bd0000          LDRH     r0,[sp,#0]
0000b0  f4207060          BIC      r0,r0,#0x380
0000b4  f8ad0000          STRH     r0,[sp,#0]
;;;903    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcons = CFGR_SENSE_CTRL_lv_ssu_bcons;
0000b8  f89d0001          LDRB     r0,[sp,#1]
0000bc  f020001c          BIC      r0,r0,#0x1c
0000c0  1d00              ADDS     r0,r0,#4
0000c2  f88d0001          STRB     r0,[sp,#1]
;;;904    	tSRIC_CFGR_SENSE_CTRL.tBit.hv_ssu_bcon = CFGR_SENSE_CTRL_hv_ssu_bcon;
0000c6  f89d0001          LDRB     r0,[sp,#1]
0000ca  f02000e0          BIC      r0,r0,#0xe0
0000ce  3080              ADDS     r0,r0,#0x80
0000d0  f88d0001          STRB     r0,[sp,#1]
;;;905    	tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = CFGR_SENSE_CTRL_integ_half;
0000d4  f89d0002          LDRB     r0,[sp,#2]
0000d8  f0400001          ORR      r0,r0,#1
0000dc  f88d0002          STRB     r0,[sp,#2]
;;;906    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_gc = CFGR_SENSE_CTRL_pre_gc;
0000e0  f89d0002          LDRB     r0,[sp,#2]
0000e4  f040000e          ORR      r0,r0,#0xe
0000e8  f88d0002          STRB     r0,[sp,#2]
;;;907    	tSRIC_CFGR_SENSE_CTRL.tBit.int_gc = 5;
0000ec  f89d0002          LDRB     r0,[sp,#2]
0000f0  f0200070          BIC      r0,r0,#0x70
0000f4  3050              ADDS     r0,r0,#0x50
0000f6  f88d0002          STRB     r0,[sp,#2]
;;;908    	tSRIC_CFGR_SENSE_CTRL.tBit.powsel = 0;
0000fa  f89d0002          LDRB     r0,[sp,#2]
0000fe  f0200080          BIC      r0,r0,#0x80
000102  f88d0002          STRB     r0,[sp,#2]
;;;909    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_bs_lp = CFGR_SENSE_CTRL_pre_bs_lp;
000106  f89d0003          LDRB     r0,[sp,#3]
00010a  f0200001          BIC      r0,r0,#1
00010e  f88d0003          STRB     r0,[sp,#3]
;;;910    	tSRIC_CFGR_SENSE_CTRL.tBit.int_bs_lp = CFGR_SENSE_CTRL_int_bs_lp;
000112  f89d0003          LDRB     r0,[sp,#3]
000116  f0200002          BIC      r0,r0,#2
00011a  f88d0003          STRB     r0,[sp,#3]
;;;911    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_bs_lp = CFGR_SENSE_CTRL_sha_bs_lp;
00011e  f89d0003          LDRB     r0,[sp,#3]
000122  f0200004          BIC      r0,r0,#4
000126  f88d0003          STRB     r0,[sp,#3]
;;;912    	MSPI_RegisterWrite((0x144 | MSPI_BROADCAST), tSRIC_CFGR_SENSE_CTRL.ulBulk);
00012a  9900              LDR      r1,[sp,#0]
00012c  f2421044          MOV      r0,#0x2144
000130  f7fffffe          BL       MSPI_RegisterWrite
;;;913    
;;;914    	// IDLE GTUNE
;;;915    	tSRIC_CR_GTUNE_t tSRIC_CR_GTUNE;
;;;916    	tSRIC_CR_GTUNE.tBit.cr_gtune = 2;
000134  f89d000c          LDRB     r0,[sp,#0xc]
000138  f0200007          BIC      r0,r0,#7
00013c  1c80              ADDS     r0,r0,#2
00013e  f88d000c          STRB     r0,[sp,#0xc]
;;;917    	MSPI_RegisterWrite((0x134 | MSPI_BROADCAST), tSRIC_CR_GTUNE.ulBulk);
000142  9903              LDR      r1,[sp,#0xc]
000144  b005              ADD      sp,sp,#0x14
000146  f2421034          MOV      r0,#0x2134
00014a  f85deb04          POP      {lr}
00014e  f7ffbffe          B.W      MSPI_RegisterWrite
;;;918    }
;;;919    
                          ENDP


                          AREA ||i.SW97500_SetRuntimeChangeRegister||, CODE, READONLY, ALIGN=1

                  SW97500_SetRuntimeChangeRegister PROC
;;;1126   
;;;1127   void SW97500_SetRuntimeChangeRegister(eROIC_REG_SET_CHANGE_MODE_t eMode)
000000  280f              CMP      r0,#0xf
;;;1128   {
;;;1129   	switch(eMode)
;;;1130   	{
;;;1131   		case ROIC_REG_SET_CHANGE_MUX_REMAP:
;;;1132   		{
;;;1133   			break;
;;;1134   		}
;;;1135   		case ROIC_REG_SET_CHAGNE_CR_TUNE:
;;;1136   		case ROIC_REG_SET_CHAGNE_LOCAL_CR_TUNE:
;;;1137   		{
;;;1138   			SW97500_Reg_CRTuneSetting(eMode);
;;;1139   			break;
;;;1140   		}
;;;1141   		case ROIC_REG_SET_CHAGNE_WacomPen_Local_Setting:
;;;1142   		{
;;;1143   			break;
;;;1144   		}
;;;1145   		case ROIC_REG_SET_CHAGNE_WacomPen_Full_Setting:
;;;1146   		{
;;;1147   			break;
;;;1148   		}
;;;1149   		case ROIC_REG_SET_CHAGNE_MSPen_Local_Setting:
;;;1150   		{
;;;1151   			break;
;;;1152   		}
;;;1153   		case ROIC_REG_SET_CHAGNE_MSPen_Full_Setting:
;;;1154   		{
;;;1155   			break;
;;;1156   		}
;;;1157   		case ROIC_REG_SET_CHANGE_FINGER_PEN_LOCAL_ACTIVE:
;;;1158   		{
;;;1159   			break;
;;;1160   		}
;;;1161   		case ROIC_REG_SET_CHANGE_FINGER_PEN_FULL:
;;;1162   		{
;;;1163   			break;
;;;1164   		}
;;;1165   #if USED_NOISE_HOPPING_FREQ
;;;1166   		case ROIC_REG_SET_CHANGE_FREQ_MAIN_FINGER_PEN_FULL:
;;;1167   		{
;;;1168   			SW97500_Reg_AFESetting(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
;;;1169   			break;
;;;1170   		}
;;;1171   		case ROIC_REG_SET_CHANGE_FREQ_HOPP1_FINGER_PEN_FULL:
;;;1172   		{
;;;1173   			SW97500_Reg_AFESetting(SM_FINGER_ONLY_ACTIVE_FRQ_HOP1_MODE);
;;;1174   			break;
;;;1175   		}
;;;1176   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1177   	}
;;;1178   }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1208              DCB      0x12,0x08
00000c  08121212          DCB      0x08,0x12,0x12,0x12
000010  12121212          DCB      0x12,0x12,0x12,0x12
000014  1212120a          DCB      0x12,0x12,0x12,0x0a
000018  0e00              DCB      0x0e,0x00
00001a  f7ffbffe          B.W      SW97500_Reg_CRTuneSetting
00001e  f2410003          MOV      r0,#0x1003            ;1168
000022  f7ffbffe          B.W      SW97500_Reg_AFESetting
000026  f2410005          MOV      r0,#0x1005            ;1173
00002a  f7ffbffe          B.W      SW97500_Reg_AFESetting
00002e  4770              BX       lr
;;;1179   
                          ENDP


                          AREA ||i.SW97500_SetS3OperationMode||, CODE, READONLY, ALIGN=2

                  SW97500_SetS3OperationMode PROC
;;;768    
;;;769    bool_t SW97500_SetS3OperationMode(void)
000000  b510              PUSH     {r4,lr}
;;;770    {
000002  b090              SUB      sp,sp,#0x40
;;;771    	bool_t bReg = YES;
000004  2401              MOVS     r4,#1
;;;772    	tSRIC_CFGR_DIC_CFG_t tSRIC_CFGR_DIC_CFG;
;;;773    	uint32_t ulBuf[10];
;;;774    
;;;775    	tSRIC_CFGR_MUX_EN_t tSRIC_CFGR_MUX_EN;
;;;776    #if (USED_IDLE_NI_SENSING_MUX_NUM == 1)
;;;777    	tSRIC_CFGR_MUX_EN.tBit.mux_bit_en = 0x3FF;
;;;778    	tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 0;
;;;779    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tot = 0;
;;;780    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tsync = 0;
;;;781    	tSRIC_CFGR_MUX_EN.tBit.m1_mux_en = 0;
;;;782    #elif (USED_IDLE_NI_SENSING_MUX_NUM == 2)
;;;783    	tSRIC_CFGR_MUX_EN.tBit.mux_bit_en = 0x7FF;
000006  f8bd0004          LDRH     r0,[sp,#4]
00000a  f4004000          AND      r0,r0,#0x8000
00000e  f20070ff          ADD      r0,r0,#0x7ff
000012  f8ad0004          STRH     r0,[sp,#4]
;;;784    	tSRIC_CFGR_MUX_EN.tBit.mux_int_en = 0;
000016  f8bd0005          LDRH     r0,[sp,#5]
00001a  f4207060          BIC      r0,r0,#0x380
00001e  f8ad0005          STRH     r0,[sp,#5]
;;;785    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tot = 1;
000022  f89d0006          LDRB     r0,[sp,#6]
000026  f020003c          BIC      r0,r0,#0x3c
00002a  1d00              ADDS     r0,r0,#4
00002c  f88d0006          STRB     r0,[sp,#6]
;;;786    	tSRIC_CFGR_MUX_EN.tBit.mux_num_tsync = 1;
000030  f8bd0006          LDRH     r0,[sp,#6]
000034  f4207070          BIC      r0,r0,#0x3c0
000038  3040              ADDS     r0,r0,#0x40
00003a  f8ad0006          STRH     r0,[sp,#6]
;;;787    	tSRIC_CFGR_MUX_EN.tBit.m1_mux_en = 1;
00003e  f89d0007          LDRB     r0,[sp,#7]
000042  f0400004          ORR      r0,r0,#4
000046  f88d0007          STRB     r0,[sp,#7]
;;;788    #endif /* (USED_IDLE_NI_SENSING_MUX_NUM == 1) */
;;;789    	// IDLE SRIC Setting
;;;790    	MSPI_RegisterWrite((0x020 | MSPI_BROADCAST), tSRIC_CFGR_MUX_EN.ulBulk);
00004a  9901              LDR      r1,[sp,#4]
00004c  f2420020          MOV      r0,#0x2020
000050  f7fffffe          BL       MSPI_RegisterWrite
;;;791    
;;;792    	tSRIC_CFGR_DIC_CFG.ulBulk = s_pktmoduleSRICCommonConf->tParam_CFGR_DIC_CFG.ulBulk;
000054  4861              LDR      r0,|L14.476|
000056  6800              LDR      r0,[r0,#0]  ; s_pktmoduleSRICCommonConf
000058  6a00              LDR      r0,[r0,#0x20]
00005a  9001              STR      r0,[sp,#4]
;;;793    	tSRIC_CFGR_DIC_CFG.tBit.sd_off = 1;
00005c  f89d0004          LDRB     r0,[sp,#4]
000060  f0400001          ORR      r0,r0,#1
000064  f88d0004          STRB     r0,[sp,#4]
;;;794    	tSRIC_CFGR_DIC_CFG.tBit.stuck_abd = 1;
000068  f89d0005          LDRB     r0,[sp,#5]
00006c  f0400008          ORR      r0,r0,#8
000070  f88d0005          STRB     r0,[sp,#5]
;;;795    	tSRIC_CFGR_DIC_CFG.tBit.cfgr_abd = 1;
000074  f89d0005          LDRB     r0,[sp,#5]
000078  f0400010          ORR      r0,r0,#0x10
00007c  f88d0005          STRB     r0,[sp,#5]
;;;796    	MSPI_RegisterWrite((0x024 | MSPI_BROADCAST), tSRIC_CFGR_DIC_CFG.ulBulk);
000080  9901              LDR      r1,[sp,#4]
000082  f2420024          MOV      r0,#0x2024
000086  f7fffffe          BL       MSPI_RegisterWrite
;;;797    	MSPI_RegisterRead(0x024, &ulBuf[0], MSPI_READ_SM0_R0);
00008a  2201              MOVS     r2,#1
00008c  a904              ADD      r1,sp,#0x10
00008e  2024              MOVS     r0,#0x24
000090  f7fffffe          BL       MSPI_RegisterRead
;;;798    
;;;799    	tSRIC_CFGR_PWM_CTL_t SRIC_CFGR_PWM_CTL;
;;;800    	SRIC_CFGR_PWM_CTL.tBit.pwm_num = PARAMSET_ROIC_CFGR_PWM_CTL_Idle_pwm_num;
000094  f89d0008          LDRB     r0,[sp,#8]
000098  f020007f          BIC      r0,r0,#0x7f
00009c  3028              ADDS     r0,r0,#0x28
00009e  f88d0008          STRB     r0,[sp,#8]
;;;801    	SRIC_CFGR_PWM_CTL.tBit.pwm_act_num = PARAMSET_ROIC_CFGR_PWM_CTL_Idle_pwm_act_num;
0000a2  f8bd0008          LDRH     r0,[sp,#8]
0000a6  f420507e          BIC      r0,r0,#0x3f80
0000aa  f5006000          ADD      r0,r0,#0x800
0000ae  f8ad0008          STRH     r0,[sp,#8]
;;;802    	SRIC_CFGR_PWM_CTL.tBit.pwm_smpl_num = PARAMSET_ROIC_CFGR_PWM_CTL_Idle_pwm_act_num;
0000b2  f8bd0009          LDRH     r0,[sp,#9]
0000b6  f42050fe          BIC      r0,r0,#0x1fc0
0000ba  f5006080          ADD      r0,r0,#0x400
0000be  f8ad0009          STRH     r0,[sp,#9]
;;;803    	SRIC_CFGR_PWM_CTL.tBit.pwm_dum_num = PARAMSET_ROIC_CFGR_PWM_CTL_pwm_dum_num;
0000c2  f8bd000a          LDRH     r0,[sp,#0xa]
0000c6  f420607e          BIC      r0,r0,#0xfe0
0000ca  3060              ADDS     r0,r0,#0x60
0000cc  f8ad000a          STRH     r0,[sp,#0xa]
;;;804    	MSPI_RegisterWrite((0x028 | MSPI_BROADCAST), SRIC_CFGR_PWM_CTL.ulBulk);
0000d0  9902              LDR      r1,[sp,#8]
0000d2  f2420028          MOV      r0,#0x2028
0000d6  f7fffffe          BL       MSPI_RegisterWrite
;;;805    
;;;806    	// IDLE Mux Order
;;;807    	tSRIC_CFGR_MUX_CFG_00_t tSRIC_CFGR_MUX_CFG_00;
;;;808    #if (USED_IDLE_NI_SENSING_MUX_NUM == 1)
;;;809    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_00 = 0x0B;
;;;810    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_01 = 0x00;
;;;811    #elif (USED_IDLE_NI_SENSING_MUX_NUM == 2)
;;;812    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_00 = 0x0B;
0000da  f89d000c          LDRB     r0,[sp,#0xc]
0000de  f020000f          BIC      r0,r0,#0xf
0000e2  300b              ADDS     r0,r0,#0xb
0000e4  f88d000c          STRB     r0,[sp,#0xc]
;;;813    	tSRIC_CFGR_MUX_CFG_00.tBit.mux_01 = 0x0C;
0000e8  f89d000c          LDRB     r0,[sp,#0xc]
0000ec  f02000f0          BIC      r0,r0,#0xf0
0000f0  30c0              ADDS     r0,r0,#0xc0
0000f2  f88d000c          STRB     r0,[sp,#0xc]
;;;814    #endif /* (USED_IDLE_NI_SENSING_MUX_NUM == 1) */
;;;815    	MSPI_RegisterWrite((0x078 | MSPI_BROADCAST), tSRIC_CFGR_MUX_CFG_00.ulBulk);
0000f6  9903              LDR      r1,[sp,#0xc]
0000f8  f2420078          MOV      r0,#0x2078
0000fc  f7fffffe          BL       MSPI_RegisterWrite
;;;816    
;;;817    	// IDLE Gain
;;;818    	tSRIC_CFGR_SENSE_CTRL_t tSRIC_CFGR_SENSE_CTRL;
;;;819    #if (USED_IDLE_NI_SENSING_MUX_NUM == 1)
;;;820    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_bcon = 0;
;;;821    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_stc_insel = 0;
;;;822    	tSRIC_CFGR_SENSE_CTRL.tBit.int_ref = 2;
;;;823    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_ref = 2;
;;;824    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcon = CFGR_SENSE_CTRL_lv_ssu_bcon;
;;;825    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcons = CFGR_SENSE_CTRL_lv_ssu_bcons;
;;;826    	tSRIC_CFGR_SENSE_CTRL.tBit.hv_ssu_bcon = CFGR_SENSE_CTRL_hv_ssu_bcon;
;;;827    	tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = CFGR_SENSE_CTRL_integ_half;
;;;828    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_gc = CFGR_SENSE_CTRL_pre_gc;
;;;829    	tSRIC_CFGR_SENSE_CTRL.tBit.int_gc = 5;
;;;830    	tSRIC_CFGR_SENSE_CTRL.tBit.powsel = 0;
;;;831    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_bs_lp = CFGR_SENSE_CTRL_pre_bs_lp;
;;;832    	tSRIC_CFGR_SENSE_CTRL.tBit.int_bs_lp = CFGR_SENSE_CTRL_int_bs_lp;
;;;833    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_bs_lp = CFGR_SENSE_CTRL_sha_bs_lp;
;;;834    #elif (USED_IDLE_NI_SENSING_MUX_NUM == 2)
;;;835    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_bcon = 0;
000100  f89d0000          LDRB     r0,[sp,#0]
000104  f0200003          BIC      r0,r0,#3
000108  f88d0000          STRB     r0,[sp,#0]
;;;836    	tSRIC_CFGR_SENSE_CTRL.tBit.adc_stc_insel = 0;
00010c  f89d0000          LDRB     r0,[sp,#0]
000110  f0200004          BIC      r0,r0,#4
000114  f88d0000          STRB     r0,[sp,#0]
;;;837    	tSRIC_CFGR_SENSE_CTRL.tBit.int_ref = 2;
000118  f89d0000          LDRB     r0,[sp,#0]
00011c  f0200018          BIC      r0,r0,#0x18
000120  3010              ADDS     r0,r0,#0x10
000122  f88d0000          STRB     r0,[sp,#0]
;;;838    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_ref = 2;
000126  f89d0000          LDRB     r0,[sp,#0]
00012a  f0200060          BIC      r0,r0,#0x60
00012e  3040              ADDS     r0,r0,#0x40
000130  f88d0000          STRB     r0,[sp,#0]
;;;839    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcon = CFGR_SENSE_CTRL_lv_ssu_bcon;
000134  f8bd0000          LDRH     r0,[sp,#0]
000138  f4207060          BIC      r0,r0,#0x380
00013c  f8ad0000          STRH     r0,[sp,#0]
;;;840    	tSRIC_CFGR_SENSE_CTRL.tBit.lv_ssu_bcons = CFGR_SENSE_CTRL_lv_ssu_bcons;
000140  f89d0001          LDRB     r0,[sp,#1]
000144  f020001c          BIC      r0,r0,#0x1c
000148  1d00              ADDS     r0,r0,#4
00014a  f88d0001          STRB     r0,[sp,#1]
;;;841    	tSRIC_CFGR_SENSE_CTRL.tBit.hv_ssu_bcon = 2;//CFGR_SENSE_CTRL_hv_ssu_bcon;
00014e  f89d0001          LDRB     r0,[sp,#1]
000152  f02000e0          BIC      r0,r0,#0xe0
000156  3040              ADDS     r0,r0,#0x40
000158  f88d0001          STRB     r0,[sp,#1]
;;;842    	tSRIC_CFGR_SENSE_CTRL.tBit.integ_half = CFGR_SENSE_CTRL_integ_half;
00015c  f89d0002          LDRB     r0,[sp,#2]
000160  f0400001          ORR      r0,r0,#1
000164  f88d0002          STRB     r0,[sp,#2]
;;;843    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_gc = CFGR_SENSE_CTRL_pre_gc;
000168  f89d0002          LDRB     r0,[sp,#2]
00016c  f040000e          ORR      r0,r0,#0xe
000170  f88d0002          STRB     r0,[sp,#2]
;;;844    	tSRIC_CFGR_SENSE_CTRL.tBit.int_gc = 5;
000174  f89d0002          LDRB     r0,[sp,#2]
000178  f0200070          BIC      r0,r0,#0x70
00017c  3050              ADDS     r0,r0,#0x50
00017e  f88d0002          STRB     r0,[sp,#2]
;;;845    	tSRIC_CFGR_SENSE_CTRL.tBit.powsel = 0;
000182  f89d0002          LDRB     r0,[sp,#2]
000186  f0200080          BIC      r0,r0,#0x80
00018a  f88d0002          STRB     r0,[sp,#2]
;;;846    	tSRIC_CFGR_SENSE_CTRL.tBit.pre_bs_lp = 1;//CFGR_SENSE_CTRL_pre_bs_lp;
00018e  f89d0003          LDRB     r0,[sp,#3]
000192  f0400001          ORR      r0,r0,#1
000196  f88d0003          STRB     r0,[sp,#3]
;;;847    	tSRIC_CFGR_SENSE_CTRL.tBit.int_bs_lp = 1;//CFGR_SENSE_CTRL_int_bs_lp;
00019a  f89d0003          LDRB     r0,[sp,#3]
00019e  f0400002          ORR      r0,r0,#2
0001a2  f88d0003          STRB     r0,[sp,#3]
;;;848    	tSRIC_CFGR_SENSE_CTRL.tBit.sha_bs_lp = 1;//CFGR_SENSE_CTRL_sha_bs_lp;
0001a6  f89d0003          LDRB     r0,[sp,#3]
0001aa  f0400004          ORR      r0,r0,#4
0001ae  f88d0003          STRB     r0,[sp,#3]
;;;849    #endif /* (USED_IDLE_NI_SENSING_MUX_NUM == 1) */
;;;850    	MSPI_RegisterWrite((0x144 | MSPI_BROADCAST), tSRIC_CFGR_SENSE_CTRL.ulBulk);
0001b2  9900              LDR      r1,[sp,#0]
0001b4  f2421044          MOV      r0,#0x2144
0001b8  f7fffffe          BL       MSPI_RegisterWrite
;;;851    
;;;852    	// IDLE GTUNE
;;;853    	tSRIC_CR_GTUNE_t tSRIC_CR_GTUNE;
;;;854    	// IDLE TUNE GROUP
;;;855    	tSRIC_CFGR_TUNE_GROUP_t tSRIC_CFGR_TUNE_GROUP;
;;;856    	tSRIC_CR_M1_LTUNE_t tSRIC_CR_M1_LTUNE;
;;;857    #if (USED_IDLE_NI_SENSING_MUX_NUM == 1)
;;;858    	tSRIC_CR_GTUNE.tBit.cr_gtune = 5;
;;;859    
;;;860    	tSRIC_CFGR_TUNE_GROUP.tBit.cr_rg2_sel = 2;
;;;861    	tSRIC_CFGR_TUNE_GROUP.tBit.cr_rg3_sel = 28;
;;;862    	tSRIC_CFGR_TUNE_GROUP.tBit.cr_m1_g2_sel = 14;
;;;863    	tSRIC_CFGR_TUNE_GROUP.tBit.cr_m1_g3_sel = 16;
;;;864    
;;;865    	tSRIC_CR_M1_LTUNE.tBit.cr_m1o_rg1 = 2;//20;
;;;866    	tSRIC_CR_M1_LTUNE.tBit.cr_m1o_rg2 = 2;//20;
;;;867    	tSRIC_CR_M1_LTUNE.tBit.cr_m1o_rg3 = 2;//20;
;;;868    	tSRIC_CR_M1_LTUNE.tBit.cr_m1e_rg1 = 2;//28;
;;;869    	tSRIC_CR_M1_LTUNE.tBit.cr_m1e_rg2 = 2;//28;
;;;870    	tSRIC_CR_M1_LTUNE.tBit.cr_m1e_rg3 = 2;//28;
;;;871    #elif (USED_IDLE_NI_SENSING_MUX_NUM == 2)
;;;872    	tSRIC_CR_GTUNE.tBit.cr_gtune = 2;
0001bc  f89d0038          LDRB     r0,[sp,#0x38]
0001c0  f0200007          BIC      r0,r0,#7
0001c4  1c80              ADDS     r0,r0,#2
0001c6  f88d0038          STRB     r0,[sp,#0x38]
;;;873    #endif /* (USED_IDLE_NI_SENSING_MUX_NUM == 1) */
;;;874    	MSPI_RegisterWrite((0x134 | MSPI_BROADCAST), tSRIC_CR_GTUNE.ulBulk);
0001ca  990e              LDR      r1,[sp,#0x38]
0001cc  f2421034          MOV      r0,#0x2134
0001d0  f7fffffe          BL       MSPI_RegisterWrite
;;;875    
;;;876    	return bReg;
;;;877    }
0001d4  b010              ADD      sp,sp,#0x40
0001d6  4620              MOV      r0,r4                 ;876
0001d8  bd10              POP      {r4,pc}
;;;878    
                          ENDP

0001da  0000              DCW      0x0000
                  |L14.476|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTestProductROICBuf
                          %        16
                  ulReadBuf
                          %        16
                  RawValue_Row_Line_Sum
                          %        384
                  RawValue_Row_Line_Cnt
                          %        96
                  RawValue_Col_Line_Sum
                          %        112
                  RawValue_Col_Line_Cnt
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  s_pktmoduleSRICCommonConf
                          DCD      0x00000000
                  ucColLineCRMSPIIdx
000004  07000001          DCB      0x07,0x00,0x00,0x01
                  ucRowLineCRRegIdx
000008  0a010103          DCB      0x0a,0x01,0x01,0x03
                  g_ptSRICConfig
                          DCD      0x00000000
                  g_pR0_CR_MUX_Tune
                          DCD      0x00000000
                  g_pR1_CR_MUX_Tune
                          DCD      0x00000000
                  ulCRIndex
000018  0b0c0c0c          DCB      0x0b,0x0c,0x0c,0x0c
00001c  0d090909          DCB      0x0d,0x09,0x09,0x09
000020  09090808          DCB      0x09,0x09,0x08,0x08
000024  08080807          DCB      0x08,0x08,0x08,0x07
000028  07070707          DCB      0x07,0x07,0x07,0x07
00002c  06060606          DCB      0x06,0x06,0x06,0x06
000030  06050505          DCB      0x06,0x05,0x05,0x05
000034  05050404          DCB      0x05,0x05,0x04,0x04
000038  04040403          DCB      0x04,0x04,0x04,0x03
00003c  03030303          DCB      0x03,0x03,0x03,0x03
000040  00010101          DCB      0x00,0x01,0x01,0x01
000044  02                DCB      0x02
                  ucColLineCRRegIdx
000045  000001            DCB      0x00,0x00,0x01
000048  02030405          DCB      0x02,0x03,0x04,0x05
00004c  06070809          DCB      0x06,0x07,0x08,0x09
000050  0a0a0b            DCB      0x0a,0x0a,0x0b
                  ulMSPIIndex
000053  07                DCB      0x07
000054  07070707          DCB      0x07,0x07,0x07,0x07
000058  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00005c  0f060606          DCB      0x0f,0x06,0x06,0x06
000060  06060e0e          DCB      0x06,0x06,0x0e,0x0e
000064  0e0e0e05          DCB      0x0e,0x0e,0x0e,0x05
000068  05050505          DCB      0x05,0x05,0x05,0x05
00006c  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
000070  0d040404          DCB      0x0d,0x04,0x04,0x04
000074  04040c0c          DCB      0x04,0x04,0x0c,0x0c
000078  0c0c0c03          DCB      0x0c,0x0c,0x0c,0x03
00007c  03030303          DCB      0x03,0x03,0x03,0x03
000080  0b0b0b0b          DCB      0x0b,0x0b,0x0b,0x0b
000084  0b020202          DCB      0x0b,0x02,0x02,0x02
000088  02020a0a          DCB      0x02,0x02,0x0a,0x0a
00008c  0a0a0a01          DCB      0x0a,0x0a,0x0a,0x01
000090  01010101          DCB      0x01,0x01,0x01,0x01
000094  09090909          DCB      0x09,0x09,0x09,0x09
000098  09000000          DCB      0x09,0x00,0x00,0x00
00009c  00000808          DCB      0x00,0x00,0x08,0x08
0000a0  080808            DCB      0x08,0x08,0x08
                  ulROIC_gNum
0000a3  00                DCB      0x00
0000a4  01010102          DCB      0x01,0x01,0x01,0x02
0000a8  02010101          DCB      0x02,0x01,0x01,0x01
0000ac  00000101          DCB      0x00,0x00,0x01,0x01
0000b0  01020201          DCB      0x01,0x02,0x02,0x01
0000b4  01010000          DCB      0x01,0x01,0x00,0x00
0000b8  01010102          DCB      0x01,0x01,0x01,0x02
0000bc  02010101          DCB      0x02,0x01,0x01,0x01
0000c0  00000101          DCB      0x00,0x00,0x01,0x01
0000c4  01020201          DCB      0x01,0x02,0x02,0x01
0000c8  01010000          DCB      0x01,0x01,0x00,0x00
0000cc  01010102          DCB      0x01,0x01,0x01,0x02
0000d0  02010101          DCB      0x02,0x01,0x01,0x01
0000d4  00000101          DCB      0x00,0x00,0x01,0x01
0000d8  01020201          DCB      0x01,0x02,0x02,0x01
0000dc  01010000          DCB      0x01,0x01,0x00,0x00
0000e0  01010102          DCB      0x01,0x01,0x01,0x02
0000e4  02010101          DCB      0x02,0x01,0x01,0x01
0000e8  00000101          DCB      0x00,0x00,0x01,0x01
0000ec  01020201          DCB      0x01,0x02,0x02,0x01
0000f0  010100            DCB      0x01,0x01,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Module\\SRIC\\ROIC\\SW97500\\roic_ctrl_sw97500.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_sw97500_c_24d30887____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___19_roic_ctrl_sw97500_c_24d30887____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_sw97500_c_24d30887____REVSH|
#line 402
|__asm___19_roic_ctrl_sw97500_c_24d30887____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_sw97500_c_24d30887____RRX|
#line 587
|__asm___19_roic_ctrl_sw97500_c_24d30887____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
