; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm.crf ..\..\App\Algorithm\algorithm.c]
                          THUMB

                          AREA ||i.GetOperTimeUS||, CODE, READONLY, ALIGN=2

                  GetOperTimeUS PROC
;;;2716   uint32_t OperEndTime;
;;;2717   void GetOperTimeUS(uint64_t* StartTime, uint32_t* ScanTime)
000000  b570              PUSH     {r4-r6,lr}
;;;2718   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  e9d50100          LDRD     r0,r1,[r5,#0]
00000a  2400              MOVS     r4,#0
;;;2719   	uint16_t Temp = 0;
;;;2720   
;;;2721   	if (*StartTime == 0)
00000c  ea500201          ORRS     r2,r0,r1
000010  d00a              BEQ      |L1.40|
;;;2722   	{
;;;2723   		goto GETSCANTIME__GOTO_END;
;;;2724   	}
;;;2725   	
;;;2726   	Temp = (uint16_t)(getElapsedUS(*StartTime));
000012  f7fffffe          BL       getElapsedLongSYSTICK
000016  4a0d              LDR      r2,|L1.76|
000018  6812              LDR      r2,[r2,#0]  ; _timer_clock_
00001a  4623              MOV      r3,r4
00001c  f7fffffe          BL       __aeabi_uldivmod
;;;2727   	*ScanTime += Temp;
000020  6831              LDR      r1,[r6,#0]
000022  b280              UXTH     r0,r0                 ;2726
000024  4408              ADD      r0,r0,r1
000026  6030              STR      r0,[r6,#0]
                  |L1.40|
;;;2728   
;;;2729   GETSCANTIME__GOTO_END:
;;;2730   
;;;2731   	*StartTime = (uint64_t)getLongSysTick();
000028  4809              LDR      r0,|L1.80|
00002a  6800              LDR      r0,[r0,#0]  ; _timertick_high_rank_count_
00002c  03a2              LSLS     r2,r4,#14
00002e  ea424290          ORR      r2,r2,r0,LSR #18
000032  0381              LSLS     r1,r0,#14
000034  f04f4080          MOV      r0,#0x40000000
000038  f8d001b8          LDR      r0,[r0,#0x1b8]
00003c  f3c0000d          UBFX     r0,r0,#0,#14
000040  4308              ORRS     r0,r0,r1
000042  ea420104          ORR      r1,r2,r4
000046  e9c50100          STRD     r0,r1,[r5,#0]
;;;2732   }
00004a  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.76|
                          DCD      _timer_clock_
                  |L1.80|
                          DCD      _timertick_high_rank_count_

                          AREA ||i.algorithm_PendTouchEvent||, CODE, READONLY, ALIGN=2

                  algorithm_PendTouchEvent PROC
;;;937    uint8_t PendDebCnt[POSBUF_];
;;;938    void algorithm_PendTouchEvent(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;939    {
000004  b087              SUB      sp,sp,#0x1c
;;;940    	int i;
;;;941    	int distX, distY;
;;;942    	tXY_t pos, old_pos;
;;;943    	uint8_t ucMoveTHD_X,ucMoveTHD_Y;
;;;944    
;;;945    #if (ID_MAPPING_CHANGE)
;;;946    static uint8_t NewID = 50;
;;;947    static uint8_t Id_Map[MAX_TOUCH_] = {0,};
;;;948    static uint16_t NonTouchCnt = 0;
;;;949    #endif
;;;950    
;;;951    	hal_set_overlap_pen();
000006  f7fffffe          BL       hal_set_overlap_pen
;;;952    
;;;953    	memset(HID_status,0,HID_MAX_TOUCH);
00000a  48dc              LDR      r0,|L2.892|
00000c  f7fffffe          BL       __ARM_common_memclr4_10
;;;954    	memset(HID_id,0,HID_MAX_TOUCH);
000010  48db              LDR      r0,|L2.896|
000012  f7fffffe          BL       __ARM_common_memclr4_10
;;;955    	memset(HID_x,0,HID_MAX_TOUCH);
000016  48db              LDR      r0,|L2.900|
000018  f7fffffe          BL       __ARM_common_memclr4_10
;;;956    	memset(HID_y,0,HID_MAX_TOUCH);
00001c  48da              LDR      r0,|L2.904|
00001e  f7fffffe          BL       __ARM_common_memclr4_10
;;;957    
;;;958    	eSWIPPacketFormatId_t id = protocol_swip_GetPacketFormatId();
000022  f7fffffe          BL       protocol_swip_GetPacketFormatId
000026  4683              MOV      r11,r0
;;;959    #define SET_POS(tItem, pos)  \
;;;960    	do{    \
;;;961    			(tItem).tItem00.ucXHigh = ((pos).x >> 8) & 0xFF;    \
;;;962    			(tItem).tItem00.ucYHigh = ((pos).y >> 8) & 0xFF;    \
;;;963    			(tItem).tItem00.ucXLow = (pos).x & 0xFF;    \
;;;964    			(tItem).tItem00.ucYLow = (pos).y & 0xFF;    \
;;;965    		} while(0)
;;;966    
;;;967    	if(g_ConnectedDevice == I2C_CONNECT_PC)
000028  48d8              LDR      r0,|L2.908|
00002a  7800              LDRB     r0,[r0,#0]  ; g_ConnectedDevice
00002c  2800              CMP      r0,#0
;;;968    	{
;;;969    		protocol_swip_InitTouchEventBuffer();
00002e  bf08              IT       EQ
000030  f7fffffe          BLEQ     protocol_swip_InitTouchEventBuffer
;;;970    		//    protocol_hid_InitTouchEventBuffer();
;;;971    	}
;;;972    	
;;;973    	hid_index=0;
000034  2600              MOVS     r6,#0
000036  48d6              LDR      r0,|L2.912|
;;;974    	
;;;975    #if (SWIP_QUEUE_MODE)
;;;976    	thisInfo->bQueueStart 	= 0;
000038  4dd6              LDR      r5,|L2.916|
00003a  6006              STR      r6,[r0,#0]  ; hid_index
00003c  68aa              LDR      r2,[r5,#8]  ; thisInfo
00003e  f5025080          ADD      r0,r2,#0x1000
000042  f8806030          STRB     r6,[r0,#0x30]
;;;977    	#if (SWIP_QUEUE_MODE == 2)
;;;978    		thisInfo->bTouchOffFlag	= 0;
000046  f8806031          STRB     r6,[r0,#0x31]
;;;979    	#endif
;;;980    #endif
;;;981    
;;;982    #if USED_SHARP_SPECIFIC_PROTOCOL
;;;983    	tTouchItemType_t touchItemType;
;;;984    	memset(&touchItemType, 0, sizeof(tTouchItemType_t));
;;;985    	/*
;;;986    	 * TODO : finger mode를 기본으로 설정.
;;;987    	 * algorithm을 거친 후 touch type에 따른 flag를 setting 해야 함.
;;;988    	 */
;;;989    	touchItemType.active_stylus_hover = YES;
;;;990    	touchItemType.active_stylus = YES;
;;;991    	touchItemType.passive_stylus = YES;
;;;992    #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;993    
;;;994    #ifdef LocalFingerNoiseRemove
;;;995    	if(thisInfo->bLocal_sensing == YES /*&& thisInfo->tCoord_local_dsp.PenContactCnt < 100*/)
;;;996    	{	
;;;997    		uint8_t Label_num = 0;
;;;998    		for( i=MAX_TOUCH_; i--; )
;;;999    		{		
;;;1000   			if (thisInfo->tCoord.tPos.vusS[i] > 0)
;;;1001   			{
;;;1002   				Label_num++;
;;;1003   			}
;;;1004   		}
;;;1005   	
;;;1006   		for( i=MAX_TOUCH_; i--; )
;;;1007   		{
;;;1008   			distX = algorithm_coord_calc_distance(thisInfo->tCoord.tPos.tXY[i], thisInfo->tCoord_local_dsp.tPos.tXY);
;;;1009   			
;;;1010   			if( distX > 1024 && ((thisInfo->tCoord.tPos.MaxDelta[i] > thisModeConf->Coord.sFirstTouchOnMaxCellVal && Label_num > 1) || (thisInfo->tCoord.tPos.MaxDelta[i] > (thisModeConf->Coord.sFirstTouchOnMaxCellVal+20) && Label_num == 1)) )
;;;1011   			{
;;;1012   			}
;;;1013   			else
;;;1014   			{
;;;1015   				thisInfo->tCoord.tPos.vusS[i] = 0;
;;;1016   				thisInfo->tCoord.cScreenDebCnt[i] = 0;
;;;1017   			}
;;;1018   		}
;;;1019   	}
;;;1020   #endif
;;;1021   	
;;;1022   	if(thisModeConf->Palm.bPalm_WholeTouchRemove && thisInfo->bIsPalm == YES)
00004a  6868              LDR      r0,[r5,#4]  ; thisModeConf
00004c  f8900209          LDRB     r0,[r0,#0x209]
000050  b1a0              CBZ      r0,|L2.124|
000052  f8920fb2          LDRB     r0,[r2,#0xfb2]
000056  2801              CMP      r0,#1
000058  d110              BNE      |L2.124|
;;;1023   	{
;;;1024   		for( i=MAX_TOUCH_; i--; )thisInfo->tCoord.tPos.vusS[i] = 0;
00005a  200a              MOVS     r0,#0xa
00005c  2101              MOVS     r1,#1
00005e  f1000c01          ADD      r12,r0,#1
                  |L2.98|
000062  1e43              SUBS     r3,r0,#1
000064  eb020343          ADD      r3,r2,r3,LSL #1
000068  1e80              SUBS     r0,r0,#2
00006a  f8a364ce          STRH     r6,[r3,#0x4ce]
00006e  eb020340          ADD      r3,r2,r0,LSL #1
000072  1c89              ADDS     r1,r1,#2
000074  f8a364ce          STRH     r6,[r3,#0x4ce]
000078  4561              CMP      r1,r12
00007a  dbf2              BLT      |L2.98|
                  |L2.124|
;;;1025   	}
;;;1026   
;;;1027   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN	
;;;1028   	algorithm_EdgeReportDelay();
;;;1029   #endif
;;;1030   	
;;;1031   	int FingerNum = 0;
00007c  f04f0800          MOV      r8,#0
;;;1032   	for(i = 0; i < POSBUF_; i++)if(thisInfo->tCoord.tPos.vusS[i] > 0)FingerNum++;
000080  ea4f0008          MOV.W    r0,r8
                  |L2.132|
000084  eb020140          ADD      r1,r2,r0,LSL #1
000088  f8b134ce          LDRH     r3,[r1,#0x4ce]
00008c  2b00              CMP      r3,#0
00008e  bf18              IT       NE
000090  f1080801          ADDNE    r8,r8,#1
000094  f8b114d0          LDRH     r1,[r1,#0x4d0]
000098  2900              CMP      r1,#0
00009a  bf18              IT       NE
00009c  f1080801          ADDNE    r8,r8,#1
0000a0  1c80              ADDS     r0,r0,#2
0000a2  280a              CMP      r0,#0xa
0000a4  dbee              BLT      |L2.132|
;;;1033   	
;;;1034   	for (i = 0; i < MAX_TOUCH_; i++)
0000a6  2400              MOVS     r4,#0
                  |L2.168|
;;;1035   	{
;;;1036   		if(thisModeConf->Coord.ucMultiTouchPendPosDebCnt > 0)
0000a8  6868              LDR      r0,[r5,#4]  ; thisModeConf
0000aa  f8901116          LDRB     r1,[r0,#0x116]
0000ae  b1f9              CBZ      r1,|L2.240|
;;;1037   		{
;;;1038   			if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 && thisInfo->tCoord.tPos.vusS[i] > 0 && FingerNum > 1)
0000b0  68a9              LDR      r1,[r5,#8]  ; thisInfo
0000b2  eb010244          ADD      r2,r1,r4,LSL #1
0000b6  f8b23c85          LDRH     r3,[r2,#0xc85]
0000ba  b9d3              CBNZ     r3,|L2.242|
0000bc  f8b234ce          LDRH     r3,[r2,#0x4ce]
0000c0  2b00              CMP      r3,#0
0000c2  bf18              IT       NE
0000c4  f1b80f01          CMPNE    r8,#1
0000c8  dd13              BLE      |L2.242|
;;;1039   			{
;;;1040   				PendDebCnt[i]++;
0000ca  f8dfc2cc          LDR      r12,|L2.920|
0000ce  f81c3004          LDRB     r3,[r12,r4]
0000d2  1c5b              ADDS     r3,r3,#1
0000d4  b2db              UXTB     r3,r3
0000d6  f80c3004          STRB     r3,[r12,r4]
;;;1041   				if(PendDebCnt[i] < thisModeConf->Coord.ucMultiTouchPendPosDebCnt)
0000da  f8900116          LDRB     r0,[r0,#0x116]
0000de  4283              CMP      r3,r0
0000e0  d209              BCS      |L2.246|
;;;1042   				{
;;;1043   					thisInfo->tCoord.tPos.vusS[i] = 0;
0000e2  f8a264ce          STRH     r6,[r2,#0x4ce]
;;;1044   					thisInfo->tCoord.tPos.sFinger_--;
0000e6  f891047d          LDRB     r0,[r1,#0x47d]
0000ea  1e40              SUBS     r0,r0,#1
0000ec  f881047d          STRB     r0,[r1,#0x47d]
                  |L2.240|
0000f0  e001              B        |L2.246|
                  |L2.242|
;;;1045   				}
;;;1046   			}
;;;1047   			else PendDebCnt[i] = 0;
0000f2  48a9              LDR      r0,|L2.920|
0000f4  5506              STRB     r6,[r0,r4]
                  |L2.246|
;;;1048   		}
;;;1049   		
;;;1050   		//        bool_t bIsHover = NO;
;;;1051   		if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
0000f6  68a8              LDR      r0,[r5,#8]  ; thisInfo
0000f8  eb000144          ADD      r1,r0,r4,LSL #1
0000fc  f8b11c85          LDRH     r1,[r1,#0xc85]
000100  b159              CBZ      r1,|L2.282|
;;;1052   		{
;;;1053   			old_pos = thisInfo->tCoord.tPastSentPos.tXY[i];
000102  eb0000c4          ADD      r0,r0,r4,LSL #3
000106  f8d01c35          LDR      r1,[r0,#0xc35]
00010a  9100              STR      r1,[sp,#0]
00010c  f8d00c39          LDR      r0,[r0,#0xc39]
;;;1054   			alogorithm_coord_modify_pos(&old_pos,&old_pos);
000110  4669              MOV      r1,sp
000112  9001              STR      r0,[sp,#4]
000114  4608              MOV      r0,r1
000116  f7fffffe          BL       alogorithm_coord_modify_pos
                  |L2.282|
;;;1055   		}
;;;1056   
;;;1057   		if (thisInfo->tCoord.tPos.vusS[i] > 0)
00011a  68a8              LDR      r0,[r5,#8]  ; thisInfo
00011c  eb000244          ADD      r2,r0,r4,LSL #1
000120  f8b214ce          LDRH     r1,[r2,#0x4ce]
000124  2900              CMP      r1,#0
000126  d07a              BEQ      |L2.542|
;;;1058   		{
;;;1059   			pos = thisInfo->tCoord.tPos.tXY[i];
000128  eb0000c4          ADD      r0,r0,r4,LSL #3
00012c  f8d0147e          LDR      r1,[r0,#0x47e]
000130  f8d00482          LDR      r0,[r0,#0x482]
000134  e9cd1002          STRD     r1,r0,[sp,#8]
;;;1060   			
;;;1061   //			if(thisModeConf->Palm.ucPalmDrawingOn > 1)
;;;1062   //				algorithm_width_height_calculation(i);
;;;1063   
;;;1064   			if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
000138  f8b20c85          LDRH     r0,[r2,#0xc85]
;;;1065   				alogorithm_coord_modify_pos(&old_pos,&pos);
;;;1066   			else
;;;1067   				alogorithm_coord_modify_pos(&pos, &pos);
00013c  a902              ADD      r1,sp,#8
00013e  2800              CMP      r0,#0                 ;1064
000140  bf0c              ITE      EQ
000142  4608              MOVEQ    r0,r1
000144  4668              MOVNE    r0,sp                 ;1065
000146  f7fffffe          BL       alogorithm_coord_modify_pos
;;;1068   
;;;1069   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1070   			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,0);
;;;1071   #endif
;;;1072   			
;;;1073   			distX = pos.x - old_pos.x;
00014a  9a02              LDR      r2,[sp,#8]
00014c  9800              LDR      r0,[sp,#0]
;;;1074   			distY = pos.y - old_pos.y;
00014e  9901              LDR      r1,[sp,#4]
000150  eba20a00          SUB      r10,r2,r0             ;1073
000154  9803              LDR      r0,[sp,#0xc]
000156  ebb00901          SUBS     r9,r0,r1
;;;1075   			if (distY < 0)
;;;1076   			distY = -distY;
00015a  bf48              IT       MI
00015c  f1c90900          RSBMI    r9,r9,#0
;;;1077   			if (distX < 0)
000160  f1ba0f00          CMP      r10,#0
;;;1078   			distX = -distX;
000164  bfb8              IT       LT
000166  f1ca0a00          RSBLT    r10,r10,#0
;;;1079   
;;;1080   			if (!thisInfo->tCoord.bFirstLongDistanceMoved[i])
00016a  68ab              LDR      r3,[r5,#8]  ; thisInfo
00016c  1918              ADDS     r0,r3,r4
00016e  f8900d39          LDRB     r0,[r0,#0xd39]
000172  2800              CMP      r0,#0
;;;1081   			{
;;;1082   				ucMoveTHD_X = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;1083   				ucMoveTHD_Y = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;1084   			}
;;;1085   			else
;;;1086   			{
;;;1087   				ucMoveTHD_X = thisModeConf->Coord.ucMoveEventTHD;
000174  6868              LDR      r0,[r5,#4]  ; thisModeConf
000176  bf0c              ITE      EQ                    ;1082
000178  f89070b9          LDRBEQ   r7,[r0,#0xb9]         ;1082
00017c  f89070ba          LDRBNE   r7,[r0,#0xba]
;;;1088   				ucMoveTHD_Y = thisModeConf->Coord.ucMoveEventTHD;
;;;1089   			}
;;;1090   			
;;;1091   			//if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 || (distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X))
;;;1092   			if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 || (distY >= 0) || (distX >= 0))
000180  eb030144          ADD      r1,r3,r4,LSL #1
000184  f8b10c85          LDRH     r0,[r1,#0xc85]
000188  2800              CMP      r0,#0
00018a  bf18              IT       NE
00018c  f1b90f00          CMPNE    r9,#0
000190  bfb8              IT       LT
000192  f1ba0f00          CMPLT    r10,#0
;;;1093   			{
;;;1094   #if (ID_MAPPING_CHANGE)
;;;1095   				if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 )
;;;1096   				{
;;;1097   					NewID++;
;;;1098   					if(NewID > 30)NewID=1;
;;;1099   					Id_Map[i] = NewID;
;;;1100   				}
;;;1101   #endif				
;;;1102   				uSWIPTouchItem_t tItem;
;;;1103   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1104   				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1105   				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;1106   				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1107   									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1108   									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1109   									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1110   									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1111   									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1112   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1113   				tItem.tItem00.tInfo.bTouch = YES;
;;;1114   				tItem.tItem00.tInfo.bHover = NO;
;;;1115   				tItem.tItem00.tInfo.bScreen = YES;
;;;1116   				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
;;;1117   	#if (ID_MAPPING_CHANGE)
;;;1118   				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1119   	#else
;;;1120   				tItem.tItem00.tInfo.b4FingerID = i + 1;
;;;1121   	#endif
;;;1122   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1123   				tItem.tItem00.ucRowStart = 0;
;;;1124   
;;;1125   				SET_POS(tItem, pos);
;;;1126   				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
;;;1127   				//                tItem.tItem00.ucWidth = thisInfo->tCoord.cScreenDebCnt[i];
;;;1128   				
;;;1129   //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;1130   //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;1131   				
;;;1132   				if(id == 0)
;;;1133   				{
;;;1134   					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
;;;1135   				}
;;;1136   #if !(ID_MAPPING_CHANGE)
;;;1137   				protocol_swip_PushTouchEvent(&tItem);
;;;1138   #endif				
;;;1139   				protocol_hid_PushTouchEvent(&tItem);
;;;1140   
;;;1141   				if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0 && ((distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X)) ) //distance moved.
;;;1142   				{
;;;1143   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = YES;
;;;1144   				}
;;;1145   				else //1st touch.
;;;1146   				{
;;;1147   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
;;;1148   				}
;;;1149   
;;;1150   				thisInfo->tCoord.tPastSentPos.tXY[i].x = thisInfo->tCoord.tPos.tXY[i].x;
;;;1151   				thisInfo->tCoord.tPastSentPos.tXY[i].y = thisInfo->tCoord.tPos.tXY[i].y;
;;;1152   				thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
;;;1153   				thisInfo->tCoord.tPastSentPos.vusR[i] = thisInfo->tCoord.tPos.vusR[i];
;;;1154   //				thisInfo->tCoord.tPastSentPos.vusW[i] = thisInfo->tCoord.tPos.vusW[i];
;;;1155   //				thisInfo->tCoord.tPastSentPos.vusH[i] = thisInfo->tCoord.tPos.vusH[i];
;;;1156   			}
;;;1157   			else
;;;1158   			{
;;;1159   				uSWIPTouchItem_t tItem;
;;;1160   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1161   				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1162   				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;1163   				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1164   									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1165   									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1166   									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1167   									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1168   									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1169   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1170   				tItem.tItem00.tInfo.bTouch = YES;
000196  f89d0010          LDRB     r0,[sp,#0x10]
00019a  f0400080          ORR      r0,r0,#0x80
;;;1171   				tItem.tItem00.tInfo.bHover = NO;
00019e  f0200020          BIC      r0,r0,#0x20
;;;1172   				tItem.tItem00.tInfo.bScreen = YES;
0001a2  f0400040          ORR      r0,r0,#0x40
0001a6  db51              BLT      |L2.588|
0001a8  f8933fb2          LDRB     r3,[r3,#0xfb2]        ;1116
0001ac  f88d6018          STRB     r6,[sp,#0x18]         ;1123
0001b0  f3631004          BFI      r0,r3,#4,#1           ;1116
0001b4  1c63              ADDS     r3,r4,#1              ;1120
0001b6  f3630003          BFI      r0,r3,#0,#4           ;1120
0001ba  f88d0010          STRB     r0,[sp,#0x10]         ;1120
0001be  0a10              LSRS     r0,r2,#8              ;1125
0001c0  f88d0011          STRB     r0,[sp,#0x11]         ;1125
0001c4  9803              LDR      r0,[sp,#0xc]          ;1125
0001c6  0a00              LSRS     r0,r0,#8              ;1125
0001c8  f88d0012          STRB     r0,[sp,#0x12]         ;1125
0001cc  9803              LDR      r0,[sp,#0xc]          ;1125
0001ce  f88d2013          STRB     r2,[sp,#0x13]         ;1125
0001d2  f88d0014          STRB     r0,[sp,#0x14]         ;1125
0001d6  f8b104e2          LDRH     r0,[r1,#0x4e2]        ;1126
0001da  28ff              CMP      r0,#0xff              ;1126
0001dc  bf28              IT       CS                    ;1126
0001de  20ff              MOVCS    r0,#0xff              ;1126
0001e0  f88d0015          STRB     r0,[sp,#0x15]         ;1126
0001e4  f1bb0f00          CMP      r11,#0                ;1132
0001e8  bf04              ITT      EQ                    ;1134
0001ea  f8b104ce          LDRHEQ   r0,[r1,#0x4ce]        ;1134
0001ee  f8ad0016          STRHEQ   r0,[sp,#0x16]         ;1134
0001f2  a804              ADD      r0,sp,#0x10           ;1137
0001f4  f7fffffe          BL       protocol_swip_PushTouchEvent
0001f8  a804              ADD      r0,sp,#0x10           ;1139
0001fa  f7fffffe          BL       protocol_hid_PushTouchEvent
0001fe  68a9              LDR      r1,[r5,#8]            ;1141  ; thisInfo
000200  eb010044          ADD      r0,r1,r4,LSL #1       ;1141
000204  f8b02c85          LDRH     r2,[r0,#0xc85]        ;1141
000208  b152              CBZ      r2,|L2.544|
00020a  463a              MOV      r2,r7                 ;1141
00020c  45b9              CMP      r9,r7                 ;1141
00020e  bfb8              IT       LT                    ;1141
000210  4592              CMPLT    r10,r2                ;1141
000212  db05              BLT      |L2.544|
000214  2201              MOVS     r2,#1                 ;1143
000216  190b              ADDS     r3,r1,r4              ;1143
000218  f8832d39          STRB     r2,[r3,#0xd39]        ;1143
00021c  e003              B        |L2.550|
                  |L2.542|
00021e  e043              B        |L2.680|
                  |L2.544|
000220  190a              ADDS     r2,r1,r4              ;1147
000222  f8826d39          STRB     r6,[r2,#0xd39]        ;1147
                  |L2.550|
000226  eb0101c4          ADD      r1,r1,r4,LSL #3       ;1150
00022a  f8d1247e          LDR      r2,[r1,#0x47e]        ;1150
00022e  f8c12c35          STR      r2,[r1,#0xc35]        ;1150
000232  f8d12482          LDR      r2,[r1,#0x482]        ;1151
000236  f8c12c39          STR      r2,[r1,#0xc39]        ;1151
00023a  f8b014ce          LDRH     r1,[r0,#0x4ce]        ;1152
00023e  f8a01c85          STRH     r1,[r0,#0xc85]        ;1152
000242  f8b014e2          LDRH     r1,[r0,#0x4e2]        ;1153
000246  f8a01c99          STRH     r1,[r0,#0xc99]        ;1153
00024a  e061              B        |L2.784|
                  |L2.588|
;;;1173   				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
00024c  f8932fb2          LDRB     r2,[r3,#0xfb2]
;;;1174   	#if (ID_MAPPING_CHANGE)
;;;1175   				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1176   	#else
;;;1177   				tItem.tItem00.tInfo.b4FingerID = i + 1;
;;;1178   	#endif
;;;1179   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1180   				tItem.tItem00.ucRowStart = 0;
000250  f88d6018          STRB     r6,[sp,#0x18]
000254  f3621004          BFI      r0,r2,#4,#1           ;1173
000258  1c62              ADDS     r2,r4,#1              ;1177
00025a  f3620003          BFI      r0,r2,#0,#4           ;1177
00025e  f88d0010          STRB     r0,[sp,#0x10]         ;1177
;;;1181   				SET_POS(tItem, old_pos);
000262  9800              LDR      r0,[sp,#0]
000264  0a00              LSRS     r0,r0,#8
000266  f88d0011          STRB     r0,[sp,#0x11]
00026a  9801              LDR      r0,[sp,#4]
00026c  0a00              LSRS     r0,r0,#8
00026e  f88d0012          STRB     r0,[sp,#0x12]
000272  9800              LDR      r0,[sp,#0]
000274  f88d0013          STRB     r0,[sp,#0x13]
000278  9801              LDR      r0,[sp,#4]
00027a  f88d0014          STRB     r0,[sp,#0x14]
;;;1182   				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
00027e  f8b104e2          LDRH     r0,[r1,#0x4e2]
000282  28ff              CMP      r0,#0xff
000284  bf28              IT       CS
000286  20ff              MOVCS    r0,#0xff
000288  f88d0015          STRB     r0,[sp,#0x15]
;;;1183   
;;;1184   				//To do	-> Old Width, Height
;;;1185   //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;1186   //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;1187   				
;;;1188   				if(id == 0)
00028c  f1bb0f00          CMP      r11,#0
;;;1189   				{
;;;1190   					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
000290  bf04              ITT      EQ
000292  f8b104ce          LDRHEQ   r0,[r1,#0x4ce]
000296  f8ad0016          STRHEQ   r0,[sp,#0x16]
                  |L2.666|
;;;1191   				}
;;;1192   #if !(ID_MAPPING_CHANGE)
;;;1193   				protocol_swip_PushTouchEvent(&tItem);
00029a  a804              ADD      r0,sp,#0x10
00029c  f7fffffe          BL       protocol_swip_PushTouchEvent
;;;1194   #endif				
;;;1195   				protocol_hid_PushTouchEvent(&tItem);
0002a0  a804              ADD      r0,sp,#0x10
0002a2  f7fffffe          BL       protocol_hid_PushTouchEvent
;;;1196   				
;;;1197   			}
0002a6  e033              B        |L2.784|
                  |L2.680|
;;;1198   		}
;;;1199   		else if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
0002a8  f8b21c85          LDRH     r1,[r2,#0xc85]
0002ac  b379              CBZ      r1,|L2.782|
;;;1200   		{
;;;1201   			
;;;1202   		#if (SWIP_QUEUE_MODE == 2)
;;;1203   			thisInfo->bTouchOffFlag = 1;
0002ae  f2410331          MOV      r3,#0x1031
0002b2  2101              MOVS     r1,#1
0002b4  5419              STRB     r1,[r3,r0]
;;;1204   		#endif
;;;1205   			
;;;1206   			uSWIPTouchItem_t tItem;
;;;1207   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1208   			tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1209   			tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_RELEASE;		// status
;;;1210   			tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1211   								  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1212   								  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1213   								  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1214   								  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1215   								  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1216   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1217   			tItem.tItem00.tInfo.bTouch = NO;
0002b6  f89d1010          LDRB     r1,[sp,#0x10]
;;;1218   			tItem.tItem00.tInfo.bHover = NO;
;;;1219   			tItem.tItem00.tInfo.bScreen = YES;
;;;1220   			tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
0002ba  f8903fb2          LDRB     r3,[r0,#0xfb2]
0002be  f02101a0          BIC      r1,r1,#0xa0           ;1218
0002c2  f0410140          ORR      r1,r1,#0x40           ;1219
0002c6  f3631104          BFI      r1,r3,#4,#1
;;;1221   	#if (ID_MAPPING_CHANGE)
;;;1222   			tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1223   	#else
;;;1224   			tItem.tItem00.tInfo.b4FingerID = i + 1;
0002ca  1c63              ADDS     r3,r4,#1
0002cc  f3630103          BFI      r1,r3,#0,#4
0002d0  f88d1010          STRB     r1,[sp,#0x10]
;;;1225   	#endif
;;;1226   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1227   			tItem.tItem00.ucRowStart = 0;
;;;1228   
;;;1229   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1230   			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,1);			
;;;1231   #endif
;;;1232   			
;;;1233   			SET_POS(tItem, old_pos);	
0002d4  9900              LDR      r1,[sp,#0]
0002d6  f88d6018          STRB     r6,[sp,#0x18]         ;1227
0002da  0a09              LSRS     r1,r1,#8
0002dc  f88d1011          STRB     r1,[sp,#0x11]
0002e0  9901              LDR      r1,[sp,#4]
0002e2  0a09              LSRS     r1,r1,#8
0002e4  f88d1012          STRB     r1,[sp,#0x12]
0002e8  9900              LDR      r1,[sp,#0]
0002ea  f88d1013          STRB     r1,[sp,#0x13]
0002ee  9901              LDR      r1,[sp,#4]
0002f0  f88d1014          STRB     r1,[sp,#0x14]
;;;1234   			tItem.tItem00.ucWidth = 0;
0002f4  f88d6015          STRB     r6,[sp,#0x15]
;;;1235   			//			thisInfo->bGhostState = NO;
;;;1236   
;;;1237   			if(id == 0)
0002f8  f1bb0f00          CMP      r11,#0
;;;1238   			{
;;;1239   				tItem.tItem00.usStrength =thisInfo->tCoord.tPos.vusS[i];
0002fc  bf04              ITT      EQ
0002fe  f8b214ce          LDRHEQ   r1,[r2,#0x4ce]
000302  f8ad1016          STRHEQ   r1,[sp,#0x16]
;;;1240   			}
;;;1241   
;;;1242   			thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
000306  4420              ADD      r0,r0,r4
000308  f8806d39          STRB     r6,[r0,#0xd39]
;;;1243   #if !(ID_MAPPING_CHANGE)
;;;1244   			protocol_swip_PushTouchEvent(&tItem);
;;;1245   #endif
;;;1246   			protocol_hid_PushTouchEvent(&tItem);
;;;1247   		}
00030c  e7c5              B        |L2.666|
                  |L2.782|
00030e  e7ff              B        |L2.784|
                  |L2.784|
;;;1248   		thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
000310  68a8              LDR      r0,[r5,#8]  ; thisInfo
000312  eb000044          ADD      r0,r0,r4,LSL #1
000316  1c64              ADDS     r4,r4,#1
000318  f8b014ce          LDRH     r1,[r0,#0x4ce]
00031c  f8a01c85          STRH     r1,[r0,#0xc85]
000320  2c0a              CMP      r4,#0xa
000322  f6ffaec1          BLT      |L2.168|
;;;1249   	}
;;;1250   #if (SWIP_QUEUE_MODE)
;;;1251   	if(thisInfo->bQueueStart == 1){
000326  68aa              LDR      r2,[r5,#8]  ; thisInfo
000328  f5025080          ADD      r0,r2,#0x1000
00032c  f8901030          LDRB     r1,[r0,#0x30]
000330  2901              CMP      r1,#1
000332  d115              BNE      |L2.864|
;;;1252   	#if (SWIP_QUEUE_MODE == 2)
;;;1253   		if(thisInfo->QueueFront == thisInfo->QueueRear || thisInfo->bTouchOffFlag )
000334  f890302f          LDRB     r3,[r0,#0x2f]
000338  f890102e          LDRB     r1,[r0,#0x2e]
00033c  428b              CMP      r3,r1
00033e  d002              BEQ      |L2.838|
000340  f8903031          LDRB     r3,[r0,#0x31]
000344  b163              CBZ      r3,|L2.864|
                  |L2.838|
;;;1254   	#endif
;;;1255   		{
;;;1256   			thisInfo->QueueRear++;
;;;1257   			thisInfo->QueueRear = (thisInfo->QueueRear) % SWIP_QUEUE_SIZE;
000346  4c15              LDR      r4,|L2.924|
000348  1c49              ADDS     r1,r1,#1              ;1253
00034a  b2c9              UXTB     r1,r1                 ;1256
00034c  46a4              MOV      r12,r4
00034e  2300              MOVS     r3,#0
000350  fbe1c304          UMLAL    r12,r3,r1,r4
000354  085b              LSRS     r3,r3,#1
000356  eba303c3          SUB      r3,r3,r3,LSL #3
00035a  4419              ADD      r1,r1,r3
00035c  f880102e          STRB     r1,[r0,#0x2e]
                  |L2.864|
;;;1258   		}
;;;1259   	}
;;;1260   #endif	
;;;1261   	//°u°A A¤º¸ ¸ðμI ¾÷μ￥AIÆ®.
;;;1262   	thisInfo->tCoord.tPastSentPos.sFinger_ = thisInfo->tCoord.tPos.sFinger_;
000360  f892047d          LDRB     r0,[r2,#0x47d]
000364  f8820c34          STRB     r0,[r2,#0xc34]
;;;1263   //	thisInfo->bWasPalm = thisInfo->bIsPalm;
;;;1264   
;;;1265   //	if ((CheckI2CReady() == 0))
;;;1266   #if !(ID_MAPPING_CHANGE)
;;;1267   	protocol_swip_SendTouchEvent(); // 여기서 뻗음
000368  f7fffffe          BL       protocol_swip_SendTouchEvent
;;;1268   #endif
;;;1269   //	 protocol_hid_SendTouchEvent();
;;;1270   
;;;1271   #ifdef JOSH3_PEN_TEST
;;;1272   	SendPenData();
;;;1273   #else
;;;1274   #ifdef ADD_TOUCH
;;;1275   	SendTouchData();
00036c  f7fffffe          BL       SendTouchData
;;;1276   #endif
;;;1277   #endif
;;;1278   #if (ID_MAPPING_CHANGE)	
;;;1279   	if(thisInfo->tCoord.tPos.sFinger_ == 0 && thisInfo->tCoord.tPastPos[0].sFinger_ == 0){if(NonTouchCnt++ > 32767)NonTouchCnt=30;}
;;;1280   	else NonTouchCnt = 0;
;;;1281   	
;;;1282   	if(NonTouchCnt >= 30)
;;;1283   	{
;;;1284   		NewID = 30;
;;;1285   		memset(Id_Map,0,sizeof(Id_Map));
;;;1286   	}
;;;1287   #endif	
;;;1288   	hal_clear_overlap_pen();
000370  f7fffffe          BL       hal_clear_overlap_pen
;;;1289   
;;;1290   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1291   	if(thisInfo->tCoord.tPos.sFinger_==0 || thisInfo->tCoord.tPos.sFinger_>1)
;;;1292   	{
;;;1293   		if(bBigFingerEdgeTestEn[0] || bBigFingerEdgeTestEn[1] || bBigFingerEdgeTestEn[2] || bBigFingerEdgeTestEn[3])
;;;1294   		{
;;;1295   			ucBigFingerEdgeTest_MoveEventTHD_Change=0;
;;;1296   			memset(bBigFingerEdgeTestFlag,0,sizeof(bBigFingerEdgeTestFlag));
;;;1297   			if(thisInfo->tCoord.tPos.sFinger_==0)bBigFingerEdgeTestEn[0]=bBigFingerEdgeTestEn[1]=bBigFingerEdgeTestEn[2]=bBigFingerEdgeTestEn[3]=0;
;;;1298   		}
;;;1299   	}	
;;;1300   #endif	
;;;1301   }
000374  b007              ADD      sp,sp,#0x1c
000376  e8bd8ff0          POP      {r4-r11,pc}
;;;1302   
                          ENDP

00037a  0000              DCW      0x0000
                  |L2.892|
                          DCD      HID_status
                  |L2.896|
                          DCD      HID_id
                  |L2.900|
                          DCD      HID_x
                  |L2.904|
                          DCD      HID_y
                  |L2.908|
                          DCD      g_ConnectedDevice
                  |L2.912|
                          DCD      hid_index
                  |L2.916|
                          DCD      ||.data||
                  |L2.920|
                          DCD      ||.bss||+0x330
                  |L2.924|
                          DCD      0x49249249

                          AREA ||i.algorithm_calc_angle_inter_2points||, CODE, READONLY, ALIGN=2

                  algorithm_calc_angle_inter_2points PROC
;;;464    #ifndef TILT_OPCODE
;;;465    int32_t algorithm_calc_angle_inter_2points(int diff_x, int diff_y)
000000  e92d03f0          PUSH     {r4-r9}
;;;466    {
;;;467    	int angle = 0;
;;;468    
;;;469    //	int diff_x, diff_y;
;;;470    
;;;471    //	diff_x = _tPos2.x - _tPos1.x;
;;;472    //	diff_y = _tPos2.y - _tPos1.y;
;;;473    
;;;474    	if( diff_x > 0  )
;;;475    	{
;;;476    		if( diff_y > 0 )
;;;477    		{
;;;478    			if( diff_x >= diff_y )
;;;479    				angle = sucArcTanLookUpTable[(diff_y * 100)/diff_x];
000004  f04f0364          MOV      r3,#0x64
000008  fb01f503          MUL      r5,r1,r3
;;;480    			else
;;;481    				angle = 9000 - sucArcTanLookUpTable[(diff_x * 100)/diff_y];
;;;482    		}
;;;483    		else if( diff_y < 0 )
;;;484    		{
;;;485    			if( diff_x >= -(diff_y) )
;;;486    				angle = 36000 - sucArcTanLookUpTable[(-diff_y * 100)/diff_x];
00000c  f06f0c63          MVN      r12,#0x63
000010  1e02              SUBS     r2,r0,#0              ;466
000012  4b3d              LDR      r3,|L3.264|
000014  fb01f40c          MUL      r4,r1,r12
000018  f04f0000          MOV      r0,#0                 ;467
00001c  f2423728          MOV      r7,#0x2328            ;481
;;;487    			else
;;;488    				angle = 27000 + sucArcTanLookUpTable[(diff_x * 100)/-diff_y];
000020  f6461878          MOV      r8,#0x6978
000024  f1c10c00          RSB      r12,r1,#0             ;485
000028  dd2c              BLE      |L3.132|
00002a  2664              MOVS     r6,#0x64              ;481
00002c  4356              MULS     r6,r2,r6              ;481
00002e  2900              CMP      r1,#0                 ;476
000030  dd10              BLE      |L3.84|
000032  4291              CMP      r1,r2                 ;478
000034  bfdf              ITTTT    LE                    ;479
000036  fb95f0f2          SDIVLE   r0,r5,r2              ;479
00003a  f8330010          LDRHLE   r0,[r3,r0,LSL #1]     ;479
;;;489    		}
;;;490    		else
;;;491    		{
;;;492    			angle = 0;
;;;493    		}
;;;494    	}
;;;495    	else if( diff_x < 0 )
;;;496    	{
;;;497    		if( diff_y > 0 )
;;;498    		{
;;;499    			if( -diff_x < diff_y )
;;;500    				angle = 9000 + sucArcTanLookUpTable[(-diff_x * 100)/diff_y];
;;;501    			else
;;;502    				angle = 18000 - sucArcTanLookUpTable[(diff_y * 100)/-diff_x];
;;;503    		}
;;;504    		else if( diff_y < 0 )
;;;505    		{
;;;506    			if( -diff_x >= -diff_y )
;;;507    				angle = 18000 + sucArcTanLookUpTable[(-diff_y * 100)/-diff_x];
;;;508    			else
;;;509    				angle = 27000 - sucArcTanLookUpTable[(-diff_x * 100)/-diff_y];
;;;510    		}
;;;511    		else
;;;512    		{
;;;513    			angle = 18000;
;;;514    		}
;;;515    	}
;;;516    	else
;;;517    	{
;;;518    		if( diff_y > 0 )
;;;519    			angle = 9000;
;;;520    		else if( diff_y < 0 )
;;;521    		{
;;;522    			angle = 27000;
;;;523    		}
;;;524    	}
;;;525    
;;;526    	return angle;
;;;527    }
00003e  e8bd03f0          POPLE    {r4-r9}
000042  4770              BXLE     lr
000044  fb96f0f1          SDIV     r0,r6,r1              ;481
000048  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;481
00004c  1a38              SUBS     r0,r7,r0              ;481
00004e  e8bd03f0          POP      {r4-r9}
000052  4770              BX       lr
                  |L3.84|
000054  bfa4              ITT      GE
000056  e8bd03f0          POPGE    {r4-r9}
00005a  4770              BXGE     lr
00005c  4562              CMP      r2,r12                ;485
00005e  db09              BLT      |L3.116|
000060  fb94f0f2          SDIV     r0,r4,r2              ;486
000064  f64841a0          MOV      r1,#0x8ca0            ;486
000068  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;486
00006c  e8bd03f0          POP      {r4-r9}
000070  1a08              SUBS     r0,r1,r0              ;486
000072  4770              BX       lr
                  |L3.116|
000074  fb96f0fc          SDIV     r0,r6,r12             ;488
000078  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;488
00007c  4440              ADD      r0,r0,r8              ;488
00007e  e8bd03f0          POP      {r4-r9}
000082  4770              BX       lr
                  |L3.132|
000084  da35              BGE      |L3.242|
000086  f06f0063          MVN      r0,#0x63              ;500
00008a  fb02f600          MUL      r6,r2,r0              ;500
00008e  4250              RSBS     r0,r2,#0              ;499
000090  f2446950          MOV      r9,#0x4650            ;502
000094  2900              CMP      r1,#0                 ;497
000096  bf08              IT       EQ                    ;513
000098  f2446050          MOVEQ    r0,#0x4650            ;513
00009c  dd12              BLE      |L3.196|
00009e  4281              CMP      r1,r0                 ;499
0000a0  dd07              BLE      |L3.178|
0000a2  fb96f0f1          SDIV     r0,r6,r1              ;500
0000a6  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;500
0000aa  4438              ADD      r0,r0,r7              ;500
0000ac  e8bd03f0          POP      {r4-r9}
0000b0  4770              BX       lr
                  |L3.178|
0000b2  fb95f0f0          SDIV     r0,r5,r0              ;502
0000b6  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;502
0000ba  eba90000          SUB      r0,r9,r0              ;502
0000be  e8bd03f0          POP      {r4-r9}
0000c2  4770              BX       lr
                  |L3.196|
0000c4  bfa4              ITT      GE
0000c6  e8bd03f0          POPGE    {r4-r9}
0000ca  4770              BXGE     lr
0000cc  4560              CMP      r0,r12                ;506
0000ce  db07              BLT      |L3.224|
0000d0  fb94f0f0          SDIV     r0,r4,r0              ;507
0000d4  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;507
0000d8  4448              ADD      r0,r0,r9              ;507
0000da  e8bd03f0          POP      {r4-r9}
0000de  4770              BX       lr
                  |L3.224|
0000e0  fb96f0fc          SDIV     r0,r6,r12             ;509
0000e4  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;509
0000e8  eba80000          SUB      r0,r8,r0              ;509
0000ec  e8bd03f0          POP      {r4-r9}
0000f0  4770              BX       lr
                  |L3.242|
0000f2  2900              CMP      r1,#0                 ;518
0000f4  bfb8              IT       LT                    ;522
0000f6  f6461078          MOVLT    r0,#0x6978            ;522
0000fa  bfc8              IT       GT                    ;519
0000fc  f2423028          MOVGT    r0,#0x2328            ;519
000100  e8bd03f0          POP      {r4-r9}
000104  4770              BX       lr
;;;528    #endif /* TILT_OPCODE */
                          ENDP

000106  0000              DCW      0x0000
                  |L3.264|
                          DCD      sucArcTanLookUpTable

                          AREA ||i.algorithm_calc_sqrt||, CODE, READONLY, ALIGN=1

                  algorithm_calc_sqrt PROC
;;;366    
;;;367    int32_t algorithm_calc_sqrt(int32_t d)
000000  2101              MOVS     r1,#1
;;;368    {
;;;369        uint32_t x = 1;
;;;370    
;;;371        x = (x + d/x)>>1;
000002  fbb0f1f1          UDIV     r1,r0,r1
000006  1c49              ADDS     r1,r1,#1
000008  0849              LSRS     r1,r1,#1
;;;372        x = (x + d/x)>>1;
00000a  fbb0f2f1          UDIV     r2,r0,r1
00000e  4411              ADD      r1,r1,r2
000010  0849              LSRS     r1,r1,#1
;;;373        x = (x + d/x)>>1;
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  4411              ADD      r1,r1,r2
000018  0849              LSRS     r1,r1,#1
;;;374        x = (x + d/x)>>1;
00001a  fbb0f2f1          UDIV     r2,r0,r1
00001e  4411              ADD      r1,r1,r2
000020  0849              LSRS     r1,r1,#1
;;;375        x = (x + d/x)>>1;
000022  fbb0f2f1          UDIV     r2,r0,r1
000026  4411              ADD      r1,r1,r2
000028  0849              LSRS     r1,r1,#1
;;;376        x = (x + d/x)>>1;
00002a  fbb0f2f1          UDIV     r2,r0,r1
00002e  4411              ADD      r1,r1,r2
000030  0849              LSRS     r1,r1,#1
;;;377        x = (x + d/x)>>1;
000032  fbb0f2f1          UDIV     r2,r0,r1
000036  4411              ADD      r1,r1,r2
000038  0849              LSRS     r1,r1,#1
;;;378        x = (x + d/x)>>1;
00003a  fbb0f2f1          UDIV     r2,r0,r1
00003e  4411              ADD      r1,r1,r2
000040  0849              LSRS     r1,r1,#1
;;;379        x = (x + d/x)>>1;
000042  fbb0f2f1          UDIV     r2,r0,r1
000046  4411              ADD      r1,r1,r2
000048  0849              LSRS     r1,r1,#1
;;;380        x = (x + d/x)>>1;
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  4411              ADD      r1,r1,r2
000050  0849              LSRS     r1,r1,#1
;;;381        x = (x + d/x)>>1;
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  4411              ADD      r1,r1,r2
000058  0849              LSRS     r1,r1,#1
;;;382        x = (x + d/x)>>1;
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  4411              ADD      r1,r1,r2
000060  0849              LSRS     r1,r1,#1
;;;383        x = (x + d/x)>>1;
000062  fbb0f2f1          UDIV     r2,r0,r1
000066  4411              ADD      r1,r1,r2
000068  0849              LSRS     r1,r1,#1
;;;384        x = (x + d/x)>>1;
00006a  fbb0f2f1          UDIV     r2,r0,r1
00006e  4411              ADD      r1,r1,r2
000070  0849              LSRS     r1,r1,#1
;;;385        x = (x + d/x)>>1;
000072  fbb0f0f1          UDIV     r0,r0,r1
000076  4408              ADD      r0,r0,r1
000078  0840              LSRS     r0,r0,#1
;;;386    
;;;387        return x;
;;;388    }
00007a  4770              BX       lr
;;;389    
                          ENDP


                          AREA ||i.algorithm_check_recal_cond||, CODE, READONLY, ALIGN=2

                  algorithm_check_recal_cond PROC
;;;1302   
;;;1303   void algorithm_check_recal_cond(void)
000000  4912              LDR      r1,|L5.76|
;;;1304   {
;;;1305   	thisInfo->bIsRecalCond  = NO;
000002  2200              MOVS     r2,#0
000004  6888              LDR      r0,[r1,#8]  ; thisInfo
000006  7082              STRB     r2,[r0,#2]
;;;1306   	thisInfo->bIsRecalCond2 = NO;
000008  70c2              STRB     r2,[r0,#3]
;;;1307   
;;;1308   	thisInfo->bIsRecalCond = (
00000a  6849              LDR      r1,[r1,#4]  ; thisModeConf
00000c  f8d02025          LDR      r2,[r0,#0x25]
000010  f8d13025          LDR      r3,[r1,#0x25]
000014  429a              CMP      r2,r3
000016  db08              BLT      |L5.42|
;;;1309   			   (thisInfo->tDelta.iPosSum >= thisModeConf->BaseLine.iRecalCond1_PosSum_Thd)
;;;1310   			&& ((thisInfo->tDelta.iNegSum + thisInfo->tDelta.iPosSum) < thisModeConf->BaseLine.iRecalCond1_AccSum_Thd)
000018  f8d0302d          LDR      r3,[r0,#0x2d]
00001c  441a              ADD      r2,r2,r3
00001e  f8d13029          LDR      r3,[r1,#0x29]
000022  429a              CMP      r2,r3
000024  bfb8              IT       LT
000026  2201              MOVLT    r2,#1
000028  db00              BLT      |L5.44|
                  |L5.42|
00002a  2200              MOVS     r2,#0
                  |L5.44|
00002c  7082              STRB     r2,[r0,#2]
;;;1311   	);
;;;1312   	thisInfo->bIsRecalCond2 = (
00002e  f8902fb5          LDRB     r2,[r0,#0xfb5]
000032  b93a              CBNZ     r2,|L5.68|
;;;1313   			   (thisInfo->bTouchExpect == NO)
;;;1314   			&& (thisInfo->tDelta.iNegSum < thisModeConf->BaseLine.iRecalCond2_AccSum_Thd)
000034  f8d0202d          LDR      r2,[r0,#0x2d]
000038  f8d1102d          LDR      r1,[r1,#0x2d]
00003c  428a              CMP      r2,r1
00003e  bfb8              IT       LT
000040  2101              MOVLT    r1,#1
000042  db00              BLT      |L5.70|
                  |L5.68|
000044  2100              MOVS     r1,#0
                  |L5.70|
000046  70c1              STRB     r1,[r0,#3]
;;;1315   	);
;;;1316   }
000048  4770              BX       lr
;;;1317   
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      ||.data||

                          AREA ||i.algorithm_init||, CODE, READONLY, ALIGN=2

                  algorithm_init PROC
;;;111    tAlgorithmInfo_t * tTempAlgorithmInfoDebug;
;;;112    void algorithm_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;113    {
;;;114    #if (USED_IDLE_MODE_CONTROL || USED_PEN_MODE_OPERATION || USED_LOCAL_IDLE_MODE_CONTROL || USED_NOISE_HOPPING_FREQ)
;;;115    	const tAppCommonConf_t * _ptAppCommonConf = NULL;
;;;116    	_ptAppCommonConf = app_GetCommonConfig();
000002  f7fffffe          BL       app_GetCommonConfig
000006  4605              MOV      r5,r0
000008  f7fffffe          BL       module_GetModeConfig
00000c  4c15              LDR      r4,|L6.100|
00000e  6020              STR      r0,[r4,#0]  ; ptModuleModeConf
000010  f7fffffe          BL       algorithm_GetModeConfig
000014  6060              STR      r0,[r4,#4]  ; thisModeConf
000016  f7fffffe          BL       algorithm_baseline_init_param
00001a  f7fffffe          BL       algorithm_label_init_param
00001e  f7fffffe          BL       algorithm_coord_init_param
;;;117    #endif
;;;118    	
;;;119    	algorithm_init_param();
;;;120    	thisInfo = algorithm_GetInfo();
000022  f7fffffe          BL       algorithm_GetInfo
;;;121    #if USED_NOISE_HOPPING_FREQ
;;;122    	ptAppInfo = app_GetInfo();
000026  60a0              STR      r0,[r4,#8]  ; thisInfo
000028  f7fffffe          BL       app_GetInfo
;;;123    #endif /* USED_NOISE_HOPPING_FREQ */
;;;124    
;;;125    	DebugAlgorithmInfo = thisInfo;
00002c  60e0              STR      r0,[r4,#0xc]  ; ptAppInfo
00002e  68a2              LDR      r2,[r4,#8]  ; thisInfo
;;;126    	tTempAlgorithmInfoDebug = thisInfo;
000030  6122              STR      r2,[r4,#0x10]  ; DebugAlgorithmInfo
;;;127    
;;;128    #if USED_IDLE_MODE_CONTROL
;;;129    	thisInfo->ulIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;130    	thisInfo->ulIdleModeEnterCheckCount = 0;
;;;131    #if USED_NOISE_HOPPING_FREQ
;;;132    	thisInfo->ulHopFrqIdleModeFrameCntTHD = thisInfo->ulIdleModeEnterFrameCntTHD;
;;;133    #endif /* USED_NOISE_HOPPING_FREQ */
;;;134    
;;;135    #endif /* USED_IDLE_MODE_CONTROL */
;;;136    
;;;137    #if USED_PEN_MODE_OPERATION
;;;138    	thisInfo->uPenLocalModeEnterFrameCntTHD = _ptAppCommonConf->ucPenLocalModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;139    	thisInfo->ulPenLocalModeEnterCheckCount = 0;
;;;140    
;;;141    	thisInfo->ulPenLocalModeChangeFrameCntTHD = _ptAppCommonConf->ucPenLocalModeChangeFrameCntTHD;
;;;142    	thisInfo->ulPenLocalModeChangeCheckCount = 0;
;;;143    	thisInfo->ulPenFullModeChangeFrameCntTHD = _ptAppCommonConf->ucPenFullModeChangeFrameCntTHD;
;;;144    	thisInfo->ulPenFullModeChangeCheckCount = 0;
;;;145    
;;;146    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;147    	thisInfo->ulPenLocalIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec * (_ptAppCommonConf->ucFrameRate / 2);
;;;148    	thisInfo->ulPenLocalIdleModeEnterCheckCount = 0;
;;;149    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;150    #endif /* USED_PEN_MODE_OPERATION */
;;;151    
;;;152    #if USED_NOISE_HOPPING_FREQ
;;;153    	thisInfo->ulHoppMainRollbackFrameCntTHD = _ptAppCommonConf->HoppMainRollbackSec * _ptAppCommonConf->ucFrameRate;
000032  6162              STR      r2,[r4,#0x14]  ; tTempAlgorithmInfoDebug
000034  f8b51017          LDRH     r1,[r5,#0x17]
000038  7c2b              LDRB     r3,[r5,#0x10]
00003a  f5025280          ADD      r2,r2,#0x1000
00003e  4359              MULS     r1,r3,r1
;;;154    	thisInfo->ulHoppMainRollbackCheckCount = 0;
000040  6391              STR      r1,[r2,#0x38]
000042  2100              MOVS     r1,#0
;;;155    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;156    	ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
000044  63d1              STR      r1,[r2,#0x3c]
000046  7541              STRB     r1,[r0,#0x15]
;;;157    	ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
000048  f8c01016          STR      r1,[r0,#0x16]
;;;158    	ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
00004c  f8c0101a          STR      r1,[r0,#0x1a]
;;;159    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;160    #endif /* USED_NOISE_HOPPING_FREQ */
;;;161    //	thisInfo-> = _ptAppCommonConf->ucIdleModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;162    
;;;163    	algorithm_baseline_init();
000050  f7fffffe          BL       algorithm_baseline_init
;;;164    	algorithm_label_init();
000054  f7fffffe          BL       algorithm_label_init
;;;165    	algorithm_coord_init();
000058  f7fffffe          BL       algorithm_coord_init
;;;166    #if USED_NOISE_HOPPING_FREQ
;;;167    	algorithm_noise_init();
00005c  e8bd4070          POP      {r4-r6,lr}
000060  f7ffbffe          B.W      algorithm_noise_init
;;;168    #endif /* USED_NOISE_HOPPING_FREQ */
;;;169    }
;;;170    
                          ENDP

                  |L6.100|
                          DCD      ||.data||

                          AREA ||i.algorithm_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_init_param PROC
;;;170    
;;;171    void algorithm_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173    	ptModuleModeConf = module_GetModeConfig();
000002  f7fffffe          BL       module_GetModeConfig
000006  4c06              LDR      r4,|L7.32|
;;;174    	thisModeConf = algorithm_GetModeConfig();
000008  6020              STR      r0,[r4,#0]  ; ptModuleModeConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;175    	algorithm_baseline_init_param();
00000e  6060              STR      r0,[r4,#4]  ; thisModeConf
000010  f7fffffe          BL       algorithm_baseline_init_param
;;;176    	algorithm_label_init_param();
000014  f7fffffe          BL       algorithm_label_init_param
;;;177    //	algorithm_coord_init();
;;;178    	algorithm_coord_init_param();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      algorithm_coord_init_param
;;;179    }
;;;180    
                          ENDP

                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.algorithm_is_recalibrate||, CODE, READONLY, ALIGN=2

                  algorithm_is_recalibrate PROC
;;;1317   
;;;1318   bool_t algorithm_is_recalibrate(void)
000000  4911              LDR      r1,|L8.72|
;;;1319   {
;;;1320     
;;;1321       /*
;;;1322        * Debouncing.
;;;1323        */
;;;1324       if (thisInfo->bIsRecalCond)
000002  2200              MOVS     r2,#0
000004  6888              LDR      r0,[r1,#8]  ; thisInfo
000006  7883              LDRB     r3,[r0,#2]
000008  b15b              CBZ      r3,|L8.34|
;;;1325       {
;;;1326           if (thisInfo->iRecalCondCnt <= thisModeConf->BaseLine.ucRecalCond1_WaitCnt)
00000a  6849              LDR      r1,[r1,#4]  ; thisModeConf
00000c  6843              LDR      r3,[r0,#4]
00000e  f8911031          LDRB     r1,[r1,#0x31]
000012  428b              CMP      r3,r1
;;;1327           {
;;;1328               thisInfo->iRecalCondCnt++;
000014  bfda              ITTE     LE
000016  1c59              ADDLE    r1,r3,#1
000018  6041              STRLE    r1,[r0,#4]
;;;1329           }
;;;1330           else
;;;1331           {
;;;1332               thisInfo->iRecalCondCnt = 0;   // added
00001a  6042              STRGT    r2,[r0,#4]
00001c  dd11              BLE      |L8.66|
                  |L8.30|
;;;1333               return YES;
;;;1334           }
;;;1335       }
;;;1336       else if (thisInfo->bIsRecalCond2)
;;;1337       {
;;;1338           if (thisInfo->iRecalCond2Cnt <= thisModeConf->BaseLine.ucRecalCond2_WaitCnt)     // 300 msec
;;;1339           {
;;;1340           	thisInfo->iRecalCond2Cnt++;
;;;1341           }
;;;1342           else
;;;1343           {
;;;1344           	thisInfo->iRecalCond2Cnt = 0;   // added
;;;1345               return YES;
00001e  2001              MOVS     r0,#1
;;;1346           }
;;;1347       }
;;;1348       else
;;;1349       {
;;;1350           thisInfo->iRecalCondCnt = 0;
;;;1351           thisInfo->iRecalCond2Cnt = 0;
;;;1352       }
;;;1353   
;;;1354       return NO;
;;;1355   }
000020  4770              BX       lr
                  |L8.34|
000022  78c3              LDRB     r3,[r0,#3]            ;1336
000024  2b00              CMP      r3,#0                 ;1336
000026  bf04              ITT      EQ                    ;1351
000028  6042              STREQ    r2,[r0,#4]            ;1351
00002a  6082              STREQ    r2,[r0,#8]            ;1351
00002c  d009              BEQ      |L8.66|
00002e  6849              LDR      r1,[r1,#4]            ;1338  ; thisModeConf
000030  6883              LDR      r3,[r0,#8]            ;1338
000032  f8911032          LDRB     r1,[r1,#0x32]         ;1338
000036  428b              CMP      r3,r1                 ;1338
000038  bfda              ITTE     LE                    ;1340
00003a  1c59              ADDLE    r1,r3,#1              ;1340
00003c  6081              STRLE    r1,[r0,#8]            ;1340
00003e  6082              STRGT    r2,[r0,#8]            ;1344
000040  dced              BGT      |L8.30|
                  |L8.66|
000042  2000              MOVS     r0,#0                 ;1354
000044  4770              BX       lr
;;;1356   
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      ||.data||

                          AREA ||i.algorithm_process||, CODE, READONLY, ALIGN=2

                  algorithm_process PROC
;;;2329   
;;;2330   bool_t algorithm_process(uint8_t mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2331   {
000004  b087              SUB      sp,sp,#0x1c
000006  4606              MOV      r6,r0
;;;2332   	bool_t bIsRecalState = NO;
000008  2700              MOVS     r7,#0
;;;2333   	eSENSING_MODE_t eSensingMode;
;;;2334   	eSensingMode = HAL_GetSensingMode();
00000a  f7fffffe          BL       HAL_GetSensingMode
;;;2335   	uint8_t ucInterpolation_Ver = 0;
;;;2336   	
;;;2337   #if USED_NOISE_HOPPING_FREQ
;;;2338   	{
;;;2339   #define RAWDATA_STABLE_CNT		(2)
;;;2340   
;;;2341   		if (ptAppInfo->eHoppingStatus == FREQ_HOPPING_CHANGED)
00000e  4aba              LDR      r2,|L9.760|
000010  9000              STR      r0,[sp,#0]
000012  2400              MOVS     r4,#0                 ;2335
000014  68d0              LDR      r0,[r2,#0xc]  ; ptAppInfo
000016  7cc1              LDRB     r1,[r0,#0x13]
000018  2901              CMP      r1,#1
00001a  d00b              BEQ      |L9.52|
                  |L9.28|
;;;2342   		{
;;;2343   			ptAppInfo->ucHoppFrameCnt++;
;;;2344   
;;;2345   			if (ptAppInfo->ucHoppFrameCnt > RAWDATA_STABLE_CNT)
;;;2346   			{
;;;2347   				ptAppInfo->eHoppingStatus = FREQ_HOPPING_NONE;
;;;2348   			}
;;;2349   			else
;;;2350   			{
;;;2351   				return YES;
;;;2352   			}
;;;2353   		}
;;;2354   	}
;;;2355   #endif
;;;2356   
;;;2357   	if( (thisModeConf->Coord.ucFullFingerInterpolation_On > 0 && mode == FULL_MODE) || (thisModeConf->Coord.ucLocalFingerInterpolation_On > 0 && mode == LOCAL_FINGER_MODE) )
00001c  48b6              LDR      r0,|L9.760|
00001e  6841              LDR      r1,[r0,#4]  ; thisModeConf
000020  f89100b4          LDRB     r0,[r1,#0xb4]
000024  b100              CBZ      r0,|L9.40|
000026  b186              CBZ      r6,|L9.74|
                  |L9.40|
000028  f89100b3          LDRB     r0,[r1,#0xb3]
00002c  b308              CBZ      r0,|L9.114|
00002e  2e02              CMP      r6,#2
000030  d00b              BEQ      |L9.74|
000032  e01e              B        |L9.114|
                  |L9.52|
000034  7d01              LDRB     r1,[r0,#0x14]         ;2343
000036  1c49              ADDS     r1,r1,#1              ;2343
000038  b2c9              UXTB     r1,r1                 ;2343
00003a  7501              STRB     r1,[r0,#0x14]         ;2343
00003c  2902              CMP      r1,#2                 ;2345
00003e  bf84              ITT      HI                    ;2347
000040  2100              MOVHI    r1,#0                 ;2347
000042  74c1              STRBHI   r1,[r0,#0x13]         ;2347
000044  d8ea              BHI      |L9.28|
000046  f000b952          B.W      |L9.750|
                  |L9.74|
;;;2358   	{
;;;2359   		if(mode == FULL_MODE)ucInterpolation_Ver = thisModeConf->Coord.ucFullFingerInterpolation_On;
00004a  0004              MOVS     r4,r0
00004c  d011              BEQ      |L9.114|
;;;2360   		else ucInterpolation_Ver = thisModeConf->Coord.ucLocalFingerInterpolation_On;
;;;2361   	}
;;;2362   	
;;;2363   	if(ucInterpolation_Ver > 0)
;;;2364   	{
;;;2365   		thisInfo->tCoord.bInterpolation_On = YES;
00004e  49aa              LDR      r1,|L9.760|
000050  2001              MOVS     r0,#1
;;;2366   		
;;;2367   		if(ucInterpolation_Ver == 1)
000052  2c01              CMP      r4,#1
000054  6889              LDR      r1,[r1,#8]            ;2365  ; thisInfo
000056  f8810e35          STRB     r0,[r1,#0xe35]        ;2365
00005a  d006              BEQ      |L9.106|
;;;2368   			algorithm_coord_interpolation(ucInterpolation_Ver);
;;;2369   
;;;2370   		if(ucInterpolation_Ver != 4){
00005c  2c04              CMP      r4,#4
00005e  d00d              BEQ      |L9.124|
                  |L9.96|
;;;2371   		algorithm_PendTouchEvent();
000060  f7fffffe          BL       algorithm_PendTouchEvent
;;;2372   		algorithm_coord_UpdatePosHistoryInfo();
000064  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
000068  e008              B        |L9.124|
                  |L9.106|
00006a  4620              MOV      r0,r4                 ;2368
00006c  f7fffffe          BL       algorithm_coord_interpolation
000070  e7f6              B        |L9.96|
                  |L9.114|
;;;2373   		}
;;;2374   	}
;;;2375   	else
;;;2376   	{
;;;2377   		thisInfo->tCoord.bInterpolation_On = NO;
000072  49a1              LDR      r1,|L9.760|
000074  2000              MOVS     r0,#0
000076  6889              LDR      r1,[r1,#8]  ; thisInfo
000078  f8810e35          STRB     r0,[r1,#0xe35]
                  |L9.124|
;;;2378   	}
;;;2379   	
;;;2380   	algorithm_coord_initialise_pos_buffer();
00007c  f7fffffe          BL       algorithm_coord_initialise_pos_buffer
000080  489e              LDR      r0,|L9.764|
000082  4d9f              LDR      r5,|L9.768|
000084  2100              MOVS     r1,#0
000086  f5007990          ADD      r9,r0,#0x120
00008a  bf00              NOP      
                  |L9.140|
00008c  f04f0a00          MOV      r10,#0
000090  4652              MOV      r2,r10
000092  eb010881          ADD      r8,r1,r1,LSL #2
000096  bf00              NOP      
                  |L9.152|
000098  eb0203c2          ADD      r3,r2,r2,LSL #3
00009c  eb031302          ADD      r3,r3,r2,LSL #4
0000a0  eb051c43          ADD      r12,r5,r3,LSL #5
0000a4  f83c3018          LDRH     r3,[r12,r8,LSL #1]
0000a8  eb0c0c48          ADD      r12,r12,r8,LSL #1
0000ac  f8bcc288          LDRH     r12,[r12,#0x288]
0000b0  b1c2              CBZ      r2,|L9.228|
0000b2  eb001b42          ADD      r11,r0,r2,LSL #5
0000b6  eb0b0e41          ADD      lr,r11,r1,LSL #1
0000ba  f93eec20          LDRSH    lr,[lr,#-0x20]
0000be  459e              CMP      lr,r3
0000c0  bf04              ITT      EQ
0000c2  f93bb011          LDRSHEQ  r11,[r11,r1,LSL #1]
0000c6  459b              CMPEQ    r11,r3
0000c8  d10c              BNE      |L9.228|
0000ca  eb091b42          ADD      r11,r9,r2,LSL #5
0000ce  eb0b0e41          ADD      lr,r11,r1,LSL #1
0000d2  f93eec20          LDRSH    lr,[lr,#-0x20]
0000d6  45e6              CMP      lr,r12
0000d8  bf02              ITTT     EQ
0000da  f93bb011          LDRSHEQ  r11,[r11,r1,LSL #1]
0000de  45e3              CMPEQ    r11,r12
0000e0  f10a0a01          ADDEQ    r10,r10,#1
                  |L9.228|
0000e4  eb001b42          ADD      r11,r0,r2,LSL #5
0000e8  f82b3011          STRH     r3,[r11,r1,LSL #1]
0000ec  eb091342          ADD      r3,r9,r2,LSL #5
0000f0  f1020201          ADD      r2,r2,#1
0000f4  f823c011          STRH     r12,[r3,r1,LSL #1]
0000f8  2a09              CMP      r2,#9
0000fa  d3cd              BCC      |L9.152|
0000fc  f1ba0f08          CMP      r10,#8
000100  d00f              BEQ      |L9.290|
000102  1c49              ADDS     r1,r1,#1
000104  2910              CMP      r1,#0x10
000106  d3c1              BCC      |L9.140|
000108  2000              MOVS     r0,#0
                  |L9.266|
;;;2381   
;;;2382   #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;2383   	thisInfo->bIsESDRecovery = algorithm_CehckRawDataStuck();
00010a  f8df81ec          LDR      r8,|L9.760|
;;;2384   	if(thisInfo->bIsESDRecovery)
00010e  2800              CMP      r0,#0
000110  f8d81008          LDR      r1,[r8,#8]            ;2383  ; thisInfo
000114  f5015180          ADD      r1,r1,#0x1000         ;2383
000118  f881017a          STRB     r0,[r1,#0x17a]        ;2383
00011c  f04080e7          BNE.W    |L9.750|
000120  e001              B        |L9.294|
                  |L9.290|
000122  2001              MOVS     r0,#1
000124  e7f1              B        |L9.266|
                  |L9.294|
;;;2385   	{
;;;2386   		return YES; //
;;;2387   //		while(1); // watch-dog Reset!!
;;;2388   	}
;;;2389   #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;2390   	
;;;2391   #if (!USED_OPERATION_STAND_ALONE && !USED_TEST_OPERATION_ENABLE)
;;;2392   	memset(sLFOffsetRow, 0, sizeof(sLFOffsetRow));
000126  215a              MOVS     r1,#0x5a
000128  4876              LDR      r0,|L9.772|
00012a  f7fffffe          BL       __aeabi_memclr
;;;2393   	memset(sLFOffsetCol, 0, sizeof(sLFOffsetCol));
00012e  21a0              MOVS     r1,#0xa0
000130  4875              LDR      r0,|L9.776|
000132  f7fffffe          BL       __aeabi_memclr
;;;2394   
;;;2395   	if(!IS_S3_MODE(eSensingMode))
000136  9800              LDR      r0,[sp,#0]
000138  f4106f00          TST      r0,#0x800
00013c  d112              BNE      |L9.356|
;;;2396   	{
;;;2397   		if(thisModeConf->SensingFilter.cLineFilter == 1)
00013e  f8d80004          LDR      r0,[r8,#4]  ; thisModeConf
000142  f8900048          LDRB     r0,[r0,#0x48]
000146  2801              CMP      r0,#1
000148  d002              BEQ      |L9.336|
;;;2398   		{
;;;2399   			alogorithm_linefilter(eSensingMode);
;;;2400   		}
;;;2401   	#if FINGER_LF_VER2_EN
;;;2402   		else if(thisModeConf->SensingFilter.cLineFilter == 2)
;;;2403   		{
;;;2404   			alogorithm_linefilter_2();
;;;2405   		}
;;;2406   	#endif
;;;2407   	#if	USED_DSPA_FUNC_FOR_FINGER && USED_DSPA_FUNC_FOR_FINGER_LF
;;;2408   		else if(thisModeConf->SensingFilter.cLineFilter == 3)
;;;2409   		{
;;;2410   			uint16_t * pBaseImage;
;;;2411   #if USED_NOISE_HOPPING_FREQ
;;;2412   			if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;2413   			{
;;;2414   				pBaseImage = g_pFingerBaseImage;
;;;2415   			}
;;;2416   			else
;;;2417   			{
;;;2418   				pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
;;;2419   			}
;;;2420   //			pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2421   #else /* USED_NOISE_HOPPING_FREQ */
;;;2422   			pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2423   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2424   			alogorithm_linefilter_dspA((uint32_t)&RAWIMAGE[0][0],(uint32_t)(&pBaseImage[0]),(uint32_t)&DSPATMPDELTA_Finger[0][0],(uint32_t)&LINEFILTERBUFST2_Finger[0],(uint32_t)&LINEFILTERBUFST3_Finger[0],ROW_MAX,
;;;2425   			(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift),0);
;;;2426   		}
;;;2427   	#endif
;;;2428   		else if(thisModeConf->SensingFilter.cLineFilter == 4)
00014a  2804              CMP      r0,#4
00014c  d004              BEQ      |L9.344|
00014e  e009              B        |L9.356|
                  |L9.336|
000150  9800              LDR      r0,[sp,#0]            ;2399
000152  f7fffffe          BL       alogorithm_linefilter
000156  e005              B        |L9.356|
                  |L9.344|
;;;2429   		{
;;;2430   			alogorithm_linefilter_simple(eSensingMode);
000158  9800              LDR      r0,[sp,#0]
00015a  f7fffffe          BL       alogorithm_linefilter_simple
;;;2431   			alogorithm_vertical_linefilter_simple(eSensingMode);
00015e  9800              LDR      r0,[sp,#0]
000160  f7fffffe          BL       alogorithm_vertical_linefilter_simple
                  |L9.356|
;;;2432   		}
;;;2433   	}
;;;2434   	
;;;2435   #endif /* (!USED_OPERATION_STAND_ALONE && !USED_TEST_OPERATION_ENABLE) */
;;;2436   
;;;2437   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_GET_RAW_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*Raw Data*/);
000164  f8df91a4          LDR      r9,|L9.780|
000168  4a65              LDR      r2,|L9.768|
00016a  e9d90100          LDRD     r0,r1,[r9,#0]
00016e  e9cd0101          STRD     r0,r1,[sp,#4]
000172  a901              ADD      r1,sp,#4
000174  2003              MOVS     r0,#3
000176  f7fffffe          BL       protocol_Log
;;;2438   	
;;;2439   	algorithm_baseline_calculate_delta(mode);
00017a  4630              MOV      r0,r6
00017c  f7fffffe          BL       algorithm_baseline_calculate_delta
000180  e9d90102          LDRD     r0,r1,[r9,#8]
000184  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;2440   	
;;;2441   //	#if ConflictTest
;;;2442   //		heon_DeltaCopy();
;;;2443   //	#endif
;;;2444   	
;;;2445   	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);
000188  4a61              LDR      r2,|L9.784|
00018a  a903              ADD      r1,sp,#0xc
00018c  4692              MOV      r10,r2
00018e  2004              MOVS     r0,#4
000190  f7fffffe          BL       protocol_Log
;;;2446   #if USED_OPERATION_STAND_ALONE
;;;2447   	return YES;
;;;2448   #endif /* USED_OPERATION_STAND_ALONE */
;;;2449   		
;;;2450   	if((mode == FULL_MODE && !thisModeConf->BaseLine.bFullModeReBaseCheckOff) || (mode == LOCAL_FINGER_MODE && !thisModeConf->BaseLine.bLocalModeReBaseCheckOff))
000194  b116              CBZ      r6,|L9.412|
000196  2e02              CMP      r6,#2
000198  d006              BEQ      |L9.424|
00019a  e051              B        |L9.576|
                  |L9.412|
00019c  f8d80004          LDR      r0,[r8,#4]  ; thisModeConf
0001a0  f8900033          LDRB     r0,[r0,#0x33]
0001a4  bbd8              CBNZ     r0,|L9.542|
0001a6  e004              B        |L9.434|
                  |L9.424|
0001a8  f8d80004          LDR      r0,[r8,#4]  ; thisModeConf
0001ac  f8900034          LDRB     r0,[r0,#0x34]
0001b0  bba8              CBNZ     r0,|L9.542|
                  |L9.434|
0001b2  f8d80008          LDR      r0,[r8,#8]  ; thisInfo
0001b6  f04f0300          MOV      r3,#0
0001ba  7083              STRB     r3,[r0,#2]
0001bc  70c3              STRB     r3,[r0,#3]
0001be  f8d81004          LDR      r1,[r8,#4]  ; thisModeConf
0001c2  f8d02025          LDR      r2,[r0,#0x25]
0001c6  f8d1c025          LDR      r12,[r1,#0x25]
0001ca  4562              CMP      r2,r12
0001cc  db08              BLT      |L9.480|
0001ce  f8d0c02d          LDR      r12,[r0,#0x2d]
0001d2  4462              ADD      r2,r2,r12
0001d4  f8d1c029          LDR      r12,[r1,#0x29]
0001d8  4562              CMP      r2,r12
0001da  bfb8              IT       LT
0001dc  2201              MOVLT    r2,#1
0001de  db00              BLT      |L9.482|
                  |L9.480|
0001e0  2200              MOVS     r2,#0
                  |L9.482|
0001e2  7082              STRB     r2,[r0,#2]
0001e4  f890cfb5          LDRB     r12,[r0,#0xfb5]
0001e8  f1bc0f00          CMP      r12,#0
0001ec  d108              BNE      |L9.512|
0001ee  f8d0c02d          LDR      r12,[r0,#0x2d]
0001f2  f8d1702d          LDR      r7,[r1,#0x2d]
0001f6  45bc              CMP      r12,r7
0001f8  bfb8              IT       LT
0001fa  f04f0c01          MOVLT    r12,#1
0001fe  db01              BLT      |L9.516|
                  |L9.512|
000200  f04f0c00          MOV      r12,#0
                  |L9.516|
000204  f880c003          STRB     r12,[r0,#3]
000208  b152              CBZ      r2,|L9.544|
00020a  f8911031          LDRB     r1,[r1,#0x31]
00020e  6842              LDR      r2,[r0,#4]
000210  428a              CMP      r2,r1
000212  bfda              ITTE     LE
000214  1c51              ADDLE    r1,r2,#1
000216  6041              STRLE    r1,[r0,#4]
000218  6043              STRGT    r3,[r0,#4]
00021a  dd10              BLE      |L9.574|
                  |L9.540|
00021c  2701              MOVS     r7,#1
                  |L9.542|
00021e  e00f              B        |L9.576|
                  |L9.544|
000220  f1bc0f00          CMP      r12,#0
000224  bf04              ITT      EQ
000226  6043              STREQ    r3,[r0,#4]
000228  6083              STREQ    r3,[r0,#8]
00022a  d008              BEQ      |L9.574|
00022c  f8911032          LDRB     r1,[r1,#0x32]
000230  6882              LDR      r2,[r0,#8]
000232  428a              CMP      r2,r1
000234  bfda              ITTE     LE
000236  1c51              ADDLE    r1,r2,#1
000238  6081              STRLE    r1,[r0,#8]
00023a  6083              STRGT    r3,[r0,#8]
00023c  dcee              BGT      |L9.540|
                  |L9.574|
00023e  2700              MOVS     r7,#0
                  |L9.576|
;;;2451   	{
;;;2452   		algorithm_check_recal_cond();
;;;2453   		bIsRecalState = algorithm_is_recalibrate();
;;;2454   	}
;;;2455   	
;;;2456   	if(IS_S3_MODE(eSensingMode) && IS_IDLE_MODE(eSensingMode))
000240  9800              LDR      r0,[sp,#0]
000242  f4106f00          TST      r0,#0x800
000246  bf1c              ITT      NE
000248  9800              LDRNE    r0,[sp,#0]
00024a  f4107f80          TSTNE    r0,#0x100
00024e  d145              BNE      |L9.732|
;;;2457   	{
;;;2458   		algorithm_baseline_tracking_continuous(mode);
;;;2459   	}
;;;2460   	else
;;;2461   	{
;;;2462   		if(bIsRecalState == NO)
000250  bba7              CBNZ     r7,|L9.700|
;;;2463   		{
;;;2464   //#if (FingerAreaPenDeltaDelete==1 || FingerAreaPenDeltaNoAcc==1 || FingerAreaLineFilter == 1)
;;;2465   //			if(mode == LOCAL_FINGER_MODE)
;;;2466   //			{
;;;2467   //				if(thisModeConf->BaseLine.cFingerAreaPenDeltaDelete != 0 || thisModeConf->BaseLine.cFingerAreaPenDeltaNoAcc != 0 || thisModeConf->SensingFilter.sFingerAreaLineFilterLimit != 0)
;;;2468   //				{
;;;2469   //					thisInfo->tPenInfo.LocalFingerArea.rs = ROW_MAX;
;;;2470   //					thisInfo->tPenInfo.LocalFingerArea.re = 0;
;;;2471   //					thisInfo->tPenInfo.LocalFingerArea.cs = COL_MAX;
;;;2472   //					thisInfo->tPenInfo.LocalFingerArea.ce = 0;	
;;;2473   //				}
;;;2474   //			}
;;;2475   //#endif			
;;;2476   			// process label image from delta image
;;;2477   			algorithm_label_process(mode);
000252  4630              MOV      r0,r6
000254  f7fffffe          BL       algorithm_label_process
;;;2478   			algorithm_coord_process(FULL_MODE);
000258  2000              MOVS     r0,#0
00025a  f7fffffe          BL       algorithm_coord_process
;;;2479   			//heon
;;;2480   			for( int rx = 0; rx<ROW_MAX; rx++ ){
00025e  2300              MOVS     r3,#0
;;;2481   				for( int cx = 0; cx <COL_MAX; cx++){
000260  f24e7b47          MOV      r11,#0xe747
000264  f24d1ed2          MOV      lr,#0xd1d2
                  |L9.616|
000268  eb0300c3          ADD      r0,r3,r3,LSL #3
00026c  eb001143          ADD      r1,r0,r3,LSL #5
000270  eb050041          ADD      r0,r5,r1,LSL #1
000274  eb050181          ADD      r1,r5,r1,LSL #2
000278  4458              ADD      r0,r0,r11
00027a  4471              ADD      r1,r1,lr
00027c  f05f0250          MOVS.W   r2,#0x50
                  |L9.640|
;;;2482   					if(HAL_READ_LABEL_IMAGE(rx,cx) != 0){
000280  f890c000          LDRB     r12,[r0,#0]
000284  f1bc0f00          CMP      r12,#0
000288  bf1c              ITT      NE
00028a  f10c0c0a          ADDNE    r12,r12,#0xa
;;;2483   						HAL_WRITE_DELTA_IMAGE(rx+13,cx,HAL_READ_LABEL_IMAGE(rx,cx)+10);
00028e  f8a1c000          STRHNE   r12,[r1,#0]
000292  1c40              ADDS     r0,r0,#1
000294  1c89              ADDS     r1,r1,#2
000296  1e52              SUBS     r2,r2,#1
000298  d1f2              BNE      |L9.640|
00029a  1c5b              ADDS     r3,r3,#1              ;2482
;;;2484   					}
00029c  2b2d              CMP      r3,#0x2d
00029e  dbe3              BLT      |L9.616|
0002a0  e9d90104          LDRD     r0,r1,[r9,#0x10]
0002a4  e9cd0105          STRD     r0,r1,[sp,#0x14]
0002a8  4652              MOV      r2,r10
;;;2485   				}
;;;2486   			}
;;;2487   			protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);
0002aa  a905              ADD      r1,sp,#0x14
0002ac  2004              MOVS     r0,#4
0002ae  f7fffffe          BL       protocol_Log
;;;2488   			//		
;;;2489   			if(ucInterpolation_Ver >= 2)
0002b2  2c02              CMP      r4,#2
;;;2490   			{		
;;;2491   				algorithm_coord_interpolation_v02(ucInterpolation_Ver);
0002b4  bf24              ITT      CS
0002b6  4620              MOVCS    r0,r4
0002b8  f7fffffe          BLCS     algorithm_coord_interpolation_v02
                  |L9.700|
;;;2492   			}
;;;2493   		}
;;;2494   
;;;2495   #if USED_NOISE_HOPPING_FREQ
;;;2496   		if(mode == FULL_MODE)
0002bc  2e00              CMP      r6,#0
;;;2497   		{
;;;2498   			algorithm_noise_process();
0002be  bf08              IT       EQ
0002c0  f7fffffe          BLEQ     algorithm_noise_process
;;;2499   		}
;;;2500   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2501   
;;;2502   #if PALM_VER1_EN
;;;2503   		if(thisModeConf->Palm.ucPalmDetectionOn == 1 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 0))
;;;2504   			public_func_PalmTouch_handler();
;;;2505   		
;;;2506   		if(thisInfo->bIsPalm || thisInfo->tCoord.tPos.sFinger_ > 5) thisInfo->bNewVersionPalm = 1;
;;;2507   		if(!thisInfo->bTouchExpect) thisInfo->bNewVersionPalm = 0;
;;;2508   #endif
;;;2509   
;;;2510   #if USED_PEN_MODE_OPERATION
;;;2511   		if(mode == FULL_MODE)
;;;2512   		{
;;;2513   			thisInfo->sFullLcoalChangeMinTh = thisModeConf->BaseLine.sFullLcoalChangeMinTh;
;;;2514   			if((thisInfo->bIsPalm == YES && thisInfo->tCoord.tPos.sFinger_ >= 1) || thisInfo->tCoord.tPos.sFinger_ >= 6)
;;;2515   				thisInfo->sFullLcoalChangeMinTh += thisModeConf->BaseLine.cFullLcoalChangeMinThOffset;
;;;2516   			if(thisInfo->tDelta.iMinStrength < thisInfo->sFullLcoalChangeMinTh)
;;;2517   			{
;;;2518   				thisInfo->bLocal_sensing = YES;
;;;2519   				algorithm_baseline_calculate_mux_range(thisInfo->tDelta.tMinCellPos.r, thisInfo->tDelta.tMinCellPos.c);
;;;2520   			}
;;;2521   		}
;;;2522   #endif
;;;2523   	
;;;2524   		if(ucInterpolation_Ver < 2)
0002c4  2c02              CMP      r4,#2
0002c6  d203              BCS      |L9.720|
;;;2525   		{
;;;2526   			algorithm_PendTouchEvent();
0002c8  f7fffffe          BL       algorithm_PendTouchEvent
;;;2527   			algorithm_coord_UpdatePosHistoryInfo();
0002cc  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
                  |L9.720|
;;;2528   		}
;;;2529   		
;;;2530   		if(thisModeConf->BaseLine.bFingerBaseTracking == 1)
0002d0  f8d80004          LDR      r0,[r8,#4]  ; thisModeConf
0002d4  f8900041          LDRB     r0,[r0,#0x41]
0002d8  2801              CMP      r0,#1
0002da  d102              BNE      |L9.738|
                  |L9.732|
;;;2531   			algorithm_baseline_tracking_continuous(mode);
0002dc  4630              MOV      r0,r6
0002de  f7fffffe          BL       algorithm_baseline_tracking_continuous
                  |L9.738|
;;;2532   	}
;;;2533   
;;;2534   	return (bIsRecalState == NO);
0002e2  2f00              CMP      r7,#0
0002e4  bf1e              ITTT     NE
0002e6  2000              MOVNE    r0,#0
;;;2535   }
0002e8  b007              ADDNE    sp,sp,#0x1c
0002ea  e8bd8ff0          POPNE    {r4-r11,pc}
                  |L9.750|
0002ee  2001              MOVS     r0,#1                 ;2534
0002f0  b007              ADD      sp,sp,#0x1c
0002f2  e8bd8ff0          POP      {r4-r11,pc}
;;;2536   
                          ENDP

0002f6  0000              DCW      0x0000
                  |L9.760|
                          DCD      ||.data||
                  |L9.764|
                          DCD      ||.bss||+0x5a
                  |L9.768|
                          DCD      FullSharedBuff
                  |L9.772|
                          DCD      ||.bss||
                  |L9.776|
                          DCD      ||.bss||+0x33a
                  |L9.780|
                          DCD      ||.constdata||
                  |L9.784|
                          DCD      FullSharedBuff+0xc97e

                          AREA ||i.algorithm_process_S3||, CODE, READONLY, ALIGN=2

                  algorithm_process_S3 PROC
;;;2634   extern uint8_t g_RemoteWakeup;
;;;2635   bool_t algorithm_process_S3(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2636   {
000004  484c              LDR      r0,|L10.312|
000006  b085              SUB      sp,sp,#0x14
000008  6800              LDR      r0,[r0,#0]  ; ptModuleModeConf
00000a  7841              LDRB     r1,[r0,#1]
00000c  2032              MOVS     r0,#0x32
00000e  fa00f501          LSL      r5,r0,r1
000012  426e              RSBS     r6,r5,#0
000014  f7fffffe          BL       HAL_GetSensingMode
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       HAL_GetBaseImagePointer
00001e  f8dfb11c          LDR      r11,|L10.316|
000022  f8dfa11c          LDR      r10,|L10.320|
000026  2300              MOVS     r3,#0
                  |L10.40|
000028  eb030183          ADD      r1,r3,r3,LSL #2
00002c  2400              MOVS     r4,#0
00002e  eb0b1141          ADD      r1,r11,r1,LSL #5
000032  46a0              MOV      r8,r4
000034  4602              MOV      r2,r0
000036  468c              MOV      r12,r1
000038  f04f0928          MOV      r9,#0x28
                  |L10.60|
00003c  f8bc7000          LDRH     r7,[r12,#0]
000040  f8b2e000          LDRH     lr,[r2,#0]
000044  eba7070e          SUB      r7,r7,lr
000048  b23f              SXTH     r7,r7
00004a  42af              CMP      r7,r5
00004c  bfb8              IT       LT
00004e  42be              CMPLT    r6,r7
000050  da03              BGE      |L10.90|
000052  4447              ADD      r7,r7,r8
000054  fa0ff887          SXTH     r8,r7
000058  1c64              ADDS     r4,r4,#1
                  |L10.90|
00005a  1d12              ADDS     r2,r2,#4
00005c  f1b90901          SUBS     r9,r9,#1
000060  f10c0c04          ADD      r12,r12,#4
000064  d1ea              BNE      |L10.60|
000066  30a0              ADDS     r0,r0,#0xa0
000068  2c03              CMP      r4,#3
00006a  d916              BLS      |L10.154|
00006c  b222              SXTH     r2,r4
00006e  fb98f2f2          SDIV     r2,r8,r2
000072  f82a2013          STRH     r2,[r10,r3,LSL #1]
000076  2250              MOVS     r2,#0x50
                  |L10.120|
000078  f8b1c000          LDRH     r12,[r1,#0]
00007c  f83a4013          LDRH     r4,[r10,r3,LSL #1]
000080  ebac0c04          SUB      r12,r12,r4
000084  fa0ffc8c          SXTH     r12,r12
000088  f1bc0f00          CMP      r12,#0
00008c  bfb8              IT       LT
00008e  f04f0c00          MOVLT    r12,#0
000092  f821cb02          STRH     r12,[r1],#2
000096  1e52              SUBS     r2,r2,#1
000098  d1ee              BNE      |L10.120|
                  |L10.154|
00009a  1c5b              ADDS     r3,r3,#1
00009c  2b0a              CMP      r3,#0xa
00009e  d3c3              BCC      |L10.40|
;;;2637   	bool_t bIsRecalState = NO;
;;;2638   
;;;2639   	alogorithm_linefilter_S3();
;;;2640   	algorithm_baseline_calculate_delta_S3();
0000a0  f7fffffe          BL       algorithm_baseline_calculate_delta_S3
;;;2641   
;;;2642   //	algorithm_baseline_tracking_continuous_local_S3();
;;;2643   
;;;2644   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_NI_GET_RAW_IMAGE_PTR(), COL_MAX, NI_ROW_MAX, 84/*MAX Intensity*/);
0000a4  4c27              LDR      r4,|L10.324|
0000a6  4a25              LDR      r2,|L10.316|
0000a8  e9d40106          LDRD     r0,r1,[r4,#0x18]
0000ac  e9cd0100          STRD     r0,r1,[sp,#0]
0000b0  4669              MOV      r1,sp
0000b2  2003              MOVS     r0,#3
0000b4  f7fffffe          BL       protocol_Log
0000b8  e9d40108          LDRD     r0,r1,[r4,#0x20]
0000bc  e9cd0102          STRD     r0,r1,[sp,#8]
;;;2645   	protocol_LogMatrix(LT_INTENSITY, COL_MAX, HAL_NI_GET_DELTA_IMAGE_PTR(), COL_MAX, NI_ROW_MAX, 84/*MAX Intensity*/);
0000c0  4a21              LDR      r2,|L10.328|
0000c2  a902              ADD      r1,sp,#8
0000c4  2004              MOVS     r0,#4
0000c6  f7fffffe          BL       protocol_Log
;;;2646   
;;;2647   	if(thisInfo->tS3DeltaInfo.bIsSendResumeSignal == YES && g_RemoteWakeup == 0)
0000ca  4d1b              LDR      r5,|L10.312|
0000cc  4e1f              LDR      r6,|L10.332|
0000ce  68a8              LDR      r0,[r5,#8]  ; thisInfo
0000d0  f8900f32          LDRB     r0,[r0,#0xf32]
0000d4  2801              CMP      r0,#1
0000d6  bf04              ITT      EQ
0000d8  7830              LDRBEQ   r0,[r6,#0]  ; g_RemoteWakeup
0000da  2800              CMPEQ    r0,#0
0000dc  d105              BNE      |L10.234|
;;;2648   	{
;;;2649   #if !USED_S3_WAKEUP_DEBUGING
;;;2650   		algorithm_PendTouchEvent();
0000de  f7fffffe          BL       algorithm_PendTouchEvent
;;;2651   		algorithm_coord_UpdatePosHistoryInfo();
0000e2  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
;;;2652   		algorithm_baseline_tracking_continuous_S3();
0000e6  f7fffffe          BL       algorithm_baseline_tracking_continuous_S3
                  |L10.234|
;;;2653   #endif
;;;2654   	}
;;;2655   
;;;2656   	if((thisInfo->bTouchExpect == YES) && (g_RemoteWakeup == 1))
0000ea  68a9              LDR      r1,[r5,#8]  ; thisInfo
0000ec  2401              MOVS     r4,#1
0000ee  f8910fb5          LDRB     r0,[r1,#0xfb5]
0000f2  2801              CMP      r0,#1
0000f4  bf04              ITT      EQ
0000f6  7830              LDRBEQ   r0,[r6,#0]  ; g_RemoteWakeup
0000f8  2801              CMPEQ    r0,#1
0000fa  d118              BNE      |L10.302|
;;;2657   	{
;;;2658   		thisInfo->tCoord.tPos.vusR[0] = 100;
0000fc  f04f0064          MOV      r0,#0x64
000100  f8a104e2          STRH     r0,[r1,#0x4e2]
;;;2659   		thisInfo->tCoord.tPos.vusS[0] = 100;
000104  f8a104ce          STRH     r0,[r1,#0x4ce]
;;;2660   		thisInfo->tCoord.tPos.tXY[0].x = 5000;
000108  f2413088          MOV      r0,#0x1388
00010c  f8c1047e          STR      r0,[r1,#0x47e]
;;;2661   		thisInfo->tCoord.tPos.tXY[0].y = 5000;
000110  f8c10482          STR      r0,[r1,#0x482]
;;;2662   
;;;2663   		if(thisInfo->tS3DeltaInfo.bIsSendResumeSignal == NO &&
000114  f8910f32          LDRB     r0,[r1,#0xf32]
000118  b948              CBNZ     r0,|L10.302|
;;;2664   			IS_GPIO_PIN(_GPIO_S3_POWER_IN) == GPIO_DATA_LOW)
00011a  f04f0008          MOV      r0,#8
00011e  f7fffffe          BL       GPIO_Get_IN
000122  b920              CBNZ     r0,|L10.302|
;;;2665   		{
;;;2666   			thisInfo->tS3DeltaInfo.bIsSendResumeSignal = YES;
000124  68a8              LDR      r0,[r5,#8]  ; thisInfo
000126  f8804f32          STRB     r4,[r0,#0xf32]
;;;2667   #if USED_S3_WAKEUP_DEBUGING
;;;2668   			ulTestS3RawDataRead = NO;
;;;2669   #else
;;;2670   			ResumeSigal();
00012a  f7fffffe          BL       ResumeSigal
                  |L10.302|
;;;2671   #endif
;;;2672   		}
;;;2673   	}
;;;2674   
;;;2675   	return (bIsRecalState == NO);
;;;2676   }
00012e  b005              ADD      sp,sp,#0x14
000130  4620              MOV      r0,r4                 ;2675
000132  e8bd8ff0          POP      {r4-r11,pc}
;;;2677   #endif /* USED_MNT_S3_MODE_FUNCTION */
                          ENDP

000136  0000              DCW      0x0000
                  |L10.312|
                          DCD      ||.data||
                  |L10.316|
                          DCD      FullSharedBuff
                  |L10.320|
                          DCD      ||.bss||
                  |L10.324|
                          DCD      ||.constdata||
                  |L10.328|
                          DCD      FullSharedBuff+0xf602
                  |L10.332|
                          DCD      g_RemoteWakeup

                          AREA ||i.alogorithm_linefilter||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter PROC
;;;1703   
;;;1704   void alogorithm_linefilter(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1705   {
;;;1706   	uint32_t r, c;
;;;1707   	uint16_t r_pos;
;;;1708   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  4d6a              LDR      r5,|L11.432|
000006  b087              SUB      sp,sp,#0x1c           ;1705
000008  6868              LDR      r0,[r5,#4]  ; thisModeConf
00000a  6829              LDR      r1,[r5,#0]  ; ptModuleModeConf
00000c  f8b02049          LDRH     r2,[r0,#0x49]
000010  7809              LDRB     r1,[r1,#0]
;;;1709   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1710   	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
000012  f890404d          LDRB     r4,[r0,#0x4d]
000016  408a              LSLS     r2,r2,r1              ;1708
000018  fa0ffa82          SXTH     r10,r2                ;1708
00001c  f8b0204b          LDRH     r2,[r0,#0x4b]         ;1709
000020  fa02f101          LSL      r1,r2,r1              ;1709
000024  fa0ffb81          SXTH     r11,r1                ;1709
;;;1711   	
;;;1712   	int16_t lDiff;
;;;1713   	int16_t lDiffSum = 0, lDiffSum2 = 0;
;;;1714   	uint32_t lDiffSumCnt = 0, lDiffSumCnt2 = 0;
;;;1715   	int32_t lLowTHD, lUpperTHD;
;;;1716   	uint16_t * pBaseImage;
;;;1717   	uint16_t rawdata;
;;;1718   	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
000028  f7fffffe          BL       hal_Info_GetControlLocalFingerOPType
;;;1719   
;;;1720   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;1721   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;1722   
;;;1723   #if USED_NOISE_HOPPING_FREQ
;;;1724   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
00002c  9005              STR      r0,[sp,#0x14]
00002e  68e8              LDR      r0,[r5,#0xc]  ; ptAppInfo
000030  7c80              LDRB     r0,[r0,#0x12]
000032  2801              CMP      r0,#1
;;;1725   	{
;;;1726   		pBaseImage = g_pFingerBaseImage;
000034  bf07              ITTEE    EQ
000036  485f              LDREQ    r0,|L11.436|
000038  6800              LDREQ    r0,[r0,#0]  ; g_pFingerBaseImage
;;;1727   	}
;;;1728   	else
;;;1729   	{
;;;1730   		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
00003a  485f              LDRNE    r0,|L11.440|
00003c  f2454160          MOVNE    r1,#0x5460
000040  bf18              IT       NE
000042  4408              ADDNE    r0,r1
;;;1731   	}
;;;1732   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;1733   #else /* USED_NOISE_HOPPING_FREQ */
;;;1734   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1735   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1736   
;;;1737   	int Max_Val, Min_Val;
;;;1738   	int LineFilterRepeatTH = thisModeConf->SensingFilter.ucLineFilterRepeatTH << ptModuleModeConf->ucOvrShift;
000044  9000              STR      r0,[sp,#0]
000046  6868              LDR      r0,[r5,#4]  ; thisModeConf
000048  6829              LDR      r1,[r5,#0]  ; ptModuleModeConf
;;;1739   #if USED_TOUCH_TUNING_PROCESS
;;;1740   	LineFilterRepeatTH = 0;
;;;1741   #endif /* USED_TOUCH_TUNING_PROCESS */
;;;1742   	for(r=0; r<ROW_MAX; r++)
00004a  f04f0900          MOV      r9,#0
00004e  f890004e          LDRB     r0,[r0,#0x4e]         ;1738
000052  7809              LDRB     r1,[r1,#0]            ;1738
000054  4088              LSLS     r0,r0,r1              ;1738
;;;1743   	{
;;;1744   		lDiffSumCnt2 = 0;
;;;1745   		lDiffSum2 = 0;
;;;1746   		
;;;1747   		Max_Val = 0;
;;;1748   //		Avg_Val = 0;
;;;1749   		Min_Val = 32767;
;;;1750   		r_pos = r*COL_MAX;
;;;1751   		for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
000056  9004              STR      r0,[sp,#0x10]
000058  f104004f          ADD      r0,r4,#0x4f
00005c  9003              STR      r0,[sp,#0xc]
                  |L11.94|
00005e  eb090089          ADD      r0,r9,r9,LSL #2       ;1750
000062  f64f71ff          MOV      r1,#0xffff            ;1750
000066  9002              STR      r0,[sp,#8]            ;1750
000068  ea011000          AND      r0,r1,r0,LSL #4       ;1750
00006c  9001              STR      r0,[sp,#4]            ;1750
00006e  9803              LDR      r0,[sp,#0xc]
000070  2700              MOVS     r7,#0                 ;1744
000072  fbb0f1f4          UDIV     r1,r0,r4
000076  46b8              MOV      r8,r7                 ;1745
000078  463e              MOV      r6,r7                 ;1747
00007a  f64775ff          MOV      r5,#0x7fff            ;1749
00007e  b1f9              CBZ      r1,|L11.192|
000080  e9dd0200          LDRD     r0,r2,[sp,#0]
000084  eb000342          ADD      r3,r0,r2,LSL #1
000088  484b              LDR      r0,|L11.440|
00008a  9a02              LDR      r2,[sp,#8]
00008c  eb001242          ADD      r2,r0,r2,LSL #5
                  |L11.144|
;;;1752   		{
;;;1753   			rawdata = HAL_READ_RAW_IMAGE(r, c);
;;;1754   #if USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS
;;;1755   			if(rawdata > 0)
;;;1756   #endif /* USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS */
;;;1757   			{
;;;1758   				lDiff = (int16_t)(rawdata - pBaseImage[r_pos+c]);
000090  f8b3c000          LDRH     r12,[r3,#0]
000094  8810              LDRH     r0,[r2,#0]
000096  eba0000c          SUB      r0,r0,r12
00009a  b200              SXTH     r0,r0
;;;1759   				//pBaseImage += LINE_FILTER_COL_OFFSET;
;;;1760   				if(lDiff < lUpperTHD && lDiff > lLowTHD)
00009c  4550              CMP      r0,r10
00009e  bfb8              IT       LT
0000a0  4583              CMPLT    r11,r0
0000a2  da07              BGE      |L11.180|
;;;1761   				{
;;;1762   					if(Max_Val < lDiff)Max_Val = lDiff;
0000a4  4286              CMP      r6,r0
0000a6  db7e              BLT      |L11.422|
                  |L11.168|
;;;1763   					if(Min_Val > lDiff)Min_Val = lDiff;
0000a8  4285              CMP      r5,r0
0000aa  dc7e              BGT      |L11.426|
                  |L11.172|
;;;1764   					lDiffSum2 += lDiff;
0000ac  4440              ADD      r0,r0,r8
0000ae  fa0ff880          SXTH     r8,r0
0000b2  1c7f              ADDS     r7,r7,#1
                  |L11.180|
;;;1765   					lDiffSumCnt2++;
;;;1766   				}
0000b4  eb030344          ADD      r3,r3,r4,LSL #1
0000b8  eb020244          ADD      r2,r2,r4,LSL #1
0000bc  1e49              SUBS     r1,r1,#1
0000be  d1e7              BNE      |L11.144|
                  |L11.192|
;;;1767   			}
;;;1768   		}
;;;1769   
;;;1770   		if(LineFilterRepeatTH > 0 && Max_Val - Min_Val > LineFilterRepeatTH  &&
0000c0  9804              LDR      r0,[sp,#0x10]
0000c2  2800              CMP      r0,#0
0000c4  bfc4              ITT      GT
0000c6  1b71              SUBGT    r1,r6,r5
0000c8  4281              CMPGT    r1,r0
0000ca  dd41              BLE      |L11.336|
0000cc  9805              LDR      r0,[sp,#0x14]
0000ce  b918              CBNZ     r0,|L11.216|
0000d0  f7fffffe          BL       hal_Info_GetPenDectionEnable
0000d4  2800              CMP      r0,#0
0000d6  d13b              BNE      |L11.336|
                  |L11.216|
0000d8  4835              LDR      r0,|L11.432|
0000da  6841              LDR      r1,[r0,#4]  ; thisModeConf
0000dc  6802              LDR      r2,[r0,#0]  ; ptModuleModeConf
0000de  f991104f          LDRSB    r1,[r1,#0x4f]
0000e2  7812              LDRB     r2,[r2,#0]
0000e4  4091              LSLS     r1,r1,r2
0000e6  42a9              CMP      r1,r5
0000e8  da32              BGE      |L11.336|
0000ea  6880              LDR      r0,[r0,#8]  ; thisInfo
0000ec  f5005080          ADD      r0,r0,#0x1000
0000f0  f8900179          LDRB     r0,[r0,#0x179]
0000f4  b360              CBZ      r0,|L11.336|
;;;1771   				(eLocalFingerOPType!=ACTIVEPEN_TYPE_LOCAL_MS || (eLocalFingerOPType==ACTIVEPEN_TYPE_LOCAL_MS && hal_Info_GetPenDectionEnable() == NO))
;;;1772   				&& Min_Val > thisModeConf->SensingFilter.cLineFilterMinTH<<ptModuleModeConf->ucOvrShift && thisInfo->bLineFilterRepeatCheck)
;;;1773   		{
;;;1774   			lDiffSumCnt = 0;
;;;1775   			lDiffSum = 0;
;;;1776   			for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  2700              MOVS     r7,#0                 ;1774
0000fa  fbb0f1f4          UDIV     r1,r0,r4
0000fe  46b8              MOV      r8,r7                 ;1775
000100  2900              CMP      r1,#0
000102  d045              BEQ      |L11.400|
000104  e9dd0200          LDRD     r0,r2,[sp,#0]
000108  eb000e42          ADD      lr,r0,r2,LSL #1
00010c  4a2a              LDR      r2,|L11.440|
00010e  9802              LDR      r0,[sp,#8]
000110  eb021c40          ADD      r12,r2,r0,LSL #5
                  |L11.276|
;;;1777   			{
;;;1778   				rawdata = HAL_READ_RAW_IMAGE(r, c);
;;;1779   #if USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS
;;;1780   				if(rawdata > 0)
;;;1781   #endif /* USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS */
;;;1782   				{
;;;1783   					lDiff = (int16_t)(rawdata - pBaseImage[r_pos+c]);
000114  f8be2000          LDRH     r2,[lr,#0]
000118  f8bc0000          LDRH     r0,[r12,#0]
00011c  1a80              SUBS     r0,r0,r2
00011e  b200              SXTH     r0,r0
;;;1784   					if(lDiff < lUpperTHD && lDiff > lLowTHD)
000120  4550              CMP      r0,r10
000122  bfb8              IT       LT
000124  4583              CMPLT    r11,r0
000126  da0d              BGE      |L11.324|
;;;1785   					{
;;;1786   						if(abs(Max_Val - lDiff) > abs(Min_Val - lDiff))
000128  1a33              SUBS     r3,r6,r0
00012a  eba50200          SUB      r2,r5,r0
00012e  bf48              IT       MI
000130  425b              RSBMI    r3,r3,#0
000132  2a00              CMP      r2,#0
000134  bfb8              IT       LT
000136  4252              RSBLT    r2,r2,#0
000138  4293              CMP      r3,r2
00013a  dd03              BLE      |L11.324|
;;;1787   						{
;;;1788   							lDiffSum += lDiff;
00013c  4440              ADD      r0,r0,r8
00013e  fa0ff880          SXTH     r8,r0
000142  1c7f              ADDS     r7,r7,#1
                  |L11.324|
;;;1789   							lDiffSumCnt++;
;;;1790   						}
;;;1791   					}
000144  eb0e0e44          ADD      lr,lr,r4,LSL #1
000148  eb0c0c44          ADD      r12,r12,r4,LSL #1
00014c  1e49              SUBS     r1,r1,#1
00014e  d1e1              BNE      |L11.276|
                  |L11.336|
;;;1792   				}
;;;1793   			}
;;;1794   		}
;;;1795   		else
;;;1796   		{
;;;1797   			lDiffSumCnt = lDiffSumCnt2;
;;;1798   			lDiffSum = lDiffSum2;
;;;1799   		}
;;;1800   		
;;;1801   		if(lDiffSumCnt > 3)
000150  2f03              CMP      r7,#3
000152  d91d              BLS      |L11.400|
;;;1802   		{
;;;1803   			sLFOffsetRow[r] = lDiffSum / ((int16_t)lDiffSumCnt);
000154  b238              SXTH     r0,r7
000156  fb98f0f0          SDIV     r0,r8,r0
00015a  4a18              LDR      r2,|L11.444|
;;;1804   
;;;1805   #if USED_TOUCH_TUNING_PROCESS
;;;1806   #include "app_tuning_process.h"
;;;1807   			gtuning_ctrl_RawTune_Type.ulGIPNoiseRowIndex_CheckBuf[gtuning_ctrl_RawTune_Type.ulVSync_TouchSync_Timing_Index][r] = sLFOffsetRow[r];
;;;1808   #endif /* USED_TOUCH_TUNING_PROCESS */
;;;1809   			
;;;1810   			for(c = 0; c < COL_MAX; c++)
00015c  4916              LDR      r1,|L11.440|
00015e  f05f0350          MOVS.W   r3,#0x50
000162  f8220019          STRH     r0,[r2,r9,LSL #1]     ;1803
000166  9802              LDR      r0,[sp,#8]
000168  eb011040          ADD      r0,r1,r0,LSL #5
                  |L11.364|
;;;1811   			{
;;;1812   				rawdata = HAL_READ_RAW_IMAGE(r, c);
;;;1813   #if USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS
;;;1814   				if(rawdata > 0 && rawdata > sLFOffsetRow[r])
;;;1815   #else /* USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS */
;;;1816   				if(rawdata > sLFOffsetRow[r])
00016c  f9321019          LDRSH    r1,[r2,r9,LSL #1]
000170  f8b0c000          LDRH     r12,[r0,#0]
000174  4561              CMP      r1,r12
000176  da08              BGE      |L11.394|
;;;1817   #endif /* USED_ZERO_FINGER_RAWDATA_DONOT_PEN_PROCESS */
;;;1818   				{
;;;1819   					lDiff = (((int16_t)rawdata) - sLFOffsetRow[r]);
000178  fa1ffc8c          UXTH     r12,r12
00017c  ebac0101          SUB      r1,r12,r1
000180  b209              SXTH     r1,r1
;;;1820   					if(lDiff < 0)lDiff = 0;
000182  2900              CMP      r1,#0
000184  bfb8              IT       LT
000186  2100              MOVLT    r1,#0
;;;1821   					HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
000188  8001              STRH     r1,[r0,#0]
                  |L11.394|
00018a  1c80              ADDS     r0,r0,#2
00018c  1e5b              SUBS     r3,r3,#1
;;;1822   				}
00018e  d1ed              BNE      |L11.364|
                  |L11.400|
000190  f1090901          ADD      r9,r9,#1
000194  f1b90f2d          CMP      r9,#0x2d
000198  f4ffaf61          BCC      |L11.94|
;;;1823   			}
;;;1824   		}
;;;1825   	}
;;;1826   }
00019c  b007              ADD      sp,sp,#0x1c
00019e  e8bd8ff0          POP      {r4-r11,pc}
0001a2  e000              B        |L11.422|
0001a4  e001              B        |L11.426|
                  |L11.422|
0001a6  4606              MOV      r6,r0                 ;1762
0001a8  e77e              B        |L11.168|
                  |L11.426|
0001aa  4605              MOV      r5,r0                 ;1763
0001ac  e77e              B        |L11.172|
;;;1827   
                          ENDP

0001ae  0000              DCW      0x0000
                  |L11.432|
                          DCD      ||.data||
                  |L11.436|
                          DCD      g_pFingerBaseImage
                  |L11.440|
                          DCD      FullSharedBuff
                  |L11.444|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_linefilter_2||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_2 PROC
;;;1629    */
;;;1630   void alogorithm_linefilter_2(void)
000000  e92d0ff0          PUSH     {r4-r11}
;;;1631   {
;;;1632   	uint32_t r, c;
;;;1633   	uint32_t i, j;
;;;1634   	int16_t d;
;;;1635   	int16_t SortBufCol[COL_MAX], TempBuf;
;;;1636   	uint8_t sort_cnt, sort_range;
;;;1637   	int16_t sub_offset;
;;;1638   	uint16_t * pBaseImage;
;;;1639   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1640   
;;;1641   	//int max_compan_val = 11;
;;;1642   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44};
000004  a03f              ADR      r0,|L12.260|
000006  b0b4              SUB      sp,sp,#0xd0           ;1631
000008  e8b0100e          LDM      r0!,{r1-r3,r12}
00000c  ac28              ADD      r4,sp,#0xa0
00000e  e884100e          STM      r4,{r1-r3,r12}
000012  e8b0100e          LDM      r0!,{r1-r3,r12}
000016  ac2c              ADD      r4,sp,#0xb0
000018  e884100e          STM      r4,{r1-r3,r12}
00001c  c80f              LDM      r0,{r0-r3}
00001e  ac30              ADD      r4,sp,#0xc0
000020  e884000f          STM      r4,{r0-r3}
;;;1643   	uint8_t row_cnt = sizeof(do_row);
;;;1644   	uint8_t real_row;
;;;1645   	
;;;1646   	sort_cnt = 4;//(uint8_t)(((int)COL_MAX * 5)/100);
;;;1647   	sort_range = COL_MAX/4 + COL_MAX%4;
;;;1648   
;;;1649   #if USED_NOISE_HOPPING_FREQ
;;;1650   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000024  4843              LDR      r0,|L12.308|
000026  68c0              LDR      r0,[r0,#0xc]  ; ptAppInfo
000028  7c80              LDRB     r0,[r0,#0x12]
00002a  2801              CMP      r0,#1
;;;1651   	{
;;;1652   		pBaseImage = g_pFingerBaseImage;
00002c  bf07              ITTEE    EQ
00002e  4842              LDREQ    r0,|L12.312|
000030  f8d09000          LDREQ    r9,[r0,#0]  ; g_pFingerBaseImage
;;;1653   	}
;;;1654   	else
;;;1655   	{
;;;1656   		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR();
000034  4841              LDRNE    r0,|L12.316|
000036  f2454160          MOVNE    r1,#0x5460
00003a  bf18              IT       NE
00003c  eb000901          ADDNE    r9,r0,r1
;;;1657   	}
;;;1658   #else /* USED_NOISE_HOPPING_FREQ */
;;;1659   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1660   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1661   	
;;;1662   	for(r = 0; r < row_cnt; r++)
000040  2500              MOVS     r5,#0
000042  4f3e              LDR      r7,|L12.316|
;;;1663   	{
;;;1664   		real_row = do_row[r];
;;;1665   		for( c = 0; c < sort_range; c++ )
;;;1666   		{
;;;1667   			SortBufCol[c] = (int16_t)HAL_READ_RAW_IMAGE(real_row, (c*4)) - (int16_t)pBaseImage[real_row*COL_MAX + c*4];
;;;1668   		}
;;;1669   
;;;1670   		for( i=0; i<=(sort_cnt); i++ )
;;;1671   		{
;;;1672   			for( j=(i+1); j<sort_range; j++ )
;;;1673   			{
;;;1674   				if( SortBufCol[i] > SortBufCol[j] )
;;;1675   				{
;;;1676   					TempBuf = SortBufCol[i];
;;;1677   					SortBufCol[i] = SortBufCol[j];
;;;1678   					SortBufCol[j] = TempBuf;
;;;1679   				}
;;;1680   			}
;;;1681   		}
;;;1682   		TempBuf = SortBufCol[sort_cnt];
;;;1683   		
;;;1684   		sLFOffsetRow[real_row] = TempBuf;
000044  f8dfb0f8          LDR      r11,|L12.320|
000048  466a              MOV      r2,sp                 ;1635
00004a  ae28              ADD      r6,sp,#0xa0           ;1642
                  |L12.76|
00004c  f04f0c0a          MOV      r12,#0xa              ;1665
000050  f8168005          LDRB     r8,[r6,r5]            ;1664
000054  eb080088          ADD      r0,r8,r8,LSL #2       ;1665
000058  eb091140          ADD      r1,r9,r0,LSL #5       ;1665
00005c  f1a10308          SUB      r3,r1,#8              ;1665
000060  1e91              SUBS     r1,r2,#2              ;1665
000062  eb071040          ADD      r0,r7,r0,LSL #5       ;1665
000066  3808              SUBS     r0,r0,#8              ;1665
                  |L12.104|
000068  f8b3a008          LDRH     r10,[r3,#8]           ;1667
00006c  8904              LDRH     r4,[r0,#8]            ;1667
00006e  f1bc0c01          SUBS     r12,r12,#1            ;1667
000072  eba4040a          SUB      r4,r4,r10             ;1667
000076  804c              STRH     r4,[r1,#2]            ;1667
000078  f8304f10          LDRH     r4,[r0,#0x10]!        ;1667
00007c  f833af10          LDRH     r10,[r3,#0x10]!       ;1667
000080  eba4040a          SUB      r4,r4,r10             ;1667
000084  f8214f04          STRH     r4,[r1,#4]!           ;1667
000088  d1ee              BNE      |L12.104|
00008a  2000              MOVS     r0,#0                 ;1670
00008c  e002              B        |L12.148|
                  |L12.142|
00008e  1c41              ADDS     r1,r0,#1              ;1672
000090  2914              CMP      r1,#0x14              ;1672
000092  d212              BCS      |L12.186|
                  |L12.148|
000094  eb020140          ADD      r1,r2,r0,LSL #1       ;1672
000098  f1c00c13          RSB      r12,r0,#0x13          ;1672
00009c  f1110102          ADDS.W   r1,r1,#2              ;1672
                  |L12.160|
0000a0  f9323010          LDRSH    r3,[r2,r0,LSL #1]     ;1674
0000a4  f9b14000          LDRSH    r4,[r1,#0]            ;1674
0000a8  42a3              CMP      r3,r4                 ;1674
0000aa  bfc4              ITT      GT                    ;1677
0000ac  f8224010          STRHGT   r4,[r2,r0,LSL #1]     ;1677
0000b0  800b              STRHGT   r3,[r1,#0]            ;1678
0000b2  1c89              ADDS     r1,r1,#2              ;1678
0000b4  f1bc0c01          SUBS     r12,r12,#1            ;1678
0000b8  d1f2              BNE      |L12.160|
                  |L12.186|
0000ba  1c40              ADDS     r0,r0,#1              ;1674
0000bc  2805              CMP      r0,#5                 ;1679
0000be  d3e6              BCC      |L12.142|
0000c0  f8bd0008          LDRH     r0,[sp,#8]            ;1682
0000c4  1c6d              ADDS     r5,r5,#1
0000c6  f82b0018          STRH     r0,[r11,r8,LSL #1]
0000ca  2d2d              CMP      r5,#0x2d
0000cc  d3be              BCC      |L12.76|
;;;1685   	}
;;;1686   
;;;1687   	for(r = 0; r < row_cnt; r++)
0000ce  2200              MOVS     r2,#0
                  |L12.208|
;;;1688   	{
;;;1689   		real_row = do_row[r];
;;;1690   		for( c=0; c<COL_MAX; c++ )
0000d0  2350              MOVS     r3,#0x50
0000d2  5cb0              LDRB     r0,[r6,r2]            ;1689
;;;1691   		{
;;;1692   			d = (int16_t)HAL_READ_RAW_IMAGE(real_row, c);
;;;1693   			sub_offset = sLFOffsetRow[real_row];
0000d4  f93bc010          LDRSH    r12,[r11,r0,LSL #1]
0000d8  eb000080          ADD      r0,r0,r0,LSL #2       ;1690
0000dc  eb071040          ADD      r0,r7,r0,LSL #5       ;1690
                  |L12.224|
0000e0  8801              LDRH     r1,[r0,#0]            ;1692
;;;1694   			d = d - sub_offset;
0000e2  eba1010c          SUB      r1,r1,r12
0000e6  b209              SXTH     r1,r1
;;;1695   			if(d < 0)
0000e8  2900              CMP      r1,#0
;;;1696   			{
;;;1697   				d = 0;
0000ea  bfb8              IT       LT
0000ec  2100              MOVLT    r1,#0
;;;1698   			}
;;;1699   			HAL_WRITE_RAW_IMAGE(real_row, c, (uint16_t)d);
0000ee  f8201b02          STRH     r1,[r0],#2
0000f2  1e5b              SUBS     r3,r3,#1
0000f4  d1f4              BNE      |L12.224|
0000f6  1c52              ADDS     r2,r2,#1              ;1695
0000f8  2a2d              CMP      r2,#0x2d
0000fa  d3e9              BCC      |L12.208|
;;;1700   		}
;;;1701   	}
;;;1702   }
0000fc  b034              ADD      sp,sp,#0xd0
0000fe  e8bd0ff0          POP      {r4-r11}
000102  4770              BX       lr
;;;1703   
                          ENDP

                  |L12.260|
000104  00                DCB      0
000105  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,17,18,19,20,21,22,23
000109  05060708
00010d  090a0b0c
000111  0d0e0f10
000115  11121314
000119  151617  
00011c  18191a1b          DCB      24,25,26,27,28,29,30,31," !""#$$%&'()*+,",0
000120  1c1d1e1f
000124  20212223
000128  24252627
00012c  28292a2b
000130  2c00    
000132  00                DCB      0
000133  00                DCB      0
                  |L12.308|
                          DCD      ||.data||
                  |L12.312|
                          DCD      g_pFingerBaseImage
                  |L12.316|
                          DCD      FullSharedBuff
                  |L12.320|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_linefilter_S3||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_S3 PROC
;;;1936   #if USED_MNT_S3_MODE_FUNCTION
;;;1937   void alogorithm_linefilter_S3(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1938   {
;;;1939   	uint32_t r, c;
;;;1940   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1941   #define IDLE_LINE_FILTER_UPPER_LIMIT		((45)<<ptModuleModeConf->ucIdleOvrShift) //((16)<<ptModuleModeConf->ucOvrShift)
;;;1942   #define IDLE_LINE_FILTER_LOWER_LIMIT		(-((45)<<ptModuleModeConf->ucIdleOvrShift)) //(-((16)<<ptModuleModeConf->ucOvrShift))
;;;1943   #elif (USED_MODULE_DEF == MODULE_DEF_B_1)
;;;1944   #define IDLE_LINE_FILTER_UPPER_LIMIT		((50)<<ptModuleModeConf->ucIdleOvrShift) //((16)<<ptModuleModeConf->ucOvrShift)
;;;1945   #define IDLE_LINE_FILTER_LOWER_LIMIT		(-((50)<<ptModuleModeConf->ucIdleOvrShift)) //(-((16)<<ptModuleModeConf->ucOvrShift))
;;;1946   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1947   	int16_t lDiff;
;;;1948   	int16_t lDiffSum = 0;
;;;1949   	uint32_t lDiffSumCnt = 0;
;;;1950   	int32_t lLowTHD, lUpperTHD;
;;;1951   	uint16_t * pIdleBaseImage;
;;;1952   
;;;1953   	lUpperTHD = IDLE_LINE_FILTER_UPPER_LIMIT;
000004  4827              LDR      r0,|L13.164|
000006  6800              LDR      r0,[r0,#0]  ; ptModuleModeConf
000008  7841              LDRB     r1,[r0,#1]
00000a  2032              MOVS     r0,#0x32
00000c  fa00f401          LSL      r4,r0,r1
;;;1954   	lLowTHD = IDLE_LINE_FILTER_LOWER_LIMIT;
000010  4266              RSBS     r6,r4,#0
;;;1955   	pIdleBaseImage = HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_NI);
000012  f7fffffe          BL       HAL_GetSensingMode
000016  2101              MOVS     r1,#1
000018  f7fffffe          BL       HAL_GetBaseImagePointer
;;;1956   
;;;1957   	for(r=0; r<NI_ROW_MAX; r++)
;;;1958   	{
;;;1959   		lDiffSumCnt = 0;
;;;1960   		lDiffSum = 0;
;;;1961   
;;;1962   		for(c = 0; c < COL_MAX; c+=2)
00001c  f8dfb088          LDR      r11,|L13.168|
;;;1963   		{
;;;1964   			lDiff = (int16_t)HAL_NI_READ_RAW_IMAGE(r, c) - (int16_t)(*(pIdleBaseImage));
;;;1965   			pIdleBaseImage += 2;
;;;1966   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;1967   			{
;;;1968   				lDiffSum += lDiff;
;;;1969   				lDiffSumCnt++;
;;;1970   			}
;;;1971   		}
;;;1972   
;;;1973   		if(lDiffSumCnt > 3)
;;;1974   		{
;;;1975   			sLFOffsetRow[r] = lDiffSum / ((int16_t)lDiffSumCnt);
000020  f8dfa088          LDR      r10,|L13.172|
000024  2300              MOVS     r3,#0                 ;1957
                  |L13.38|
000026  eb030183          ADD      r1,r3,r3,LSL #2       ;1962
00002a  2700              MOVS     r7,#0                 ;1959
00002c  eb0b1141          ADD      r1,r11,r1,LSL #5      ;1962
000030  46b8              MOV      r8,r7                 ;1960
000032  4602              MOV      r2,r0                 ;1962
000034  468c              MOV      r12,r1                ;1962
000036  f04f0928          MOV      r9,#0x28              ;1962
00003a  bf00              NOP                            ;1964
                  |L13.60|
00003c  f8bc5000          LDRH     r5,[r12,#0]           ;1964
000040  f8b2e000          LDRH     lr,[r2,#0]            ;1964
000044  eba5050e          SUB      r5,r5,lr              ;1964
000048  b22d              SXTH     r5,r5                 ;1964
00004a  42a5              CMP      r5,r4                 ;1966
00004c  bfb8              IT       LT                    ;1966
00004e  42ae              CMPLT    r6,r5                 ;1966
000050  da03              BGE      |L13.90|
000052  4445              ADD      r5,r5,r8              ;1968
000054  fa0ff885          SXTH     r8,r5                 ;1968
000058  1c7f              ADDS     r7,r7,#1              ;1968
                  |L13.90|
00005a  1d12              ADDS     r2,r2,#4              ;1968
00005c  f1b90901          SUBS     r9,r9,#1              ;1968
000060  f10c0c04          ADD      r12,r12,#4            ;1968
000064  d1ea              BNE      |L13.60|
000066  30a0              ADDS     r0,r0,#0xa0           ;1970
000068  2f03              CMP      r7,#3                 ;1973
00006a  d916              BLS      |L13.154|
00006c  b23a              SXTH     r2,r7
00006e  fb98f2f2          SDIV     r2,r8,r2
000072  f82a2013          STRH     r2,[r10,r3,LSL #1]
;;;1976   
;;;1977   			for(c = 0; c < COL_MAX; c++)
000076  2250              MOVS     r2,#0x50
                  |L13.120|
;;;1978   			{
;;;1979   				lDiff = (((int16_t)HAL_NI_READ_RAW_IMAGE(r, c)) - sLFOffsetRow[r]);
000078  f8b1c000          LDRH     r12,[r1,#0]
00007c  f83a5013          LDRH     r5,[r10,r3,LSL #1]
000080  ebac0c05          SUB      r12,r12,r5
000084  fa0ffc8c          SXTH     r12,r12
;;;1980   				if(lDiff<0)lDiff=0;
000088  f1bc0f00          CMP      r12,#0
00008c  bfb8              IT       LT
00008e  f04f0c00          MOVLT    r12,#0
;;;1981   				HAL_NI_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
000092  f821cb02          STRH     r12,[r1],#2
000096  1e52              SUBS     r2,r2,#1
000098  d1ee              BNE      |L13.120|
                  |L13.154|
00009a  1c5b              ADDS     r3,r3,#1              ;1980
00009c  2b0a              CMP      r3,#0xa
00009e  d3c2              BCC      |L13.38|
;;;1982   			}
;;;1983   		}
;;;1984   	}
;;;1985   }
0000a0  e8bd9ff0          POP      {r4-r12,pc}
;;;1986   #endif /* USED_MNT_S3_MODE_FUNCTION */
                          ENDP

                  |L13.164|
                          DCD      ||.data||
                  |L13.168|
                          DCD      FullSharedBuff
                  |L13.172|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_simple PROC
;;;1827   
;;;1828   void alogorithm_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1829   {
;;;1830   	uint32_t r, c, pos;
;;;1831   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  492f              LDR      r1,|L14.196|
000006  6848              LDR      r0,[r1,#4]  ; thisModeConf
000008  680a              LDR      r2,[r1,#0]  ; ptModuleModeConf
00000a  f8b03049          LDRH     r3,[r0,#0x49]
00000e  7812              LDRB     r2,[r2,#0]
;;;1832   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1833   	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
000010  f890c04d          LDRB     r12,[r0,#0x4d]
000014  4093              LSLS     r3,r3,r2              ;1831
000016  b21c              SXTH     r4,r3                 ;1831
000018  f8b0304b          LDRH     r3,[r0,#0x4b]         ;1832
;;;1834   	
;;;1835   	int16_t lDiff;
;;;1836   	int16_t lDiffSum = 0;//, lDiffSum2 = 0;
;;;1837   	uint32_t lDiffSumCnt = 0;//, lDiffSumCnt2 = 0;
;;;1838   	int32_t lLowTHD, lUpperTHD;
;;;1839   	uint16_t * pBaseImage;
;;;1840   //	uint16_t rawdata;
;;;1841   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1842   
;;;1843   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;1844   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;1845   
;;;1846   #if USED_NOISE_HOPPING_FREQ
;;;1847   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
00001c  68c8              LDR      r0,[r1,#0xc]  ; ptAppInfo
00001e  fa03f202          LSL      r2,r3,r2              ;1832
000022  fa0ff882          SXTH     r8,r2                 ;1832
000026  7c80              LDRB     r0,[r0,#0x12]
000028  2801              CMP      r0,#1
;;;1848   	{
;;;1849   		pBaseImage = g_pFingerBaseImage;
00002a  bf07              ITTEE    EQ
00002c  4826              LDREQ    r0,|L14.200|
00002e  6800              LDREQ    r0,[r0,#0]  ; g_pFingerBaseImage
;;;1850   	}
;;;1851   	else
;;;1852   	{
;;;1853   		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
000030  4826              LDRNE    r0,|L14.204|
000032  f2454160          MOVNE    r1,#0x5460
000036  bf18              IT       NE
000038  4408              ADDNE    r0,r1
;;;1854   	}
;;;1855   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;1856   #else /* USED_NOISE_HOPPING_FREQ */
;;;1857   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1858   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1859   
;;;1860   	pos = 0;
00003a  f04f0900          MOV      r9,#0
;;;1861   	for(r=0; r< ROW_MAX; r++, pos += COL_MAX)
00003e  4649              MOV      r1,r9
;;;1862   	{
;;;1863   		lDiffSumCnt = 0;
;;;1864   		lDiffSum = 0;
;;;1865   
;;;1866   		for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
000040  f10c0b4f          ADD      r11,r12,#0x4f
000044  9000              STR      r0,[sp,#0]
                  |L14.70|
000046  fbbbf3fc          UDIV     r3,r11,r12
00004a  2600              MOVS     r6,#0                 ;1863
00004c  46b2              MOV      r10,r6                ;1864
00004e  2b00              CMP      r3,#0
000050  d031              BEQ      |L14.182|
000052  9800              LDR      r0,[sp,#0]
000054  eb010281          ADD      r2,r1,r1,LSL #2
000058  eb000549          ADD      r5,r0,r9,LSL #1
00005c  481b              LDR      r0,|L14.204|
00005e  eb001042          ADD      r0,r0,r2,LSL #5
000062  4602              MOV      r2,r0
                  |L14.100|
;;;1867   		{
;;;1868   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos+c]);
000064  f8b5e000          LDRH     lr,[r5,#0]
000068  8817              LDRH     r7,[r2,#0]
00006a  eba7070e          SUB      r7,r7,lr
00006e  b23f              SXTH     r7,r7
;;;1869   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
000070  42a7              CMP      r7,r4
000072  bfb8              IT       LT
000074  45b8              CMPLT    r8,r7
000076  da03              BGE      |L14.128|
;;;1870   			{
;;;1871   				lDiffSum += lDiff;
000078  4457              ADD      r7,r7,r10
00007a  fa0ffa87          SXTH     r10,r7
00007e  1c76              ADDS     r6,r6,#1
                  |L14.128|
;;;1872   				lDiffSumCnt++;
;;;1873   			}
000080  eb05054c          ADD      r5,r5,r12,LSL #1
000084  eb02024c          ADD      r2,r2,r12,LSL #1
000088  1e5b              SUBS     r3,r3,#1
00008a  d1eb              BNE      |L14.100|
;;;1874   		}
;;;1875   
;;;1876   		if(lDiffSumCnt > 3)
00008c  2e03              CMP      r6,#3
00008e  d912              BLS      |L14.182|
;;;1877   		{
;;;1878   			sLFOffsetRow[r] = lDiffSum / ((int16_t)lDiffSumCnt);
000090  b232              SXTH     r2,r6
000092  fb9af2f2          SDIV     r2,r10,r2
000096  4d0e              LDR      r5,|L14.208|
;;;1879   
;;;1880   			for(c = 0; c < COL_MAX; c++)
000098  2350              MOVS     r3,#0x50
00009a  f8252011          STRH     r2,[r5,r1,LSL #1]     ;1878
                  |L14.158|
;;;1881   			{
;;;1882   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetRow[r]);
00009e  8806              LDRH     r6,[r0,#0]
0000a0  f8352011          LDRH     r2,[r5,r1,LSL #1]
0000a4  1ab2              SUBS     r2,r6,r2
0000a6  b212              SXTH     r2,r2
;;;1883   				if(lDiff<0)lDiff=0;
0000a8  2a00              CMP      r2,#0
0000aa  bfb8              IT       LT
0000ac  2200              MOVLT    r2,#0
;;;1884   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000ae  f8202b02          STRH     r2,[r0],#2
0000b2  1e5b              SUBS     r3,r3,#1
0000b4  d1f3              BNE      |L14.158|
                  |L14.182|
0000b6  1c49              ADDS     r1,r1,#1              ;1883
0000b8  f1090950          ADD      r9,r9,#0x50           ;1883
;;;1885   			}
;;;1886   		}
;;;1887   	}
0000bc  292d              CMP      r1,#0x2d
0000be  d3c2              BCC      |L14.70|
;;;1888   }
0000c0  e8bd8ff8          POP      {r3-r11,pc}
;;;1889   
                          ENDP

                  |L14.196|
                          DCD      ||.data||
                  |L14.200|
                          DCD      g_pFingerBaseImage
                  |L14.204|
                          DCD      FullSharedBuff
                  |L14.208|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_vertical_linefilter||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter PROC
;;;1988   int16_t sLFOffsetCol[COL_MAX];
;;;1989   void alogorithm_vertical_linefilter(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1990   {
;;;1991   	uint32_t r, c;
;;;1992   	int16_t LINE_FILTER_UPPER_LIMIT			= ((15)<<ptModuleModeConf->ucOvrShift); //thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  482d              LDR      r0,|L15.188|
000006  6801              LDR      r1,[r0,#0]  ; ptModuleModeConf
;;;1993   	int16_t LINE_FILTER_LOWER_LIMIT			= (-((15)<<ptModuleModeConf->ucOvrShift)); //thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1994   	uint8_t LINE_FILTER_ROW_OFFSET			= 3;//(thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;1995   
;;;1996   	int16_t lDiff;
;;;1997   	int16_t lDiffSum = 0;
;;;1998   	uint32_t lDiffSumCnt = 0;
;;;1999   	int32_t lLowTHD, lUpperTHD;
;;;2000   	uint16_t * pBaseImage;
;;;2001   
;;;2002   	lUpperTHD = (LINE_FILTER_UPPER_LIMIT>>1);
;;;2003   	lLowTHD = (LINE_FILTER_LOWER_LIMIT>>1);
;;;2004   
;;;2005   #if USED_NOISE_HOPPING_FREQ
;;;2006   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000008  68c0              LDR      r0,[r0,#0xc]  ; ptAppInfo
00000a  780a              LDRB     r2,[r1,#0]            ;1992
00000c  210f              MOVS     r1,#0xf               ;1992
00000e  fa01f202          LSL      r2,r1,r2              ;1992
000012  b211              SXTH     r1,r2                 ;1992
000014  4252              RSBS     r2,r2,#0              ;1993
000016  7c80              LDRB     r0,[r0,#0x12]
000018  b212              SXTH     r2,r2                 ;1993
00001a  104f              ASRS     r7,r1,#1              ;2002
00001c  ea4f0862          ASR      r8,r2,#1              ;2003
000020  2801              CMP      r0,#1
;;;2007   	{
;;;2008   		pBaseImage = g_pFingerBaseImage;
000022  bf07              ITTEE    EQ
000024  4826              LDREQ    r0,|L15.192|
000026  f8d09000          LDREQ    r9,[r0,#0]  ; g_pFingerBaseImage
;;;2009   	}
;;;2010   	else
;;;2011   	{
;;;2012   		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
00002a  4826              LDRNE    r0,|L15.196|
00002c  f2454160          MOVNE    r1,#0x5460
000030  bf18              IT       NE
000032  eb000901          ADDNE    r9,r0,r1
;;;2013   	}
;;;2014   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2015   #else /* USED_NOISE_HOPPING_FREQ */
;;;2016   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2017   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2018   
;;;2019   	for(c=0; c<COL_MAX; c++)
000036  2100              MOVS     r1,#0
000038  f8dfb088          LDR      r11,|L15.196|
;;;2020   	{
;;;2021   		lDiffSumCnt = 0;
;;;2022   		lDiffSum = 0;
;;;2023   		for(r = 0; r < ROW_MAX; r+=LINE_FILTER_ROW_OFFSET)
;;;2024   		{
;;;2025   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[(r*COL_MAX)+c]);
;;;2026   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;2027   			{
;;;2028   				lDiffSum += lDiff;
;;;2029   				lDiffSumCnt++;
;;;2030   			}
;;;2031   			else
;;;2032   			{
;;;2033   				if(lDiff > lUpperTHD)
;;;2034   				{
;;;2035   					lDiff += lUpperTHD;
;;;2036   					lDiffSumCnt++;
;;;2037   				}
;;;2038   				else if(lDiff < lLowTHD)
;;;2039   				{
;;;2040   					lDiff += lLowTHD;
;;;2041   					lDiffSumCnt++;
;;;2042   				}
;;;2043   			}
;;;2044   		}
;;;2045   
;;;2046   		if(lDiffSumCnt > 3)
;;;2047   		{
;;;2048   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
00003c  f8dfa088          LDR      r10,|L15.200|
                  |L15.64|
000040  2000              MOVS     r0,#0                 ;2021
000042  eb0b0241          ADD      r2,r11,r1,LSL #1      ;2023
000046  4606              MOV      r6,r0                 ;2022
000048  240f              MOVS     r4,#0xf               ;2023
00004a  eb090541          ADD      r5,r9,r1,LSL #1       ;2023
00004e  4613              MOV      r3,r2                 ;2023
                  |L15.80|
000050  f8b5e000          LDRH     lr,[r5,#0]            ;2025
000054  f8b3c000          LDRH     r12,[r3,#0]           ;2025
000058  ebac0c0e          SUB      r12,r12,lr            ;2025
00005c  fa0ffc8c          SXTH     r12,r12               ;2025
000060  45bc              CMP      r12,r7                ;2026
000062  bfb8              IT       LT                    ;2026
000064  45e0              CMPLT    r8,r12                ;2026
000066  da04              BGE      |L15.114|
000068  44b4              ADD      r12,r12,r6            ;2028
00006a  fa0ff68c          SXTH     r6,r12                ;2028
00006e  1c40              ADDS     r0,r0,#1              ;2028
000070  e004              B        |L15.124|
                  |L15.114|
000072  4567              CMP      r7,r12                ;2033
000074  db01              BLT      |L15.122|
000076  45e0              CMP      r8,r12                ;2038
000078  dd00              BLE      |L15.124|
                  |L15.122|
00007a  1c40              ADDS     r0,r0,#1              ;2038
                  |L15.124|
00007c  f50373f0          ADD      r3,r3,#0x1e0          ;2038
000080  1e64              SUBS     r4,r4,#1              ;2038
000082  f50575f0          ADD      r5,r5,#0x1e0          ;2038
000086  d1e3              BNE      |L15.80|
000088  2803              CMP      r0,#3                 ;2046
00008a  d912              BLS      |L15.178|
00008c  b200              SXTH     r0,r0
00008e  fb96f0f0          SDIV     r0,r6,r0
000092  f82a0011          STRH     r0,[r10,r1,LSL #1]
;;;2049   
;;;2050   			for(r = 0; r < ROW_MAX; r++)
000096  232d              MOVS     r3,#0x2d
                  |L15.152|
;;;2051   			{
;;;2052   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
000098  8810              LDRH     r0,[r2,#0]
00009a  f83ac011          LDRH     r12,[r10,r1,LSL #1]
00009e  eba0000c          SUB      r0,r0,r12
0000a2  b200              SXTH     r0,r0
;;;2053   				if(lDiff<0)
0000a4  2800              CMP      r0,#0
;;;2054   					lDiff=0;
0000a6  bfb8              IT       LT
0000a8  2000              MOVLT    r0,#0
;;;2055   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000aa  f8220ba0          STRH     r0,[r2],#0xa0
0000ae  1e5b              SUBS     r3,r3,#1
0000b0  d1f2              BNE      |L15.152|
                  |L15.178|
0000b2  1c49              ADDS     r1,r1,#1              ;2053
0000b4  2950              CMP      r1,#0x50
0000b6  d3c3              BCC      |L15.64|
;;;2056   			}
;;;2057   		}
;;;2058   	}
;;;2059   }
0000b8  e8bd8ff0          POP      {r4-r11,pc}
;;;2060   
                          ENDP

                  |L15.188|
                          DCD      ||.data||
                  |L15.192|
                          DCD      g_pFingerBaseImage
                  |L15.196|
                          DCD      FullSharedBuff
                  |L15.200|
                          DCD      ||.bss||+0x33a

                          AREA ||i.alogorithm_vertical_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter_simple PROC
;;;2060   
;;;2061   void alogorithm_vertical_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2062   {
;;;2063   	uint32_t r, c, pos;
;;;2064   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  4e2c              LDR      r6,|L16.184|
000006  b0a9              SUB      sp,sp,#0xa4           ;2062
000008  6870              LDR      r0,[r6,#4]  ; thisModeConf
00000a  6831              LDR      r1,[r6,#0]  ; ptModuleModeConf
00000c  f8b02049          LDRH     r2,[r0,#0x49]
000010  7809              LDRB     r1,[r1,#0]
;;;2065   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
000012  f8b0004b          LDRH     r0,[r0,#0x4b]
000016  408a              LSLS     r2,r2,r1              ;2064
000018  4088              LSLS     r0,r0,r1
00001a  b205              SXTH     r5,r0
00001c  b214              SXTH     r4,r2                 ;2064
;;;2066   //	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;2067   	
;;;2068   	int16_t sLFOffsetCol[COL_MAX] = {0};
00001e  21a0              MOVS     r1,#0xa0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memclr4
;;;2069   	int16_t lDiff;
;;;2070   	int16_t lDiffSum = 0;
;;;2071   	uint32_t lDiffSumCnt = 0;
;;;2072   	int32_t lLowTHD, lUpperTHD;
;;;2073   	uint16_t * pBaseImage;
;;;2074   //	uint16_t rawdata;
;;;2075   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;2076   
;;;2077   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;2078   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;2079   
;;;2080   #if USED_NOISE_HOPPING_FREQ
;;;2081   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000026  68f0              LDR      r0,[r6,#0xc]  ; ptAppInfo
000028  7c80              LDRB     r0,[r0,#0x12]
00002a  2801              CMP      r0,#1
;;;2082   	{
;;;2083   		pBaseImage = g_pFingerBaseImage;
00002c  bf07              ITTEE    EQ
00002e  4823              LDREQ    r0,|L16.188|
000030  f8d09000          LDREQ    r9,[r0,#0]  ; g_pFingerBaseImage
;;;2084   	}
;;;2085   	else
;;;2086   	{
;;;2087   		pBaseImage = (uint16_t *)HAL_GET_HOPP1_BASELINE_IMAGE_PTR() ;
000034  4822              LDRNE    r0,|L16.192|
000036  f2454160          MOVNE    r1,#0x5460
00003a  bf18              IT       NE
00003c  eb000901          ADDNE    r9,r0,r1
;;;2088   	}
;;;2089   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2090   #else /* USED_NOISE_HOPPING_FREQ */
;;;2091   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2092   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2093   
;;;2094   	for(c=0; c<COL_MAX; c++)
000040  2000              MOVS     r0,#0
000042  f8dfb07c          LDR      r11,|L16.192|
000046  46ea              MOV      r10,sp                ;2068
                  |L16.72|
;;;2095   	{
;;;2096   		lDiffSumCnt = 0;
000048  2300              MOVS     r3,#0
;;;2097   		lDiffSum = 0;
;;;2098   		
;;;2099   		pos = c;
;;;2100   		for(r = 0; r < ROW_MAX; r+=2,pos += (COL_MAX<<1))
00004a  eb0b0140          ADD      r1,r11,r0,LSL #1
00004e  461e              MOV      r6,r3                 ;2097
000050  eb090c40          ADD      r12,r9,r0,LSL #1
000054  460a              MOV      r2,r1
000056  f04f0817          MOV      r8,#0x17
                  |L16.90|
;;;2101   		{
;;;2102   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos]);
00005a  8817              LDRH     r7,[r2,#0]
00005c  f8bce000          LDRH     lr,[r12,#0]
000060  eba7070e          SUB      r7,r7,lr
000064  b23f              SXTH     r7,r7
;;;2103   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
000066  42a7              CMP      r7,r4
000068  bfb8              IT       LT
00006a  42bd              CMPLT    r5,r7
00006c  da02              BGE      |L16.116|
;;;2104   			{
;;;2105   				lDiffSum += lDiff;
00006e  443e              ADD      r6,r6,r7
000070  b236              SXTH     r6,r6
000072  1c5b              ADDS     r3,r3,#1
                  |L16.116|
000074  f50272a0          ADD      r2,r2,#0x140
000078  f1b80801          SUBS     r8,r8,#1
00007c  f50c7ca0          ADD      r12,r12,#0x140
;;;2106   				lDiffSumCnt++;
;;;2107   			}
000080  d1eb              BNE      |L16.90|
;;;2108   		}
;;;2109   
;;;2110   		if(lDiffSumCnt > 3)
000082  2b03              CMP      r3,#3
000084  d912              BLS      |L16.172|
;;;2111   		{
;;;2112   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
000086  b21a              SXTH     r2,r3
000088  fb96f2f2          SDIV     r2,r6,r2
00008c  f82a2010          STRH     r2,[r10,r0,LSL #1]
;;;2113   
;;;2114   			for(r = 0; r < ROW_MAX; r++)
000090  232d              MOVS     r3,#0x2d
                  |L16.146|
;;;2115   			{
;;;2116   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
000092  880a              LDRH     r2,[r1,#0]
000094  f83ac010          LDRH     r12,[r10,r0,LSL #1]
000098  eba2020c          SUB      r2,r2,r12
00009c  b212              SXTH     r2,r2
;;;2117   				if(lDiff<0)lDiff=0;
00009e  2a00              CMP      r2,#0
0000a0  bfb8              IT       LT
0000a2  2200              MOVLT    r2,#0
;;;2118   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000a4  f8212ba0          STRH     r2,[r1],#0xa0
0000a8  1e5b              SUBS     r3,r3,#1
0000aa  d1f2              BNE      |L16.146|
                  |L16.172|
0000ac  1c40              ADDS     r0,r0,#1              ;2117
0000ae  2850              CMP      r0,#0x50
0000b0  d3ca              BCC      |L16.72|
;;;2119   			}
;;;2120   		}
;;;2121   	}
;;;2122   }
0000b2  b029              ADD      sp,sp,#0xa4
0000b4  e8bd8ff0          POP      {r4-r11,pc}
;;;2123   
                          ENDP

                  |L16.184|
                          DCD      ||.data||
                  |L16.188|
                          DCD      g_pFingerBaseImage
                  |L16.192|
                          DCD      FullSharedBuff

                          AREA ||i.heon_DeltaCopy||, CODE, READONLY, ALIGN=2

                  heon_DeltaCopy PROC
;;;2318   
;;;2319   void heon_DeltaCopy()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2320   {
;;;2321   	int _c = 0;
;;;2322   	for(int r = 0; r < ROW_MAX; r++){
;;;2323   		for(int c = COL_MAX >> 1; c < COL_MAX; c++){
000004  4d0a              LDR      r5,|L17.48|
000006  2400              MOVS     r4,#0                 ;2322
000008  f64c167e          MOV      r6,#0xc97e
00000c  f64c17ce          MOV      r7,#0xc9ce
                  |L17.16|
000010  eb0400c4          ADD      r0,r4,r4,LSL #3
000014  eb001044          ADD      r0,r0,r4,LSL #5
000018  eb050080          ADD      r0,r5,r0,LSL #2
00001c  1981              ADDS     r1,r0,r6
00001e  4438              ADD      r0,r0,r7
000020  2250              MOVS     r2,#0x50
000022  f7fffffe          BL       __aeabi_memcpy
000026  1c64              ADDS     r4,r4,#1
000028  2c2d              CMP      r4,#0x2d
00002a  dbf1              BLT      |L17.16|
;;;2324   			_c = c - (COL_MAX >> 1);
;;;2325   			HAL_WRITE_DELTA_IMAGE(r,c,HAL_READ_DELTA_IMAGE(r,_c));
;;;2326   		}
;;;2327   	}
;;;2328   }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;2329   
                          ENDP

                  |L17.48|
                          DCD      FullSharedBuff

                          AREA ||i.public_func_PalmTouch_handler||, CODE, READONLY, ALIGN=2

                  public_func_PalmTouch_handler PROC
;;;1366   #define PALM_KEEP_FRM		(10)
;;;1367   void public_func_PalmTouch_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1368   {
000004  b099              SUB      sp,sp,#0x64
;;;1369   	static uint8_t ucFrameCnt[POSBUF_]  = {0,};
;;;1370   //	static uint16_t usPrevMaxCellNum[POSBUF_]  = {0,}; // NOTE : Not used!!
;;;1371   	static uint8_t ucPalmContCnt[POSBUF_]  = {0,};
;;;1372   	static uint8_t ucParNum[POSBUF_]  = {0,};
;;;1373   	static tXY_t ucPalmPos[POSBUF_] ;
;;;1374   	static tRect_t ucPalmRect[POSBUF_] ;
;;;1375   	uint8_t ucParCnt[POSBUF_] = {0,};
000006  2000              MOVS     r0,#0
;;;1376   	uint8_t ucParBF[POSBUF_] = {0,};
000008  900f              STR      r0,[sp,#0x3c]
00000a  900b              STR      r0,[sp,#0x2c]
;;;1377   	bool_t bIsPalm[POSBUF_] = {0,};
;;;1378   	uint8_t ucPalmExpect[POSBUF_] = {0,};
;;;1379   	int cl;
;;;1380   	
;;;1381   //    if(!sptPalmTouchConf->bEnable) return;
;;;1382   
;;;1383   //	tMemConf_t       * ptMemConf = (tMemConf_t *)param1;
;;;1384   //	tAlgorithmInfo_t * ptInfo     = (tAlgorithmInfo_t *)param2;
;;;1385   
;;;1386   //	sptPalmTouchConf->bPalmExpect = NO;
;;;1387   
;;;1388   	thisInfo->bIsPalm = NO;
00000c  f8dfa418          LDR      r10,|L18.1064|
000010  900d              STR      r0,[sp,#0x34]         ;1375
000012  900e              STR      r0,[sp,#0x38]         ;1375
000014  900a              STR      r0,[sp,#0x28]         ;1376
000016  900c              STR      r0,[sp,#0x30]         ;1377
000018  9006              STR      r0,[sp,#0x18]         ;1378
00001a  9004              STR      r0,[sp,#0x10]         ;1377
00001c  9005              STR      r0,[sp,#0x14]         ;1377
00001e  9010              STR      r0,[sp,#0x40]         ;1378
000020  9011              STR      r0,[sp,#0x44]         ;1378
000022  9012              STR      r0,[sp,#0x48]
000024  f8da1008          LDR      r1,[r10,#8]  ; thisInfo
;;;1389   	
;;;1390   	for( cl=MAX_TOUCH_; cl--; )
;;;1391   	{
;;;1392   		if(thisInfo->tCoord.tPos.vusR[cl] != 0)
;;;1393   		{
;;;1394   			if(thisInfo->tCoord.tPos.vusR[cl] > thisModeConf->Palm.usPalmLevel)
;;;1395   			{
;;;1396   				bIsPalm[cl] = YES;
;;;1397   				ucParNum[cl] = cl;
;;;1398   				ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1399   			}
;;;1400   //			else if(ucFrameCnt[cl] < 10
;;;1401   //				&& ((thisInfo->tCoord.tPos.vusR[cl] > 10
;;;1402   //				&& (int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > 3 )
;;;1403   //				|| ((int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > (3*2+1))))
;;;1404   //			{
;;;1405   //				thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1406   //				ucPalmExpect[cl] = 1;
;;;1407   //			}
;;;1408   			else
;;;1409   			{
;;;1410   				int pl, i;
;;;1411   				uint8_t ucOverlap[POSBUF_] = {0,};
;;;1412   				uint8_t ucOverlapCnt = 0;
;;;1413   
;;;1414   				for( pl=MAX_TOUCH_; pl--; )
;;;1415   				{
;;;1416   					if(ucPalmContCnt[pl] != 0)
;;;1417   					{
;;;1418   						if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[cl].re && thisInfo->tCoord.tPos.rect[cl].rs <= ucPalmRect[pl].re)
;;;1419   						{
;;;1420   							if(ucPalmRect[pl].cs <= thisInfo->tCoord.tPos.rect[cl].ce && thisInfo->tCoord.tPos.rect[cl].cs <= ucPalmRect[pl].ce)
;;;1421   								ucOverlap[ucOverlapCnt++] = pl;
;;;1422   						}
;;;1423   					}
;;;1424   				}
;;;1425   
;;;1426   				if(ucOverlapCnt != 0)
;;;1427   				{
;;;1428   					if(ucOverlapCnt > 1)
;;;1429   					{
;;;1430   						int palm_dist;
;;;1431   						int min_dist = INT32_MAX;
;;;1432   
;;;1433   						for(i=0; i<ucOverlapCnt; i++)
;;;1434   						{
;;;1435   							palm_dist = algorithm_coord_calc_distance(ucPalmPos[ucOverlap[i]], thisInfo->tCoord.tPos.tXY[cl]);
;;;1436   							if(min_dist > palm_dist)
;;;1437   								min_dist = palm_dist, pl = ucOverlap[i];
;;;1438   						}
;;;1439   					}
;;;1440   					else
;;;1441   						pl = ucOverlap[0];
;;;1442   
;;;1443   					bIsPalm[cl] = YES;
;;;1444   					ucParCnt[pl]++;
;;;1445   					ucParBF[pl] |= _BV(cl);
;;;1446   					if(ucPalmContCnt[cl] == 0)
;;;1447   						ucParNum[cl] = ucParNum[pl];
;;;1448   
;;;1449   					ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1450   				}
;;;1451   			}
;;;1452   
;;;1453   			if( ucFrameCnt[cl] < 10 )
;;;1454   				ucFrameCnt[cl]++;
;;;1455   		}
;;;1456   		else
;;;1457   			ucFrameCnt[cl] = 0;
;;;1458   	}
;;;1459   
;;;1460   	for( cl=MAX_TOUCH_; cl--;)
;;;1461   	{
;;;1462   		if(ucParCnt[cl] > 1)
;;;1463   		{
;;;1464   			int max_palm_num = -1;
;;;1465   			int max_palm_size = 0;
;;;1466   
;;;1467   			if(bIsPalm[cl] == NO)
;;;1468   			{
;;;1469   				int pl;
;;;1470   
;;;1471   				for( pl=MAX_TOUCH_; pl--;)
;;;1472   				{
;;;1473   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1474   					{
;;;1475   						if(max_palm_size < thisInfo->tCoord.tPos.vusR[pl])
;;;1476   						{
;;;1477   							max_palm_num = pl;
;;;1478   							max_palm_size = thisInfo->tCoord.tPos.vusR[pl];
;;;1479   						}
;;;1480   					}
;;;1481   				}
;;;1482   
;;;1483   				for( pl=MAX_TOUCH_; pl--;)
;;;1484   				{
;;;1485   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1486   						ucParNum[pl] = max_palm_num;
;;;1487   				}
;;;1488   
;;;1489   				ucPalmContCnt[cl] = 0;
;;;1490   			}
;;;1491   		}
;;;1492   	}
;;;1493   
;;;1494   	for( cl=MAX_TOUCH_; cl--;)
;;;1495   	{
;;;1496   		if(bIsPalm[cl] == YES)
;;;1497   		{
;;;1498   			if(ucParNum[cl] != cl)
;;;1499   			{
;;;1500   				int pl = ucParNum[cl];
;;;1501   				int palm_dist;
;;;1502   
;;;1503   				if(thisInfo->tCoord.tPos.vusR[pl] == 0 && ucPalmContCnt[cl] != 0)
;;;1504   				{
;;;1505   					int pcl;
;;;1506   					int max_palm_num = -1;
;;;1507   					int max_palm_size = 0;
;;;1508   
;;;1509   					for( pcl=MAX_TOUCH_; pcl--;)
;;;1510   					{
;;;1511   						if(pcl != cl && bIsPalm[pcl] == YES)
;;;1512   						{
;;;1513   							if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[pcl].re && thisInfo->tCoord.tPos.rect[pcl].rs <= ucPalmRect[pl].re)
;;;1514   							{
;;;1515   								if(max_palm_size < thisInfo->tCoord.tPos.vusR[pcl])
;;;1516   									max_palm_size = thisInfo->tCoord.tPos.vusR[pcl], max_palm_num = pcl;
;;;1517   							}
;;;1518   						}
;;;1519   					}
;;;1520   
;;;1521   					if(max_palm_num != -1)
;;;1522   					{
;;;1523   
;;;1524   						ucParNum[cl] = max_palm_num;
;;;1525   						for( pcl=MAX_TOUCH_; pcl--;)
;;;1526   						{
;;;1527   							if(ucPalmContCnt[pcl] != 0)
;;;1528   							{
;;;1529   								if(ucParNum[pcl] == pl)
;;;1530   									ucParNum[pcl] = max_palm_num;
;;;1531   							}
;;;1532   						}
;;;1533   					}
;;;1534   					else
;;;1535   						ucParNum[cl] = cl;
;;;1536   				}
;;;1537   
;;;1538   				if(ucPalmContCnt[pl] != 0)
;;;1539   				{
;;;1540   					palm_dist = algorithm_coord_calc_distance(ucPalmPos[pl], ucPalmPos[cl]);
;;;1541   					if(PALM_VALID_AREA < palm_dist)
;;;1542   						bIsPalm[cl] = NO;
;;;1543   				}
;;;1544   				else
;;;1545   					bIsPalm[cl] = NO;
;;;1546   			}
;;;1547   		}
;;;1548   
;;;1549   		if(bIsPalm[cl] == YES)
;;;1550   		{
;;;1551   			ucPalmExpect[cl] = 1;
;;;1552   			ucPalmContCnt[cl] = PALM_KEEP_FRM;
;;;1553   			ucPalmRect[cl] = thisInfo->tCoord.tPos.rect[cl];
;;;1554   			ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1555   			thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1556   
;;;1557   			if(ucPalmRect[cl].rs > 0)
;;;1558   				ucPalmRect[cl].rs--;
;;;1559   			if(ucPalmRect[cl].re < (ROW_MAX - 1))
;;;1560   				ucPalmRect[cl].re++;
;;;1561   			if(ucPalmRect[cl].cs > 0)
;;;1562   				ucPalmRect[cl].cs--;
;;;1563   			if(ucPalmRect[cl].ce < (COL_MAX - 1))
;;;1564   				ucPalmRect[cl].ce++;
;;;1565   			
;;;1566   			thisInfo->bIsPalm = YES;
;;;1567   			thisInfo->tCoord.tPos.sFinger_--;
;;;1568   		}
;;;1569   	}
;;;1570   
;;;1571   	for( cl=MAX_TOUCH_; cl--;)
;;;1572   	{
;;;1573   		if(ucPalmExpect[cl] != 0)
;;;1574   		{
;;;1575   			int pl;
;;;1576   //			tRect_t ori_rect, cmp_rect; // NOTE : not used
;;;1577   			tRect_t ori_rect;
;;;1578   
;;;1579   #if (CUSTOMER == MODEL_DEF_QHD_92407 || CUSTOMER == MODEL_DEF_QHD_92407_FLIP)
;;;1580   			int offset = 5;
;;;1581   #else
;;;1582   			int offset = 1;
;;;1583   #endif
;;;1584   			
;;;1585               if(thisInfo->tCoord.tPos.rect[cl].rs > (offset-1))
;;;1586   				ori_rect.rs = thisInfo->tCoord.tPos.rect[cl].rs - offset;
;;;1587               else
;;;1588                   ori_rect.rs = 0;
;;;1589   			if(thisInfo->tCoord.tPos.rect[cl].re < (ROW_MAX - offset))
;;;1590   				ori_rect.re = thisInfo->tCoord.tPos.rect[cl].re + offset;
;;;1591               else
;;;1592                   ori_rect.re = ROW_MAX - 1;
;;;1593   			if(thisInfo->tCoord.tPos.rect[cl].cs > (offset-1))
;;;1594   				ori_rect.cs = thisInfo->tCoord.tPos.rect[cl].cs - offset;
;;;1595               else
;;;1596                   ori_rect.cs = 0;
;;;1597   			if(thisInfo->tCoord.tPos.rect[cl].ce < (COL_MAX - offset))
;;;1598   				ori_rect.ce = thisInfo->tCoord.tPos.rect[cl].ce + offset;
;;;1599               else
;;;1600                   ori_rect.ce = COL_MAX - 1;
;;;1601               
;;;1602               for( pl=MAX_TOUCH_; pl--;)
;;;1603   			{
;;;1604   				if(thisInfo->tCoord.tPos.vusS[pl])
;;;1605   				{
;;;1606   					if(ori_rect.rs <= thisInfo->tCoord.tPos.rect[pl].re+1 && thisInfo->tCoord.tPos.rect[pl].rs-1 <= ori_rect.re)
;;;1607   					{
;;;1608   						if(ori_rect.cs <= thisInfo->tCoord.tPos.rect[pl].ce+1 && thisInfo->tCoord.tPos.rect[pl].cs-1 <= ori_rect.ce)
;;;1609   						{
;;;1610   							thisInfo->tCoord.tPos.vusS[pl] = 0;
;;;1611   						}
;;;1612   					}
;;;1613   				}
;;;1614   			}
;;;1615   		}
;;;1616   
;;;1617   		if(ucPalmContCnt[cl] != 0)
;;;1618   			ucPalmContCnt[cl]--;
;;;1619   
;;;1620   //		usPrevMaxCellNum[cl] = thisInfo->tCoord.tPos.vusR[cl];  // NOTE : Not used!!		
;;;1621   	}
;;;1622   
;;;1623   //	public_protocol_LogCode(LT_DIAGNOSIS, (220)/*System is Entered!*/);
;;;1624   }
000028  2409              MOVS     r4,#9
00002a  f10d094c          ADD      r9,sp,#0x4c           ;1411
00002e  f8810fb2          STRB     r0,[r1,#0xfb2]        ;1388
000032  bf00              NOP                            ;1392
                  |L18.52|
000034  f8da0008          LDR      r0,[r10,#8]           ;1392  ; thisInfo
000038  eb000144          ADD      r1,r0,r4,LSL #1       ;1392
00003c  f8b114e2          LDRH     r1,[r1,#0x4e2]        ;1392
000040  2900              CMP      r1,#0                 ;1392
000042  d07d              BEQ      |L18.320|
000044  f8da2004          LDR      r2,[r10,#4]           ;1394  ; thisModeConf
000048  f8b22200          LDRH     r2,[r2,#0x200]        ;1394
00004c  4291              CMP      r1,r2                 ;1394
00004e  d910              BLS      |L18.114|
000050  aa04              ADD      r2,sp,#0x10           ;1396
000052  2101              MOVS     r1,#1                 ;1396
000054  5511              STRB     r1,[r2,r4]            ;1396
000056  49f5              LDR      r1,|L18.1068|
000058  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1398
00005c  550c              STRB     r4,[r1,r4]            ;1397
00005e  310a              ADDS     r1,r1,#0xa            ;1398
000060  eb0101c4          ADD      r1,r1,r4,LSL #3       ;1398
000064  f8d0247e          LDR      r2,[r0,#0x47e]        ;1398
000068  f8d00482          LDR      r0,[r0,#0x482]        ;1398
00006c  600a              STR      r2,[r1,#0]            ;1398
00006e  6048              STR      r0,[r1,#4]            ;1398
000070  e088              B        |L18.388|
                  |L18.114|
000072  2100              MOVS     r1,#0                 ;1411
000074  9113              STR      r1,[sp,#0x4c]         ;1411
000076  9114              STR      r1,[sp,#0x50]         ;1411
000078  460d              MOV      r5,r1                 ;1412
00007a  9115              STR      r1,[sp,#0x54]         ;1414
00007c  49ec              LDR      r1,|L18.1072|
00007e  2700              MOVS     r7,#0                 ;1414
000080  f101065b          ADD      r6,r1,#0x5b           ;1414
000084  f1060224          ADD      r2,r6,#0x24           ;1414
000088  1c53              ADDS     r3,r2,#1              ;1414
00008a  f1060c26          ADD      r12,r6,#0x26          ;1414
00008e  f04f080a          MOV      r8,#0xa               ;1414
000092  eb000084          ADD      r0,r0,r4,LSL #2       ;1418
000096  3627              ADDS     r6,r6,#0x27           ;1418
                  |L18.152|
000098  f811b901          LDRB     r11,[r1],#-1          ;1416
00009c  f1bb0f00          CMP      r11,#0                ;1416
0000a0  d01d              BEQ      |L18.222|
0000a2  f992b000          LDRSB    r11,[r2,#0]           ;1418
0000a6  f990e4f7          LDRSB    lr,[r0,#0x4f7]        ;1418
0000aa  45f3              CMP      r11,lr                ;1418
0000ac  dc17              BGT      |L18.222|
0000ae  f990b4f6          LDRSB    r11,[r0,#0x4f6]       ;1418
0000b2  f993e000          LDRSB    lr,[r3,#0]            ;1418
0000b6  45f3              CMP      r11,lr                ;1418
0000b8  dc11              BGT      |L18.222|
0000ba  f99cb000          LDRSB    r11,[r12,#0]          ;1420
0000be  f990e4f9          LDRSB    lr,[r0,#0x4f9]        ;1420
0000c2  45f3              CMP      r11,lr                ;1420
0000c4  dc0b              BGT      |L18.222|
0000c6  f990b4f8          LDRSB    r11,[r0,#0x4f8]       ;1420
0000ca  f996e000          LDRSB    lr,[r6,#0]            ;1420
0000ce  45f3              CMP      r11,lr                ;1420
0000d0  dc05              BGT      |L18.222|
0000d2  f1c70b09          RSB      r11,r7,#9             ;1421
0000d6  f809b005          STRB     r11,[r9,r5]           ;1421
0000da  1c6d              ADDS     r5,r5,#1              ;1421
0000dc  b2ed              UXTB     r5,r5                 ;1421
                  |L18.222|
0000de  1f12              SUBS     r2,r2,#4              ;1421
0000e0  1f1b              SUBS     r3,r3,#4              ;1421
0000e2  1f36              SUBS     r6,r6,#4              ;1421
0000e4  1c7f              ADDS     r7,r7,#1              ;1421
0000e6  f1b80801          SUBS     r8,r8,#1              ;1421
0000ea  f1ac0c04          SUB      r12,r12,#4            ;1421
0000ee  d1d3              BNE      |L18.152|
0000f0  f04f36ff          MOV      r6,#0xffffffff        ;1414
0000f4  2d00              CMP      r5,#0                 ;1426
0000f6  d045              BEQ      |L18.388|
0000f8  2d01              CMP      r5,#1                 ;1428
0000fa  bf98              IT       LS                    ;1441
0000fc  f89d604c          LDRBLS   r6,[sp,#0x4c]         ;1441
000100  d923              BLS      |L18.330|
000102  f06f4700          MVN      r7,#0x80000000        ;1431
000106  f04f0800          MOV      r8,#0                 ;1433
00010a  2d00              CMP      r5,#0                 ;1433
00010c  bfc8              IT       GT                    ;1398
00010e  f8dfb324          LDRGT    r11,|L18.1076|
000112  dd1a              BLE      |L18.330|
                  |L18.276|
000114  f8da0008          LDR      r0,[r10,#8]           ;1435  ; thisInfo
000118  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1435
00011c  f8d0247e          LDR      r2,[r0,#0x47e]        ;1435
000120  f8d03482          LDR      r3,[r0,#0x482]        ;1435
000124  f8190008          LDRB     r0,[r9,r8]            ;1435
000128  eb0b01c0          ADD      r1,r11,r0,LSL #3      ;1435
00012c  6808              LDR      r0,[r1,#0]            ;1435
00012e  6849              LDR      r1,[r1,#4]            ;1435
000130  f7fffffe          BL       algorithm_coord_calc_distance
000134  4287              CMP      r7,r0                 ;1436
000136  bfc4              ITT      GT                    ;1437
000138  4607              MOVGT    r7,r0                 ;1437
00013a  f8196008          LDRBGT   r6,[r9,r8]            ;1437
00013e  e000              B        |L18.322|
                  |L18.320|
000140  e027              B        |L18.402|
                  |L18.322|
000142  f1080801          ADD      r8,r8,#1              ;1437
000146  45a8              CMP      r8,r5                 ;1437
000148  dbe4              BLT      |L18.276|
                  |L18.330|
00014a  a804              ADD      r0,sp,#0x10           ;1443
00014c  2101              MOVS     r1,#1                 ;1443
00014e  5501              STRB     r1,[r0,r4]            ;1443
000150  a80d              ADD      r0,sp,#0x34           ;1444
000152  5d82              LDRB     r2,[r0,r6]            ;1444
000154  1c52              ADDS     r2,r2,#1              ;1444
000156  5582              STRB     r2,[r0,r6]            ;1444
000158  a80a              ADD      r0,sp,#0x28           ;1445
00015a  40a1              LSLS     r1,r1,r4              ;1445
00015c  5d82              LDRB     r2,[r0,r6]            ;1445
00015e  4311              ORRS     r1,r1,r2              ;1445
000160  5581              STRB     r1,[r0,r6]            ;1445
000162  48b5              LDR      r0,|L18.1080|
000164  5d00              LDRB     r0,[r0,r4]            ;1446
000166  b910              CBNZ     r0,|L18.366|
000168  48b0              LDR      r0,|L18.1068|
00016a  5d81              LDRB     r1,[r0,r6]            ;1447
00016c  5501              STRB     r1,[r0,r4]            ;1447
                  |L18.366|
00016e  f8da0008          LDR      r0,[r10,#8]           ;1449  ; thisInfo
000172  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1449
000176  f200417e          ADD      r1,r0,#0x47e          ;1449
00017a  48ae              LDR      r0,|L18.1076|
00017c  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1449
000180  f7fffffe          BL       __ARM_common_memcpy4_8
                  |L18.388|
000184  48ad              LDR      r0,|L18.1084|
000186  5d01              LDRB     r1,[r0,r4]            ;1453
000188  290a              CMP      r1,#0xa               ;1453
00018a  bf3c              ITT      CC                    ;1453
00018c  1c49              ADDCC    r1,r1,#1              ;1453
00018e  5501              STRBCC   r1,[r0,r4]            ;1454
000190  e002              B        |L18.408|
                  |L18.402|
000192  49aa              LDR      r1,|L18.1084|
000194  2000              MOVS     r0,#0                 ;1457
000196  5508              STRB     r0,[r1,r4]            ;1457
                  |L18.408|
000198  1e64              SUBS     r4,r4,#1              ;1457
00019a  f4bfaf4b          BCS      |L18.52|
00019e  48a2              LDR      r0,|L18.1064|
0001a0  f8dfa288          LDR      r10,|L18.1068|
0001a4  2209              MOVS     r2,#9
0001a6  f8d09008          LDR      r9,[r0,#8]            ;1396  ; thisInfo
0001aa  f10d0b34          ADD      r11,sp,#0x34          ;1375
0001ae  af04              ADD      r7,sp,#0x10           ;1377
0001b0  2001              MOVS     r0,#1                 ;1396
0001b2  f04f0e00          MOV      lr,#0                 ;1396
0001b6  f1aa060a          SUB      r6,r10,#0xa           ;1414
0001ba  bf00              NOP                            ;1462
                  |L18.444|
0001bc  f81b1002          LDRB     r1,[r11,r2]           ;1462
0001c0  2901              CMP      r1,#1                 ;1462
0001c2  d939              BLS      |L18.568|
0001c4  5cb9              LDRB     r1,[r7,r2]            ;1467
0001c6  f04f35ff          MOV      r5,#0xffffffff        ;1464
0001ca  2300              MOVS     r3,#0                 ;1465
0001cc  bba1              CBNZ     r1,|L18.568|
0001ce  f10d0c28          ADD      r12,sp,#0x28          ;1376
0001d2  210a              MOVS     r1,#0xa               ;1471
0001d4  f81cc002          LDRB     r12,[r12,r2]          ;1473
0001d8  2401              MOVS     r4,#1                 ;1471
                  |L18.474|
0001da  1e49              SUBS     r1,r1,#1              ;1473
0001dc  fa00f801          LSL      r8,r0,r1              ;1473
0001e0  ea1c0f08          TST      r12,r8                ;1473
0001e4  d007              BEQ      |L18.502|
0001e6  eb090841          ADD      r8,r9,r1,LSL #1       ;1475
0001ea  f8b884e2          LDRH     r8,[r8,#0x4e2]        ;1475
0001ee  4598              CMP      r8,r3                 ;1475
0001f0  bfc4              ITT      GT                    ;1477
0001f2  460d              MOVGT    r5,r1                 ;1477
0001f4  4643              MOVGT    r3,r8                 ;1477
                  |L18.502|
0001f6  1c64              ADDS     r4,r4,#1              ;1477
0001f8  2c0a              CMP      r4,#0xa               ;1478
0001fa  ddee              BLE      |L18.474|
0001fc  2100              MOVS     r1,#0
0001fe  f10a030a          ADD      r3,r10,#0xa           ;1483
000202  2405              MOVS     r4,#5                 ;1483
000204  fa5ff585          UXTB.W   r5,r5                 ;1486
                  |L18.520|
000208  f1c10809          RSB      r8,r1,#9              ;1485
00020c  fa00f808          LSL      r8,r0,r8              ;1485
000210  ea1c0f08          TST      r12,r8                ;1485
000214  bf18              IT       NE                    ;1486
000216  f8035c01          STRBNE   r5,[r3,#-1]           ;1486
00021a  f1c10808          RSB      r8,r1,#8              ;1485
00021e  fa00f808          LSL      r8,r0,r8              ;1485
000222  ea1c0f08          TST      r12,r8                ;1485
000226  bf18              IT       NE                    ;1486
000228  f8035c02          STRBNE   r5,[r3,#-2]           ;1486
00022c  1c89              ADDS     r1,r1,#2              ;1486
00022e  1e9b              SUBS     r3,r3,#2              ;1486
000230  1e64              SUBS     r4,r4,#1              ;1486
000232  d1e9              BNE      |L18.520|
000234  f806e002          STRB     lr,[r6,r2]            ;1489
                  |L18.568|
000238  1e52              SUBS     r2,r2,#1              ;1489
00023a  d2bf              BCS      |L18.444|
00023c  2409              MOVS     r4,#9
                  |L18.574|
00023e  5d38              LDRB     r0,[r7,r4]            ;1496
000240  2801              CMP      r0,#1                 ;1496
000242  d17b              BNE      |L18.828|
000244  f8dfe1e4          LDR      lr,|L18.1068|
000248  f81e5004          LDRB     r5,[lr,r4]            ;1498
00024c  42a5              CMP      r5,r4                 ;1498
00024e  d076              BEQ      |L18.830|
000250  4875              LDR      r0,|L18.1064|
000252  6883              LDR      r3,[r0,#8]            ;1503  ; thisInfo
000254  eb030045          ADD      r0,r3,r5,LSL #1       ;1503
000258  f8b004e2          LDRH     r0,[r0,#0x4e2]        ;1503
00025c  bbe8              CBNZ     r0,|L18.730|
00025e  5d30              LDRB     r0,[r6,r4]            ;1503
000260  b3d8              CBZ      r0,|L18.730|
000262  200a              MOVS     r0,#0xa               ;1509
000264  f10e025a          ADD      r2,lr,#0x5a           ;1414
000268  f04f3aff          MOV      r10,#0xffffffff       ;1506
00026c  f04f0800          MOV      r8,#0                 ;1507
000270  2101              MOVS     r1,#1                 ;1509
000272  eb020985          ADD      r9,r2,r5,LSL #2       ;1513
                  |L18.630|
000276  1e40              SUBS     r0,r0,#1              ;1513
000278  42a0              CMP      r0,r4                 ;1511
00027a  d018              BEQ      |L18.686|
00027c  5c3a              LDRB     r2,[r7,r0]            ;1511
00027e  2a01              CMP      r2,#1                 ;1511
000280  d115              BNE      |L18.686|
000282  eb030280          ADD      r2,r3,r0,LSL #2       ;1513
000286  f999c000          LDRSB    r12,[r9,#0]           ;1513
00028a  f992b4f7          LDRSB    r11,[r2,#0x4f7]       ;1513
00028e  45dc              CMP      r12,r11               ;1513
000290  dc0d              BGT      |L18.686|
000292  f99224f6          LDRSB    r2,[r2,#0x4f6]        ;1513
000296  f999c001          LDRSB    r12,[r9,#1]           ;1513
00029a  4562              CMP      r2,r12                ;1513
00029c  dc07              BGT      |L18.686|
00029e  eb030240          ADD      r2,r3,r0,LSL #1       ;1515
0002a2  f8b224e2          LDRH     r2,[r2,#0x4e2]        ;1515
0002a6  4590              CMP      r8,r2                 ;1515
0002a8  bfbc              ITT      LT                    ;1516
0002aa  4690              MOVLT    r8,r2                 ;1516
0002ac  4682              MOVLT    r10,r0                ;1516
                  |L18.686|
0002ae  1c49              ADDS     r1,r1,#1              ;1516
0002b0  290a              CMP      r1,#0xa               ;1516
0002b2  dde0              BLE      |L18.630|
0002b4  f1ba3fff          CMP      r10,#0xffffffff       ;1521
0002b8  bf08              IT       EQ                    ;1535
0002ba  f80e4004          STRBEQ   r4,[lr,r4]            ;1535
0002be  d024              BEQ      |L18.778|
0002c0  f00a02ff          AND      r2,r10,#0xff          ;1524
0002c4  f80e2004          STRB     r2,[lr,r4]            ;1524
0002c8  f106010a          ADD      r1,r6,#0xa            ;1525
0002cc  f10e000a          ADD      r0,lr,#0xa            ;1525
0002d0  f05f0305          MOVS.W   r3,#5                 ;1525
                  |L18.724|
0002d4  f811cc01          LDRB     r12,[r1,#-1]          ;1527
0002d8  e000              B        |L18.732|
                  |L18.730|
0002da  e016              B        |L18.778|
                  |L18.732|
0002dc  f1bc0f00          CMP      r12,#0                ;1527
0002e0  d005              BEQ      |L18.750|
0002e2  f810cc01          LDRB     r12,[r0,#-1]          ;1529
0002e6  45ac              CMP      r12,r5                ;1529
0002e8  bf08              IT       EQ                    ;1530
0002ea  f8002c01          STRBEQ   r2,[r0,#-1]           ;1530
                  |L18.750|
0002ee  f811cd02          LDRB     r12,[r1,#-2]!         ;1527
0002f2  f1bc0f00          CMP      r12,#0                ;1527
0002f6  d005              BEQ      |L18.772|
0002f8  f810cc02          LDRB     r12,[r0,#-2]          ;1529
0002fc  45ac              CMP      r12,r5                ;1529
0002fe  bf08              IT       EQ                    ;1530
000300  f8002c02          STRBEQ   r2,[r0,#-2]           ;1530
                  |L18.772|
000304  1e80              SUBS     r0,r0,#2              ;1530
000306  1e5b              SUBS     r3,r3,#1              ;1530
000308  d1e4              BNE      |L18.724|
                  |L18.778|
00030a  5d70              LDRB     r0,[r6,r5]            ;1538
00030c  b1a0              CBZ      r0,|L18.824|
00030e  f8df8124          LDR      r8,|L18.1076|
000312  a808              ADD      r0,sp,#0x20           ;1540
000314  eb0801c4          ADD      r1,r8,r4,LSL #3       ;1540
000318  f7fffffe          BL       __ARM_common_memcpy4_8
00031c  eb0801c5          ADD      r1,r8,r5,LSL #3       ;1540
000320  a802              ADD      r0,sp,#8              ;1540
000322  f7fffffe          BL       __ARM_common_memcpy4_8
000326  e9dd0102          LDRD     r0,r1,[sp,#8]         ;1540
00032a  e9dd2308          LDRD     r2,r3,[sp,#0x20]      ;1540
00032e  f7fffffe          BL       algorithm_coord_calc_distance
000332  f5b05fb0          CMP      r0,#0x1600            ;1541
000336  dd03              BLE      |L18.832|
                  |L18.824|
000338  2000              MOVS     r0,#0                 ;1545
00033a  5538              STRB     r0,[r7,r4]            ;1545
                  |L18.828|
00033c  e003              B        |L18.838|
                  |L18.830|
00033e  e07f              B        |L18.1088|
                  |L18.832|
000340  5d38              LDRB     r0,[r7,r4]            ;1549
000342  2801              CMP      r0,#1                 ;1549
000344  d07d              BEQ      |L18.1090|
                  |L18.838|
000346  1e64              SUBS     r4,r4,#1              ;1549
000348  f4bfaf79          BCS      |L18.574|
00034c  4836              LDR      r0,|L18.1064|
00034e  2209              MOVS     r2,#9
000350  f10d0e40          ADD      lr,sp,#0x40           ;1378
000354  f8d03008          LDR.W    r3,[r0,#8]            ;1378
000358  f04f0900          MOV      r9,#0                 ;1378
                  |L18.860|
00035c  f81e0002          LDRB     r0,[lr,r2]            ;1573
000360  b3f0              CBZ      r0,|L18.992|
000362  eb030082          ADD      r0,r3,r2,LSL #2       ;1585
000366  f99014f6          LDRSB    r1,[r0,#0x4f6]        ;1585
00036a  2900              CMP      r1,#0                 ;1585
00036c  bfd2              ITEE     LE                    ;1585
00036e  f3690c07          BFILE    r12,r9,#0,#8          ;1585
000372  1e49              SUBGT    r1,r1,#1              ;1585
000374  f3610c07          BFIGT    r12,r1,#0,#8          ;1585
000378  f99044f7          LDRSB    r4,[r0,#0x4f7]        ;1589
00037c  212c              MOVS     r1,#0x2c              ;1589
00037e  2c2c              CMP      r4,#0x2c              ;1589
000380  bfb8              IT       LT                    ;1590
000382  1c61              ADDLT    r1,r4,#1              ;1590
000384  f3612c0f          BFI      r12,r1,#8,#8          ;1590
000388  f99014f8          LDRSB    r1,[r0,#0x4f8]        ;1593
00038c  2900              CMP      r1,#0                 ;1593
00038e  bfc6              ITTE     GT                    ;1593
000390  1e49              SUBGT    r1,r1,#1              ;1593
000392  f3614c17          BFIGT    r12,r1,#16,#8         ;1593
000396  f3694c17          BFILE    r12,r9,#16,#8         ;1593
00039a  f99004f9          LDRSB    r0,[r0,#0x4f9]        ;1597
00039e  214f              MOVS     r1,#0x4f              ;1597
0003a0  284f              CMP      r0,#0x4f              ;1597
0003a2  bfba              ITTE     LT                    ;1597
0003a4  1c40              ADDLT    r0,r0,#1              ;1597
0003a6  f3606c1f          BFILT    r12,r0,#24,#8         ;1597
0003aa  f3616c1f          BFIGE    r12,r1,#24,#8         ;1597
0003ae  200a              MOVS     r0,#0xa               ;1602
0003b0  2101              MOVS     r1,#1                 ;1602
0003b2  fa4ff78c          SXTB     r7,r12                ;1602
0003b6  f34c2507          SBFX     r5,r12,#8,#8          ;1602
0003ba  f34c4a07          SBFX     r10,r12,#16,#8        ;1602
0003be  ea4f6b2c          ASR      r11,r12,#24           ;1602
                  |L18.962|
0003c2  1e40              SUBS     r0,r0,#1              ;1602
0003c4  eb030440          ADD      r4,r3,r0,LSL #1       ;1604
0003c8  f8b4c4ce          LDRH     r12,[r4,#0x4ce]       ;1604
0003cc  f1bc0f00          CMP      r12,#0                ;1604
0003d0  d01d              BEQ      |L18.1038|
0003d2  eb030c80          ADD      r12,r3,r0,LSL #2      ;1606
0003d6  f99c84f7          LDRSB    r8,[r12,#0x4f7]       ;1606
0003da  f1080801          ADD      r8,r8,#1              ;1606
0003de  e000              B        |L18.994|
                  |L18.992|
0003e0  e018              B        |L18.1044|
                  |L18.994|
0003e2  4547              CMP      r7,r8                 ;1606
0003e4  dc13              BGT      |L18.1038|
0003e6  f99c84f6          LDRSB    r8,[r12,#0x4f6]       ;1606
0003ea  f1a80801          SUB      r8,r8,#1              ;1606
0003ee  45a8              CMP      r8,r5                 ;1606
0003f0  dc0d              BGT      |L18.1038|
0003f2  f99c84f9          LDRSB    r8,[r12,#0x4f9]       ;1608
0003f6  f1080801          ADD      r8,r8,#1              ;1608
0003fa  45c2              CMP      r10,r8                ;1608
0003fc  dc07              BGT      |L18.1038|
0003fe  f99cc4f8          LDRSB    r12,[r12,#0x4f8]      ;1608
000402  f1ac0c01          SUB      r12,r12,#1            ;1608
000406  45dc              CMP      r12,r11               ;1608
000408  bfd8              IT       LE                    ;1610
00040a  f8a494ce          STRHLE   r9,[r4,#0x4ce]        ;1610
                  |L18.1038|
00040e  1c49              ADDS     r1,r1,#1              ;1610
000410  290a              CMP      r1,#0xa               ;1610
000412  ddd6              BLE      |L18.962|
                  |L18.1044|
000414  5cb0              LDRB     r0,[r6,r2]            ;1617
000416  2800              CMP      r0,#0                 ;1617
000418  bf1c              ITT      NE                    ;1617
00041a  1e40              SUBNE    r0,r0,#1              ;1617
00041c  54b0              STRBNE   r0,[r6,r2]            ;1618
00041e  1e52              SUBS     r2,r2,#1              ;1618
000420  d29c              BCS      |L18.860|
000422  b019              ADD      sp,sp,#0x64
000424  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.1064|
                          DCD      ||.data||
                  |L18.1068|
                          DCD      ||.bss||+0x2ae
                  |L18.1072|
                          DCD      ||.bss||+0x2ad
                  |L18.1076|
                          DCD      ||.bss||+0x2b8
                  |L18.1080|
                          DCD      ||.bss||+0x2a4
                  |L18.1084|
                          DCD      ||.bss||+0x29a
                  |L18.1088|
000440  e7ff              B        |L18.1090|
                  |L18.1090|
000442  a810              ADD      r0,sp,#0x40           ;1551
000444  f04f0901          MOV      r9,#1                 ;1551
000448  f8009004          STRB     r9,[r0,r4]            ;1551
00044c  200a              MOVS     r0,#0xa               ;1552
00044e  5530              STRB     r0,[r6,r4]            ;1552
000450  481c              LDR      r0,|L18.1220|
000452  eb000584          ADD      r5,r0,r4,LSL #2       ;1553
000456  481c              LDR      r0,|L18.1224|
000458  f8d08008          LDR      r8,[r0,#8]            ;1553  ; thisInfo
00045c  eb080084          ADD      r0,r8,r4,LSL #2       ;1553
000460  f8d004f6          LDR      r0,[r0,#0x4f6]        ;1553
000464  6028              STR      r0,[r5,#0]            ;1553
000466  eb0800c4          ADD      r0,r8,r4,LSL #3       ;1554
00046a  f200417e          ADD      r1,r0,#0x47e          ;1554
00046e  4817              LDR      r0,|L18.1228|
000470  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1554
000474  f7fffffe          BL       __ARM_common_memcpy4_8
000478  eb080144          ADD      r1,r8,r4,LSL #1       ;1555
00047c  2000              MOVS     r0,#0                 ;1555
00047e  f8a104ce          STRH     r0,[r1,#0x4ce]        ;1555
000482  f9950000          LDRSB    r0,[r5,#0]            ;1557
000486  2800              CMP      r0,#0                 ;1557
000488  bfc4              ITT      GT                    ;1557
00048a  1e40              SUBGT    r0,r0,#1              ;1557
00048c  7028              STRBGT   r0,[r5,#0]            ;1558
00048e  f9950001          LDRSB    r0,[r5,#1]            ;1559
000492  282c              CMP      r0,#0x2c              ;1559
000494  bfbc              ITT      LT                    ;1559
000496  1c40              ADDLT    r0,r0,#1              ;1559
000498  7068              STRBLT   r0,[r5,#1]            ;1560
00049a  f9950002          LDRSB    r0,[r5,#2]            ;1561
00049e  2800              CMP      r0,#0                 ;1561
0004a0  bfc4              ITT      GT                    ;1561
0004a2  1e40              SUBGT    r0,r0,#1              ;1561
0004a4  70a8              STRBGT   r0,[r5,#2]            ;1562
0004a6  f9950003          LDRSB    r0,[r5,#3]            ;1563
0004aa  284f              CMP      r0,#0x4f              ;1563
0004ac  bfbc              ITT      LT                    ;1563
0004ae  1c40              ADDLT    r0,r0,#1              ;1563
0004b0  70e8              STRBLT   r0,[r5,#3]            ;1564
0004b2  f8889fb2          STRB     r9,[r8,#0xfb2]        ;1566
0004b6  f898047d          LDRB     r0,[r8,#0x47d]        ;1567
0004ba  1e40              SUBS     r0,r0,#1              ;1567
0004bc  f888047d          STRB     r0,[r8,#0x47d]        ;1567
0004c0  e741              B        |L18.838|
;;;1625   
                          ENDP

0004c2  0000              DCW      0x0000
                  |L18.1220|
                          DCD      ||.bss||+0x308
                  |L18.1224|
                          DCD      ||.data||
                  |L18.1228|
                          DCD      ||.bss||+0x2b8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  sLFOffsetRow
                          %        90
                  gvsPastCheckRawData_AFE_1
                          %        288
                  gvsPastCheckRawData_AFE_2
                          %        288
                  ucFrameCnt
                          %        10
                  ucPalmContCnt
                          %        10
                  ucParNum
                          %        10
                  ucPalmPos
                          %        80
                  ucPalmRect
                          %        40
                  PendDebCnt
                          %        10
                  sLFOffsetCol
                          %        160

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2d505082          DCB      0x2d,0x50,0x50,0x82
000004  54000000          DCB      0x54,0x00,0x00,0x00
000008  2d505282          DCB      0x2d,0x50,0x52,0x82
00000c  51000000          DCB      0x51,0x00,0x00,0x00
000010  2d505282          DCB      0x2d,0x50,0x52,0x82
000014  51000000          DCB      0x51,0x00,0x00,0x00
000018  0a505082          DCB      0x0a,0x50,0x50,0x82
00001c  54000000          DCB      0x54,0x00,0x00,0x00
000020  0a505082          DCB      0x0a,0x50,0x50,0x82
000024  5400              DCB      0x54,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ptModuleModeConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  DebugAlgorithmInfo
                          DCD      0x00000000
                  tTempAlgorithmInfoDebug
                          DCD      0x00000000

                          AREA ||area_number.24||, DATA, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.data||
                  HoppingInitFlag
000000  00                DCB      0x00

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  DoReportOrgPos
000000  00                DCB      0x00

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  ErrorFrameProcessMode
000000  00                DCB      0x00

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  ulDetecForRecovery_Cnt
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=3

                          EXPORTAS ||area_number.28||, ||.data||
                  OperStartTime
                          %        8

                          AREA ||area_number.29||, DATA, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.data||
                  OperEndTime
                          DCD      0x00000000

                          AREA ||i.__ARM_common_memcpy4_8||, COMGROUP=__ARM_common_memcpy4_8, CODE, READONLY, ALIGN=1

                  __ARM_common_memcpy4_8 PROC
000000  680a              LDR      r2,[r1,#0]
000002  684b              LDR      r3,[r1,#4]
000004  6002              STR      r2,[r0,#0]
000006  6043              STR      r3,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memclr4_10||, COMGROUP=__ARM_common_memclr4_10, CODE, READONLY, ALIGN=1

                  __ARM_common_memclr4_10 PROC
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  8101              STRH     r1,[r0,#8]
000008  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\algorithm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___11_algorithm_c_e1335427____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REVSH|
#line 402
|__asm___11_algorithm_c_e1335427____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____RRX|
#line 587
|__asm___11_algorithm_c_e1335427____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
