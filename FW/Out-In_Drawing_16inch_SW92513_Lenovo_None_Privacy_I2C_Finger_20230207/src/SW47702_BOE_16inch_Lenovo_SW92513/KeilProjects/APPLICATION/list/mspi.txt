; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\mspi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\mspi.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\mspi.crf ..\..\Hal\spi\mspi.c]
                          THUMB

                          AREA ||i.MSPI_Cmd||, CODE, READONLY, ALIGN=1

                  MSPI_Cmd PROC
;;;322    
;;;323    void MSPI_Cmd(FunctionalState NewState)
000000  f04f2140          MOV      r1,#0x40004000
;;;324    {
;;;325    	if(NewState != DISABLE)
000004  2800              CMP      r0,#0
;;;326    	{
;;;327    		MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
000006  bf18              IT       NE
000008  200f              MOVNE    r0,#0xf
00000a  6448              STR      r0,[r1,#0x44]
;;;328    	}
;;;329    	else
;;;330    	{
;;;331    		MSPI->tSPISTART.ulBulk = 0;
;;;332    	}
;;;333    }
00000c  4770              BX       lr
;;;334    
                          ENDP


                          AREA ||i.MSPI_GPIO_Init||, CODE, READONLY, ALIGN=1

                  MSPI_GPIO_Init PROC
;;;998    
;;;999    void MSPI_GPIO_Init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1000   {
;;;1001   	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;1002   	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000004  f7fffffe          BL       hal_mspi_GetCommonConfig
;;;1003   	uint32_t ulMSPI_0_En;
;;;1004   	uint32_t ulMSPI_1_En;
;;;1005   	uint32_t ulMSPI_2_En;
;;;1006   	uint32_t ulMSPI_3_En;
;;;1007   	uint32_t ulMSPI_4_En;
;;;1008   	uint32_t ulMSPI_5_En;
;;;1009   	uint32_t ulMSPI_6_En;
;;;1010   	uint32_t ulMSPI_7_En;
;;;1011   
;;;1012   	ulMSPI_0_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna0;
000008  f8900048          LDRB     r0,[r0,#0x48]
00000c  f0100f01          TST      r0,#1
;;;1013   	ulMSPI_1_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna1;
000010  f3c00940          UBFX     r9,r0,#1,#1
;;;1014   	ulMSPI_2_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna2;
000014  f3c00880          UBFX     r8,r0,#2,#1
;;;1015   	ulMSPI_3_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna3;
000018  f3c007c0          UBFX     r7,r0,#3,#1
;;;1016   	ulMSPI_4_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna4;
00001c  f3c01600          UBFX     r6,r0,#4,#1
;;;1017   	ulMSPI_5_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna5;
000020  f3c01540          UBFX     r5,r0,#5,#1
;;;1018   	ulMSPI_6_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna6;
000024  f3c01480          UBFX     r4,r0,#6,#1
;;;1019   	ulMSPI_7_En = kptHalMspiCommonConf->tParam_SPIENA.tBit.spiTxEna7;
000028  ea4f1ad0          LSR      r10,r0,#7
;;;1020   
;;;1021   	/////////////////////////////////////////////////////////////////////////////////
;;;1022   	// MSPI GPIO Initialization
;;;1023   	/////////////////////////////////////////////////////////////////////////////////
;;;1024   	if(ulMSPI_0_En == SPI_DISABLE)
00002c  f0008112          BEQ.W    |L2.596|
;;;1025   	{
;;;1026   		GPIO_Init(_GPIO_MSPI_0_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1027   		GPIO_Init(_GPIO_MSPI_0_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1028   		GPIO_Init(_GPIO_MSPI_0_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1029   		GPIO_Init(_GPIO_MSPI_0_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1030   
;;;1031   
;;;1032   		GPIO_Set_PE(_GPIO_MSPI_0_CSN, GPIO_PE_PULL_DOWM);
;;;1033   		GPIO_Set_PE(_GPIO_MSPI_0_CLK, GPIO_PE_PULL_DOWM);
;;;1034   		GPIO_Set_PE(_GPIO_MSPI_0_MOSI, GPIO_PE_PULL_DOWM);
;;;1035   		GPIO_Set_PE(_GPIO_MSPI_0_MISO, GPIO_PE_PULL_DOWM);
;;;1036   	}
;;;1037   	else
;;;1038   	{
;;;1039   		GPIO_Set_Mode(_GPIO_MSPI_0_CSN, GPIO_MODE_FUNC_0);
000030  2100              MOVS     r1,#0
000032  200b              MOVS     r0,#0xb
000034  f7fffffe          BL       GPIO_Set_Mode
;;;1040   		GPIO_Set_Mode(_GPIO_MSPI_0_CLK, GPIO_MODE_FUNC_0);
000038  2100              MOVS     r1,#0
00003a  200c              MOVS     r0,#0xc
00003c  f7fffffe          BL       GPIO_Set_Mode
;;;1041   		GPIO_Set_Mode(_GPIO_MSPI_0_MOSI, GPIO_MODE_FUNC_0);
000040  2100              MOVS     r1,#0
000042  200d              MOVS     r0,#0xd
000044  f7fffffe          BL       GPIO_Set_Mode
;;;1042   		GPIO_Set_Mode(_GPIO_MSPI_0_MISO, GPIO_MODE_FUNC_0);
000048  2100              MOVS     r1,#0
00004a  200e              MOVS     r0,#0xe
00004c  f7fffffe          BL       GPIO_Set_Mode
;;;1043   
;;;1044   		GPIO_Set_DS(_GPIO_MSPI_0_CSN, PARAMSET_MSPI_0_CSN_DRVSTR_LEVEL);
000050  2100              MOVS     r1,#0
000052  200b              MOVS     r0,#0xb
000054  f7fffffe          BL       GPIO_Set_DS
;;;1045   		GPIO_Set_DS(_GPIO_MSPI_0_CLK, PARAMSET_MSPI_0_CLK_DRVSTR_LEVEL);
000058  2102              MOVS     r1,#2
00005a  200c              MOVS     r0,#0xc
00005c  f7fffffe          BL       GPIO_Set_DS
;;;1046   		GPIO_Set_DS(_GPIO_MSPI_0_MOSI, PARAMSET_MSPI_0_MOSI_DRVSTR_LEVEL);
000060  2102              MOVS     r1,#2
000062  200d              MOVS     r0,#0xd
000064  f7fffffe          BL       GPIO_Set_DS
                  |L2.104|
;;;1047   	}
;;;1048   
;;;1049   	if(ulMSPI_1_En == SPI_DISABLE)
000068  f1b90f00          CMP      r9,#0
00006c  f000811b          BEQ.W    |L2.678|
;;;1050   	{
;;;1051   		GPIO_Init(_GPIO_MSPI_1_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1052   		GPIO_Init(_GPIO_MSPI_1_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1053   		GPIO_Init(_GPIO_MSPI_1_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1054   		GPIO_Init(_GPIO_MSPI_1_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1055   
;;;1056   		GPIO_Set_PE(_GPIO_MSPI_1_CSN, GPIO_PE_PULL_DOWM);
;;;1057   		GPIO_Set_PE(_GPIO_MSPI_1_CLK, GPIO_PE_PULL_DOWM);
;;;1058   		GPIO_Set_PE(_GPIO_MSPI_1_MOSI, GPIO_PE_PULL_DOWM);
;;;1059   		GPIO_Set_PE(_GPIO_MSPI_1_MISO, GPIO_PE_PULL_DOWM);
;;;1060   	}
;;;1061   	else
;;;1062   	{
;;;1063   		GPIO_Set_Mode(_GPIO_MSPI_1_CSN, GPIO_MODE_FUNC_0);
000070  2100              MOVS     r1,#0
000072  200f              MOVS     r0,#0xf
000074  f7fffffe          BL       GPIO_Set_Mode
;;;1064   		GPIO_Set_Mode(_GPIO_MSPI_1_CLK, GPIO_MODE_FUNC_0);
000078  2100              MOVS     r1,#0
00007a  2010              MOVS     r0,#0x10
00007c  f7fffffe          BL       GPIO_Set_Mode
;;;1065   		GPIO_Set_Mode(_GPIO_MSPI_1_MOSI, GPIO_MODE_FUNC_0);
000080  2100              MOVS     r1,#0
000082  2011              MOVS     r0,#0x11
000084  f7fffffe          BL       GPIO_Set_Mode
;;;1066   		GPIO_Set_Mode(_GPIO_MSPI_1_MISO, GPIO_MODE_FUNC_0);
000088  2100              MOVS     r1,#0
00008a  2012              MOVS     r0,#0x12
00008c  f7fffffe          BL       GPIO_Set_Mode
;;;1067   
;;;1068   		GPIO_Set_DS(_GPIO_MSPI_1_CSN, PARAMSET_MSPI_1_CSN_DRVSTR_LEVEL);
000090  2100              MOVS     r1,#0
000092  200f              MOVS     r0,#0xf
000094  f7fffffe          BL       GPIO_Set_DS
;;;1069   		GPIO_Set_DS(_GPIO_MSPI_1_CLK, PARAMSET_MSPI_1_CLK_DRVSTR_LEVEL);
000098  2102              MOVS     r1,#2
00009a  2010              MOVS     r0,#0x10
00009c  f7fffffe          BL       GPIO_Set_DS
;;;1070   		GPIO_Set_DS(_GPIO_MSPI_1_MOSI, PARAMSET_MSPI_1_MOSI_DRVSTR_LEVEL);
0000a0  2102              MOVS     r1,#2
0000a2  2011              MOVS     r0,#0x11
0000a4  f7fffffe          BL       GPIO_Set_DS
                  |L2.168|
;;;1071   	}
;;;1072   
;;;1073   	if(ulMSPI_2_En == SPI_DISABLE)
0000a8  f1b80f00          CMP      r8,#0
0000ac  f0008124          BEQ.W    |L2.760|
;;;1074   	{
;;;1075   		GPIO_Init(_GPIO_MSPI_2_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1076   		GPIO_Init(_GPIO_MSPI_2_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1077   		GPIO_Init(_GPIO_MSPI_2_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1078   		GPIO_Init(_GPIO_MSPI_2_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1079   
;;;1080   		GPIO_Set_PE(_GPIO_MSPI_2_CSN, GPIO_PE_PULL_DOWM);
;;;1081   		GPIO_Set_PE(_GPIO_MSPI_2_CLK, GPIO_PE_PULL_DOWM);
;;;1082   		GPIO_Set_PE(_GPIO_MSPI_2_MOSI, GPIO_PE_PULL_DOWM);
;;;1083   		GPIO_Set_PE(_GPIO_MSPI_2_MISO, GPIO_PE_PULL_DOWM);
;;;1084   	}
;;;1085   	else
;;;1086   	{
;;;1087   		GPIO_Set_Mode(_GPIO_MSPI_2_CSN, GPIO_MODE_FUNC_0);
0000b0  2100              MOVS     r1,#0
0000b2  2013              MOVS     r0,#0x13
0000b4  f7fffffe          BL       GPIO_Set_Mode
;;;1088   		GPIO_Set_Mode(_GPIO_MSPI_2_CLK, GPIO_MODE_FUNC_0);
0000b8  2100              MOVS     r1,#0
0000ba  2014              MOVS     r0,#0x14
0000bc  f7fffffe          BL       GPIO_Set_Mode
;;;1089   		GPIO_Set_Mode(_GPIO_MSPI_2_MOSI, GPIO_MODE_FUNC_0);
0000c0  2100              MOVS     r1,#0
0000c2  2015              MOVS     r0,#0x15
0000c4  f7fffffe          BL       GPIO_Set_Mode
;;;1090   		GPIO_Set_Mode(_GPIO_MSPI_2_MISO, GPIO_MODE_FUNC_0);
0000c8  2100              MOVS     r1,#0
0000ca  2016              MOVS     r0,#0x16
0000cc  f7fffffe          BL       GPIO_Set_Mode
;;;1091   
;;;1092   		GPIO_Set_DS(_GPIO_MSPI_2_CSN, PARAMSET_MSPI_2_CSN_DRVSTR_LEVEL);
0000d0  2100              MOVS     r1,#0
0000d2  2013              MOVS     r0,#0x13
0000d4  f7fffffe          BL       GPIO_Set_DS
;;;1093   		GPIO_Set_DS(_GPIO_MSPI_2_CLK, PARAMSET_MSPI_2_CLK_DRVSTR_LEVEL);
0000d8  2102              MOVS     r1,#2
0000da  2014              MOVS     r0,#0x14
0000dc  f7fffffe          BL       GPIO_Set_DS
;;;1094   		GPIO_Set_DS(_GPIO_MSPI_2_MOSI, PARAMSET_MSPI_2_MOSI_DRVSTR_LEVEL);
0000e0  2102              MOVS     r1,#2
0000e2  2015              MOVS     r0,#0x15
0000e4  f7fffffe          BL       GPIO_Set_DS
                  |L2.232|
;;;1095   	}
;;;1096   
;;;1097   	if(ulMSPI_3_En == SPI_DISABLE)
0000e8  2f00              CMP      r7,#0
0000ea  f000812e          BEQ.W    |L2.842|
;;;1098   	{
;;;1099   		GPIO_Init(_GPIO_MSPI_3_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1100   		GPIO_Init(_GPIO_MSPI_3_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1101   		GPIO_Init(_GPIO_MSPI_3_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1102   		GPIO_Init(_GPIO_MSPI_3_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1103   
;;;1104   		GPIO_Set_PE(_GPIO_MSPI_3_CSN, GPIO_PE_PULL_DOWM);
;;;1105   		GPIO_Set_PE(_GPIO_MSPI_3_CLK, GPIO_PE_PULL_DOWM);
;;;1106   		GPIO_Set_PE(_GPIO_MSPI_3_MOSI, GPIO_PE_PULL_DOWM);
;;;1107   		GPIO_Set_PE(_GPIO_MSPI_3_MISO, GPIO_PE_PULL_DOWM);
;;;1108   	}
;;;1109   	else
;;;1110   	{
;;;1111   		GPIO_Set_Mode(_GPIO_MSPI_3_CSN, GPIO_MODE_FUNC_0);
0000ee  2100              MOVS     r1,#0
0000f0  2017              MOVS     r0,#0x17
0000f2  f7fffffe          BL       GPIO_Set_Mode
;;;1112   		GPIO_Set_Mode(_GPIO_MSPI_3_CLK, GPIO_MODE_FUNC_0);
0000f6  2100              MOVS     r1,#0
0000f8  2018              MOVS     r0,#0x18
0000fa  f7fffffe          BL       GPIO_Set_Mode
;;;1113   		GPIO_Set_Mode(_GPIO_MSPI_3_MOSI, GPIO_MODE_FUNC_0);
0000fe  2100              MOVS     r1,#0
000100  2019              MOVS     r0,#0x19
000102  f7fffffe          BL       GPIO_Set_Mode
;;;1114   		GPIO_Set_Mode(_GPIO_MSPI_3_MISO, GPIO_MODE_FUNC_0);
000106  2100              MOVS     r1,#0
000108  201a              MOVS     r0,#0x1a
00010a  f7fffffe          BL       GPIO_Set_Mode
;;;1115   
;;;1116   		GPIO_Set_DS(_GPIO_MSPI_3_CSN, PARAMSET_MSPI_3_CSN_DRVSTR_LEVEL);
00010e  2100              MOVS     r1,#0
000110  2017              MOVS     r0,#0x17
000112  f7fffffe          BL       GPIO_Set_DS
;;;1117   		GPIO_Set_DS(_GPIO_MSPI_3_CLK, PARAMSET_MSPI_3_CLK_DRVSTR_LEVEL);
000116  2102              MOVS     r1,#2
000118  2018              MOVS     r0,#0x18
00011a  f7fffffe          BL       GPIO_Set_DS
;;;1118   		GPIO_Set_DS(_GPIO_MSPI_3_MOSI, PARAMSET_MSPI_3_MOSI_DRVSTR_LEVEL);
00011e  2102              MOVS     r1,#2
000120  2019              MOVS     r0,#0x19
000122  f7fffffe          BL       GPIO_Set_DS
                  |L2.294|
;;;1119   	}
;;;1120   
;;;1121   	if(ulMSPI_4_En == SPI_DISABLE)
000126  2e00              CMP      r6,#0
000128  f0008138          BEQ.W    |L2.924|
;;;1122   	{
;;;1123   		GPIO_Init(_GPIO_MSPI_4_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1124   		GPIO_Init(_GPIO_MSPI_4_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1125   		GPIO_Init(_GPIO_MSPI_4_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1126   		GPIO_Init(_GPIO_MSPI_4_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1127   
;;;1128   		GPIO_Set_PE(_GPIO_MSPI_4_CSN, GPIO_PE_PULL_DOWM);
;;;1129   		GPIO_Set_PE(_GPIO_MSPI_4_CLK, GPIO_PE_PULL_DOWM);
;;;1130   		GPIO_Set_PE(_GPIO_MSPI_4_MOSI, GPIO_PE_PULL_DOWM);
;;;1131   		GPIO_Set_PE(_GPIO_MSPI_4_MISO, GPIO_PE_PULL_DOWM);
;;;1132   	}
;;;1133   	else
;;;1134   	{
;;;1135   		GPIO_Set_Mode(_GPIO_MSPI_4_CSN, GPIO_MODE_FUNC_0);
00012c  2100              MOVS     r1,#0
00012e  201b              MOVS     r0,#0x1b
000130  f7fffffe          BL       GPIO_Set_Mode
;;;1136   		GPIO_Set_Mode(_GPIO_MSPI_4_CLK, GPIO_MODE_FUNC_0);
000134  2100              MOVS     r1,#0
000136  201c              MOVS     r0,#0x1c
000138  f7fffffe          BL       GPIO_Set_Mode
;;;1137   		GPIO_Set_Mode(_GPIO_MSPI_4_MOSI, GPIO_MODE_FUNC_0);
00013c  2100              MOVS     r1,#0
00013e  201d              MOVS     r0,#0x1d
000140  f7fffffe          BL       GPIO_Set_Mode
;;;1138   		GPIO_Set_Mode(_GPIO_MSPI_4_MISO, GPIO_MODE_FUNC_0);
000144  2100              MOVS     r1,#0
000146  201e              MOVS     r0,#0x1e
000148  f7fffffe          BL       GPIO_Set_Mode
;;;1139   
;;;1140   		GPIO_Set_DS(_GPIO_MSPI_4_CSN, PARAMSET_MSPI_4_CSN_DRVSTR_LEVEL);
00014c  2100              MOVS     r1,#0
00014e  201b              MOVS     r0,#0x1b
000150  f7fffffe          BL       GPIO_Set_DS
;;;1141   		GPIO_Set_DS(_GPIO_MSPI_4_CLK, PARAMSET_MSPI_4_CLK_DRVSTR_LEVEL);
000154  2102              MOVS     r1,#2
000156  201c              MOVS     r0,#0x1c
000158  f7fffffe          BL       GPIO_Set_DS
;;;1142   		GPIO_Set_DS(_GPIO_MSPI_4_MOSI, PARAMSET_MSPI_4_MOSI_DRVSTR_LEVEL);
00015c  2102              MOVS     r1,#2
00015e  201d              MOVS     r0,#0x1d
000160  f7fffffe          BL       GPIO_Set_DS
                  |L2.356|
;;;1143   	}
;;;1144   
;;;1145   	if(ulMSPI_5_En == SPI_DISABLE)
000164  2d00              CMP      r5,#0
000166  f0008142          BEQ.W    |L2.1006|
;;;1146   	{
;;;1147   		GPIO_Init(_GPIO_MSPI_5_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1148   #if !USED_TPIC_PENEN_ON_OFF_CONTROL
;;;1149   		GPIO_Init(_GPIO_MSPI_5_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1150   #endif
;;;1151   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1152   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1153   		GPIO_Init(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1154   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1155   #elif (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1156   		GPIO_Init(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1157   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1158   		GPIO_Init(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1159   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1160   		GPIO_Init(_GPIO_MSPI_5_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1161   
;;;1162   		GPIO_Set_PE(_GPIO_MSPI_5_CSN, GPIO_PE_PULL_DOWM);
;;;1163   #if !USED_TPIC_PENEN_ON_OFF_CONTROL
;;;1164   		GPIO_Set_PE(_GPIO_MSPI_5_CLK, GPIO_PE_PULL_DOWM);
;;;1165   #endif
;;;1166   
;;;1167   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1168   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1169   		GPIO_Set_PE(_GPIO_MSPI_5_MOSI, GPIO_PE_PULL_DOWM);
;;;1170   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1171   #elif (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1172   		GPIO_Set_PE(_GPIO_MSPI_5_MOSI, GPIO_PE_PULL_DOWM);
;;;1173   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1174   		GPIO_Set_PE(_GPIO_MSPI_5_MOSI, GPIO_PE_PULL_DOWM);
;;;1175   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1176   		GPIO_Set_PE(_GPIO_MSPI_5_MISO, GPIO_PE_PULL_DOWM);
;;;1177   	}
;;;1178   	else
;;;1179   	{
;;;1180   		GPIO_Set_Mode(_GPIO_MSPI_5_CSN, GPIO_MODE_FUNC_0);
00016a  2100              MOVS     r1,#0
00016c  201f              MOVS     r0,#0x1f
00016e  f7fffffe          BL       GPIO_Set_Mode
;;;1181   #if !USED_TPIC_PENEN_ON_OFF_CONTROL
;;;1182   		GPIO_Set_Mode(_GPIO_MSPI_5_CLK, GPIO_MODE_FUNC_0);
000172  2100              MOVS     r1,#0
000174  2020              MOVS     r0,#0x20
000176  f7fffffe          BL       GPIO_Set_Mode
;;;1183   #endif
;;;1184   
;;;1185   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1186   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1187   		GPIO_Set_Mode(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_0);
;;;1188   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1189   #elif (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1190   		GPIO_Set_Mode(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_0);
;;;1191   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1192   		GPIO_Set_Mode(_GPIO_MSPI_5_MOSI, GPIO_MODE_FUNC_0);
00017a  2100              MOVS     r1,#0
00017c  2021              MOVS     r0,#0x21
00017e  f7fffffe          BL       GPIO_Set_Mode
;;;1193   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1194   		GPIO_Set_Mode(_GPIO_MSPI_5_MISO, GPIO_MODE_FUNC_0);
000182  2100              MOVS     r1,#0
000184  2022              MOVS     r0,#0x22
000186  f7fffffe          BL       GPIO_Set_Mode
;;;1195   
;;;1196   		GPIO_Set_DS(_GPIO_MSPI_5_CSN, PARAMSET_MSPI_5_CSN_DRVSTR_LEVEL);
00018a  2100              MOVS     r1,#0
00018c  201f              MOVS     r0,#0x1f
00018e  f7fffffe          BL       GPIO_Set_DS
;;;1197   #if !USED_TPIC_PENEN_ON_OFF_CONTROL
;;;1198   		GPIO_Set_DS(_GPIO_MSPI_5_CLK, PARAMSET_MSPI_5_CLK_DRVSTR_LEVEL);
000192  2102              MOVS     r1,#2
000194  2020              MOVS     r0,#0x20
000196  f7fffffe          BL       GPIO_Set_DS
;;;1199   #endif
;;;1200   
;;;1201   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1202   	#if (USED_PCB_PINMAP != SHARP_NBPC_PIN_TYPE_S01)
;;;1203   		GPIO_Set_DS(_GPIO_MSPI_5_MOSI, PARAMSET_MSPI_5_MOSI_DRVSTR_LEVEL);
;;;1204   	#endif /* (USED_PCB_PINMAP == SHARP_NBPC_PIN_TYPE_S01) */
;;;1205   #elif (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1206   		GPIO_Set_DS(_GPIO_MSPI_5_MOSI, PARAMSET_MSPI_5_MOSI_DRVSTR_LEVEL);
;;;1207   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1208   
;;;1209   		GPIO_Set_DS(_GPIO_MSPI_5_MOSI, PARAMSET_MSPI_5_MOSI_DRVSTR_LEVEL);
00019a  2102              MOVS     r1,#2
00019c  2021              MOVS     r0,#0x21
00019e  f7fffffe          BL       GPIO_Set_DS
                  |L2.418|
;;;1210   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1211   	}
;;;1212   
;;;1213   	if(ulMSPI_6_En == SPI_DISABLE)
0001a2  2c00              CMP      r4,#0
0001a4  f000814c          BEQ.W    |L2.1088|
;;;1214   	{
;;;1215   		GPIO_Init(_GPIO_MSPI_6_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1216   		GPIO_Init(_GPIO_MSPI_6_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1217   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN)) && \
;;;1218   		!((USED_MODULE_DEF == MODULE_DEF_T_1)) && !((USED_MODULE_DEF == MODULE_DEF_B_1) && ((CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_WGP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_MPP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_SPLIT_MPP))) && \
;;;1219   		!(USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1220   		GPIO_Init(_GPIO_MSPI_6_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1221   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1222   		GPIO_Init(_GPIO_MSPI_6_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1223   
;;;1224   		GPIO_Set_PE(_GPIO_MSPI_6_CSN, GPIO_PE_PULL_DOWM);
;;;1225   		GPIO_Set_PE(_GPIO_MSPI_6_CLK, GPIO_PE_PULL_DOWM);
;;;1226   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN)) && \
;;;1227   		!((USED_MODULE_DEF == MODULE_DEF_T_1)) && !((USED_MODULE_DEF == MODULE_DEF_B_1) && ((CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_WGP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_MPP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_SPLIT_MPP))) && \
;;;1228   		!(USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1229   		GPIO_Set_PE(_GPIO_MSPI_6_MOSI, GPIO_PE_PULL_DOWM);
;;;1230   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1231   		GPIO_Set_PE(_GPIO_MSPI_6_MISO, GPIO_PE_PULL_DOWM);
;;;1232   	}
;;;1233   	else
;;;1234   	{
;;;1235   		GPIO_Set_Mode(_GPIO_MSPI_6_CSN, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_SSN
0001a8  2100              MOVS     r1,#0
0001aa  2023              MOVS     r0,#0x23
0001ac  f7fffffe          BL       GPIO_Set_Mode
;;;1236   		GPIO_Set_Mode(_GPIO_MSPI_6_CLK, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_SCLK
0001b0  2100              MOVS     r1,#0
0001b2  2024              MOVS     r0,#0x24
0001b4  f7fffffe          BL       GPIO_Set_Mode
;;;1237   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN)) && \
;;;1238   		!((USED_MODULE_DEF == MODULE_DEF_T_1)) && !((USED_MODULE_DEF == MODULE_DEF_B_1) && ((CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_WGP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_MPP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_SPLIT_MPP))) && \
;;;1239   		!(USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1240   		GPIO_Set_Mode(_GPIO_MSPI_6_MOSI, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_MOSI
;;;1241   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1242   		GPIO_Set_Mode(_GPIO_MSPI_6_MISO, GPIO_MODE_FUNC_0);	// 0:GPIO, 1:MSPI5_MST_MISO
0001b8  2100              MOVS     r1,#0
0001ba  2026              MOVS     r0,#0x26
0001bc  f7fffffe          BL       GPIO_Set_Mode
;;;1243   
;;;1244   		GPIO_Set_DS(_GPIO_MSPI_6_CSN, PARAMSET_MSPI_6_CSN_DRVSTR_LEVEL);
0001c0  2100              MOVS     r1,#0
0001c2  2023              MOVS     r0,#0x23
0001c4  f7fffffe          BL       GPIO_Set_DS
;;;1245   		GPIO_Set_DS(_GPIO_MSPI_6_CLK, PARAMSET_MSPI_6_CLK_DRVSTR_LEVEL);
0001c8  2102              MOVS     r1,#2
0001ca  2024              MOVS     r0,#0x24
0001cc  f7fffffe          BL       GPIO_Set_DS
                  |L2.464|
;;;1246   #if ((!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) && (!USED_GPIO_MSPI_6_IS_MUX_EN)) && \
;;;1247   		!((USED_MODULE_DEF == MODULE_DEF_T_1)) && !((USED_MODULE_DEF == MODULE_DEF_B_1) && ((CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_WGP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_MPP) || (CUSTOMER == MODEL_DEF_SQHD_92509_HUANAN_SPLIT_MPP))) && \
;;;1248   		!(USED_MODULE_DEF == MODULE_DEF_A_1)
;;;1249   		GPIO_Set_DS(_GPIO_MSPI_6_MOSI, PARAMSET_MSPI_6_MOSI_DRVSTR_LEVEL);
;;;1250   #endif /* (!((USED_MODULE_DEF == MODULE_DEF_B_1) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))) */
;;;1251   	}
;;;1252   
;;;1253   	if(ulMSPI_7_En == SPI_DISABLE)
0001d0  f1ba0f00          CMP      r10,#0
0001d4  f0008153          BEQ.W    |L2.1150|
;;;1254   	{
;;;1255   		GPIO_Init(_GPIO_MSPI_7_CSN, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1256   		GPIO_Init(_GPIO_MSPI_7_CLK, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1257   	#if !USED_PWM_GATE_CONTROL
;;;1258   		GPIO_Init(_GPIO_MSPI_7_MOSI, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1259   	#endif
;;;1260   		GPIO_Init(_GPIO_MSPI_7_MISO, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_LOW);
;;;1261   
;;;1262   		GPIO_Set_PE(_GPIO_MSPI_7_CSN, GPIO_PE_PULL_DOWM);
;;;1263   		GPIO_Set_PE(_GPIO_MSPI_7_CLK, GPIO_PE_PULL_DOWM);
;;;1264   	#if !USED_PWM_GATE_CONTROL
;;;1265   		GPIO_Set_PE(_GPIO_MSPI_7_MOSI, GPIO_PE_PULL_DOWM);
;;;1266   	#endif
;;;1267   		GPIO_Set_PE(_GPIO_MSPI_7_MISO, GPIO_PE_PULL_DOWM);
;;;1268   	}
;;;1269   	else
;;;1270   	{
;;;1271   		GPIO_Set_Mode(_GPIO_MSPI_7_CSN, GPIO_MODE_FUNC_0);
0001d8  2100              MOVS     r1,#0
0001da  2027              MOVS     r0,#0x27
0001dc  f7fffffe          BL       GPIO_Set_Mode
;;;1272   		GPIO_Set_Mode(_GPIO_MSPI_7_CLK, GPIO_MODE_FUNC_0);
0001e0  2100              MOVS     r1,#0
0001e2  2028              MOVS     r0,#0x28
0001e4  f7fffffe          BL       GPIO_Set_Mode
;;;1273   	#if !USED_PWM_GATE_CONTROL
;;;1274   		GPIO_Set_Mode(_GPIO_MSPI_7_MOSI, GPIO_MODE_FUNC_0);
0001e8  2100              MOVS     r1,#0
0001ea  2029              MOVS     r0,#0x29
0001ec  f7fffffe          BL       GPIO_Set_Mode
;;;1275   	#endif
;;;1276   		GPIO_Set_Mode(_GPIO_MSPI_7_MISO, GPIO_MODE_FUNC_0);
0001f0  2100              MOVS     r1,#0
0001f2  202a              MOVS     r0,#0x2a
0001f4  f7fffffe          BL       GPIO_Set_Mode
;;;1277   
;;;1278   		GPIO_Set_DS(_GPIO_MSPI_7_CSN, PARAMSET_MSPI_7_CSN_DRVSTR_LEVEL);
0001f8  2100              MOVS     r1,#0
0001fa  2027              MOVS     r0,#0x27
0001fc  f7fffffe          BL       GPIO_Set_DS
;;;1279   		GPIO_Set_DS(_GPIO_MSPI_7_CLK, PARAMSET_MSPI_7_CLK_DRVSTR_LEVEL);
000200  2102              MOVS     r1,#2
000202  2028              MOVS     r0,#0x28
000204  f7fffffe          BL       GPIO_Set_DS
;;;1280   	#if !USED_PWM_GATE_CONTROL
;;;1281   		GPIO_Set_DS(_GPIO_MSPI_7_MOSI, PARAMSET_MSPI_7_MOSI_DRVSTR_LEVEL);
000208  2102              MOVS     r1,#2
00020a  2029              MOVS     r0,#0x29
00020c  f7fffffe          BL       GPIO_Set_DS
                  |L2.528|
;;;1282   	#endif
;;;1283   	}
;;;1284   	GPIO_Set_PE(_GPIO_MSPI_0_MISO, GPIO_PE_PULL_DOWM);
000210  2101              MOVS     r1,#1
000212  200e              MOVS     r0,#0xe
000214  f7fffffe          BL       GPIO_Set_PE
;;;1285   	GPIO_Set_PE(_GPIO_MSPI_1_MISO, GPIO_PE_PULL_DOWM);
000218  2101              MOVS     r1,#1
00021a  2012              MOVS     r0,#0x12
00021c  f7fffffe          BL       GPIO_Set_PE
;;;1286   	GPIO_Set_PE(_GPIO_MSPI_2_MISO, GPIO_PE_PULL_DOWM);
000220  2101              MOVS     r1,#1
000222  2016              MOVS     r0,#0x16
000224  f7fffffe          BL       GPIO_Set_PE
;;;1287   	GPIO_Set_PE(_GPIO_MSPI_3_MISO, GPIO_PE_PULL_DOWM);
000228  2101              MOVS     r1,#1
00022a  201a              MOVS     r0,#0x1a
00022c  f7fffffe          BL       GPIO_Set_PE
;;;1288   	GPIO_Set_PE(_GPIO_MSPI_4_MISO, GPIO_PE_PULL_DOWM);
000230  2101              MOVS     r1,#1
000232  201e              MOVS     r0,#0x1e
000234  f7fffffe          BL       GPIO_Set_PE
;;;1289   	GPIO_Set_PE(_GPIO_MSPI_5_MISO, GPIO_PE_PULL_DOWM);
000238  2101              MOVS     r1,#1
00023a  2022              MOVS     r0,#0x22
00023c  f7fffffe          BL       GPIO_Set_PE
;;;1290   	GPIO_Set_PE(_GPIO_MSPI_6_MISO, GPIO_PE_PULL_DOWM);
000240  2101              MOVS     r1,#1
000242  2026              MOVS     r0,#0x26
000244  f7fffffe          BL       GPIO_Set_PE
;;;1291   	GPIO_Set_PE(_GPIO_MSPI_7_MISO, GPIO_PE_PULL_DOWM);
000248  e8bd47f0          POP      {r4-r10,lr}
00024c  2101              MOVS     r1,#1
00024e  202a              MOVS     r0,#0x2a
000250  f7ffbffe          B.W      GPIO_Set_PE
                  |L2.596|
000254  2300              MOVS     r3,#0                 ;1026
000256  461a              MOV      r2,r3                 ;1026
000258  2103              MOVS     r1,#3                 ;1026
00025a  200b              MOVS     r0,#0xb               ;1026
00025c  f7fffffe          BL       GPIO_Init
000260  2300              MOVS     r3,#0                 ;1027
000262  461a              MOV      r2,r3                 ;1027
000264  2103              MOVS     r1,#3                 ;1027
000266  200c              MOVS     r0,#0xc               ;1027
000268  f7fffffe          BL       GPIO_Init
00026c  2300              MOVS     r3,#0                 ;1028
00026e  461a              MOV      r2,r3                 ;1028
000270  2103              MOVS     r1,#3                 ;1028
000272  200d              MOVS     r0,#0xd               ;1028
000274  f7fffffe          BL       GPIO_Init
000278  2300              MOVS     r3,#0                 ;1029
00027a  461a              MOV      r2,r3                 ;1029
00027c  2103              MOVS     r1,#3                 ;1029
00027e  200e              MOVS     r0,#0xe               ;1029
000280  f7fffffe          BL       GPIO_Init
000284  2101              MOVS     r1,#1                 ;1032
000286  200b              MOVS     r0,#0xb               ;1032
000288  f7fffffe          BL       GPIO_Set_PE
00028c  2101              MOVS     r1,#1                 ;1033
00028e  200c              MOVS     r0,#0xc               ;1033
000290  f7fffffe          BL       GPIO_Set_PE
000294  2101              MOVS     r1,#1                 ;1034
000296  200d              MOVS     r0,#0xd               ;1034
000298  f7fffffe          BL       GPIO_Set_PE
00029c  2101              MOVS     r1,#1                 ;1035
00029e  200e              MOVS     r0,#0xe               ;1035
0002a0  f7fffffe          BL       GPIO_Set_PE
0002a4  e6e0              B        |L2.104|
                  |L2.678|
0002a6  2300              MOVS     r3,#0                 ;1051
0002a8  461a              MOV      r2,r3                 ;1051
0002aa  2103              MOVS     r1,#3                 ;1051
0002ac  200f              MOVS     r0,#0xf               ;1051
0002ae  f7fffffe          BL       GPIO_Init
0002b2  2300              MOVS     r3,#0                 ;1052
0002b4  461a              MOV      r2,r3                 ;1052
0002b6  2103              MOVS     r1,#3                 ;1052
0002b8  2010              MOVS     r0,#0x10              ;1052
0002ba  f7fffffe          BL       GPIO_Init
0002be  2300              MOVS     r3,#0                 ;1053
0002c0  461a              MOV      r2,r3                 ;1053
0002c2  2103              MOVS     r1,#3                 ;1053
0002c4  2011              MOVS     r0,#0x11              ;1053
0002c6  f7fffffe          BL       GPIO_Init
0002ca  2300              MOVS     r3,#0                 ;1054
0002cc  461a              MOV      r2,r3                 ;1054
0002ce  2103              MOVS     r1,#3                 ;1054
0002d0  2012              MOVS     r0,#0x12              ;1054
0002d2  f7fffffe          BL       GPIO_Init
0002d6  2101              MOVS     r1,#1                 ;1056
0002d8  200f              MOVS     r0,#0xf               ;1056
0002da  f7fffffe          BL       GPIO_Set_PE
0002de  2101              MOVS     r1,#1                 ;1057
0002e0  2010              MOVS     r0,#0x10              ;1057
0002e2  f7fffffe          BL       GPIO_Set_PE
0002e6  2101              MOVS     r1,#1                 ;1058
0002e8  2011              MOVS     r0,#0x11              ;1058
0002ea  f7fffffe          BL       GPIO_Set_PE
0002ee  2101              MOVS     r1,#1                 ;1059
0002f0  2012              MOVS     r0,#0x12              ;1059
0002f2  f7fffffe          BL       GPIO_Set_PE
0002f6  e6d7              B        |L2.168|
                  |L2.760|
0002f8  2300              MOVS     r3,#0                 ;1075
0002fa  461a              MOV      r2,r3                 ;1075
0002fc  2103              MOVS     r1,#3                 ;1075
0002fe  2013              MOVS     r0,#0x13              ;1075
000300  f7fffffe          BL       GPIO_Init
000304  2300              MOVS     r3,#0                 ;1076
000306  461a              MOV      r2,r3                 ;1076
000308  2103              MOVS     r1,#3                 ;1076
00030a  2014              MOVS     r0,#0x14              ;1076
00030c  f7fffffe          BL       GPIO_Init
000310  2300              MOVS     r3,#0                 ;1077
000312  461a              MOV      r2,r3                 ;1077
000314  2103              MOVS     r1,#3                 ;1077
000316  2015              MOVS     r0,#0x15              ;1077
000318  f7fffffe          BL       GPIO_Init
00031c  2300              MOVS     r3,#0                 ;1078
00031e  461a              MOV      r2,r3                 ;1078
000320  2103              MOVS     r1,#3                 ;1078
000322  2016              MOVS     r0,#0x16              ;1078
000324  f7fffffe          BL       GPIO_Init
000328  2101              MOVS     r1,#1                 ;1080
00032a  2013              MOVS     r0,#0x13              ;1080
00032c  f7fffffe          BL       GPIO_Set_PE
000330  2101              MOVS     r1,#1                 ;1081
000332  2014              MOVS     r0,#0x14              ;1081
000334  f7fffffe          BL       GPIO_Set_PE
000338  2101              MOVS     r1,#1                 ;1082
00033a  2015              MOVS     r0,#0x15              ;1082
00033c  f7fffffe          BL       GPIO_Set_PE
000340  2101              MOVS     r1,#1                 ;1083
000342  2016              MOVS     r0,#0x16              ;1083
000344  f7fffffe          BL       GPIO_Set_PE
000348  e6ce              B        |L2.232|
                  |L2.842|
00034a  2300              MOVS     r3,#0                 ;1099
00034c  461a              MOV      r2,r3                 ;1099
00034e  2103              MOVS     r1,#3                 ;1099
000350  2017              MOVS     r0,#0x17              ;1099
000352  f7fffffe          BL       GPIO_Init
000356  2300              MOVS     r3,#0                 ;1100
000358  461a              MOV      r2,r3                 ;1100
00035a  2103              MOVS     r1,#3                 ;1100
00035c  2018              MOVS     r0,#0x18              ;1100
00035e  f7fffffe          BL       GPIO_Init
000362  2300              MOVS     r3,#0                 ;1101
000364  461a              MOV      r2,r3                 ;1101
000366  2103              MOVS     r1,#3                 ;1101
000368  2019              MOVS     r0,#0x19              ;1101
00036a  f7fffffe          BL       GPIO_Init
00036e  2300              MOVS     r3,#0                 ;1102
000370  461a              MOV      r2,r3                 ;1102
000372  2103              MOVS     r1,#3                 ;1102
000374  201a              MOVS     r0,#0x1a              ;1102
000376  f7fffffe          BL       GPIO_Init
00037a  2101              MOVS     r1,#1                 ;1104
00037c  2017              MOVS     r0,#0x17              ;1104
00037e  f7fffffe          BL       GPIO_Set_PE
000382  2101              MOVS     r1,#1                 ;1105
000384  2018              MOVS     r0,#0x18              ;1105
000386  f7fffffe          BL       GPIO_Set_PE
00038a  2101              MOVS     r1,#1                 ;1106
00038c  2019              MOVS     r0,#0x19              ;1106
00038e  f7fffffe          BL       GPIO_Set_PE
000392  2101              MOVS     r1,#1                 ;1107
000394  201a              MOVS     r0,#0x1a              ;1107
000396  f7fffffe          BL       GPIO_Set_PE
00039a  e6c4              B        |L2.294|
                  |L2.924|
00039c  2300              MOVS     r3,#0                 ;1123
00039e  461a              MOV      r2,r3                 ;1123
0003a0  2103              MOVS     r1,#3                 ;1123
0003a2  201b              MOVS     r0,#0x1b              ;1123
0003a4  f7fffffe          BL       GPIO_Init
0003a8  2300              MOVS     r3,#0                 ;1124
0003aa  461a              MOV      r2,r3                 ;1124
0003ac  2103              MOVS     r1,#3                 ;1124
0003ae  201c              MOVS     r0,#0x1c              ;1124
0003b0  f7fffffe          BL       GPIO_Init
0003b4  2300              MOVS     r3,#0                 ;1125
0003b6  461a              MOV      r2,r3                 ;1125
0003b8  2103              MOVS     r1,#3                 ;1125
0003ba  201d              MOVS     r0,#0x1d              ;1125
0003bc  f7fffffe          BL       GPIO_Init
0003c0  2300              MOVS     r3,#0                 ;1126
0003c2  461a              MOV      r2,r3                 ;1126
0003c4  2103              MOVS     r1,#3                 ;1126
0003c6  201e              MOVS     r0,#0x1e              ;1126
0003c8  f7fffffe          BL       GPIO_Init
0003cc  2101              MOVS     r1,#1                 ;1128
0003ce  201b              MOVS     r0,#0x1b              ;1128
0003d0  f7fffffe          BL       GPIO_Set_PE
0003d4  2101              MOVS     r1,#1                 ;1129
0003d6  201c              MOVS     r0,#0x1c              ;1129
0003d8  f7fffffe          BL       GPIO_Set_PE
0003dc  2101              MOVS     r1,#1                 ;1130
0003de  201d              MOVS     r0,#0x1d              ;1130
0003e0  f7fffffe          BL       GPIO_Set_PE
0003e4  2101              MOVS     r1,#1                 ;1131
0003e6  201e              MOVS     r0,#0x1e              ;1131
0003e8  f7fffffe          BL       GPIO_Set_PE
0003ec  e6ba              B        |L2.356|
                  |L2.1006|
0003ee  2300              MOVS     r3,#0                 ;1147
0003f0  461a              MOV      r2,r3                 ;1147
0003f2  2103              MOVS     r1,#3                 ;1147
0003f4  201f              MOVS     r0,#0x1f              ;1147
0003f6  f7fffffe          BL       GPIO_Init
0003fa  2300              MOVS     r3,#0                 ;1149
0003fc  461a              MOV      r2,r3                 ;1149
0003fe  2103              MOVS     r1,#3                 ;1149
000400  2020              MOVS     r0,#0x20              ;1149
000402  f7fffffe          BL       GPIO_Init
000406  2300              MOVS     r3,#0                 ;1158
000408  461a              MOV      r2,r3                 ;1158
00040a  2103              MOVS     r1,#3                 ;1158
00040c  2021              MOVS     r0,#0x21              ;1158
00040e  f7fffffe          BL       GPIO_Init
000412  2300              MOVS     r3,#0                 ;1160
000414  461a              MOV      r2,r3                 ;1160
000416  2103              MOVS     r1,#3                 ;1160
000418  2022              MOVS     r0,#0x22              ;1160
00041a  f7fffffe          BL       GPIO_Init
00041e  2101              MOVS     r1,#1                 ;1162
000420  201f              MOVS     r0,#0x1f              ;1162
000422  f7fffffe          BL       GPIO_Set_PE
000426  2101              MOVS     r1,#1                 ;1164
000428  2020              MOVS     r0,#0x20              ;1164
00042a  f7fffffe          BL       GPIO_Set_PE
00042e  2101              MOVS     r1,#1                 ;1174
000430  2021              MOVS     r0,#0x21              ;1174
000432  f7fffffe          BL       GPIO_Set_PE
000436  2101              MOVS     r1,#1                 ;1176
000438  2022              MOVS     r0,#0x22              ;1176
00043a  f7fffffe          BL       GPIO_Set_PE
00043e  e6b0              B        |L2.418|
                  |L2.1088|
000440  2300              MOVS     r3,#0                 ;1215
000442  461a              MOV      r2,r3                 ;1215
000444  2103              MOVS     r1,#3                 ;1215
000446  2023              MOVS     r0,#0x23              ;1215
000448  f7fffffe          BL       GPIO_Init
00044c  2300              MOVS     r3,#0                 ;1216
00044e  461a              MOV      r2,r3                 ;1216
000450  2103              MOVS     r1,#3                 ;1216
000452  2024              MOVS     r0,#0x24              ;1216
000454  f7fffffe          BL       GPIO_Init
000458  2300              MOVS     r3,#0                 ;1222
00045a  461a              MOV      r2,r3                 ;1222
00045c  2103              MOVS     r1,#3                 ;1222
00045e  2026              MOVS     r0,#0x26              ;1222
000460  f7fffffe          BL       GPIO_Init
000464  2101              MOVS     r1,#1                 ;1224
000466  2023              MOVS     r0,#0x23              ;1224
000468  f7fffffe          BL       GPIO_Set_PE
00046c  2101              MOVS     r1,#1                 ;1225
00046e  2024              MOVS     r0,#0x24              ;1225
000470  f7fffffe          BL       GPIO_Set_PE
000474  2101              MOVS     r1,#1                 ;1231
000476  2026              MOVS     r0,#0x26              ;1231
000478  f7fffffe          BL       GPIO_Set_PE
00047c  e6a8              B        |L2.464|
                  |L2.1150|
00047e  2300              MOVS     r3,#0                 ;1255
000480  461a              MOV      r2,r3                 ;1255
000482  2103              MOVS     r1,#3                 ;1255
000484  2027              MOVS     r0,#0x27              ;1255
000486  f7fffffe          BL       GPIO_Init
00048a  2300              MOVS     r3,#0                 ;1256
00048c  461a              MOV      r2,r3                 ;1256
00048e  2103              MOVS     r1,#3                 ;1256
000490  2028              MOVS     r0,#0x28              ;1256
000492  f7fffffe          BL       GPIO_Init
000496  2300              MOVS     r3,#0                 ;1258
000498  461a              MOV      r2,r3                 ;1258
00049a  2103              MOVS     r1,#3                 ;1258
00049c  2029              MOVS     r0,#0x29              ;1258
00049e  f7fffffe          BL       GPIO_Init
0004a2  2300              MOVS     r3,#0                 ;1260
0004a4  461a              MOV      r2,r3                 ;1260
0004a6  2103              MOVS     r1,#3                 ;1260
0004a8  202a              MOVS     r0,#0x2a              ;1260
0004aa  f7fffffe          BL       GPIO_Init
0004ae  2101              MOVS     r1,#1                 ;1262
0004b0  2027              MOVS     r0,#0x27              ;1262
0004b2  f7fffffe          BL       GPIO_Set_PE
0004b6  2101              MOVS     r1,#1                 ;1263
0004b8  2028              MOVS     r0,#0x28              ;1263
0004ba  f7fffffe          BL       GPIO_Set_PE
0004be  2101              MOVS     r1,#1                 ;1265
0004c0  2029              MOVS     r0,#0x29              ;1265
0004c2  f7fffffe          BL       GPIO_Set_PE
0004c6  2101              MOVS     r1,#1                 ;1267
0004c8  202a              MOVS     r0,#0x2a              ;1267
0004ca  f7fffffe          BL       GPIO_Set_PE
0004ce  e69f              B        |L2.528|
;;;1292   }
;;;1293   
                          ENDP


                          AREA ||i.MSPI_ITConfig||, CODE, READONLY, ALIGN=2

                  MSPI_ITConfig PROC
;;;307    
;;;308    void MSPI_ITConfig(FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
000004  f44f2100          MOV      r1,#0x80000
000008  f8c21280          STR      r1,[r2,#0x280]
00000c  f8dfc014          LDR      r12,|L3.36|
000010  2320              MOVS     r3,#0x20
000012  f88c3400          STRB     r3,[r12,#0x400]
;;;309    {
;;;310    	NVIC_ClearPendingIRQ(EXTInterface_IRQn);
;;;311    	NVIC_SetPriority(EXTInterface_IRQn, MSPI_IRQn_Priority);
;;;312    
;;;313    	if(NewState != DISABLE)
000016  2800              CMP      r0,#0
000018  bf14              ITE      NE
00001a  f8c21100          STRNE    r1,[r2,#0x100]
00001e  f8c21180          STREQ    r1,[r2,#0x180]
;;;314    	{
;;;315    		NVIC_EnableIRQ(EXTInterface_IRQn);
;;;316    	}
;;;317    	else
;;;318    	{
;;;319    		NVIC_DisableIRQ(EXTInterface_IRQn);
;;;320    	}
;;;321    }
000022  4770              BX       lr
;;;322    
                          ENDP

                  |L3.36|
                          DCD      0xe000e013

                          AREA ||i.MSPI_Initialize||, CODE, READONLY, ALIGN=2

                  MSPI_Initialize PROC
;;;283    
;;;284    void MSPI_Initialize(void)
000000  4919              LDR      r1,|L4.104|
;;;285    {
000002  b510              PUSH     {r4,lr}
;;;286    	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;287    	Fncp_MSPI_IRQHandler = &MSPI_InterruptHandler;
000004  4817              LDR      r0,|L4.100|
;;;288    	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000006  6008              STR      r0,[r1,#0]  ; Fncp_MSPI_IRQHandler
000008  f7fffffe          BL       hal_mspi_GetCommonConfig
00000c  4604              MOV      r4,r0
;;;289    	
;;;290    	MSPI_GPIO_Init();
00000e  f7fffffe          BL       MSPI_GPIO_Init
;;;291    	
;;;292    	MSPI->tSPIENA.ulBulk = kptHalMspiCommonConf->tParam_SPIENA.ulBulk;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  f04f2140          MOV      r1,#0x40004000
000018  6008              STR      r0,[r1,#0]
;;;293    	MSPI->tSPISCR.ulBulk = kptHalMspiCommonConf->tParam_SPISCR.ulBulk;
00001a  6ce0              LDR      r0,[r4,#0x4c]
00001c  6048              STR      r0,[r1,#4]
;;;294    
;;;295    	MSPI->tSINTRENCLR.ulBulk = 0x1F;
00001e  201f              MOVS     r0,#0x1f
000020  61c8              STR      r0,[r1,#0x1c]
;;;296    
;;;297    	MSPI->tSINTRMSCR.tBit.intmux_en = DISABLE;
000022  6948              LDR      r0,[r1,#0x14]
000024  f0200001          BIC      r0,r0,#1
000028  6148              STR      r0,[r1,#0x14]
;;;298    	MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
00002a  6948              LDR      r0,[r1,#0x14]
00002c  f0400002          ORR      r0,r0,#2
000030  6148              STR      r0,[r1,#0x14]
;;;299    	MSPI->tSINTRMSCR.tBit.introic_en = DISABLE;
000032  6948              LDR      r0,[r1,#0x14]
000034  f0200004          BIC      r0,r0,#4
000038  6148              STR      r0,[r1,#0x14]
;;;300    	MSPI->tSINTRMSCR.tBit.intchksum_en = DISABLE;
00003a  6948              LDR      r0,[r1,#0x14]
00003c  f0200008          BIC      r0,r0,#8
000040  6148              STR      r0,[r1,#0x14]
;;;301    	MSPI->tSINTRMSCR.tBit.intmisozero_en = DISABLE;
000042  6948              LDR      r0,[r1,#0x14]
000044  f0200010          BIC      r0,r0,#0x10
000048  6148              STR      r0,[r1,#0x14]
;;;302    
;;;303    	SPI_ALL_ROIC_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
00004a  6988              LDR      r0,[r1,#0x18]
00004c  f420707f          BIC      r0,r0,#0x3fc
000050  6188              STR      r0,[r1,#0x18]
;;;304    	SPI_ALL_CHECKSUM_ERROR_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
000052  6988              LDR      r0,[r1,#0x18]
000054  f420307f          BIC      r0,r0,#0x3fc00
000058  6188              STR      r0,[r1,#0x18]
;;;305    	SPI_ALL_MISOZERO_INTR_DISABLE_MASK(MSPI->tSINTRMASK.ulBulk);
00005a  6988              LDR      r0,[r1,#0x18]
00005c  f420707f          BIC      r0,r0,#0x3fc
000060  6188              STR      r0,[r1,#0x18]
;;;306    }
000062  bd10              POP      {r4,pc}
;;;307    
                          ENDP

                  |L4.100|
                          DCD      MSPI_InterruptHandler
                  |L4.104|
                          DCD      Fncp_MSPI_IRQHandler

                          AREA ||i.MSPI_IntCLR||, CODE, READONLY, ALIGN=1

                  MSPI_IntCLR PROC
;;;334    
;;;335    void MSPI_IntCLR(void)
000000  f04f2040          MOV      r0,#0x40004000
                  |L5.4|
;;;336    {
;;;337    	while(1)
;;;338    	{
;;;339    		if(MSPI->tSPISTART.ulBulk == 0x00)
000004  6c41              LDR      r1,[r0,#0x44]
000006  2900              CMP      r1,#0
000008  d1fc              BNE      |L5.4|
;;;340    		{
;;;341    			break;
;;;342    		}
;;;343    	}
;;;344    }
00000a  4770              BX       lr
;;;345    
                          ENDP


                          AREA ||i.MSPI_InterruptHandler||, CODE, READONLY, ALIGN=2

                  MSPI_InterruptHandler PROC
;;;42     
;;;43     void MSPI_InterruptHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;44     {
;;;45     	__IO static int nextMSPISize;
;;;46     #if USED_PEN_MODE_OPERATION
;;;47     	__IO uint32_t ulLocalIndexSetCheckBitMask = 0;
;;;48     #endif /* USED_PEN_MODE_OPERATION */
;;;49     #if USED_PEN_DATA_AFE_GAIN_OTHER_SET
;;;50     	__IO uint32_t ulLocalDataGainSetCheckBitMask = 0;
;;;51     #endif /* USED_PEN_DATA_AFE_GAIN_OTHER_SET */
;;;52     	const tHalPwmdrvCommonConf_t * pktHalPwmdrvCommonConf = hal_pwmdrv_GetCommonConfig();
000004  f7fffffe          BL       hal_pwmdrv_GetCommonConfig
;;;53     	const tHalMspiControlConf_t * tHalMSPIControlConf = hal_mspi_GetControlConfig();
000008  f7fffffe          BL       hal_mspi_GetControlConfig
;;;54     	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
00000c  f7fffffe          BL       HAL_GetSensingMode
;;;55     
;;;56     	if(SCRB->SYS_INT_ST.tBit.int_mspi != 0)
000010  f04f4180          MOV      r1,#0x40000000
000014  6989              LDR      r1,[r1,#0x18]
000016  f0115f00          TST      r1,#0x20000000
;;;57     	{
;;;58     		MSPI->tSINTRENCLR.ulBulk = 0x1F;
;;;59     		switch(eSensingMode)
;;;60     		{
;;;61     #if USED_PEN_MODE_OPERATION
;;;62     			case SM_FINGER_PEN_ACTIVE_FRQ_MAIN_MODE:
;;;63     			case SM_FINGER_PEN_ACTIVE_FRQ_HOP1_MODE:
;;;64     			case SM_FINGER_PEN_ACTIVE_FRQ_HOP2_MODE:
;;;65     			{
;;;66     				tHalIntrHandle.eLocalSensingType = tHalMSPIControlConf->ePenPartialIndex[tHalIntrHandle.ulMSPIPenModeIntrCnt];
;;;67     
;;;68     				tHalIntrHandle.ulMSPIPenModeIntrCnt++;
;;;69     				if(tHalIntrHandle.ulMSPIPenModeIntrCnt > tHalMSPIControlConf->MSPI_LHBCountNum)
;;;70     				{
;;;71     					tHalIntrHandle.ulMSPIPenModeIntrCnt = 0;
;;;72     				}
;;;73     				nextMSPISize = tHalIntrHandle.ulMSPIPenModeIntrCnt;
;;;74     //				_gT(_GPIO_TP_INTR);
;;;75     
;;;76     				hal_Info_SetControlActivePenRawDataType(hal_Info_GetControlActivePenOPType());
;;;77     				if(tHalIntrHandle.ulLocalIndexChangeStart == 1)
;;;78     				{
;;;79     					if(nextMSPISize == 0)
;;;80     					{
;;;81     	#if IS_MULTI_PROTOCOL_OPERATION
;;;82     						if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;83     						{
;;;84     							HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;85     						}
;;;86     						else
;;;87     						{
;;;88     							if(HAL_CheckActivePenTypeSwap())
;;;89     							{
;;;90     								if(HAL_CheckActivePenChangeType())
;;;91     								{
;;;92     									HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_DONE);
;;;93     								}
;;;94     							}
;;;95     							else
;;;96     							{
;;;97     								SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;98     							}
;;;99     						}
;;;100    	#else /* IS_MULTI_PROTOCOL_OPERATION */
;;;101    						if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;102    						{
;;;103    							HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;104    							MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;105    							break;
;;;106    						}
;;;107    	#endif /* IS_MULTI_PROTOCOL_OPERATION */
;;;108    					}
;;;109    
;;;110    	#if IS_MULTI_PROTOCOL_OPERATION
;;;111    					switch(hal_Info_GetControlActivePenSettingType())
;;;112    					{
;;;113    						case ACTIVEPEN_TYPE_LOCAL_MS:
;;;114    						{
;;;115    							ulLocalIndexSetCheckBitMask = tHalIntrHandle.ulLocalPenRowIdxSetByMspiIdxBitMask_MSPen;
;;;116    							break;
;;;117    						}
;;;118    						case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;119    						{
;;;120    							ulLocalIndexSetCheckBitMask = tHalIntrHandle.ulLocalPenRowIdxSetByMspiIdxBitMask_AITPen;
;;;121    							break;
;;;122    						}
;;;123    						case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;124    						{
;;;125    							ulLocalIndexSetCheckBitMask = tHalIntrHandle.ulLocalPenRowIdxSetByMspiIdxBitMask_WGPPen;
;;;126    							break;
;;;127    						}
;;;128    					}
;;;129    
;;;130    					if(ulLocalIndexSetCheckBitMask & (1<<nextMSPISize))
;;;131    					{
;;;132    						SRIC_SetLocalIndex(((nextMSPISize << 16) | sensingRowStart));
;;;133    					}
;;;134    	#else /* IS_MULTI_PROTOCOL_OPERATION */
;;;135    					{
;;;136    						uint32_t ulTempNextSPISize;
;;;137    		#if USED_PEN_DATA_AFE_GAIN_OTHER_SET
;;;138    						bool_t bIsSetLocalIdx = NO;
;;;139    						uint32_t ulLocalIdxSetValue;
;;;140    		#endif /* USED_PEN_DATA_AFE_GAIN_OTHER_SET */
;;;141    						if(IS_ACTIVE_MODE(eSensingMode))
;;;142    						{
;;;143    							ulLocalIndexSetCheckBitMask = tHalIntrHandle.ulLocalPenRowIdxSetByMspiIdxBitMask[0];
;;;144    		#if USED_PEN_DATA_AFE_GAIN_OTHER_SET
;;;145    							ulLocalDataGainSetCheckBitMask = DEF_PEN_LOCAL_DATA_GAIN_SET_BIT_MASK_Idle;
;;;146    		#endif /* USED_PEN_DATA_AFE_GAIN_OTHER_SET */
;;;147    							ulTempNextSPISize = nextMSPISize;
;;;148    						}
;;;149    						else // Idle Mode
;;;150    						{
;;;151    							ulLocalIndexSetCheckBitMask = tHalIntrHandle.ulLocalPenRowIdxSetByMspiIdxBitMask[1];
;;;152    							if(nextMSPISize == 3)
;;;153    							{
;;;154    								ulTempNextSPISize = nextMSPISize + 3;
;;;155    							}
;;;156    							else if(nextMSPISize == 6)
;;;157    							{
;;;158    								ulTempNextSPISize = nextMSPISize + 4;
;;;159    							}
;;;160    						}
;;;161    
;;;162    		#if USED_PEN_DATA_AFE_GAIN_OTHER_SET
;;;163    						if(ulLocalIndexSetCheckBitMask & (1<<nextMSPISize))
;;;164    						{
;;;165    							bIsSetLocalIdx = YES;
;;;166    							ulLocalIdxSetValue = DEF_LOCAL_IDX_SET_ENABLE_BIT_MASK | (ulTempNextSPISize << 16) | sensingRowStart;
;;;167    						}
;;;168    
;;;169    						if(ulLocalDataGainSetCheckBitMask & (1<<nextMSPISize))
;;;170    						{
;;;171    							bIsSetLocalIdx = YES;
;;;172    							ulLocalIdxSetValue |= (DEF_LOCAL_DATA_OTHER_SET_ENABLE_BIT_MASK | (ulTempNextSPISize << 16));
;;;173    						}
;;;174    
;;;175    						if(bIsSetLocalIdx)
;;;176    						{
;;;177    							SRIC_SetLocalIndex(ulLocalIdxSetValue);
;;;178    						}
;;;179    		#else /* USED_PEN_DATA_AFE_GAIN_OTHER_SET */
;;;180    						if(ulLocalIndexSetCheckBitMask & (1<<nextMSPISize))
;;;181    						{
;;;182    							SRIC_SetLocalIndex(((ulTempNextSPISize << 16) | sensingRowStart));
;;;183    						}
;;;184    		#endif /* USED_PEN_DATA_AFE_GAIN_OTHER_SET */
;;;185    					}
;;;186    	#endif /* IS_MULTI_PROTOCOL_OPERATION */
;;;187    				}
;;;188    
;;;189    				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;190    				callPendSV();
;;;191    				break;
;;;192    			}
;;;193    #endif /* USED_PEN_MODE_OPERATION */
;;;194    			case SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE:
;;;195    			case SM_FINGER_ONLY_ACTIVE_FRQ_HOP1_MODE:
;;;196    			case SM_FINGER_ONLY_ACTIVE_FRQ_HOP2_MODE:
;;;197    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_MAIN_MODE:
;;;198    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP1_MODE:
;;;199    			case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP2_MODE:
;;;200    			{
;;;201    #if !(((USED_MODULE_DEF == MODULE_DEF_B_1) || (USED_MODULE_DEF == MODULE_DEF_C_1)) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3))
;;;202    				tHalIntrHandle.ulMSPIPenModeIntrCnt++;
;;;203    	#if USED_WGP_PEN_UHD_16LHB_OPERATION
;;;204    				if(tHalIntrHandle.ulMSPIPenModeIntrCnt > 3)
;;;205    	#else /* USED_WGP_PEN_UHD_16LHB_OPERATION */
;;;206    				if(tHalIntrHandle.ulMSPIPenModeIntrCnt > 1)
;;;207    	#endif /* USED_WGP_PEN_UHD_16LHB_OPERATION */
;;;208    				{
;;;209    					tHalIntrHandle.ulMSPIPenModeIntrCnt = 0;
;;;210    				}
;;;211    				nextMSPISize = tHalIntrHandle.ulMSPIPenModeIntrCnt;
;;;212    
;;;213    //				_gT(_GPIO_TP_INTR);
;;;214    				if(nextMSPISize == 0)
;;;215    #endif /* !(((USED_MODULE_DEF == MODULE_DEF_B_1) || (USED_MODULE_DEF == MODULE_DEF_C_1)) && (CUSTOMER == MODEL_DEF_FHD_97500_MNT_S3)) */
;;;216    				{
;;;217    					if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;218    					{
;;;219    						HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;220    					}
;;;221    				}
;;;222    				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;223    
;;;224    				hal_set_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;225    				break;
;;;226    			}
;;;227    			case SM_FINGER_ONLY_IDLE_MODE:
;;;228    			case SM_FINGER_PEN_IDLE_MODE:
;;;229    			{
;;;230    //				_gT(_GPIO_TP_INTR);
;;;231    //				MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;232    #if USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE
;;;233    				if(HAL_GetSensingChangeMode() != SM_CHANGE_FULLSCAN_IDLE_MODE)
;;;234    				{
;;;235    					if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;236    					{
;;;237    						HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;238    						MSPI_Set_BUFSIZE_FingerPenMode(0);
;;;239    					}
;;;240    				}
;;;241    #else /* USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE */
;;;242    				if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;243    				{
;;;244    					HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;245    					MSPI_Set_BUFSIZE_FingerPenMode(0);
;;;246    				}
;;;247    #endif /* USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE */
;;;248    #if USED_LOCAL_IDLE_30Hz
;;;249    				else
;;;250    				{
;;;251    					MSPI_Set_TLPMODE();
;;;252    					/*
;;;253    					 * ROIC Power Down!!
;;;254    					 */
;;;255    					MSPI_RegisterWrite((uint32_t)(0x01C0), 0);
;;;256    					MSPI_Set_AITMODE(HAL_GetSensingMode());
;;;257    					MSPI_Set_BUFSIZE_FingerPenMode(0);
;;;258    				}
;;;259    #endif /* USED_LOCAL_IDLE_30Hz */
;;;260    				hal_set_irq_flag(IRQ_ID_NI_SAMPLE);
;;;261    				break;
;;;262    			}
;;;263    			case SM_S3_ACTIVE_MODE:
;;;264    			case SM_S3_IDLE_MODE:
;;;265    			{
;;;266    				hal_set_irq_flag(IRQ_ID_S3_SAMPLE);
;;;267    				break;
;;;268    			}
;;;269    			default:
;;;270    				break;
;;;271    		}
;;;272    
;;;273    #if ECLK_NEED_DURING_MSPI_OPERATION
;;;274    		if(HAL_GetECLKOnOffControl())
;;;275    		{
;;;276    			HAL_ECLK_Off();
;;;277    		}
;;;278    #endif /* ECLK_NEED_DURING_MSPI_OPERATION */
;;;279    
;;;280    		MSPI->SPIAITSTART = MSPI_START_VAL;
;;;281    	}
;;;282    }
00001a  bf08              IT       EQ
00001c  e8bd81f0          POPEQ    {r4-r8,pc}
000020  211f              MOVS     r1,#0x1f              ;58
000022  f04f2440          MOV      r4,#0x40004000        ;58
000026  61e1              STR      r1,[r4,#0x1c]         ;58
000028  260b              MOVS     r6,#0xb               ;58
00002a  2701              MOVS     r7,#1                 ;58
00002c  f5b05f88          CMP      r0,#0x1100            ;59
000030  d059              BEQ      |L6.230|
000032  dc14              BGT      |L6.94|
000034  f2410203          MOV      r2,#0x1003            ;59
000038  eba00102          SUB      r1,r0,r2              ;59
00003c  4290              CMP      r0,r2                 ;59
00003e  d01c              BEQ      |L6.122|
000040  dc08              BGT      |L6.84|
000042  f5a06000          SUB      r0,r0,#0x800          ;59
000046  3801              SUBS     r0,#1                 ;59
000048  bf12              ITEE     NE                    ;59
00004a  28ff              CMPNE    r0,#0xff              ;59
00004c  2003              MOVEQ    r0,#3                 ;266
00004e  f7fffffe          BLEQ     hal_set_irq_flag
000052  e073              B        |L6.316|
                  |L6.84|
000054  2902              CMP      r1,#2                 ;59
000056  bf18              IT       NE                    ;59
000058  2906              CMPNE    r1,#6                 ;59
00005a  d16f              BNE      |L6.316|
00005c  e00d              B        |L6.122|
                  |L6.94|
00005e  f1a00003          SUB      r0,r0,#3              ;59
000062  f5b05000          SUBS     r0,r0,#0x2000         ;59
000066  bf1c              ITT      NE                    ;59
000068  2802              CMPNE    r0,#2                 ;59
00006a  2806              CMPNE    r0,#6                 ;59
00006c  d005              BEQ      |L6.122|
00006e  f1a000fd          SUB      r0,r0,#0xfd           ;59
000072  f5b05f00          CMP      r0,#0x2000            ;59
000076  d036              BEQ      |L6.230|
000078  e060              B        |L6.316|
                  |L6.122|
00007a  4832              LDR      r0,|L6.324|
00007c  6801              LDR      r1,[r0,#0]            ;202  ; tHalIntrHandle
00007e  1c49              ADDS     r1,r1,#1              ;202
000080  6001              STR      r1,[r0,#0]            ;202  ; tHalIntrHandle
000082  6801              LDR      r1,[r0,#0]            ;206  ; tHalIntrHandle
000084  2901              CMP      r1,#1                 ;206
000086  bf84              ITT      HI                    ;209
000088  2100              MOVHI    r1,#0                 ;209
00008a  6001              STRHI    r1,[r0,#0]            ;209  ; tHalIntrHandle
00008c  6800              LDR      r0,[r0,#0]            ;211  ; tHalIntrHandle
00008e  4d2e              LDR      r5,|L6.328|
000090  6028              STR      r0,[r5,#0]            ;211  ; nextMSPISize
000092  6828              LDR      r0,[r5,#0]            ;214  ; nextMSPISize
000094  b940              CBNZ     r0,|L6.168|
000096  f7fffffe          BL       HAL_GetSensingChangeMode
00009a  f7fffffe          BL       HAL_CheckSensningModeChange
00009e  2800              CMP      r0,#0                 ;217
0000a0  bf1c              ITT      NE                    ;219
0000a2  2000              MOVNE    r0,#0                 ;219
0000a4  f7fffffe          BLNE     HAL_SetSensingChangeMode
                  |L6.168|
0000a8  6828              LDR      r0,[r5,#0]            ;222  ; nextMSPISize
0000aa  f7fffffe          BL       HAL_GetSensingMode
0000ae  f0100f01          TST      r0,#1                 ;222
0000b2  d009              BEQ      |L6.200|
0000b4  62e6              STR      r6,[r4,#0x2c]         ;222
0000b6  6960              LDR      r0,[r4,#0x14]         ;222
0000b8  f0200001          BIC      r0,r0,#1              ;222
0000bc  6160              STR      r0,[r4,#0x14]         ;222
0000be  6960              LDR      r0,[r4,#0x14]         ;222
0000c0  f0400002          ORR      r0,r0,#2              ;222
0000c4  6160              STR      r0,[r4,#0x14]         ;222
0000c6  e008              B        |L6.218|
                  |L6.200|
0000c8  62e7              STR      r7,[r4,#0x2c]         ;222
0000ca  6960              LDR      r0,[r4,#0x14]         ;222
0000cc  f0200001          BIC      r0,r0,#1              ;222
0000d0  6160              STR      r0,[r4,#0x14]         ;222
0000d2  6960              LDR      r0,[r4,#0x14]         ;222
0000d4  f0400002          ORR      r0,r0,#2              ;222
0000d8  6160              STR      r0,[r4,#0x14]         ;222
                  |L6.218|
0000da  6f20              LDR      r0,[r4,#0x70]         ;222
0000dc  f02000fe          BIC      r0,r0,#0xfe           ;222
0000e0  6720              STR      r0,[r4,#0x70]         ;222
0000e2  2001              MOVS     r0,#1                 ;224
0000e4  e028              B        |L6.312|
                  |L6.230|
0000e6  f7fffffe          BL       HAL_GetSensingChangeMode
0000ea  2804              CMP      r0,#4                 ;233
0000ec  d023              BEQ      |L6.310|
0000ee  f7fffffe          BL       HAL_GetSensingChangeMode
0000f2  f7fffffe          BL       HAL_CheckSensningModeChange
0000f6  b1f0              CBZ      r0,|L6.310|
0000f8  2000              MOVS     r0,#0                 ;237
0000fa  f7fffffe          BL       HAL_SetSensingChangeMode
0000fe  f7fffffe          BL       HAL_GetSensingMode
000102  f0100f01          TST      r0,#1                 ;237
000106  d009              BEQ      |L6.284|
000108  62e6              STR      r6,[r4,#0x2c]         ;237
00010a  6960              LDR      r0,[r4,#0x14]         ;237
00010c  f0200001          BIC      r0,r0,#1              ;237
000110  6160              STR      r0,[r4,#0x14]         ;237
000112  6960              LDR      r0,[r4,#0x14]         ;237
000114  f0400002          ORR      r0,r0,#2              ;237
000118  6160              STR      r0,[r4,#0x14]         ;237
00011a  e008              B        |L6.302|
                  |L6.284|
00011c  62e7              STR      r7,[r4,#0x2c]         ;237
00011e  6960              LDR      r0,[r4,#0x14]         ;237
000120  f0200001          BIC      r0,r0,#1              ;237
000124  6160              STR      r0,[r4,#0x14]         ;237
000126  6960              LDR      r0,[r4,#0x14]         ;237
000128  f0400002          ORR      r0,r0,#2              ;237
00012c  6160              STR      r0,[r4,#0x14]         ;237
                  |L6.302|
00012e  6f20              LDR      r0,[r4,#0x70]         ;237
000130  f02000fe          BIC      r0,r0,#0xfe           ;237
000134  6720              STR      r0,[r4,#0x70]         ;237
                  |L6.310|
000136  2002              MOVS     r0,#2                 ;260
                  |L6.312|
000138  f7fffffe          BL       hal_set_irq_flag
                  |L6.316|
00013c  200f              MOVS     r0,#0xf               ;280
00013e  62a0              STR      r0,[r4,#0x28]         ;280
000140  e8bd81f0          POP      {r4-r8,pc}
;;;283    
                          ENDP

                  |L6.324|
                          DCD      tHalIntrHandle
                  |L6.328|
                          DCD      ||area_number.18||

                          AREA ||i.MSPI_RegisterMultiWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterMultiWrite PROC
;;;3222   
;;;3223   void MSPI_RegisterMultiWrite(uint32_t Addr, uint32_t * value)
000000  4a5f              LDR      r2,|L7.384|
;;;3224   {
;;;3225   	uint8_t iMspi;
;;;3226   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;3227   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;3228   
;;;3229   //	switch(hal_Info_GetControlActivePenSettingType())
;;;3230   //	{
;;;3231   //		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;3232   //		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;3233   //		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;3234   		{
;;;3235   			pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
;;;3236   			pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
;;;3237   //			break;
;;;3238   		}
;;;3239   //	}
;;;3240   
;;;3241   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;3242   	{
;;;3243   		pMSPI_SEND_BUFF[iMspi].Addr = Addr;
000002  8010              STRH     r0,[r2,#0]
;;;3244   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 0;
000004  8853              LDRH     r3,[r2,#2]
;;;3245   		pMSPI_SEND_BUFF[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
;;;3246   		pMSPI_SEND_BUFF[iMspi].tBit.ExtCMDEn = 0;
;;;3247   		pMSPI_SEND_BUFF[iMspi].tBit.DualRxEn = 0;
;;;3248   		pMSPI_SEND_BUFF[iMspi].tBit.ChkSum = 0;
;;;3249   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000006  f42363ff          BIC      r3,r3,#0x7f8
00000a  f4234378          BIC      r3,r3,#0xf800
00000e  8053              STRH     r3,[r2,#2]
;;;3250   		pMSPI_SEND_BUFF[iMspi].Data_M = value[iMspi] >> 16;
000010  680b              LDR      r3,[r1,#0]
000012  0c1b              LSRS     r3,r3,#16
000014  8093              STRH     r3,[r2,#4]
;;;3251   		pMSPI_SEND_BUFF[iMspi].Data_L = value[iMspi] & 0xFFFF;
000016  880b              LDRH     r3,[r1,#0]
000018  80d3              STRH     r3,[r2,#6]
00001a  8110              STRH     r0,[r2,#8]            ;3243
00001c  8953              LDRH     r3,[r2,#0xa]          ;3244
00001e  f42363ff          BIC      r3,r3,#0x7f8          ;3249
000022  f4234378          BIC      r3,r3,#0xf800         ;3249
000026  8153              STRH     r3,[r2,#0xa]          ;3249
000028  684b              LDR      r3,[r1,#4]            ;3250
00002a  0c1b              LSRS     r3,r3,#16             ;3250
00002c  8193              STRH     r3,[r2,#0xc]          ;3250
00002e  888b              LDRH     r3,[r1,#4]
000030  81d3              STRH     r3,[r2,#0xe]
000032  8210              STRH     r0,[r2,#0x10]         ;3243
000034  8a53              LDRH     r3,[r2,#0x12]         ;3244
000036  f42363ff          BIC      r3,r3,#0x7f8          ;3249
00003a  f4234378          BIC      r3,r3,#0xf800         ;3249
00003e  8253              STRH     r3,[r2,#0x12]         ;3249
000040  688b              LDR      r3,[r1,#8]            ;3250
000042  0c1b              LSRS     r3,r3,#16             ;3250
000044  8293              STRH     r3,[r2,#0x14]         ;3250
000046  890b              LDRH     r3,[r1,#8]
000048  82d3              STRH     r3,[r2,#0x16]
00004a  8310              STRH     r0,[r2,#0x18]         ;3243
00004c  8b50              LDRH     r0,[r2,#0x1a]         ;3244
00004e  f42060ff          BIC      r0,r0,#0x7f8          ;3249
000052  f4204078          BIC      r0,r0,#0xf800         ;3249
000056  8350              STRH     r0,[r2,#0x1a]         ;3249
000058  68c8              LDR      r0,[r1,#0xc]          ;3250
00005a  0c00              LSRS     r0,r0,#16             ;3250
00005c  8390              STRH     r0,[r2,#0x1c]         ;3250
00005e  8988              LDRH     r0,[r1,#0xc]
000060  83d0              STRH     r0,[r2,#0x1e]
;;;3252   	}
;;;3253   
;;;3254   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;3255   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;3256   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;3257   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;3258   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
;;;3259   	MSPI->tSPIENA.tBit.spiRxEna6 = DISABLE;
;;;3260   	MSPI->tSPIENA.tBit.spiRxEna7 = DISABLE;
;;;3261   
;;;3262   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3263   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3264   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3265   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3266   	MSPI->tSPITRSIZE1.tBit.spitrsize6 = 0x3;
;;;3267   	MSPI->tSPITRSIZE1.tBit.spitrsize7 = 0x3;
;;;3268   
;;;3269   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;3270   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;3271   
;;;3272   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3273   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3274   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3275   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3276   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd6 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3277   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd7 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;3278   
;;;3279   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3280   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3281   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3282   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3283   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd6 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3284   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd7 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;3285   
;;;3286   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3287   
;;;3288   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3289   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;3290   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;3291   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;3292   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
;;;3293   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;3294   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
;;;3295   
;;;3296   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3297   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3298   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;3299   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3300   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3301   
;;;3302   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;3303   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;3304   
;;;3305   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3306   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3307   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3308   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3309   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3310   
;;;3311   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3312   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3313   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3314   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3315   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3316   
;;;3317   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3318   
;;;3319   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3320   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO)
;;;3321   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;3322   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;3323   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
;;;3324   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;3325   
;;;3326   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3327   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3328   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;3329   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3330   
;;;3331   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;3332   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;3333   
;;;3334   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3335   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3336   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3337   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3338   
;;;3339   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3340   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3341   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3342   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3343   
;;;3344   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3345   
;;;3346   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3347   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3348   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
000062  f04f2040          MOV      r0,#0x40004000
000066  6801              LDR      r1,[r0,#0]
000068  f4217180          BIC      r1,r1,#0x100
00006c  6001              STR      r1,[r0,#0]
;;;3349   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
00006e  6801              LDR      r1,[r0,#0]
000070  f4217100          BIC      r1,r1,#0x200
000074  6001              STR      r1,[r0,#0]
;;;3350   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
000076  6801              LDR      r1,[r0,#0]
000078  f4216180          BIC      r1,r1,#0x400
00007c  6001              STR      r1,[r0,#0]
;;;3351   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
00007e  6801              LDR      r1,[r0,#0]
000080  f4216100          BIC      r1,r1,#0x800
000084  6001              STR      r1,[r0,#0]
;;;3352   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
000086  6801              LDR      r1,[r0,#0]
000088  f4215180          BIC      r1,r1,#0x1000
00008c  6001              STR      r1,[r0,#0]
;;;3353   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
00008e  6801              LDR      r1,[r0,#0]
000090  f4215100          BIC      r1,r1,#0x2000
000094  6001              STR      r1,[r0,#0]
;;;3354   
;;;3355   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
000096  6a01              LDR      r1,[r0,#0x20]
000098  f02101ff          BIC      r1,r1,#0xff
00009c  1cc9              ADDS     r1,r1,#3
00009e  6201              STR      r1,[r0,#0x20]
;;;3356   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000a0  6a01              LDR      r1,[r0,#0x20]
0000a2  f421417f          BIC      r1,r1,#0xff00
0000a6  f5017140          ADD      r1,r1,#0x300
0000aa  6201              STR      r1,[r0,#0x20]
;;;3357   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000ac  6a01              LDR      r1,[r0,#0x20]
0000ae  f421017f          BIC      r1,r1,#0xff0000
0000b2  f5013140          ADD      r1,r1,#0x30000
0000b6  6201              STR      r1,[r0,#0x20]
;;;3358   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
0000b8  6a01              LDR      r1,[r0,#0x20]
0000ba  f021417f          BIC      r1,r1,#0xff000000
0000be  f1017140          ADD      r1,r1,#0x3000000
0000c2  6201              STR      r1,[r0,#0x20]
;;;3359   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
0000c4  6a41              LDR      r1,[r0,#0x24]
0000c6  f02101ff          BIC      r1,r1,#0xff
0000ca  1cc9              ADDS     r1,r1,#3
0000cc  6241              STR      r1,[r0,#0x24]
;;;3360   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
0000ce  6a41              LDR      r1,[r0,#0x24]
0000d0  f421417f          BIC      r1,r1,#0xff00
0000d4  f5017140          ADD      r1,r1,#0x300
0000d8  6241              STR      r1,[r0,#0x24]
;;;3361   
;;;3362   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
0000da  6881              LDR      r1,[r0,#8]
0000dc  f421417f          BIC      r1,r1,#0xff00
0000e0  6081              STR      r1,[r0,#8]
;;;3363   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
0000e2  6881              LDR      r1,[r0,#8]
0000e4  f02101ff          BIC      r1,r1,#0xff
0000e8  1cc9              ADDS     r1,r1,#3
0000ea  6081              STR      r1,[r0,#8]
;;;3364   
;;;3365   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
0000ec  6c82              LDR      r2,[r0,#0x48]
;;;3366   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3367   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3368   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3369   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3370   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd5 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;3371   
;;;3372   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3373   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3374   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3375   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3376   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3377   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd5 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;3378   
;;;3379   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3380   
;;;3381   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3382   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3383   
;;;3384   	MSPI_IntCLR();
;;;3385   
;;;3386   	/*
;;;3387   	 * Read Test Code after write!!
;;;3388   	 */
;;;3389   //	{
;;;3390   //		uint32_t ulBuf[6];
;;;3391   //		MSPI_RegisterRead(Addr, &ulBuf[0], MSPI_READ_NONE);
;;;3392   //	}
;;;3393   }
0000ee  2100              MOVS     r1,#0
0000f0  f361020c          BFI      r2,r1,#0,#13          ;3365
0000f4  6482              STR      r2,[r0,#0x48]         ;3365
0000f6  6c83              LDR      r3,[r0,#0x48]         ;3366
0000f8  2208              MOVS     r2,#8
0000fa  f04f0c02          MOV      r12,#2                ;3366
0000fe  f36c431c          BFI      r3,r12,#16,#13        ;3366
000102  6483              STR      r3,[r0,#0x48]         ;3366
000104  6cc3              LDR      r3,[r0,#0x4c]         ;3367
000106  f04f0c04          MOV      r12,#4                ;3367
00010a  f36c030c          BFI      r3,r12,#0,#13         ;3367
00010e  64c3              STR      r3,[r0,#0x4c]         ;3367
000110  6cc3              LDR      r3,[r0,#0x4c]         ;3368
000112  f04f0c06          MOV      r12,#6                ;3368
000116  f36c431c          BFI      r3,r12,#16,#13        ;3368
00011a  64c3              STR      r3,[r0,#0x4c]         ;3368
00011c  6d03              LDR      r3,[r0,#0x50]         ;3369
00011e  f362030c          BFI      r3,r2,#0,#13          ;3369
000122  6503              STR      r3,[r0,#0x50]         ;3369
000124  f8d0c050          LDR      r12,[r0,#0x50]        ;3370
000128  230a              MOVS     r3,#0xa               ;3370
00012a  f3634c1c          BFI      r12,r3,#16,#13        ;3370
00012e  f8c0c050          STR      r12,[r0,#0x50]        ;3370
000132  f8d0c058          LDR      r12,[r0,#0x58]        ;3372
000136  f3620c0c          BFI      r12,r2,#0,#13         ;3372
00013a  f8c0c058          STR      r12,[r0,#0x58]        ;3372
00013e  6d82              LDR      r2,[r0,#0x58]         ;3373
000140  f04f0c09          MOV      r12,#9                ;3373
000144  f36c421c          BFI      r2,r12,#16,#13        ;3373
000148  6582              STR      r2,[r0,#0x58]         ;3373
00014a  6dc2              LDR      r2,[r0,#0x5c]         ;3374
00014c  f363020c          BFI      r2,r3,#0,#13          ;3374
000150  65c2              STR      r2,[r0,#0x5c]         ;3374
000152  6dc2              LDR      r2,[r0,#0x5c]         ;3375
000154  230b              MOVS     r3,#0xb               ;3375
000156  f363421c          BFI      r2,r3,#16,#13         ;3375
00015a  65c2              STR      r2,[r0,#0x5c]         ;3375
00015c  6e02              LDR      r2,[r0,#0x60]         ;3376
00015e  230c              MOVS     r3,#0xc               ;3376
000160  f363020c          BFI      r2,r3,#0,#13          ;3376
000164  6602              STR      r2,[r0,#0x60]         ;3376
000166  6e02              LDR      r2,[r0,#0x60]         ;3377
000168  230d              MOVS     r3,#0xd               ;3377
00016a  f363421c          BFI      r2,r3,#16,#13         ;3377
00016e  6602              STR      r2,[r0,#0x60]         ;3377
000170  6141              STR      r1,[r0,#0x14]         ;3379
000172  210f              MOVS     r1,#0xf               ;3381
000174  6441              STR      r1,[r0,#0x44]         ;3381
                  |L7.374|
000176  6c41              LDR      r1,[r0,#0x44]         ;3381
000178  2900              CMP      r1,#0                 ;3381
00017a  d1fc              BNE      |L7.374|
00017c  4770              BX       lr
;;;3394   
                          ENDP

00017e  0000              DCW      0x0000
                  |L7.384|
                          DCD      0x20040000

                          AREA ||i.MSPI_RegisterRead||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterRead PROC
;;;3046   
;;;3047   void MSPI_RegisterRead(uint32_t Addr, uint32_t * ReadBuf, eROIC_Read_Option_t eOption)
000000  b430              PUSH     {r4,r5}
;;;3048   {
;;;3049   	uint8_t iMspi;
;;;3050   	uint32_t ulAddr;
;;;3051   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;3052   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;3053   
;;;3054   //	switch(hal_Info_GetControlActivePenSettingType())
;;;3055   //	{
;;;3056   //		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;3057   //		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;3058   //		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;3059   		{
;;;3060   			pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
000002  4b57              LDR      r3,|L8.352|
;;;3061   			pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
000004  f8dfc15c          LDR      r12,|L8.356|
;;;3062   //			break;
;;;3063   		}
;;;3064   //	}
;;;3065   
;;;3066   	ulAddr = Addr;
;;;3067   	if(eOption == MSPI_READ_SM0_R1)
000008  2a02              CMP      r2,#2
00000a  bf08              IT       EQ
00000c  f5007080          ADDEQ    r0,r0,#0x100
;;;3068   	{
;;;3069   		ulAddr += 0x100;
;;;3070   	}
;;;3071   
;;;3072   	for (iMspi = 0; iMspi < MSPI_NUM; iMspi++)
;;;3073   	{
;;;3074   		pMSPI_SEND_BUFF[iMspi].Addr = ulAddr;
000010  8018              STRH     r0,[r3,#0]
;;;3075   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 1;
000012  885a              LDRH     r2,[r3,#2]
000014  f422727e          BIC      r2,r2,#0x3f8
000018  3208              ADDS     r2,r2,#8
;;;3076   		pMSPI_SEND_BUFF[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
;;;3077   		pMSPI_SEND_BUFF[iMspi].tBit.ExtCMDEn = 0;
;;;3078   		pMSPI_SEND_BUFF[iMspi].tBit.DualRxEn = 0;
;;;3079   		pMSPI_SEND_BUFF[iMspi].tBit.ChkSum = 0;
00001a  f42242f8          BIC      r2,r2,#0x7c00
;;;3080   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
00001e  f4424200          ORR      r2,r2,#0x8000
000022  805a              STRH     r2,[r3,#2]
;;;3081   		pMSPI_SEND_BUFF[iMspi].Data_M = 0;
000024  2200              MOVS     r2,#0
000026  809a              STRH     r2,[r3,#4]
;;;3082   		pMSPI_SEND_BUFF[iMspi].Data_L = 0;
000028  80da              STRH     r2,[r3,#6]
00002a  8118              STRH     r0,[r3,#8]            ;3074
00002c  895c              LDRH     r4,[r3,#0xa]          ;3075
00002e  f424747e          BIC      r4,r4,#0x3f8          ;3075
000032  3408              ADDS     r4,r4,#8              ;3075
000034  f42444f8          BIC      r4,r4,#0x7c00         ;3079
000038  f4444400          ORR      r4,r4,#0x8000         ;3080
00003c  815c              STRH     r4,[r3,#0xa]          ;3080
00003e  819a              STRH     r2,[r3,#0xc]          ;3081
000040  81da              STRH     r2,[r3,#0xe]
000042  8218              STRH     r0,[r3,#0x10]         ;3074
000044  8a5c              LDRH     r4,[r3,#0x12]         ;3075
000046  f424747e          BIC      r4,r4,#0x3f8          ;3075
00004a  3408              ADDS     r4,r4,#8              ;3075
00004c  f42444f8          BIC      r4,r4,#0x7c00         ;3079
000050  f4444400          ORR      r4,r4,#0x8000         ;3080
000054  825c              STRH     r4,[r3,#0x12]         ;3080
000056  829a              STRH     r2,[r3,#0x14]         ;3081
000058  82da              STRH     r2,[r3,#0x16]
00005a  8318              STRH     r0,[r3,#0x18]         ;3074
00005c  8b58              LDRH     r0,[r3,#0x1a]         ;3075
00005e  f420707e          BIC      r0,r0,#0x3f8          ;3075
000062  3008              ADDS     r0,r0,#8              ;3075
000064  f42040f8          BIC      r0,r0,#0x7c00         ;3079
000068  f4404000          ORR      r0,r0,#0x8000         ;3080
00006c  8358              STRH     r0,[r3,#0x1a]         ;3080
00006e  839a              STRH     r2,[r3,#0x1c]         ;3081
;;;3083   	}
;;;3084   
;;;3085   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;3086   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;3087   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;3088   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;3089   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;3090   	MSPI->tSPIENA.tBit.spiRxEna6 = ENABLE;
;;;3091   	MSPI->tSPIENA.tBit.spiRxEna7 = ENABLE;
;;;3092   
;;;3093   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3094   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3095   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3096   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3097   	MSPI->tSPITRSIZE1.tBit.spitrsize6 = 0x3;
;;;3098   	MSPI->tSPITRSIZE1.tBit.spitrsize7 = 0x3;
;;;3099   
;;;3100   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x1;
;;;3101   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x1;
;;;3102   
;;;3103   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3104   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3105   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3106   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3107   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd6 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3108   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd7 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;3109   
;;;3110   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3111   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3112   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3113   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3114   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd6 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3115   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd7 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;3116   
;;;3117   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3118   
;;;3119   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3120   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;3121   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;3122   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;3123   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
;;;3124   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;3125   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;3126   
;;;3127   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3128   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3129   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;3130   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3131   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3132   
;;;3133   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x1;
;;;3134   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x1;
;;;3135   
;;;3136   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3137   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3138   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3139   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3140   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3141   
;;;3142   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3143   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3144   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3145   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3146   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3147   
;;;3148   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3149   
;;;3150   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3151   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO || CUSTOMER == MODEL_DEF_FHD_92513_LENOVO_NON_PRIVACY)
;;;3152   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
000070  f04f2040          MOV      r0,#0x40004000
000074  83da              STRH     r2,[r3,#0x1e]         ;3082
000076  6803              LDR      r3,[r0,#0]
000078  f4437380          ORR      r3,r3,#0x100
00007c  6003              STR      r3,[r0,#0]
;;;3153   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
00007e  6803              LDR      r3,[r0,#0]
000080  f4437300          ORR      r3,r3,#0x200
000084  6003              STR      r3,[r0,#0]
;;;3154   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
000086  6803              LDR      r3,[r0,#0]
000088  f4436380          ORR      r3,r3,#0x400
00008c  6003              STR      r3,[r0,#0]
;;;3155   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
00008e  6803              LDR      r3,[r0,#0]
000090  f4436300          ORR      r3,r3,#0x800
000094  6003              STR      r3,[r0,#0]
;;;3156   
;;;3157   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
000096  6a03              LDR      r3,[r0,#0x20]
000098  f02303ff          BIC      r3,r3,#0xff
00009c  1cdb              ADDS     r3,r3,#3
00009e  6203              STR      r3,[r0,#0x20]
;;;3158   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
0000a0  6a03              LDR      r3,[r0,#0x20]
0000a2  f423437f          BIC      r3,r3,#0xff00
0000a6  f5037340          ADD      r3,r3,#0x300
0000aa  6203              STR      r3,[r0,#0x20]
;;;3159   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
0000ac  6a03              LDR      r3,[r0,#0x20]
0000ae  f423037f          BIC      r3,r3,#0xff0000
0000b2  f5033340          ADD      r3,r3,#0x30000
0000b6  6203              STR      r3,[r0,#0x20]
;;;3160   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
0000b8  6a03              LDR      r3,[r0,#0x20]
0000ba  f023437f          BIC      r3,r3,#0xff000000
0000be  f1037340          ADD      r3,r3,#0x3000000
0000c2  6203              STR      r3,[r0,#0x20]
;;;3161   
;;;3162   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x1;
0000c4  6883              LDR      r3,[r0,#8]
0000c6  f423437f          BIC      r3,r3,#0xff00
0000ca  f5037380          ADD      r3,r3,#0x100
0000ce  6083              STR      r3,[r0,#8]
;;;3163   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x1;
0000d0  6883              LDR      r3,[r0,#8]
0000d2  f02303ff          BIC      r3,r3,#0xff
0000d6  1c5b              ADDS     r3,r3,#1
0000d8  6083              STR      r3,[r0,#8]
;;;3164   
;;;3165   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
0000da  6c83              LDR      r3,[r0,#0x48]
0000dc  f362030c          BFI      r3,r2,#0,#13
0000e0  6483              STR      r3,[r0,#0x48]
;;;3166   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
0000e2  2308              MOVS     r3,#8
0000e4  6c84              LDR      r4,[r0,#0x48]
0000e6  2502              MOVS     r5,#2
0000e8  f365441c          BFI      r4,r5,#16,#13
0000ec  6484              STR      r4,[r0,#0x48]
;;;3167   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
0000ee  6cc4              LDR      r4,[r0,#0x4c]
0000f0  2504              MOVS     r5,#4
0000f2  f365040c          BFI      r4,r5,#0,#13
0000f6  64c4              STR      r4,[r0,#0x4c]
;;;3168   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
0000f8  6cc4              LDR      r4,[r0,#0x4c]
0000fa  2506              MOVS     r5,#6
0000fc  f365441c          BFI      r4,r5,#16,#13
000100  64c4              STR      r4,[r0,#0x4c]
;;;3169   
;;;3170   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
000102  6d84              LDR      r4,[r0,#0x58]
000104  f363040c          BFI      r4,r3,#0,#13
000108  6584              STR      r4,[r0,#0x58]
;;;3171   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
00010a  6d83              LDR      r3,[r0,#0x58]
00010c  2409              MOVS     r4,#9
00010e  f364431c          BFI      r3,r4,#16,#13
000112  6583              STR      r3,[r0,#0x58]
;;;3172   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
000114  6dc3              LDR      r3,[r0,#0x5c]
000116  240a              MOVS     r4,#0xa
000118  f364030c          BFI      r3,r4,#0,#13
00011c  65c3              STR      r3,[r0,#0x5c]
;;;3173   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
00011e  6dc3              LDR      r3,[r0,#0x5c]
000120  240b              MOVS     r4,#0xb
000122  f364431c          BFI      r3,r4,#16,#13
000126  65c3              STR      r3,[r0,#0x5c]
;;;3174   
;;;3175   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
000128  6142              STR      r2,[r0,#0x14]
;;;3176   
;;;3177   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
00012a  220f              MOVS     r2,#0xf
00012c  6442              STR      r2,[r0,#0x44]
                  |L8.302|
00012e  6c42              LDR      r2,[r0,#0x44]
000130  2a00              CMP      r2,#0
000132  d1fc              BNE      |L8.302|
;;;3178   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3179   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;3180   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;3181   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
;;;3182   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;3183   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;3184   	MSPI->tSPIENA.tBit.spiRxEna5 = ENABLE;
;;;3185   
;;;3186   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3187   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3188   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;3189   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3190   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3191   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
;;;3192   
;;;3193   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x1;
;;;3194   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x1;
;;;3195   
;;;3196   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3197   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3198   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3199   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3200   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3201   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd5 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;3202   
;;;3203   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3204   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3205   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3206   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3207   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3208   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd5 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;3209   
;;;3210   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3211   
;;;3212   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3213   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3214   
;;;3215   	MSPI_IntCLR();
;;;3216   
;;;3217   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;3218   	{
;;;3219   		*ReadBuf++ = (uint32_t)(((pMSPI_READ_BUFF[iMspi].Data >> 16) & 0xFFFF) | ((pMSPI_READ_BUFF[iMspi].Data << 16) & 0xFFFF0000));
000134  f8dc0000          LDR      r0,[r12,#0]
000138  ea4f4030          ROR      r0,r0,#16
00013c  6008              STR      r0,[r1,#0]
00013e  f8dc0004          LDR      r0,[r12,#4]
000142  ea4f4030          ROR      r0,r0,#16
000146  6048              STR      r0,[r1,#4]
000148  f8dc0008          LDR      r0,[r12,#8]
00014c  ea4f4030          ROR      r0,r0,#16
000150  6088              STR      r0,[r1,#8]
000152  f8dc000c          LDR      r0,[r12,#0xc]
000156  ea4f4030          ROR      r0,r0,#16
00015a  60c8              STR      r0,[r1,#0xc]
;;;3220   	}
;;;3221   }
00015c  bc30              POP      {r4,r5}
00015e  4770              BX       lr
;;;3222   
                          ENDP

                  |L8.352|
                          DCD      0x20040000
                  |L8.356|
                          DCD      0x20040020

                          AREA ||i.MSPI_RegisterWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterWrite PROC
;;;2874   
;;;2875   void MSPI_RegisterWrite(uint32_t Addr, uint32_t value)
000000  4a46              LDR      r2,|L9.284|
;;;2876   {
;;;2877   	uint8_t iMspi;
;;;2878   	tMSPI_Reg_WriteBuf_t * pMSPI_SEND_BUFF;
;;;2879   	tMSPI_Reg_ReadBuf_t * pMSPI_READ_BUFF;
;;;2880   
;;;2881   //	switch(hal_Info_GetControlActivePenSettingType())
;;;2882   //	{
;;;2883   //		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;2884   //		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;2885   //		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;2886   		{
;;;2887   			pMSPI_SEND_BUFF = (tMSPI_Reg_WriteBuf_t *)&MSPI_BUF->SricRegWriteBuffer[0];
;;;2888   			pMSPI_READ_BUFF = (tMSPI_Reg_ReadBuf_t *)&MSPI_BUF->SricRegReadBuffer[0];
;;;2889   //			break;
;;;2890   		}
;;;2891   //	}
;;;2892   
;;;2893   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;2894   	{
;;;2895   		pMSPI_SEND_BUFF[iMspi].Addr = Addr;
000002  8010              STRH     r0,[r2,#0]
;;;2896   		pMSPI_SEND_BUFF[iMspi].tBit.Burst_Len = 0;
000004  8853              LDRH     r3,[r2,#2]
;;;2897   		pMSPI_SEND_BUFF[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
;;;2898   		pMSPI_SEND_BUFF[iMspi].tBit.ExtCMDEn = 0;
;;;2899   		pMSPI_SEND_BUFF[iMspi].tBit.DualRxEn = 0;
;;;2900   		pMSPI_SEND_BUFF[iMspi].tBit.ChkSum = 0;
;;;2901   		pMSPI_SEND_BUFF[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000006  f42363ff          BIC      r3,r3,#0x7f8
00000a  f4234378          BIC      r3,r3,#0xf800
00000e  8053              STRH     r3,[r2,#2]
;;;2902   		pMSPI_SEND_BUFF[iMspi].Data_M = value >> 16;
000010  0c0b              LSRS     r3,r1,#16
000012  8093              STRH     r3,[r2,#4]
;;;2903   		pMSPI_SEND_BUFF[iMspi].Data_L = value & 0xFFFF;
000014  80d1              STRH     r1,[r2,#6]
000016  8110              STRH     r0,[r2,#8]            ;2895
000018  f8b2c00a          LDRH     r12,[r2,#0xa]         ;2896
00001c  f42c6cff          BIC      r12,r12,#0x7f8        ;2901
000020  f42c4c78          BIC      r12,r12,#0xf800       ;2901
000024  f8a2c00a          STRH     r12,[r2,#0xa]         ;2901
000028  8193              STRH     r3,[r2,#0xc]          ;2902
00002a  81d1              STRH     r1,[r2,#0xe]
00002c  8210              STRH     r0,[r2,#0x10]         ;2895
00002e  f8b2c012          LDRH     r12,[r2,#0x12]        ;2896
000032  f42c6cff          BIC      r12,r12,#0x7f8        ;2901
000036  f42c4c78          BIC      r12,r12,#0xf800       ;2901
00003a  f8a2c012          STRH     r12,[r2,#0x12]        ;2901
00003e  8293              STRH     r3,[r2,#0x14]         ;2902
000040  82d1              STRH     r1,[r2,#0x16]
000042  8310              STRH     r0,[r2,#0x18]         ;2895
000044  8b50              LDRH     r0,[r2,#0x1a]         ;2896
000046  f42060ff          BIC      r0,r0,#0x7f8          ;2901
00004a  f4204078          BIC      r0,r0,#0xf800         ;2901
00004e  8350              STRH     r0,[r2,#0x1a]         ;2901
000050  8393              STRH     r3,[r2,#0x1c]         ;2902
;;;2904   	}
;;;2905   
;;;2906   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;2907   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;2908   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;2909   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;2910   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
;;;2911   	MSPI->tSPIENA.tBit.spiRxEna6 = DISABLE;
;;;2912   	MSPI->tSPIENA.tBit.spiRxEna7 = DISABLE;
;;;2913   
;;;2914   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;2915   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;2916   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;2917   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;2918   	MSPI->tSPITRSIZE1.tBit.spitrsize6 = 0x3;
;;;2919   	MSPI->tSPITRSIZE1.tBit.spitrsize7 = 0x3;
;;;2920   
;;;2921   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;2922   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;2923   
;;;2924   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;2925   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;2926   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;2927   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;2928   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd6 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;2929   	MSPI->tSPISTRTWAD67.tBit.spiStrtWAd7 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;2930   
;;;2931   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;2932   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;2933   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;2934   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;2935   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd6 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;2936   	MSPI->tSPISTRTRAD67.tBit.spiStrtRAd7 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;2937   
;;;2938   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;2939   
;;;2940   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;2941   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;2942   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;2943   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;2944   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
;;;2945   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;2946   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
;;;2947   
;;;2948   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;2949   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;2950   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;2951   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;2952   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;2953   
;;;2954   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;2955   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;2956   
;;;2957   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;2958   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;2959   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;2960   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;2961   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;2962   
;;;2963   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;2964   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;2965   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;2966   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;2967   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;2968   
;;;2969   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;2970   
;;;2971   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;2972   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO || CUSTOMER == MODEL_DEF_FHD_92513_LENOVO_NON_PRIVACY)
;;;2973   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
000052  f04f2040          MOV      r0,#0x40004000
000056  83d1              STRH     r1,[r2,#0x1e]         ;2903
000058  6801              LDR      r1,[r0,#0]
00005a  f4217180          BIC      r1,r1,#0x100
00005e  6001              STR      r1,[r0,#0]
;;;2974   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
000060  6801              LDR      r1,[r0,#0]
000062  f4217100          BIC      r1,r1,#0x200
000066  6001              STR      r1,[r0,#0]
;;;2975   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
000068  6801              LDR      r1,[r0,#0]
00006a  f4216180          BIC      r1,r1,#0x400
00006e  6001              STR      r1,[r0,#0]
;;;2976   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
000070  6801              LDR      r1,[r0,#0]
000072  f4216100          BIC      r1,r1,#0x800
000076  6001              STR      r1,[r0,#0]
;;;2977   
;;;2978   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
000078  6a01              LDR      r1,[r0,#0x20]
00007a  f02101ff          BIC      r1,r1,#0xff
00007e  1cc9              ADDS     r1,r1,#3
000080  6201              STR      r1,[r0,#0x20]
;;;2979   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
000082  6a01              LDR      r1,[r0,#0x20]
000084  f421417f          BIC      r1,r1,#0xff00
000088  f5017140          ADD      r1,r1,#0x300
00008c  6201              STR      r1,[r0,#0x20]
;;;2980   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
00008e  6a01              LDR      r1,[r0,#0x20]
000090  f421017f          BIC      r1,r1,#0xff0000
000094  f5013140          ADD      r1,r1,#0x30000
000098  6201              STR      r1,[r0,#0x20]
;;;2981   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
00009a  6a01              LDR      r1,[r0,#0x20]
00009c  f021417f          BIC      r1,r1,#0xff000000
0000a0  f1017140          ADD      r1,r1,#0x3000000
0000a4  6201              STR      r1,[r0,#0x20]
;;;2982   
;;;2983   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
0000a6  6881              LDR      r1,[r0,#8]
0000a8  f421417f          BIC      r1,r1,#0xff00
0000ac  6081              STR      r1,[r0,#8]
;;;2984   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
0000ae  6881              LDR      r1,[r0,#8]
0000b0  f02101ff          BIC      r1,r1,#0xff
0000b4  1cc9              ADDS     r1,r1,#3
0000b6  6081              STR      r1,[r0,#8]
;;;2985   
;;;2986   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
0000b8  6c82              LDR      r2,[r0,#0x48]
;;;2987   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;2988   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;2989   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;2990   
;;;2991   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;2992   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;2993   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;2994   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;2995   
;;;2996   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;2997   
;;;2998   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;2999   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3000   	MSPI->tSPIENA.tBit.spiRxEna0 = DISABLE;
;;;3001   	MSPI->tSPIENA.tBit.spiRxEna1 = DISABLE;
;;;3002   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
;;;3003   	MSPI->tSPIENA.tBit.spiRxEna3 = DISABLE;
;;;3004   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
;;;3005   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
;;;3006   
;;;3007   	MSPI->tSPITRSIZE0.tBit.spitrsize0 = 0x3;
;;;3008   	MSPI->tSPITRSIZE0.tBit.spitrsize1 = 0x3;
;;;3009   	MSPI->tSPITRSIZE0.tBit.spitrsize2 = 0x3;
;;;3010   	MSPI->tSPITRSIZE0.tBit.spitrsize3 = 0x3;
;;;3011   	MSPI->tSPITRSIZE1.tBit.spitrsize4 = 0x3;
;;;3012   	MSPI->tSPITRSIZE1.tBit.spitrsize5 = 0x3;
;;;3013   
;;;3014   	MSPI->tSPIDATALEN.tBit.rxdata_len = 0x0;
;;;3015   	MSPI->tSPIDATALEN.tBit.txdata_len = 0x3;
;;;3016   
;;;3017   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[0]);
;;;3018   	MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[1]);
;;;3019   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[2]);
;;;3020   	MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[3]);
;;;3021   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[4]);
;;;3022   	MSPI->tSPISTRTWAD45.tBit.spiStrtWAd5 = MSPI_MEM_INDEX(&pMSPI_SEND_BUFF[5]);
;;;3023   
;;;3024   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[0]);
;;;3025   	MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[1]);
;;;3026   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[2]);
;;;3027   	MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[3]);
;;;3028   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[4]);
;;;3029   	MSPI->tSPISTRTRAD45.tBit.spiStrtRAd5 = MSPI_MEM_INDEX(&pMSPI_READ_BUFF[5]);
;;;3030   
;;;3031   	MSPI->tSINTRMSCR.ulBulk = DISABLE;
;;;3032   
;;;3033   	MSPI->tSPISTART.ulBulk = MSPI_START_VAL;
;;;3034   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;3035   
;;;3036   	MSPI_IntCLR();
;;;3037   
;;;3038   	/*
;;;3039   	 * Read Test Code after write!!
;;;3040   	 */
;;;3041   //	{
;;;3042   //		uint32_t ulBuf[6];
;;;3043   //		MSPI_RegisterRead(Addr, &ulBuf[0], MSPI_READ_NONE);
;;;3044   //	}
;;;3045   }
0000ba  2100              MOVS     r1,#0
0000bc  f361020c          BFI      r2,r1,#0,#13          ;2986
0000c0  6482              STR      r2,[r0,#0x48]         ;2986
0000c2  6c82              LDR      r2,[r0,#0x48]         ;2987
0000c4  2308              MOVS     r3,#8
0000c6  f04f0c02          MOV      r12,#2                ;2987
0000ca  f36c421c          BFI      r2,r12,#16,#13        ;2987
0000ce  6482              STR      r2,[r0,#0x48]         ;2987
0000d0  6cc2              LDR      r2,[r0,#0x4c]         ;2988
0000d2  f04f0c04          MOV      r12,#4                ;2988
0000d6  f36c020c          BFI      r2,r12,#0,#13         ;2988
0000da  64c2              STR      r2,[r0,#0x4c]         ;2988
0000dc  6cc2              LDR      r2,[r0,#0x4c]         ;2989
0000de  f04f0c06          MOV      r12,#6                ;2989
0000e2  f36c421c          BFI      r2,r12,#16,#13        ;2989
0000e6  64c2              STR      r2,[r0,#0x4c]         ;2989
0000e8  6d82              LDR      r2,[r0,#0x58]         ;2991
0000ea  f363020c          BFI      r2,r3,#0,#13          ;2991
0000ee  6582              STR      r2,[r0,#0x58]         ;2991
0000f0  6d82              LDR      r2,[r0,#0x58]         ;2992
0000f2  2309              MOVS     r3,#9                 ;2992
0000f4  f363421c          BFI      r2,r3,#16,#13         ;2992
0000f8  6582              STR      r2,[r0,#0x58]         ;2992
0000fa  6dc2              LDR      r2,[r0,#0x5c]         ;2993
0000fc  230a              MOVS     r3,#0xa               ;2993
0000fe  f363020c          BFI      r2,r3,#0,#13          ;2993
000102  65c2              STR      r2,[r0,#0x5c]         ;2993
000104  6dc2              LDR      r2,[r0,#0x5c]         ;2994
000106  230b              MOVS     r3,#0xb               ;2994
000108  f363421c          BFI      r2,r3,#16,#13         ;2994
00010c  65c2              STR      r2,[r0,#0x5c]         ;2994
00010e  6141              STR      r1,[r0,#0x14]         ;2996
000110  210f              MOVS     r1,#0xf               ;2998
000112  6441              STR      r1,[r0,#0x44]         ;2998
                  |L9.276|
000114  6c41              LDR      r1,[r0,#0x44]         ;2998
000116  2900              CMP      r1,#0                 ;2998
000118  d1fc              BNE      |L9.276|
00011a  4770              BX       lr
;;;3046   
                          ENDP

                  |L9.284|
                          DCD      0x20040000

                          AREA ||i.MSPI_Set_AITMODE||, CODE, READONLY, ALIGN=2

                  MSPI_Set_AITMODE PROC
;;;2567   #elif ((USED_ROIC_DEF == ROIC_SW98500) || (USED_ROIC_DEF == ROIC_SW98502) || (USED_ROIC_DEF == ROIC_SW92510) || (USED_ROIC_DEF == ROIC_SW92511) || (USED_ROIC_DEF == ROIC_SW92512) || (USED_ROIC_DEF == ROIC_SW92509) || (USED_ROIC_DEF == ROIC_SW92513))
;;;2568   void MSPI_Set_AITMODE(eSENSING_MODE_t eSensingMode)
000000  f04f2040          MOV      r0,#0x40004000
;;;2569   {
;;;2570   	uint32_t iMspi;
;;;2571   #if USED_SPI_NBIT_TRANSMODE
;;;2572   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_WORD;
;;;2573   #else /* USED_SPI_NBIT_TRANSMODE */
;;;2574   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_HALF_WORD;
000004  6841              LDR      r1,[r0,#4]
000006  f0210101          BIC      r1,r1,#1
00000a  6041              STR      r1,[r0,#4]
;;;2575   #endif /* USED_SPI_NBIT_TRANSMODE */
;;;2576   
;;;2577       MSPI->tSPISCR.tBit.DUALACC 				= SPI_RX_DUAL_MODE;//SPI_RX_SINGLE_MODE;//SPI_RX_DUAL_MODE;//SPI_RX_SINGLE_MODE;
00000c  6841              LDR      r1,[r0,#4]
00000e  f0410102          ORR      r1,r1,#2
000012  6041              STR      r1,[r0,#4]
;;;2578       MSPI->tSPISCR.tBit.DUALBITORD 			= SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;//SPI_RX_DUAL_BIT_ORDER_MISO_MOSI;//SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;
000014  6841              LDR      r1,[r0,#4]
000016  f0210104          BIC      r1,r1,#4
00001a  6041              STR      r1,[r0,#4]
;;;2579       MSPI->tSPISCR.tBit.TXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
00001c  6841              LDR      r1,[r0,#4]
00001e  f0210108          BIC      r1,r1,#8
000022  6041              STR      r1,[r0,#4]
;;;2580       MSPI->tSPISCR.tBit.RXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
000024  6841              LDR      r1,[r0,#4]
000026  f0210110          BIC      r1,r1,#0x10
00002a  6041              STR      r1,[r0,#4]
;;;2581       MSPI->tSPISCR.tBit.TXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
00002c  6841              LDR      r1,[r0,#4]
00002e  f0210120          BIC      r1,r1,#0x20
000032  6041              STR      r1,[r0,#4]
;;;2582       MSPI->tSPISCR.tBit.RXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
000034  6841              LDR      r1,[r0,#4]
000036  f0210140          BIC      r1,r1,#0x40
00003a  6041              STR      r1,[r0,#4]
;;;2583       MSPI->tSPISCR.tBit.RXPOS 				= PARAMSET_MSPI_RX_POS;
00003c  6841              LDR      r1,[r0,#4]
00003e  f42161f0          BIC      r1,r1,#0x780
000042  f5017180          ADD      r1,r1,#0x100
000046  6041              STR      r1,[r0,#4]
;;;2584       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_3_DIV;
000048  6841              LDR      r1,[r0,#4]
00004a  f42141f0          BIC      r1,r1,#0x7800
00004e  f5015180          ADD      r1,r1,#0x1000
000052  6041              STR      r1,[r0,#4]
;;;2585       MSPI->tSPISCR.tBit.MISO_ZERO_CHK_EN 	= DISABLE;
000054  6841              LDR      r1,[r0,#4]
000056  f4214100          BIC      r1,r1,#0x8000
00005a  6041              STR      r1,[r0,#4]
;;;2586   
;;;2587   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;2588       MSPI->MSPI_WFE_ENA						= BIT(0) | BIT(1) | BIT(3) | BIT(4) | BIT(6) | BIT(7); // Miso Interrupt SPI Number Setting
;;;2589   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;2590       MSPI->MSPI_WFE_ENA						= BIT(0) | BIT(1) | BIT(2) | BIT(3) | BIT(4); // Miso Interrupt SPI Number Setting
;;;2591   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO || CUSTOMER == MODEL_DEF_FHD_92513_LENOVO_NON_PRIVACY)
;;;2592       MSPI->MSPI_WFE_ENA						= MSPI_START_VAL; // Miso Interrupt SPI Number Setting
00005c  210f              MOVS     r1,#0xf
00005e  63c1              STR      r1,[r0,#0x3c]
;;;2593   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2594       MSPI->MSPI_WFE_ENA						= BIT(0) | BIT(1) | BIT(2) | BIT(3) | BIT(4) | BIT(5); // Miso Interrupt SPI Number Setting
;;;2595   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2596   
;;;2597   	MSPI->tSPISTATELEN.tBit.PreShftLen		= 15;//16;
000060  6b01              LDR      r1,[r0,#0x30]
000062  f02101ff          BIC      r1,r1,#0xff
000066  310f              ADDS     r1,r1,#0xf
000068  6301              STR      r1,[r0,#0x30]
;;;2598   	MSPI->tSPISTATELEN.tBit.TmpIdleLen		= 0;//1;
00006a  6b01              LDR      r1,[r0,#0x30]
00006c  f421417f          BIC      r1,r1,#0xff00
000070  6301              STR      r1,[r0,#0x30]
;;;2599   	MSPI->tSPISTATELEN.tBit.PostShftLen  	= 9;//10;
000072  6b01              LDR      r1,[r0,#0x30]
000074  f421017f          BIC      r1,r1,#0xff0000
000078  f5012110          ADD      r1,r1,#0x90000
00007c  6301              STR      r1,[r0,#0x30]
;;;2600   	MSPI->tSPISTATELEN.tBit.txbufnum 		= 6;//7;
00007e  6b01              LDR      r1,[r0,#0x30]
000080  f02151f8          BIC      r1,r1,#0x1f000000
000084  f10161c0          ADD      r1,r1,#0x6000000
000088  6301              STR      r1,[r0,#0x30]
;;;2601   
;;;2602   #if USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;2603   	MSPI->SPIMUXNUM = FINGER_ESD_SCAN_MUX_NUM + FINGER_MUX_NUM-1;
00008a  210b              MOVS     r1,#0xb
00008c  62c1              STR      r1,[r0,#0x2c]
;;;2604   #else
;;;2605   	MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;2606   #endif
;;;2607   
;;;2608   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;2609   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;2610   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;2611   	MSPI->tSPIENA.tBit.spiRxEna2 = DISABLE;
;;;2612   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;2613   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;2614   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
;;;2615   	MSPI->tSPIENA.tBit.spiRxEna6 = ENABLE;
;;;2616   	MSPI->tSPIENA.tBit.spiRxEna7 = ENABLE;
;;;2617   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;2618   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;2619   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;2620   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
;;;2621   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;2622   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;2623   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
;;;2624   	MSPI->tSPIENA.tBit.spiRxEna6 = DISABLE;
;;;2625   	MSPI->tSPIENA.tBit.spiRxEna7 = DISABLE;
;;;2626   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO || CUSTOMER == MODEL_DEF_FHD_92513_LENOVO_NON_PRIVACY)
;;;2627   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
00008e  6801              LDR      r1,[r0,#0]
000090  f4417180          ORR      r1,r1,#0x100
000094  6001              STR      r1,[r0,#0]
;;;2628   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
000096  6801              LDR      r1,[r0,#0]
000098  f4417100          ORR      r1,r1,#0x200
00009c  6001              STR      r1,[r0,#0]
;;;2629   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
00009e  6801              LDR      r1,[r0,#0]
0000a0  f4416180          ORR      r1,r1,#0x400
0000a4  6001              STR      r1,[r0,#0]
;;;2630   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
0000a6  6801              LDR      r1,[r0,#0]
0000a8  f4416100          ORR      r1,r1,#0x800
0000ac  6001              STR      r1,[r0,#0]
;;;2631   	MSPI->tSPIENA.tBit.spiRxEna4 = DISABLE;
0000ae  6801              LDR      r1,[r0,#0]
0000b0  f4215180          BIC      r1,r1,#0x1000
0000b4  6001              STR      r1,[r0,#0]
;;;2632   	MSPI->tSPIENA.tBit.spiRxEna5 = DISABLE;
0000b6  6801              LDR      r1,[r0,#0]
0000b8  f4215100          BIC      r1,r1,#0x2000
0000bc  6001              STR      r1,[r0,#0]
;;;2633   	MSPI->tSPIENA.tBit.spiRxEna6 = DISABLE;
0000be  6801              LDR      r1,[r0,#0]
0000c0  f4214180          BIC      r1,r1,#0x4000
0000c4  6001              STR      r1,[r0,#0]
;;;2634   	MSPI->tSPIENA.tBit.spiRxEna7 = DISABLE;
0000c6  6801              LDR      r1,[r0,#0]
0000c8  f4214100          BIC      r1,r1,#0x8000
0000cc  6001              STR      r1,[r0,#0]
;;;2635   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2636   	MSPI->tSPIENA.tBit.spiRxEna0 = ENABLE;
;;;2637   	MSPI->tSPIENA.tBit.spiRxEna1 = ENABLE;
;;;2638   	MSPI->tSPIENA.tBit.spiRxEna2 = ENABLE;
;;;2639   	MSPI->tSPIENA.tBit.spiRxEna3 = ENABLE;
;;;2640   	MSPI->tSPIENA.tBit.spiRxEna4 = ENABLE;
;;;2641   	MSPI->tSPIENA.tBit.spiRxEna5 = ENABLE;
;;;2642   	MSPI->tSPIENA.tBit.spiRxEna6 = DISABLE;
;;;2643   	MSPI->tSPIENA.tBit.spiRxEna7 = DISABLE;
;;;2644   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2645   
;;;2646   	MSPI->tSPIMODE.tBit.aitmode = SPI_MODE_AITMODE;
0000ce  6b41              LDR      r1,[r0,#0x34]
0000d0  f0410101          ORR      r1,r1,#1
0000d4  6341              STR      r1,[r0,#0x34]
;;;2647   
;;;2648   	MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
0000d6  6941              LDR      r1,[r0,#0x14]
0000d8  f0410102          ORR      r1,r1,#2
0000dc  6141              STR      r1,[r0,#0x14]
;;;2649   
;;;2650   //	switch(hal_Info_GetControlActivePenSettingType())
;;;2651   //	{
;;;2652   //		case ACTIVEPEN_TYPE_LOCAL_MS:
;;;2653   //		case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;2654   //		case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;2655   		{
;;;2656   #if USED_SPI_NBIT_TRANSMODE
;;;2657   			for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;2658   			{
;;;2659   				MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
;;;2660   				MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1)-1;
;;;2661   				MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
;;;2662   				MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
;;;2663   				MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
;;;2664   				MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
;;;2665   				MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;2666   			}
;;;2667   
;;;2668   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;2669   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2670   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2671   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2672   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2673   			MSPI->tSPITRSIZE1.tBit.spitrsize6 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2674   			MSPI->tSPITRSIZE1.tBit.spitrsize7 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2675   
;;;2676   			MSPI->tSPIDATALEN.tBit.rxdata_len = 62;//(SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2677   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2678   
;;;2679   			MSPI->tSPIDATALEN.tBit.rxbitlen = 23;
;;;2680   			MSPI->tSPIDATALEN.tBit.txbitlen = 31;//15;
;;;2681   
;;;2682   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2683   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 2
;;;2684   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 3
;;;2685   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 4
;;;2686   			MSPI->tSPISTRTWAD67.tBit.spiStrtWAd6 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 5
;;;2687   			MSPI->tSPISTRTWAD67.tBit.spiStrtWAd7 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[5]); //SRIC 6
;;;2688   
;;;2689   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2690   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 2
;;;2691   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 3
;;;2692   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 4
;;;2693   			MSPI->tSPISTRTRAD67.tBit.spiStrtRAd6 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 5
;;;2694   			MSPI->tSPISTRTRAD67.tBit.spiStrtRAd7 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[5]); //SRIC 6
;;;2695   
;;;2696   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;2697   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2698   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2699   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2700   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2701   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = 63;//SZ_MSPIBUF_MUXDATA+1;
;;;2702   
;;;2703   			MSPI->tSPIDATALEN.tBit.rxdata_len = 62;//(SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2704   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2705   
;;;2706   			MSPI->tSPIDATALEN.tBit.rxbitlen = 23;
;;;2707   			MSPI->tSPIDATALEN.tBit.txbitlen = 31;//15;
;;;2708   
;;;2709   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2710   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 2
;;;2711   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 3
;;;2712   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 4
;;;2713   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 5
;;;2714   
;;;2715   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2716   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 2
;;;2717   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 3
;;;2718   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 4
;;;2719   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 5
;;;2720   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2721   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;2722   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;2723   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = SZ_MSPIBUF_MUXDATA+1;
;;;2724   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;2725   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;2726   			MSPI->tSPITRSIZE1.tBit.spitrsize5 = SZ_MSPIBUF_MUXDATA+1;
;;;2727   
;;;2728   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2729   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2730   
;;;2731   			MSPI->tSPIDATALEN.tBit.rxbitlen = 11;//15;
;;;2732   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
;;;2733   
;;;2734   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2735   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 1
;;;2736   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 1
;;;2737   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 1
;;;2738   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 1
;;;2739   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd5 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[5]); //SRIC 1
;;;2740   
;;;2741   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2742   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 1
;;;2743   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 1
;;;2744   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 1
;;;2745   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 1
;;;2746   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd5 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[5]); //SRIC 1
;;;2747   
;;;2748   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2749   #else /* USED_SPI_NBIT_TRANSMODE */
;;;2750   			for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;2751   			{
;;;2752   				MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
0000de  496b              LDR      r1,|L10.652|
0000e0  14c2              ASRS     r2,r0,#19
0000e2  800a              STRH     r2,[r1,#0]
;;;2753   
;;;2754   				MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1);
0000e4  1c89              ADDS     r1,r1,#2
0000e6  880b              LDRH     r3,[r1,#0]
0000e8  f423737e          BIC      r3,r3,#0x3f8
0000ec  f50373e0          ADD      r3,r3,#0x1c0
0000f0  800b              STRH     r3,[r1,#0]
;;;2755   				MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
0000f2  880b              LDRH     r3,[r1,#0]
0000f4  f4436340          ORR      r3,r3,#0xc00
0000f8  800b              STRH     r3,[r1,#0]
;;;2756   				MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
0000fa  880b              LDRH     r3,[r1,#0]
0000fc  f4235380          BIC      r3,r3,#0x1000
000100  800b              STRH     r3,[r1,#0]
;;;2757   				MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
000102  880b              LDRH     r3,[r1,#0]
000104  f4435300          ORR      r3,r3,#0x2000
000108  800b              STRH     r3,[r1,#0]
;;;2758   				MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
00010a  880b              LDRH     r3,[r1,#0]
00010c  f4234380          BIC      r3,r3,#0x4000
000110  800b              STRH     r3,[r1,#0]
;;;2759   				MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
000112  880b              LDRH     r3,[r1,#0]
000114  f4434300          ORR      r3,r3,#0x8000
000118  800b              STRH     r3,[r1,#0]
00011a  495d              LDR      r1,|L10.656|
00011c  800a              STRH     r2,[r1,#0]            ;2752
00011e  1c89              ADDS     r1,r1,#2              ;2754
000120  880b              LDRH     r3,[r1,#0]            ;2754
000122  f423737e          BIC      r3,r3,#0x3f8          ;2754
000126  f50373e0          ADD      r3,r3,#0x1c0          ;2754
00012a  800b              STRH     r3,[r1,#0]            ;2754
00012c  880b              LDRH     r3,[r1,#0]            ;2755
00012e  f4436340          ORR      r3,r3,#0xc00          ;2755
000132  800b              STRH     r3,[r1,#0]            ;2755
000134  880b              LDRH     r3,[r1,#0]            ;2756
000136  f4235380          BIC      r3,r3,#0x1000         ;2756
00013a  800b              STRH     r3,[r1,#0]            ;2756
00013c  880b              LDRH     r3,[r1,#0]            ;2757
00013e  f4435300          ORR      r3,r3,#0x2000         ;2757
000142  800b              STRH     r3,[r1,#0]            ;2757
000144  880b              LDRH     r3,[r1,#0]            ;2758
000146  f4234380          BIC      r3,r3,#0x4000         ;2758
00014a  800b              STRH     r3,[r1,#0]            ;2758
00014c  880b              LDRH     r3,[r1,#0]
00014e  f4434300          ORR      r3,r3,#0x8000
000152  800b              STRH     r3,[r1,#0]
000154  494f              LDR      r1,|L10.660|
000156  800a              STRH     r2,[r1,#0]            ;2752
000158  1c89              ADDS     r1,r1,#2              ;2754
00015a  880b              LDRH     r3,[r1,#0]            ;2754
00015c  f423737e          BIC      r3,r3,#0x3f8          ;2754
000160  f50373e0          ADD      r3,r3,#0x1c0          ;2754
000164  800b              STRH     r3,[r1,#0]            ;2754
000166  880b              LDRH     r3,[r1,#0]            ;2755
000168  f4436340          ORR      r3,r3,#0xc00          ;2755
00016c  800b              STRH     r3,[r1,#0]            ;2755
00016e  880b              LDRH     r3,[r1,#0]            ;2756
000170  f4235380          BIC      r3,r3,#0x1000         ;2756
000174  800b              STRH     r3,[r1,#0]            ;2756
000176  880b              LDRH     r3,[r1,#0]            ;2757
000178  f4435300          ORR      r3,r3,#0x2000         ;2757
00017c  800b              STRH     r3,[r1,#0]            ;2757
00017e  880b              LDRH     r3,[r1,#0]            ;2758
000180  f4234380          BIC      r3,r3,#0x4000         ;2758
000184  800b              STRH     r3,[r1,#0]            ;2758
000186  880b              LDRH     r3,[r1,#0]
000188  f4434300          ORR      r3,r3,#0x8000
00018c  800b              STRH     r3,[r1,#0]
00018e  4942              LDR      r1,|L10.664|
000190  800a              STRH     r2,[r1,#0]            ;2752
000192  1c89              ADDS     r1,r1,#2              ;2754
000194  880a              LDRH     r2,[r1,#0]            ;2754
000196  f422727e          BIC      r2,r2,#0x3f8          ;2754
00019a  f50272e0          ADD      r2,r2,#0x1c0          ;2754
00019e  800a              STRH     r2,[r1,#0]            ;2754
0001a0  880a              LDRH     r2,[r1,#0]            ;2755
0001a2  f4426240          ORR      r2,r2,#0xc00          ;2755
0001a6  800a              STRH     r2,[r1,#0]            ;2755
0001a8  880a              LDRH     r2,[r1,#0]            ;2756
0001aa  f4225280          BIC      r2,r2,#0x1000         ;2756
0001ae  800a              STRH     r2,[r1,#0]            ;2756
0001b0  880a              LDRH     r2,[r1,#0]            ;2757
0001b2  f4425200          ORR      r2,r2,#0x2000         ;2757
0001b6  800a              STRH     r2,[r1,#0]            ;2757
0001b8  880a              LDRH     r2,[r1,#0]            ;2758
0001ba  f4224280          BIC      r2,r2,#0x4000         ;2758
0001be  800a              STRH     r2,[r1,#0]            ;2758
0001c0  880a              LDRH     r2,[r1,#0]
0001c2  f4424200          ORR      r2,r2,#0x8000
0001c6  800a              STRH     r2,[r1,#0]
;;;2760   
;;;2761   //				MSPI_BUF->ReadCommand[iMspi].Command = ( MSPI_READ | MSPI_BURST);
;;;2762   
;;;2763   //				for (i = 0; i < SZ_WACOMPEN_MSPIBUF_MUXDATA*2 ; i++)
;;;2764   //				{
;;;2765   //					MSPI_WACOMPEN_BUF->ReadCommand[iMspi].Data[i] = 0;
;;;2766   //				}
;;;2767   			}
;;;2768   
;;;2769   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;2770   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;2771   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;2772   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;2773   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;2774   			MSPI->tSPITRSIZE1.tBit.spitrsize6 = SZ_MSPIBUF_MUXDATA+1;
;;;2775   			MSPI->tSPITRSIZE1.tBit.spitrsize7 = SZ_MSPIBUF_MUXDATA+1;
;;;2776   
;;;2777   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2778   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2779   
;;;2780   			MSPI->tSPIDATALEN.tBit.rxbitlen = 11;//15;
;;;2781   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
;;;2782   
;;;2783   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2784   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 2
;;;2785   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 3
;;;2786   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 4
;;;2787   			MSPI->tSPISTRTWAD67.tBit.spiStrtWAd6 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 5
;;;2788   			MSPI->tSPISTRTWAD67.tBit.spiStrtWAd7 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[5]); //SRIC 6
;;;2789   
;;;2790   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2791   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 2
;;;2792   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 3
;;;2793   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 4
;;;2794   			MSPI->tSPISTRTRAD67.tBit.spiStrtRAd6 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 5
;;;2795   			MSPI->tSPISTRTRAD67.tBit.spiStrtRAd7 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[5]); //SRIC 6
;;;2796   #elif (USED_MODULE_DEF == MODULE_DEF_T_1) || (USED_MODULE_DEF == MODULE_DEF_A_1)
;;;2797   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;2798   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;2799   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = SZ_MSPIBUF_MUXDATA+1;
;;;2800   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;2801   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;2802   
;;;2803   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2804   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2805   
;;;2806   			MSPI->tSPIDATALEN.tBit.rxbitlen = 11;//15;
;;;2807   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
;;;2808   
;;;2809   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2810   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 2
;;;2811   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 3
;;;2812   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 4
;;;2813   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 5
;;;2814   
;;;2815   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2816   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 2
;;;2817   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 3
;;;2818   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 4
;;;2819   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 5
;;;2820   #elif (CUSTOMER == MODEL_DEF_FHD_92513_LENOVO || CUSTOMER == MODEL_DEF_FHD_92513_LENOVO_NON_PRIVACY)
;;;2821   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
0001c8  6a01              LDR      r1,[r0,#0x20]
0001ca  f02101ff          BIC      r1,r1,#0xff
0001ce  3171              ADDS     r1,r1,#0x71
0001d0  6201              STR      r1,[r0,#0x20]
;;;2822   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
0001d2  6a01              LDR      r1,[r0,#0x20]
0001d4  f421417f          BIC      r1,r1,#0xff00
0001d8  f50141e2          ADD      r1,r1,#0x7100
0001dc  6201              STR      r1,[r0,#0x20]
;;;2823   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = SZ_MSPIBUF_MUXDATA+1;
0001de  6a01              LDR      r1,[r0,#0x20]
0001e0  f421017f          BIC      r1,r1,#0xff0000
0001e4  f50101e2          ADD      r1,r1,#0x710000
0001e8  6201              STR      r1,[r0,#0x20]
;;;2824   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
0001ea  6a01              LDR      r1,[r0,#0x20]
0001ec  f021417f          BIC      r1,r1,#0xff000000
0001f0  f10141e2          ADD      r1,r1,#0x71000000
0001f4  6201              STR      r1,[r0,#0x20]
;;;2825   
;;;2826   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
0001f6  6881              LDR      r1,[r0,#8]
0001f8  f421417f          BIC      r1,r1,#0xff00
0001fc  f50141de          ADD      r1,r1,#0x6f00
000200  6081              STR      r1,[r0,#8]
;;;2827   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
000202  6881              LDR      r1,[r0,#8]
000204  f02101ff          BIC      r1,r1,#0xff
000208  6081              STR      r1,[r0,#8]
;;;2828   
;;;2829   			MSPI->tSPIDATALEN.tBit.rxbitlen = 11;//15;
00020a  6881              LDR      r1,[r0,#8]
00020c  f0217178          BIC      r1,r1,#0x3e00000
000210  f10171b0          ADD      r1,r1,#0x1600000
000214  6081              STR      r1,[r0,#8]
;;;2830   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
000216  6881              LDR      r1,[r0,#8]
000218  f42111f8          BIC      r1,r1,#0x1f0000
00021c  f5012170          ADD      r1,r1,#0xf0000
000220  6081              STR      r1,[r0,#8]
;;;2831   
;;;2832   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
000222  6c81              LDR      r1,[r0,#0x48]
000224  f36f010c          BFC      r1,#0,#13
000228  f5017103          ADD      r1,r1,#0x20c
00022c  6481              STR      r1,[r0,#0x48]
;;;2833   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 1
00022e  6c81              LDR      r1,[r0,#0x48]
000230  f36f411c          BFC      r1,#16,#13
000234  f1017100          ADD      r1,r1,#0x2000000
000238  f50101fa          ADD      r1,r1,#0x7d0000
00023c  6481              STR      r1,[r0,#0x48]
;;;2834   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 1
00023e  6cc1              LDR      r1,[r0,#0x4c]
000240  f36f010c          BFC      r1,#0,#13
000244  f20121ee          ADD      r1,r1,#0x2ee
000248  64c1              STR      r1,[r0,#0x4c]
;;;2835   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 1
00024a  6cc1              LDR      r1,[r0,#0x4c]
00024c  f36f411c          BFC      r1,#16,#13
000250  f1017140          ADD      r1,r1,#0x3000000
000254  f50101be          ADD      r1,r1,#0x5f0000
000258  64c1              STR      r1,[r0,#0x4c]
;;;2836   
;;;2837   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
00025a  6d81              LDR      r1,[r0,#0x58]
00025c  f36f010c          BFC      r1,#0,#13
000260  f5017174          ADD      r1,r1,#0x3d0
000264  6581              STR      r1,[r0,#0x58]
;;;2838   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 1
000266  6d81              LDR      r1,[r0,#0x58]
000268  f36f411c          BFC      r1,#16,#13
00026c  f10161ce          ADD      r1,r1,#0x6700000
000270  6581              STR      r1,[r0,#0x58]
;;;2839   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 1
000272  6dc1              LDR      r1,[r0,#0x5c]
000274  f36f010c          BFC      r1,#0,#13
000278  f5016111          ADD      r1,r1,#0x910
00027c  65c1              STR      r1,[r0,#0x5c]
;;;2840   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 1
00027e  6dc1              LDR      r1,[r0,#0x5c]
000280  f36f411c          BFC      r1,#16,#13
000284  f101613b          ADD      r1,r1,#0xbb00000
000288  65c1              STR      r1,[r0,#0x5c]
;;;2841   #else /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2842   			MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;2843   			MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;2844   			MSPI->tSPITRSIZE0.tBit.spitrsize2 = SZ_MSPIBUF_MUXDATA+1;
;;;2845   			MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;2846   			MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;2847   			MSPI->tSPITRSIZE1.tBit.spitrsize5 = SZ_MSPIBUF_MUXDATA+1;
;;;2848   
;;;2849   			MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;2850   			MSPI->tSPIDATALEN.tBit.txdata_len = 0;//SPI_DMY_LEN-1;
;;;2851   
;;;2852   			MSPI->tSPIDATALEN.tBit.rxbitlen = 11;//15;
;;;2853   			MSPI->tSPIDATALEN.tBit.txbitlen = 15;
;;;2854   
;;;2855   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd0 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0]); //SRIC 1
;;;2856   			MSPI->tSPISTRTWAD01.tBit.spiStrtWAd1 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]); //SRIC 1
;;;2857   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd2 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2]); //SRIC 1
;;;2858   			MSPI->tSPISTRTWAD23.tBit.spiStrtWAd3 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]); //SRIC 1
;;;2859   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd4 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[4]); //SRIC 1
;;;2860   			MSPI->tSPISTRTWAD45.tBit.spiStrtWAd5 = MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[5]); //SRIC 1
;;;2861   
;;;2862   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd0 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0]); //SRIC 1
;;;2863   			MSPI->tSPISTRTRAD01.tBit.spiStrtRAd1 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]); //SRIC 1
;;;2864   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd2 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2]); //SRIC 1
;;;2865   			MSPI->tSPISTRTRAD23.tBit.spiStrtRAd3 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]); //SRIC 1
;;;2866   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd4 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4]); //SRIC 1
;;;2867   			MSPI->tSPISTRTRAD45.tBit.spiStrtRAd5 = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[5]); //SRIC 1
;;;2868   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;2869   #endif /* USED_SPI_NBIT_TRANSMODE */
;;;2870   //			break;
;;;2871   		}
;;;2872   //	}
;;;2873   }
00028a  4770              BX       lr
;;;2874   
                          ENDP

                  |L10.652|
                          DCD      0x20040830
                  |L10.656|
                          DCD      0x200409f4
                  |L10.660|
                          DCD      0x20040bb8
                  |L10.664|
                          DCD      0x20040d7c

                          AREA ||i.MSPI_Set_BUFSIZE_FingerPenMode||, CODE, READONLY, ALIGN=1

                  MSPI_Set_BUFSIZE_FingerPenMode PROC
;;;766    
;;;767    void MSPI_Set_BUFSIZE_FingerPenMode(int index)
000000  b510              PUSH     {r4,lr}
;;;768    {
;;;769    	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
000002  f7fffffe          BL       HAL_GetSensingMode
;;;770    
;;;771    #if USED_PEN_MODE_OPERATION
;;;772    
;;;773    	#if IS_MULTI_PROTOCOL_OPERATION
;;;774    	{
;;;775    		switch(hal_Info_GetControlActivePenSettingType())
;;;776    		{
;;;777    			case ACTIVEPEN_TYPE_LOCAL_MS:
;;;778    			{
;;;779    				if(IS_FINGER_PEN_MODE(eSensingMode))
;;;780    				{
;;;781    					MSPI->SPIMUXNUM = sizeLut_MSPen[index]-1;
;;;782    				}
;;;783    				else
;;;784    				{
;;;785    					MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;786    				}
;;;787    				MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_MSPen[index];
;;;788    				break;
;;;789    			}
;;;790    			case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;791    			{
;;;792    				if(IS_FINGER_PEN_MODE(eSensingMode))
;;;793    				{
;;;794    		#if  USED_LOCAL_IDLE_MODE_CONTROL
;;;795    			#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;796    					if(IS_ACTIVE_MODE(eSensingMode))
;;;797    					{
;;;798    						MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;799    					}
;;;800    					else
;;;801    					{
;;;802    						uint32_t iMspi;
;;;803    						MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;804    						for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;805    						{
;;;806    							MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
;;;807    							MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1)-1;
;;;808    							MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
;;;809    							MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
;;;810    							MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
;;;811    							MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
;;;812    							MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;813    						}
;;;814    						MSPI->tSPIDATALEN.tBit.rxbitlen = 23;
;;;815    					}
;;;816    			#else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;817    					if(IS_ACTIVE_MODE(eSensingMode))
;;;818    					{
;;;819    						MSPI->SPIMUXNUM = sizeLut_WGP[index]-1;
;;;820    					}
;;;821    					else
;;;822    					{
;;;823    						MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;824    					}
;;;825    			#endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;826    		#else /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;827    			#if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;828    					MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;829    			#else /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;830    					MSPI->SPIMUXNUM = sizeLut_WGP[index] - 1;
;;;831    			#endif /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;832    		#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;833    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
;;;834    				}
;;;835    				else
;;;836    				{
;;;837    					// _gT(_GPIO_TP_INTR);
;;;838    					MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;839    		#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN))
;;;840    					MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;841    					MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;842    					MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;843    					MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;844    					MSPI->tSPITRSIZE1.tBit.spitrsize6 = SZ_MSPIBUF_MUXDATA+1;
;;;845    					MSPI->tSPITRSIZE1.tBit.spitrsize7 = SZ_MSPIBUF_MUXDATA+1;
;;;846    					MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;847    		#endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN)) */
;;;848    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_Wacom[index];
;;;849    				}
;;;850    				break;
;;;851    			}
;;;852    		}
;;;853    	}
;;;854    
;;;855    	#else /* IS_MULTI_PROTOCOL_OPERATION */
;;;856    		#if IS_WGPPEN_PROTOCOL_OPERATION
;;;857    			{
;;;858    				if(IS_FINGER_PEN_MODE(eSensingMode))
;;;859    				{
;;;860    		#if  USED_LOCAL_IDLE_MODE_CONTROL
;;;861    					if(IS_ACTIVE_MODE(eSensingMode))
;;;862    					{
;;;863    						MSPI->SPIMUXNUM = sizeLut_WGP[index]-1;
;;;864    					}
;;;865    					else
;;;866    					{
;;;867    						MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;868    					}
;;;869    		#else /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;870    					MSPI->SPIMUXNUM = sizeLut_WGP[index] - 1;
;;;871    		#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;872    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
;;;873    				}
;;;874    				else
;;;875    				{
;;;876    					// _gT(_GPIO_TP_INTR);
;;;877    					MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;878    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_Wacom[index];
;;;879    				}
;;;880    			}
;;;881    		#elif IS_WGPUHDPEN_PROTOCOL_OPERATION
;;;882    			{
;;;883    				if(IS_FINGER_PEN_MODE(eSensingMode))
;;;884    				{
;;;885    			#if  USED_LOCAL_IDLE_MODE_CONTROL
;;;886    					if(IS_ACTIVE_MODE(eSensingMode))
;;;887    					{
;;;888    						MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;889    					}
;;;890    					else
;;;891    					{
;;;892    						uint32_t iMspi;
;;;893    				#if (CUSTOMER == MODEL_DEF_QHD_92512_Dell_WGP_UHD_PEN)
;;;894    						MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;895    						for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;896    						{
;;;897    							MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
;;;898    							MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1);
;;;899    							MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
;;;900    							MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
;;;901    							MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
;;;902    							MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
;;;903    							MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;904    						}
;;;905    				#else /* (CUSTOMER == MODEL_DEF_QHD_92512_Dell_WGP_UHD_PEN) */
;;;906    						MSPI->SPIMUXNUM = USED_IDLE_NI_SENSING_MUX_NUM-1;
;;;907    						for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;908    						{
;;;909    							MSPI_BUF->ReadCommand[iMspi].Addr = 0x0800;//(READ_ALIGNED_BUF | MSPI_16BITMODE);
;;;910    							MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = (SZ_MSPIBUF_MUXDATA>>1)-1;
;;;911    							MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 3;//0; // 0:32bit, 1:20bit, 2:22bit 3:24bit
;;;912    							MSPI_BUF->ReadCommand[iMspi].tBit.ExtCMDEn = 0;
;;;913    							MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 1;//0;//1;//0;
;;;914    							MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
;;;915    							MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
;;;916    						}
;;;917    						MSPI->tSPIDATALEN.tBit.rxbitlen = 23;
;;;918    				#endif /* (CUSTOMER == MODEL_DEF_QHD_92512_Dell_WGP_UHD_PEN) */
;;;919    					}
;;;920    			#else /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;921    					MSPI_Set_BUFSIZE_UHD_WGP_FingerPenMdoe_ActiveMode(index);
;;;922    			#endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;923    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
;;;924    				}
;;;925    				else
;;;926    				{
;;;927    					// _gT(_GPIO_TP_INTR);
;;;928    					MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;929    			#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN))
;;;930    					MSPI->tSPITRSIZE0.tBit.spitrsize0 = SZ_MSPIBUF_MUXDATA+1;
;;;931    					MSPI->tSPITRSIZE0.tBit.spitrsize1 = SZ_MSPIBUF_MUXDATA+1;
;;;932    					MSPI->tSPITRSIZE0.tBit.spitrsize3 = SZ_MSPIBUF_MUXDATA+1;
;;;933    					MSPI->tSPITRSIZE1.tBit.spitrsize4 = SZ_MSPIBUF_MUXDATA+1;
;;;934    					MSPI->tSPITRSIZE1.tBit.spitrsize6 = SZ_MSPIBUF_MUXDATA+1;
;;;935    					MSPI->tSPITRSIZE1.tBit.spitrsize7 = SZ_MSPIBUF_MUXDATA+1;
;;;936    					MSPI->tSPIDATALEN.tBit.rxdata_len = (SZ_MSPIBUF_MUXDATA - SPI_DMY_LEN) + 1;
;;;937    			#endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) && (ROIC_ALIGNED_ROW_LEN != ROIC_ALIGNED_LOCAL_PEN_ROW_LEN)) */
;;;938    					MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;//sizeLut_Wacom[index];
;;;939    				}
;;;940    			}
;;;941    		#elif IS_MSPEN_PROTOCOL_OPERATION
;;;942    			{
;;;943    				if(IS_FINGER_PEN_MODE(eSensingMode))
;;;944    				{
;;;945    					MSPI->SPIMUXNUM = sizeLut_MSPen[index]-1;
;;;946    				}
;;;947    				else
;;;948    				{
;;;949    					MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;950    				}
;;;951    				MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
;;;952    			}
;;;953    		#endif
;;;954    	#endif /* IS_MULTI_PROTOCOL_OPERATION */
;;;955    
;;;956    #else /* USED_PEN_MODE_OPERATION */
;;;957    	#if USED_MNT_S3_MODE_FUNCTION
;;;958    	if(IS_S3_MODE(eSensingMode))
;;;959    	{
;;;960    		MSPI->SPIMUXNUM = FINGER_IDLE_NI_MUX_NUM-1;
;;;961    	}
;;;962    	else
;;;963    	#endif /* USED_MNT_S3_MODE_FUNCTION */
;;;964    	{
;;;965    		if(IS_ACTIVE_MODE(eSensingMode))
000006  f0100f01          TST      r0,#1
;;;966    		{
;;;967    	#if USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;968    			MSPI->SPIMUXNUM = FINGER_ESD_SCAN_MUX_NUM + FINGER_MUX_NUM-1;
00000a  f04f2040          MOV      r0,#0x40004000
00000e  d00a              BEQ      |L11.38|
000010  210b              MOVS     r1,#0xb
000012  62c1              STR      r1,[r0,#0x2c]
;;;969    	#else
;;;970    			MSPI->SPIMUXNUM = FINGER_MUX_NUM-1;
;;;971    	#endif
;;;972    			MSPI->tSINTRMSCR.tBit.intmux_en = DISABLE;
000014  6941              LDR      r1,[r0,#0x14]
000016  f0210101          BIC      r1,r1,#1
00001a  6141              STR      r1,[r0,#0x14]
;;;973    			MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
00001c  6941              LDR      r1,[r0,#0x14]
00001e  f0410102          ORR      r1,r1,#2
000022  6141              STR      r1,[r0,#0x14]
000024  e009              B        |L11.58|
                  |L11.38|
;;;974    		}
;;;975    		else
;;;976    		{
;;;977    			if(FINGER_IDLE_NI_MUX_NUM-1 <= 0)
;;;978    			{
;;;979    				MSPI->tSINTRMSCR.tBit.intmux_en = ENABLE;
;;;980    				MSPI->tSINTRMSCR.tBit.intframe_en = DISABLE;
;;;981    			}
;;;982    			else
;;;983    			{
;;;984    	#if 0//USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;985    				MSPI->SPIMUXNUM = FINGER_ESD_SCAN_MUX_NUM + FINGER_IDLE_NI_MUX_NUM-1;
;;;986    	#else
;;;987    				MSPI->SPIMUXNUM = FINGER_IDLE_NI_MUX_NUM-1;
000026  2101              MOVS     r1,#1
000028  62c1              STR      r1,[r0,#0x2c]
;;;988    	#endif
;;;989    				MSPI->tSINTRMSCR.tBit.intmux_en = DISABLE;
00002a  6941              LDR      r1,[r0,#0x14]
00002c  f0210101          BIC      r1,r1,#1
000030  6141              STR      r1,[r0,#0x14]
;;;990    				MSPI->tSINTRMSCR.tBit.intframe_en = ENABLE;
000032  6941              LDR      r1,[r0,#0x14]
000034  f0410102          ORR      r1,r1,#2
000038  6141              STR      r1,[r0,#0x14]
                  |L11.58|
;;;991    			}
;;;992    		}
;;;993    	}
;;;994    
;;;995    	MSPI->tMSPI_FINDEX0.tBit.findex0 = 0;
00003a  6f01              LDR      r1,[r0,#0x70]
00003c  f02101fe          BIC      r1,r1,#0xfe
000040  6701              STR      r1,[r0,#0x70]
;;;996    #endif /* USED_PEN_MODE_OPERATION */
;;;997    }
000042  bd10              POP      {r4,pc}
;;;998    
                          ENDP


                          AREA ||i.MSPI_Set_TLPMODE||, CODE, READONLY, ALIGN=1

                  MSPI_Set_TLPMODE PROC
;;;1293   
;;;1294   void MSPI_Set_TLPMODE(void)
000000  f04f2040          MOV      r0,#0x40004000
;;;1295   {
;;;1296   #if USED_SSCG_ON_OFF_CONTORL_AITnTLP_MODE
;;;1297   	SCRB->SSCG_IN_CFG.tBit.sscgclk_sel = 0;	// SSCGCLK select. 0: no sscg, 1:sscg out
;;;1298   #endif
;;;1299   
;;;1300   	MSPI->tSPIMODE.tBit.aitmode 			= SPI_MODE_TLPMODE;
000004  6b41              LDR      r1,[r0,#0x34]
000006  f0210101          BIC      r1,r1,#1
00000a  6341              STR      r1,[r0,#0x34]
;;;1301   
;;;1302   	MSPI->tSPISCR.tBit.BITLEN 				= SPI_BITLEN_HALF_WORD;
00000c  6841              LDR      r1,[r0,#4]
00000e  f0210101          BIC      r1,r1,#1
000012  6041              STR      r1,[r0,#4]
;;;1303       MSPI->tSPISCR.tBit.DUALACC 				= SPI_RX_SINGLE_MODE;
000014  6841              LDR      r1,[r0,#4]
000016  f0210102          BIC      r1,r1,#2
00001a  6041              STR      r1,[r0,#4]
;;;1304       MSPI->tSPISCR.tBit.DUALBITORD 			= SPI_RX_DUAL_BIT_ORDER_MOSI_MISO;
00001c  6841              LDR      r1,[r0,#4]
00001e  f0210104          BIC      r1,r1,#4
000022  6041              STR      r1,[r0,#4]
;;;1305       MSPI->tSPISCR.tBit.TXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
000024  6841              LDR      r1,[r0,#4]
000026  f0210108          BIC      r1,r1,#8
00002a  6041              STR      r1,[r0,#4]
;;;1306       MSPI->tSPISCR.tBit.RXDORD 				= SPI_DATA_ORDER_MSB_FIRST;
00002c  6841              LDR      r1,[r0,#4]
00002e  f0210110          BIC      r1,r1,#0x10
000032  6041              STR      r1,[r0,#4]
;;;1307       MSPI->tSPISCR.tBit.TXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
000034  6841              LDR      r1,[r0,#4]
000036  f0210120          BIC      r1,r1,#0x20
00003a  6041              STR      r1,[r0,#4]
;;;1308       MSPI->tSPISCR.tBit.RXCHKSUM_EN			= SPI_CHECK_SUM_DISABLE;
00003c  6841              LDR      r1,[r0,#4]
00003e  f0210140          BIC      r1,r1,#0x40
000042  6041              STR      r1,[r0,#4]
;;;1309       MSPI->tSPISCR.tBit.RXPOS 				= PARAMSET_MSPI_RX_POS;
000044  6841              LDR      r1,[r0,#4]
000046  f42161f0          BIC      r1,r1,#0x780
00004a  f5017180          ADD      r1,r1,#0x100
00004e  6041              STR      r1,[r0,#4]
;;;1310   #if (USED_ROIC_DEF == ROIC_SW97500)
;;;1311       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_7_DIV;
;;;1312   #else /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;1313       MSPI->tSPISCR.tBit.SCLKDIV 				= SPI_SCLK_SPEED_3_DIV;
000050  6841              LDR      r1,[r0,#4]
000052  f42141f0          BIC      r1,r1,#0x7800
000056  f5015180          ADD      r1,r1,#0x1000
00005a  6041              STR      r1,[r0,#4]
;;;1314   #endif /* (USED_ROIC_DEF == ROIC_SW97500) */
;;;1315       MSPI->tSPISCR.tBit.MISO_ZERO_CHK_EN 	= DISABLE;
00005c  6841              LDR      r1,[r0,#4]
00005e  f4214100          BIC      r1,r1,#0x8000
000062  6041              STR      r1,[r0,#4]
;;;1316   
;;;1317   	MSPI->tSPIDATALEN.tBit.rxbitlen			= 15;
000064  6881              LDR      r1,[r0,#8]
000066  f0217178          BIC      r1,r1,#0x3e00000
00006a  f10171f0          ADD      r1,r1,#0x1e00000
00006e  6081              STR      r1,[r0,#8]
;;;1318   	MSPI->tSPIDATALEN.tBit.txbitlen			= 15;
000070  6881              LDR      r1,[r0,#8]
000072  f42111f8          BIC      r1,r1,#0x1f0000
000076  f5012170          ADD      r1,r1,#0xf0000
00007a  6081              STR      r1,[r0,#8]
;;;1319   	/*
;;;1320   	 * rxdata_len and txdata_len do not update in here!
;;;1321   	 * That update at read and write.
;;;1322   	 */
;;;1323   //	MSPI->tSPIDATALEN.tBit.rxdata_len		= 0x0;
;;;1324   //	MSPI->tSPIDATALEN.tBit.txdata_len		= 0x2;
;;;1325   
;;;1326   	MSPI->tSPISTATELEN.tBit.PreShftLen		= 16;
00007c  6b01              LDR      r1,[r0,#0x30]
00007e  f02101ff          BIC      r1,r1,#0xff
000082  3110              ADDS     r1,r1,#0x10
000084  6301              STR      r1,[r0,#0x30]
;;;1327   	MSPI->tSPISTATELEN.tBit.TmpIdleLen		= 2;
000086  6b01              LDR      r1,[r0,#0x30]
000088  f421417f          BIC      r1,r1,#0xff00
00008c  f5017100          ADD      r1,r1,#0x200
000090  6301              STR      r1,[r0,#0x30]
;;;1328   	MSPI->tSPISTATELEN.tBit.PostShftLen  	= 15;
000092  6b01              LDR      r1,[r0,#0x30]
000094  f421017f          BIC      r1,r1,#0xff0000
000098  f5012170          ADD      r1,r1,#0xf0000
00009c  6301              STR      r1,[r0,#0x30]
;;;1329   	MSPI->tSPISTATELEN.tBit.txbufnum 		= 7;
00009e  6b01              LDR      r1,[r0,#0x30]
0000a0  f02151f8          BIC      r1,r1,#0x1f000000
0000a4  f10161e0          ADD      r1,r1,#0x7000000
0000a8  6301              STR      r1,[r0,#0x30]
;;;1330   }
0000aa  4770              BX       lr
;;;1331   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  sizeLut_MSPen
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000003
                          DCD      0x00000006
                          DCD      0x00000003
                          DCD      0x00000003

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  sizeLut_WGP
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000008

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  sizeLut_UHD_WGP
                          DCD      0x00000008
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000008
                          DCD      0x00000003
                          DCD      0x00000008

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  nextMSPISize
                          DCD      0x00000000

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  gFrameCnt
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\spi\\mspi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_mspi_c_2c05d597____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____REVSH|
#line 402
|__asm___6_mspi_c_2c05d597____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2c05d597____RRX|
#line 587
|__asm___6_mspi_c_2c05d597____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
