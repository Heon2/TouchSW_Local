; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\flitf.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\flitf.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\flitf.crf ..\..\Hal\flitf\flitf.c]
                          THUMB

                          AREA ||i.FLITF_Calc32bitCheckSum||, CODE, READONLY, ALIGN=2

                  FLITF_Calc32bitCheckSum PROC
;;;99     
;;;100    uint32_t FLITF_Calc32bitCheckSum(uint32_t * pCheckSumBuf, uint32_t ulWordSize)
000000  2200              MOVS     r2,#0
;;;101    {
000002  b191              CBZ      r1,|L1.42|
000004  1f00              SUBS     r0,r0,#4
;;;102    //	uint32_t * pCheckSumBuf = (uint32_t *)&pSimpleBootFlashCtrlInfo->tFlashBootInterfaceInfo;
;;;103    	uint32_t ulIdx;
;;;104    	uint32_t ulChecksum = 0;
;;;105    	for(ulIdx = 0; ulIdx < ulWordSize; ulIdx++)
;;;106    	{
;;;107    		ulChecksum += pCheckSumBuf[ulIdx];
;;;108    	}
;;;109    	ulChecksum = (~ulChecksum) + 1;
;;;110    
;;;111    	return ulChecksum;
;;;112    }
000006  f0110f01          TST      r1,#1
00000a  bf18              IT       NE                    ;107
00000c  f8502f04          LDRNE    r2,[r0,#4]!           ;107
000010  2300              MOVS     r3,#0
000012  0849              LSRS     r1,r1,#1              ;105
000014  d008              BEQ      |L1.40|
000016  bf00              NOP                            ;107
                  |L1.24|
000018  f8d0c004          LDR      r12,[r0,#4]           ;107
00001c  1e49              SUBS     r1,r1,#1              ;107
00001e  4462              ADD      r2,r2,r12             ;107
000020  f850cf08          LDR      r12,[r0,#8]!          ;107
000024  4463              ADD      r3,r3,r12             ;107
000026  d1f7              BNE      |L1.24|
                  |L1.40|
000028  441a              ADD      r2,r2,r3
                  |L1.42|
00002a  43d0              MVNS     r0,r2                 ;109
00002c  1c40              ADDS     r0,r0,#1              ;109
00002e  4770              BX       lr
;;;113    
                          ENDP


                          AREA ||i.FLITF_CheckTrimInfoSectionIntegrity||, CODE, READONLY, ALIGN=2

                  FLITF_CheckTrimInfoSectionIntegrity PROC
;;;113    
;;;114    bool_t FLITF_CheckTrimInfoSectionIntegrity(tFlashPTTrimCodeInfo_t * ptTrimmingCode)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;115    {
;;;116    	uint32_t ulPTTrimAddr;
;;;117    	tFlashPTTrimCodeInfo_t * pFlashPTTrimCodeInfo;
;;;118    	bool_t bPTCheckSumFail, bFTCheckSumFail;
;;;119    
;;;120    	bPTCheckSumFail = YES;
000004  2101              MOVS     r1,#1
000006  f8dfb0b8          LDR      r11,|L2.192|
00000a  f8df90b8          LDR      r9,|L2.196|
;;;121    	bFTCheckSumFail = YES;
00000e  460f              MOV      r7,r1
000010  f04f0800          MOV      r8,#0
000014  f8cd1000          STR.W    r1,[sp,#0]
                  |L2.24|
000018  f8591028          LDR      r1,[r9,r8,LSL #2]
00001c  680a              LDR      r2,[r1,#0]
00001e  455a              CMP      r2,r11
000020  d13b              BNE      |L2.154|
000022  2500              MOVS     r5,#0
000024  f04f0a0b          MOV      r10,#0xb
000028  1f0b              SUBS     r3,r1,#4
00002a  462c              MOV      r4,r5
00002c  f04f0c05          MOV      r12,#5
                  |L2.48|
000030  4415              ADD      r5,r5,r2
000032  e9f36202          LDRD     r6,r2,[r3,#8]!
000036  4434              ADD      r4,r4,r6
000038  f1bc0c01          SUBS     r12,r12,#1
00003c  d1f8              BNE      |L2.48|
00003e  f1aa0301          SUB      r3,r10,#1
000042  192a              ADDS     r2,r5,r4
000044  f8513023          LDR      r3,[r1,r3,LSL #2]
000048  42d3              CMN      r3,r2
00004a  d126              BNE      |L2.154|
00004c  b321              CBZ      r1,|L2.152|
;;;122    
;;;123    	ulPTTrimAddr = CheckPTIntegrity();
;;;124    	if (ulPTTrimAddr)
;;;125    	{
;;;126    		bPTCheckSumFail = NO;
00004e  2200              MOVS     r2,#0
000050  f8dfe074          LDR      lr,|L2.200|
000054  4692              MOV      r10,r2
000056  9200              STR      r2,[sp,#0]
                  |L2.88|
000058  f859802a          LDR      r8,[r9,r10,LSL #2]
00005c  f8582f80          LDR      r2,[r8,#0x80]!
000060  4572              CMP      r2,lr
000062  d120              BNE      |L2.166|
000064  2500              MOVS     r5,#0
000066  f04f0b05          MOV      r11,#5
00006a  f1a80304          SUB      r3,r8,#4
00006e  462c              MOV      r4,r5
000070  f04f0c02          MOV      r12,#2
                  |L2.116|
000074  4415              ADD      r5,r5,r2
000076  e9f36202          LDRD     r6,r2,[r3,#8]!
00007a  4434              ADD      r4,r4,r6
00007c  f1bc0c01          SUBS     r12,r12,#1
000080  d1f8              BNE      |L2.116|
000082  f1ab0301          SUB      r3,r11,#1
000086  192a              ADDS     r2,r5,r4
000088  f8583023          LDR      r3,[r8,r3,LSL #2]
00008c  42d3              CMN      r3,r2
00008e  d10a              BNE      |L2.166|
;;;127    		pFlashPTTrimCodeInfo = (tFlashPTTrimCodeInfo_t*)(ulPTTrimAddr);
;;;128    
;;;129    		if(CheckFTIntegrity())
;;;130    		{
;;;131    			bFTCheckSumFail = NO;
000090  2700              MOVS     r7,#0
;;;132    			memcpy(ptTrimmingCode, pFlashPTTrimCodeInfo, sizeof(tFlashPTTrimCodeInfo_t));
000092  222c              MOVS     r2,#0x2c
000094  f7fffffe          BL       __aeabi_memcpy
                  |L2.152|
000098  e00a              B        |L2.176|
                  |L2.154|
00009a  f1080801          ADD      r8,r8,#1
00009e  f1b80f02          CMP      r8,#2
0000a2  d3b9              BCC      |L2.24|
0000a4  e004              B        |L2.176|
                  |L2.166|
0000a6  f10a0a01          ADD      r10,r10,#1
0000aa  f1ba0f02          CMP      r10,#2
0000ae  d3d3              BCC      |L2.88|
                  |L2.176|
;;;133    		}
;;;134    	}
;;;135    
;;;136    	return !(bPTCheckSumFail || bFTCheckSumFail);
0000b0  9800              LDR      r0,[sp,#0]
0000b2  4338              ORRS     r0,r0,r7
0000b4  bf0c              ITE      EQ
0000b6  2001              MOVEQ    r0,#1
0000b8  2000              MOVNE    r0,#0
;;;137    }
0000ba  e8bd8ff8          POP      {r3-r11,pc}
;;;138    
                          ENDP

0000be  0000              DCW      0x0000
                  |L2.192|
                          DCD      0x00477010
                  |L2.196|
                          DCD      ||.data||
                  |L2.200|
                          DCD      0x00477020

                          AREA ||i.FLITF_EnsureBootInterfaceCodeFlashIntegrity||, CODE, READONLY, ALIGN=2

                  FLITF_EnsureBootInterfaceCodeFlashIntegrity PROC
;;;138    
;;;139    bool_t FLITF_EnsureBootInterfaceCodeFlashIntegrity(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;140    {
;;;141    	uint32_t ulIdx;
;;;142    	tFlashBootInterfaceInfo_t * ptFlashBootInterfaceInfo;
;;;143    	uint32_t ulAddr = EFLASH_VID_PID_I2CSLV_1_ADDR;
;;;144    
;;;145    	for(ulIdx = 0; ulIdx < EFLASH_BOOT_INFO_SECTION_NUM; ulIdx++)
;;;146    	{
;;;147    		ptFlashBootInterfaceInfo = (tFlashBootInterfaceInfo_t*)(ulAddr);
;;;148    
;;;149    		if(ptFlashBootInterfaceInfo->BOOT_INFO_WRITE_EN_CODE == EFLASH_BOOT_INFO_WRITE_EN_CODE &&
000004  f8dfa06c          LDR      r10,|L3.116|
;;;150    			CalcIntegrity(ulAddr, EFLASH_VID_PID_I2CSLV_WORD_SIZE) == 0)
;;;151    		{
;;;152    			if(ptFlashBootInterfaceInfo->tDeviceId.BOOT_VID == UNIQUE_VID &&
;;;153    				ptFlashBootInterfaceInfo->tDeviceId.BOOT_PID == UNIQUE_BOOT_PID &&
;;;154    				ptFlashBootInterfaceInfo->tDeviceInfo.BOOT_I2C_SLV_ADDR == I2C_ADDRESS &&
;;;155    				ptFlashBootInterfaceInfo->tDeviceInfo.BOOT_HID_DESCRIPTOR_ADR == HID_DESCRIPTOR_ADDRESS)
;;;156    			{
;;;157    				return YES;
;;;158    			}
;;;159    		}
;;;160    
;;;161    		ulAddr = EFLASH_VID_PID_I2CSLV_2_ADDR;
000008  f8df806c          LDR      r8,|L3.120|
00000c  f44f3501          MOV      r5,#0x20400           ;143
000010  2700              MOVS     r7,#0                 ;145
000012  f6421bbd          MOV      r11,#0x29bd           ;152
000016  f2477e02          MOV      lr,#0x7702            ;153
                  |L3.26|
00001a  68a8              LDR      r0,[r5,#8]            ;149
00001c  4550              CMP      r0,r10                ;149
00001e  d121              BNE      |L3.100|
000020  462e              MOV      r6,r5                 ;150
000022  4630              MOV      r0,r6                 ;150
000024  2300              MOVS     r3,#0                 ;150
000026  e9d01c00          LDRD     r1,r12,[r0,#0]        ;150
00002a  f04f0904          MOV      r9,#4                 ;150
00002e  2201              MOVS     r2,#1                 ;150
                  |L3.48|
000030  4461              ADD      r1,r1,r12             ;150
000032  e9f04c02          LDRD     r4,r12,[r0,#8]!       ;150
000036  4423              ADD      r3,r3,r4              ;150
000038  1e52              SUBS     r2,r2,#1              ;150
00003a  d1f9              BNE      |L3.48|
00003c  18c8              ADDS     r0,r1,r3              ;150
00003e  f1a90101          SUB      r1,r9,#1              ;150
000042  f8551021          LDR      r1,[r5,r1,LSL #2]     ;150
000046  42c1              CMN      r1,r0                 ;150
000048  bf04              ITT      EQ                    ;152
00004a  8828              LDRHEQ   r0,[r5,#0]            ;152
00004c  4558              CMPEQ    r0,r11                ;152
00004e  d109              BNE      |L3.100|
000050  8868              LDRH     r0,[r5,#2]            ;153
000052  4570              CMP      r0,lr                 ;153
000054  bf01              ITTTT    EQ                    ;154
000056  7928              LDRBEQ   r0,[r5,#4]            ;154
000058  2809              CMPEQ    r0,#9                 ;154
00005a  88f0              LDRHEQ   r0,[r6,#6]            ;155
00005c  2801              CMPEQ    r0,#1                 ;155
;;;162    	}
;;;163    
;;;164    	return NO;
;;;165    }
00005e  bf08              IT       EQ
000060  e8bd8ff0          POPEQ    {r4-r11,pc}
                  |L3.100|
000064  4645              MOV      r5,r8                 ;161
000066  f1070701          ADD      r7,r7,#1              ;161
00006a  2f02              CMP      r7,#2                 ;145
00006c  d3d5              BCC      |L3.26|
00006e  2000              MOVS     r0,#0                 ;164
000070  e8bd8ff0          POP      {r4-r11,pc}
;;;166    
                          ENDP

                  |L3.116|
                          DCD      0x4a4d4801
                  |L3.120|
                          DCD      0x00020480

                          AREA ||i.FLITF_FlashInformationRegionWriteOperation||, CODE, READONLY, ALIGN=2

                  FLITF_FlashInformationRegionWriteOperation PROC
;;;205    
;;;206    void FLITF_FlashInformationRegionWriteOperation(void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208    //	SCRB->PWM_INT_CTRL.tBit.int_en_tsyncout = 0;	//	T-sync out IRQ disable
;;;209    #ifndef MODE_I2C
;;;210    	SCRB_USB_Reset();
;;;211    #endif /* MODE_I2C */
;;;212    
;;;213    #if 0 // Boot Used
;;;214    	memset( (void*)CODE_SRAM_START_ADDR, 0x00, FLASH_BOOTLOADER_BYTE_SIZE );
;;;215    
;;;216    	while(GDMA->GDMA_SR.tBit.busy);
;;;217    
;;;218    	GDMA->GDMA_SADDR.tBit.saddr = FLASH_BOOTLOADER_START_ADDR;
;;;219    	GDMA->GDMA_DADDR.tBit.daddr = CODE_SRAM_START_ADDR;
;;;220    	GDMA->GDMA_CTRL.tBit.TrSize = FLASH_BOOTLOADER_WORD_SIZE;
;;;221    	GDMA->GDMA_CTRL.tBit.gdma_enable = 1;
;;;222    	GDMA->GDMA_CTRL.tBit.readonly_en = 0;
;;;223    	GDMA->GDMA_START = 1;
;;;224    
;;;225    	while(GDMA->GDMA_SR.tBit.busy);
;;;226    #else
;;;227    	memset( (void*)CODE_SRAM_START_ADDR, 0x00, CODE_SRAM_BYTE_SIZE );
000002  f44f5140          MOV      r1,#0x3000
000006  f04f5000          MOV      r0,#0x20000000
00000a  f7fffffe          BL       __aeabi_memclr4
;;;228    
;;;229    	while(GDMA->GDMA_SR.tBit.busy);
00000e  f04f4080          MOV      r0,#0x40000000
000012  bf00              NOP      
                  |L4.20|
000014  f8d01320          LDR      r1,[r0,#0x320]
000018  f0110f08          TST      r1,#8
00001c  d1fa              BNE      |L4.20|
;;;230    
;;;231    	GDMA->GDMA_SADDR.tBit.saddr = FLASH_SIMPLE_BOOT_START_ADDR;
00001e  f8d0130c          LDR      r1,[r0,#0x30c]
000022  f44f31fa          MOV      r1,#0x1f400
000026  f8c0130c          STR      r1,[r0,#0x30c]
;;;232    	GDMA->GDMA_DADDR.tBit.daddr = CODE_SRAM_START_ADDR;
00002a  f8d01310          LDR      r1,[r0,#0x310]
00002e  f04f5100          MOV      r1,#0x20000000
000032  f8c01310          STR      r1,[r0,#0x310]
;;;233    	GDMA->GDMA_CTRL.tBit.TrSize = FLASH_SIMPLE_BOOT_WORD_SIZE;
000036  f8d01314          LDR      r1,[r0,#0x314]
00003a  f36f010f          BFC      r1,#0,#16
00003e  f5017140          ADD      r1,r1,#0x300
000042  f8c01314          STR      r1,[r0,#0x314]
;;;234    	GDMA->GDMA_CTRL.tBit.gdma_enable = 1;
000046  f8d01314          LDR      r1,[r0,#0x314]
00004a  f4411180          ORR      r1,r1,#0x100000
00004e  f8c01314          STR      r1,[r0,#0x314]
;;;235    	GDMA->GDMA_CTRL.tBit.readonly_en = 0;
000052  f8d01314          LDR      r1,[r0,#0x314]
000056  f4212100          BIC      r1,r1,#0x80000
00005a  f8c01314          STR      r1,[r0,#0x314]
;;;236    	GDMA->GDMA_START = 1;
00005e  2101              MOVS     r1,#1
000060  f8c01318          STR      r1,[r0,#0x318]
                  |L4.100|
;;;237    
;;;238    	while(GDMA->GDMA_SR.tBit.busy);
000064  f8d01320          LDR      r1,[r0,#0x320]
000068  f0110f08          TST      r1,#8
00006c  d1fa              BNE      |L4.100|
;;;239    #endif
;;;240    
;;;241    	SCRB_Remap_And_Reset(1);
00006e  e8bd4010          POP      {r4,lr}
000072  2001              MOVS     r0,#1
000074  f7ffbffe          B.W      SCRB_Remap_And_Reset
;;;242    }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  vulTrimInfoAddr
                          DCD      0x00020000
                          DCD      0x00020200

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\flitf\\flitf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_eb65708e____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___7_flitf_c_eb65708e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_eb65708e____REVSH|
#line 402
|__asm___7_flitf_c_eb65708e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_eb65708e____RRX|
#line 587
|__asm___7_flitf_c_eb65708e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
