; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\gpio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\gpio.crf ..\..\Hal\gpio\gpio.c]
                          THUMB

                          AREA ||i.GPIOA_InterruptHandler||, CODE, READONLY, ALIGN=1

                  GPIOA_InterruptHandler PROC
;;;34     
;;;35     void GPIOA_InterruptHandler(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;36     {
;;;37     	if (GPIO->GPIO_INTEN.tBit.GPIOA == 1)
000004  f8d01170          LDR      r1,[r0,#0x170]
000008  f0110f02          TST      r1,#2
;;;38     	{
;;;39     #if USED_TSYNC2_INPUT_FROM_TCON
;;;40     		if(IS_GPIO_PIN(_GPIO_TSYNC_2_IN) == GPIO_DATA_LOW)
;;;41     		{
;;;42     	#if USED_ECLK_ON_OFF_CONTROL
;;;43     			if(HAL_GetECLKOnOffControl())
;;;44     			{
;;;45     				HAL_ECLK_On();
;;;46     			}
;;;47     	#endif /* #if USED_ECLK_ON_OFF_CONTROL */
;;;48     
;;;49     	#if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;50     			eActivePenType_t ePenType = hal_Info_GetControlActivePenOPType();
;;;51     			eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
;;;52     
;;;53     			switch(ePenType)
;;;54     			{
;;;55     				case ACTIVEPEN_TYPE_LOCAL_MS:
;;;56     				{
;;;57     					if(HAL_GetTPICMuxEnControl())
;;;58     					{
;;;59     						if(IS_FINGER_PEN_MODE(eSensingMode))
;;;60     						{
;;;61     							if(IS_ACTIVE_MODE(eSensingMode))
;;;62     							{
;;;63     								if (tHalIntrHandle.ulTSyncInFallingCnt == 1 ||
;;;64     									tHalIntrHandle.ulTSyncInFallingCnt == 2 ||
;;;65     									tHalIntrHandle.ulTSyncInFallingCnt == 3 ||
;;;66     									tHalIntrHandle.ulTSyncInFallingCnt == 4 ||
;;;67     									tHalIntrHandle.ulTSyncInFallingCnt == 5 ||
;;;68     									tHalIntrHandle.ulTSyncInFallingCnt == 6 ||
;;;69     									tHalIntrHandle.ulTSyncInFallingCnt == 9 ||
;;;70     									tHalIntrHandle.ulTSyncInFallingCnt == 13)
;;;71     								{
;;;72     									GPIO_Set_DATA(_GPIO_MUX_EN_TPIC, GPIO_DATA_HIGH);
;;;73     								}
;;;74     
;;;75     								if (tHalIntrHandle.ulTSyncInFallingCnt == 0 ||
;;;76     									tHalIntrHandle.ulTSyncInFallingCnt == 8 ||
;;;77     									tHalIntrHandle.ulTSyncInFallingCnt == 10 ||
;;;78     									tHalIntrHandle.ulTSyncInFallingCnt == 11 ||
;;;79     									tHalIntrHandle.ulTSyncInFallingCnt == 12 ||
;;;80     									tHalIntrHandle.ulTSyncInFallingCnt == 14 ||
;;;81     									tHalIntrHandle.ulTSyncInFallingCnt == 15)
;;;82     								{
;;;83     									GPIO_Set_DATA(_GPIO_MUX_EN_TPIC, GPIO_DATA_HIGH);
;;;84     		#if USED_TPIC_MUXEN_2_ON_OFF_CONTROL
;;;85     									GPIO_Set_DATA(_GPIO_MUX_EN2_TPIC, GPIO_DATA_HIGH);
;;;86     		#endif /* USED_TPIC_MUXEN_2_ON_OFF_CONTROL */
;;;87     								}
;;;88     							}
;;;89     							else
;;;90     							{
;;;91     								if (tHalIntrHandle.ulTSyncInFallingCnt == 0 ||
;;;92     									tHalIntrHandle.ulTSyncInFallingCnt == 1)
;;;93     								{
;;;94     									GPIO_Set_DATA(_GPIO_MUX_EN_TPIC, GPIO_DATA_HIGH);
;;;95     		#if USED_TPIC_MUXEN_2_ON_OFF_CONTROL
;;;96     									GPIO_Set_DATA(_GPIO_MUX_EN2_TPIC, GPIO_DATA_HIGH);
;;;97     		#endif /* USED_TPIC_MUXEN_2_ON_OFF_CONTROL */
;;;98     								}
;;;99     							}
;;;100    						}
;;;101    						else /* Full Mode */
;;;102    						{
;;;103    							/*
;;;104    							 * Not Implementation
;;;105    							 */
;;;106    						}
;;;107    					}
;;;108    					break;
;;;109    				}
;;;110    				case ACTIVEPEN_TYPE_LOCAL_WACOM:
;;;111    				{
;;;112    					/*
;;;113    					 * Not Implementation
;;;114    					 */
;;;115    					break;
;;;116    				}
;;;117    				case ACTIVEPEN_TYPE_LOCAL_WGP:
;;;118    				{
;;;119    					/*
;;;120    					 * Not Implementation
;;;121    					 */
;;;122    					break;
;;;123    				}
;;;124    			}
;;;125    	#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;126    		}
;;;127    #endif /* USED_TSYNC2_INPUT_FROM_TCON */
;;;128    		GPIO->GPIO_INTCLEAR.tBit.GPIOA = 1;
;;;129    	}
;;;130    }
00000c  bf08              IT       EQ
00000e  4770              BXEQ     lr
000010  f8d01174          LDR      r1,[r0,#0x174]        ;128
000014  f0410102          ORR      r1,r1,#2              ;128
000018  f8c01174          STR      r1,[r0,#0x174]        ;128
00001c  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.GPIOM_InterruptHandler||, CODE, READONLY, ALIGN=1

                  GPIOM_InterruptHandler PROC
;;;131    
;;;132    void GPIOM_InterruptHandler(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;133    {
;;;134    	if (GPIO->GPIO_INTEN.tBit.GPIOM == 1)
000004  f8d01170          LDR      r1,[r0,#0x170]
000008  f0110f01          TST      r1,#1
;;;135    	{
;;;136    #if USED_S3_SIGNAL_OUTPUT_CTRL_IN_S3POWER_INTR
;;;137    		if(IS_GPIO_PIN(_GPIO_S3_POWER_IN) == GPIO_DATA_HIGH)
;;;138    		{
;;;139    			GPIO_Set_DATA(_GPIO_S3_SIGNAL_OUT, GPIO_DATA_LOW);
;;;140    		}
;;;141    		else
;;;142    		{
;;;143    			GPIO_Set_DATA(_GPIO_S3_SIGNAL_OUT, GPIO_DATA_HIGH);
;;;144    		}
;;;145    #endif /* USED_S3_SIGNAL_OUTPUT_CTRL_IN_S3POWER_INTR */
;;;146    
;;;147    #if USED_TOUCH_SLEEP_CTRL_BY_HOST
;;;148    		if(IS_GPIO_PIN(_GPIO_SLEEP_EN) == GPIO_DATA_HIGH)
;;;149    		{
;;;150    			tHalIntrHandle.ulTouchSleepGPIOIntr_Flag = YES;
;;;151    		}
;;;152    		else
;;;153    		{
;;;154    			tHalIntrHandle.ulTouchSleepGPIOIntr_Flag = YES;
;;;155    		}
;;;156    #endif /* USED_TOUCH_SLEEP_CTRL_BY_HOST */
;;;157    
;;;158    		GPIO->GPIO_INTCLEAR.tBit.GPIOM = 1;
;;;159    	}
;;;160    }
00000c  bf08              IT       EQ
00000e  4770              BXEQ     lr
000010  f8d01174          LDR      r1,[r0,#0x174]        ;158
000014  f0410101          ORR      r1,r1,#1              ;158
000018  f8c01174          STR      r1,[r0,#0x174]        ;158
00001c  4770              BX       lr
;;;161    
                          ENDP


                          AREA ||i.GPIO_Get_IN||, CODE, READONLY, ALIGN=1

                  GPIO_Get_IN PROC
;;;392    
;;;393    bool_t GPIO_Get_IN(GPIOPin_TypeDef GPIOx)
000000  2839              CMP      r0,#0x39
;;;394    {
;;;395    	bool_t retval;
;;;396    	uint32_t ulShiftIdx;
;;;397    
;;;398    	switch (GPIOx)
000002  d23a              BCS      |L3.122|
000004  e8dff000          TBB      [pc,r0]
000008  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d26          DCB      0x1d,0x1d,0x1d,0x26
000014  26262626          DCB      0x26,0x26,0x26,0x26
000018  26262626          DCB      0x26,0x26,0x26,0x26
00001c  26262626          DCB      0x26,0x26,0x26,0x26
000020  26262626          DCB      0x26,0x26,0x26,0x26
000024  26262626          DCB      0x26,0x26,0x26,0x26
000028  26262626          DCB      0x26,0x26,0x26,0x26
00002c  26262626          DCB      0x26,0x26,0x26,0x26
000030  26262630          DCB      0x26,0x26,0x26,0x30
000034  30303030          DCB      0x30,0x30,0x30,0x30
000038  30303030          DCB      0x30,0x30,0x30,0x30
00003c  30303030          DCB      0x30,0x30,0x30,0x30
000040  3000              DCB      0x30,0x00
;;;399    	{
;;;400    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;401    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;402    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;403    		{
;;;404    			ulShiftIdx = GPIOx;
;;;405    			retval = (GPIO->GPIOM_IN.w >> ulShiftIdx) & 0x1;
000042  f04f4180          MOV      r1,#0x40000000
000046  f8d11100          LDR      r1,[r1,#0x100]
00004a  fa21f000          LSR      r0,r1,r0
00004e  f0000101          AND      r1,r0,#1
;;;406    			break;
000052  e012              B        |L3.122|
;;;407    		}
;;;408    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;409    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;410    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;411    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;412    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;413    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;414    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;415    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;416    		{
;;;417    			ulShiftIdx = GPIOx - GPIO_A00;
;;;418    			retval = (GPIO->GPIOAL_IN.w >> ulShiftIdx) & 0x1;
000054  f04f4180          MOV      r1,#0x40000000
000058  f8d11120          LDR      r1,[r1,#0x120]
00005c  380b              SUBS     r0,r0,#0xb
00005e  fa21f000          LSR      r0,r1,r0
000062  f0000101          AND      r1,r0,#1
;;;419    			break;
000066  e008              B        |L3.122|
;;;420    		}
;;;421    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;422    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;423    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;424    		case GPIO_A44: case GPIO_A45:
;;;425    		{
;;;426    			ulShiftIdx = GPIOx - GPIO_A32;
;;;427    			retval = (GPIO->GPIOAH_IN.w >> ulShiftIdx) & 0x1;
000068  f04f4180          MOV      r1,#0x40000000
00006c  f8d11150          LDR      r1,[r1,#0x150]
000070  382b              SUBS     r0,r0,#0x2b
000072  fa21f000          LSR      r0,r1,r0
000076  f0000101          AND      r1,r0,#1
                  |L3.122|
;;;428    			break;
;;;429    		}
;;;430    		default:
;;;431    			break;
;;;432    	}
;;;433    
;;;434    	return retval;
00007a  4608              MOV      r0,r1
;;;435    }
00007c  4770              BX       lr
;;;436    
                          ENDP


                          AREA ||i.GPIO_Get_OUT||, CODE, READONLY, ALIGN=1

                  GPIO_Get_OUT PROC
;;;436    
;;;437    bool_t GPIO_Get_OUT(GPIOPin_TypeDef GPIOx)	/* Used only output mode */
000000  2839              CMP      r0,#0x39
;;;438    {
;;;439    	bool_t retval;
;;;440    	uint32_t ulShiftIdx;
;;;441    
;;;442    	switch (GPIOx)
000002  d23a              BCS      |L4.122|
000004  e8dff000          TBB      [pc,r0]
000008  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d26          DCB      0x1d,0x1d,0x1d,0x26
000014  26262626          DCB      0x26,0x26,0x26,0x26
000018  26262626          DCB      0x26,0x26,0x26,0x26
00001c  26262626          DCB      0x26,0x26,0x26,0x26
000020  26262626          DCB      0x26,0x26,0x26,0x26
000024  26262626          DCB      0x26,0x26,0x26,0x26
000028  26262626          DCB      0x26,0x26,0x26,0x26
00002c  26262626          DCB      0x26,0x26,0x26,0x26
000030  26262630          DCB      0x26,0x26,0x26,0x30
000034  30303030          DCB      0x30,0x30,0x30,0x30
000038  30303030          DCB      0x30,0x30,0x30,0x30
00003c  30303030          DCB      0x30,0x30,0x30,0x30
000040  3000              DCB      0x30,0x00
;;;443    	{
;;;444    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;445    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;446    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;447    		{
;;;448    			ulShiftIdx = GPIOx;
;;;449    			retval = (GPIO->GPIOM_OUT.w >> ulShiftIdx) & 0x1;
000042  f04f4180          MOV      r1,#0x40000000
000046  f8d11104          LDR      r1,[r1,#0x104]
00004a  fa21f000          LSR      r0,r1,r0
00004e  f0000101          AND      r1,r0,#1
;;;450    			break;
000052  e012              B        |L4.122|
;;;451    		}
;;;452    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;453    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;454    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;455    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;456    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;457    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;458    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;459    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;460    		{
;;;461    			ulShiftIdx = GPIOx - GPIO_A00;
;;;462    			retval = (GPIO->GPIOAL_OUT.w >> ulShiftIdx) & 0x1;
000054  f04f4180          MOV      r1,#0x40000000
000058  f8d11124          LDR      r1,[r1,#0x124]
00005c  380b              SUBS     r0,r0,#0xb
00005e  fa21f000          LSR      r0,r1,r0
000062  f0000101          AND      r1,r0,#1
;;;463    			break;
000066  e008              B        |L4.122|
;;;464    		}
;;;465    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;466    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;467    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;468    		case GPIO_A44: case GPIO_A45:
;;;469    		{
;;;470    			ulShiftIdx = GPIOx - GPIO_A32;
;;;471    			retval = (GPIO->GPIOAH_OUT.w >> ulShiftIdx) & 0x1;
000068  f04f4180          MOV      r1,#0x40000000
00006c  f8d11154          LDR      r1,[r1,#0x154]
000070  382b              SUBS     r0,r0,#0x2b
000072  fa21f000          LSR      r0,r1,r0
000076  f0000101          AND      r1,r0,#1
                  |L4.122|
;;;472    			break;
;;;473    		}
;;;474    		default:
;;;475    			break;
;;;476    	}
;;;477    
;;;478    	return retval;
00007a  4608              MOV      r0,r1
;;;479    }
00007c  4770              BX       lr
;;;480    
                          ENDP


                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;170    
;;;171    void GPIO_Init(GPIOPin_TypeDef GPIOx, GPIOFunc_TypeDef mode, GPIODIR_TypeDef dir, GPIODATA_TypeDef data)
000000  b570              PUSH     {r4-r6,lr}
;;;172    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  4606              MOV      r6,r0
;;;173    	if (mode != GPIO_MODE_FUNC_NONE)
000008  2904              CMP      r1,#4
;;;174    		GPIO_Set_Mode(GPIOx, mode); // Set funtion mode
00000a  bf18              IT       NE
00000c  f7fffffe          BLNE     GPIO_Set_Mode
;;;175    	if (dir != GPIO_DIR_NONE)
000010  2d02              CMP      r5,#2
000012  d003              BEQ      |L5.28|
;;;176    		GPIO_Set_Dir(GPIOx, dir); // Set direction (IN/OUT)
000014  4629              MOV      r1,r5
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       GPIO_Set_Dir
                  |L5.28|
;;;177    	if (data != GPIO_DATA_NONE)
00001c  2c02              CMP      r4,#2
;;;178    		GPIO_Set_DATA(GPIOx, data); // Set status (LOW/HIGH)
;;;179    }
00001e  bf08              IT       EQ
000020  bd70              POPEQ    {r4-r6,pc}
000022  4621              MOV      r1,r4                 ;178
000024  4630              MOV      r0,r6                 ;178
000026  e8bd4070          POP      {r4-r6,lr}            ;178
00002a  f7ffbffe          B.W      GPIO_Set_DATA
;;;180    
                          ENDP


                          AREA ||i.GPIO_Initialize||, CODE, READONLY, ALIGN=2

                  GPIO_Initialize PROC
;;;161    
;;;162    void GPIO_Initialize(void)
000000  4904              LDR      r1,|L6.20|
;;;163    {
;;;164    	Fncp_GPIOA_IRQHandler = &GPIOA_InterruptHandler;
000002  4803              LDR      r0,|L6.16|
;;;165    	Fncp_GPIOM_IRQHandler = &GPIOM_InterruptHandler;
000004  6008              STR      r0,[r1,#0]  ; Fncp_GPIOA_IRQHandler
000006  4905              LDR      r1,|L6.28|
000008  4803              LDR      r0,|L6.24|
00000a  6008              STR      r0,[r1,#0]  ; Fncp_GPIOM_IRQHandler
;;;166    #if USED_TSYNC2_INPUT_FROM_TCON
;;;167    	GPIO_Set_INT(_GPIO_TSYNC_2_IN, GPIO_INTEN_ENABLE, GPIO_INTTYPE_FALLING_EDGE);
;;;168    #endif /* USED_TSYNC2_INPUT_FROM_TCON */
;;;169    }
00000c  4770              BX       lr
;;;170    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      GPIOA_InterruptHandler
                  |L6.20|
                          DCD      Fncp_GPIOA_IRQHandler
                  |L6.24|
                          DCD      GPIOM_InterruptHandler
                  |L6.28|
                          DCD      Fncp_GPIOM_IRQHandler

                          AREA ||i.GPIO_Set_DATA||, CODE, READONLY, ALIGN=1

                  GPIO_Set_DATA PROC
;;;266    
;;;267    void GPIO_Set_DATA(GPIOPin_TypeDef GPIOx, GPIODATA_TypeDef data)
000000  2839              CMP      r0,#0x39
;;;268    {
;;;269    	uint32_t ulShiftIdx;
;;;270    	switch (GPIOx)
;;;271    	{
;;;272    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;273    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;274    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;275    			ulShiftIdx = GPIOx;
;;;276    			GPIO->GPIOM_OUT.w = (GPIO->GPIOM_OUT.w & ~(0x1 << ulShiftIdx)) | ((0x1 & data) << ulShiftIdx);
;;;277    			break;
;;;278    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;279    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;280    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;281    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;282    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;283    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;284    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;285    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;286    			ulShiftIdx = GPIOx - GPIO_A00;
;;;287    			GPIO->GPIOAL_OUT.w = (GPIO->GPIOAL_OUT.w & ~(0x1 << ulShiftIdx)) | ((0x1 & data) << ulShiftIdx);
;;;288    			break;
;;;289    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;290    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;291    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;292    		case GPIO_A44: case GPIO_A45:
;;;293    			ulShiftIdx = GPIOx - GPIO_A32;
;;;294    			GPIO->GPIOAH_OUT.w = (GPIO->GPIOAH_OUT.w & ~(0x1 << ulShiftIdx)) | ((0x1 & data) << ulShiftIdx);
;;;295    			break;
;;;296    
;;;297    		default:
;;;298    			break;
;;;299    	}
;;;300    
;;;301    }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1d1d              DCB      0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d2f2f2f          DCB      0x1d,0x2f,0x2f,0x2f
000018  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
00001c  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000020  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000024  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000028  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
00002c  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000030  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000034  2f424242          DCB      0x2f,0x42,0x42,0x42
000038  42424242          DCB      0x42,0x42,0x42,0x42
00003c  42424242          DCB      0x42,0x42,0x42,0x42
000040  42424200          DCB      0x42,0x42,0x42,0x00
000044  f04f4280          MOV      r2,#0x40000000        ;276
000048  f8d23104          LDR      r3,[r2,#0x104]        ;276
00004c  f04f0c01          MOV      r12,#1                ;276
000050  fa0cfc00          LSL      r12,r12,r0            ;276
000054  f0010101          AND      r1,r1,#1              ;276
000058  ea23030c          BIC      r3,r3,r12             ;276
00005c  fa01f000          LSL      r0,r1,r0              ;276
000060  4318              ORRS     r0,r0,r3              ;276
000062  f8c20104          STR      r0,[r2,#0x104]        ;276
000066  4770              BX       lr
000068  f04f4280          MOV      r2,#0x40000000        ;287
00006c  f8d23124          LDR      r3,[r2,#0x124]        ;287
000070  f04f0c01          MOV      r12,#1                ;287
000074  380b              SUBS     r0,r0,#0xb            ;287
000076  fa0cfc00          LSL      r12,r12,r0            ;287
00007a  f0010101          AND      r1,r1,#1              ;287
00007e  ea23030c          BIC      r3,r3,r12             ;287
000082  fa01f000          LSL      r0,r1,r0              ;287
000086  4318              ORRS     r0,r0,r3              ;287
000088  f8c20124          STR      r0,[r2,#0x124]        ;287
00008c  4770              BX       lr
00008e  f04f4280          MOV      r2,#0x40000000        ;294
000092  f8d23154          LDR      r3,[r2,#0x154]        ;294
000096  f04f0c01          MOV      r12,#1                ;294
00009a  382b              SUBS     r0,r0,#0x2b           ;294
00009c  fa0cfc00          LSL      r12,r12,r0            ;294
0000a0  f0010101          AND      r1,r1,#1              ;294
0000a4  ea23030c          BIC      r3,r3,r12             ;294
0000a8  fa01f000          LSL      r0,r1,r0              ;294
0000ac  4318              ORRS     r0,r0,r3              ;294
0000ae  f8c20154          STR      r0,[r2,#0x154]        ;294
0000b2  4770              BX       lr
;;;302    
                          ENDP


                          AREA ||i.GPIO_Set_DS||, CODE, READONLY, ALIGN=1

                  GPIO_Set_DS PROC
;;;347    
;;;348    void GPIO_Set_DS(GPIOPin_TypeDef GPIOx, GPIODS_TypeDef ds)
000000  2839              CMP      r0,#0x39
;;;349    {
;;;350    	uint32_t ulShiftIdx;
;;;351    	switch (GPIOx)
;;;352    	{
;;;353    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;354    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;355    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;356    		{
;;;357    			ulShiftIdx = GPIOx<<1;
;;;358    			GPIO->GPIOM_DS.w = (GPIO->GPIOM_DS.w & ~(0x3 << ulShiftIdx)) | ((0x3&ds) << ulShiftIdx);
;;;359    			break;
;;;360    		}
;;;361    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;362    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;363    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;364    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;365    		{
;;;366    			ulShiftIdx = (GPIOx-GPIO_A00)<<1;
;;;367    			GPIO->GPIOALL_DS.w = (GPIO->GPIOALL_DS.w & ~(0x3 << ulShiftIdx)) | ((0x3&ds) << ulShiftIdx);
;;;368    			break;
;;;369    		}
;;;370    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;371    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;372    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;373    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;374    		{
;;;375    			ulShiftIdx = (GPIOx-GPIO_A16)<<1;
;;;376    			GPIO->GPIOALH_DS.w = (GPIO->GPIOALH_DS.w & ~(0x3 << ulShiftIdx)) | ((0x3&ds) << ulShiftIdx);
;;;377    			break;
;;;378    		}
;;;379    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;380    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;381    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;382    		case GPIO_A44: case GPIO_A45:
;;;383    		{
;;;384    			ulShiftIdx = (GPIOx-GPIO_A32)<<1;
;;;385    			GPIO->GPIOAH_DS.w = (GPIO->GPIOAH_DS.w & ~(0x3 << ulShiftIdx)) | ((0x3&ds) << ulShiftIdx);
;;;386    			break;
;;;387    		}
;;;388    		default:
;;;389    			break;
;;;390    	}
;;;391    }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1d1d              DCB      0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d303030          DCB      0x1d,0x30,0x30,0x30
000018  30303030          DCB      0x30,0x30,0x30,0x30
00001c  30303030          DCB      0x30,0x30,0x30,0x30
000020  30303030          DCB      0x30,0x30,0x30,0x30
000024  30444444          DCB      0x30,0x44,0x44,0x44
000028  44444444          DCB      0x44,0x44,0x44,0x44
00002c  44444444          DCB      0x44,0x44,0x44,0x44
000030  44444444          DCB      0x44,0x44,0x44,0x44
000034  44585858          DCB      0x44,0x58,0x58,0x58
000038  58585858          DCB      0x58,0x58,0x58,0x58
00003c  58585858          DCB      0x58,0x58,0x58,0x58
000040  58585800          DCB      0x58,0x58,0x58,0x00
000044  0040              LSLS     r0,r0,#1              ;357
000046  f04f4280          MOV      r2,#0x40000000        ;358
00004a  f8d2310c          LDR      r3,[r2,#0x10c]        ;358
00004e  f04f0c03          MOV      r12,#3                ;358
000052  fa0cfc00          LSL      r12,r12,r0            ;358
000056  f0010103          AND      r1,r1,#3              ;358
00005a  ea23030c          BIC      r3,r3,r12             ;358
00005e  fa01f000          LSL      r0,r1,r0              ;358
000062  4318              ORRS     r0,r0,r3              ;358
000064  f8c2010c          STR      r0,[r2,#0x10c]        ;358
000068  4770              BX       lr
00006a  f04f4280          MOV      r2,#0x40000000        ;367
00006e  0040              LSLS     r0,r0,#1              ;366
000070  f8d2312c          LDR      r3,[r2,#0x12c]        ;367
000074  f04f0c03          MOV      r12,#3                ;367
000078  3816              SUBS     r0,r0,#0x16           ;367
00007a  fa0cfc00          LSL      r12,r12,r0            ;367
00007e  f0010103          AND      r1,r1,#3              ;367
000082  ea23030c          BIC      r3,r3,r12             ;367
000086  fa01f000          LSL      r0,r1,r0              ;367
00008a  4318              ORRS     r0,r0,r3              ;367
00008c  f8c2012c          STR      r0,[r2,#0x12c]        ;367
000090  4770              BX       lr
000092  f04f4280          MOV      r2,#0x40000000        ;376
000096  0040              LSLS     r0,r0,#1              ;375
000098  f8d23130          LDR      r3,[r2,#0x130]        ;376
00009c  f04f0c03          MOV      r12,#3                ;376
0000a0  3836              SUBS     r0,r0,#0x36           ;376
0000a2  fa0cfc00          LSL      r12,r12,r0            ;376
0000a6  f0010103          AND      r1,r1,#3              ;376
0000aa  ea23030c          BIC      r3,r3,r12             ;376
0000ae  fa01f000          LSL      r0,r1,r0              ;376
0000b2  4318              ORRS     r0,r0,r3              ;376
0000b4  f8c20130          STR      r0,[r2,#0x130]        ;376
0000b8  4770              BX       lr
0000ba  f04f4280          MOV      r2,#0x40000000        ;385
0000be  0040              LSLS     r0,r0,#1              ;384
0000c0  f8d2315c          LDR      r3,[r2,#0x15c]        ;385
0000c4  f04f0c03          MOV      r12,#3                ;385
0000c8  3856              SUBS     r0,r0,#0x56           ;385
0000ca  fa0cfc00          LSL      r12,r12,r0            ;385
0000ce  f0010103          AND      r1,r1,#3              ;385
0000d2  ea23030c          BIC      r3,r3,r12             ;385
0000d6  fa01f000          LSL      r0,r1,r0              ;385
0000da  4318              ORRS     r0,r0,r3              ;385
0000dc  f8c2015c          STR      r0,[r2,#0x15c]        ;385
0000e0  4770              BX       lr
;;;392    
                          ENDP


                          AREA ||i.GPIO_Set_Dir||, CODE, READONLY, ALIGN=1

                  GPIO_Set_Dir PROC
;;;225    
;;;226    void GPIO_Set_Dir(GPIOPin_TypeDef GPIOx, GPIODIR_TypeDef dir)
000000  2839              CMP      r0,#0x39
;;;227    {
;;;228    	uint32_t ulShiftIdx;
;;;229    	switch (GPIOx)
;;;230    	{
;;;231    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;232    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;233    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;234    		{
;;;235    			ulShiftIdx = GPIOx;
;;;236    			GPIO->GPIOM_OEN.w = (GPIO->GPIOM_OEN.w & ~(0x1 << ulShiftIdx)) | ((0x1 & dir) << ulShiftIdx);
;;;237    			break;
;;;238    		}
;;;239    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;240    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;241    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;242    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;243    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;244    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;245    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;246    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;247    		{
;;;248    			ulShiftIdx = GPIOx - GPIO_A00;
;;;249    			GPIO->GPIOAL_OEN.w = (GPIO->GPIOAL_OEN.w & ~(0x1 << ulShiftIdx)) | ((0x1 & dir) << ulShiftIdx);
;;;250    			break;
;;;251    		}
;;;252    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;253    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;254    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;255    		case GPIO_A44: case GPIO_A45:
;;;256    		{
;;;257    			ulShiftIdx = GPIOx - GPIO_A32;
;;;258    			GPIO->GPIOAH_OEN.w = (GPIO->GPIOAH_OEN.w & ~(0x1 << ulShiftIdx)) | ((0x1 & dir) << ulShiftIdx);
;;;259    			break;
;;;260    		}
;;;261    		default:
;;;262    			break;
;;;263    	}
;;;264    
;;;265    }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1d1d              DCB      0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d2f2f2f          DCB      0x1d,0x2f,0x2f,0x2f
000018  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
00001c  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000020  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000024  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000028  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
00002c  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000030  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
000034  2f424242          DCB      0x2f,0x42,0x42,0x42
000038  42424242          DCB      0x42,0x42,0x42,0x42
00003c  42424242          DCB      0x42,0x42,0x42,0x42
000040  42424200          DCB      0x42,0x42,0x42,0x00
000044  f04f4280          MOV      r2,#0x40000000        ;236
000048  f8d23108          LDR      r3,[r2,#0x108]        ;236
00004c  f04f0c01          MOV      r12,#1                ;236
000050  fa0cfc00          LSL      r12,r12,r0            ;236
000054  f0010101          AND      r1,r1,#1              ;236
000058  ea23030c          BIC      r3,r3,r12             ;236
00005c  fa01f000          LSL      r0,r1,r0              ;236
000060  4318              ORRS     r0,r0,r3              ;236
000062  f8c20108          STR      r0,[r2,#0x108]        ;236
000066  4770              BX       lr
000068  f04f4280          MOV      r2,#0x40000000        ;249
00006c  f8d23128          LDR      r3,[r2,#0x128]        ;249
000070  f04f0c01          MOV      r12,#1                ;249
000074  380b              SUBS     r0,r0,#0xb            ;249
000076  fa0cfc00          LSL      r12,r12,r0            ;249
00007a  f0010101          AND      r1,r1,#1              ;249
00007e  ea23030c          BIC      r3,r3,r12             ;249
000082  fa01f000          LSL      r0,r1,r0              ;249
000086  4318              ORRS     r0,r0,r3              ;249
000088  f8c20128          STR      r0,[r2,#0x128]        ;249
00008c  4770              BX       lr
00008e  f04f4280          MOV      r2,#0x40000000        ;258
000092  f8d23158          LDR      r3,[r2,#0x158]        ;258
000096  f04f0c01          MOV      r12,#1                ;258
00009a  382b              SUBS     r0,r0,#0x2b           ;258
00009c  fa0cfc00          LSL      r12,r12,r0            ;258
0000a0  f0010101          AND      r1,r1,#1              ;258
0000a4  ea23030c          BIC      r3,r3,r12             ;258
0000a8  fa01f000          LSL      r0,r1,r0              ;258
0000ac  4318              ORRS     r0,r0,r3              ;258
0000ae  f8c20158          STR      r0,[r2,#0x158]        ;258
0000b2  4770              BX       lr
;;;266    
                          ENDP


                          AREA ||i.GPIO_Set_INT||, CODE, READONLY, ALIGN=1

                  GPIO_Set_INT PROC
;;;480    
;;;481    void GPIO_Set_INT(GPIOPin_TypeDef GPIOx, GPIOINTEN_TypeDef En, GPIOINTType_TypeDef type)
000000  b430              PUSH     {r4,r5}
;;;482    {
;;;483    	uint32_t ulShiftIdx;
;;;484    	IRQn_Type eIRQ_Type;
;;;485    	switch (GPIOx)
;;;486    	{
;;;487    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;488    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;489    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;490    		{
;;;491    			ulShiftIdx = GPIOx<<1;
;;;492    			GPIO->GPIOM_INTTYPE.w = (GPIO->GPIOM_INTTYPE.w & ~(0x3 << ulShiftIdx)) | ((0x3&type) << ulShiftIdx);
000002  f04f4380          MOV      r3,#0x40000000
000006  2839              CMP      r0,#0x39              ;485
000008  d263              BCS      |L10.210|
00000a  e8dff000          TBB      [pc,r0]               ;485
00000e  1d1d              DCB      0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000018  1d2d2d2d          DCB      0x1d,0x2d,0x2d,0x2d
00001c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000020  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000024  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000028  2d3f3f3f          DCB      0x2d,0x3f,0x3f,0x3f
00002c  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
000030  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
000034  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
000038  3f515151          DCB      0x3f,0x51,0x51,0x51
00003c  51515151          DCB      0x51,0x51,0x51,0x51
000040  51515151          DCB      0x51,0x51,0x51,0x51
000044  51515100          DCB      0x51,0x51,0x51,0x00
000048  f8d3411c          LDR      r4,[r3,#0x11c]
00004c  ea4f0c40          LSL      r12,r0,#1             ;491
000050  2503              MOVS     r5,#3
000052  fa05f50c          LSL      r5,r5,r12
000056  f0020203          AND      r2,r2,#3
00005a  43ac              BICS     r4,r4,r5
00005c  fa02f20c          LSL      r2,r2,r12
000060  4322              ORRS     r2,r2,r4
000062  f8c3211c          STR      r2,[r3,#0x11c]
;;;493    			break;
000066  e034              B        |L10.210|
;;;494    		}
;;;495    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;496    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;497    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;498    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;499    		{
;;;500    			ulShiftIdx = (GPIOx - GPIO_A00)<<1;
;;;501    			GPIO->GPIOALL_INTTYPE.w = (GPIO->GPIOALL_INTTYPE.w & ~(0x3 << ulShiftIdx)) | ((0x3&type) << ulShiftIdx);
000068  f8d34148          LDR      r4,[r3,#0x148]
00006c  ea4f0c40          LSL      r12,r0,#1             ;500
000070  f1ac0c16          SUB      r12,r12,#0x16
000074  2503              MOVS     r5,#3
000076  fa05f50c          LSL      r5,r5,r12
00007a  f0020203          AND      r2,r2,#3
00007e  43ac              BICS     r4,r4,r5
000080  fa02f20c          LSL      r2,r2,r12
000084  4322              ORRS     r2,r2,r4
000086  f8c32148          STR      r2,[r3,#0x148]
;;;502    			break;
00008a  e022              B        |L10.210|
;;;503    		}
;;;504    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;505    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;506    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;507    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;508    		{
;;;509    			ulShiftIdx = (GPIOx - GPIO_A16)<<1;
;;;510    			GPIO->GPIOALH_INTTYPE.w = (GPIO->GPIOALH_INTTYPE.w & ~(0x3 << ulShiftIdx)) | ((0x3&type) << ulShiftIdx);
00008c  f8d3414c          LDR      r4,[r3,#0x14c]
000090  ea4f0c40          LSL      r12,r0,#1             ;509
000094  f1ac0c36          SUB      r12,r12,#0x36
000098  2503              MOVS     r5,#3
00009a  fa05f50c          LSL      r5,r5,r12
00009e  f0020203          AND      r2,r2,#3
0000a2  43ac              BICS     r4,r4,r5
0000a4  fa02f20c          LSL      r2,r2,r12
0000a8  4322              ORRS     r2,r2,r4
0000aa  f8c3214c          STR      r2,[r3,#0x14c]
;;;511    			break;
0000ae  e010              B        |L10.210|
;;;512    		}
;;;513    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;514    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;515    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;516    		case GPIO_A44: case GPIO_A45:
;;;517    		{
;;;518    			ulShiftIdx = (GPIOx - GPIO_A32)<<1;
;;;519    			GPIO->GPIOAH_INTTYPE.w = (GPIO->GPIOAH_INTTYPE.w & ~(0x3 << ulShiftIdx)) | ((0x3&type) << ulShiftIdx);
0000b0  f8d3416c          LDR      r4,[r3,#0x16c]
0000b4  ea4f0c40          LSL      r12,r0,#1             ;518
0000b8  f1ac0c56          SUB      r12,r12,#0x56
0000bc  2503              MOVS     r5,#3
0000be  fa05f50c          LSL      r5,r5,r12
0000c2  f0020203          AND      r2,r2,#3
0000c6  43ac              BICS     r4,r4,r5
0000c8  fa02f20c          LSL      r2,r2,r12
0000cc  4322              ORRS     r2,r2,r4
0000ce  f8c3216c          STR      r2,[r3,#0x16c]
                  |L10.210|
;;;520    			break;
;;;521    		}
;;;522    		default:
;;;523    			break;
;;;524    	}
;;;525    
;;;526    	if(GPIOx <= GPIO_M10)
0000d2  280a              CMP      r0,#0xa
;;;527    	{
;;;528    		eIRQ_Type = GPIOM_IRQn;
0000d4  bf99              ITTEE    LS
0000d6  2009              MOVLS    r0,#9
;;;529    		ulShiftIdx = 0;
0000d8  2200              MOVLS    r2,#0
;;;530    	}
;;;531    	else
;;;532    	{
;;;533    		eIRQ_Type = GPIOA_IRQn;
0000da  2008              MOVHI    r0,#8
;;;534    		ulShiftIdx = 1;
0000dc  2201              MOVHI    r2,#1
;;;535    	}
;;;536    
;;;537    	GPIO->GPIO_INTEN.w = (GPIO->GPIO_INTEN.w & ~(0x1 << ulShiftIdx)) | ((0x1 & En) << ulShiftIdx);
0000de  f8d34170          LDR      r4,[r3,#0x170]
0000e2  f04f0c01          MOV      r12,#1
0000e6  fa0cf502          LSL      r5,r12,r2
0000ea  43ac              BICS     r4,r4,r5
0000ec  f0010501          AND      r5,r1,#1
0000f0  fa05f202          LSL      r2,r5,r2
0000f4  4322              ORRS     r2,r2,r4
0000f6  f8c32170          STR      r2,[r3,#0x170]
0000fa  fa0cf200          LSL      r2,r12,r0
0000fe  ea4f1c50          LSR      r12,r0,#5
000102  ea4f0c8c          LSL      r12,r12,#2
000106  f10c2ce0          ADD      r12,r12,#0xe000e000
00010a  f8cc2280          STR      r2,[r12,#0x280]
00010e  24a0              MOVS     r4,#0xa0
000110  2800              CMP      r0,#0
000112  f10020e0          ADD      r0,r0,#0xe000e000
000116  bfb4              ITE      LT
000118  f8804d14          STRBLT   r4,[r0,#0xd14]
00011c  f8804400          STRBGE   r4,[r0,#0x400]
;;;538    	NVIC_ClearPendingIRQ(eIRQ_Type);
;;;539    	NVIC_SetPriority(eIRQ_Type, GPIOM_IRQn_Priority);
;;;540    	if(En == GPIO_INTEN_ENABLE)
000120  2901              CMP      r1,#1
000122  bf02              ITTT     EQ
000124  f8cc2100          STREQ    r2,[r12,#0x100]
;;;541    	{
;;;542    		NVIC_EnableIRQ(eIRQ_Type);
;;;543    	}
;;;544    	else
;;;545    	{
;;;546    		GPIO->GPIO_INTEN.tBit.GPIOM = GPIO_INTEN_DISABLE;
;;;547    		NVIC_DisableIRQ(eIRQ_Type);
;;;548    	}
;;;549    }
000128  bc30              POPEQ    {r4,r5}
00012a  4770              BXEQ     lr
00012c  f8d30170          LDR      r0,[r3,#0x170]        ;546
000130  f0200001          BIC      r0,r0,#1              ;546
000134  f8c30170          STR      r0,[r3,#0x170]        ;546
000138  f8cc2180          STR      r2,[r12,#0x180]       ;546
00013c  bc30              POP      {r4,r5}
00013e  4770              BX       lr
;;;550    
                          ENDP


                          AREA ||i.GPIO_Set_Mode||, CODE, READONLY, ALIGN=1

                  GPIO_Set_Mode PROC
;;;180    
;;;181    void GPIO_Set_Mode(GPIOPin_TypeDef GPIOx, GPIOFunc_TypeDef mode)
000000  2839              CMP      r0,#0x39
;;;182    {
;;;183    	uint32_t ulShiftIdx;
;;;184    	switch (GPIOx)
;;;185    	{
;;;186    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;187    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;188    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;189    		{
;;;190    			ulShiftIdx = GPIOx<<1;
;;;191    			GPIO->GPIOM_FUNC.w = (GPIO->GPIOM_FUNC.w & ~(0x3 << ulShiftIdx)) | ((0x3&mode) << ulShiftIdx);
;;;192    			break;
;;;193    		}
;;;194    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;195    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;196    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;197    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;198    		{
;;;199    			ulShiftIdx = (GPIOx-GPIO_A00)<<1;
;;;200    			GPIO->GPIOALL_FUNC.w = (GPIO->GPIOALL_FUNC.w & ~(0x3 << ulShiftIdx)) | ((0x3&mode) << ulShiftIdx);
;;;201    			break;
;;;202    		}
;;;203    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;204    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;205    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;206    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;207    		{
;;;208    			ulShiftIdx = (GPIOx-GPIO_A16)<<1;
;;;209    			GPIO->GPIOALH_FUNC.w = (GPIO->GPIOALH_FUNC.w & ~(0x3 << ulShiftIdx)) | ((0x3&mode) << ulShiftIdx);
;;;210    			break;
;;;211    		}
;;;212    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;213    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;214    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;215    		case GPIO_A44: case GPIO_A45:
;;;216    		{
;;;217    			ulShiftIdx = (GPIOx-GPIO_A32)<<1;
;;;218    			GPIO->GPIOAH_FUNC.w = (GPIO->GPIOAH_FUNC.w & ~(0x3 << ulShiftIdx)) | ((0x3&mode) << ulShiftIdx);
;;;219    			break;
;;;220    		}
;;;221    		default:
;;;222    			break;
;;;223    	}
;;;224    }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1d1d              DCB      0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d303030          DCB      0x1d,0x30,0x30,0x30
000018  30303030          DCB      0x30,0x30,0x30,0x30
00001c  30303030          DCB      0x30,0x30,0x30,0x30
000020  30303030          DCB      0x30,0x30,0x30,0x30
000024  30444444          DCB      0x30,0x44,0x44,0x44
000028  44444444          DCB      0x44,0x44,0x44,0x44
00002c  44444444          DCB      0x44,0x44,0x44,0x44
000030  44444444          DCB      0x44,0x44,0x44,0x44
000034  44585858          DCB      0x44,0x58,0x58,0x58
000038  58585858          DCB      0x58,0x58,0x58,0x58
00003c  58585858          DCB      0x58,0x58,0x58,0x58
000040  58585800          DCB      0x58,0x58,0x58,0x00
000044  0040              LSLS     r0,r0,#1              ;190
000046  f04f4280          MOV      r2,#0x40000000        ;191
00004a  f8d23118          LDR      r3,[r2,#0x118]        ;191
00004e  f04f0c03          MOV      r12,#3                ;191
000052  fa0cfc00          LSL      r12,r12,r0            ;191
000056  f0010103          AND      r1,r1,#3              ;191
00005a  ea23030c          BIC      r3,r3,r12             ;191
00005e  fa01f000          LSL      r0,r1,r0              ;191
000062  4318              ORRS     r0,r0,r3              ;191
000064  f8c20118          STR      r0,[r2,#0x118]        ;191
000068  4770              BX       lr
00006a  f04f4280          MOV      r2,#0x40000000        ;200
00006e  0040              LSLS     r0,r0,#1              ;199
000070  f8d23140          LDR      r3,[r2,#0x140]        ;200
000074  f04f0c03          MOV      r12,#3                ;200
000078  3816              SUBS     r0,r0,#0x16           ;200
00007a  fa0cfc00          LSL      r12,r12,r0            ;200
00007e  f0010103          AND      r1,r1,#3              ;200
000082  ea23030c          BIC      r3,r3,r12             ;200
000086  fa01f000          LSL      r0,r1,r0              ;200
00008a  4318              ORRS     r0,r0,r3              ;200
00008c  f8c20140          STR      r0,[r2,#0x140]        ;200
000090  4770              BX       lr
000092  f04f4280          MOV      r2,#0x40000000        ;209
000096  0040              LSLS     r0,r0,#1              ;208
000098  f8d23144          LDR      r3,[r2,#0x144]        ;209
00009c  f04f0c03          MOV      r12,#3                ;209
0000a0  3836              SUBS     r0,r0,#0x36           ;209
0000a2  fa0cfc00          LSL      r12,r12,r0            ;209
0000a6  f0010103          AND      r1,r1,#3              ;209
0000aa  ea23030c          BIC      r3,r3,r12             ;209
0000ae  fa01f000          LSL      r0,r1,r0              ;209
0000b2  4318              ORRS     r0,r0,r3              ;209
0000b4  f8c20144          STR      r0,[r2,#0x144]        ;209
0000b8  4770              BX       lr
0000ba  f04f4280          MOV      r2,#0x40000000        ;218
0000be  0040              LSLS     r0,r0,#1              ;217
0000c0  f8d23168          LDR      r3,[r2,#0x168]        ;218
0000c4  f04f0c03          MOV      r12,#3                ;218
0000c8  3856              SUBS     r0,r0,#0x56           ;218
0000ca  fa0cfc00          LSL      r12,r12,r0            ;218
0000ce  f0010103          AND      r1,r1,#3              ;218
0000d2  ea23030c          BIC      r3,r3,r12             ;218
0000d6  fa01f000          LSL      r0,r1,r0              ;218
0000da  4318              ORRS     r0,r0,r3              ;218
0000dc  f8c20168          STR      r0,[r2,#0x168]        ;218
0000e0  4770              BX       lr
;;;225    
                          ENDP


                          AREA ||i.GPIO_Set_PE||, CODE, READONLY, ALIGN=1

                  GPIO_Set_PE PROC
;;;302    
;;;303    void GPIO_Set_PE(GPIOPin_TypeDef GPIOx, GPIOPE_TypeDef pe)
000000  2839              CMP      r0,#0x39
;;;304    {
;;;305    	uint32_t ulShiftIdx;
;;;306    	switch (GPIOx)
;;;307    	{
;;;308    		case GPIO_M00: case GPIO_M01: case GPIO_M02: case GPIO_M03:
;;;309    		case GPIO_M04: case GPIO_M05: case GPIO_M06: case GPIO_M07:
;;;310    		case GPIO_M08: case GPIO_M09: case GPIO_M10:
;;;311    		{
;;;312    			ulShiftIdx = GPIOx<<1;
;;;313    			GPIO->GPIOM_PE.w = (GPIO->GPIOM_PE.w & ~(0x3 << ulShiftIdx)) | ((0x3&pe) << ulShiftIdx);
;;;314    			break;
;;;315    		}
;;;316    		case GPIO_A00: case GPIO_A01: case GPIO_A02: case GPIO_A03:
;;;317    		case GPIO_A04: case GPIO_A05: case GPIO_A06: case GPIO_A07:
;;;318    		case GPIO_A08: case GPIO_A09: case GPIO_A10: case GPIO_A11:
;;;319    		case GPIO_A12: case GPIO_A13: case GPIO_A14: case GPIO_A15:
;;;320    		{
;;;321    			ulShiftIdx = (GPIOx-GPIO_A00)<<1;
;;;322    			GPIO->GPIOALL_PE.w = (GPIO->GPIOALL_PE.w & ~(0x3 << ulShiftIdx)) | ((0x3&pe) << ulShiftIdx);
;;;323    			break;
;;;324    		}
;;;325    		case GPIO_A16: case GPIO_A17: case GPIO_A18: case GPIO_A19:
;;;326    		case GPIO_A20: case GPIO_A21: case GPIO_A22: case GPIO_A23:
;;;327    		case GPIO_A24: case GPIO_A25: case GPIO_A26: case GPIO_A27:
;;;328    		case GPIO_A28: case GPIO_A29: case GPIO_A30: case GPIO_A31:
;;;329    		{
;;;330    			ulShiftIdx = (GPIOx-GPIO_A16)<<1;
;;;331    			GPIO->GPIOALH_PE.w = (GPIO->GPIOALH_PE.w & ~(0x3 << ulShiftIdx)) | ((0x3&pe) << ulShiftIdx);
;;;332    			break;
;;;333    		}
;;;334    		case GPIO_A32: case GPIO_A33: case GPIO_A34: case GPIO_A35:
;;;335    		case GPIO_A36: case GPIO_A37: case GPIO_A38: case GPIO_A39:
;;;336    		case GPIO_A40: case GPIO_A41: case GPIO_A42: case GPIO_A43:
;;;337    		case GPIO_A44: case GPIO_A45:
;;;338    		{
;;;339    			ulShiftIdx = (GPIOx-GPIO_A32)<<1;
;;;340    			GPIO->GPIOAH_PE.w = (GPIO->GPIOAH_PE.w & ~(0x3 << ulShiftIdx)) | ((0x3&pe) << ulShiftIdx);
;;;341    			break;
;;;342    		}
;;;343    		default:
;;;344    			break;
;;;345    	}
;;;346    }
000002  bf28              IT       CS
000004  4770              BXCS     lr
000006  e8dff000          TBB      [pc,r0]
00000a  1d1d              DCB      0x1d,0x1d
00000c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000010  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000014  1d303030          DCB      0x1d,0x30,0x30,0x30
000018  30303030          DCB      0x30,0x30,0x30,0x30
00001c  30303030          DCB      0x30,0x30,0x30,0x30
000020  30303030          DCB      0x30,0x30,0x30,0x30
000024  30444444          DCB      0x30,0x44,0x44,0x44
000028  44444444          DCB      0x44,0x44,0x44,0x44
00002c  44444444          DCB      0x44,0x44,0x44,0x44
000030  44444444          DCB      0x44,0x44,0x44,0x44
000034  44585858          DCB      0x44,0x58,0x58,0x58
000038  58585858          DCB      0x58,0x58,0x58,0x58
00003c  58585858          DCB      0x58,0x58,0x58,0x58
000040  58585800          DCB      0x58,0x58,0x58,0x00
000044  0040              LSLS     r0,r0,#1              ;312
000046  f04f4280          MOV      r2,#0x40000000        ;313
00004a  f8d23110          LDR      r3,[r2,#0x110]        ;313
00004e  f04f0c03          MOV      r12,#3                ;313
000052  fa0cfc00          LSL      r12,r12,r0            ;313
000056  f0010103          AND      r1,r1,#3              ;313
00005a  ea23030c          BIC      r3,r3,r12             ;313
00005e  fa01f000          LSL      r0,r1,r0              ;313
000062  4318              ORRS     r0,r0,r3              ;313
000064  f8c20110          STR      r0,[r2,#0x110]        ;313
000068  4770              BX       lr
00006a  f04f4280          MOV      r2,#0x40000000        ;322
00006e  0040              LSLS     r0,r0,#1              ;321
000070  f8d23134          LDR      r3,[r2,#0x134]        ;322
000074  f04f0c03          MOV      r12,#3                ;322
000078  3816              SUBS     r0,r0,#0x16           ;322
00007a  fa0cfc00          LSL      r12,r12,r0            ;322
00007e  f0010103          AND      r1,r1,#3              ;322
000082  ea23030c          BIC      r3,r3,r12             ;322
000086  fa01f000          LSL      r0,r1,r0              ;322
00008a  4318              ORRS     r0,r0,r3              ;322
00008c  f8c20134          STR      r0,[r2,#0x134]        ;322
000090  4770              BX       lr
000092  f04f4280          MOV      r2,#0x40000000        ;331
000096  0040              LSLS     r0,r0,#1              ;330
000098  f8d23138          LDR      r3,[r2,#0x138]        ;331
00009c  f04f0c03          MOV      r12,#3                ;331
0000a0  3836              SUBS     r0,r0,#0x36           ;331
0000a2  fa0cfc00          LSL      r12,r12,r0            ;331
0000a6  f0010103          AND      r1,r1,#3              ;331
0000aa  ea23030c          BIC      r3,r3,r12             ;331
0000ae  fa01f000          LSL      r0,r1,r0              ;331
0000b2  4318              ORRS     r0,r0,r3              ;331
0000b4  f8c20138          STR      r0,[r2,#0x138]        ;331
0000b8  4770              BX       lr
0000ba  f04f4280          MOV      r2,#0x40000000        ;340
0000be  0040              LSLS     r0,r0,#1              ;339
0000c0  f8d23160          LDR      r3,[r2,#0x160]        ;340
0000c4  f04f0c03          MOV      r12,#3                ;340
0000c8  3856              SUBS     r0,r0,#0x56           ;340
0000ca  fa0cfc00          LSL      r12,r12,r0            ;340
0000ce  f0010103          AND      r1,r1,#3              ;340
0000d2  ea23030c          BIC      r3,r3,r12             ;340
0000d6  fa01f000          LSL      r0,r1,r0              ;340
0000da  4318              ORRS     r0,r0,r3              ;340
0000dc  f8c20160          STR      r0,[r2,#0x160]        ;340
0000e0  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||i.GPIO_Toggle||, CODE, READONLY, ALIGN=1

                  GPIO_Toggle PROC
;;;550    
;;;551    void GPIO_Toggle(GPIOPin_TypeDef GPIOx)
000000  b500              PUSH     {lr}
;;;552    {
000002  4603              MOV      r3,r0
;;;553    	GPIO_Set_DATA(GPIOx, (GPIODATA_TypeDef)!GPIO_Get_OUT(GPIOx));
000004  f7fffffe          BL       GPIO_Get_OUT
000008  2800              CMP      r0,#0
00000a  bf0c              ITE      EQ
00000c  2101              MOVEQ    r1,#1
00000e  2100              MOVNE    r1,#0
000010  4618              MOV      r0,r3
000012  f85deb04          POP      {lr}
000016  f7ffbffe          B.W      GPIO_Set_DATA
;;;554    }
;;;555    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\gpio\\gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_79d52817____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_gpio_c_79d52817____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_79d52817____REVSH|
#line 402
|__asm___6_gpio_c_79d52817____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_79d52817____RRX|
#line 587
|__asm___6_gpio_c_79d52817____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
