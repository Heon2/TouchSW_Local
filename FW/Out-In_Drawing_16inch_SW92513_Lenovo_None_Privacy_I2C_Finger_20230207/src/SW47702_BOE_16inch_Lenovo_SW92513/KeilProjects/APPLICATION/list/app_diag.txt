; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\app_diag.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\app_diag.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\app_diag.crf ..\..\App\app_diag.c]
                          THUMB

                          AREA ||i.app_diag_Init||, CODE, READONLY, ALIGN=2

                  app_diag_Init PROC
;;;50     
;;;51     void app_diag_Init(void)
000000  b510              PUSH     {r4,lr}
;;;52     {
;;;53     	sptAlgorithmInfo = algorithm_GetInfo();
000002  f7fffffe          BL       algorithm_GetInfo
000006  4901              LDR      r1,|L1.12|
000008  6008              STR      r0,[r1,#0]  ; sptAlgorithmInfo
;;;54     }
00000a  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  |L1.12|
                          DCD      ||.data||

                          AREA ||i.app_diag_oper_handler||, CODE, READONLY, ALIGN=2

                  app_diag_oper_handler PROC
;;;64     __IO uint32_t ulFrame2Count;
;;;65     eTouchOperMainState_t app_diag_oper_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;66     {
000004  b091              SUB      sp,sp,#0x44
;;;67     	eTouchOperMainState_t main_state;
;;;68     	eDiagOperSubState_t sub_state; // NOTE : enumerated another type
;;;69     	bool_t bLoop = YES;
000006  2001              MOVS     r0,#1
000008  9008              STR      r0,[sp,#0x20]
00000a  f7fffffe          BL       algorithm_GetInfo
00000e  4afe              LDR      r2,|L2.1032|
;;;70     	int i;
;;;71     	uint8_t r, c;
;;;72     	uint16_t deltaData;
;;;73     	uint32_t ulTempData;
;;;74     	int16_t sDiff = 0;
;;;75     #if USED_PEN_MODE_OPERATION
;;;76     	TEST_LOCAL_STATE = 0;
;;;77     #endif /* USED_PEN_MODE_OPERATION */
;;;78     
;;;79     	app_diag_Init();
;;;80     	
;;;81     	sub_state = TOUCH_DIAG_OPER_ENTER;
;;;82     	sptAlgorithmInfo->bDiagMode = YES;
000010  2101              MOVS     r1,#1
000012  6010              STR      r0,[r2,#0]  ; sptAlgorithmInfo
000014  f5005080          ADD      r0,r0,#0x1000
000018  f88013a2          STRB     r1,[r0,#0x3a2]
00001c  48fb              LDR      r0,|L2.1036|
;;;83      
;;;84         while(bLoop)
00001e  9006              STR      r0,[sp,#0x18]
000020  e00a              B        |L2.56|
                  |L2.34|
;;;85         {
;;;86         	switch(sub_state)
000022  9807              LDR      r0,[sp,#0x1c]
000024  b140              CBZ      r0,|L2.56|
000026  2803              CMP      r0,#3
000028  d00e              BEQ      |L2.72|
00002a  2804              CMP      r0,#4
00002c  d006              BEQ      |L2.60|
                  |L2.46|
00002e  2805              CMP      r0,#5
000030  f0408341          BNE.W    |L2.1718|
000034  f000bb4c          B.W      |L2.1744|
                  |L2.56|
;;;87         	{
;;;88     			case TOUCH_DIAG_OPER_ENTER:
;;;89     			{
;;;90     				sub_state = TOUCH_DIAG_OPER_WAIT;
000038  2004              MOVS     r0,#4
;;;91     				break;
00003a  e002              B        |L2.66|
                  |L2.60|
;;;92     			}
;;;93     			case TOUCH_DIAG_OPER_WAIT:
;;;94     			{
;;;95     				protocol_swip_PendReadyStatus();
00003c  f7fffffe          BL       protocol_swip_PendReadyStatus
;;;96     				sub_state = TOUCH_DIAG_OPER_NORMAL;
000040  2003              MOVS     r0,#3
                  |L2.66|
000042  9007              STR      r0,[sp,#0x1c]         ;90
000044  f000bb37          B.W      |L2.1718|
                  |L2.72|
;;;97     				break;
;;;98     			}
;;;99     			case TOUCH_DIAG_OPER_NORMAL:
;;;100    			{
;;;101    				const tModuleCommonConf_t * lptModuleCommonConf = module_GetCommonConfig();
000048  f7fffffe          BL       module_GetCommonConfig
;;;102    				const tAlgorithmModeConf_t * lptAlgorithmConf = algorithm_GetModeConfig();
00004c  f7fffffe          BL       algorithm_GetModeConfig
000050  4607              MOV      r7,r0
;;;103    
;;;104    				switch(protocol_swip_GetTestType())
000052  f7fffffe          BL       protocol_swip_GetTestType
000056  2806              CMP      r0,#6
;;;105    				{
;;;106    					case CTT_ABS:
;;;107    					{
;;;108    						for(r = 0; r < ROW_MAX; r++)
;;;109    						{
;;;110    							for(c = 0; c < COL_MAX; c++)
;;;111    							{
;;;112    								HAL_WRITE_ABS_IMAGE(r, c, 0);
;;;113    								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;114    							}
;;;115    						}
;;;116    
;;;117    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;118    						{
;;;119    							module_wait_full_sample_done();
;;;120    						}
;;;121    
;;;122    						// ABS
;;;123    						ulFrame1Count = protocol_swip_GetABSAvrCount();
;;;124    						if(ulFrame1Count == 0)
;;;125    						{
;;;126    							ulFrame1Count = 20;     // Default value
;;;127    						}
;;;128    
;;;129    						for(i=0; i<ulFrame1Count; i++)
;;;130    						{
;;;131    							module_wait_full_sample_done();
;;;132    
;;;133    							alogorithm_linefilter_2();
;;;134    
;;;135    							for(r = ROW_MAX; r--; )
;;;136    							{
;;;137    								for(c = COL_MAX; c--; )
;;;138    								{
;;;139    									ulTempData = HAL_READ_COMMON_IMAGE(r, c);
;;;140    									HAL_WRITE_COMMON_IMAGE(r, c, (ulTempData + (uint32_t)HAL_READ_RAW_IMAGE(r,c)));
;;;141    								}
;;;142    							}
;;;143    						}
;;;144    
;;;145    						for(r = ROW_MAX; r--; )
;;;146    						{
;;;147    							for(c = COL_MAX; c--; )
;;;148    							{
;;;149    								HAL_WRITE_ABS_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c)/ulFrame1Count));
;;;150    							}
;;;151    						}
;;;152    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;153    						{
;;;154    							.bIsRotated = NO,
;;;155    							.ucCol_ = COL_MAX,
;;;156    							.ucRow_ = ROW_MAX,
;;;157    							.ucBufferCol_ = COL_MAX,
;;;158    							.ucKey_ = 0,
;;;159    							.tDataType = datatypeof(uint16_t)
;;;160    						};
;;;161    
;;;162    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_ABS_IMAGE_PTR());
;;;163    
;;;164    						break;
;;;165    					}
;;;166    #if USED_PEN_MODE_OPERATION
;;;167    					case CTT_DC_ABS:
;;;168    					{
;;;169    //						uint16_t read_raw_data;
;;;170    						uint32_t ulRowEnd = PEN_COORD_ROW_MAX;
;;;171    						uint8_t BaseOffset = lptAlgorithmConf->BaseLine.ucPP_MUX_Select * PEN_COORD_ROW_MAX;
;;;172    
;;;173    						for (r = 0; r < ROW_MAX; r++)
;;;174    						{
;;;175    							for (c = 0; c < COL_MAX; c++)
;;;176    							{
;;;177    								HAL_WRITE_DC_ABS_IMAGE(r, c, 0);
;;;178    								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;179    							}
;;;180    						}
;;;181    
;;;182    						eSENSING_CHANGE_MODE_t _mode = HAL_GetSensingChangeMode();
;;;183    						ePartialSensing_t RetVal = PARTIAL_PEN_BEACON;
;;;184    						sensingRowStart = 0;
;;;185    						HAL_SetSensingChangeMode(SM_CHAGNE_Full_To_Local_MODE);
;;;186    						while (YES)
;;;187    						{
;;;188    							RetVal = module_wait_local_sample_done();
;;;189    							if (RetVal == LOCAL_OP_LAST_LHB)
;;;190    								break;
;;;191    						}
;;;192    
;;;193    						module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;194    
;;;195    						// module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;196    						// while (YES)
;;;197    						// {
;;;198    						// 	RetVal = module_wait_local_sample_done();
;;;199    						// 	if(RetVal == LOCAL_OP_LAST_LHB)
;;;200    						// 		break;
;;;201    						// }
;;;202    						// ulFrame1Count = protocol_swip_GetDCABSCount();
;;;203    						// if(ulFrame1Count == 0)
;;;204    						// {
;;;205    							ulFrame1Count = 10;     // Default value
;;;206    						// }
;;;207    
;;;208    						for (i = 0; i < ulFrame1Count; i++)
;;;209    						{
;;;210    							while (YES)
;;;211    							{
;;;212    								RetVal = module_wait_local_sample_done();
;;;213    								switch (RetVal)
;;;214    								{
;;;215    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;216    									case PARTIAL_PEN_COORD_DATA1:
;;;217    									case PARTIAL_PEN_COORD_DATA2:
;;;218    									case PARTIAL_PEN_COORD_DATA3:
;;;219    									case PARTIAL_PEN_COORD_DATA4:
;;;220    									{
;;;221    										currentRowStart = sensingRowStart;
;;;222    										for (r = 0; r < ulRowEnd; r++)
;;;223    										{
;;;224    											for (c = 0; c < COL_MAX; c++)
;;;225    											{
;;;226    												ulTempData = HAL_READ_COMMON_IMAGE(r + currentRowStart, c);
;;;227    												HAL_WRITE_COMMON_IMAGE(r + currentRowStart, c, (ulTempData + (uint32_t)HAL_READ_LOCAL_DATA_RAW_IMAGE_3(r + BaseOffset, c)));
;;;228    											}
;;;229    										}
;;;230    										sensingRowStart += PEN_COORD_ROW_MAX;
;;;231    										break;
;;;232    									}
;;;233    #else /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;234    									case PARTIAL_PEN_COORD1:
;;;235    									case PARTIAL_PEN_COORD2:
;;;236    									case PARTIAL_PEN_COORD3:
;;;237    									case PARTIAL_PEN_COORD4:
;;;238    									{
;;;239    										currentRowStart = sensingRowStart;
;;;240    										for (r = 0; r < ulRowEnd; r++)
;;;241    										{
;;;242    											for (c = 0; c < COL_MAX; c++)
;;;243    											{
;;;244    												ulTempData = HAL_READ_COMMON_IMAGE(r + currentRowStart, c);
;;;245    												HAL_WRITE_COMMON_IMAGE(r + currentRowStart, c, (ulTempData + (uint32_t)HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c)));
;;;246    												// read_raw_data = HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c);
;;;247    												// HAL_WRITE_DC_ABS_IMAGE(r + currentRowStart, c, read_raw_data);
;;;248    											}
;;;249    										}
;;;250    										sensingRowStart += PEN_COORD_ROW_MAX;
;;;251    										break;
;;;252    									}
;;;253    #endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN) */
;;;254    									default:
;;;255    										break;
;;;256    								}
;;;257    								
;;;258    //								if (sensingRowStart > (ROW_MAX - PEN_COORD_ROW_MAX))
;;;259    //								{
;;;260    //									sensingRowStart = 0;
;;;261    //									break;
;;;262    //								}
;;;263    
;;;264    								if(sensingRowStart >= ROW_MAX)
;;;265    								{
;;;266    									ulRowEnd = PEN_COORD_ROW_MAX;
;;;267    									sensingRowStart = 0;
;;;268    									break;
;;;269    								}
;;;270    								else if((ROW_MAX - sensingRowStart) < PEN_COORD_ROW_MAX)
;;;271    								{
;;;272    									ulRowEnd = (ROW_MAX - sensingRowStart);
;;;273    								}
;;;274    							}
;;;275    						}
;;;276    
;;;277    						for (r = 0; r < ROW_MAX; r++)
;;;278    						{
;;;279    							for (c = 0; c < COL_MAX; c++)
;;;280    							{
;;;281    								HAL_WRITE_DC_ABS_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c)/ulFrame1Count));
;;;282    							}
;;;283    						}
;;;284    
;;;285    						HAL_SetSensingChangeMode(SM_CHAGNE_Local_To_Full_MODE);	// Return Change Finger Mode
;;;286    
;;;287    						// HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_GET_NORMAL);
;;;288    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;289    						{
;;;290    							.bIsRotated = NO,
;;;291    							.ucCol_ = COL_MAX,
;;;292    							.ucRow_ = ROW_MAX,
;;;293    							.ucBufferCol_ = COL_MAX,
;;;294    							.ucKey_ = 0,
;;;295    							.tDataType = datatypeof(uint16_t)
;;;296    						};
;;;297    
;;;298    						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_DC_ABS_IMAGE_PTR());
;;;299    						break;
;;;300    					}
;;;301    #endif /* USED_PEN_MODE_OPERATION */
;;;302    					case CTT_OPEN:
;;;303    					{
;;;304    						for(r=0; r<ROW_MAX; r++)
;;;305    						{
;;;306    							for(c=0; c<COL_MAX; c++)
;;;307    							{
;;;308    								HAL_WRITE_OPEN_1_IMAGE(r, c, 0);
;;;309    							}
;;;310    						}
;;;311    
;;;312    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_OPEN_TEST_STEP1));
;;;313    
;;;314    						for(i=0; i<lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;315    						{
;;;316    							module_wait_full_sample_done();
;;;317    						}
;;;318    
;;;319    						module_wait_full_sample_done();
;;;320    
;;;321    						for(r=ROW_MAX; r--; )
;;;322    						{
;;;323    							for(c=COL_MAX; c--; )
;;;324    							{
;;;325    								HAL_WRITE_OPEN_1_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;326    							}
;;;327    						}
;;;328    
;;;329    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_OPEN_TEST_RECOVERY);
;;;330    
;;;331    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;332    						{
;;;333    							.bIsRotated = NO,
;;;334    							.ucCol_ = COL_MAX,
;;;335    							.ucRow_ = ROW_MAX,
;;;336    							.ucBufferCol_ = COL_MAX,
;;;337    							.ucKey_ = 0,
;;;338    							.tDataType = datatypeof(uint16_t)
;;;339    						};
;;;340    
;;;341    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_OPEN_1_IMAGE_PTR());
;;;342    
;;;343    						break;
;;;344    					}
;;;345    					case CTT_SHORT_1:
;;;346    					{
;;;347    						uint8_t j = 0;
;;;348    #if IS_ROIC_DEF_SW97500
;;;349    						int16_t sDiff = 0;
;;;350    
;;;351    						for (r = 0; r < ROW_MAX; r++)
;;;352    						{
;;;353    							for (c = 0; c < COL_MAX; c++)
;;;354    							{
;;;355    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;356    							}
;;;357    						}
;;;358    
;;;359    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;360    						{
;;;361    							module_wait_full_sample_done();
;;;362    						}
;;;363    
;;;364    						module_wait_full_sample_done();
;;;365    
;;;366    //						// STEP 1 ~ 5
;;;367    //						for (j = 0; j < 5; j++)
;;;368    //						{
;;;369    //							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP1 + j));
;;;370    //
;;;371    //							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;372    //							{
;;;373    //								module_wait_full_sample_done();
;;;374    //							}
;;;375    //
;;;376    //							module_wait_full_sample_done();
;;;377    //
;;;378    //							for (r = ROW_MAX; r--;)
;;;379    //							{
;;;380    //								if (r % 5 == j)
;;;381    //								{
;;;382    //									for (c = COL_MAX; c--;)
;;;383    //									{
;;;384    //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;385    //										HAL_WRITE_BASELINE_2_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;386    //#endif
;;;387    //									}
;;;388    //								}
;;;389    //							}
;;;390    //						}
;;;391    
;;;392    						// STEP 6 ~ 10
;;;393    						for (j = 0; j < 5; j++)
;;;394    						{
;;;395    							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP6 + j));
;;;396    
;;;397    							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;398    							{
;;;399    								module_wait_full_sample_done();
;;;400    							}
;;;401    
;;;402    							module_wait_full_sample_done();
;;;403    
;;;404    							for (r = ROW_MAX; r--;)
;;;405    							{
;;;406    								if (r % 5 == j)
;;;407    								{
;;;408    									for (c = COL_MAX; c--;)
;;;409    									{
;;;410    										sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;411    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)(4095 - sDiff));
;;;412    									}
;;;413    								}
;;;414    							}
;;;415    						}
;;;416    #elif IS_ROIC_DEF_SW92513
;;;417    						uint32_t ulRealRowIdx;
;;;418    						for (r = 0; r < ROW_MAX; r++)
000058  bf04              ITT      EQ
00005a  2400              MOVEQ    r4,#0
00005c  4eec              LDREQ    r6,|L2.1040|
00005e  f00080fb          BEQ.W    |L2.600|
000062  dc09              BGT      |L2.120|
000064  2801              CMP      r0,#1                 ;104
000066  d017              BEQ      |L2.152|
000068  2802              CMP      r0,#2                 ;104
00006a  f0008215          BEQ.W    |L2.1176|
00006e  2805              CMP      r0,#5                 ;104
000070  f0408321          BNE.W    |L2.1718|
000074  f000bafe          B.W      |L2.1652|
                  |L2.120|
000078  2807              CMP      r0,#7                 ;104
;;;419    						{
;;;420    							for (c = 0; c < COL_MAX; c++)
;;;421    							{
;;;422    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;423    							}
;;;424    						}
;;;425    
;;;426    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;427    						{
;;;428    							module_wait_full_sample_done();
;;;429    						}
;;;430    
;;;431    						module_wait_full_sample_done();
;;;432    
;;;433    						// Number of STEP is Mux Num.
;;;434    						for (j = 0; j < FINGER_MUX_NUM; j++)
;;;435    						{
;;;436    							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP1 + j));
;;;437    
;;;438    							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;439    							{
;;;440    								module_wait_full_sample_done();
;;;441    							}
;;;442    
;;;443    							module_wait_full_sample_done();
;;;444    
;;;445    							ulRealRowIdx = j * LOCAL_FINGER_1MUX_ROW_NUM;
;;;446    
;;;447    							for (r = LOCAL_FINGER_1MUX_ROW_NUM; r--;)
;;;448    							{
;;;449    								for (c = COL_MAX; c--;)
;;;450    								{
;;;451    									if(ulRealRowIdx < ROW_MAX)
;;;452    									{
;;;453    										sDiff = (int16_t)HAL_READ_RAW_IMAGE((ulRealRowIdx + r), c);
;;;454    										sDiff = 4095 - sDiff;
;;;455    										if(sDiff < 0)
;;;456    											sDiff = 0;
;;;457    										HAL_WRITE_SHORT_IMAGE((ulRealRowIdx + r), c, sDiff);
;;;458    									}
;;;459    								}
;;;460    							}
;;;461    						}
;;;462    #else /* IS_ROIC_DEF_SW97500 */
;;;463    						for (r = 0; r < ROW_MAX; r++)
;;;464    						{
;;;465    							for (c = 0; c < COL_MAX; c++)
;;;466    							{
;;;467    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;468    							}
;;;469    						}
;;;470    
;;;471    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;472    						{
;;;473    							module_wait_full_sample_done();
;;;474    						}
;;;475    
;;;476    						module_wait_full_sample_done();
;;;477    
;;;478    						// STEP 1 ~ 5
;;;479    						for (j = 0; j < 5; j++)
;;;480    						{
;;;481    							HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT1_TEST_STEP1 + j));
;;;482    
;;;483    							for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;484    							{
;;;485    								module_wait_full_sample_done();
;;;486    							}
;;;487    
;;;488    							module_wait_full_sample_done();
;;;489    
;;;490    							for (r = ROW_MAX; r--;)
;;;491    							{
;;;492    								if (r % 5 == j)
;;;493    								{
;;;494    									for (c = COL_MAX; c--;)
;;;495    									{
;;;496    										HAL_WRITE_SHORT_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;497    									}
;;;498    								}
;;;499    							}
;;;500    						}
;;;501    #endif /* IS_ROIC_DEF_SW97500 */
;;;502    
;;;503    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT1_TEST_RECOVERY);
;;;504    
;;;505    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;506    						{
;;;507    							.bIsRotated = NO,
;;;508    							.ucCol_ = COL_MAX,
;;;509    							.ucRow_ = ROW_MAX,
;;;510    							.ucBufferCol_ = COL_MAX,
;;;511    							.ucKey_ = 0,
;;;512    							.tDataType = datatypeof(uint16_t)
;;;513    						};
;;;514    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_SHORT_IMAGE_PTR());
;;;515    						break;
;;;516    					}
;;;517    					case CTT_SHORT_2:
;;;518    					{
;;;519    						for(r=0; r<ROW_MAX; r++)
00007a  bf04              ITT      EQ
00007c  2400              MOVEQ    r4,#0
00007e  4ee4              LDREQ    r6,|L2.1040|
000080  f0008154          BEQ.W    |L2.812|
000084  2808              CMP      r0,#8                 ;104
000086  bf04              ITT      EQ                    ;304
000088  2500              MOVEQ    r5,#0                 ;304
00008a  4ce1              LDREQ    r4,|L2.1040|
00008c  d07e              BEQ      |L2.396|
00008e  28e0              CMP      r0,#0xe0              ;104
000090  f0408311          BNE.W    |L2.1718|
000094  f000bafa          B.W      |L2.1676|
                  |L2.152|
000098  4cdd              LDR      r4,|L2.1040|
00009a  2500              MOVS     r5,#0                 ;108
00009c  f24b78c0          MOV      r8,#0xb7c0            ;110
                  |L2.160|
0000a0  ebc500c5          RSB      r0,r5,r5,LSL #3       ;110
0000a4  eb000640          ADD      r6,r0,r0,LSL #1       ;110
0000a8  eb0400c6          ADD      r0,r4,r6,LSL #3       ;110
0000ac  21a8              MOVS     r1,#0xa8              ;110
0000ae  f5005067          ADD      r0,r0,#0x39c0         ;110
0000b2  f7fffffe          BL       __aeabi_memclr4
0000b6  eb041006          ADD      r0,r4,r6,LSL #4       ;110
0000ba  4440              ADD      r0,r0,r8              ;110
0000bc  f44f71a8          MOV      r1,#0x150             ;110
0000c0  f7fffffe          BL       __aeabi_memclr4
0000c4  1c68              ADDS     r0,r5,#1              ;110
0000c6  b2c5              UXTB     r5,r0                 ;110
0000c8  2d30              CMP      r5,#0x30              ;110
0000ca  d3e9              BCC      |L2.160|
0000cc  7878              LDRB     r0,[r7,#1]            ;117
0000ce  2500              MOVS     r5,#0                 ;117
0000d0  2800              CMP      r0,#0                 ;117
0000d2  dd05              BLE      |L2.224|
                  |L2.212|
0000d4  f7fffffe          BL       module_wait_full_sample_done
0000d8  7878              LDRB     r0,[r7,#1]            ;119
0000da  1c6d              ADDS     r5,r5,#1              ;119
0000dc  42a8              CMP      r0,r5                 ;119
0000de  dcf9              BGT      |L2.212|
                  |L2.224|
0000e0  f7fffffe          BL       protocol_swip_GetABSAvrCount
0000e4  4ec8              LDR      r6,|L2.1032|
0000e6  60f0              STR      r0,[r6,#0xc]          ;123  ; ulFrame1Count
0000e8  68f0              LDR      r0,[r6,#0xc]          ;124  ; ulFrame1Count
0000ea  2800              CMP      r0,#0                 ;124
0000ec  bf04              ITT      EQ                    ;126
0000ee  2014              MOVEQ    r0,#0x14              ;126
0000f0  60f0              STREQ    r0,[r6,#0xc]          ;126  ; ulFrame1Count
0000f2  2500              MOVS     r5,#0                 ;129
0000f4  68f0              LDR      r0,[r6,#0xc]          ;129  ; ulFrame1Count
0000f6  4285              CMP      r5,r0                 ;129
0000f8  bf38              IT       CC                    ;137
0000fa  f64b1710          MOVCC    r7,#0xb910            ;137
0000fe  d228              BCS      |L2.338|
                  |L2.256|
000100  f7fffffe          BL       module_wait_full_sample_done
000104  f7fffffe          BL       alogorithm_linefilter_2
000108  f05f032f          MOVS.W   r3,#0x2f              ;135
                  |L2.268|
00010c  ebc300c3          RSB      r0,r3,r3,LSL #3       ;137
000110  eb000140          ADD      r1,r0,r0,LSL #1       ;137
000114  eb041001          ADD      r0,r4,r1,LSL #4       ;137
000118  eb0401c1          ADD      r1,r4,r1,LSL #3       ;137
00011c  222a              MOVS     r2,#0x2a              ;137
00011e  4438              ADD      r0,r0,r7              ;137
000120  f11101a8          ADDS.W   r1,r1,#0xa8           ;137
                  |L2.292|
000124  f850cd04          LDR      r12,[r0,#-4]!         ;140
000128  f8318c02          LDRH     r8,[r1,#-2]           ;140
00012c  1e52              SUBS     r2,r2,#1              ;140
00012e  44c4              ADD      r12,r12,r8            ;140
000130  f840c904          STR      r12,[r0],#-4          ;140
000134  f8318d04          LDRH     r8,[r1,#-4]!          ;140
000138  f8d0c000          LDR      r12,[r0,#0]           ;140
00013c  44c4              ADD      r12,r12,r8            ;140
00013e  f8c0c000          STR      r12,[r0,#0]           ;140
000142  d1ef              BNE      |L2.292|
000144  1e59              SUBS     r1,r3,#1              ;137
000146  b2cb              UXTB     r3,r1                 ;137
000148  d2e0              BCS      |L2.268|
00014a  68f0              LDR      r0,[r6,#0xc]          ;137  ; ulFrame1Count
00014c  1c6d              ADDS     r5,r5,#1              ;137
00014e  4285              CMP      r5,r0                 ;137
000150  d3d6              BCC      |L2.256|
                  |L2.338|
000152  222f              MOVS     r2,#0x2f              ;145
                  |L2.340|
000154  ebc201c2          RSB      r1,r2,r2,LSL #3       ;110
000158  eb010141          ADD      r1,r1,r1,LSL #1       ;110
00015c  2054              MOVS     r0,#0x54              ;147
00015e  eb040cc1          ADD      r12,r4,r1,LSL #3      ;110
000162  2301              MOVS     r3,#1                 ;147
000164  eb041101          ADD      r1,r4,r1,LSL #4       ;110
                  |L2.360|
000168  1e40              SUBS     r0,r0,#1              ;110
00016a  b2c0              UXTB     r0,r0                 ;147
00016c  eb010580          ADD      r5,r1,r0,LSL #2       ;149
000170  f5054530          ADD      r5,r5,#0xb000         ;149
000174  68f7              LDR      r7,[r6,#0xc]          ;149  ; ulFrame1Count
000176  f8d557c0          LDR      r5,[r5,#0x7c0]        ;149
00017a  fbb5f7f7          UDIV     r7,r5,r7              ;149
00017e  eb0c0540          ADD      r5,r12,r0,LSL #1      ;149
000182  f5055540          ADD      r5,r5,#0x3000         ;149
000186  f8a579c0          STRH     r7,[r5,#0x9c0]        ;149
00018a  e000              B        |L2.398|
                  |L2.396|
00018c  e01d              B        |L2.458|
                  |L2.398|
00018e  1e40              SUBS     r0,r0,#1              ;149
000190  b2c0              UXTB     r0,r0                 ;147
000192  eb010580          ADD      r5,r1,r0,LSL #2       ;149
000196  f5054530          ADD      r5,r5,#0xb000         ;149
00019a  68f7              LDR      r7,[r6,#0xc]          ;149  ; ulFrame1Count
00019c  f8d557c0          LDR      r5,[r5,#0x7c0]        ;149
0001a0  1c9b              ADDS     r3,r3,#2              ;149
0001a2  fbb5f5f7          UDIV     r5,r5,r7              ;149
0001a6  eb0c0740          ADD      r7,r12,r0,LSL #1      ;149
0001aa  f5075740          ADD      r7,r7,#0x3000         ;149
0001ae  2b55              CMP      r3,#0x55              ;149
0001b0  f8a759c0          STRH     r5,[r7,#0x9c0]        ;149
0001b4  dbd8              BLT      |L2.360|
0001b6  1e51              SUBS     r1,r2,#1              ;147
0001b8  b2ca              UXTB     r2,r1                 ;147
0001ba  d2cb              BCS      |L2.340|
0001bc  4895              LDR      r0,|L2.1044|
0001be  e9d01000          LDRD     r1,r0,[r0,#0]         ;152
0001c2  e9cd100a          STRD     r1,r0,[sp,#0x28]      ;152
0001c6  a80a              ADD      r0,sp,#0x28           ;152
0001c8  e042              B        |L2.592|
                  |L2.458|
0001ca  ebc500c5          RSB      r0,r5,r5,LSL #3       ;306
0001ce  eb000040          ADD      r0,r0,r0,LSL #1       ;306
0001d2  eb0400c0          ADD      r0,r4,r0,LSL #3       ;306
0001d6  21a8              MOVS     r1,#0xa8              ;306
0001d8  f5005067          ADD      r0,r0,#0x39c0         ;306
0001dc  f7fffffe          BL       __aeabi_memclr4
0001e0  1c68              ADDS     r0,r5,#1              ;306
0001e2  b2c5              UXTB     r5,r0                 ;306
0001e4  2d30              CMP      r5,#0x30              ;306
0001e6  d3f0              BCC      |L2.458|
0001e8  2000              MOVS     r0,#0                 ;312
0001ea  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
0001ee  7878              LDRB     r0,[r7,#1]            ;314
0001f0  2500              MOVS     r5,#0                 ;314
0001f2  2800              CMP      r0,#0                 ;314
0001f4  dd06              BLE      |L2.516|
0001f6  bf00              NOP                            ;316
                  |L2.504|
0001f8  f7fffffe          BL       module_wait_full_sample_done
0001fc  7878              LDRB     r0,[r7,#1]            ;316
0001fe  1c6d              ADDS     r5,r5,#1              ;316
000200  42a8              CMP      r0,r5                 ;316
000202  dcf9              BGT      |L2.504|
                  |L2.516|
000204  f7fffffe          BL       module_wait_full_sample_done
000208  232f              MOVS     r3,#0x2f              ;321
00020a  f6432c68          MOV      r12,#0x3a68           ;323
00020e  bf00              NOP                            ;323
                  |L2.528|
000210  ebc300c3          RSB      r0,r3,r3,LSL #3       ;323
000214  eb000040          ADD      r0,r0,r0,LSL #1       ;323
000218  eb0400c0          ADD      r0,r4,r0,LSL #3       ;323
00021c  f10001a8          ADD      r1,r0,#0xa8           ;323
000220  4460              ADD      r0,r0,r12             ;323
000222  222a              MOVS     r2,#0x2a              ;323
                  |L2.548|
000224  f8315c02          LDRH     r5,[r1,#-2]           ;325
000228  f8205c02          STRH     r5,[r0,#-2]           ;325
00022c  f8315d04          LDRH     r5,[r1,#-4]!          ;325
000230  f8205d04          STRH     r5,[r0,#-4]!          ;325
000234  1e52              SUBS     r2,r2,#1              ;325
000236  d1f5              BNE      |L2.548|
000238  1e59              SUBS     r1,r3,#1              ;323
00023a  b2cb              UXTB     r3,r1                 ;323
00023c  d2e8              BCS      |L2.528|
00023e  2009              MOVS     r0,#9                 ;329
000240  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
000244  4873              LDR      r0,|L2.1044|
000246  e9d01002          LDRD     r1,r0,[r0,#8]         ;331
00024a  e9cd1002          STRD     r1,r0,[sp,#8]         ;331
00024e  a802              ADD      r0,sp,#8              ;331
                  |L2.592|
000250  f5045167          ADD      r1,r4,#0x39c0         ;341
000254  f000ba0b          B.W      |L2.1646|
                  |L2.600|
000258  ebc400c4          RSB      r0,r4,r4,LSL #3       ;420
00025c  eb000040          ADD      r0,r0,r0,LSL #1       ;420
000260  eb0600c0          ADD      r0,r6,r0,LSL #3       ;420
000264  21a8              MOVS     r1,#0xa8              ;420
000266  f5005067          ADD      r0,r0,#0x39c0         ;420
00026a  f7fffffe          BL       __aeabi_memclr4
00026e  1c60              ADDS     r0,r4,#1              ;420
000270  b2c4              UXTB     r4,r0                 ;420
000272  2c30              CMP      r4,#0x30              ;420
000274  d3f0              BCC      |L2.600|
000276  7878              LDRB     r0,[r7,#1]            ;426
000278  2400              MOVS     r4,#0                 ;426
00027a  2800              CMP      r0,#0                 ;426
00027c  dd06              BLE      |L2.652|
00027e  bf00              NOP                            ;428
                  |L2.640|
000280  f7fffffe          BL       module_wait_full_sample_done
000284  7878              LDRB     r0,[r7,#1]            ;428
000286  1c64              ADDS     r4,r4,#1              ;428
000288  42a0              CMP      r0,r4                 ;428
00028a  dcf9              BGT      |L2.640|
                  |L2.652|
00028c  f7fffffe          BL       module_wait_full_sample_done
000290  2400              MOVS     r4,#0                 ;434
000292  f6432566          MOV      r5,#0x3a66            ;449
000296  f64078ff          MOV      r8,#0xfff             ;454
00029a  bf00              NOP                            ;436
                  |L2.668|
00029c  f104000a          ADD      r0,r4,#0xa            ;436
0002a0  b2c0              UXTB     r0,r0                 ;436
0002a2  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
0002a6  7878              LDRB     r0,[r7,#1]            ;438
0002a8  f04f0900          MOV      r9,#0                 ;438
0002ac  2800              CMP      r0,#0                 ;438
0002ae  dd06              BLE      |L2.702|
                  |L2.688|
0002b0  f7fffffe          BL       module_wait_full_sample_done
0002b4  7878              LDRB     r0,[r7,#1]            ;440
0002b6  f1090901          ADD      r9,r9,#1              ;440
0002ba  4548              CMP      r0,r9                 ;440
0002bc  dcf8              BGT      |L2.688|
                  |L2.702|
0002be  f7fffffe          BL       module_wait_full_sample_done
0002c2  eb040984          ADD      r9,r4,r4,LSL #2       ;445
0002c6  f04f0c04          MOV      r12,#4                ;447
0002ca  bf00              NOP                            ;449
                  |L2.716|
0002cc  f1b90f30          CMP      r9,#0x30              ;449
0002d0  d218              BCS      |L2.772|
0002d2  eb09000c          ADD      r0,r9,r12             ;449
0002d6  ebc000c0          RSB      r0,r0,r0,LSL #3       ;449
0002da  eb000040          ADD      r0,r0,r0,LSL #1       ;449
0002de  eb0600c0          ADD      r0,r6,r0,LSL #3       ;449
0002e2  1941              ADDS     r1,r0,r5              ;449
0002e4  f10002a6          ADD      r2,r0,#0xa6           ;449
0002e8  f05f0354          MOVS.W   r3,#0x54              ;449
                  |L2.748|
0002ec  f8320902          LDRH     r0,[r2],#-2           ;453
0002f0  eba80000          SUB      r0,r8,r0              ;454
0002f4  b200              SXTH     r0,r0                 ;454
0002f6  2800              CMP      r0,#0                 ;455
0002f8  bfb8              IT       LT                    ;456
0002fa  2000              MOVLT    r0,#0                 ;456
0002fc  f8210902          STRH     r0,[r1],#-2           ;457
000300  1e5b              SUBS     r3,r3,#1              ;457
000302  d1f3              BNE      |L2.748|
                  |L2.772|
000304  f1bc0101          SUBS     r1,r12,#1             ;449
000308  f0010cff          AND      r12,r1,#0xff          ;449
00030c  d2de              BCS      |L2.716|
00030e  1c60              ADDS     r0,r4,#1              ;449
000310  b2c4              UXTB     r4,r0                 ;449
000312  2c0a              CMP      r4,#0xa               ;449
000314  d3c2              BCC      |L2.668|
000316  2016              MOVS     r0,#0x16              ;503
000318  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
00031c  483d              LDR      r0,|L2.1044|
00031e  e9d01004          LDRD     r1,r0,[r0,#0x10]      ;505
000322  e9cd1002          STRD     r1,r0,[sp,#8]         ;505
000326  a802              ADD      r0,sp,#8              ;505
000328  e0b3              B        |L2.1170|
;;;520    						{
;;;521    							for(c=0; c<COL_MAX; c++)
00032a  bf00              NOP      
                  |L2.812|
00032c  ebc400c4          RSB      r0,r4,r4,LSL #3
000330  eb000040          ADD      r0,r0,r0,LSL #1
000334  eb0600c0          ADD      r0,r6,r0,LSL #3
000338  21a8              MOVS     r1,#0xa8
00033a  f5005067          ADD      r0,r0,#0x39c0
00033e  f7fffffe          BL       __aeabi_memclr4
000342  1c60              ADDS     r0,r4,#1
000344  b2c4              UXTB     r4,r0
000346  2c30              CMP      r4,#0x30
000348  d3f0              BCC      |L2.812|
;;;522    							{
;;;523    								HAL_WRITE_SHORT_IMAGE(r, c, 0);
;;;524    							}
;;;525    						}
;;;526    
;;;527    						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
00034a  7878              LDRB     r0,[r7,#1]
00034c  2400              MOVS     r4,#0
00034e  2800              CMP      r0,#0
000350  dd06              BLE      |L2.864|
;;;528    						{
;;;529    							module_wait_full_sample_done();
000352  bf00              NOP      
                  |L2.852|
000354  f7fffffe          BL       module_wait_full_sample_done
000358  7878              LDRB     r0,[r7,#1]
00035a  1c64              ADDS     r4,r4,#1
00035c  42a0              CMP      r0,r4
00035e  dcf9              BGT      |L2.852|
                  |L2.864|
;;;530    						}
;;;531    						module_wait_full_sample_done();
000360  f7fffffe          BL       module_wait_full_sample_done
;;;532    
;;;533    #if (IS_ROIC_DEF_SW97500 || IS_ROIC_DEF_SW92509 || IS_ROIC_DEF_SW92510 || IS_ROIC_DEF_SW92508 || IS_ROIC_DEF_SW92512 || IS_ROIC_DEF_SW92511)
;;;534    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP1);
;;;535    
;;;536    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;537    						{
;;;538    							module_wait_full_sample_done();
;;;539    						}
;;;540    						module_wait_full_sample_done();
;;;541    
;;;542    						for(r = ROW_MAX; r--;)
;;;543    						{
;;;544    							for(c = COL_MAX; c--;)
;;;545    							{
;;;546    								HAL_WRITE_SHORT_2_IMAGE(r, c, HAL_READ_RAW_IMAGE(r, c));
;;;547    							}
;;;548    						}
;;;549    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP2);
;;;550    
;;;551    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;552    						{
;;;553    							module_wait_full_sample_done();
;;;554    						}
;;;555    						module_wait_full_sample_done();
;;;556    
;;;557    						for(r = ROW_MAX; r--;)
;;;558    						{
;;;559    							for(c = COL_MAX; c--;)
;;;560    							{
;;;561    								if(c % 2 == 0)
;;;562    								{
;;;563    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;564    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;565    								}
;;;566    							}
;;;567    						}
;;;568    
;;;569    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP3);
;;;570    
;;;571    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;572    						{
;;;573    							module_wait_full_sample_done();
;;;574    						}
;;;575    						module_wait_full_sample_done();
;;;576    
;;;577    						for(r = ROW_MAX; r--;)
;;;578    						{
;;;579    							for(c = COL_MAX; c--;)
;;;580    							{
;;;581    								if(c % 2 == 1)
;;;582    								{
;;;583    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;584    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;585    								}
;;;586    							}
;;;587    						}
;;;588    
;;;589    						for(r = ROW_MAX; r--;)
;;;590    						{
;;;591    							for(c = COL_MAX; c--;)
;;;592    							{
;;;593    								sDiff = (int16_t)HAL_READ_SHORT_2_IMAGE(r, c) - (int16_t)HAL_READ_SHORT_IMAGE(r, c);
;;;594    								if(sDiff < 0)
;;;595    								{
;;;596    									sDiff = 0;
;;;597    								}
;;;598    								HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)(4095 - sDiff));
;;;599    							}
;;;600    						}
;;;601    #elif IS_ROIC_DEF_SW92513
;;;602    
;;;603    	#if 1
;;;604    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP1);
000364  2017              MOVS     r0,#0x17
000366  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;605    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
00036a  7878              LDRB     r0,[r7,#1]
00036c  2400              MOVS     r4,#0
00036e  2800              CMP      r0,#0
000370  dd06              BLE      |L2.896|
;;;606    						{
;;;607    							module_wait_full_sample_done();
000372  bf00              NOP      
                  |L2.884|
000374  f7fffffe          BL       module_wait_full_sample_done
000378  7878              LDRB     r0,[r7,#1]
00037a  1c64              ADDS     r4,r4,#1
00037c  42a0              CMP      r0,r4
00037e  dcf9              BGT      |L2.884|
                  |L2.896|
;;;608    						}
;;;609    						module_wait_full_sample_done();
000380  f7fffffe          BL       module_wait_full_sample_done
;;;610    
;;;611    	#define CH_PER_MUX		(5)
;;;612    
;;;613    						for(r = ROW_MAX; r--;)
;;;614    						{
;;;615    							for(c = COL_MAX; c--;)
;;;616    							{
;;;617    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;618    								sDiff = 4095 - sDiff;
;;;619    								if(sDiff < 0)
;;;620    									sDiff = 0;
;;;621    		#if 0
;;;622    								HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;623    		#else
;;;624    								if (r % 10 < CH_PER_MUX)
000384  4d24              LDR      r5,|L2.1048|
000386  212f              MOVS     r1,#0x2f              ;613
000388  f64074ff          MOV      r4,#0xfff             ;454
                  |L2.908|
00038c  fba53201          UMULL    r3,r2,r5,r1
000390  2053              MOVS     r0,#0x53              ;615
000392  08d2              LSRS     r2,r2,#3
000394  4252              RSBS     r2,r2,#0
000396  eb020282          ADD      r2,r2,r2,LSL #2
00039a  eb010842          ADD      r8,r1,r2,LSL #1
00039e  ebc102c1          RSB      r2,r1,r1,LSL #3       ;110
0003a2  eb020242          ADD      r2,r2,r2,LSL #1       ;110
;;;625    								{
;;;626    									if (r%2 == c%2)
0003a6  f0010c01          AND      r12,r1,#1
0003aa  eb0603c2          ADD      r3,r6,r2,LSL #3       ;110
0003ae  bf00              NOP                            ;617
                  |L2.944|
0003b0  f8332010          LDRH     r2,[r3,r0,LSL #1]     ;617
0003b4  1aa2              SUBS     r2,r4,r2              ;618
0003b6  b212              SXTH     r2,r2                 ;618
0003b8  2a00              CMP      r2,#0                 ;619
0003ba  bfb8              IT       LT                    ;620
0003bc  2200              MOVLT    r2,#0                 ;620
0003be  f1b80f05          CMP      r8,#5                 ;624
;;;627    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;628    								}
;;;629    								else
;;;630    								{
;;;631    									if (r%2 != c%2)
0003c2  f0000901          AND      r9,r0,#1
0003c6  da02              BGE      |L2.974|
0003c8  45cc              CMP      r12,r9                ;626
0003ca  d108              BNE      |L2.990|
0003cc  e001              B        |L2.978|
                  |L2.974|
0003ce  45cc              CMP      r12,r9
0003d0  d005              BEQ      |L2.990|
                  |L2.978|
;;;632    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
0003d2  eb030940          ADD      r9,r3,r0,LSL #1
0003d6  f5095940          ADD      r9,r9,#0x3000
0003da  f8a929c0          STRH     r2,[r9,#0x9c0]
                  |L2.990|
0003de  1e40              SUBS     r0,r0,#1
0003e0  b2c0              UXTB     r0,r0
0003e2  d2e5              BCS      |L2.944|
0003e4  1e49              SUBS     r1,r1,#1
0003e6  b2c9              UXTB     r1,r1
0003e8  d2d0              BCS      |L2.908|
;;;633    								}
;;;634    		#endif
;;;635    							}
;;;636    						}
;;;637    	#endif
;;;638    
;;;639    	#if 1
;;;640    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_STEP2);
0003ea  2018              MOVS     r0,#0x18
0003ec  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;641    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0003f0  7878              LDRB     r0,[r7,#1]
0003f2  f04f0800          MOV      r8,#0
0003f6  2800              CMP      r0,#0
0003f8  dd12              BLE      |L2.1056|
;;;642    						{
;;;643    							module_wait_full_sample_done();
0003fa  bf00              NOP      
                  |L2.1020|
0003fc  f7fffffe          BL       module_wait_full_sample_done
000400  7878              LDRB     r0,[r7,#1]
000402  f1080801          ADD      r8,r8,#1
000406  e009              B        |L2.1052|
                  |L2.1032|
                          DCD      ||.data||
                  |L2.1036|
                          DCD      FullSharedBuff+0xf6c0
                  |L2.1040|
                          DCD      FullSharedBuff
                  |L2.1044|
                          DCD      ||.constdata||
                  |L2.1048|
                          DCD      0xcccccccd
                  |L2.1052|
00041c  4540              CMP      r0,r8
00041e  dced              BGT      |L2.1020|
                  |L2.1056|
;;;644    						}
;;;645    						module_wait_full_sample_done();
000420  f7fffffe          BL       module_wait_full_sample_done
;;;646    
;;;647    						for(r = ROW_MAX; r--;)
000424  212f              MOVS     r1,#0x2f
                  |L2.1062|
000426  fba53201          UMULL    r3,r2,r5,r1           ;624
;;;648    						{
;;;649    							for(c = COL_MAX; c--;)
00042a  2053              MOVS     r0,#0x53
00042c  08d2              LSRS     r2,r2,#3              ;624
00042e  4252              RSBS     r2,r2,#0              ;624
000430  eb020282          ADD      r2,r2,r2,LSL #2       ;624
000434  eb010742          ADD      r7,r1,r2,LSL #1       ;624
000438  ebc102c1          RSB      r2,r1,r1,LSL #3       ;110
00043c  eb020242          ADD      r2,r2,r2,LSL #1       ;110
000440  f0010c01          AND      r12,r1,#1             ;626
000444  eb0603c2          ADD      r3,r6,r2,LSL #3       ;110
                  |L2.1096|
;;;650    							{
;;;651    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
000448  f8332010          LDRH     r2,[r3,r0,LSL #1]
;;;652    								sDiff = 4095 - sDiff;
00044c  1aa2              SUBS     r2,r4,r2
00044e  b212              SXTH     r2,r2
;;;653    								if(sDiff < 0)
000450  2a00              CMP      r2,#0
;;;654    									sDiff = 0;
000452  bfb8              IT       LT
000454  2200              MOVLT    r2,#0
;;;655    
;;;656    								if (r % 10 < CH_PER_MUX)
000456  2f05              CMP      r7,#5
;;;657    								{
;;;658    									if (r%2 != c%2)
;;;659    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;660    								}
;;;661    								else
;;;662    								{
;;;663    									if (r%2 == c%2)
000458  f0000801          AND      r8,r0,#1
00045c  da02              BGE      |L2.1124|
00045e  45c4              CMP      r12,r8                ;658
000460  d008              BEQ      |L2.1140|
000462  e001              B        |L2.1128|
                  |L2.1124|
000464  45c4              CMP      r12,r8
000466  d105              BNE      |L2.1140|
                  |L2.1128|
;;;664    										HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
000468  eb030840          ADD      r8,r3,r0,LSL #1
00046c  f5085840          ADD      r8,r8,#0x3000
000470  f8a829c0          STRH     r2,[r8,#0x9c0]
                  |L2.1140|
000474  1e40              SUBS     r0,r0,#1
000476  b2c0              UXTB     r0,r0
000478  d2e6              BCS      |L2.1096|
00047a  1e49              SUBS     r1,r1,#1
00047c  b2c9              UXTB     r1,r1
00047e  d2d2              BCS      |L2.1062|
;;;665    								}
;;;666    							}
;;;667    						}
;;;668    	#endif
;;;669    #else /* IS_ROIC_DEF_SW97500 */
;;;670    	#if 1
;;;671    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP1));
;;;672    
;;;673    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;674    						{
;;;675    							module_wait_full_sample_done();
;;;676    						}
;;;677    						module_wait_full_sample_done();
;;;678    
;;;679    						for(r=ROW_MAX; r--; )
;;;680    						{
;;;681    							for(c=COL_MAX; c--; )
;;;682    							{
;;;683    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;684    
;;;685    								// SRIC 1~2
;;;686    								if (c < 6)
;;;687    								{
;;;688    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;689    								}
;;;690    								else if (c == 6)
;;;691    								{
;;;692    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;693    								}
;;;694    								else if (c == 7)
;;;695    								{
;;;696    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;697    								}
;;;698    								else if (c >= 8 && c <= 19)
;;;699    								{
;;;700    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;701    								}
;;;702    								 else if (c >= 22 && c <= 27)
;;;703    								{
;;;704    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;705    								}
;;;706      								// SRIC 3~4
;;;707    								if (c >= 28 && c <= 33)
;;;708    								{
;;;709    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;710    								}
;;;711    								else if (c == 34)
;;;712    								{
;;;713    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;714    								}
;;;715    								else if (c == 35)
;;;716    								{
;;;717    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;718    								}
;;;719    								else if (c >= 36 && c <= 47)
;;;720    								{
;;;721    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;722    								}
;;;723    								 else if (c >= 50 && c <= 55)
;;;724    								{
;;;725    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;726    								}
;;;727    								// SRIC 5~6
;;;728    								if (c >= 56 && c <= 61)
;;;729    								{
;;;730    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;731    								}
;;;732    								else if (c == 62)
;;;733    								{
;;;734    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;735    								}
;;;736    								else if (c == 63)
;;;737    								{
;;;738    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;739    								}
;;;740    								else if (c >= 64 && c <= 75)
;;;741    								{
;;;742    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;743    								}
;;;744    								 else if (c >= 78 && c <= 83)
;;;745    								{
;;;746    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;747    								}
;;;748    							}
;;;749    						}
;;;750    	#endif
;;;751    	#if 1
;;;752    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP2));
;;;753    
;;;754    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;755    						{
;;;756    							module_wait_full_sample_done();
;;;757    						}
;;;758    						module_wait_full_sample_done();
;;;759    
;;;760    						for(r=ROW_MAX; r--; )
;;;761    						{
;;;762    							for(c=COL_MAX; c--; )
;;;763    							{
;;;764    								sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;765    								// SRIC 1~2
;;;766    								if (c < 6)
;;;767    								{
;;;768    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;769    								}
;;;770    								else if (c == 6)
;;;771    								{
;;;772    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;773    								}
;;;774    								else if (c == 7)
;;;775    								{
;;;776    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;777    								}
;;;778    								else if (c >= 8 && c <= 19)
;;;779    								{
;;;780    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;781    								}
;;;782    								else if (c == 20)
;;;783    								{
;;;784    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;785    								}
;;;786    								else if (c == 21)
;;;787    								{
;;;788    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;789    								}
;;;790    								 else if (c >= 22 && c <= 27)
;;;791    								{
;;;792    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;793    								}
;;;794    								// SRIC 3~4
;;;795    								if (c >= 28 && c <= 33)
;;;796    								{
;;;797    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;798    								}
;;;799    								else if (c == 34)
;;;800    								{
;;;801    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;802    								}
;;;803    								else if (c == 35)
;;;804    								{
;;;805    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;806    								}
;;;807    								else if (c >= 36 && c <= 47)
;;;808    								{
;;;809    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;810    								}
;;;811    								else if (c == 48)
;;;812    								{
;;;813    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;814    								}
;;;815    								else if (c == 49)
;;;816    								{
;;;817    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;818    								}
;;;819    								 else if (c >= 50 && c <= 55)
;;;820    								{
;;;821    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;822    								}
;;;823    								// SRIC 5~6
;;;824    								if (c >= 56 && c <= 61)
;;;825    								{
;;;826    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;827    								}
;;;828    								else if (c == 62)
;;;829    								{
;;;830    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;831    								}
;;;832    								else if (c == 63)
;;;833    								{
;;;834    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;835    								}
;;;836    								else if (c >= 64 && c <= 75)
;;;837    								{
;;;838    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;839    								}
;;;840    								else if (c == 76)
;;;841    								{
;;;842    									if (c % 2 == ODD) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;843    								}
;;;844    								else if (c == 77)
;;;845    								{
;;;846    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;847    								}
;;;848    								 else if (c >= 78 && c <= 83)
;;;849    								{
;;;850    									if (c % 2 == EVEN) HAL_WRITE_SHORT_IMAGE(r, c, sDiff);
;;;851    								}
;;;852    							}
;;;853    						}
;;;854    	#endif
;;;855    
;;;856    	#if 1
;;;857    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP3));
;;;858    
;;;859    
;;;860    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;861    						{
;;;862    							module_wait_full_sample_done();
;;;863    						}
;;;864    						module_wait_full_sample_done();
;;;865    
;;;866    						for(r=ROW_MAX; r--; )
;;;867    						{
;;;868    							for(c=COL_MAX; c--; )
;;;869    							{
;;;870    								// SRIC 1~2
;;;871    								if (c == 6 || c == 20 || c == 34 || c == 48 || c == 62 || c == 76)
;;;872    								{
;;;873    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;874    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;875    								}
;;;876    							}
;;;877    						}
;;;878    	#endif
;;;879    	#if 1
;;;880    						HAL_SetDiagTestSensingChangeMode((eDIAG_TEST_CHANGE_MODE_t)(DIAG_CHANGE_SHORT2_TEST_STEP4));
;;;881    
;;;882    
;;;883    						for(i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
;;;884    						{
;;;885    							module_wait_full_sample_done();
;;;886    						}
;;;887    						module_wait_full_sample_done();
;;;888    
;;;889    						for(r=ROW_MAX; r--; )
;;;890    						{
;;;891    							for(c=COL_MAX; c--; )
;;;892    							{
;;;893    								// SRIC 1~2
;;;894    								if (c == 7 || c == 21 || c == 35 || c == 49 || c == 63 || c == 77)
;;;895    								{
;;;896    									sDiff = (int16_t)HAL_READ_RAW_IMAGE(r, c);
;;;897    									HAL_WRITE_SHORT_IMAGE(r, c, (uint16_t)sDiff);
;;;898    								}
;;;899    							}
;;;900    						}
;;;901    	#endif
;;;902    #endif /* IS_ROIC_DEF_SW97500 */
;;;903    
;;;904    						HAL_SetDiagTestSensingChangeMode(DIAG_CHANGE_SHORT2_TEST_RECOVERY);
000480  201f              MOVS     r0,#0x1f
000482  f7fffffe          BL       HAL_SetDiagTestSensingChangeMode
;;;905    
;;;906    						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
000486  489e              LDR      r0,|L2.1792|
000488  e9d01006          LDRD     r1,r0,[r0,#0x18]
00048c  e9cd100a          STRD     r1,r0,[sp,#0x28]
000490  a80a              ADD      r0,sp,#0x28
                  |L2.1170|
;;;907    						{
;;;908    							.bIsRotated = NO,
;;;909    							.ucCol_ = COL_MAX,
;;;910    							.ucRow_ = ROW_MAX,
;;;911    							.ucBufferCol_ = COL_MAX,
;;;912    							.ucKey_ = 0,
;;;913    							.tDataType = datatypeof(uint16_t)
;;;914    						};
;;;915    
;;;916    						protocol_swip_PendTestResult(tTestDataFmt, (const void *)HAL_GET_SHORT_IMAGE_PTR());
000492  f5065167          ADD      r1,r6,#0x39c0
000496  e0ea              B        |L2.1646|
                  |L2.1176|
;;;917    						break;
;;;918    					}
;;;919    
;;;920    #if 0//USED_PEN_MODE_OPERATION
;;;921    					case CTT_DC_ABS_JITTER:
;;;922    					{
;;;923    						uint16_t *pBaseImage;
;;;924    						uint16_t read_raw_data;
;;;925    						int delta;
;;;926    						int ulRowEnd = PEN_COORD_ROW_MAX;
;;;927    						const tModuleModeConf_t * kptModuleModeConf = NULL;
;;;928    						kptModuleModeConf = module_GetModeConfig();
;;;929    						uint8_t BaseOffset = lptAlgorithmConf->BaseLine.ucPP_MUX_Select * PEN_COORD_ROW_MAX;
;;;930    						eActivePenType_t eActivePenRawDataType = hal_Info_GetControlActivePenRawDataType();
;;;931    
;;;932    						for (r = 0; r < ROW_MAX; r++)
;;;933    						{
;;;934    							for (c = 0; c < COL_MAX; c++)
;;;935    							{
;;;936    								HAL_WRITE_DC_ABS_JITTER_IMAGE(r, c, 0);
;;;937    							}
;;;938    						}
;;;939    
;;;940    						eSENSING_CHANGE_MODE_t _mode = HAL_GetSensingChangeMode();
;;;941    						ePartialSensing_t RetVal = PARTIAL_PEN_BEACON;
;;;942    						sensingRowStart = 0;
;;;943    						HAL_SetSensingChangeMode(SM_CHAGNE_Full_To_Local_MODE);
;;;944    						while (YES)
;;;945    						{
;;;946    							RetVal = module_wait_local_sample_done();
;;;947    							if (RetVal == LOCAL_OP_LAST_LHB)
;;;948    								break;
;;;949    						}
;;;950    
;;;951    						module_wait_Vsync_signal(LOCAL_MODE, lptAlgorithmConf->BaseLine.ucDiscardFrameNum);
;;;952    
;;;953    						// ulFrame2Count = protocol_swip_GetJitterCheckCount();
;;;954    
;;;955    						// if(ulFrame2Count == 0)
;;;956    						// {
;;;957    							ulFrame2Count = 15;     // Default value
;;;958    						// }
;;;959    
;;;960    						hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;961    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN)
;;;962    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;963    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN)
;;;964    						algorithm_local_baseline_init();
;;;965    						algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS);
;;;966    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;967    						algorithm_local_baseline_init();
;;;968    						algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP)
;;;969    #endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) */
;;;970    
;;;971    						pBaseImage = g_pLocalBaseImage;
;;;972    
;;;973    						for (i = 0; i < ulFrame2Count; i++)
;;;974    						{
;;;975    							while (YES)
;;;976    							{
;;;977    								RetVal = module_wait_local_sample_done();
;;;978    								// alogorithm_local_linefilter_1(LOCAL_MODE);
;;;979    								switch (RetVal)
;;;980    								{
;;;981    									case PARTIAL_PEN_COORD1:
;;;982    									case PARTIAL_PEN_COORD2:
;;;983    									case PARTIAL_PEN_COORD3:
;;;984    									case PARTIAL_PEN_COORD4:
;;;985    									{
;;;986    										currentRowStart = sensingRowStart;
;;;987    										for (r = 0; r < ulRowEnd; r++)
;;;988    										{
;;;989    											for (c = 0; c < COL_MAX; c++)
;;;990    											{
;;;991    												read_raw_data = HAL_READ_LOCAL_RAW_IMAGE(r + BaseOffset, c);
;;;992    												delta = (signed)pBaseImage[((r + currentRowStart) * COL_MAX) + c] - (signed)read_raw_data;
;;;993    												if (delta < 0)
;;;994    												{
;;;995    													delta = -delta;
;;;996    												}
;;;997    
;;;998    												delta >>= kptModuleModeConf->ucLocalOvrShift;
;;;999    
;;;1000   												if (HAL_READ_DC_ABS_JITTER_IMAGE(r + currentRowStart, c) < delta)
;;;1001   												{
;;;1002   													HAL_WRITE_DC_ABS_JITTER_IMAGE(r + currentRowStart, c, delta);
;;;1003   												}
;;;1004   											}
;;;1005   										}
;;;1006   
;;;1007   										break;
;;;1008   									}
;;;1009   									default:
;;;1010   										break;
;;;1011   								}
;;;1012   
;;;1013   								if(RetVal == PARTIAL_PEN_COORD4)
;;;1014   								{
;;;1015   									sensingRowStart += 4;
;;;1016   									if(sensingRowStart >= ROW_MAX)
;;;1017   									{
;;;1018   										ulRowEnd = PEN_COORD_ROW_MAX;
;;;1019   										sensingRowStart = 0;
;;;1020   									}
;;;1021   									else if((ROW_MAX - sensingRowStart) < PEN_COORD_ROW_MAX)
;;;1022   									{
;;;1023   										ulRowEnd = (ROW_MAX - sensingRowStart);
;;;1024   									}
;;;1025   								}
;;;1026   
;;;1027   #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;1028   								if(((RetVal == LOCAL_OP_LAST_LHB && OP_TYPE == ACTIVEPEN_TYPE_LOCAL_MS) || (lDataIndex == LOCAL_OP_2_LAST_LHB && OP_TYPE == ACTIVEPEN_TYPE_LOCAL_WGP)) && sensingRowStart == 0)
;;;1029   #else
;;;1030   								if((RetVal == LOCAL_OP_LAST_LHB && sensingRowStart == 0) || RetVal == PARTIAL_MAX)
;;;1031   #endif
;;;1032   								{
;;;1033   									break;
;;;1034   								}
;;;1035   							}
;;;1036   						}
;;;1037   
;;;1038   						HAL_SetSensingChangeMode(SM_CHAGNE_Local_To_Full_MODE);	// Return Change Finger Mode
;;;1039   
;;;1040   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
;;;1041   						{
;;;1042   							.bIsRotated = NO,
;;;1043   							.ucCol_ = COL_MAX,
;;;1044   							.ucRow_ = ROW_MAX,
;;;1045   							.ucBufferCol_ = COL_MAX,
;;;1046   							.ucKey_ = 0,
;;;1047   							.tDataType = datatypeof(uint16_t)
;;;1048   						};
;;;1049   
;;;1050   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_DC_ABS_JITTER_IMAGE_PTR());
;;;1051   						break;
;;;1052   					}
;;;1053   #endif /* USED_PEN_MODE_OPERATION */					
;;;1054   					case CTT_JITTER:
;;;1055   					{
;;;1056   						// _gT(_GPIO_TP_INTR);
;;;1057   //						eSENSING_MODE_t eSensingMode;
;;;1058   						uint16_t * pBaselineImage;
;;;1059   //						uint32_t * pCommonImage;
;;;1060   
;;;1061   //						eSensingMode = HAL_GetSensingMode();
;;;1062   
;;;1063   						const tModuleModeConf_t * kptModuleModeConf = NULL;
;;;1064   						kptModuleModeConf = module_GetModeConfig();
000498  f7fffffe          BL       module_GetModeConfig
00049c  4604              MOV      r4,r0
;;;1065   
;;;1066   						for (r = 0; r < ROW_MAX; r++)
00049e  2600              MOVS     r6,#0
;;;1067   						{
;;;1068   							for (c = 0; c < COL_MAX; c++)
;;;1069   							{
;;;1070   								HAL_WRITE_COMMON_IMAGE(r, c, 0);
;;;1071   								HAL_WRITE_JITTER_IMAGE(r, c, INT16_MIN);
0004a0  4998              LDR      r1,|L2.1796|
0004a2  4d99              LDR      r5,|L2.1800|
0004a4  f24b78bc          MOV      r8,#0xb7bc            ;1068
0004a8  f24f69be          MOV      r9,#0xf6be            ;1068
0004ac  ea4f0006          MOV.W    r0,r6                 ;110
                  |L2.1200|
0004b0  ebc602c6          RSB      r2,r6,r6,LSL #3       ;1068
0004b4  eb020242          ADD      r2,r2,r2,LSL #1       ;1068
0004b8  eb051302          ADD      r3,r5,r2,LSL #4       ;1068
0004bc  eb0502c2          ADD      r2,r5,r2,LSL #3       ;1068
0004c0  4443              ADD      r3,r3,r8              ;1068
0004c2  444a              ADD      r2,r2,r9              ;1068
0004c4  f04f0c2a          MOV      r12,#0x2a             ;1068
                  |L2.1224|
0004c8  6058              STR      r0,[r3,#4]
0004ca  8051              STRH     r1,[r2,#2]
0004cc  f8430f08          STR      r0,[r3,#8]!           ;1070
0004d0  f8221f04          STRH     r1,[r2,#4]!
0004d4  f1bc0c01          SUBS     r12,r12,#1
0004d8  d1f6              BNE      |L2.1224|
0004da  1c72              ADDS     r2,r6,#1
0004dc  b2d6              UXTB     r6,r2
0004de  2e30              CMP      r6,#0x30
0004e0  d3e6              BCC      |L2.1200|
;;;1072   							}
;;;1073   						}
;;;1074   
;;;1075   						pBaselineImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(eSensingMode, BASELINE_TYPE_FULL);
0004e2  4e8a              LDR      r6,|L2.1804|
;;;1076   
;;;1077   						memset((void *)pBaselineImage, 0x00, (uint16_t)ROW_MAX*COL_MAX);
0004e4  f44f617c          MOV      r1,#0xfc0
0004e8  6830              LDR      r0,[r6,#0]  ; g_pFingerBaseImage
0004ea  f7fffffe          BL       __aeabi_memclr
;;;1078   
;;;1079   						for (i = 0; i < lptAlgorithmConf->BaseLine.ucDiscardFrameNum; i++)
0004ee  7878              LDRB     r0,[r7,#1]
0004f0  f04f0800          MOV      r8,#0
0004f4  2800              CMP      r0,#0
0004f6  dd06              BLE      |L2.1286|
                  |L2.1272|
;;;1080   						{
;;;1081   							module_wait_full_sample_done();
0004f8  f7fffffe          BL       module_wait_full_sample_done
0004fc  7878              LDRB     r0,[r7,#1]
0004fe  f1080801          ADD      r8,r8,#1
000502  4540              CMP      r0,r8
000504  dcf8              BGT      |L2.1272|
                  |L2.1286|
;;;1082   						}
;;;1083   
;;;1084   						// Jitter
;;;1085   						// ulFrame1Count = protocol_swip_GetJitterAvrCount();
;;;1086   						// if(ulFrame1Count == 0)
;;;1087   						// {
;;;1088   						ulFrame1Count = 50; // Default value
000506  4f82              LDR      r7,|L2.1808|
000508  f04f0b32          MOV      r11,#0x32
00050c  f8c7b00c          STR      r11,[r7,#0xc]  ; ulFrame1Count
;;;1089   											// }
;;;1090   
;;;1091   						for (i = 0; i < ulFrame1Count; i++)
000510  68f8              LDR      r0,[r7,#0xc]  ; ulFrame1Count
000512  f04f0800          MOV      r8,#0
000516  4580              CMP      r8,r0
000518  bf38              IT       CC                    ;137
00051a  f64b1910          MOVCC    r9,#0xb910            ;137
00051e  d227              BCS      |L2.1392|
                  |L2.1312|
;;;1092   						{
;;;1093   							module_wait_full_sample_done();
000520  f7fffffe          BL       module_wait_full_sample_done
;;;1094   
;;;1095   							for (r = ROW_MAX; r--;)
000524  f05f032f          MOVS.W   r3,#0x2f
                  |L2.1320|
;;;1096   							{
;;;1097   								for (c = COL_MAX; c--;)
000528  ebc300c3          RSB      r0,r3,r3,LSL #3
00052c  eb000140          ADD      r1,r0,r0,LSL #1
000530  eb051001          ADD      r0,r5,r1,LSL #4
000534  eb0501c1          ADD      r1,r5,r1,LSL #3
000538  222a              MOVS     r2,#0x2a
00053a  4448              ADD      r0,r0,r9
00053c  f11101a8          ADDS.W   r1,r1,#0xa8
                  |L2.1344|
;;;1098   								{
;;;1099   									ulTempData = HAL_READ_COMMON_IMAGE(r, c);
;;;1100   									HAL_WRITE_COMMON_IMAGE(r, c, (ulTempData + (uint32_t)HAL_READ_RAW_IMAGE(r, c)));
000540  f850cd04          LDR      r12,[r0,#-4]!
000544  f831ac02          LDRH     r10,[r1,#-2]
000548  1e52              SUBS     r2,r2,#1
00054a  44d4              ADD      r12,r12,r10
00054c  f840c904          STR      r12,[r0],#-4
000550  f831ad04          LDRH     r10,[r1,#-4]!
000554  f8d0c000          LDR      r12,[r0,#0]
000558  44d4              ADD      r12,r12,r10
00055a  f8c0c000          STR      r12,[r0,#0]
00055e  d1ef              BNE      |L2.1344|
000560  1e59              SUBS     r1,r3,#1              ;1097
000562  b2cb              UXTB     r3,r1                 ;1097
000564  d2e0              BCS      |L2.1320|
000566  68f8              LDR      r0,[r7,#0xc]          ;1097  ; ulFrame1Count
000568  f1080801          ADD      r8,r8,#1              ;1097
00056c  4580              CMP      r8,r0                 ;1097
00056e  d3d7              BCC      |L2.1312|
                  |L2.1392|
000570  f8d68000          LDR      r8,[r6,#0]            ;1075
;;;1101   								}
;;;1102   							}
;;;1103   						}
;;;1104   
;;;1105   						for (r = ROW_MAX; r--;)
000574  f04f0c2f          MOV      r12,#0x2f
                  |L2.1400|
000578  ebcc02cc          RSB      r2,r12,r12,LSL #3     ;110
;;;1106   						{
;;;1107   							for (c = COL_MAX; c--;)
00057c  2054              MOVS     r0,#0x54
00057e  eb020342          ADD      r3,r2,r2,LSL #1       ;110
000582  2101              MOVS     r1,#1
000584  eb051203          ADD      r2,r5,r3,LSL #4       ;110
                  |L2.1416|
000588  1e40              SUBS     r0,r0,#1              ;110
00058a  b2c0              UXTB     r0,r0
;;;1108   							{
;;;1109   								g_pFingerBaseImage[c+(r*COL_MAX)] = (uint16_t)(HAL_READ_COMMON_IMAGE(r, c) / ulFrame1Count);
00058c  eb020980          ADD      r9,r2,r0,LSL #2
000590  f5094930          ADD      r9,r9,#0xb000
000594  f8d7a00c          LDR      r10,[r7,#0xc]  ; ulFrame1Count
000598  f8d997c0          LDR      r9,[r9,#0x7c0]
00059c  fbb9f9fa          UDIV     r9,r9,r10
0005a0  eb000a83          ADD      r10,r0,r3,LSL #2
0005a4  1e40              SUBS     r0,r0,#1
0005a6  f828901a          STRH     r9,[r8,r10,LSL #1]
0005aa  b2c0              UXTB     r0,r0                 ;1107
0005ac  eb020980          ADD      r9,r2,r0,LSL #2
0005b0  f5094930          ADD      r9,r9,#0xb000
0005b4  f8d7a00c          LDR      r10,[r7,#0xc]  ; ulFrame1Count
0005b8  f8d997c0          LDR      r9,[r9,#0x7c0]
0005bc  1c89              ADDS     r1,r1,#2
0005be  fbb9f9fa          UDIV     r9,r9,r10
0005c2  eb000a83          ADD      r10,r0,r3,LSL #2
0005c6  2955              CMP      r1,#0x55
0005c8  f828901a          STRH     r9,[r8,r10,LSL #1]
0005cc  dbdc              BLT      |L2.1416|
0005ce  f1bc0101          SUBS     r1,r12,#1             ;1107
0005d2  f0010cff          AND      r12,r1,#0xff          ;1107
0005d6  d2cf              BCS      |L2.1400|
;;;1110   //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;1111   //								HAL_WRITE_BASELINE_2_IMAGE(r, c, (uint16_t)(HAL_READ_COMMON_IMAGE(r, c) / ulFrame1Count));
;;;1112   //#endif
;;;1113   							}
;;;1114   						}
;;;1115   
;;;1116   //						pCommonImage = HAL_GET_COMMON_IMAGE_PTR();
;;;1117   //						for(r = 0; r < ROW_MAX * COL_MAX; r++)
;;;1118   //						{
;;;1119   //							(*pBaselineImage++) = (uint16_t)((*pCommonImage++) / ulFrame1Count);
;;;1120   //						}
;;;1121   
;;;1122   						// ulFrame2Count = protocol_swip_GetJitterCheckCount();
;;;1123   						// if(ulFrame2Count == 0)
;;;1124   						// {
;;;1125   						ulFrame2Count = 50; // Default value
0005d8  f8c7b010          STR      r11,[r7,#0x10]  ; ulFrame2Count
;;;1126   											// }
;;;1127   
;;;1128   						for (i = 0; i < ulFrame2Count; i++)
0005dc  6939              LDR      r1,[r7,#0x10]  ; ulFrame2Count
0005de  f04f0800          MOV      r8,#0
0005e2  4588              CMP      r8,r1
;;;1129   						{
;;;1130   							module_wait_full_sample_done();
;;;1131   
;;;1132   							alogorithm_linefilter_2();
;;;1133   //							alogorithm_linefilter(HAL_GetSensingMode());
;;;1134   
;;;1135   							for (r = ROW_MAX; r--;)
;;;1136   							{
;;;1137   								for (c = COL_MAX; c--;)
0005e4  bf38              IT       CC
0005e6  f24f7766          MOVCC    r7,#0xf766
0005ea  d239              BCS      |L2.1632|
                  |L2.1516|
0005ec  f7fffffe          BL       module_wait_full_sample_done
0005f0  f7fffffe          BL       alogorithm_linefilter_2
0005f4  f04f092f          MOV      r9,#0x2f              ;1135
                  |L2.1528|
0005f8  ebc900c9          RSB      r0,r9,r9,LSL #3
0005fc  6831              LDR      r1,[r6,#0]  ; g_pFingerBaseImage
0005fe  eb000040          ADD      r0,r0,r0,LSL #1
000602  eb0101c0          ADD      r1,r1,r0,LSL #3
000606  f10102a6          ADD      r2,r1,#0xa6
00060a  eb0500c0          ADD      r0,r5,r0,LSL #3
00060e  f10001a6          ADD      r1,r0,#0xa6
000612  4438              ADD      r0,r0,r7
000614  f04f0c54          MOV      r12,#0x54
                  |L2.1560|
;;;1138   								{
;;;1139   									deltaData = (uint16_t)ABS(HAL_READ_RAW_IMAGE(r, c) - g_pFingerBaseImage[c+(r*COL_MAX)]);
000618  f8b1b000          LDRH     r11,[r1,#0]
00061c  f8b2a000          LDRH     r10,[r2,#0]
000620  ebbb030a          SUBS     r3,r11,r10
000624  bf48              IT       MI
000626  ebaa030b          SUBMI    r3,r10,r11
00062a  b29b              UXTH     r3,r3
;;;1140   									deltaData >>= kptModuleModeConf->ucOvrShift;
00062c  f894a000          LDRB     r10,[r4,#0]
000630  fa23f30a          LSR      r3,r3,r10
;;;1141   									if (deltaData > HAL_READ_JITTER_IMAGE(r, c))
000634  f9b0a000          LDRSH    r10,[r0,#0]
000638  459a              CMP      r10,r3
;;;1142   									{
;;;1143   										HAL_WRITE_JITTER_IMAGE(r, c, deltaData);
00063a  bfb8              IT       LT
00063c  8003              STRHLT   r3,[r0,#0]
00063e  1e80              SUBS     r0,r0,#2
000640  1e89              SUBS     r1,r1,#2
000642  1e92              SUBS     r2,r2,#2
000644  f1bc0c01          SUBS     r12,r12,#1
000648  d1e6              BNE      |L2.1560|
00064a  f1b90101          SUBS     r1,r9,#1              ;1137
00064e  f00109ff          AND      r9,r1,#0xff           ;1137
000652  d2d1              BCS      |L2.1528|
000654  482e              LDR      r0,|L2.1808|
000656  6900              LDR      r0,[r0,#0x10]         ;1137  ; ulFrame2Count
000658  f1080801          ADD      r8,r8,#1              ;1137
00065c  4580              CMP      r8,r0                 ;1137
00065e  d3c5              BCC      |L2.1516|
                  |L2.1632|
;;;1144   									}
;;;1145   								}
;;;1146   							}
;;;1147   						}
;;;1148   
;;;1149   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
000660  4827              LDR      r0,|L2.1792|
000662  e9d01008          LDRD     r1,r0,[r0,#0x20]
000666  e9cd100a          STRD     r1,r0,[sp,#0x28]
00066a  a80a              ADD      r0,sp,#0x28
00066c  9906              LDR      r1,[sp,#0x18]
                  |L2.1646|
;;;1150   						{
;;;1151   							.bIsRotated = NO,
;;;1152   							.ucCol_ = COL_MAX,
;;;1153   							.ucRow_ = ROW_MAX,
;;;1154   							.ucBufferCol_ = COL_MAX + 2*PAD_,
;;;1155   							.ucKey_ = 0,
;;;1156   							.tDataType = datatypeof(uint16_t)
;;;1157   						};
;;;1158   
;;;1159   						// _gT(_GPIO_TP_INTR);
;;;1160   						// _gT(_GPIO_TP_INTR);
;;;1161   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)HAL_GET_JITTER_IMAGE_PTR());
00066e  f7fffffe          BL       protocol_swip_PendTestResult
000672  e020              B        |L2.1718|
                  |L2.1652|
;;;1162   						break;
;;;1163   					}
;;;1164   					case CTT_CRC_CHECK:
;;;1165   					{
;;;1166   						fw_crc_value = 0xFFFFFFFF;//GetCRCValue((const uint16_t *)(CODE_SRAM_APP_START_BASE_ADDR), CODE_SRAM_APP_BYTE_SIZE - CODE_SRAM_APP_RESERV_BYTE_SIZE - SFLASH_CRC_CODE_BYTE_SIZE);
000674  4926              LDR      r1,|L2.1808|
000676  f04f30ff          MOV      r0,#0xffffffff
00067a  6088              STR      r0,[r1,#8]  ; fw_crc_value
;;;1167   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
00067c  4820              LDR      r0,|L2.1792|
00067e  e9d0100a          LDRD     r1,r0,[r0,#0x28]
000682  e9cd1000          STRD     r1,r0,[sp,#0]
000686  4668              MOV      r0,sp
;;;1168   						{
;;;1169   							.bIsRotated = NO,
;;;1170   							.ucCol_ = 1,
;;;1171   							.ucRow_ = 1,
;;;1172   							.ucBufferCol_ = 1,
;;;1173   							.ucKey_ = 0,
;;;1174   							.tDataType = datatypeof(uint32_t)
;;;1175   						};
;;;1176   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)((uint32_t *)&fw_crc_value));
000688  4922              LDR      r1,|L2.1812|
;;;1177   						break;
00068a  e7f0              B        |L2.1646|
                  |L2.1676|
;;;1178   					}
;;;1179   #if USED_CHECK_TP_EN_PIN_IN_PT_TEST_ITEM
;;;1180   					case CTT_TP_EN_CHECK:
;;;1181   					{
;;;1182   						TP_EN_CHECK_value = 0;
00068c  4820              LDR      r0,|L2.1808|
00068e  2100              MOVS     r1,#0
000690  6041              STR      r1,[r0,#4]  ; TP_EN_CHECK_value
;;;1183   
;;;1184   						if(GET_GPIO_TP_EN_TPIC_STATUS == 0x1)
000692  f04f4180          MOV      r1,#0x40000000
000696  f8d11100          LDR      r1,[r1,#0x100]
00069a  f0110f20          TST      r1,#0x20
;;;1185   						{
;;;1186   							TP_EN_CHECK_value = 1;
00069e  bf1c              ITT      NE
0006a0  2101              MOVNE    r1,#1
0006a2  6041              STRNE    r1,[r0,#4]  ; TP_EN_CHECK_value
;;;1187   						}
;;;1188   
;;;1189   						const tSWIPTestDataFmt_t * tTestDataFmt = &(tSWIPTestDataFmt_t)
0006a4  4816              LDR      r0,|L2.1792|
0006a6  e9d0100c          LDRD     r1,r0,[r0,#0x30]
0006aa  e9cd1000          STRD     r1,r0,[sp,#0]
0006ae  4668              MOV      r0,sp
;;;1190   						{
;;;1191   							.bIsRotated = NO,
;;;1192   							.ucCol_ = 1,
;;;1193   							.ucRow_ = 1,
;;;1194   							.ucBufferCol_ = 1,
;;;1195   							.ucKey_ = 0,
;;;1196   							.tDataType = datatypeof(uint32_t)
;;;1197   						};
;;;1198   						protocol_swip_PendTestResult( tTestDataFmt, (const void *)((uint32_t *)&TP_EN_CHECK_value));
0006b0  4919              LDR      r1,|L2.1816|
0006b2  f7fffffe          BL       protocol_swip_PendTestResult
                  |L2.1718|
;;;1199   						break;
;;;1200   					}
;;;1201   #endif /* USED_CHECK_TP_EN_PIN_IN_PT_TEST_ITEM */
;;;1202   #if (USED_MODULE_DEF == MODULE_DEF_S_1)
;;;1203   					case CTT_TP_INFO_WRITE:
;;;1204   					{
;;;1205   //						protocol_swip_SetTestType(CTT_NONE);
;;;1206   						protocol_swip_PendReadyStatus();
;;;1207   						protocol_swip_PendReadyStatus();
;;;1208   
;;;1209   //						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1210   //						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 1);
;;;1211   //						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1212   //						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 1);
;;;1213   //						while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1214   						while(IS_GPIO_PIN(_GPIO_VSYNC) == 0);
;;;1215   						while(IS_GPIO_PIN(_GPIO_VSYNC) == 1);
;;;1216   						while(IS_GPIO_PIN(_GPIO_VSYNC) == 0);
;;;1217   						while(IS_GPIO_PIN(_GPIO_VSYNC) == 1);
;;;1218   						while(IS_GPIO_PIN(_GPIO_VSYNC) == 0);
;;;1219   
;;;1220   						module_Stop(NO);
;;;1221   
;;;1222   						FLITF_TPInspectionInfoCodeFlashWrite(protocol_swip_GetPTInspectionSetBufPrt());
;;;1223   
;;;1224   						protocol_swip_PendReadyStatus();
;;;1225   						break;
;;;1226   					}
;;;1227   #endif /* (USED_MODULE_DEF == MODULE_DEF_S_1) */
;;;1228   				} /* switch(protocol_swip_GetTestType()) */
;;;1229   
;;;1230   //				module_Stop();
;;;1231   //				test_state = CTT_NONE; // NOTE : not used!!
;;;1232   
;;;1233   				break;
;;;1234   			}
;;;1235   			case TOUCH_DIAG_OPER_EXIT:
;;;1236   			{
;;;1237   				module_Stop(NO);
;;;1238   
;;;1239   				protocol_swip_PendReadyStatus();
;;;1240   
;;;1241   				bLoop = NO;
;;;1242   				continue;
;;;1243   				/* no break */
;;;1244   			}
;;;1245       	}
;;;1246   
;;;1247       	switch( protocol_swip_GetMode() )
0006b6  f7fffffe          BL       protocol_swip_GetMode
0006ba  b178              CBZ      r0,|L2.1756|
0006bc  2811              CMP      r0,#0x11
0006be  d018              BEQ      |L2.1778|
;;;1248       	{
;;;1249   			case M_TOUCH_NORMAL:
;;;1250   			{
;;;1251   				sub_state = TOUCH_DIAG_OPER_EXIT;
;;;1252   				main_state = TOUCH_MAIN_OPERATION_NORMAL;
;;;1253   				break;
0006c0  9808              LDR      r0,[sp,#0x20]
0006c2  2800              CMP      r0,#0
0006c4  f47facad          BNE      |L2.34|
                  |L2.1736|
;;;1254   			}
;;;1255   			case M_WATCH_DOG_RESET:
;;;1256   			{
;;;1257   				sub_state = TOUCH_DIAG_OPER_EXIT;
;;;1258   				main_state = TOUCH_MAIN_OPERATION_RESET;
;;;1259   				break;
;;;1260   			}
;;;1261       	}
;;;1262       }
;;;1263   
;;;1264       return main_state;
0006c8  9809              LDR      r0,[sp,#0x24]
;;;1265   }
0006ca  b011              ADD      sp,sp,#0x44
0006cc  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1744|
0006d0  2000              MOVS     r0,#0                 ;1237
0006d2  f7fffffe          BL       module_Stop
0006d6  f7fffffe          BL       protocol_swip_PendReadyStatus
0006da  e7f5              B        |L2.1736|
                  |L2.1756|
0006dc  2005              MOVS     r0,#5                 ;1251
0006de  9007              STR      r0,[sp,#0x1c]         ;1252
0006e0  2001              MOVS     r0,#1                 ;1252
0006e2  9009              STR      r0,[sp,#0x24]         ;1253
0006e4  9808              LDR      r0,[sp,#0x20]         ;1253
0006e6  2800              CMP      r0,#0                 ;1253
0006e8  bf18              IT       NE                    ;86
0006ea  9807              LDRNE    r0,[sp,#0x1c]         ;86
0006ec  f47fac9f          BNE      |L2.46|
0006f0  e7ea              B        |L2.1736|
                  |L2.1778|
0006f2  2004              MOVS     r0,#4                 ;1258
0006f4  9009              STR      r0,[sp,#0x24]         ;1253
0006f6  9808              LDR      r0,[sp,#0x20]         ;1259
0006f8  2800              CMP      r0,#0                 ;1259
0006fa  d1e9              BNE      |L2.1744|
0006fc  e7e4              B        |L2.1736|
;;;1266   #endif
                          ENDP

0006fe  0000              DCW      0x0000
                  |L2.1792|
                          DCD      ||.constdata||
                  |L2.1796|
                          DCD      0xffff8000
                  |L2.1800|
                          DCD      FullSharedBuff
                  |L2.1804|
                          DCD      g_pFingerBaseImage
                  |L2.1808|
                          DCD      ||.data||
                  |L2.1812|
                          DCD      ||.data||+0x8
                  |L2.1816|
                          DCD      ||.data||+0x4

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  30545400          DCB      0x30,0x54,0x54,0x00
000004  00820000          DCB      0x00,0x82,0x00,0x00
000008  30545400          DCB      0x30,0x54,0x54,0x00
00000c  00820000          DCB      0x00,0x82,0x00,0x00
000010  30545400          DCB      0x30,0x54,0x54,0x00
000014  00820000          DCB      0x00,0x82,0x00,0x00
000018  30545400          DCB      0x30,0x54,0x54,0x00
00001c  00820000          DCB      0x00,0x82,0x00,0x00
000020  30545400          DCB      0x30,0x54,0x54,0x00
000024  00820000          DCB      0x00,0x82,0x00,0x00
000028  01010100          DCB      0x01,0x01,0x01,0x00
00002c  00840000          DCB      0x00,0x84,0x00,0x00
000030  01010100          DCB      0x01,0x01,0x01,0x00
000034  0084              DCB      0x00,0x84

                          AREA ||.data||, DATA, ALIGN=2

                  sptAlgorithmInfo
                          DCD      0x00000000
                  TP_EN_CHECK_value
                          DCD      0x00000000
                  fw_crc_value
                          DCD      0x00000000
                  ulFrame1Count
                          DCD      0x00000000
                  ulFrame2Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\app_diag.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_bf778bbe____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___10_app_diag_c_bf778bbe____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_bf778bbe____REVSH|
#line 402
|__asm___10_app_diag_c_bf778bbe____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_app_diag_c_bf778bbe____RRX|
#line 587
|__asm___10_app_diag_c_bf778bbe____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
