; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\timer.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\timer.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\timer.crf ..\..\Hal\timer\timer.c]
                          THUMB

                          AREA ||i.TIMER_DeInitialize||, CODE, READONLY, ALIGN=2

                  TIMER_DeInitialize PROC
;;;88     
;;;89     void TIMER_DeInitialize(void)
000000  f04f4180          MOV      r1,#0x40000000
;;;90     {
;;;91         TIMER->TIMER_CTRL.w = 0;
000004  2000              MOVS     r0,#0
000006  f8c1019c          STR      r0,[r1,#0x19c]
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  2202              MOVS     r2,#2
000010  f8c12180          STR      r2,[r1,#0x180]
000014  f8c12280          STR      r2,[r1,#0x280]
;;;92     
;;;93     	NVIC_DisableIRQ(TIMER_IRQn);
;;;94     	NVIC_ClearPendingIRQ(TIMER_IRQn);
;;;95     	Fncp_TIMER_IRQHandler = NULL;
000018  4901              LDR      r1,|L1.32|
00001a  6008              STR      r0,[r1,#0]  ; Fncp_TIMER_IRQHandler
;;;96     }
00001c  4770              BX       lr
;;;97     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      Fncp_TIMER_IRQHandler

                          AREA ||i.TIMER_GetLoadCount||, CODE, READONLY, ALIGN=1

                  TIMER_GetLoadCount PROC
;;;259    
;;;260    uint32_t TIMER_GetLoadCount(uint32_t Unit)
000000  0002              MOVS     r2,r0
;;;261    {
;;;262    	uint32_t ulCount = 0;
000002  f04f0000          MOV      r0,#0
;;;263    	switch( Unit ) {
;;;264    	case TIMER_1UNIT: ulCount = TIMER->TIMER_VALUE[0]; break;
000006  f04f4180          MOV      r1,#0x40000000
00000a  bf04              ITT      EQ
00000c  f8d101b8          LDREQ    r0,[r1,#0x1b8]
;;;265    	case TIMER_2UNIT: ulCount = TIMER->TIMER_VALUE[1]; break;
;;;266    	case TIMER_3UNIT: ulCount = TIMER->TIMER_VALUE[2]; break;
;;;267    	case TIMER_4UNIT: ulCount = TIMER->TIMER_VALUE[3]; break;
;;;268    	}
;;;269    
;;;270    	return ulCount;
;;;271    }
000010  4770              BXEQ     lr
000012  2a01              CMP      r2,#1                 ;263
000014  bf04              ITT      EQ                    ;265
000016  f8d101bc          LDREQ    r0,[r1,#0x1bc]        ;265
00001a  4770              BXEQ     lr
00001c  2a02              CMP      r2,#2                 ;263
00001e  bf04              ITT      EQ                    ;266
000020  f8d101c0          LDREQ    r0,[r1,#0x1c0]        ;266
000024  4770              BXEQ     lr
000026  2a03              CMP      r2,#3                 ;263
000028  bf08              IT       EQ                    ;267
00002a  f8d101c4          LDREQ    r0,[r1,#0x1c4]        ;267
00002e  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.TIMER_Initialize||, CODE, READONLY, ALIGN=2

                  TIMER_Initialize PROC
;;;69     
;;;70     void TIMER_Initialize(void)
000000  491d              LDR      r1,|L3.120|
;;;71     {
;;;72     	uint32_t ulTimerUnitIdx;
;;;73     
;;;74     	Fncp_TIMER_IRQHandler = &TIMER_InterruptHandler;
000002  481c              LDR      r0,|L3.116|
;;;75     
;;;76     	/*
;;;77     	 * Timer Clock Set 12Mhz
;;;78     	 */
;;;79     	SCRB->SYS_MAINCLK_CFG.tBit.mclkdiv = 0;//12;	//	n+1 divider
000004  6008              STR      r0,[r1,#0]  ; Fncp_TIMER_IRQHandler
000006  f04f4080          MOV      r0,#0x40000000
00000a  f8501f60          LDR      r1,[r0,#0x60]!
00000e  f421417c          BIC      r1,r1,#0xfc00
000012  f8401b60          STR      r1,[r0],#0x60
000016  f04f22e0          MOV      r2,#0xe000e000
00001a  2102              MOVS     r1,#2
00001c  f8c21280          STR      r1,[r2,#0x280]
000020  f1020c01          ADD      r12,r2,#1
000024  23c0              MOVS     r3,#0xc0
000026  f88c3400          STRB     r3,[r12,#0x400]
00002a  f8c21100          STR      r1,[r2,#0x100]
;;;80     
;;;81     	NVIC_ClearPendingIRQ(TIMER_IRQn);
;;;82     	NVIC_SetPriority(TIMER_IRQn, TIMER_IRQn_Priority);
;;;83     	NVIC_EnableIRQ(TIMER_IRQn);
;;;84     
;;;85     	for( ulTimerUnitIdx = 0 ; ulTimerUnitIdx < OPERATION_TIMER_UNITNUM ; ulTimerUnitIdx++ )
;;;86     		TIMER->TIMER_RELOAD[ulTimerUnitIdx].tBit.timer_prev_val = TIMER_CLOCK_DIV_1;
00002e  f8501fe0          LDR      r1,[r0,#0xe0]!
000032  f42101e0          BIC      r1,r1,#0x700000
000036  f8401960          STR      r1,[r0],#-0x60
00003a  6e41              LDR      r1,[r0,#0x64]
00003c  f42101e0          BIC      r1,r1,#0x700000
000040  6641              STR      r1,[r0,#0x64]
000042  6e81              LDR      r1,[r0,#0x68]
000044  f42101e0          BIC      r1,r1,#0x700000
000048  6681              STR      r1,[r0,#0x68]
00004a  6ec1              LDR      r1,[r0,#0x6c]
00004c  f42101e0          BIC      r1,r1,#0x700000
000050  66c1              STR      r1,[r0,#0x6c]
000052  6f01              LDR      r1,[r0,#0x70]
000054  f42101e0          BIC      r1,r1,#0x700000
000058  6701              STR      r1,[r0,#0x70]
00005a  6f41              LDR      r1,[r0,#0x74]
00005c  f42101e0          BIC      r1,r1,#0x700000
000060  6741              STR      r1,[r0,#0x74]
000062  6f81              LDR      r1,[r0,#0x78]
000064  f42101e0          BIC      r1,r1,#0x700000
000068  6781              STR      r1,[r0,#0x78]
00006a  6fc1              LDR      r1,[r0,#0x7c]
00006c  f42101e0          BIC      r1,r1,#0x700000
000070  67c1              STR      r1,[r0,#0x7c]
;;;87     }
000072  4770              BX       lr
;;;88     
                          ENDP

                  |L3.116|
                          DCD      TIMER_InterruptHandler
                  |L3.120|
                          DCD      Fncp_TIMER_IRQHandler

                          AREA ||i.TIMER_InterruptHandler||, CODE, READONLY, ALIGN=2

                  TIMER_InterruptHandler PROC
;;;38     
;;;39     void TIMER_InterruptHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
;;;41     	if(SCRB->SYS_INT_ST.tBit.int_timer0)
000002  f04f4480          MOV      r4,#0x40000000
000006  69a0              LDR      r0,[r4,#0x18]
;;;42     	{
;;;43     		ulTimerIRQHandle[TIMER_1UNIT] = 1;
000008  4e1a              LDR      r6,|L4.116|
00000a  f0100f02          TST      r0,#2                 ;41
00000e  f04f0501          MOV      r5,#1
000012  d00b              BEQ      |L4.44|
000014  6035              STR      r5,[r6,#0]  ; ulTimerIRQHandle
;;;44     		if(Fncp_Systick_IRQHandler)
000016  4818              LDR      r0,|L4.120|
000018  6800              LDR      r0,[r0,#0]  ; Fncp_Systick_IRQHandler
00001a  2800              CMP      r0,#0
;;;45     		{
;;;46     			Fncp_Systick_IRQHandler();
00001c  bf18              IT       NE
00001e  4780              BLXNE    r0
;;;47     		}
;;;48     		TIMER->TIMER_INT_CLR.tBit.timer0_int_clr = 1;
000020  f8d401b4          LDR      r0,[r4,#0x1b4]
000024  f0400001          ORR      r0,r0,#1
000028  f8c401b4          STR      r0,[r4,#0x1b4]
                  |L4.44|
;;;49     	}
;;;50     
;;;51     	if(SCRB->SYS_INT_ST.tBit.int_timer1)
00002c  69a0              LDR      r0,[r4,#0x18]
00002e  f0100f04          TST      r0,#4
000032  d006              BEQ      |L4.66|
;;;52     	{
;;;53     		ulTimerIRQHandle[TIMER_2UNIT] = 1;
000034  6075              STR      r5,[r6,#4]  ; ulTimerIRQHandle
;;;54     		TIMER->TIMER_INT_CLR.tBit.timer1_int_clr = 1;
000036  f8d401b4          LDR      r0,[r4,#0x1b4]
00003a  f0400002          ORR      r0,r0,#2
00003e  f8c401b4          STR      r0,[r4,#0x1b4]
                  |L4.66|
;;;55     	}
;;;56     
;;;57     	if(SCRB->SYS_INT_ST.tBit.int_timer2)
000042  69a0              LDR      r0,[r4,#0x18]
000044  f0100f08          TST      r0,#8
000048  d006              BEQ      |L4.88|
;;;58     	{
;;;59     		ulTimerIRQHandle[TIMER_3UNIT] = 1;
00004a  60b5              STR      r5,[r6,#8]  ; ulTimerIRQHandle
;;;60     		TIMER->TIMER_INT_CLR.tBit.timer2_int_clr = 1;
00004c  f8d401b4          LDR      r0,[r4,#0x1b4]
000050  f0400004          ORR      r0,r0,#4
000054  f8c401b4          STR      r0,[r4,#0x1b4]
                  |L4.88|
;;;61     	}
;;;62     
;;;63     	if(SCRB->SYS_INT_ST.tBit.int_timer3)
000058  69a0              LDR      r0,[r4,#0x18]
00005a  f0100f10          TST      r0,#0x10
;;;64     	{
;;;65     		ulTimerIRQHandle[TIMER_4UNIT] = 1;
;;;66     		TIMER->TIMER_INT_CLR.tBit.timer3_int_clr = 1;
;;;67     	}
;;;68     }
00005e  bf08              IT       EQ
000060  bd70              POPEQ    {r4-r6,pc}
000062  60f5              STR      r5,[r6,#0xc]          ;65  ; ulTimerIRQHandle
000064  f8d401b4          LDR      r0,[r4,#0x1b4]        ;66
000068  f0400008          ORR      r0,r0,#8              ;66
00006c  f8c401b4          STR      r0,[r4,#0x1b4]        ;66
000070  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      ||.bss||
                  |L4.120|
                          DCD      Fncp_Systick_IRQHandler

                          AREA ||i.TIMER_SetFreeRunningMode||, CODE, READONLY, ALIGN=2

                  TIMER_SetFreeRunningMode PROC
;;;97     
;;;98     void TIMER_SetFreeRunningMode(tTimerOpHandleInfo_t * ptTimerHandle)
000000  f8d0c000          LDR      r12,[r0,#0]
;;;99     {
;;;100    	switch( ptTimerHandle->ulTimerUnit ) {
000004  2200              MOVS     r2,#0
;;;101    	case TIMER_1UNIT:
;;;102    		TIMER->TIMER_RELOAD[0].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;103    		SCRB->SYS_CLK_CTL.tBit.timclk0_en = ON;
;;;104    		TIMER->TIMER_CTRL.tBit.int_timer0_en = OFF;
;;;105    		ulTimerOneShotEn[0] = 0;
000006  4b30              LDR      r3,|L5.200|
000008  f04f4180          MOV      r1,#0x40000000        ;102
00000c  f1bc0f00          CMP      r12,#0                ;100
000010  d01d              BEQ      |L5.78|
000012  f1bc0f01          CMP      r12,#1                ;100
000016  d02e              BEQ      |L5.118|
000018  f1bc0f02          CMP      r12,#2                ;100
00001c  d03f              BEQ      |L5.158|
00001e  f1bc0f03          CMP      r12,#3                ;100
;;;106    		break;
;;;107    	case TIMER_2UNIT:
;;;108    		TIMER->TIMER_RELOAD[1].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;109    		SCRB->SYS_CLK_CTL.tBit.timclk1_en = ON;
;;;110    		TIMER->TIMER_CTRL.tBit.int_timer1_en = OFF;
;;;111    		ulTimerOneShotEn[1] = 0;
;;;112    		break;
;;;113    	case TIMER_3UNIT:
;;;114    		TIMER->TIMER_RELOAD[2].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;115    		SCRB->SYS_CLK_CTL.tBit.timclk2_en = ON;
;;;116    		TIMER->TIMER_CTRL.tBit.int_timer2_en = OFF;
;;;117    		ulTimerOneShotEn[2] = 0;
;;;118    		break;
;;;119    	case TIMER_4UNIT:
;;;120    		TIMER->TIMER_RELOAD[3].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;121    		SCRB->SYS_CLK_CTL.tBit.timclk3_en = ON;
;;;122    		TIMER->TIMER_CTRL.tBit.int_timer3_en = OFF;
;;;123    		ulTimerOneShotEn[3] = 0;
;;;124    		break;
;;;125    	}
;;;126    }
000022  bf18              IT       NE
000024  4770              BXNE     lr
000026  f8d0c004          LDR      r12,[r0,#4]           ;120
00002a  f8d101ac          LDR      r0,[r1,#0x1ac]        ;120
00002e  f36c0013          BFI      r0,r12,#0,#20         ;120
000032  f8c101ac          STR      r0,[r1,#0x1ac]        ;120
000036  6888              LDR      r0,[r1,#8]            ;121
000038  f0400010          ORR      r0,r0,#0x10           ;121
00003c  6088              STR      r0,[r1,#8]            ;121
00003e  f8d1019c          LDR      r0,[r1,#0x19c]        ;122
000042  f0200080          BIC      r0,r0,#0x80           ;122
000046  f8c1019c          STR      r0,[r1,#0x19c]        ;122
00004a  70da              STRB     r2,[r3,#3]            ;123
00004c  4770              BX       lr
                  |L5.78|
00004e  f8d0c004          LDR      r12,[r0,#4]           ;102
000052  f8d101a0          LDR      r0,[r1,#0x1a0]        ;102
000056  f36c0013          BFI      r0,r12,#0,#20         ;102
00005a  f8c101a0          STR      r0,[r1,#0x1a0]        ;102
00005e  6888              LDR      r0,[r1,#8]            ;103
000060  f0400002          ORR      r0,r0,#2              ;103
000064  6088              STR      r0,[r1,#8]            ;103
000066  f8d1019c          LDR      r0,[r1,#0x19c]        ;104
00006a  f0200002          BIC      r0,r0,#2              ;104
00006e  f8c1019c          STR      r0,[r1,#0x19c]        ;104
000072  701a              STRB     r2,[r3,#0]            ;105
000074  4770              BX       lr
                  |L5.118|
000076  f8d0c004          LDR      r12,[r0,#4]           ;108
00007a  f8d101a4          LDR      r0,[r1,#0x1a4]        ;108
00007e  f36c0013          BFI      r0,r12,#0,#20         ;108
000082  f8c101a4          STR      r0,[r1,#0x1a4]        ;108
000086  6888              LDR      r0,[r1,#8]            ;109
000088  f0400004          ORR      r0,r0,#4              ;109
00008c  6088              STR      r0,[r1,#8]            ;109
00008e  f8d1019c          LDR      r0,[r1,#0x19c]        ;110
000092  f0200008          BIC      r0,r0,#8              ;110
000096  f8c1019c          STR      r0,[r1,#0x19c]        ;110
00009a  705a              STRB     r2,[r3,#1]            ;111
00009c  4770              BX       lr
                  |L5.158|
00009e  f8d0c004          LDR      r12,[r0,#4]           ;114
0000a2  f8d101a8          LDR      r0,[r1,#0x1a8]        ;114
0000a6  f36c0013          BFI      r0,r12,#0,#20         ;114
0000aa  f8c101a8          STR      r0,[r1,#0x1a8]        ;114
0000ae  6888              LDR      r0,[r1,#8]            ;115
0000b0  f0400008          ORR      r0,r0,#8              ;115
0000b4  6088              STR      r0,[r1,#8]            ;115
0000b6  f8d1019c          LDR      r0,[r1,#0x19c]        ;116
0000ba  f0200020          BIC      r0,r0,#0x20           ;116
0000be  f8c1019c          STR      r0,[r1,#0x19c]        ;116
0000c2  709a              STRB     r2,[r3,#2]            ;117
0000c4  4770              BX       lr
;;;127    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L5.200|
                          DCD      ||.data||

                          AREA ||i.TIMER_SetOneShotMode||, CODE, READONLY, ALIGN=2

                  TIMER_SetOneShotMode PROC
;;;157    
;;;158    void TIMER_SetOneShotMode(tTimerOpHandleInfo_t * ptTimerHandle)
000000  2201              MOVS     r2,#1
;;;159    {
;;;160    	switch( ptTimerHandle->ulTimerUnit ) {
000002  f8d0c000          LDR      r12,[r0,#0]
;;;161    	case TIMER_1UNIT:
;;;162    		TIMER->TIMER_RELOAD[0].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
000006  0791              LSLS     r1,r2,#30
;;;163    		SCRB->SYS_CLK_CTL.tBit.timclk0_en = ON;
;;;164    		TIMER->TIMER_CTRL.tBit.int_timer0_en = ON;
;;;165    		ulTimerOneShotEn[0] = 1;
000008  4b2e              LDR      r3,|L6.196|
00000a  f1bc0f00          CMP      r12,#0                ;160
00000e  d01d              BEQ      |L6.76|
000010  f1bc0f01          CMP      r12,#1                ;160
000014  d02e              BEQ      |L6.116|
000016  f1bc0f02          CMP      r12,#2                ;160
00001a  d03f              BEQ      |L6.156|
00001c  f1bc0f03          CMP      r12,#3                ;160
;;;166    		break;
;;;167    	case TIMER_2UNIT:
;;;168    		TIMER->TIMER_RELOAD[1].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;169    		SCRB->SYS_CLK_CTL.tBit.timclk1_en = ON;
;;;170    		TIMER->TIMER_CTRL.tBit.int_timer1_en = ON;
;;;171    		ulTimerOneShotEn[1] = 1;
;;;172    		break;
;;;173    	case TIMER_3UNIT:
;;;174    		TIMER->TIMER_RELOAD[2].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;175    		SCRB->SYS_CLK_CTL.tBit.timclk2_en = ON;
;;;176    		TIMER->TIMER_CTRL.tBit.int_timer2_en = ON;
;;;177    		ulTimerOneShotEn[2] = 1;
;;;178    		break;
;;;179    	case TIMER_4UNIT:
;;;180    		TIMER->TIMER_RELOAD[3].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;181    		SCRB->SYS_CLK_CTL.tBit.timclk3_en = ON;
;;;182    		TIMER->TIMER_CTRL.tBit.int_timer3_en = ON;
;;;183    		ulTimerOneShotEn[3] = 1;
;;;184    		break;
;;;185    	}
;;;186    }
000020  bf18              IT       NE
000022  4770              BXNE     lr
000024  f8d0c004          LDR      r12,[r0,#4]           ;180
000028  f8d101ac          LDR      r0,[r1,#0x1ac]        ;180
00002c  f36c0013          BFI      r0,r12,#0,#20         ;180
000030  f8c101ac          STR      r0,[r1,#0x1ac]        ;180
000034  6888              LDR      r0,[r1,#8]            ;181
000036  f0400010          ORR      r0,r0,#0x10           ;181
00003a  6088              STR      r0,[r1,#8]            ;181
00003c  f8d1019c          LDR      r0,[r1,#0x19c]        ;182
000040  f0400080          ORR      r0,r0,#0x80           ;182
000044  f8c1019c          STR      r0,[r1,#0x19c]        ;182
000048  70da              STRB     r2,[r3,#3]            ;183
00004a  4770              BX       lr
                  |L6.76|
00004c  f8d0c004          LDR      r12,[r0,#4]           ;162
000050  f8d101a0          LDR      r0,[r1,#0x1a0]        ;162
000054  f36c0013          BFI      r0,r12,#0,#20         ;162
000058  f8c101a0          STR      r0,[r1,#0x1a0]        ;162
00005c  6888              LDR      r0,[r1,#8]            ;163
00005e  f0400002          ORR      r0,r0,#2              ;163
000062  6088              STR      r0,[r1,#8]            ;163
000064  f8d1019c          LDR      r0,[r1,#0x19c]        ;164
000068  f0400002          ORR      r0,r0,#2              ;164
00006c  f8c1019c          STR      r0,[r1,#0x19c]        ;164
000070  701a              STRB     r2,[r3,#0]            ;165
000072  4770              BX       lr
                  |L6.116|
000074  f8d0c004          LDR      r12,[r0,#4]           ;168
000078  f8d101a4          LDR      r0,[r1,#0x1a4]        ;168
00007c  f36c0013          BFI      r0,r12,#0,#20         ;168
000080  f8c101a4          STR      r0,[r1,#0x1a4]        ;168
000084  6888              LDR      r0,[r1,#8]            ;169
000086  f0400004          ORR      r0,r0,#4              ;169
00008a  6088              STR      r0,[r1,#8]            ;169
00008c  f8d1019c          LDR      r0,[r1,#0x19c]        ;170
000090  f0400008          ORR      r0,r0,#8              ;170
000094  f8c1019c          STR      r0,[r1,#0x19c]        ;170
000098  705a              STRB     r2,[r3,#1]            ;171
00009a  4770              BX       lr
                  |L6.156|
00009c  f8d0c004          LDR      r12,[r0,#4]           ;174
0000a0  f8d101a8          LDR      r0,[r1,#0x1a8]        ;174
0000a4  f36c0013          BFI      r0,r12,#0,#20         ;174
0000a8  f8c101a8          STR      r0,[r1,#0x1a8]        ;174
0000ac  6888              LDR      r0,[r1,#8]            ;175
0000ae  f0400008          ORR      r0,r0,#8              ;175
0000b2  6088              STR      r0,[r1,#8]            ;175
0000b4  f8d1019c          LDR      r0,[r1,#0x19c]        ;176
0000b8  f0400020          ORR      r0,r0,#0x20           ;176
0000bc  f8c1019c          STR      r0,[r1,#0x19c]        ;176
0000c0  709a              STRB     r2,[r3,#2]            ;177
0000c2  4770              BX       lr
;;;187    
                          ENDP

                  |L6.196|
                          DCD      ||.data||

                          AREA ||i.TIMER_SetPeriodicMode||, CODE, READONLY, ALIGN=2

                  TIMER_SetPeriodicMode PROC
;;;127    
;;;128    void TIMER_SetPeriodicMode(tTimerOpHandleInfo_t * ptTimerHandle)
000000  f8d0c000          LDR      r12,[r0,#0]
;;;129    {
;;;130    	switch( ptTimerHandle->ulTimerUnit ) {
000004  2200              MOVS     r2,#0
;;;131    	case TIMER_1UNIT:
;;;132    		TIMER->TIMER_RELOAD[0].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;133    		SCRB->SYS_CLK_CTL.tBit.timclk0_en = ON;
;;;134    		TIMER->TIMER_CTRL.tBit.int_timer0_en = ON;
;;;135    		ulTimerOneShotEn[0] = 0;
000006  4b30              LDR      r3,|L7.200|
000008  f04f4180          MOV      r1,#0x40000000        ;132
00000c  f1bc0f00          CMP      r12,#0                ;130
000010  d01d              BEQ      |L7.78|
000012  f1bc0f01          CMP      r12,#1                ;130
000016  d02e              BEQ      |L7.118|
000018  f1bc0f02          CMP      r12,#2                ;130
00001c  d03f              BEQ      |L7.158|
00001e  f1bc0f03          CMP      r12,#3                ;130
;;;136    		break;
;;;137    	case TIMER_2UNIT:
;;;138    		TIMER->TIMER_RELOAD[1].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;139    		SCRB->SYS_CLK_CTL.tBit.timclk1_en = ON;
;;;140    		TIMER->TIMER_CTRL.tBit.int_timer1_en = ON;
;;;141    		ulTimerOneShotEn[1] = 0;
;;;142    		break;
;;;143    	case TIMER_3UNIT:
;;;144    		TIMER->TIMER_RELOAD[2].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;145    		SCRB->SYS_CLK_CTL.tBit.timclk2_en = ON;
;;;146    		TIMER->TIMER_CTRL.tBit.int_timer2_en = ON;
;;;147    		ulTimerOneShotEn[2] = 0;
;;;148    		break;
;;;149    	case TIMER_4UNIT:
;;;150    		TIMER->TIMER_RELOAD[3].tBit.timer_reload_val = ptTimerHandle->ulLoadCount;
;;;151    		SCRB->SYS_CLK_CTL.tBit.timclk3_en = ON;
;;;152    		TIMER->TIMER_CTRL.tBit.int_timer3_en = ON;
;;;153    		ulTimerOneShotEn[3] = 0;
;;;154    		break;
;;;155    	}
;;;156    }
000022  bf18              IT       NE
000024  4770              BXNE     lr
000026  f8d0c004          LDR      r12,[r0,#4]           ;150
00002a  f8d101ac          LDR      r0,[r1,#0x1ac]        ;150
00002e  f36c0013          BFI      r0,r12,#0,#20         ;150
000032  f8c101ac          STR      r0,[r1,#0x1ac]        ;150
000036  6888              LDR      r0,[r1,#8]            ;151
000038  f0400010          ORR      r0,r0,#0x10           ;151
00003c  6088              STR      r0,[r1,#8]            ;151
00003e  f8d1019c          LDR      r0,[r1,#0x19c]        ;152
000042  f0400080          ORR      r0,r0,#0x80           ;152
000046  f8c1019c          STR      r0,[r1,#0x19c]        ;152
00004a  70da              STRB     r2,[r3,#3]            ;153
00004c  4770              BX       lr
                  |L7.78|
00004e  f8d0c004          LDR      r12,[r0,#4]           ;132
000052  f8d101a0          LDR      r0,[r1,#0x1a0]        ;132
000056  f36c0013          BFI      r0,r12,#0,#20         ;132
00005a  f8c101a0          STR      r0,[r1,#0x1a0]        ;132
00005e  6888              LDR      r0,[r1,#8]            ;133
000060  f0400002          ORR      r0,r0,#2              ;133
000064  6088              STR      r0,[r1,#8]            ;133
000066  f8d1019c          LDR      r0,[r1,#0x19c]        ;134
00006a  f0400002          ORR      r0,r0,#2              ;134
00006e  f8c1019c          STR      r0,[r1,#0x19c]        ;134
000072  701a              STRB     r2,[r3,#0]            ;135
000074  4770              BX       lr
                  |L7.118|
000076  f8d0c004          LDR      r12,[r0,#4]           ;138
00007a  f8d101a4          LDR      r0,[r1,#0x1a4]        ;138
00007e  f36c0013          BFI      r0,r12,#0,#20         ;138
000082  f8c101a4          STR      r0,[r1,#0x1a4]        ;138
000086  6888              LDR      r0,[r1,#8]            ;139
000088  f0400004          ORR      r0,r0,#4              ;139
00008c  6088              STR      r0,[r1,#8]            ;139
00008e  f8d1019c          LDR      r0,[r1,#0x19c]        ;140
000092  f0400008          ORR      r0,r0,#8              ;140
000096  f8c1019c          STR      r0,[r1,#0x19c]        ;140
00009a  705a              STRB     r2,[r3,#1]            ;141
00009c  4770              BX       lr
                  |L7.158|
00009e  f8d0c004          LDR      r12,[r0,#4]           ;144
0000a2  f8d101a8          LDR      r0,[r1,#0x1a8]        ;144
0000a6  f36c0013          BFI      r0,r12,#0,#20         ;144
0000aa  f8c101a8          STR      r0,[r1,#0x1a8]        ;144
0000ae  6888              LDR      r0,[r1,#8]            ;145
0000b0  f0400008          ORR      r0,r0,#8              ;145
0000b4  6088              STR      r0,[r1,#8]            ;145
0000b6  f8d1019c          LDR      r0,[r1,#0x19c]        ;146
0000ba  f0400020          ORR      r0,r0,#0x20           ;146
0000be  f8c1019c          STR      r0,[r1,#0x19c]        ;146
0000c2  709a              STRB     r2,[r3,#2]            ;147
0000c4  4770              BX       lr
;;;157    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L7.200|
                          DCD      ||.data||

                          AREA ||i.TIMER_StartTimer||, CODE, READONLY, ALIGN=2

                  TIMER_StartTimer PROC
;;;187    
;;;188    void TIMER_StartTimer(uint32_t Unit)
000000  4b25              LDR      r3,|L8.152|
;;;189    {
;;;190    	switch( Unit ) {
;;;191    	case TIMER_1UNIT:
;;;192    		ulTimerIRQHandle[0] = 0;
;;;193    		if( ulTimerOneShotEn[0] ) {
000002  f8dfc098          LDR      r12,|L8.156|
000006  2200              MOVS     r2,#0                 ;189
;;;194    			TIMER->TIMER_OS_START.tBit.timer0_os_start = ON;
000008  f04f4180          MOV      r1,#0x40000000
00000c  b1b8              CBZ      r0,|L8.62|
00000e  2801              CMP      r0,#1                 ;190
000010  d024              BEQ      |L8.92|
000012  2802              CMP      r0,#2                 ;190
000014  d031              BEQ      |L8.122|
000016  2803              CMP      r0,#3                 ;190
;;;195    		}
;;;196    		else {
;;;197    			TIMER->TIMER_CTRL.tBit.timer0_en = ON;
;;;198    		}
;;;199    		break;
;;;200    	case TIMER_2UNIT:
;;;201    		ulTimerIRQHandle[1] = 0;
;;;202    		if( ulTimerOneShotEn[1] ) {
;;;203    			TIMER->TIMER_OS_START.tBit.timer1_os_start = ON;
;;;204    		}
;;;205    		else {
;;;206    			TIMER->TIMER_CTRL.tBit.timer1_en = ON;
;;;207    		}
;;;208    		break;
;;;209    	case TIMER_3UNIT:
;;;210    		ulTimerIRQHandle[2] = 0;
;;;211    		if( ulTimerOneShotEn[2] ) {
;;;212    			TIMER->TIMER_OS_START.tBit.timer2_os_start = ON;
;;;213    		}
;;;214    		else {
;;;215    			TIMER->TIMER_CTRL.tBit.timer2_en = ON;
;;;216    		}
;;;217    		break;
;;;218    	case TIMER_4UNIT:
;;;219    		ulTimerIRQHandle[3] = 0;
;;;220    		if( ulTimerOneShotEn[3] ) {
;;;221    			TIMER->TIMER_OS_START.tBit.timer3_os_start = ON;
;;;222    		}
;;;223    		else {
;;;224    			TIMER->TIMER_CTRL.tBit.timer3_en = ON;
;;;225    		}
;;;226    		break;
;;;227    	}
;;;228    }
000018  bf18              IT       NE
00001a  4770              BXNE     lr
00001c  60da              STR      r2,[r3,#0xc]          ;219  ; ulTimerIRQHandle
00001e  f89c0003          LDRB     r0,[r12,#3]           ;220  ; ulTimerOneShotEn
000022  2800              CMP      r0,#0                 ;220
000024  bf19              ITTEE    NE                    ;221
000026  f8d101b0          LDRNE    r0,[r1,#0x1b0]        ;221
00002a  f0400008          ORRNE    r0,r0,#8              ;221
00002e  f8d1019c          LDREQ    r0,[r1,#0x19c]        ;224
000032  f0400040          ORREQ    r0,r0,#0x40           ;224
000036  d00e              BEQ      |L8.86|
                  |L8.56|
000038  f8c101b0          STR      r0,[r1,#0x1b0]        ;212
00003c  4770              BX       lr
                  |L8.62|
00003e  601a              STR      r2,[r3,#0]            ;192  ; ulTimerIRQHandle
000040  f89c0000          LDRB     r0,[r12,#0]           ;193  ; ulTimerOneShotEn
000044  2800              CMP      r0,#0                 ;193
000046  bf14              ITE      NE                    ;194
000048  f8d101b0          LDRNE    r0,[r1,#0x1b0]        ;194
00004c  f8d1019c          LDREQ    r0,[r1,#0x19c]        ;197
000050  f0400001          ORR      r0,r0,#1              ;197
000054  d1f0              BNE      |L8.56|
                  |L8.86|
000056  f8c1019c          STR      r0,[r1,#0x19c]        ;215
00005a  4770              BX       lr
                  |L8.92|
00005c  605a              STR      r2,[r3,#4]            ;201  ; ulTimerIRQHandle
00005e  f89c0001          LDRB     r0,[r12,#1]           ;202  ; ulTimerOneShotEn
000062  2800              CMP      r0,#0                 ;202
000064  bf19              ITTEE    NE                    ;203
000066  f8d101b0          LDRNE    r0,[r1,#0x1b0]        ;203
00006a  f0400002          ORRNE    r0,r0,#2              ;203
00006e  f8d1019c          LDREQ    r0,[r1,#0x19c]        ;206
000072  f0400004          ORREQ    r0,r0,#4              ;206
000076  d1df              BNE      |L8.56|
000078  e7ed              B        |L8.86|
                  |L8.122|
00007a  609a              STR      r2,[r3,#8]            ;210  ; ulTimerIRQHandle
00007c  f89c0002          LDRB     r0,[r12,#2]           ;211  ; ulTimerOneShotEn
000080  2800              CMP      r0,#0                 ;211
000082  bf19              ITTEE    NE                    ;212
000084  f8d101b0          LDRNE    r0,[r1,#0x1b0]        ;212
000088  f0400004          ORRNE    r0,r0,#4              ;212
00008c  f8d1019c          LDREQ    r0,[r1,#0x19c]        ;215
000090  f0400010          ORREQ    r0,r0,#0x10           ;215
000094  d1d0              BNE      |L8.56|
000096  e7de              B        |L8.86|
;;;229    
                          ENDP

                  |L8.152|
                          DCD      ||.bss||
                  |L8.156|
                          DCD      ||.data||

                          AREA ||i.TIMER_StopTimer||, CODE, READONLY, ALIGN=2

                  TIMER_StopTimer PROC
;;;229    
;;;230    void TIMER_StopTimer(uint32_t Unit)
000000  4b28              LDR      r3,|L9.164|
;;;231    {
000002  2200              MOVS     r2,#0
;;;232    	switch( Unit ) {
;;;233    	case TIMER_1UNIT:
;;;234    		ulTimerIRQHandle[0] = 0;
;;;235    		TIMER->TIMER_CTRL.tBit.int_timer0_en = OFF;
000004  f04f4180          MOV      r1,#0x40000000
000008  b1b8              CBZ      r0,|L9.58|
00000a  2801              CMP      r0,#1                 ;232
00000c  d026              BEQ      |L9.92|
00000e  2802              CMP      r0,#2                 ;232
000010  d036              BEQ      |L9.128|
000012  2803              CMP      r0,#3                 ;232
;;;236    		TIMER->TIMER_CTRL.tBit.timer0_en = OFF;
;;;237    		SCRB->SYS_CLK_CTL.tBit.timclk0_en = OFF;
;;;238    		break;
;;;239    	case TIMER_2UNIT:
;;;240    		ulTimerIRQHandle[1] = 0;
;;;241    		TIMER->TIMER_CTRL.tBit.int_timer1_en = OFF;
;;;242    		TIMER->TIMER_CTRL.tBit.timer1_en = OFF;
;;;243    		SCRB->SYS_CLK_CTL.tBit.timclk1_en = OFF;
;;;244    		break;
;;;245    	case TIMER_3UNIT:
;;;246    		ulTimerIRQHandle[2] = 0;
;;;247    		TIMER->TIMER_CTRL.tBit.int_timer2_en = OFF;
;;;248    		TIMER->TIMER_CTRL.tBit.timer2_en = OFF;
;;;249    		SCRB->SYS_CLK_CTL.tBit.timclk2_en = OFF;
;;;250    		break;
;;;251    	case TIMER_4UNIT:
;;;252    		ulTimerIRQHandle[3] = 0;
;;;253    		TIMER->TIMER_CTRL.tBit.int_timer3_en = OFF;
;;;254    		TIMER->TIMER_CTRL.tBit.timer3_en = OFF;
;;;255    		SCRB->SYS_CLK_CTL.tBit.timclk3_en = OFF;
;;;256    		break;
;;;257    	}
;;;258    }
000014  bf18              IT       NE
000016  4770              BXNE     lr
000018  60da              STR      r2,[r3,#0xc]          ;252  ; ulTimerIRQHandle
00001a  f8d1019c          LDR      r0,[r1,#0x19c]        ;253
00001e  f0200080          BIC      r0,r0,#0x80           ;253
000022  f8c1019c          STR      r0,[r1,#0x19c]        ;253
000026  f8d1019c          LDR      r0,[r1,#0x19c]        ;254
00002a  f0200040          BIC      r0,r0,#0x40           ;254
00002e  f8c1019c          STR      r0,[r1,#0x19c]        ;254
000032  6888              LDR      r0,[r1,#8]            ;255
000034  f0200010          BIC      r0,r0,#0x10           ;255
000038  e020              B        |L9.124|
                  |L9.58|
00003a  601a              STR      r2,[r3,#0]            ;234  ; ulTimerIRQHandle
00003c  f8d1019c          LDR      r0,[r1,#0x19c]        ;235
000040  f0200002          BIC      r0,r0,#2              ;235
000044  f8c1019c          STR      r0,[r1,#0x19c]        ;235
000048  f8d1019c          LDR      r0,[r1,#0x19c]        ;236
00004c  f0200001          BIC      r0,r0,#1              ;236
000050  f8c1019c          STR      r0,[r1,#0x19c]        ;236
000054  6888              LDR      r0,[r1,#8]            ;237
000056  f0200002          BIC      r0,r0,#2              ;237
00005a  e00f              B        |L9.124|
                  |L9.92|
00005c  605a              STR      r2,[r3,#4]            ;240  ; ulTimerIRQHandle
00005e  f8d1019c          LDR      r0,[r1,#0x19c]        ;241
000062  f0200008          BIC      r0,r0,#8              ;241
000066  f8c1019c          STR      r0,[r1,#0x19c]        ;241
00006a  f8d1019c          LDR      r0,[r1,#0x19c]        ;242
00006e  f0200004          BIC      r0,r0,#4              ;242
000072  f8c1019c          STR      r0,[r1,#0x19c]        ;242
000076  6888              LDR      r0,[r1,#8]            ;243
000078  f0200004          BIC      r0,r0,#4              ;243
                  |L9.124|
00007c  6088              STR      r0,[r1,#8]            ;243
00007e  4770              BX       lr
                  |L9.128|
000080  609a              STR      r2,[r3,#8]            ;246  ; ulTimerIRQHandle
000082  f8d1019c          LDR      r0,[r1,#0x19c]        ;247
000086  f0200020          BIC      r0,r0,#0x20           ;247
00008a  f8c1019c          STR      r0,[r1,#0x19c]        ;247
00008e  f8d1019c          LDR      r0,[r1,#0x19c]        ;248
000092  f0200010          BIC      r0,r0,#0x10           ;248
000096  f8c1019c          STR      r0,[r1,#0x19c]        ;248
00009a  6888              LDR      r0,[r1,#8]            ;249
00009c  f0200008          BIC      r0,r0,#8              ;249
0000a0  e7ec              B        |L9.124|
;;;259    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
                          DCD      ||.bss||

                          AREA ||i.TIMER_WaitForIrq||, CODE, READONLY, ALIGN=2

                  TIMER_WaitForIrq PROC
;;;272    
;;;273    void TIMER_WaitForIrq(uint32_t Unit)
000000  4904              LDR      r1,|L10.20|
;;;274    {
;;;275    	while(ulTimerIRQHandle[Unit] == 0)
000002  bf00              NOP      
                  |L10.4|
000004  f8512020          LDR      r2,[r1,r0,LSL #2]
000008  2a00              CMP      r2,#0
00000a  d0fb              BEQ      |L10.4|
;;;276    	{
;;;277    //		__WFI();
;;;278    	}
;;;279    	ulTimerIRQHandle[Unit] = 0;
00000c  2200              MOVS     r2,#0
00000e  f8412020          STR      r2,[r1,r0,LSL #2]
;;;280    }
000012  4770              BX       lr
;;;281    
                          ENDP

                  |L10.20|
                          DCD      ||.bss||

                          AREA ||i.medium_delay||, CODE, READONLY, ALIGN=2

                  medium_delay PROC
;;;281    
;;;282    void medium_delay(uint32_t usec)
000000  b081              SUB      sp,sp,#4
;;;283    {
;;;284    	/*
;;;285    	 	Base on 96MHz
;;;286    	 	1 		:    1.43	us
;;;287    		5		:    2.78	us
;;;288    		10 		:    4.58	us
;;;289    		100 	:   36.08	us
;;;290    		1000	:  351.4	us
;;;291    		10000	: 3503.0	us
;;;292    		time(usec) = 2.854 x (Clock) - 3.019
;;;293    	*/
;;;294        __IO uint32_t i = 0;
000002  2100              MOVS     r1,#0
;;;295        uint32_t ulCheckClk;
;;;296        ulCheckClk = ((2854 * usec) - 3019)/1000;
000004  9100              STR      r1,[sp,#0]
000006  f2405193          MOV      r1,#0x593
00000a  4348              MULS     r0,r1,r0
00000c  490a              LDR      r1,|L11.56|
00000e  eb010040          ADD      r0,r1,r0,LSL #1
000012  f44f717a          MOV      r1,#0x3e8
000016  fbb0f0f1          UDIV     r0,r0,r1
;;;297    
;;;298        for (i = 0; i < ulCheckClk; i++)
00001a  2800              CMP      r0,#0
;;;299        {
;;;300            __ISB();
;;;301        }
;;;302    }
00001c  bf9c              ITT      LS
00001e  b001              ADDLS    sp,sp,#4
000020  4770              BXLS     lr
000022  bf00              NOP                            ;300
                  |L11.36|
000024  f3bf8f6f          ISB                            ;300
000028  9900              LDR      r1,[sp,#0]            ;298
00002a  1c49              ADDS     r1,r1,#1              ;298
00002c  9100              STR      r1,[sp,#0]            ;298
00002e  4288              CMP      r0,r1                 ;298
000030  d8f8              BHI      |L11.36|
000032  b001              ADD      sp,sp,#4
000034  4770              BX       lr
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      0xfffff435

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ulTimerIRQHandle
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  ulTimerOneShotEn
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\timer\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5b3278fc____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___7_timer_c_5b3278fc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5b3278fc____REVSH|
#line 402
|__asm___7_timer_c_5b3278fc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5b3278fc____RRX|
#line 587
|__asm___7_timer_c_5b3278fc____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
