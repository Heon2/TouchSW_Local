; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_noise.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_noise.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm_noise.crf ..\..\App\Algorithm\Noise\algorithm_noise.c]
                          THUMB

                          AREA ||i.algorithm_Check_FreqHopping||, CODE, READONLY, ALIGN=2

                  algorithm_Check_FreqHopping PROC
;;;438    
;;;439    bool_t algorithm_Check_FreqHopping(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;440    {
;;;441    	bool_t bRet = NO;
;;;442    
;;;443    #if USE_FORCE_FREQ_HOPPING
;;;444    	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;445    	{
;;;446    		ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;447    		bRet = YES;
;;;448    	}
;;;449    	return bRet;
;;;450    #endif /* USE_FORCE_FREQ_HOPPING */
;;;451    	if (ptAppInfo->eNoiseStatus == NOISE_FREQ_HOPPING)
000004  4e2a              LDR      r6,|L1.176|
000006  2700              MOVS     r7,#0                 ;441
000008  2501              MOVS     r5,#1
00000a  68f1              LDR      r1,[r6,#0xc]  ; ptAppInfo
00000c  463c              MOV      r4,r7
00000e  7c48              LDRB     r0,[r1,#0x11]
000010  2801              CMP      r0,#1
000012  d013              BEQ      |L1.60|
;;;452    	{
;;;453    		ptAppInfo->eNoiseStatus = NOISE_NONE;
;;;454    		ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;455    		ptAppInfo->ucHoppFrameCnt = 0;
;;;456    //		usHoppingStatus = FREQ_HOPPING_CHANGED;
;;;457    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;458    		ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
;;;459    		ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = NO;
;;;460    		ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
;;;461    		ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
;;;462    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;463    		bRet = YES;
;;;464    	}
;;;465    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;466    	else
;;;467    	{
;;;468    		if(HAL_GetHoppBaselineContinueEnControl())
000014  f7fffffe          BL       HAL_GetHoppBaselineContinueEnControl
000018  2800              CMP      r0,#0
00001a  d03b              BEQ      |L1.148|
;;;469    		{
;;;470    			if(thisInfo->bTouchExpect
00001c  68b0              LDR      r0,[r6,#8]  ; thisInfo
00001e  68f1              LDR      r1,[r6,#0xc]  ; ptAppInfo
000020  f5005080          ADD      r0,r0,#0x1000
000024  f890032e          LDRB     r0,[r0,#0x32e]
000028  b1a8              CBZ      r0,|L1.86|
;;;471    #if USED_PEN_MODE_OPERATION
;;;472    				|| IS_FINGER_PEN_SEARCH_MODE(HAL_GetSensingMode()) || hal_Info_GetPenDectionEnable()
;;;473    #endif
;;;474    			)
;;;475    			{
;;;476    				ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
00002a  618c              STR      r4,[r1,#0x18]
;;;477    				ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
00002c  61cc              STR      r4,[r1,#0x1c]
;;;478    
;;;479    				if(ptAppInfo->eSelectFreq != FREQ_MAIN && ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart == YES)
00002e  7cc8              LDRB     r0,[r1,#0x13]
000030  2801              CMP      r0,#1
000032  d039              BEQ      |L1.168|
000034  7dc8              LDRB     r0,[r1,#0x17]
000036  2801              CMP      r0,#1
000038  d008              BEQ      |L1.76|
00003a  e035              B        |L1.168|
                  |L1.60|
00003c  744c              STRB     r4,[r1,#0x11]         ;453
00003e  750d              STRB     r5,[r1,#0x14]         ;454
000040  754c              STRB     r4,[r1,#0x15]         ;455
000042  75cc              STRB     r4,[r1,#0x17]         ;458
000044  758c              STRB     r4,[r1,#0x16]         ;459
000046  618c              STR      r4,[r1,#0x18]         ;460
000048  61cc              STR      r4,[r1,#0x1c]         ;461
00004a  e015              B        |L1.120|
                  |L1.76|
;;;480    				{
;;;481    					ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
;;;482    					ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
00004c  75cc              STRB     r4,[r1,#0x17]
;;;483    					ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = YES;
00004e  758d              STRB     r5,[r1,#0x16]
;;;484    					ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
000050  750d              STRB     r5,[r1,#0x14]
;;;485    					ptAppInfo->ucHoppFrameCnt = 0;
000052  754c              STRB     r4,[r1,#0x15]
;;;486    					bRet = YES;
000054  e010              B        |L1.120|
                  |L1.86|
;;;487    				}
;;;488    			}
;;;489    			else
;;;490    			{
;;;491    				if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000056  7cc8              LDRB     r0,[r1,#0x13]
000058  2801              CMP      r0,#1
00005a  d003              BEQ      |L1.100|
;;;492    				{
;;;493    					ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt++;
;;;494    					if(ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt > DEF_FREQ_HOPPING_BASELINE_UPDATE_CHECK_CNT_THD)
;;;495    					{
;;;496    						ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
;;;497    						ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = YES;
;;;498    						ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = YES;
;;;499    						ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;500    						ptAppInfo->ucHoppFrameCnt = 0;
;;;501    						bRet = YES;
;;;502    					}
;;;503    				}
;;;504    				else
;;;505    				{
;;;506    					if(ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart == YES)
00005c  7dc8              LDRB     r0,[r1,#0x17]
00005e  2801              CMP      r0,#1
000060  d00c              BEQ      |L1.124|
000062  e021              B        |L1.168|
                  |L1.100|
000064  6988              LDR      r0,[r1,#0x18]         ;493
000066  1c40              ADDS     r0,r0,#1              ;493
000068  6188              STR      r0,[r1,#0x18]         ;493
00006a  2864              CMP      r0,#0x64              ;494
00006c  d91c              BLS      |L1.168|
00006e  618c              STR      r4,[r1,#0x18]         ;496
000070  75cd              STRB     r5,[r1,#0x17]         ;497
000072  758d              STRB     r5,[r1,#0x16]         ;498
000074  750d              STRB     r5,[r1,#0x14]         ;499
000076  754c              STRB     r4,[r1,#0x15]         ;500
                  |L1.120|
000078  2701              MOVS     r7,#1                 ;501
00007a  e015              B        |L1.168|
                  |L1.124|
;;;507    					{
;;;508    						ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt++;
00007c  69c8              LDR      r0,[r1,#0x1c]
00007e  1c40              ADDS     r0,r0,#1
000080  61c8              STR      r0,[r1,#0x1c]
;;;509    						if(ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt > DEF_FREQ_HOPPING_BASELINE_UPDATE_CONTI_CNT_THD)
000082  280a              CMP      r0,#0xa
000084  d910              BLS      |L1.168|
;;;510    						{
;;;511    							ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
000086  61cc              STR      r4,[r1,#0x1c]
;;;512    							ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
000088  75cc              STRB     r4,[r1,#0x17]
;;;513    							ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = YES;
00008a  758d              STRB     r5,[r1,#0x16]
;;;514    							ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
00008c  750d              STRB     r5,[r1,#0x14]
;;;515    							ptAppInfo->ucHoppFrameCnt = 0;
00008e  754c              STRB     r4,[r1,#0x15]
;;;516    							bRet = YES;
000090  2701              MOVS     r7,#1
000092  e009              B        |L1.168|
                  |L1.148|
;;;517    						}
;;;518    					}
;;;519    				}
;;;520    			}
;;;521    		}
;;;522    		else
;;;523    		{
;;;524    			ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
000094  68f0              LDR      r0,[r6,#0xc]  ; ptAppInfo
000096  61c4              STR      r4,[r0,#0x1c]
;;;525    			ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
000098  75c4              STRB     r4,[r0,#0x17]
;;;526    			if(ptAppInfo->eSelectFreq != FREQ_MAIN)
00009a  7cc1              LDRB     r1,[r0,#0x13]
00009c  2901              CMP      r1,#1
00009e  d003              BEQ      |L1.168|
;;;527    			{
;;;528    				ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = YES;
0000a0  7585              STRB     r5,[r0,#0x16]
;;;529    				ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
0000a2  7505              STRB     r5,[r0,#0x14]
;;;530    				ptAppInfo->ucHoppFrameCnt = 0;
0000a4  7544              STRB     r4,[r0,#0x15]
;;;531    				bRet = YES;
0000a6  e7e7              B        |L1.120|
                  |L1.168|
;;;532    			}
;;;533    		}
;;;534    	}
;;;535    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;536    
;;;537    	return bRet;
0000a8  4638              MOV      r0,r7
;;;538    }
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;539    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_detect||, CODE, READONLY, ALIGN=2

                  algorithm_noise_detect PROC
;;;425    
;;;426    bool_t algorithm_noise_detect(void)
000000  4805              LDR      r0,|L2.24|
;;;427    {
;;;428    	if(ptAppInfo->eNoiseStatus == NOISE_FREQ_HOPPING)
000002  68c0              LDR      r0,[r0,#0xc]  ; ptAppInfo
000004  7c41              LDRB     r1,[r0,#0x11]
000006  2901              CMP      r1,#1
;;;429    	{
;;;430    		ptAppInfo->eHoppingStatus = FREQ_HOPPING_CHANGED;
;;;431    		return TRUE;
;;;432    	}
;;;433    	else
;;;434    	{
;;;435    		return FALSE;
000008  bf1c              ITT      NE
00000a  2000              MOVNE    r0,#0
;;;436    	}
;;;437    }
00000c  4770              BXNE     lr
00000e  2101              MOVS     r1,#1                 ;430
000010  7501              STRB     r1,[r0,#0x14]         ;430
000012  4608              MOV      r0,r1                 ;431
000014  4770              BX       lr
;;;438    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_detection_v2||, CODE, READONLY, ALIGN=2

                  algorithm_noise_detection_v2 PROC
;;;227    uint8_t FreqChangeDelay = 0, CheckHoppingReliability = 0, HoppingThdCnt = 0;
;;;228    void algorithm_noise_detection_v2(eSENSING_MODE_t eSensingMode)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;229    {
;;;230    	int16_t i,cl;
;;;231    	uint8_t CurrFinger = 0;
;;;232    	uint8_t CurrHoppingMode = ptAppInfo->eSelectFreq;
000004  4da9              LDR      r5,|L3.684|
;;;233    	uint16_t CurrMaxVal = 0, CurrRealMaxVal = 0;
000006  2600              MOVS     r6,#0
000008  4603              MOV      r3,r0                 ;229
00000a  f8d5c00c          LDR      r12,[r5,#0xc]         ;232  ; ptAppInfo
;;;234    	int16_t Diff,RealDiff,DiffCnt;
;;;235    	int dist = 0;
;;;236    //#if USED_NORMAL_NI_SENSING
;;;237    //	uint16_t CurrMaxVal_NI = 0;
;;;238    //	uint16_t AvgMaxDiff_NI = 0;
;;;239    //#endif /* USED_NORMAL_NI_SENSING */
;;;240    	tCoordInfo_t 	*temp_coord;
;;;241    
;;;242    	temp_coord = &thisInfo->tCoord;
00000e  68aa              LDR      r2,[r5,#8]  ; thisInfo
000010  4630              MOV      r0,r6                 ;235
000012  f89c9013          LDRB     r9,[r12,#0x13]        ;232
000016  f2023a69          ADD      r10,r2,#0x369
00001a  4637              MOV      r7,r6
;;;243    
;;;244    //	if(HoppingInitFlag){			//For Idle mode
;;;245    //		HoppingInitFlag = NO;
;;;246    //		add_hopping_thd = 0;
;;;247    //	}
;;;248    
;;;249    	//If stay at hopping frequency for a long time, Go back to main frequency
;;;250    	if(CurrHoppingMode == FREQ_HOPP1)
;;;251    	{
;;;252    		if(thisInfo->bTouchExpect)
;;;253    			thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;254    
;;;255    		if(thisInfo->ulHoppMainRollbackCheckCount > thisInfo->ulHoppMainRollbackFrameCntTHD)
;;;256    		{
;;;257    			thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;258    			ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;
00001c  f04f0b01          MOV      r11,#1
000020  f5025180          ADD      r1,r2,#0x1000         ;252
000024  f1b90f02          CMP      r9,#2                 ;250
;;;259    			RealDiffIIR = 0;
;;;260    			RealDiffNoiseCnt = 0;
;;;261    			return;
;;;262    		}
;;;263    
;;;264    		if(IS_FINGER_PEN_MODE(eSensingMode))
;;;265    		{
;;;266    			thisInfo->ulHoppMainRollbackCheckCount += 2;
;;;267    		}
;;;268    		else
;;;269    		{
;;;270    			thisInfo->ulHoppMainRollbackCheckCount++;
;;;271    		}
;;;272    	}
;;;273    	else{
;;;274    		thisInfo->ulHoppMainRollbackCheckCount = 0;
000028  bf18              IT       NE
00002a  f8c173b8          STRNE    r7,[r1,#0x3b8]
00002e  d015              BEQ      |L3.92|
                  |L3.48|
;;;275    	}
;;;276    	
;;;277    	if(CurrHoppingMode == thisInfo->tNoise.ucPrevHoppingMode)
000030  f89132b2          LDRB     r3,[r1,#0x2b2]
000034  454b              CMP      r3,r9
000036  f04080ef          BNE.W    |L3.536|
;;;278    	{
;;;279    		if(CheckHoppingReliability)
00003a  786b              LDRB     r3,[r5,#1]  ; CheckHoppingReliability
00003c  b133              CBZ      r3,|L3.76|
;;;280    		{
;;;281    			if(!thisInfo->bTouchExpect){
00003e  f891332e          LDRB     r3,[r1,#0x32e]
000042  2b00              CMP      r3,#0
;;;282    				ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;		//Go back to previous state
000044  bf08              IT       EQ
000046  f88cb011          STRBEQ   r11,[r12,#0x11]
;;;283    			}
;;;284    			CheckHoppingReliability = NO;
00004a  706f              STRB     r7,[r5,#1]
                  |L3.76|
;;;285    		}
;;;286    		
;;;287    		if(FreqChangeDelay){
00004c  782b              LDRB     r3,[r5,#0]  ; FreqChangeDelay
00004e  2b00              CMP      r3,#0
;;;288    			FreqChangeDelay--;
000050  bf1c              ITT      NE
000052  1e58              SUBNE    r0,r3,#1
000054  7028              STRBNE   r0,[r5,#0]
000056  f04080e3          BNE.W    |L3.544|
00005a  e019              B        |L3.144|
                  |L3.92|
00005c  f891432e          LDRB     r4,[r1,#0x32e]        ;252
000060  2c00              CMP      r4,#0                 ;252
000062  bf18              IT       NE                    ;253
000064  f8c173b8          STRNE    r7,[r1,#0x3b8]        ;253
000068  e9d184ed          LDRD     r8,r4,[r1,#0x3b4]     ;253
00006c  4544              CMP      r4,r8                 ;255
00006e  d907              BLS      |L3.128|
000070  f8c173b8          STR      r7,[r1,#0x3b8]        ;258
000074  f88cb011          STRB     r11,[r12,#0x11]       ;258
000078  616f              STR      r7,[r5,#0x14]         ;260  ; RealDiffIIR
00007a  61af              STR      r7,[r5,#0x18]         ;261  ; RealDiffNoiseCnt
;;;289    			
;;;290    		}
;;;291    		else{
;;;292    			CurrFinger = thisInfo->tLabel.ucValidNum;
;;;293    			if(thisInfo->bTouchExpect)
;;;294    			{
;;;295    				if(CurrFinger == thisInfo->tNoise.ucPrevFinger)
;;;296    				{
;;;297    					for (cl = 0; cl < MAX_TOUCH_; cl++){
;;;298    						if(temp_coord->tPos.vusS[cl] > 0){
;;;299    							if( temp_coord->bIsMoving[cl] == YES || temp_coord->ucIdMappedCnt[cl] >= thisModeConf->Noise.ucDiscardFrameNum )	//IsMoving
;;;300    							{
;;;301    								CurrMaxVal = (thisInfo->tCoord.tPos.vusS[cl]+thisInfo->tCoord.RealMaxDelta[cl])>>2;
;;;302    								if(CurrRealMaxVal < CurrMaxVal){
;;;303    									CurrRealMaxVal = CurrMaxVal;
;;;304    									if(temp_coord->tOrgPastPos[0].vusS[cl] > 0){
;;;305    										dist = algorithm_coord_calc_distance(temp_coord->tOrgPastPos[0].tXY[cl],temp_coord->tPos.tXY[cl]);
;;;306    									}
;;;307    									else{
;;;308    										dist = 0;
;;;309    									}							
;;;310    								}
;;;311    							}
;;;312    						}//END touch ID loop
;;;313    					}
;;;314    					
;;;315    					RealDiff = 0;
;;;316    					DiffCnt = 0;
;;;317    					if(CurrRealMaxVal > 0){
;;;318    						if(thisModeConf->Noise.ucNoiseDetectMaxType == 1)
;;;319    							CurrRealMaxVal = thisInfo->tDelta.iMaxStrength;
;;;320    						for(i=0;i<NOISE_DETECTION_FRAME_NUM;i++){
;;;321    							if(thisInfo->tNoise.usMaxValBuf[i] > 0 && thisInfo->tNoise.ucTouchNumBuf[i] == CurrFinger){
;;;322    								Diff = abs(CurrRealMaxVal - thisInfo->tNoise.usMaxValBuf[i]);
;;;323    								RealDiff += Diff;
;;;324    								DiffCnt++;
;;;325    							}
;;;326    						}
;;;327    						if(DiffCnt) RealDiff /= DiffCnt;
;;;328    						
;;;329    						RealDiff = RealDiff - (dist>>(POS_BOOST_SHIFT_-3));
;;;330    						if(RealDiff < 0 ) RealDiff = 0;
;;;331    						RealDiffIIR = ((RealDiff + RealDiffIIR*3)>>2);
;;;332    						
;;;333    						thisInfo->tNoise.usMaxValBuf[thisInfo->tNoise.ucNoiseFrameCnt] = CurrRealMaxVal;
;;;334    						thisInfo->tNoise.ucTouchNumBuf[thisInfo->tNoise.ucNoiseFrameCnt] = CurrFinger;
;;;335    						if(thisInfo->tNoise.ucNoiseFrameCnt < NOISE_DETECTION_FRAME_NUM-1)	thisInfo->tNoise.ucNoiseFrameCnt++;
;;;336    						else																thisInfo->tNoise.ucNoiseFrameCnt = 0;
;;;337    					}			
;;;338    					if(RealDiffIIR < 10 && add_hopping_thd)
;;;339    						HoppingThdCnt++;
;;;340    					else
;;;341    						HoppingThdCnt = 0;
;;;342    					if(HoppingThdCnt > 10){
;;;343    						add_hopping_thd--;
;;;344    						HoppingThdCnt = 0;
;;;345    					}
;;;346    				}
;;;347    //				else{	//if(CurrFinger != thisInfo->tNoise.ucPrevFinger)
;;;348    //					algorithm_noise_initialize();	
;;;349    //				}
;;;350    			}
;;;351    			else 
;;;352    			{
;;;353    				if(!thisModeConf->Noise.bInitAddHoppingThd)
;;;354    				{
;;;355    					if(add_hopping_thd)
;;;356    						HoppingThdCnt++;
;;;357    					else
;;;358    						HoppingThdCnt = 0;
;;;359    					if(HoppingThdCnt > 100){
;;;360    						add_hopping_thd--;
;;;361    						HoppingThdCnt = 0;
;;;362    					}		
;;;363    				}		
;;;364    				else
;;;365    				{
;;;366    					add_hopping_thd = 0;
;;;367    				}
;;;368    				algorithm_noise_initialize();
;;;369    
;;;370    				RealDiffIIR = 0;
;;;371    				RealDiffNoiseCnt = 0;
;;;372    			}
;;;373    		}
;;;374    	}// Frequency Change
;;;375    	else
;;;376    	{
;;;377    //		thisInfo->tNoise.ucSetHoppingReady = NO;
;;;378    		FreqChangeDelay = 10;
;;;379    		algorithm_noise_initialize();
;;;380    	}
;;;381    
;;;382    	thisInfo->tNoise.ucPrevFinger = thisInfo->tLabel.ucValidNum;
;;;383    //	thisInfo->tNoise.usPrevMaxVal = thisInfo->tDelta.iMaxStrength;
;;;384    	thisInfo->tNoise.ucPrevHoppingMode = CurrHoppingMode;
;;;385    	
;;;386    	if( (RealDiffIIR > thisModeConf->Noise.ucHoppingThd + add_hopping_thd && 
;;;387    		((RealDiffNoiseCnt > thisModeConf->Noise.ucNoiseStartCntThd && thisModeConf->Noise.ucNoiseStartCntThd) || !thisModeConf->Noise.ucNoiseStartCntThd)) )
;;;388    	{
;;;389    //		dbgbuf[3]++;
;;;390    //		if(add_hopping_thd < RealDiffIIR - thisModeConf->Noise.ucHoppingThd)
;;;391    //			add_hopping_thd = RealDiffIIR - thisModeConf->Noise.ucHoppingThd;
;;;392    		add_hopping_thd += 15;
;;;393    		if(add_hopping_thd > thisModeConf->Noise.ucHoppingThd)
;;;394    			add_hopping_thd = thisModeConf->Noise.ucHoppingThd;
;;;395    
;;;396    		ptAppInfo->eNoiseStatus = NOISE_FREQ_HOPPING;
;;;397    		if(thisInfo->bTouchExpect)
;;;398    			CheckHoppingReliability = YES;
;;;399    
;;;400    		RealDiffIIR = 0;
;;;401    		RealDiffNoiseCnt = 0;
;;;402    	}
;;;403    	
;;;404    	if(thisModeConf->Noise.ucNoiseStartThd)
;;;405    	{
;;;406    		if(RealDiffIIR > thisModeConf->Noise.ucNoiseStartThd)
;;;407    		{
;;;408    			if(RealDiffNoiseCnt < 1800) RealDiffNoiseCnt++;
;;;409    		}
;;;410    		else if(RealDiffNoiseCnt > 0)
;;;411    		{
;;;412    			RealDiffNoiseCnt--;
;;;413    		}
;;;414    	}
;;;415    
;;;416    //	dbgbuf[0] = ptAppInfo->eSelectFreq;
;;;417    //	dbgbuf[1] = RealDiffIIR;
;;;418    //	dbgbuf[2] = add_hopping_thd;
;;;419    //	dbgbuf[3] = CurrRealMaxVal;
;;;420    //	dbgbuf[4] = HoppingRollBackCnt;
;;;421    //
;;;422    //	dbgbuf[8] = thisInfo->tCoord.tPos.vusS[0];
;;;423    //	dbgbuf[9] = thisInfo->tCoord.RealMaxDelta[0];
;;;424    }
00007c  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.128|
000080  f4134f80          TST      r3,#0x4000            ;264
000084  bf14              ITE      NE                    ;266
000086  1ca3              ADDNE    r3,r4,#2              ;266
000088  1c63              ADDEQ    r3,r4,#1              ;270
00008a  f8c133b8          STR      r3,[r1,#0x3b8]        ;264
00008e  e7cf              B        |L3.48|
                  |L3.144|
000090  f89282b6          LDRB     r8,[r2,#0x2b6]        ;292
000094  f891232e          LDRB     r2,[r1,#0x32e]        ;293
000098  2a00              CMP      r2,#0                 ;293
00009a  d07d              BEQ      |L3.408|
00009c  f89112b1          LDRB     r1,[r1,#0x2b1]        ;295
0000a0  4541              CMP      r1,r8                 ;295
0000a2  bf08              IT       EQ                    ;297
0000a4  2400              MOVEQ    r4,#0                 ;297
0000a6  d178              BNE      |L3.410|
                  |L3.168|
0000a8  eb0a0244          ADD      r2,r10,r4,LSL #1      ;298
0000ac  f8b21186          LDRH     r1,[r2,#0x186]        ;298
0000b0  b349              CBZ      r1,|L3.262|
0000b2  eb0a0104          ADD      r1,r10,r4             ;299
0000b6  f8913d48          LDRB     r3,[r1,#0xd48]        ;299
0000ba  2b01              CMP      r3,#1                 ;299
0000bc  d006              BEQ      |L3.204|
0000be  686b              LDR      r3,[r5,#4]            ;299  ; thisModeConf
0000c0  f8911caa          LDRB     r1,[r1,#0xcaa]        ;299
0000c4  f89331df          LDRB     r3,[r3,#0x1df]        ;299
0000c8  4299              CMP      r1,r3                 ;299
0000ca  d31c              BCC      |L3.262|
                  |L3.204|
0000cc  68a9              LDR      r1,[r5,#8]            ;301  ; thisInfo
0000ce  eb010144          ADD      r1,r1,r4,LSL #1       ;301
0000d2  f8b134ef          LDRH     r3,[r1,#0x4ef]        ;301
0000d6  f5015180          ADD      r1,r1,#0x1000         ;301
0000da  f8b11115          LDRH     r1,[r1,#0x115]        ;301
0000de  4419              ADD      r1,r1,r3              ;301
0000e0  0889              LSRS     r1,r1,#2              ;301
0000e2  42b1              CMP      r1,r6                 ;302
0000e4  d90f              BLS      |L3.262|
0000e6  f8b20708          LDRH     r0,[r2,#0x708]        ;304
0000ea  460e              MOV      r6,r1                 ;303
0000ec  b158              CBZ      r0,|L3.262|
0000ee  eb0a01c4          ADD      r1,r10,r4,LSL #3      ;305
0000f2  f8d12136          LDR      r2,[r1,#0x136]        ;305
0000f6  f8d1313a          LDR      r3,[r1,#0x13a]        ;305
0000fa  f8d106b8          LDR      r0,[r1,#0x6b8]        ;305
0000fe  f8d116bc          LDR      r1,[r1,#0x6bc]        ;305
000102  f7fffffe          BL       algorithm_coord_calc_distance
                  |L3.262|
000106  1c61              ADDS     r1,r4,#1              ;308
000108  b20c              SXTH     r4,r1                 ;308
00010a  2c0a              CMP      r4,#0xa               ;308
00010c  dbcc              BLT      |L3.168|
00010e  2200              MOVS     r2,#0                 ;315
000110  4613              MOV      r3,r2                 ;316
000112  2e00              CMP      r6,#0                 ;317
000114  d054              BEQ      |L3.448|
000116  6869              LDR      r1,[r5,#4]            ;318  ; thisModeConf
000118  f89111fb          LDRB     r1,[r1,#0x1fb]        ;318
00011c  2901              CMP      r1,#1                 ;318
00011e  d103              BNE      |L3.296|
000120  68a9              LDR      r1,[r5,#8]            ;319  ; thisInfo
000122  f8b11015          LDRH     r1,[r1,#0x15]         ;319
000126  b28e              UXTH     r6,r1                 ;319
                  |L3.296|
000128  f8d5c008          LDR      r12,[r5,#8]           ;322  ; thisInfo
00012c  2100              MOVS     r1,#0                 ;320
00012e  bf00              NOP                            ;321
                  |L3.304|
000130  eb0c0441          ADD      r4,r12,r1,LSL #1      ;321
000134  f5045480          ADD      r4,r4,#0x1000         ;321
000138  f8b442b9          LDRH     r4,[r4,#0x2b9]        ;321
00013c  b174              CBZ      r4,|L3.348|
00013e  eb0c0a01          ADD      r10,r12,r1            ;321
000142  f50a5a80          ADD      r10,r10,#0x1000       ;321
000146  f89aa2e1          LDRB     r10,[r10,#0x2e1]      ;321
00014a  45c2              CMP      r10,r8                ;321
00014c  d106              BNE      |L3.348|
00014e  1b34              SUBS     r4,r6,r4              ;322
000150  bf48              IT       MI                    ;322
000152  4264              RSBMI    r4,r4,#0              ;322
000154  4422              ADD      r2,r2,r4              ;323
000156  1c5b              ADDS     r3,r3,#1              ;323
000158  b212              SXTH     r2,r2                 ;323
00015a  b21b              SXTH     r3,r3                 ;324
                  |L3.348|
00015c  1c49              ADDS     r1,r1,#1              ;324
00015e  b209              SXTH     r1,r1                 ;324
000160  2914              CMP      r1,#0x14              ;324
000162  dbe5              BLT      |L3.304|
000164  2b00              CMP      r3,#0                 ;327
000166  bf1c              ITT      NE                    ;327
000168  fb92f1f3          SDIVNE   r1,r2,r3              ;327
00016c  b20a              SXTHNE   r2,r1                 ;327
00016e  eba21060          SUB      r0,r2,r0,ASR #5       ;329
000172  b200              SXTH     r0,r0                 ;329
000174  2800              CMP      r0,#0                 ;330
000176  bfb8              IT       LT                    ;330
000178  2000              MOVLT    r0,#0                 ;330
00017a  6969              LDR      r1,[r5,#0x14]         ;331  ; RealDiffIIR
00017c  eb010141          ADD      r1,r1,r1,LSL #1       ;331
000180  4408              ADD      r0,r0,r1              ;331
000182  1080              ASRS     r0,r0,#2              ;331
000184  6168              STR      r0,[r5,#0x14]         ;333  ; RealDiffIIR
000186  f50c5080          ADD      r0,r12,#0x1000        ;333
00018a  f89012f5          LDRB     r1,[r0,#0x2f5]        ;333
00018e  eb0c0141          ADD      r1,r12,r1,LSL #1      ;333
000192  f5015180          ADD      r1,r1,#0x1000         ;333
000196  e001              B        |L3.412|
                  |L3.408|
000198  e023              B        |L3.482|
                  |L3.410|
00019a  e041              B        |L3.544|
                  |L3.412|
00019c  f8a162b9          STRH     r6,[r1,#0x2b9]        ;333
0001a0  f89012f5          LDRB     r1,[r0,#0x2f5]        ;334
0001a4  f24122e1          MOV      r2,#0x12e1            ;334
0001a8  4462              ADD      r2,r2,r12             ;334
0001aa  f8018002          STRB     r8,[r1,r2]            ;334
0001ae  f89012f5          LDRB     r1,[r0,#0x2f5]        ;335
0001b2  2913              CMP      r1,#0x13              ;335
0001b4  bf3a              ITTE     CC                    ;335
0001b6  1c49              ADDCC    r1,r1,#1              ;335
0001b8  f88012f5          STRBCC   r1,[r0,#0x2f5]        ;335
0001bc  f88072f5          STRBCS   r7,[r0,#0x2f5]        ;336
                  |L3.448|
0001c0  6968              LDR      r0,[r5,#0x14]         ;338  ; RealDiffIIR
0001c2  280a              CMP      r0,#0xa               ;338
0001c4  da0b              BGE      |L3.478|
0001c6  6928              LDR      r0,[r5,#0x10]         ;338  ; add_hopping_thd
0001c8  b148              CBZ      r0,|L3.478|
0001ca  78a9              LDRB     r1,[r5,#2]            ;339  ; HoppingThdCnt
0001cc  1c49              ADDS     r1,r1,#1              ;339
0001ce  b2c9              UXTB     r1,r1                 ;339
0001d0  70a9              STRB     r1,[r5,#2]            ;339
0001d2  290a              CMP      r1,#0xa               ;342
0001d4  d924              BLS      |L3.544|
0001d6  1e40              SUBS     r0,r0,#1              ;339
0001d8  6128              STR      r0,[r5,#0x10]         ;344  ; add_hopping_thd
0001da  70af              STRB     r7,[r5,#2]            ;344
0001dc  e020              B        |L3.544|
                  |L3.478|
0001de  70af              STRB     r7,[r5,#2]            ;341
0001e0  e01e              B        |L3.544|
                  |L3.482|
0001e2  6868              LDR      r0,[r5,#4]            ;353  ; thisModeConf
0001e4  f89001fc          LDRB     r0,[r0,#0x1fc]        ;353
0001e8  2800              CMP      r0,#0                 ;353
0001ea  bf18              IT       NE                    ;366
0001ec  612f              STRNE    r7,[r5,#0x10]         ;366  ; add_hopping_thd
0001ee  d004              BEQ      |L3.506|
                  |L3.496|
0001f0  f7fffffe          BL       algorithm_noise_initialize
0001f4  616f              STR      r7,[r5,#0x14]         ;371  ; RealDiffIIR
0001f6  61af              STR      r7,[r5,#0x18]         ;371  ; RealDiffNoiseCnt
0001f8  e012              B        |L3.544|
                  |L3.506|
0001fa  6928              LDR      r0,[r5,#0x10]         ;355  ; add_hopping_thd
0001fc  2800              CMP      r0,#0                 ;355
0001fe  bf08              IT       EQ                    ;358
000200  70af              STRBEQ   r7,[r5,#2]            ;358
000202  d0f5              BEQ      |L3.496|
000204  78a9              LDRB     r1,[r5,#2]            ;356  ; HoppingThdCnt
000206  1c49              ADDS     r1,r1,#1              ;356
000208  b2c9              UXTB     r1,r1                 ;356
00020a  70a9              STRB     r1,[r5,#2]            ;356
00020c  2964              CMP      r1,#0x64              ;359
00020e  d9ef              BLS      |L3.496|
000210  1e40              SUBS     r0,r0,#1              ;356
000212  6128              STR      r0,[r5,#0x10]         ;361  ; add_hopping_thd
000214  70af              STRB     r7,[r5,#2]            ;361
000216  e7eb              B        |L3.496|
                  |L3.536|
000218  200a              MOVS     r0,#0xa               ;378
00021a  7028              STRB     r0,[r5,#0]            ;378
00021c  f7fffffe          BL       algorithm_noise_initialize
                  |L3.544|
000220  68a8              LDR      r0,[r5,#8]            ;382  ; thisInfo
000222  f89012b6          LDRB     r1,[r0,#0x2b6]        ;382
000226  f5005080          ADD      r0,r0,#0x1000         ;382
00022a  f88012b1          STRB     r1,[r0,#0x2b1]        ;382
00022e  f88092b2          STRB     r9,[r0,#0x2b2]        ;384
000232  686a              LDR      r2,[r5,#4]            ;386  ; thisModeConf
000234  692b              LDR      r3,[r5,#0x10]         ;386  ; add_hopping_thd
000236  696c              LDR      r4,[r5,#0x14]         ;386  ; RealDiffIIR
000238  f89211e1          LDRB     r1,[r2,#0x1e1]        ;386
00023c  eb010c03          ADD      r12,r1,r3             ;386
000240  45a4              CMP      r12,r4                ;386
000242  da07              BGE      |L3.596|
000244  f892c1ff          LDRB     r12,[r2,#0x1ff]       ;386
000248  69ac              LDR      r4,[r5,#0x18]         ;386  ; RealDiffNoiseCnt
00024a  45a4              CMP      r12,r4                ;386
00024c  db15              BLT      |L3.634|
00024e  f1bc0f00          CMP      r12,#0                ;386
000252  d012              BEQ      |L3.634|
                  |L3.596|
000254  f89201fe          LDRB     r0,[r2,#0x1fe]        ;404
000258  2800              CMP      r0,#0                 ;404
00025a  bf08              IT       EQ
00025c  e8bd9ff0          POPEQ    {r4-r12,pc}
000260  6969              LDR      r1,[r5,#0x14]         ;406  ; RealDiffIIR
000262  4288              CMP      r0,r1                 ;406
000264  69a8              LDR      r0,[r5,#0x18]         ;406  ; RealDiffNoiseCnt
000266  da18              BGE      |L3.666|
000268  f5b06fe1          CMP      r0,#0x708             ;408
00026c  bfb4              ITE      LT                    ;408
00026e  1c40              ADDLT    r0,r0,#1              ;408
000270  e8bd9ff0          POPGE    {r4-r12,pc}
                  |L3.628|
000274  61a8              STR      r0,[r5,#0x18]         ;408  ; RealDiffNoiseCnt
000276  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.634|
00027a  330f              ADDS     r3,r3,#0xf
00027c  612b              STR      r3,[r5,#0x10]         ;394  ; add_hopping_thd
00027e  4299              CMP      r1,r3                 ;394
000280  db11              BLT      |L3.678|
                  |L3.642|
000282  68e9              LDR      r1,[r5,#0xc]          ;396  ; ptAppInfo
000284  f881b011          STRB     r11,[r1,#0x11]        ;396
000288  f890032e          LDRB     r0,[r0,#0x32e]        ;397
00028c  2800              CMP      r0,#0                 ;397
00028e  bf18              IT       NE                    ;398
000290  f885b001          STRBNE   r11,[r5,#1]           ;398
000294  616f              STR      r7,[r5,#0x14]         ;401  ; RealDiffIIR
000296  61af              STR      r7,[r5,#0x18]         ;397  ; RealDiffNoiseCnt
000298  e7dc              B        |L3.596|
                  |L3.666|
00029a  2800              CMP      r0,#0                 ;410
00029c  bfc8              IT       GT                    ;410
00029e  1e40              SUBGT    r0,r0,#1              ;410
0002a0  dce8              BGT      |L3.628|
0002a2  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.678|
0002a6  6129              STR      r1,[r5,#0x10]         ;394  ; add_hopping_thd
0002a8  e7eb              B        |L3.642|
;;;425    
                          ENDP

0002aa  0000              DCW      0x0000
                  |L3.684|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_init||, CODE, READONLY, ALIGN=2

                  algorithm_noise_init PROC
;;;46     
;;;47     void algorithm_noise_init(void)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	thisModeConf = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c04              LDR      r4,|L4.24|
;;;50     	thisInfo = algorithm_GetInfo();
000008  6060              STR      r0,[r4,#4]  ; thisModeConf
00000a  f7fffffe          BL       algorithm_GetInfo
;;;51     	ptAppInfo = app_GetInfo();
00000e  60a0              STR      r0,[r4,#8]  ; thisInfo
000010  f7fffffe          BL       app_GetInfo
000014  60e0              STR      r0,[r4,#0xc]  ; ptAppInfo
;;;52     }
000016  bd10              POP      {r4,pc}
;;;53     
                          ENDP

                  |L4.24|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_initialize||, CODE, READONLY, ALIGN=2

                  algorithm_noise_initialize PROC
;;;53     
;;;54     void algorithm_noise_initialize(void)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
;;;56     	thisInfo->tNoise.ucInitFCnt = 0;
000002  4d15              LDR      r5,|L5.88|
000004  2400              MOVS     r4,#0
;;;57     	thisInfo->tNoise.ucFCnt = 0;
;;;58     	thisInfo->tNoise.ucBCnt = 0;
;;;59     	thisInfo->tNoise.bDetectStart = NO;
;;;60     	thisInfo->tNoise.ucPrevFinger = 0;
;;;61     	thisInfo->tNoise.ulSumMaxDiff = 0;
;;;62     	thisInfo->tNoise.ucTouchOffCnt = 0;
;;;63     	thisInfo->tNoise.NoiseFlag = 0;
;;;64     
;;;65     	memset((void *)&thisInfo->tNoise.usMaxValBuf, 0x00, sizeof(thisInfo->tNoise.usMaxValBuf));
000006  2128              MOVS     r1,#0x28
000008  68aa              LDR      r2,[r5,#8]            ;56  ; thisInfo
00000a  f5025080          ADD      r0,r2,#0x1000         ;56
00000e  f88042ab          STRB     r4,[r0,#0x2ab]        ;56
000012  f88042ac          STRB     r4,[r0,#0x2ac]        ;57
000016  f88042ad          STRB     r4,[r0,#0x2ad]        ;58
00001a  f88042b0          STRB     r4,[r0,#0x2b0]        ;59
00001e  f88042b1          STRB     r4,[r0,#0x2b1]        ;60
000022  f8c042b5          STR      r4,[r0,#0x2b5]        ;61
000026  f88042f7          STRB     r4,[r0,#0x2f7]        ;62
00002a  f88042f9          STRB     r4,[r0,#0x2f9]        ;63
00002e  f24120b9          MOV      r0,#0x12b9
000032  4410              ADD      r0,r0,r2
000034  f7fffffe          BL       __aeabi_memclr
;;;66     	memset((void *)&thisInfo->tNoise.ucTouchNumBuf, 0, sizeof(thisInfo->tNoise.ucTouchNumBuf));
000038  68a8              LDR      r0,[r5,#8]  ; thisInfo
00003a  f5005080          ADD      r0,r0,#0x1000
00003e  f8c042e1          STR      r4,[r0,#0x2e1]
000042  f8c042e5          STR      r4,[r0,#0x2e5]
000046  f8c042e9          STR      r4,[r0,#0x2e9]
00004a  f8c042ed          STR      r4,[r0,#0x2ed]
00004e  f8c042f1          STR      r4,[r0,#0x2f1]
;;;67     	thisInfo->tNoise.ucNoiseFrameCnt = 0;
000052  f88042f5          STRB     r4,[r0,#0x2f5]
;;;68     }
000056  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

                  |L5.88|
                          DCD      ||.data||

                          AREA ||i.algorithm_noise_process||, CODE, READONLY, ALIGN=2

                  algorithm_noise_process PROC
;;;676    
;;;677    void algorithm_noise_process(eSENSING_MODE_t eSensingMode)
000000  4904              LDR      r1,|L6.20|
;;;678    {
;;;679    #if (NOISE_DETECTION_VER1_EN == YES)
;;;680    	if(thisModeConf->Noise.ucNoiseDetectionMode == 1)
;;;681    		algorithm_noise_detection();
;;;682    	else
;;;683    #endif		
;;;684    	if(thisModeConf->Noise.ucNoiseDetectionMode == 2)
000002  6849              LDR      r1,[r1,#4]  ; thisModeConf
000004  f89111de          LDRB     r1,[r1,#0x1de]
000008  2902              CMP      r1,#2
;;;685    		algorithm_noise_detection_v2(eSensingMode);
;;;686    }
00000a  bf18              IT       NE
00000c  4770              BXNE     lr
00000e  f7ffbffe          B.W      algorithm_noise_detection_v2
;;;687    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  FreqChangeDelay
000000  00                DCB      0x00
                  CheckHoppingReliability
000001  00                DCB      0x00
                  HoppingThdCnt
000002  0000              DCB      0x00,0x00
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  add_hopping_thd
                          DCD      0x00000000
                  RealDiffIIR
                          DCD      0x00000000
                  RealDiffNoiseCnt
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  DiffIIR
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  test_bHoppingFlag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Noise\\algorithm_noise.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_noise_c_8f65c579____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____REVSH|
#line 402
|__asm___17_algorithm_noise_c_8f65c579____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_noise_c_8f65c579____RRX|
#line 587
|__asm___17_algorithm_noise_c_8f65c579____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
