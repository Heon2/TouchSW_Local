; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\app_normal.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\app_normal.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\app_normal.crf ..\..\App\app_normal.c]
                          THUMB

                          AREA ||i.app_normal_Init||, CODE, READONLY, ALIGN=2

                  app_normal_Init PROC
;;;63     
;;;64     void app_normal_Init(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;67     	sptAlgorithmInfo = algorithm_GetInfo();
000002  f7fffffe          BL       algorithm_GetInfo
000006  4c04              LDR      r4,|L1.24|
;;;68     #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;69     
;;;70     #if USED_NOISE_HOPPING_FREQ
;;;71     	thisCommonConf   = app_GetCommonConfig();
000008  6060              STR      r0,[r4,#4]  ; sptAlgorithmInfo
00000a  f7fffffe          BL       app_GetCommonConfig
;;;72     #endif
;;;73     	thisInfo         = algorithm_GetInfo();
00000e  6020              STR      r0,[r4,#0]  ; thisCommonConf
000010  f7fffffe          BL       algorithm_GetInfo
000014  60a0              STR      r0,[r4,#8]  ; thisInfo
;;;74     #if USED_PEN_MODE_OPERATION
;;;75     	app_normal_Init_param();
;;;76     #endif
;;;77     }
000016  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  |L1.24|
                          DCD      ||.data||

                          AREA ||i.app_normal_oper_handler||, CODE, READONLY, ALIGN=2

                  app_normal_oper_handler PROC
;;;97     
;;;98     eTouchOperMainState_t app_normal_oper_handler(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;99     {
;;;100    	eTouchOperMainState_t main_state;
;;;101    	eNormalOperSubState_t sub_state;
;;;102    	bool_t bLoop = YES;
000004  f04f0901          MOV      r9,#1
;;;103    	eProtocolMode_t currMode, prevMode = M_TOUCH_NORMAL;
000008  2600              MOVS     r6,#0
00000a  f7fffffe          BL       algorithm_GetInfo
00000e  4dad              LDR      r5,|L2.708|
000010  6068              STR      r0,[r5,#4]  ; sptAlgorithmInfo
000012  f7fffffe          BL       app_GetCommonConfig
000016  6028              STR      r0,[r5,#0]  ; thisCommonConf
000018  f7fffffe          BL       algorithm_GetInfo
;;;104    	app_normal_Init();
;;;105    #if USED_PEN_MODE_OPERATION
;;;106    	Interrupt_Init();
;;;107    #endif /* USED_PEN_MODE_OPERATION */
;;;108    
;;;109    	main_state = TOUCH_MAIN_OPERATION_NORMAL;
;;;110    	sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;111    	thisInfo->bDiagMode = NO;
00001c  60a8              STR      r0,[r5,#8]  ; thisInfo
00001e  f04f0801          MOV      r8,#1                 ;109
000022  f5005080          ADD      r0,r0,#0x1000
000026  2700              MOVS     r7,#0
000028  4644              MOV      r4,r8                 ;110
00002a  f88073a2          STRB     r7,[r0,#0x3a2]
00002e  46c2              MOV      r10,r8                ;102
                  |L2.48|
;;;112    
;;;113    #if USED_GET_REVERSE_CRC_VALUE
;;;114    extern uint16_t GetCRC_PreviousCRCValue(uint16_t usOutputValue, uint16_t usInputValue);
;;;115    extern uint16_t GetCRC_CRCMatchingInputValue(uint16_t usPrevCRCValue, uint16_t usOutputValue);
;;;116    	while(1)
;;;117    	{
;;;118    		if(usGetPreviosCRCValue_Start)
;;;119    		{
;;;120    			usGetPreviosCRCValue_Start = 0;
;;;121    			usPreviousCRCValue = GetCRC_PreviousCRCValue(usOutputValue, usInputValue);
;;;122    		}
;;;123    
;;;124    		if(usGetCRCMatchingInputValue_Start)
;;;125    		{
;;;126    			usGetCRCMatchingInputValue_Start = 0;
;;;127    			usInputValue = GetCRC_CRCMatchingInputValue(usPreviousCRCValue, usOutputValue);
;;;128    		}
;;;129    	}
;;;130    #endif
;;;131    
;;;132        while(bLoop)
;;;133        {
;;;134        	switch(sub_state)
000030  2c07              CMP      r4,#7
000032  d06c              BEQ      |L2.270|
000034  dc07              BGT      |L2.70|
000036  2c07              CMP      r4,#7
000038  d24a              BCS      |L2.208|
00003a  e8dff004          TBB      [pc,r4]
00003e  d214              DCB      0xd2,0x14
000040  4428363d          DCB      0x44,0x28,0x36,0x3d
000044  4d00              DCB      0x4d,0x00
                  |L2.70|
000046  2c11              CMP      r4,#0x11
000048  d07a              BEQ      |L2.320|
00004a  dc06              BGT      |L2.90|
00004c  2c0e              CMP      r4,#0xe
00004e  d063              BEQ      |L2.280|
000050  2c0f              CMP      r4,#0xf
000052  d079              BEQ      |L2.328|
000054  2c10              CMP      r4,#0x10
000056  d075              BEQ      |L2.324|
000058  e0c3              B        |L2.482|
                  |L2.90|
00005a  2c14              CMP      r4,#0x14
00005c  d073              BEQ      |L2.326|
00005e  2c1a              CMP      r4,#0x1a
000060  f000812d          BEQ.W    |L2.702|
000064  e0bd              B        |L2.482|
;;;135        	{
;;;136    			case TOUCH_NORMAL_OPER_ENTER:
;;;137    			{
;;;138    				TEST_LOCAL_STATE = 0;
;;;139    #if USED_S3_MODE_FUNCTION
;;;140    				/*
;;;141    				 * Enter S3 Mode, If LCD On Signal is low for a set period of time.
;;;142    				 */
;;;143    				if(module_Init_Signal() == NO)
;;;144    				{
;;;145    					protocol_swip_SetMode(M_TOUCH_LPWG);
;;;146    					break;
;;;147    				}
;;;148    				module_start_delay();
;;;149    #else /* USED_S3_MODE_FUNCTION */
;;;150    
;;;151    	#if USED_SMT_OP_MODE
;;;152    				if(module_Check_SMT_Mode())
000066  60ef              STR      r7,[r5,#0xc]  ; TEST_LOCAL_STATE
000068  f7fffffe          BL       module_Check_SMT_Mode
00006c  b118              CBZ      r0,|L2.118|
;;;153    				{
;;;154    					module_Enter_SMT_Mode();
00006e  f7fffffe          BL       module_Enter_SMT_Mode
;;;155    					sub_state = TOUCH_NORMAL_SMT_MODE;
000072  2402              MOVS     r4,#2
;;;156    					break;
000074  e0b5              B        |L2.482|
                  |L2.118|
;;;157    				}
;;;158    	#endif /* USED_SMT_OP_MODE */
;;;159    				GPIO_Initialize();
000076  f7fffffe          BL       GPIO_Initialize
;;;160    
;;;161    	#if USED_MNT_S3_MODE_FUNCTION
;;;162    				if(module_Init_Signal())
;;;163    				{
;;;164    					HAL_SetSensingMode(SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE);
;;;165    				}
;;;166    				else
;;;167    				{
;;;168    					HAL_SetSensingMode(SM_S3_ACTIVE_MODE);
;;;169    					sub_state = TOUCH_NORMAL_OPER_RESET_SYSTEM;
;;;170    					break;
;;;171    				}
;;;172    
;;;173    				currMode = protocol_swip_GetMode();
;;;174    				if(currMode == M_TOUCH_DFUP)
;;;175    				{
;;;176    					break;
;;;177    				}
;;;178    
;;;179    				module_start_delay();
;;;180    	#else
;;;181    				module_Init_Signal();
00007a  f7fffffe          BL       module_Init_Signal
;;;182    				currMode = protocol_swip_GetMode();
00007e  f7fffffe          BL       protocol_swip_GetMode
;;;183    				if(currMode == M_TOUCH_DFUP || currMode == M_WATCH_DOG_RESET)
000082  2802              CMP      r0,#2
000084  bf18              IT       NE
000086  2811              CMPNE    r0,#0x11
000088  d022              BEQ      |L2.208|
;;;184    				{
;;;185    					break;
;;;186    				}
;;;187    				module_start_delay();
00008a  f7fffffe          BL       module_start_delay
;;;188    	#endif
;;;189    #endif /* USED_S3_MODE_FUNCTION */
;;;190    			}
;;;191    			/* no break */
;;;192    			case TOUCH_NORMAL_OPER_RESET_SYSTEM:
;;;193    			{
;;;194    				if(PARAM_GetMode() != PARAM_MODE_NORMAL)
00008e  f7fffffe          BL       PARAM_GetMode
000092  b140              CBZ      r0,|L2.166|
;;;195    				{
;;;196    					PARAM_SetMode(PARAM_MODE_NORMAL);
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       PARAM_SetMode
;;;197    					PARAM_InitConfig();
00009a  f7fffffe          BL       PARAM_InitConfig
;;;198    					algorithm_init();
00009e  f7fffffe          BL       algorithm_init
;;;199    #if (USED_PEN_MODE_OPERATION)
;;;200    					algorithm_local_init(); //code
;;;201    					algorithm_init_local(); //DSP
;;;202    	#if (USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL || USED_DSPA_FUNC_FOR_FINGER)
;;;203    					algorithm_init_dspA();
;;;204    	#endif
;;;205    #else
;;;206    	#if (USED_DSPA_FUNC_FOR_FINGER)
;;;207    					algorithm_init_dspA();
0000a2  f7fffffe          BL       algorithm_init_dspA
                  |L2.166|
;;;208    	#endif					
;;;209    #endif /* (USED_PEN_MODE_OPERATION) */
;;;210    				}
;;;211    				SensingBufferInit();
0000a6  f7fffffe          BL       SensingBufferInit
;;;212    			}
;;;213    			/* no break */
;;;214    			case TOUCH_NORMAL_OPER_RESET_HAL:
;;;215    			{
;;;216    #ifdef MODE_WDT
;;;217    				module_Watch_Enable();
0000aa  f7fffffe          BL       module_Watch_Enable
;;;218    #endif /* MODE_WDT */
;;;219    #if USED_MNT_S3_MODE_FUNCTION
;;;220    				if(IS_S3_MODE(HAL_GetSensingMode()))
;;;221    				{
;;;222    					HAL_ConfigInit(YES);
;;;223    				}
;;;224    				else
;;;225    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;226    				{
;;;227    					HAL_ConfigInit(NO);
0000ae  2000              MOVS     r0,#0
0000b0  f7fffffe          BL       HAL_ConfigInit
;;;228    				}
;;;229    				MODULE_Initialize();
0000b4  f7fffffe          BL       MODULE_Initialize
;;;230    			}
;;;231    			/* no break */
;;;232    			case TOUCH_NORMAL_OPER_RESET_MODULE:
;;;233    			{
;;;234    				if(!module_Start())
0000b8  f7fffffe          BL       module_Start
0000bc  2800              CMP      r0,#0
;;;235    				{
;;;236    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;237    					break;
;;;238    				}
;;;239    
;;;240    #if USED_RAWDATA_TUNE_CALIBRATION
;;;241    				sub_state = TOUCH_NORMAL_OPER_NORMAL_RAWDATA_CALIBRATION;
;;;242    #else /* USED_RAWDATA_TUNE_CALIBRATION */
;;;243    #if USED_MNT_S3_MODE_FUNCTION
;;;244    				if(IS_S3_MODE(HAL_GetSensingMode()))
;;;245    				{
;;;246    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_S3;
;;;247    				}
;;;248    				else
;;;249    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;250    				{
;;;251    #if USED_PEN_MODE_OPERATION
;;;252    					sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;253    #else /* USED_PEN_MODE_OPERATION */
;;;254    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
0000be  bf18              IT       NE
0000c0  2406              MOVNE    r4,#6
0000c2  d105              BNE      |L2.208|
0000c4  e053              B        |L2.366|
;;;255    #endif /* USED_PEN_MODE_OPERATION */
;;;256    
;;;257    #if USED_RUNTIME_LOCAL_TUNE_RAWDATA
;;;258    					SRIC_RawDataLocalRuntimeCalibration();
;;;259    #endif /* USED_RUNTIME_LOCAL_TUNE_RAWDATA */
;;;260    				}
;;;261    #endif /* USED_RAWDATA_TUNE_CALIBRATION */
;;;262    				break;
;;;263    			}
;;;264    
;;;265    #if USED_SMT_OP_MODE
;;;266    			case TOUCH_NORMAL_SMT_MODE:
;;;267    			{
;;;268    				if(module_Check_SMT_Mode() == NO)
0000c6  f7fffffe          BL       module_Check_SMT_Mode
0000ca  b110              CBZ      r0,|L2.210|
;;;269    				{
;;;270    					module_Exit_SMT_Mode();
;;;271    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;272    					break;
;;;273    				}
;;;274    				module_SignalOut_SMT_Mode();
0000cc  f7fffffe          BL       module_SignalOut_SMT_Mode
                  |L2.208|
;;;275    				break;
0000d0  e087              B        |L2.482|
                  |L2.210|
0000d2  f7fffffe          BL       module_Exit_SMT_Mode
0000d6  e04a              B        |L2.366|
;;;276    			}
;;;277    #endif /* USED_SMT_OP_MODE */
;;;278    
;;;279    			case TOUCH_NORMAL_OPER_RESET_REFERENCE:
;;;280    			{
;;;281    #if USED_NOISE_HOPPING_FREQ
;;;282    				if (thisCommonConf->bUseFreqHopp)
0000d8  6828              LDR      r0,[r5,#0]  ; thisCommonConf
0000da  7e41              LDRB     r1,[r0,#0x19]
0000dc  b141              CBZ      r1,|L2.240|
;;;283    				{
;;;284    					module_Switch_Freq(thisCommonConf->HoppFreq1);
0000de  7ec0              LDRB     r0,[r0,#0x1b]
0000e0  f7fffffe          BL       module_Switch_Freq
;;;285    					algorithm_baseline_tracking_initial();
0000e4  f7fffffe          BL       algorithm_baseline_tracking_initial
;;;286    
;;;287    					module_Switch_Freq(thisCommonConf->MainFreq);
0000e8  6828              LDR      r0,[r5,#0]  ; thisCommonConf
0000ea  7e80              LDRB     r0,[r0,#0x1a]
0000ec  f7fffffe          BL       module_Switch_Freq
                  |L2.240|
;;;288    				}
;;;289    				algorithm_baseline_tracking_initial();
0000f0  f7fffffe          BL       algorithm_baseline_tracking_initial
;;;290    #else
;;;291    //				if(module_Switch_Freq(thisCommonConf->MainFreq))
;;;292    				{
;;;293    					algorithm_baseline_tracking_initial();
;;;294    				}
;;;295    #endif
;;;296    				thisInfo->bLineFilterRepeatCheck = 0;
0000f4  68a8              LDR      r0,[r5,#8]  ; thisInfo
0000f6  f5005080          ADD      r0,r0,#0x1000
0000fa  f88074fb          STRB     r7,[r0,#0x4fb]
;;;297    
;;;298    #if USED_ESD_RECOVERY_RESET_TOUCH_AT_FIRST_FRAME
;;;299    				sptAlgorithmInfo->bIsESDGhostRecoveryATFirstFrame_Check = YES;
0000fe  6868              LDR      r0,[r5,#4]  ; sptAlgorithmInfo
000100  f5005080          ADD      r0,r0,#0x1000
000104  f880a4fd          STRB     r10,[r0,#0x4fd]
;;;300    				sptAlgorithmInfo->ulESDGhostRecoveryATFirstFrame_Check_Count = 0;
;;;301    #endif /* USED_ESD_RECOVERY_RESET_TOUCH_AT_FIRST_FRAME */
;;;302    
;;;303    #if USED_PEN_MODE_OPERATION
;;;304    				sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;305    #else /* USED_PEN_MODE_OPERATION */
;;;306    				sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;307    #endif /* USED_PEN_MODE_OPERATION */
;;;308    				break;
000108  f8c07500          STR      r7,[r0,#0x500]
00010c  e07d              B        |L2.522|
                  |L2.270|
;;;309    			}
;;;310    
;;;311    #if USED_IDLE_MODE_CONTROL
;;;312    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE:
;;;313    			{
;;;314    				algorithm_baseline_tracking_initial_idle(NO);
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       algorithm_baseline_tracking_initial_idle
;;;315    				sub_state = TOUCH_NORMAL_OPER_IDLE;
000114  2411              MOVS     r4,#0x11
;;;316    				break;
000116  e064              B        |L2.482|
                  |L2.280|
;;;317    			}
;;;318    #endif /* USED_IDLE_MODE_CONTROL */
;;;319    
;;;320    #if USED_MNT_S3_MODE_FUNCTION
;;;321    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_S3:
;;;322    			{
;;;323    				algorithm_baseline_tracking_initial_S3(NO);
;;;324    				sub_state = TOUCH_NORMAL_OPER_S3_READY;
;;;325    				break;
;;;326    			}
;;;327    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;328    
;;;329    #if (USED_PEN_MODE_OPERATION)
;;;330    			case TOUCH_NORMAL_OPER_READY_REFERENCE_PEN:
;;;331    			{
;;;332    				if(tHalIntrHandle.ulTSyncInRisingCnt == (LHB_NUM-1))
;;;333    				{
;;;334    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN;
;;;335    				}
;;;336    				break;
;;;337    			}
;;;338    			
;;;339    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN:
;;;340    			{
;;;341    #ifdef MODE_WDT				
;;;342    				KICK_DOG();
;;;343    #endif /* MODE_WDT */
;;;344    				thisInfo->bLineFilterRepeatCheck = 0;
;;;345    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)
;;;346    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;347    
;;;348    				algorithm_local_baseline_init();
;;;349    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS) == NO)
;;;350    				{
;;;351    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;352    				}
;;;353    
;;;354    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_WGP);
;;;355    
;;;356    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;357    				{
;;;358    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;359    				}
;;;360    //
;;;361    				HAL_SetActivePenChagneType(ACTIVEPEN_CHANGE_LOCAL_MS);
;;;362    
;;;363    				{
;;;364    					uint16_t ulSkipCnt = 0;
;;;365    				    while(ulSkipCnt < 2)
;;;366    				    {
;;;367    				    	ePartialSensing_t lDataIndex = module_wait_local_sample_done();
;;;368    
;;;369    				    	if(lDataIndex == PARTIAL_MAX)
;;;370    				    	{
;;;371    				    		break;
;;;372    				    	}
;;;373    
;;;374    						if(lDataIndex == LOCAL_OP_LAST_LHB)
;;;375    						{
;;;376    							ulSkipCnt++;
;;;377    						}
;;;378    					}
;;;379    				}
;;;380    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN)
;;;381    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;382    				algorithm_local_baseline_init();
;;;383    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_MS) == NO)
;;;384    				{
;;;385    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;386    				}
;;;387    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_PEN)
;;;388    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;389    				algorithm_local_baseline_init();
;;;390    	#if USED_NOISE_HOPPING_FREQ
;;;391    				if(thisCommonConf->bUseFreqHopp)
;;;392    				{
;;;393    					module_Switch_Freq(thisCommonConf->HoppFreq1);
;;;394    					if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;395    					{
;;;396    						module_Switch_Freq(thisCommonConf->MainFreq);
;;;397    						if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;398    						{
;;;399    							sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;400    						}
;;;401    					}
;;;402    				}
;;;403    				else
;;;404    				{
;;;405    					if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;406    					{
;;;407    						sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;408    					}
;;;409    				}
;;;410    	#else /* USED_NOISE_HOPPING_FREQ */
;;;411    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;412    				{
;;;413    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;414    				}
;;;415    	#endif /* USED_NOISE_HOPPING_FREQ */
;;;416    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;417    				hal_Info_SetPenTypeSwapCheckEnable(NO);
;;;418    				algorithm_local_baseline_init();
;;;419    				if(algorithm_baseline_tracking_initial_local(ACTIVEPEN_TYPE_LOCAL_WGP) == NO)
;;;420    				{
;;;421    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;422    				}
;;;423    #endif /* (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) */
;;;424    				break;
;;;425    			}
;;;426    
;;;427    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;428    			case TOUCH_NORMAL_OPER_READY_REFERENCE_PEN_IDLE:
;;;429    			{
;;;430    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;431    				break;
;;;432    			}
;;;433    			case TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE:
;;;434    			{
;;;435    				algorithm_baseline_tracking_initial_local_idle(NO);
;;;436    				sub_state = TOUCH_NORMAL_OPER_LOCAL_IDLE;
;;;437    				break;
;;;438    			}
;;;439    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;440    
;;;441    #endif /* (USED_PEN_MODE_OPERATION) */
;;;442    			case TOUCH_NORMAL_OPER_NORMAL_READY:
;;;443    			{
;;;444    #if USED_IDLE_MODE_CONTROL
;;;445    	#if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;446    				tAppInfo_t * ptAppInfo = app_GetInfo();
000118  f7fffffe          BL       app_GetInfo
;;;447    				if(ptAppInfo->bIsNormalReadyIdleCheckCountMaintain)
00011c  7d81              LDRB     r1,[r0,#0x16]
00011e  2900              CMP      r1,#0
;;;448    				{
;;;449    					ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = NO;
000120  bf18              IT       NE
000122  7587              STRBNE   r7,[r0,#0x16]
000124  d104              BNE      |L2.304|
;;;450    		#if (!USED_ENTER_IDLE_REAL_TIME_CHECK)
;;;451    					thisInfo->ulIdleModeEnterCheckCount += DEF_FREQ_HOPPING_BASELINE_UPDATE_CONTI_CNT_THD;
;;;452    		#endif /* (!USED_ENTER_IDLE_REAL_TIME_CHECK) */
;;;453    				}
;;;454    				else
;;;455    				{
;;;456    					thisInfo->ulIdleModeEnterCheckCount = 0;
000126  68a8              LDR      r0,[r5,#8]  ; thisInfo
000128  f5005080          ADD      r0,r0,#0x1000
00012c  f8c073c0          STR      r7,[r0,#0x3c0]
                  |L2.304|
;;;457    				}
;;;458    	#else /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;459    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;460    	#endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;461    #endif /* USED_IDLE_MODE_CONTROL */
;;;462    				sub_state = TOUCH_NORMAL_OPER_NORMAL;
000130  240f              MOVS     r4,#0xf
;;;463    #if USED_ECLK_ON_OFF_CONTROL
;;;464    				HAL_SetECLKOnOffControl(YES);
000132  2001              MOVS     r0,#1
000134  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;465    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;466    #if (!USED_PEN_MODE_OPERATION)
;;;467    	#if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;468    				HAL_SetHoppBaselineContinueEnControl(YES);
000138  2001              MOVS     r0,#1
00013a  f7fffffe          BL       HAL_SetHoppBaselineContinueEnControl
;;;469    	#endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;470    #endif /* (!USED_PEN_MODE_OPERATION) */
;;;471    				break;
00013e  e050              B        |L2.482|
                  |L2.320|
000140  e02d              B        |L2.414|
000142  e001              B        |L2.328|
                  |L2.324|
000144  e022              B        |L2.396|
                  |L2.326|
000146  e03f              B        |L2.456|
                  |L2.328|
;;;472    			}
;;;473    			case TOUCH_NORMAL_OPER_NORMAL:
;;;474    			{
;;;475    #ifdef MODE_WDT
;;;476    				KICK_DOG();
000148  f7fffffe          BL       Hal_Kick_DOG
;;;477    #endif /* MODE_WDT */
;;;478    				if(!module_wait_full_sample_done())
00014c  f7fffffe          BL       module_wait_full_sample_done
000150  b150              CBZ      r0,|L2.360|
;;;479    				{
;;;480    					module_Stop(YES);
;;;481    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;482    					break;
;;;483    				}
;;;484    
;;;485    				if(algorithm_process(FULL_MODE) == NO)
000152  2000              MOVS     r0,#0
000154  f7fffffe          BL       algorithm_process
000158  b158              CBZ      r0,|L2.370|
;;;486    				{
;;;487    #if USED_ESD_RECOVERY_RESET_AT_REBASE
;;;488    					/*
;;;489    					 * Rignt Now Reset!!!
;;;490    					 */
;;;491    //					SCRB->SYS_RST_CTL.tBit.sys_rst = 0;
;;;492    					// Must Wadtch Dog Reset Enable
;;;493    					while(1);
;;;494    #else /* USED_ESD_RECOVERY_RESET_AT_REBASE */
;;;495    	#if USED_PEN_MODE_OPERATION
;;;496    					/*
;;;497    					 * Change the Pen Mode!!
;;;498    					 */
;;;499    					sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;500    
;;;501    					sensingRowStart = 0;
;;;502    					HAL_SetSensingChangeMode(SM_CHAGNE_Full_To_Local_MODE);
;;;503    	#else /* USED_PEN_MODE_OPERATION */
;;;504    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
;;;505    	#endif /* USED_PEN_MODE_OPERATION */
;;;506    					TEST_LOCAL_STATE = 0;
;;;507    					break;
;;;508    #endif /* USED_ESD_RECOVERY_RESET_AT_REBASE */
;;;509    				}
;;;510    
;;;511    #if (USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK || USED_ESD_RECOERY_DETECTION_ROIC_Abnoraml)
;;;512    	#if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK && USED_ESD_RECOERY_DETECTION_ROIC_Abnoraml
;;;513    				if(sptAlgorithmInfo->bIsESDRecovery || tHalIntrHandle.bIsROICReg_ESDRecovery)
;;;514    	#elif USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;515    				if(sptAlgorithmInfo->bIsESDRecovery)
00015a  6868              LDR      r0,[r5,#4]  ; sptAlgorithmInfo
00015c  f5005080          ADD      r0,r0,#0x1000
000160  f89004fc          LDRB     r0,[r0,#0x4fc]
000164  b130              CBZ      r0,|L2.372|
                  |L2.358|
;;;516    	#elif USED_ESD_RECOERY_DETECTION_ROIC_Abnoraml
;;;517    				if(tHalIntrHandle.bIsROICReg_ESDRecovery)
;;;518    	#endif
;;;519    				{
;;;520    					/*
;;;521    					 * Rignt Now Reset!!!
;;;522    					 */
;;;523    //					SCRB->SYS_RST_CTL.tBit.sys_rst = 0;
;;;524    					// Must Wadtch Dog Reset Enable
;;;525    					while(1);
000166  e7fe              B        |L2.358|
                  |L2.360|
000168  2001              MOVS     r0,#1                 ;480
00016a  f7fffffe          BL       module_Stop
                  |L2.366|
00016e  2401              MOVS     r4,#1                 ;271
000170  e037              B        |L2.482|
                  |L2.370|
000172  e7fe              B        |L2.370|
                  |L2.372|
;;;526    				}
;;;527    #endif /* (USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK || USED_ESD_RECOERY_DETECTION_ROIC_Abnoraml) */
;;;528    
;;;529    //				if(abnormal_rawdata_temp(NO))
;;;530    //				{
;;;531    //					SensingBufferInit();
;;;532    //					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;533    //					TEST_LOCAL_STATE = 0;
;;;534    //					break;
;;;535    //				}
;;;536    
;;;537    //				algorithm_noise_param_apply();
;;;538    
;;;539    #if USED_NOISE_HOPPING_FREQ
;;;540    	#if USE_FREQ_HOPPIG_DEBUG
;;;541    				if (bHoppingFreq)
;;;542    				{
;;;543    					bHoppingFreq = NO;
;;;544    					algorithm_Set_FreqHopp(NOISE_FREQ_HOPPING);
;;;545    				}
;;;546    	#endif
;;;547    				if(algorithm_Check_FreqHopping())
000174  f7fffffe          BL       algorithm_Check_FreqHopping
000178  2800              CMP      r0,#0
;;;548    				{
;;;549    					sub_state = TOUCH_NORMAL_OPER_SWITCH_FREQ;
00017a  bf18              IT       NE
00017c  2414              MOVNE    r4,#0x14
00017e  d130              BNE      |L2.482|
;;;550    					break;
;;;551    				}
;;;552    #endif
;;;553    
;;;554    #if USED_IDLE_MODE_CONTROL
;;;555    				if(algorithm_CheckFingerIdleModeControl())
000180  f7fffffe          BL       algorithm_CheckFingerIdleModeControl
000184  2800              CMP      r0,#0
;;;556    				{
;;;557    					sub_state = TOUCH_NORMAL_OPER_IDLE_READY;
000186  bf18              IT       NE
000188  2410              MOVNE    r4,#0x10
00018a  e02a              B        |L2.482|
                  |L2.396|
;;;558    					break;
;;;559    				}
;;;560    #endif /* USED_IDLE_MODE_CONTROL */
;;;561    
;;;562    #if USED_PEN_MODE_OPERATION
;;;563    				if(algorithm_CheckFingerPenModeControl())
;;;564    				{
;;;565    					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;566    					break;
;;;567    				}
;;;568    #endif /* USED_PEN_MODE_OPERATION */
;;;569    
;;;570    				break;
;;;571    			}
;;;572    #if USED_IDLE_MODE_CONTROL
;;;573    			case TOUCH_NORMAL_OPER_IDLE_READY:
;;;574    			{
;;;575    				thisInfo->ulIdleModeEnterCheckCount = 0;
00018c  68a8              LDR      r0,[r5,#8]  ; thisInfo
00018e  f5005080          ADD      r0,r0,#0x1000
;;;576    //				tHalIntrHandle.ulInitFirstFrame = 0;
;;;577    #if USED_ECLK_ON_OFF_CONTROL
;;;578    				HAL_SetECLKOnOffControl(YES);
000192  f8c073c0          STR      r7,[r0,#0x3c0]
000196  2001              MOVS     r0,#1
000198  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;579    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;580    #if USED_REFERENCE_INIT_IDLE_MODE_ENTER
;;;581    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE;
;;;582    #else /* USED_REFERENCE_INIT_IDLE_MODE_ENTER */
;;;583    				sub_state = TOUCH_NORMAL_OPER_IDLE;
;;;584    #endif /* USED_REFERENCE_INIT_IDLE_MODE_ENTER */
;;;585    				break;
00019c  e012              B        |L2.452|
                  |L2.414|
;;;586    			}
;;;587    			case TOUCH_NORMAL_OPER_IDLE:
;;;588    			{
;;;589    #ifdef MODE_WDT
;;;590    				KICK_DOG();
00019e  f7fffffe          BL       Hal_Kick_DOG
;;;591    #endif /* MODE_WDT */
;;;592    
;;;593    				if(!module_wait_NI_sample_done())
0001a2  f7fffffe          BL       module_wait_NI_sample_done
0001a6  b130              CBZ      r0,|L2.438|
;;;594    				{
;;;595    					module_Stop(YES);
;;;596    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;597    					break;
;;;598    				}
;;;599    
;;;600    				if(algorithm_process_Idle() == NO)
0001a8  f7fffffe          BL       algorithm_process_Idle
0001ac  b140              CBZ      r0,|L2.448|
;;;601    				{
;;;602    					SensingBufferInit();
;;;603    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_IDLE;
;;;604    					break;
;;;605    				}
;;;606    
;;;607    				if(algorithm_CheckFingerIdleModeControl())
0001ae  f7fffffe          BL       algorithm_CheckFingerIdleModeControl
0001b2  b1b0              CBZ      r0,|L2.482|
0001b4  e029              B        |L2.522|
                  |L2.438|
0001b6  2001              MOVS     r0,#1                 ;595
0001b8  f7fffffe          BL       module_Stop
0001bc  2401              MOVS     r4,#1                 ;596
0001be  e010              B        |L2.482|
                  |L2.448|
0001c0  f7fffffe          BL       SensingBufferInit
                  |L2.452|
0001c4  2407              MOVS     r4,#7                 ;581
0001c6  e00c              B        |L2.482|
                  |L2.456|
;;;608    				{
;;;609    					sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;610    					break;
;;;611    				}
;;;612    				break;
;;;613    			}
;;;614    #endif /* USED_IDLE_MODE_CONTROL */
;;;615    
;;;616    #if USED_MNT_S3_MODE_FUNCTION
;;;617    			case TOUCH_NORMAL_OPER_S3_READY:
;;;618    			{
;;;619    #if USED_ECLK_ON_OFF_CONTROL
;;;620    				HAL_SetECLKOnOffControl(YES);
;;;621    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;622    				sub_state = TOUCH_NORMAL_OPER_S3;
;;;623    				break;
;;;624    			}
;;;625    			case TOUCH_NORMAL_OPER_S3:
;;;626    			{
;;;627    #ifdef MODE_WDT
;;;628    				KICK_DOG();
;;;629    #endif /* MODE_WDT */
;;;630    				if(!module_wait_S3_sample_done())
;;;631    				{
;;;632    #if USED_S3_PGAMMA_SW_I2C_CTRL
;;;633    //					_gT(_GPIO_TP_INTR);
;;;634    					module_S3_PGAMMA_I2C_SW_Enable();
;;;635    //					_gT(_GPIO_TP_INTR);
;;;636    #endif /* USED_S3_PGAMMA_SW_I2C_CTRL */
;;;637    					HAL_Set_S3_VDD_OddEven_Ctrl(NO);
;;;638    
;;;639    #if USED_ECLK_ON_OFF_CONTROL
;;;640    					HAL_SetECLKOnOffControl(NO);
;;;641    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;642    #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;643    					HAL_SetTPICMuxEnControl(NO, NO);
;;;644    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;645    #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;646    					HAL_SetTouchReportEnControl(NO);
;;;647    #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;648    					GPIO_Init(_GPIO_TSYNC_OUT, GPIO_MODE_FUNC_3, GPIO_DIR_OUTPUT, GPIO_DATA_HIGH);
;;;649    
;;;650    					tPWM_INTR_CFG_t tPWM_INTR_CFG[4] =
;;;651    					{
;;;652    						{VSYNC_IN_IRQn, VSYNC_IN_IRQn_Priority, DISABLE},
;;;653    						{TSYNC_IN_IRQn, TSYNC_IN_IRQn_Priority, DISABLE},
;;;654    						{TSYNC_OUT_IRQn, TSYNC_OUT_IRQn_Priority, DISABLE},
;;;655    						{PWMDRV_IRQn, PWMDRV_IRQn_Priority, DISABLE}
;;;656    					};
;;;657    					PWMDRV_ITConfig((tPWM_INTR_CFG_t *)&tPWM_INTR_CFG[0], 4);
;;;658    
;;;659    					NVIC_DisableIRQ(GPIOA_IRQn);
;;;660    					NVIC_DisableIRQ(GPIOM_IRQn);
;;;661    					MSPI_ITConfig(DISABLE);
;;;662    					MSPI_Cmd(DISABLE);
;;;663    //					PWMDRV->PWMGEN_CR0.tBit.pwm_gen_enable = DISABLE;
;;;664    					PWMDRV_Cmd(DISABLE);
;;;665    
;;;666    					PARAM_SetMode(PARAM_MODE_NONE);
;;;667    
;;;668    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;669    					thisInfo->tS3DeltaInfo.bIsSendResumeSignal = NO;
;;;670    #if USED_S3_WAKEUP_DEBUGING
;;;671    					ulTestS3RawDataRead = YES;
;;;672    #endif
;;;673    //					_gT(_GPIO_TP_INTR);
;;;674    					break;
;;;675    				}
;;;676    
;;;677    				if(algorithm_process_S3() == NO)
;;;678    				{
;;;679    					SensingBufferInit();
;;;680    					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_S3;
;;;681    					break;
;;;682    				}
;;;683    				break;
;;;684    			}
;;;685    #endif /* USED_MNT_S3_MODE_FUNCTION */
;;;686    
;;;687    #if USED_NOISE_HOPPING_FREQ
;;;688    			case TOUCH_NORMAL_OPER_SWITCH_FREQ:
;;;689    	#if (USED_PEN_MODE_OPERATION)
;;;690    			case TOUCH_NORMAL_OPER_LOCAL_SWITCH_FREQ:
;;;691    	#endif /* USED_PEN_MODE_OPERATION */
;;;692    			{
;;;693    				tAppInfo_t * ptAppInfo = app_GetInfo();
0001c8  f7fffffe          BL       app_GetInfo
0001cc  4604              MOV      r4,r0
;;;694    				
;;;695    	#if USED_ECLK_ON_OFF_CONTROL
;;;696    				HAL_SetECLKOnOffControl(NO);
0001ce  2000              MOVS     r0,#0
0001d0  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;697    	#endif /* USED_ECLK_ON_OFF_CONTROL */
;;;698    
;;;699    				if (ptAppInfo->eSelectFreq == FREQ_MAIN)
0001d4  7ce0              LDRB     r0,[r4,#0x13]
0001d6  2801              CMP      r0,#1
0001d8  d013              BEQ      |L2.514|
;;;700    				{
;;;701    					module_Switch_Freq(thisCommonConf->HoppFreq1);
;;;702    
;;;703    	#if USED_PEN_MODE_OPERATION
;;;704    					if(sub_state == TOUCH_NORMAL_OPER_LOCAL_SWITCH_FREQ)
;;;705    					{
;;;706    						sub_state = TOUCH_NORMAL_OPER_LOCAL;
;;;707    					}
;;;708    					else
;;;709    	#endif /* USED_PEN_MODE_OPERATION */
;;;710    					{
;;;711    						sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;712    					}
;;;713    				}
;;;714    				else if (ptAppInfo->eSelectFreq == FREQ_HOPP1)
0001da  2802              CMP      r0,#2
;;;715    				{
;;;716    					module_Switch_Freq(thisCommonConf->MainFreq);
;;;717    
;;;718    	#if USED_PEN_MODE_OPERATION
;;;719    					if(sub_state == TOUCH_NORMAL_OPER_LOCAL_SWITCH_FREQ)
;;;720    					{
;;;721    						sub_state = TOUCH_NORMAL_OPER_LOCAL;
;;;722    					}
;;;723    					else
;;;724    	#endif /* USED_PEN_MODE_OPERATION */
;;;725    					{
;;;726    						sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;727    					}
;;;728    				}
;;;729    				else
;;;730    				{
;;;731    					sub_state = TOUCH_NORMAL_OPER_RESET_MODULE;
0001dc  bf18              IT       NE
0001de  2405              MOVNE    r4,#5
0001e0  d015              BEQ      |L2.526|
                  |L2.482|
;;;732    				}
;;;733    				break;
;;;734    			}
;;;735    #endif /* USED_NOISE_HOPPING_FREQ */
;;;736    
;;;737    #if (USED_PEN_MODE_OPERATION)
;;;738    			case TOUCH_NORMAL_OPER_LOCAL_READY:
;;;739    			{
;;;740    				sensingRowStart_Tilt = sensingRowStart;
;;;741    				currentRowStart = sensingRowStart;
;;;742    				p_currentRowStart = currentRowStart;
;;;743    				currentColStart = thisInfo->tPenInfo.ucCurrentColumnStart;
;;;744    
;;;745    				thisInfo->tPenInfo.us_pendata_pressure = 1;
;;;746    				thisInfo->tPenInfo.ucSensing_cont_cnt = 0;
;;;747    				
;;;748    				thisInfo->tPenInfo.ucSearch_check_cnt = thisInfo->tPenInfo.ucSearch_check_cnt_2 = 0;
;;;749    
;;;750    				if(tHalIntrHandle.ulTSyncInRisingCnt == (LHB_NUM-1)
;;;751    #if USED_TP_RST_OPERATION
;;;752    					|| (IS_GPIO_PIN(_GPIO_TP_RST) == 0x0)
;;;753    #endif /* #if USED_TP_RST_OPERATION */
;;;754    					)
;;;755    				{
;;;756    					TEST_LOCAL_STATE = 1;
;;;757    
;;;758    					sub_state = TOUCH_NORMAL_OPER_LOCAL;
;;;759    					thisInfo->tPenInfo.ucSensing_cont_cnt1 = 0;
;;;760    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;761    					HAL_SetHoppBaselineContinueEnControl(YES);
;;;762    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;763    				}
;;;764    				break;
;;;765    			}
;;;766    
;;;767    			case TOUCH_NORMAL_OPER_LOCAL:
;;;768    			{
;;;769    #ifdef MODE_WDT
;;;770    				KICK_DOG();
;;;771    #endif /* MODE_WDT */
;;;772    #if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN))
;;;773    				hal_Info_SetPenTypeSwapCheckEnable(YES);
;;;774    #endif /* ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWGP_PEN)) */
;;;775    				ePartialSensing_t RetVal = module_wait_local_sample_done();
;;;776    				bool_t dsp_a_finger_op_change = 0;
;;;777    				switch(RetVal)
;;;778    				{
;;;779    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;780    					case PARTIAL_PEN_COORD_DATA1:		// 1st Pen RAWDATA Check
;;;781    					case PARTIAL_PEN_COORD_DATA2:		// 2nd Pen RAWDATA Check
;;;782    					case PARTIAL_PEN_COORD_DATA3:		// 3rd Pen RAWDATA Check
;;;783    					case PARTIAL_PEN_COORD_DATA4:		// 4th Pen RAWDATA Check
;;;784    	#if USED_WGP_PEN_UHD_16LHB_OPERATION
;;;785    					case PARTIAL_PEN_COORD_DATA5:		// 5th Pen RAWDATA Check
;;;786    					case PARTIAL_PEN_COORD_DATA6:		// 6th Pen RAWDATA Check
;;;787    					case PARTIAL_PEN_COORD_DATA7:		// 7th Pen RAWDATA Check
;;;788    					case PARTIAL_PEN_COORD_DATA8:		// 8th Pen RAWDATA Check
;;;789    	#endif /* USED_WGP_PEN_UHD_16LHB_OPERATION */
;;;790    					{
;;;791    	#if LOCAL_REBASE_ALGO_EN
;;;792    						algorithm_check_recal_pen();
;;;793    	#endif
;;;794    						
;;;795    	#if ((USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL) && USED_DSPA_FUNC_FOR_FINGER)
;;;796    						if( (thisModeConf->BaseLine.bDspA_LocalMode_PenPhase || thisModeConf->BaseLine.bDspA_LocalMode_CalculateDelta || thisModeConf->SensingFilter.cLineFilter_Pen == 2 ||
;;;797    							 thisModeConf->BaseLine.bDspA_SearchMode_PenPhase || thisModeConf->BaseLine.bDspA_SearchMode_CalculateDelta || thisModeConf->SensingFilter.ucLocalSearchModeLineFilter == 2)
;;;798    						 && (thisModeConf->BaseLine.bDspA_Finger_CalculateDelta || thisModeConf->SensingFilter.cLineFilter > 2) )
;;;799    						{
;;;800    							dsp_a_finger_op_change = 1;
;;;801    		#if USED_WGP_PEN_UHD_16LHB_OPERATION
;;;802    							if( PARTIAL_PEN_COORD_DATA7 == RetVal )
;;;803    		#else /* USED_WGP_PEN_UHD_16LHB_OPERATION */
;;;804    							if( PARTIAL_PEN_COORD_DATA4 == RetVal )
;;;805    		#endif /* USED_WGP_PEN_UHD_16LHB_OPERATION */
;;;806    							{
;;;807    								if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;808    								{
;;;809    									thisInfo->bIsRecalCondLocal = YES;
;;;810    								}
;;;811    							}
;;;812    						}
;;;813    	#endif
;;;814    						protocol_LogMatrix(LT_PENPOS_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_3_PTR(), COL_MAX, PEN_DATA_ROW_MAX_3, 84 /*MAX Intensity*/);
;;;815    						if(thisInfo->tPenInfo.bSearch_Mode_Flag == 0)
;;;816    						{
;;;817    							protocol_LogPaddedMatrix(LT_PENPOS_INTENSITY, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;818    						}
;;;819    						else
;;;820    						{
;;;821    							protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_2_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;822    						}
;;;823    	#if defined(TILT_ON)
;;;824    						protocol_LogMatrix(LT_NI_RAW, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RING_RAW_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX+PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;825    						protocol_LogPaddedMatrix(LT_NI_INT, PEN_COORD_COL_MAX, HAL_GET_RING_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;826    	#endif
;;;827    						break;
;;;828    					}
;;;829    #else /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;830    					case PARTIAL_PEN_COORD1:
;;;831    					case PARTIAL_PEN_COORD2:
;;;832    					case PARTIAL_PEN_COORD3:
;;;833    					case PARTIAL_PEN_COORD4:
;;;834    					{
;;;835    #if LOCAL_REBASE_ALGO_EN
;;;836    						algorithm_check_recal_pen();
;;;837    #endif
;;;838    						
;;;839    #if ((USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_PEN_LOCAL) && USED_DSPA_FUNC_FOR_FINGER)
;;;840    						if( (thisModeConf->BaseLine.bDspA_LocalMode_PenPhase || thisModeConf->BaseLine.bDspA_LocalMode_CalculateDelta || thisModeConf->SensingFilter.cLineFilter_Pen == 2 ||
;;;841    							 thisModeConf->BaseLine.bDspA_SearchMode_PenPhase || thisModeConf->BaseLine.bDspA_SearchMode_CalculateDelta || thisModeConf->SensingFilter.ucLocalSearchModeLineFilter == 2) 
;;;842    						 && (thisModeConf->BaseLine.bDspA_Finger_CalculateDelta || thisModeConf->SensingFilter.cLineFilter > 2) )
;;;843    						{
;;;844    							dsp_a_finger_op_change = 1;
;;;845    							if( (PARTIAL_PEN_COORD4 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WGP) || 
;;;846    								(PARTIAL_PEN_COORD1 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)  ||
;;;847    								(PARTIAL_PEN_COORD2 == RetVal && gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WACOM) ) 
;;;848    							{
;;;849    								if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;850    								{
;;;851    									thisInfo->bIsRecalCondLocal = YES;
;;;852    								}
;;;853    							}
;;;854    						}
;;;855    #endif						
;;;856    						protocol_LogMatrix(LT_PENPOS_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RAW_IMAGE_PTR(), COL_MAX, (PEN_COORD_ROW_MAX*2), 84/*MAX Intensity*/);
;;;857    
;;;858    						if (thisInfo->tPenInfo.bSearch_Mode_Flag == 0)
;;;859    						{
;;;860    //							protocol_LogPaddedMatrix(LT_PENPOS_INTENSITY, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;861    							protocol_LogLocalPaddedMatrix(LT_PENPOS_INTENSITY, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/, currentRowStart);
;;;862    						}
;;;863    						else
;;;864    						{
;;;865    	#if IS_MULTI_PROTOCOL_OPERATION
;;;866    							if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;867    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;868    							else
;;;869    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_2_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;870    	#else
;;;871    							#if IS_MSPEN_PROTOCOL_OPERATION
;;;872    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;873    							#else
;;;874    								protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_LOCAL_SEARCH_IMAGE_2_PTR(), COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;875    							#endif
;;;876    	#endif
;;;877    						}
;;;878    
;;;879    #if defined(TILT_ON)
;;;880    						protocol_LogMatrix(LT_NI_RAW, PEN_COORD_COL_MAX, HAL_GET_LOCAL_RING_RAW_IMAGE_PTR(), COL_MAX, (PEN_COORD_ROW_MAX+PEN_COORD_ROW_MAX), 84/*MAX Intensity*/);
;;;881    						protocol_LogPaddedMatrix(LT_NI_INT, PEN_COORD_COL_MAX, HAL_GET_RING_DELTA_IMAGE_PTR(), COL_MAX, PEN_COORD_ROW_MAX, 84/*MAX Intensity*/);
;;;882    #endif
;;;883    						break;
;;;884    					}
;;;885    					case PARTIAL_PEN_DATA1:
;;;886    					case PARTIAL_PEN_DATA2:
;;;887    					case PARTIAL_PEN_DATA3:
;;;888    					case PARTIAL_PEN_DATA4:
;;;889    					case PARTIAL_PEN_DATA5:
;;;890    					{
;;;891    						// _gT(_GPIO_TP_INTR);	//use only test
;;;892    	#if IS_MULTI_PROTOCOL_OPERATION
;;;893    						if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;894    							protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_PTR(), COL_MAX, PEN_DATA_ROW_MAX, 84/*MAX Intensity*/);
;;;895    						else if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_WACOM)
;;;896    							protocol_LogMatrix_unsigned(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_2_PTR(), COL_MAX, PEN_DATA_ROW_MAX_2, 84/*MAX Intensity*/);
;;;897    						else
;;;898    							protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_3_PTR(), COL_MAX, PEN_DATA_ROW_MAX_3, 84/*MAX Intensity*/);
;;;899    	#else
;;;900    		#if IS_WGPPEN_PROTOCOL_OPERATION || IS_WGPUHDPEN_PROTOCOL_OPERATION
;;;901    						protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_3_PTR(), COL_MAX, PEN_DATA_ROW_MAX_3, 84/*MAX Intensity*/);
;;;902    		#elif IS_MSPEN_PROTOCOL_OPERATION
;;;903    						protocol_LogMatrix(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_PTR(), COL_MAX, PEN_DATA_ROW_MAX, 84/*MAX Intensity*/);
;;;904    		#elif IS_WACOMPEN_PROTOCOL_OPERATION
;;;905    						protocol_LogMatrix_unsigned(LT_PENDATA_RAWDATA, PEN_COORD_COL_MAX, HAL_GET_LOCAL_DATA_RAW_IMAGE_2_PTR(), COL_MAX, PEN_DATA_ROW_MAX_2, 84/*MAX Intensity*/);
;;;906    		#endif
;;;907    	#endif
;;;908    						break;
;;;909    					}
;;;910    #endif /* USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN */
;;;911    					case LOCAL_FINGER_LAST_LHB:
;;;912    					{
;;;913    						if(dsp_a_finger_op_change == 0)
;;;914    						{
;;;915    							if(algorithm_process(LOCAL_FINGER_MODE) == NO)
;;;916    							{
;;;917    								thisInfo->bIsRecalCondLocal = YES;
;;;918    							}
;;;919    						}
;;;920    
;;;921    						if(thisInfo->bIsRecalCondLocal && !thisModeConf->BaseLine.bLocalModeReBaseCheckOff)
;;;922    						{
;;;923    							thisInfo->bIsRecalCondLocal = NO;
;;;924    							sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;925    							TEST_LOCAL_STATE = 0;
;;;926    							break;
;;;927    						}
;;;928    
;;;929    #if USED_NOISE_HOPPING_FREQ
;;;930    	#if USE_FREQ_HOPPIG_DEBUG
;;;931    						if (bHoppingFreq)
;;;932    						{
;;;933    							bHoppingFreq = NO;
;;;934    							algorithm_Set_FreqHopp(NOISE_FREQ_HOPPING);
;;;935    						}
;;;936    	#endif
;;;937    						if (algorithm_Check_FreqHopping())
;;;938    						{
;;;939    							sub_state = TOUCH_NORMAL_OPER_LOCAL_SWITCH_FREQ;
;;;940    							break;
;;;941    						}
;;;942    #endif
;;;943    						if(algorithm_CheckFingerPenModeControl())
;;;944    						{
;;;945    							sub_state = TOUCH_NORMAL_OPER_NORMAL_READY;
;;;946    							break;
;;;947    						}
;;;948    #if  USED_LOCAL_IDLE_MODE_CONTROL
;;;949    						else if(algorithm_CheckLocalPenIdleModeControl())
;;;950    						{
;;;951    							sub_state = TOUCH_NORMAL_OPER_LOCAL_IDLE_READY;
;;;952    							break;
;;;953    						}
;;;954    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;955    
;;;956    						break;
;;;957    					}
;;;958    					case PARTIAL_MAX:
;;;959    					{
;;;960    						module_Stop(YES);
;;;961    						sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;962    						break;
;;;963    					}
;;;964    					default:
;;;965    						break;
;;;966    				}
;;;967    				break;
;;;968    			}
;;;969    
;;;970    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;971    			case TOUCH_NORMAL_OPER_LOCAL_IDLE_READY:
;;;972    			{
;;;973    #if USED_ECLK_ON_OFF_CONTROL
;;;974    				HAL_SetECLKOnOffControl(YES);
;;;975    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;976    //#if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;977    //				HAL_SetTPICMuxEnControl(NO, NO);
;;;978    //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;979    //#if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;980    //				HAL_SetTouchReportEnControl(NO);
;;;981    //#endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;982    				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;983    
;;;984    				break;
;;;985    			}
;;;986    
;;;987    			case TOUCH_NORMAL_OPER_LOCAL_IDLE:
;;;988    			{
;;;989    #ifdef MODE_WDT
;;;990    				KICK_DOG();
;;;991    #endif /* MODE_WDT */
;;;992    				if(!module_wait_NI_sample_done())
;;;993    				{
;;;994    					module_Stop(YES);
;;;995    					sub_state = TOUCH_NORMAL_OPER_ENTER;
;;;996    					break;
;;;997    				}
;;;998    
;;;999    				if(algorithm_process_LocalIdle() == NO)
;;;1000   				{
;;;1001   					sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE_PEN_IDLE;
;;;1002   					break;
;;;1003   				}
;;;1004   
;;;1005   				if(algorithm_CheckLocalPenIdleModeControl())
;;;1006   				{
;;;1007   					sub_state = TOUCH_NORMAL_OPER_LOCAL_READY;
;;;1008   				}
;;;1009   				break;
;;;1010   			}
;;;1011   #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;1012   
;;;1013   #endif /* (USED_PEN_MODE_OPERATION) */
;;;1014   #if USED_RAWDATA_TUNE_CALIBRATION
;;;1015   			case TOUCH_NORMAL_OPER_NORMAL_RAWDATA_CALIBRATION:
;;;1016   			{
;;;1017   	#if USED_RAWDATA_HOPP_FRQ_CALIBRATION
;;;1018   				module_Switch_Freq(thisCommonConf->HoppFreq1);
;;;1019   	#endif
;;;1020   				SRIC_RawDataCalibration();
;;;1021   #if USED_PEN_MODE_OPERATION
;;;1022   				sub_state = TOUCH_NORMAL_OPER_READY_REFERENCE_PEN;
;;;1023   #else /* USED_PEN_MODE_OPERATION */
;;;1024   				sub_state = TOUCH_NORMAL_OPER_RESET_REFERENCE;
;;;1025   #endif /* USED_PEN_MODE_OPERATION */
;;;1026   				break;
;;;1027   			}
;;;1028   #endif /* USED_RAWDATA_TUNE_CALIBRATION */
;;;1029   			case TOUCH_NORMAL_OPER_EXIT:
;;;1030   			{
;;;1031   				bLoop = NO;
;;;1032   				continue;
;;;1033   				/* no break */
;;;1034   			}
;;;1035       	}
;;;1036   
;;;1037   		currMode = protocol_swip_GetMode();
0001e2  f7fffffe          BL       protocol_swip_GetMode
0001e6  4683              MOV      r11,r0
;;;1038   		if(currMode != prevMode)
0001e8  42b0              CMP      r0,r6
0001ea  d063              BEQ      |L2.692|
;;;1039   		{
;;;1040   			switch( currMode )
0001ec  f1bb0f02          CMP      r11,#2
0001f0  d051              BEQ      |L2.662|
0001f2  dc12              BGT      |L2.538|
0001f4  f1bb0f00          CMP      r11,#0
0001f8  d016              BEQ      |L2.552|
0001fa  f1bb0f01          CMP      r11,#1
0001fe  d016              BEQ      |L2.558|
000200  e058              B        |L2.692|
                  |L2.514|
000202  6828              LDR      r0,[r5,#0]            ;701  ; thisCommonConf
000204  7ec0              LDRB     r0,[r0,#0x1b]         ;701
000206  f7fffffe          BL       module_Switch_Freq
                  |L2.522|
00020a  240e              MOVS     r4,#0xe               ;711
00020c  e7e9              B        |L2.482|
                  |L2.526|
00020e  6828              LDR      r0,[r5,#0]            ;716  ; thisCommonConf
000210  7e80              LDRB     r0,[r0,#0x1a]         ;716
000212  f7fffffe          BL       module_Switch_Freq
000216  240e              MOVS     r4,#0xe               ;726
000218  e7e3              B        |L2.482|
                  |L2.538|
00021a  f1bb0f03          CMP      r11,#3
00021e  d02c              BEQ      |L2.634|
000220  f1bb0f11          CMP      r11,#0x11
000224  d040              BEQ      |L2.680|
000226  e045              B        |L2.692|
                  |L2.552|
;;;1041   			{
;;;1042   				case M_TOUCH_NORMAL:
;;;1043   				{
;;;1044   					protocol_swip_PendReadyStatus();
000228  f7fffffe          BL       protocol_swip_PendReadyStatus
;;;1045   
;;;1046   					break;
00022c  e042              B        |L2.692|
                  |L2.558|
;;;1047   				}
;;;1048   				case M_TOUCH_DIAG:
;;;1049   				{
;;;1050   					eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
00022e  f7fffffe          BL       HAL_GetSensingMode
000232  4606              MOV      r6,r0
;;;1051   					sub_state = TOUCH_NORMAL_OPER_EXIT;
000234  241a              MOVS     r4,#0x1a
;;;1052   					main_state = TOUCH_MAIN_OPERATION_DIAG;
000236  f04f0802          MOV      r8,#2
;;;1053   					
;;;1054   #if USED_ECLK_ON_OFF_CONTROL
;;;1055   					HAL_SetECLKOnOffControl(NO);
00023a  2000              MOVS     r0,#0
00023c  f7fffffe          BL       HAL_SetECLKOnOffControl
;;;1056   #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;1057   #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;1058   					HAL_SetTPICMuxEnControl(NO, NO);
000240  2100              MOVS     r1,#0
000242  4608              MOV      r0,r1
000244  f7fffffe          BL       HAL_SetTPICMuxEnControl
;;;1059   #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;1060   #if USED_TPIC_PENEN_ON_OFF_CONTROL
;;;1061   					HAL_SetTPICPenEnControl(NO);
;;;1062   #endif /* USED_TPIC_PENEN_ON_OFF_CONTROL */
;;;1063   #if USED_TOUCH_REPORT_ON_OFF_CONTROL
;;;1064   					HAL_SetTouchReportEnControl(NO);
000248  2000              MOVS     r0,#0
00024a  f7fffffe          BL       HAL_SetTouchReportEnControl
;;;1065   #endif /* USED_TOUCH_REPORT_ON_OFF_CONTROL */
;;;1066   
;;;1067   #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;1068   					HAL_SetHoppBaselineContinueEnControl(NO);
00024e  2000              MOVS     r0,#0
000250  f7fffffe          BL       HAL_SetHoppBaselineContinueEnControl
;;;1069   #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;1070   
;;;1071   					if(IS_IDLE_MODE(eSensingMode))
000254  f4167f80          TST      r6,#0x100
000258  d003              BEQ      |L2.610|
;;;1072   					{
;;;1073   #if USED_PEN_MODE_OPERATION
;;;1074   						HAL_SetSensingChangeMode(SM_CHANGE_LocalIdle_To_Full_MODE);
;;;1075   #else /* USED_PEN_MODE_OPERATION */
;;;1076   						HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_MODE);
00025a  2002              MOVS     r0,#2
00025c  f7fffffe          BL       HAL_SetSensingChangeMode
000260  e006              B        |L2.624|
                  |L2.610|
;;;1077   #endif /* USED_PEN_MODE_OPERATION */
;;;1078   					}
;;;1079   					else
;;;1080   					{
;;;1081   #if USED_NOISE_HOPPING_FREQ
;;;1082   						if(IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode) == NO)
000262  f0160f02          TST      r6,#2
000266  d103              BNE      |L2.624|
;;;1083   						{
;;;1084   							module_Switch_Freq(thisCommonConf->MainFreq);
000268  6828              LDR      r0,[r5,#0]  ; thisCommonConf
00026a  7e80              LDRB     r0,[r0,#0x1a]
00026c  f7fffffe          BL       module_Switch_Freq
                  |L2.624|
;;;1085   	#if USED_PEN_MODE_OPERATION
;;;1086   							if(IS_FINGER_PEN_MODE(eSensingMode))
;;;1087   							{
;;;1088   								while (YES)
;;;1089   								{
;;;1090   									if(module_wait_local_sample_done() == LOCAL_OP_LAST_LHB)
;;;1091   										break;
;;;1092   								}
;;;1093   //								module_wait_full_sample_done();
;;;1094   								HAL_SetSensingChangeMode(SM_CHAGNE_Local_To_Full_MODE);
;;;1095   							}
;;;1096   	#endif /* USED_PEN_MODE_OPERATION */
;;;1097   						}
;;;1098   						else
;;;1099   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1100   						{
;;;1101   #if USED_PEN_MODE_OPERATION
;;;1102   							if(IS_FINGER_PEN_MODE(eSensingMode))
;;;1103   							{
;;;1104   								HAL_SetSensingChangeMode(SM_CHAGNE_Local_To_Full_MODE);
;;;1105   							}
;;;1106   #endif /* USED_PEN_MODE_OPERATION */
;;;1107   						}
;;;1108   					}
;;;1109   
;;;1110   					/*
;;;1111   					 * Wait Mode Change!!
;;;1112   					 */
;;;1113   					module_wait_full_sample_done();
000270  f7fffffe          BL       module_wait_full_sample_done
;;;1114   #ifdef MODE_WDT
;;;1115   					module_Watch_Disable();
000274  f7fffffe          BL       module_Watch_Disable
;;;1116   #endif /* MODE_WDT */
;;;1117   
;;;1118   					break;
000278  e01c              B        |L2.692|
                  |L2.634|
;;;1119   				}
;;;1120   				case M_TOUCH_DFUP:
;;;1121   				case M_PARAMETER:
;;;1122   				{
;;;1123   #ifdef MODE_WDT
;;;1124   					LONG_KICK_DOG();
00027a  f7fffffe          BL       Hal_Long_Kick_DOG
;;;1125   #endif /* MODE_WDT */
;;;1126   
;;;1127   //					while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1128   //					while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 1);
;;;1129   //					while(IS_GPIO_PIN(_GPIO_TSYNC_IN) == 0);
;;;1130   					module_Stop(NO);
00027e  2000              MOVS     r0,#0
000280  f7fffffe          BL       module_Stop
;;;1131   
;;;1132   					if(currMode == M_PARAMETER)
000284  f1bb0f03          CMP      r11,#3
;;;1133   					{
;;;1134   						sub_state = TOUCH_NORMAL_OPER_RESET_SYSTEM;
000288  bf08              IT       EQ
00028a  2403              MOVEQ    r4,#3
00028c  d012              BEQ      |L2.692|
;;;1135   					}
;;;1136   					else if(currMode == M_TOUCH_DFUP)
00028e  f1bb0f02          CMP      r11,#2
000292  d005              BEQ      |L2.672|
000294  e00e              B        |L2.692|
                  |L2.662|
000296  f7fffffe          BL       Hal_Long_Kick_DOG
00029a  2000              MOVS     r0,#0                 ;1130
00029c  f7fffffe          BL       module_Stop
                  |L2.672|
;;;1137   					{
;;;1138   						sub_state = TOUCH_NORMAL_OPER_EXIT;
0002a0  241a              MOVS     r4,#0x1a
;;;1139   						main_state = TOUCH_MAIN_OPERATION_DFUP;
0002a2  f04f0803          MOV      r8,#3
0002a6  e005              B        |L2.692|
                  |L2.680|
;;;1140   					}
;;;1141   					break;
;;;1142   				}
;;;1143   				case M_WATCH_DOG_RESET:
;;;1144   				{
;;;1145   					module_Stop(NO);
0002a8  2000              MOVS     r0,#0
0002aa  f7fffffe          BL       module_Stop
;;;1146   					sub_state = TOUCH_NORMAL_OPER_EXIT;
0002ae  241a              MOVS     r4,#0x1a
;;;1147   					main_state = TOUCH_MAIN_OPERATION_RESET;
0002b0  f04f0804          MOV      r8,#4
                  |L2.692|
;;;1148   					break;
;;;1149   				}
;;;1150   			}
;;;1151   		}
;;;1152   
;;;1153   		prevMode = currMode;
0002b4  465e              MOV      r6,r11
0002b6  f1b90f00          CMP      r9,#0                 ;132
0002ba  f47faeb9          BNE      |L2.48|
                  |L2.702|
;;;1154       }
;;;1155   
;;;1156       return main_state;
0002be  4640              MOV      r0,r8
;;;1157   }
0002c0  e8bd9ff0          POP      {r4-r12,pc}
;;;1158   
                          ENDP

                  |L2.708|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  thisCommonConf
                          DCD      0x00000000
                  sptAlgorithmInfo
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  TEST_LOCAL_STATE
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.data||
                  currentColStart
000000  0000              DCW      0x0000

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  diff_rs_cnt
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  CurrFreq
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\app_normal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___12_app_normal_c_2a216f96____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____REVSH|
#line 402
|__asm___12_app_normal_c_2a216f96____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_app_normal_c_2a216f96____RRX|
#line 587
|__asm___12_app_normal_c_2a216f96____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
