<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\MFTP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\MFTP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Feb 15 17:01:43 2023
<BR><P>
<H3>Maximum Stack Usage =       1928 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[68]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">AB_ACC_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[d]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[14]">DBG_I2C_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[16]">DBG_SPI_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[20]">DSP_A_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[2b]">DSP_A_InterruptHandler</a> from dspa.o(i.DSP_A_InterruptHandler) referenced from dspa.o(i.DSPA_Initialize)
 <LI><a href="#[21]">DSP_B_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[40]">DSP_B_InterruptHandler</a> from dsp_b.o(i.DSP_B_InterruptHandler) referenced from dsp_b.o(i.init_DSP_B)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[23]">EXTInterface_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[15]">FLITF_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[18]">GDMA_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[1a]">GPIOA_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[2c]">GPIOA_InterruptHandler</a> from gpio.o(i.GPIOA_InterruptHandler) referenced from gpio.o(i.GPIO_Initialize)
 <LI><a href="#[1b]">GPIOM_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[2d]">GPIOM_InterruptHandler</a> from gpio.o(i.GPIOM_InterruptHandler) referenced from gpio.o(i.GPIO_Initialize)
 <LI><a href="#[b]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from startup.o(VECTOR)
 <LI><a href="#[30]">I2C_InterruptHandler</a> from i2c.o(i.I2C_InterruptHandler) referenced from i2c.o(i.I2C_Initialize)
 <LI><a href="#[24]">I2C_MST_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[25]">I2C_MST_Sleep_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[26]">I2C_MST_Wakeup_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[27]">I2C_SLV_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[28]">I2C_SLV_Sleep_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[29]">I2C_SLV_Wakeup_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[31]">MSPI_InterruptHandler</a> from mspi.o(i.MSPI_InterruptHandler) referenced from mspi.o(i.MSPI_Initialize)
 <LI><a href="#[c]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[a]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[35]">PWMDRV_PWM_Out_InterruptHandler</a> from pwmdrv.o(i.PWMDRV_PWM_Out_InterruptHandler) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[33]">PWMDRV_TSync_In_InterruptHandler</a> from pwmdrv.o(i.PWMDRV_TSync_In_InterruptHandler) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[34]">PWMDRV_TSync_Out_InterruptHandler</a> from pwmdrv.o(i.PWMDRV_TSync_Out_InterruptHandler) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[32]">PWMDRV_VSync_In_InterruptHandler</a> from pwmdrv.o(i.PWMDRV_VSync_In_InterruptHandler) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[1f]">PWM_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[11]">PendSV_Handler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[2e]">PendSV_InterruptHandler</a> from interrupt.o(i.PendSV_InterruptHandler) referenced from interrupt.o(i.HAL_PendSVHandlerInitialize)
 <LI><a href="#[9]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[f]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[37]">SW92513_RegisterInit</a> from roic_ctrl_sw92513.o(i.SW92513_RegisterInit) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[36]">SW92513_Reset</a> from roic_ctrl_sw92513.o(i.SW92513_Reset) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[38]">SW92513_Run</a> from roic_ctrl_sw92513.o(i.SW92513_Run) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[3b]">SW92513_SetActiveOperationMode</a> from roic_ctrl_sw92513.o(i.SW92513_SetActiveOperationMode) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[3d]">SW92513_SetDiagTestOperationMode</a> from roic_ctrl_sw92513.o(i.SW92513_SetDiagTestOperationMode) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[3a]">SW92513_SetIdleOperationMode</a> from roic_ctrl_sw92513.o(i.SW92513_SetIdleOperationMode) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[39]">SW92513_SetLocalIndex</a> from roic_ctrl_sw92513.o(i.SW92513_SetLocalIndex) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[3c]">SW92513_SetRuntimeChangeRegister</a> from roic_ctrl_sw92513.o(i.SW92513_SetRuntimeChangeRegister) referenced from sric.o(i.SRIC_Initialize)
 <LI><a href="#[13]">TIMER_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[3e]">TIMER_InterruptHandler</a> from timer.o(i.TIMER_InterruptHandler) referenced from timer.o(i.TIMER_Initialize)
 <LI><a href="#[1d]">TSYNC_IN_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[1e]">TSYNC_OUT_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[3f]">TimerTick_InterruptHandler</a> from timer_tick.o(i.TimerTick_InterruptHandler) referenced from timer_tick.o(i.TimerTick_Initialize)
 <LI><a href="#[22]">USB_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[19]">USER_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(VECTOR)
 <LI><a href="#[1c]">VSYNC_IN_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[12]">WDGT_IRQHandler</a> from app.o(APP) referenced from startup.o(VECTOR)
 <LI><a href="#[2f]">WDGT_InterruptHandler</a> from wdgt.o(i.WDGT_InterruptHandler) referenced from wdgt.o(i.Hal_WDT_ForceReset)
 <LI><a href="#[2f]">WDGT_InterruptHandler</a> from wdgt.o(i.WDGT_InterruptHandler) referenced from wdgt.o(i.Hal_WDT_Init)
 <LI><a href="#[44]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[43]">protocol_swip_ClearInterrupt</a> from protocol_swip.o(i.protocol_swip_ClearInterrupt) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[42]">protocol_swip_GetMappedPointer</a> from protocol_swip.o(i.protocol_swip_GetMappedPointer) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[41]">protocol_swip_Init</a> from protocol_swip.o(i.protocol_swip_Init) referenced from protocol.o(i.protocol_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[68]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[12]"></a>WDGT_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDGT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[13]"></a>TIMER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[14]"></a>DBG_I2C_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DBG_I2C_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[15]"></a>FLITF_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLITF_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[16]"></a>DBG_SPI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DBG_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[17]"></a>AB_ACC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AB_ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[18]"></a>GDMA_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[19]"></a>USER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1a]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1b]"></a>GPIOM_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1c]"></a>VSYNC_IN_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSYNC_IN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1d]"></a>TSYNC_IN_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSYNC_IN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1e]"></a>TSYNC_OUT_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSYNC_OUT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[1f]"></a>PWM_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[20]"></a>DSP_A_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_A_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[21]"></a>DSP_B_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_B_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[23]"></a>EXTInterface_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTInterface_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[24]"></a>I2C_MST_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MST_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[25]"></a>I2C_MST_Sleep_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MST_Sleep_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[26]"></a>I2C_MST_Wakeup_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MST_Wakeup_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[27]"></a>I2C_SLV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SLV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[28]"></a>I2C_SLV_Sleep_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SLV_Sleep_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[29]"></a>I2C_SLV_Wakeup_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SLV_Wakeup_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[47]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[163]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[164]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[165]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[166]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[167]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[168]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[169]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[170]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[171]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[172]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[173]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[174]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[176]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[178]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[179]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[17f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[180]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[46]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[184]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[185]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[186]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[187]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[188]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[55]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[189]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
</UL>

<P><STRONG><a name="[58]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLITF_CheckTrimInfoSectionIntegrity
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Pop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[5a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[18a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PushTouchEvent
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[5e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[18e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[61]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[49]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[63]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[194]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[62]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[195]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[50]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[66]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[65]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[54]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[6a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[6b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[6c]"></a>DSPA_CalculateDelta_Process</STRONG> (Thumb, 908 bytes, Stack size 176 bytes, dspa.o(i.DSPA_CalculateDelta_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DSPA_CalculateDelta_Process &rArr; DSPA_WaitForIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_irq_flag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_WaitForIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_dspA
</UL>

<P><STRONG><a name="[150]"></a>DSPA_Initialize</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dspa.o(i.DSPA_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[6e]"></a>DSPA_WaitForIrq</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, dspa.o(i.DSPA_WaitForIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DSPA_WaitForIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_irq_flag
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clear_irq_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_CalculateDelta_Process
</UL>

<P><STRONG><a name="[2b]"></a>DSP_A_InterruptHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dspa.o(i.DSP_A_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_A_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_irq_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dspa.o(i.DSPA_Initialize)
</UL>
<P><STRONG><a name="[40]"></a>DSP_B_InterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dsp_b.o(i.DSP_B_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> dsp_b.o(i.init_DSP_B)
</UL>
<P><STRONG><a name="[71]"></a>FLITF_CheckTrimInfoSectionIntegrity</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, flitf.o(i.FLITF_CheckTrimInfoSectionIntegrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLITF_CheckTrimInfoSectionIntegrity
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
</UL>

<P><STRONG><a name="[2c]"></a>GPIOA_InterruptHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.GPIOA_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.GPIO_Initialize)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOM_InterruptHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.GPIOM_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.GPIO_Initialize)
</UL>
<P><STRONG><a name="[87]"></a>GPIO_Get_IN</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Get_IN))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Check_SMT_Mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Check_LcdOn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SendTouchEvent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PushTouchEvent
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Skip_Event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_WaitEventInterruptCleared
</UL>

<P><STRONG><a name="[78]"></a>GPIO_Get_OUT</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Get_OUT))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
</UL>

<P><STRONG><a name="[73]"></a>GPIO_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Dir
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Mode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Enter_SMT_Mode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoardGPIO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reset
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[76]"></a>GPIO_Set_DATA</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Set_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTPICMuxEnControl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SendTouchEvent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_WaitEventInterruptCleared
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_ClearInterrupt
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_Set_DS</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Set_DS))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
</UL>

<P><STRONG><a name="[75]"></a>GPIO_Set_Dir</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Set_Dir))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[74]"></a>GPIO_Set_Mode</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Set_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[a5]"></a>GPIO_Set_PE</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Set_PE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
</UL>

<P><STRONG><a name="[77]"></a>GPIO_Toggle</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gpio.o(i.GPIO_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_OUT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SignalOut_SMT_Mode
</UL>

<P><STRONG><a name="[79]"></a>HAL_CheckSensningModeChange</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, hal.o(i.HAL_CheckSensningModeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CheckSensningModeChange &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SetCurrentSelectFrequency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetRuntimeChangeRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetDiagTestOperationMode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_FullScanIdleModeSetting
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_ConfigInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.HAL_ConfigInit))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_ECLK_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal.o(i.HAL_ECLK_Off))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_ECLK_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i.HAL_ECLK_On))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_Out_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[80]"></a>HAL_GetBaseImagePointer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal.o(i.HAL_GetBaseImagePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetBaseImagePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_GetControlLocalFingerOPType
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous_idle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_idle
</UL>

<P><STRONG><a name="[bd]"></a>HAL_GetECLKOnOffControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetECLKOnOffControl))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_Out_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_GetHoppBaselineContinueEnControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetHoppBaselineContinueEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_Check_FreqHopping
</UL>

<P><STRONG><a name="[a9]"></a>HAL_GetSensingChangeMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.HAL_GetSensingChangeMode))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GetSensingMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.HAL_GetSensingMode))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous_idle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_idle
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_InterruptHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetRuntimeChangeRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetDiagTestOperationMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_BUFSIZE_FingerPenMode
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetTPICMuxEnControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetTPICMuxEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_Out_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_PWM_Out_InterruptHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_GetTouchReportEnControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetTouchReportEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Skip_Event
</UL>

<P><STRONG><a name="[82]"></a>HAL_Initialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal.o(i.HAL_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PendSVHandlerInitialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupt.o(i.HAL_PendSVHandlerInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_SetDiagTestSensingChangeMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal.o(i.HAL_SetDiagTestSensingChangeMode))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_SetECLKOnOffControl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal.o(i.HAL_SetECLKOnOffControl))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
</UL>

<P><STRONG><a name="[146]"></a>HAL_SetHoppBaselineContinueEnControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.HAL_SetHoppBaselineContinueEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
</UL>

<P><STRONG><a name="[aa]"></a>HAL_SetSensingChangeMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal.o(i.HAL_SetSensingChangeMode))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Switch_Freq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_SetTPICMuxEnControl</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal.o(i.HAL_SetTPICMuxEnControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SetTPICMuxEnControl
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
</UL>

<P><STRONG><a name="[147]"></a>HAL_SetTouchReportEnControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.HAL_SetTouchReportEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
</UL>

<P><STRONG><a name="[f8]"></a>Hal_Kick_DOG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdgt.o(i.Hal_Kick_DOG))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[149]"></a>Hal_Long_Kick_DOG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdgt.o(i.Hal_Long_Kick_DOG))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[85]"></a>Hal_VccOff_State</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, hal.o(i.Hal_VccOff_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Check_LcdOn
</UL>

<P><STRONG><a name="[151]"></a>Hal_WDT_DeInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wdgt.o(i.Hal_WDT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Disable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
</UL>

<P><STRONG><a name="[12c]"></a>Hal_WDT_ForceReset</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, wdgt.o(i.Hal_WDT_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[155]"></a>Hal_WDT_Init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, wdgt.o(i.Hal_WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
</UL>

<P><STRONG><a name="[86]"></a>Hal_sric_start</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, hal.o(i.Hal_sric_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_sric_start &rArr; PWMDRV_Init &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_RegisterInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_BUFSIZE_FingerPenMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Start
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(VECTOR)
</UL>
<P><STRONG><a name="[92]"></a>HidReadWrite__Read_I2C</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pe_usb.o(i.HidReadWrite__Read_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HidReadWrite__Read_I2C &rArr; SendCustomData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[98]"></a>HidReadWrite__Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pe_usb.o(i.HidReadWrite__Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HidReadWrite__Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[94]"></a>I2C_Initialize</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, i2c.o(i.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[30]"></a>I2C_InterruptHandler</STRONG> (Thumb, 1242 bytes, Stack size 40 bytes, i2c.o(i.I2C_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_InterruptHandler &rArr; HidReadWrite__Read_I2C &rArr; SendCustomData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_hid__SetAddress
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_hid__FromHostToDevice
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_hid_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_hid_FromDeviceToHost
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read_I2C
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.I2C_Initialize)
</UL>
<P><STRONG><a name="[9c]"></a>MODULE_Initialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, module.o(i.MODULE_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MODULE_Initialize &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetCommonConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetFixedConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[154]"></a>MSPI_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
</UL>

<P><STRONG><a name="[a2]"></a>MSPI_GPIO_Init</STRONG> (Thumb, 1232 bytes, Stack size 32 bytes, mspi.o(i.MSPI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_PE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mspi_GetCommonConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DS
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
</UL>

<P><STRONG><a name="[8f]"></a>MSPI_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mspi.o(i.MSPI_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[8b]"></a>MSPI_Initialize</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mspi.o(i.MSPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSPI_Initialize &rArr; MSPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mspi_GetCommonConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[31]"></a>MSPI_InterruptHandler</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mspi.o(i.MSPI_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSPI_InterruptHandler &rArr; HAL_CheckSensningModeChange &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mspi_GetControlConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetCommonConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingChangeMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_irq_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mspi.o(i.MSPI_Initialize)
</UL>
<P><STRONG><a name="[ce]"></a>MSPI_RegisterMultiWrite</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, mspi.o(i.MSPI_RegisterMultiWrite))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetRuntimeChangeRegister
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetDiagTestOperationMode
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_RegisterInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_CRTuneSetting
</UL>

<P><STRONG><a name="[c0]"></a>MSPI_RegisterWrite</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, mspi.o(i.MSPI_RegisterWrite))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetRuntimeChangeRegister
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetDiagTestOperationMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Run
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_RegisterInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_AFESetting
</UL>

<P><STRONG><a name="[90]"></a>MSPI_Set_AITMODE</STRONG> (Thumb, 652 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Set_AITMODE))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetRuntimeChangeRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetDiagTestOperationMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[91]"></a>MSPI_Set_BUFSIZE_FingerPenMode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mspi.o(i.MSPI_Set_BUFSIZE_FingerPenMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_Set_BUFSIZE_FingerPenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[8c]"></a>MSPI_Set_TLPMODE</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Set_TLPMODE))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetRuntimeChangeRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_SetDiagTestOperationMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[13e]"></a>PARAM_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i.PARAM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[158]"></a>PARAM_GetPreMainSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.PARAM_GetPreMainSet))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[ab]"></a>PARAM_InitConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, param.o(i.PARAM_InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PARAM_InitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_SetModeConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[ae]"></a>PARAM_Initialize</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, param.o(i.PARAM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PARAM_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetCommonConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SetCommonConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_SetCommonConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetCommonConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SetCommonConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetFixedConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetCommonConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_SetCommonConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[13f]"></a>PARAM_SetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, param.o(i.PARAM_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
</UL>

<P><STRONG><a name="[7b]"></a>PWMDRV_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[7d]"></a>PWMDRV_FullScanIdleModeSetting</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pwmdrv.o(i.PWMDRV_FullScanIdleModeSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_FullScanIdleModeSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetControlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[153]"></a>PWMDRV_ITConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, pwmdrv.o(i.PWMDRV_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
</UL>

<P><STRONG><a name="[88]"></a>PWMDRV_Init</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, pwmdrv.o(i.PWMDRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWMDRV_Init &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DS
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[35]"></a>PWMDRV_PWM_Out_InterruptHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pwmdrv.o(i.PWMDRV_PWM_Out_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_PWM_Out_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTPICMuxEnControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[7a]"></a>PWMDRV_RegisterInit</STRONG> (Thumb, 1118 bytes, Stack size 32 bytes, pwmdrv.o(i.PWMDRV_RegisterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetControlConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_SetChangeWGPPenBeaconType
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_SetChangeCompleteWGPPenBeaconType
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_GetChangeWGPPenBeaconType
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[33]"></a>PWMDRV_TSync_In_InterruptHandler</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, pwmdrv.o(i.PWMDRV_TSync_In_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PWMDRV_TSync_In_InterruptHandler &rArr; HAL_CheckSensningModeChange &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_GetControlActivePenOPType
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_BUFSIZE_FingerPenMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTPICMuxEnControl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingChangeMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetECLKOnOffControl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ECLK_On
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ECLK_Off
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SRIC_GetCommonConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[34]"></a>PWMDRV_TSync_Out_InterruptHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pwmdrv.o(i.PWMDRV_TSync_Out_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_TSync_Out_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTPICMuxEnControl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetECLKOnOffControl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ECLK_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[32]"></a>PWMDRV_VSync_In_InterruptHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_VSync_In_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[2e]"></a>PendSV_InterruptHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(i.PendSV_InterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(i.HAL_PendSVHandlerInitialize)
</UL>
<P><STRONG><a name="[9a]"></a>Protocol_hid_FromDeviceToHost</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pe_usb.o(i.Protocol_hid_FromDeviceToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_hid_FromDeviceToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[95]"></a>Protocol_hid_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pe_usb.o(i.Protocol_hid_Init))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[97]"></a>Protocol_hid__FromHostToDevice</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pe_usb.o(i.Protocol_hid__FromHostToDevice))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[9b]"></a>Protocol_hid__SetAddress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pe_usb.o(i.Protocol_hid__SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_hid__SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[c2]"></a>QueueCommonData_I2C</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, i2c.o(i.QueueCommonData_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QueueCommonData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Pop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_HeadDelete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckFull
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckEmpty
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_InterruptHandler
</UL>

<P><STRONG><a name="[c9]"></a>SCRB_Initialize</STRONG> (Thumb, 736 bytes, Stack size 64 bytes, scrb.o(i.SCRB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCRB_Initialize &rArr; FLITF_CheckTrimInfoSectionIntegrity
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medium_delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLITF_CheckTrimInfoSectionIntegrity
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[131]"></a>SCRB_Remap_And_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scrb.o(i.SCRB_Remap_And_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>

<P><STRONG><a name="[a0]"></a>SRIC_Initialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sric.o(i.SRIC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SRIC_Initialize &rArr; SW92513_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[8d]"></a>SRIC_RegisterInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sric.o(i.SRIC_RegisterInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[89]"></a>SRIC_Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sric.o(i.SRIC_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[8e]"></a>SRIC_Run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sric.o(i.SRIC_Run))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[7f]"></a>SRIC_SetDiagTestOperationMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sric.o(i.SRIC_SetDiagTestOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SRIC_SetDiagTestOperationMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[7c]"></a>SRIC_SetRuntimeChangeRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sric.o(i.SRIC_SetRuntimeChangeRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SRIC_SetRuntimeChangeRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[cb]"></a>SW92513_Initialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, roic_ctrl_sw92513.o(i.SW92513_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW92513_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SRIC_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Initialize
</UL>

<P><STRONG><a name="[37]"></a>SW92513_RegisterInit</STRONG> (Thumb, 1280 bytes, Stack size 16 bytes, roic_ctrl_sw92513.o(i.SW92513_RegisterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SW92513_RegisterInit &rArr; SW92513_Reg_CRTuneSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterMultiWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_CRTuneSetting
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_AFESetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[36]"></a>SW92513_Reset</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, roic_ctrl_sw92513.o(i.SW92513_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SW92513_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[38]"></a>SW92513_Run</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, roic_ctrl_sw92513.o(i.SW92513_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW92513_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[3b]"></a>SW92513_SetActiveOperationMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, roic_ctrl_sw92513.o(i.SW92513_SetActiveOperationMode))
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[3d]"></a>SW92513_SetDiagTestOperationMode</STRONG> (Thumb, 4420 bytes, Stack size 88 bytes, roic_ctrl_sw92513.o(i.SW92513_SetDiagTestOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SW92513_SetDiagTestOperationMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterMultiWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[3a]"></a>SW92513_SetIdleOperationMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, roic_ctrl_sw92513.o(i.SW92513_SetIdleOperationMode))
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[39]"></a>SW92513_SetLocalIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, roic_ctrl_sw92513.o(i.SW92513_SetLocalIndex))
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[3c]"></a>SW92513_SetRuntimeChangeRegister</STRONG> (Thumb, 696 bytes, Stack size 16 bytes, roic_ctrl_sw92513.o(i.SW92513_SetRuntimeChangeRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SW92513_SetRuntimeChangeRegister &rArr; SW92513_Reg_CRTuneSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterMultiWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_CRTuneSetting
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reg_AFESetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sric.o(i.SRIC_Initialize)
</UL>
<P><STRONG><a name="[93]"></a>SendCustomData_I2C</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c.o(i.SendCustomData_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendCustomData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_HeadDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckFull
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read_I2C
</UL>

<P><STRONG><a name="[d0]"></a>SendTouchData</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, pe_usb.o(i.SendTouchData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendTouchData &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedLongSYSTICK
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_I2C
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Skip_Event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[d3]"></a>SendTouchData_I2C</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i.SendTouchData_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendTouchData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_HeadDelete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckFull
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[d4]"></a>SensingBufferInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, interrupt.o(i.SensingBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SensingBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
</UL>

<P><STRONG><a name="[c4]"></a>StaticQueue_CheckEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_CheckEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[c6]"></a>StaticQueue_CheckFull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_CheckFull))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_I2C
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[cf]"></a>StaticQueue_CheckInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_CheckInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>

<P><STRONG><a name="[c7]"></a>StaticQueue_HeadDelete</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_HeadDelete))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_I2C
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[96]"></a>StaticQueue_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pe_usb.o(i.StaticQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StaticQueue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[c5]"></a>StaticQueue_Pop</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pe_usb.o(i.StaticQueue_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StaticQueue_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[c8]"></a>StaticQueue_Push</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pe_usb.o(i.StaticQueue_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_I2C
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>

<P><STRONG><a name="[14c]"></a>TIMER_Initialize</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, timer.o(i.TIMER_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[3e]"></a>TIMER_InterruptHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, timer.o(i.TIMER_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_Initialize)
</UL>
<P><STRONG><a name="[d7]"></a>TIMER_SetPeriodicMode</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, timer.o(i.TIMER_SetPeriodicMode))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_Initialize
</UL>

<P><STRONG><a name="[d8]"></a>TIMER_StartTimer</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, timer.o(i.TIMER_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_Initialize
</UL>

<P><STRONG><a name="[dc]"></a>TimerTick_GetIdleModeCheckTimeSec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_tick.o(i.TimerTick_GetIdleModeCheckTimeSec))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
</UL>

<P><STRONG><a name="[d6]"></a>TimerTick_Initialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer_tick.o(i.TimerTick_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerTick_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartTimer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetPeriodicMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[3f]"></a>TimerTick_InterruptHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_tick.o(i.TimerTick_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimerTick_InterruptHandler &rArr; QueueCommonData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_I2C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_tick.o(i.TimerTick_Initialize)
</UL>
<P><STRONG><a name="[db]"></a>TimerTick_ResetIdleModeCheckTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_tick.o(i.TimerTick_ResetIdleModeCheckTime))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
</UL>

<P><STRONG><a name="[d9]"></a>USB_DevInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pe_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[2f]"></a>WDGT_InterruptHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wdgt.o(i.WDGT_InterruptHandler))
<BR>[Address Reference Count : 2]<UL><LI> wdgt.o(i.Hal_WDT_Init)
<LI> wdgt.o(i.Hal_WDT_ForceReset)
</UL>
<P><STRONG><a name="[e3]"></a>__ARM_common_memclr4_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, algorithm.o(i.__ARM_common_memclr4_10))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[da]"></a>algorithm_CheckFingerIdleModeControl</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, algorithm.o(i.algorithm_CheckFingerIdleModeControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = algorithm_CheckFingerIdleModeControl
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_ResetIdleModeCheckTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_GetIdleModeCheckTimeSec
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[dd]"></a>algorithm_Check_FreqHopping</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, algorithm_noise.o(i.algorithm_Check_FreqHopping))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = algorithm_Check_FreqHopping
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHoppBaselineContinueEnControl
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[126]"></a>algorithm_Check_Mux_Delta</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, algorithm.o(i.algorithm_Check_Mux_Delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = algorithm_Check_Mux_Delta
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[b6]"></a>algorithm_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
</UL>

<P><STRONG><a name="[f1]"></a>algorithm_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init_dspA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[ef]"></a>algorithm_GetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init_dspA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init_param
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init_param
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>

<P><STRONG><a name="[df]"></a>algorithm_OutInCheck</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, algorithm.o(i.algorithm_OutInCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = algorithm_OutInCheck &rArr; algorithm_PendTouchEvent &rArr; SendTouchData &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_UpdatePosHistoryInfo_OutInDrawing
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[e0]"></a>algorithm_PendTouchEvent</STRONG> (Thumb, 962 bytes, Stack size 64 bytes, algorithm.o(i.algorithm_PendTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = algorithm_PendTouchEvent &rArr; SendTouchData &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SendTouchEvent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PushTouchEvent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_InitTouchEventBuffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetPacketFormatId
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_PushTouchEvent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_overlap_pen
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clear_overlap_pen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_coord_modify_pos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_OutInCheck
</UL>

<P><STRONG><a name="[b1]"></a>algorithm_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[ac]"></a>algorithm_SetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_SetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
</UL>

<P><STRONG><a name="[eb]"></a>algorithm_baseline_calculate_delta</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, algorithm_baseline.o(i.algorithm_baseline_calculate_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = algorithm_baseline_calculate_delta &rArr; algorithm_baseline_calculate_delta_dspA &rArr; DSPA_CalculateDelta_Process &rArr; DSPA_WaitForIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_dspA
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[ec]"></a>algorithm_baseline_calculate_delta_dspA</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, dspa.o(i.algorithm_baseline_calculate_delta_dspA))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = algorithm_baseline_calculate_delta_dspA &rArr; DSPA_CalculateDelta_Process &rArr; DSPA_WaitForIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_CalculateDelta_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
</UL>

<P><STRONG><a name="[ed]"></a>algorithm_baseline_calculate_delta_idle</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, algorithm_baseline.o(i.algorithm_baseline_calculate_delta_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = algorithm_baseline_calculate_delta_idle &rArr; HAL_GetBaseImagePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetBaseImagePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
</UL>

<P><STRONG><a name="[ee]"></a>algorithm_baseline_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, algorithm_baseline.o(i.algorithm_baseline_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algorithm_baseline_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[f2]"></a>algorithm_baseline_init_param</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, algorithm_baseline.o(i.algorithm_baseline_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_baseline_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[f3]"></a>algorithm_baseline_tracking_continuous</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = algorithm_baseline_tracking_continuous
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_GetPenDectionEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Info_GetControlLocalFingerOPType
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[f5]"></a>algorithm_baseline_tracking_continuous_idle</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_continuous_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = algorithm_baseline_tracking_continuous_idle &rArr; HAL_GetBaseImagePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetBaseImagePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
</UL>

<P><STRONG><a name="[f6]"></a>algorithm_baseline_tracking_initial</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = algorithm_baseline_tracking_initial &rArr; module_wait_full_sample_done &rArr; Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[f9]"></a>algorithm_baseline_tracking_initial_idle</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_initial_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = algorithm_baseline_tracking_initial_idle &rArr; module_wait_NI_sample_done &rArr; Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetBaseImagePointer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[104]"></a>algorithm_calc_sqrt</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, algorithm.o(i.algorithm_calc_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_calc_distance
</UL>

<P><STRONG><a name="[fb]"></a>algorithm_coord_EdgeExpand_BigFinger</STRONG> (Thumb, 1530 bytes, Stack size 112 bytes, algorithm_coord.o(i.algorithm_coord_EdgeExpand_BigFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = algorithm_coord_EdgeExpand_BigFinger &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[103]"></a>algorithm_coord_IsEdgeArea</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_IsEdgeArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_IsEdgeArea
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_coord_modify_pos
</UL>

<P><STRONG><a name="[10d]"></a>algorithm_coord_OutInDrawing</STRONG> (Thumb, 986 bytes, Stack size 128 bytes, algorithm_coord.o(i.algorithm_coord_OutInDrawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = algorithm_coord_OutInDrawing
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[102]"></a>algorithm_coord_PostProcess</STRONG> (Thumb, 1406 bytes, Stack size 112 bytes, algorithm_coord.o(i.algorithm_coord_PostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = algorithm_coord_PostProcess &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[127]"></a>algorithm_coord_UpdatePosHistoryInfo</STRONG> (Thumb, 318 bytes, Stack size 4 bytes, algorithm_coord.o(i.algorithm_coord_UpdatePosHistoryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = algorithm_coord_UpdatePosHistoryInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[e1]"></a>algorithm_coord_UpdatePosHistoryInfo_OutInDrawing</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, algorithm_coord.o(i.algorithm_coord_UpdatePosHistoryInfo_OutInDrawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = algorithm_coord_UpdatePosHistoryInfo_OutInDrawing
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_OutInCheck
</UL>

<P><STRONG><a name="[105]"></a>algorithm_coord_calc_distance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, algorithm_coord.o(i.algorithm_coord_calc_distance))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_detection_v2
</UL>

<P><STRONG><a name="[10a]"></a>algorithm_coord_calc_pos</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, algorithm_coord.o(i.algorithm_coord_calc_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = algorithm_coord_calc_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[106]"></a>algorithm_coord_init</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[107]"></a>algorithm_coord_init_param</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[123]"></a>algorithm_coord_initialise_pos_buffer</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_initialise_pos_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_initialise_pos_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[108]"></a>algorithm_coord_process</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_EdgeExpand_Finger
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_calc_pos
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_OutInDrawing
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[10c]"></a>algorithm_coord_smoothing_pos</STRONG> (Thumb, 1854 bytes, Stack size 176 bytes, algorithm_coord.o(i.algorithm_coord_smoothing_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = algorithm_coord_smoothing_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[10b]"></a>algorithm_coord_tracking_pos</STRONG> (Thumb, 4842 bytes, Stack size 1720 bytes, algorithm_coord.o(i.algorithm_coord_tracking_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[10f]"></a>algorithm_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, algorithm.o(i.algorithm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = algorithm_init &rArr; algorithm_label_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetCommonConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init_param
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init_param
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[113]"></a>algorithm_init_dspA</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dspa.o(i.algorithm_init_dspA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_init_dspA
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[115]"></a>algorithm_label_Add_NewNode_to_LabelRecord</STRONG> (Thumb, 150 bytes, Stack size 4 bytes, algorithm_label.o(i.algorithm_label_Add_NewNode_to_LabelRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
</UL>

<P><STRONG><a name="[109]"></a>algorithm_label_EdgeExpand_Finger</STRONG> (Thumb, 988 bytes, Stack size 140 bytes, algorithm_coord.o(i.algorithm_label_EdgeExpand_Finger))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = algorithm_label_EdgeExpand_Finger
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[114]"></a>algorithm_label_GetConflictInfo</STRONG> (Thumb, 608 bytes, Stack size 60 bytes, algorithm_label.o(i.algorithm_label_GetConflictInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
</UL>

<P><STRONG><a name="[11a]"></a>algorithm_label_Insert_NewRecord_to_LabelTable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, algorithm_label.o(i.algorithm_label_Insert_NewRecord_to_LabelTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = algorithm_label_Insert_NewRecord_to_LabelTable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
</UL>

<P><STRONG><a name="[116]"></a>algorithm_label_MarkBoundary</STRONG> (Thumb, 336 bytes, Stack size 104 bytes, algorithm_label.o(i.algorithm_label_MarkBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = algorithm_label_MarkBoundary &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[117]"></a>algorithm_label_Merge</STRONG> (Thumb, 1152 bytes, Stack size 160 bytes, algorithm_label.o(i.algorithm_label_Merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = algorithm_label_Merge &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[118]"></a>algorithm_label_Merge_PostProcess</STRONG> (Thumb, 578 bytes, Stack size 120 bytes, algorithm_label.o(i.algorithm_label_Merge_PostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = algorithm_label_Merge_PostProcess &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[11c]"></a>algorithm_label_SearchValidArea</STRONG> (Thumb, 854 bytes, Stack size 176 bytes, algorithm_label.o(i.algorithm_label_SearchValidArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = algorithm_label_SearchValidArea
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[119]"></a>algorithm_label_Split</STRONG> (Thumb, 786 bytes, Stack size 104 bytes, algorithm_label.o(i.algorithm_label_Split))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = algorithm_label_Split &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Insert_NewRecord_to_LabelTable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[11b]"></a>algorithm_label_SplitNMerge_process</STRONG> (Thumb, 490 bytes, Stack size 120 bytes, algorithm_label.o(i.algorithm_label_SplitNMerge_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = algorithm_label_SplitNMerge_process &rArr; algorithm_label_palm_rejection
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_palm_rejection
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SearchValidArea
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
</UL>

<P><STRONG><a name="[111]"></a>algorithm_label_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, algorithm_label.o(i.algorithm_label_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algorithm_label_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[110]"></a>algorithm_label_init_param</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, algorithm_label.o(i.algorithm_label_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_label_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[11d]"></a>algorithm_label_palm_rejection</STRONG> (Thumb, 1848 bytes, Stack size 192 bytes, algorithm_label.o(i.algorithm_label_palm_rejection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = algorithm_label_palm_rejection
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[11e]"></a>algorithm_label_process</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, algorithm_label.o(i.algorithm_label_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = algorithm_label_process &rArr; algorithm_label_SplitNMerge_process &rArr; algorithm_label_palm_rejection
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[11f]"></a>algorithm_noise_detection_v2</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, algorithm_noise.o(i.algorithm_noise_detection_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = algorithm_noise_detection_v2 &rArr; algorithm_noise_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_initialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_calc_distance
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_process
</UL>

<P><STRONG><a name="[112]"></a>algorithm_noise_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, algorithm_noise.o(i.algorithm_noise_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_noise_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[120]"></a>algorithm_noise_initialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, algorithm_noise.o(i.algorithm_noise_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = algorithm_noise_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_detection_v2
</UL>

<P><STRONG><a name="[121]"></a>algorithm_noise_process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, algorithm_noise.o(i.algorithm_noise_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = algorithm_noise_process &rArr; algorithm_noise_detection_v2 &rArr; algorithm_noise_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_detection_v2
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[122]"></a>algorithm_process</STRONG> (Thumb, 1168 bytes, Stack size 96 bytes, algorithm.o(i.algorithm_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_linefilter_2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_initialise_pos_buffer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_UpdatePosHistoryInfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_OutInCheck
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_Check_Mux_Delta
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[128]"></a>algorithm_process_Idle</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, algorithm.o(i.algorithm_process_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = algorithm_process_Idle &rArr; algorithm_baseline_calculate_delta_idle &rArr; HAL_GetBaseImagePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous_idle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_idle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_linefilter_idle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[e6]"></a>alogorithm_coord_modify_pos</STRONG> (Thumb, 1318 bytes, Stack size 88 bytes, algorithm_coord.o(i.alogorithm_coord_modify_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = alogorithm_coord_modify_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[125]"></a>alogorithm_linefilter_2</STRONG> (Thumb, 370 bytes, Stack size 320 bytes, algorithm.o(i.alogorithm_linefilter_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = alogorithm_linefilter_2
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[129]"></a>alogorithm_linefilter_idle</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, algorithm.o(i.alogorithm_linefilter_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alogorithm_linefilter_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
</UL>

<P><STRONG><a name="[9e]"></a>app_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[9f]"></a>app_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init_dspA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta_dspA
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_noise_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
</UL>

<P><STRONG><a name="[12a]"></a>app_MainProc</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, app_main.o(i.app_MainProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_ForceReset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Initialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>app_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[7e]"></a>app_SetCurrentSelectFrequency</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_conf.o(i.app_SetCurrentSelectFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[12f]"></a>app_dfup_oper_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_dfup.o(i.app_dfup_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_dfup_oper_handler &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetDFUP_Ready
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Remap_And_Reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[12e]"></a>app_diag_oper_handler</STRONG> (Thumb, 1790 bytes, Stack size 104 bytes, app_diag.o(i.app_diag_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = app_diag_oper_handler &rArr; alogorithm_linefilter_2
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendTestResult
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendReadyStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetTestType
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetABSAvrCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetCommonConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_linefilter_2
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetDiagTestSensingChangeMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[12d]"></a>app_normal_oper_handler</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, app_normal.o(i.app_normal_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Disable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Switch_Freq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Start
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SignalOut_SMT_Mode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Exit_SMT_Mode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Enter_SMT_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Check_SMT_Mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init_dspA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_Check_FreqHopping
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_SetMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_GetMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Long_Kick_DOG
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTouchReportEnControl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTPICMuxEnControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHoppBaselineContinueEnControl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ConfigInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendReadyStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[8a]"></a>delay_us</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timer_tick.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SignalOut_SMT_Mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Reset
</UL>

<P><STRONG><a name="[d2]"></a>getElapsedLongSYSTICK</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, timer_tick.o(i.getElapsedLongSYSTICK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getElapsedLongSYSTICK
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[83]"></a>hal_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Initialize
</UL>

<P><STRONG><a name="[b9]"></a>hal_Info_GetChangeWGPPenBeaconType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_GetChangeWGPPenBeaconType))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
</UL>

<P><STRONG><a name="[bc]"></a>hal_Info_GetControlActivePenOPType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_GetControlActivePenOPType))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
</UL>

<P><STRONG><a name="[81]"></a>hal_Info_GetControlLocalFingerOPType</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_GetControlLocalFingerOPType))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetBaseImagePointer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous
</UL>

<P><STRONG><a name="[f4]"></a>hal_Info_GetPenDectionEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_GetPenDectionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous
</UL>

<P><STRONG><a name="[ba]"></a>hal_Info_SetChangeCompleteWGPPenBeaconType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_SetChangeCompleteWGPPenBeaconType))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
</UL>

<P><STRONG><a name="[bb]"></a>hal_Info_SetChangeWGPPenBeaconType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_Info_SetChangeWGPPenBeaconType))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
</UL>

<P><STRONG><a name="[b3]"></a>hal_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[6f]"></a>hal_clear_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_clear_irq_flag))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_WaitForIrq
</UL>

<P><STRONG><a name="[ea]"></a>hal_clear_overlap_pen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_clear_overlap_pen))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[6d]"></a>hal_get_irq_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(i.hal_get_irq_flag))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_WaitForIrq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_CalculateDelta_Process
</UL>

<P><STRONG><a name="[a3]"></a>hal_mspi_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_mspi_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
</UL>

<P><STRONG><a name="[a7]"></a>hal_mspi_GetControlConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_mspi_GetControlConfig))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
</UL>

<P><STRONG><a name="[a6]"></a>hal_pwmdrv_GetCommonConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_pwmdrv_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
</UL>

<P><STRONG><a name="[b7]"></a>hal_pwmdrv_GetControlConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_pwmdrv_GetControlConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_RegisterInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_FullScanIdleModeSetting
</UL>

<P><STRONG><a name="[70]"></a>hal_set_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_set_irq_flag))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_A_InterruptHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
</UL>

<P><STRONG><a name="[e2]"></a>hal_set_overlap_pen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_set_overlap_pen))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[14a]"></a>initBoardGPIO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i.initBoardGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initBoardGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>initECLK</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal.o(i.initECLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initECLK
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetCommonConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DS
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[14f]"></a>init_DSP_B</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dsp_b.o(i.init_DSP_B))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Check_LcdOn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medium_delay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoardGPIO
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ca]"></a>medium_delay</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, timer.o(i.medium_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = medium_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
</UL>

<P><STRONG><a name="[14b]"></a>module_Check_LcdOn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(i.module_Check_LcdOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = module_Check_LcdOn &rArr; Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>module_Check_SMT_Mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, module.o(i.module_Check_SMT_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = module_Check_SMT_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[13a]"></a>module_Enter_SMT_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, module.o(i.module_Enter_SMT_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_Enter_SMT_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[144]"></a>module_Exit_SMT_Mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module.o(i.module_Exit_SMT_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[b5]"></a>module_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[9d]"></a>module_GetFixedConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetFixedConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[f0]"></a>module_GetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init_dspA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>

<P><STRONG><a name="[12b]"></a>module_HW_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, module.o(i.module_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = module_HW_Init &rArr; SCRB_Initialize &rArr; FLITF_CheckTrimInfoSectionIntegrity
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PendSVHandlerInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTick_Initialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Initialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_DSP_B
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPA_Initialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[13c]"></a>module_Init_Signal</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, module.o(i.module_Init_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = module_Init_Signal &rArr; initBoardGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoardGPIO
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_PE
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[bf]"></a>module_SRIC_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SRIC_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_TSync_In_InterruptHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_Initialize
</UL>

<P><STRONG><a name="[b4]"></a>module_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[af]"></a>module_SetFixedConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetFixedConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[ad]"></a>module_SetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
</UL>

<P><STRONG><a name="[143]"></a>module_SignalOut_SMT_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, module.o(i.module_SignalOut_SMT_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_SignalOut_SMT_Mode &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Toggle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[d1]"></a>module_Skip_Event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, module.o(i.module_Skip_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = module_Skip_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTouchReportEnControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[142]"></a>module_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(i.module_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = module_Start &rArr; Hal_sric_start &rArr; PWMDRV_Init &rArr; PWMDRV_RegisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[138]"></a>module_Stop</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, module.o(i.module_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = module_Stop &rArr; HAL_SetTPICMuxEnControl
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_SetMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTouchReportEnControl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTPICMuxEnControl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHoppBaselineContinueEnControl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[145]"></a>module_Switch_Freq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, module.o(i.module_Switch_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = module_Switch_Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[148]"></a>module_Watch_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, module.o(i.module_Watch_Disable))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[140]"></a>module_Watch_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, module.o(i.module_Watch_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[13d]"></a>module_start_delay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, module.o(i.module_start_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_start_delay &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[fa]"></a>module_wait_NI_sample_done</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, module.o(i.module_wait_NI_sample_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = module_wait_NI_sample_done &rArr; Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTouchReportEnControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial_idle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[f7]"></a>module_wait_full_sample_done</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, module.o(i.module_wait_full_sample_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = module_wait_full_sample_done &rArr; Hal_VccOff_State &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[156]"></a>protocol_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[157]"></a>protocol_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[124]"></a>protocol_Log</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, protocol_log.o(i.protocol_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_Log &rArr; HAL_SetTPICMuxEnControl
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTouchReportEnControl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTPICMuxEnControl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHoppBaselineContinueEnControl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process_Idle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[b2]"></a>protocol_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[e8]"></a>protocol_hid_PushTouchEvent</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pe_usb.o(i.protocol_hid_PushTouchEvent))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[14e]"></a>protocol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocol.o(i.protocol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = protocol_init &rArr; protocol_swip_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[43]"></a>protocol_swip_ClearInterrupt</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, protocol_swip.o(i.protocol_swip_ClearInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = protocol_swip_ClearInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[134]"></a>protocol_swip_GetABSAvrCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetABSAvrCount))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[130]"></a>protocol_swip_GetDFUP_Ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetDFUP_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>

<P><STRONG><a name="[42]"></a>protocol_swip_GetMappedPointer</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetMappedPointer))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[137]"></a>protocol_swip_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_NI_sample_done
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_Signal
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[e4]"></a>protocol_swip_GetPacketFormatId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetPacketFormatId))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[133]"></a>protocol_swip_GetTestType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetTestType))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[41]"></a>protocol_swip_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, protocol_swip.o(i.protocol_swip_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = protocol_swip_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_GetPreMainSet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_GetInfo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_GetCommonConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[e5]"></a>protocol_swip_InitTouchEventBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_InitTouchEventBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_swip_InitTouchEventBuffer &rArr; protocol_swip_WaitEventInterruptCleared
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_WaitEventInterruptCleared
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[132]"></a>protocol_swip_PendReadyStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_PendReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[136]"></a>protocol_swip_PendTestResult</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_PendTestResult))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[e7]"></a>protocol_swip_PushTouchEvent</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, protocol_swip.o(i.protocol_swip_PushTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_swip_PushTouchEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[e9]"></a>protocol_swip_SendTouchEvent</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, protocol_swip.o(i.protocol_swip_SendTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = protocol_swip_SendTouchEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[159]"></a>protocol_swip_WaitEventInterruptCleared</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, protocol_swip.o(i.protocol_swip_WaitEventInterruptCleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_swip_WaitEventInterruptCleared
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_IN
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_InitTouchEventBuffer
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[15a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[15e]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[15f]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[198]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[199]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_EdgeExpand_BigFinger
</UL>

<P><STRONG><a name="[160]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[15c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[161]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cc]"></a>SW92513_Reg_AFESetting</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, roic_ctrl_sw92513.o(i.SW92513_Reg_AFESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW92513_Reg_AFESetting
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetRuntimeChangeRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_RegisterInit
</UL>

<P><STRONG><a name="[cd]"></a>SW92513_Reg_CRTuneSetting</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, roic_ctrl_sw92513.o(i.SW92513_Reg_CRTuneSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW92513_Reg_CRTuneSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterMultiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_SetRuntimeChangeRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW92513_RegisterInit
</UL>

<P><STRONG><a name="[162]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[15b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
