; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_label.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_label.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm_label.crf ..\..\App\Algorithm\Label\algorithm_label.c]
                          THUMB

                          AREA ||i.algorithm_label_Add_NewNode_to_LabelRecord||, CODE, READONLY, ALIGN=2

                  algorithm_label_Add_NewNode_to_LabelRecord PROC
;;;177    
;;;178    void algorithm_label_Add_NewNode_to_LabelRecord(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bBoundary, bool_t _bAdd2List, int mode)
000000  f8dfc094          LDR      r12,|L1.152|
;;;179    {
000004  b410              PUSH     {r4}
;;;180    	tLabelInfo_t	*temp_label;
;;;181    
;;;182    	temp_label = &thisInfo->tLabel;
000006  f8dcc008          LDR      r12,[r12,#8]  ; thisInfo
;;;183    
;;;184    	if(_d < 0) _d = 0;
00000a  2a00              CMP      r2,#0
00000c  f10c0c45          ADD      r12,r12,#0x45         ;182
000010  bfb8              IT       LT
000012  2200              MOVLT    r2,#0
;;;185    	
;;;186    	temp_label->tTable[_idx].tCoord.x      += _tCell.c * _d;
000014  ebc004c0          RSB      r4,r0,r0,LSL #3
000018  eb041040          ADD      r0,r4,r0,LSL #5
00001c  4460              ADD      r0,r0,r12
00001e  fa4ffc81          SXTB     r12,r1
000022  68c4              LDR      r4,[r0,#0xc]
;;;187    	temp_label->tTable[_idx].tCoord.y      += _tCell.r * _d;
000024  f3412107          SBFX     r1,r1,#8,#8
000028  fb0c4402          MLA      r4,r12,r2,r4          ;186
00002c  60c4              STR      r4,[r0,#0xc]          ;186
00002e  6904              LDR      r4,[r0,#0x10]
000030  2b00              CMP      r3,#0                 ;179
000032  fb014402          MLA      r4,r1,r2,r4
000036  6104              STR      r4,[r0,#0x10]
;;;188    	temp_label->tTable[_idx].ulExtStrength += _d;
000038  6984              LDR      r4,[r0,#0x18]
00003a  4414              ADD      r4,r4,r2
00003c  6184              STR      r4,[r0,#0x18]
;;;189    	if( _bBoundary == NO )
;;;190    	{
;;;191    		temp_label->tTable[_idx].ulStrength    += _d;
;;;192    		temp_label->tTable[_idx].usCellNum++;
;;;193    
;;;194    		if( temp_label->tTable[_idx].sMaxCellVal < _d )
;;;195    		{
;;;196    			temp_label->tTable[_idx].sMaxCellVal = _d;
;;;197    			temp_label->tTable[_idx].tMaxCell.r = _tCell.r;
;;;198    			temp_label->tTable[_idx].tMaxCell.c = _tCell.c;
;;;199    		}
;;;200    
;;;201    		if( temp_label->tTable[_idx].tRect.rs > _tCell.r )
;;;202    			temp_label->tTable[_idx].tRect.rs = _tCell.r;
;;;203    		if( temp_label->tTable[_idx].tRect.re < _tCell.r )
;;;204    			temp_label->tTable[_idx].tRect.re = _tCell.r;
;;;205    		if( temp_label->tTable[_idx].tRect.cs > _tCell.c )
;;;206    			temp_label->tTable[_idx].tRect.cs = _tCell.c;
;;;207    		if( temp_label->tTable[_idx].tRect.ce < _tCell.c )
;;;208    			temp_label->tTable[_idx].tRect.ce = _tCell.c;
;;;209    	}
;;;210    
;;;211    	// add ptr of Node into Tail of Linked-List
;;;212    //	if( _bAdd2List )
;;;213    //	{
;;;214    //		*temp_label->tTable[_idx].ptListTail = (uint32_t)GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;215    //		temp_label->tTable[_idx].ptListTail = (uint32_t *)*temp_label->tTable[_idx].ptListTail;
;;;216    //	}
;;;217    }
00003e  bf1c              ITT      NE
000040  bc10              POPNE    {r4}
000042  4770              BXNE     lr
000044  6943              LDR      r3,[r0,#0x14]         ;191
000046  4413              ADD      r3,r3,r2              ;191
000048  6143              STR      r3,[r0,#0x14]         ;191
00004a  88c3              LDRH     r3,[r0,#6]            ;192
00004c  1c5b              ADDS     r3,r3,#1              ;192
00004e  80c3              STRH     r3,[r0,#6]            ;192
000050  f9b03008          LDRSH    r3,[r0,#8]            ;194
000054  4293              CMP      r3,r2                 ;194
000056  da03              BGE      |L1.96|
000058  8102              STRH     r2,[r0,#8]            ;196
00005a  72c1              STRB     r1,[r0,#0xb]          ;197
00005c  f880c00a          STRB     r12,[r0,#0xa]         ;198
                  |L1.96|
000060  f9902002          LDRSB    r2,[r0,#2]            ;202
000064  428a              CMP      r2,r1                 ;202
000066  bfc8              IT       GT                    ;202
000068  460a              MOVGT    r2,r1                 ;202
00006a  7082              STRB     r2,[r0,#2]            ;202
00006c  f9902003          LDRSB    r2,[r0,#3]            ;204
000070  428a              CMP      r2,r1                 ;204
000072  bfc8              IT       GT                    ;204
000074  4611              MOVGT    r1,r2                 ;204
000076  70c1              STRB     r1,[r0,#3]            ;204
000078  f9901004          LDRSB    r1,[r0,#4]            ;206
00007c  4561              CMP      r1,r12                ;206
00007e  bfc8              IT       GT                    ;206
000080  4661              MOVGT    r1,r12                ;206
000082  7101              STRB     r1,[r0,#4]            ;206
000084  f9901005          LDRSB    r1,[r0,#5]            ;208
000088  4561              CMP      r1,r12                ;208
00008a  bfc8              IT       GT                    ;208
00008c  468c              MOVGT    r12,r1                ;208
00008e  f880c005          STRB     r12,[r0,#5]           ;208
000092  bc10              POP      {r4}
000094  4770              BX       lr
;;;218    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_GetConflictInfo||, CODE, READONLY, ALIGN=2

                  algorithm_label_GetConflictInfo PROC
;;;218    
;;;219    void algorithm_label_GetConflictInfo(bool_t _bModify, uint8_t _Direction, uint8_t _search_idx, tCell_t _tPos, tConflictInfo_t * _ptConflict, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;220    {
000004  b082              SUB      sp,sp,#8
000006  461f              MOV      r7,r3
000008  e9dd480f          LDRD     r4,r8,[sp,#0x3c]
;;;221    	int i, r_i, c_i;
;;;222    	uint8_t neighbor_label_id;
;;;223    
;;;224    	if( _search_idx == 0 )
;;;225    	{
;;;226    		_ptConflict->ulValue = 0x00000000;
;;;227    	}
;;;228    	else if( _search_idx > 0 )
;;;229    	{
;;;230    		_ptConflict->tInfo.NUM = 1;
00000c  2601              MOVS     r6,#1
00000e  460b              MOV      r3,r1                 ;220
000010  2a00              CMP      r2,#0                 ;224
000012  bf06              ITTE     EQ                    ;226
000014  2000              MOVEQ    r0,#0                 ;226
000016  6020              STREQ    r0,[r4,#0]            ;226
000018  70a6              STRBNE   r6,[r4,#2]
;;;231    	}
;;;232    
;;;233        if( _Direction == BOUNDARY_4_SEARCH_DIRECTION )
;;;234        {
;;;235        	for( i=0; i<BOUNDARY_4_SEARCH_TABLE[_search_idx].Num; i++ )
;;;236    		{
;;;237    #if (PAD_ == 0)
;;;238    			if((_tPos.r == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;239    				r_i = _tPos.r;
;;;240    			else
;;;241    				r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;242    
;;;243    			if((_tPos.c == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;244    				c_i = _tPos.c;
;;;245    			else
;;;246    				c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;247    #else 
;;;248    			r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;249    			c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;250    #endif
;;;251    
;;;252    			neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
00001a  4991              LDR      r1,|L2.608|
00001c  f3472c07          SBFX     r12,r7,#8,#8
000020  b278              SXTB     r0,r7
000022  2b04              CMP      r3,#4                 ;233
000024  d002              BEQ      |L2.44|
;;;253    
;;;254    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;255    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
;;;256    			{
;;;257    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
;;;258    				{
;;;259    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
;;;260    					_ptConflict->tInfo.NUM++;
;;;261    				}
;;;262    			}
;;;263    		}
;;;264        }
;;;265        else if( _Direction == BOUNDARY_8_SEARCH_DIRECTION )
000026  2b08              CMP      r3,#8
000028  d067              BEQ      |L2.250|
00002a  e0c9              B        |L2.448|
                  |L2.44|
00002c  4b8d              LDR      r3,|L2.612|
00002e  eb0209c2          ADD      r9,r2,r2,LSL #3       ;235
000032  2500              MOVS     r5,#0                 ;235
000034  f8132009          LDRB     r2,[r3,r9]            ;235
000038  2a00              CMP      r2,#0                 ;235
00003a  bfc8              IT       GT                    ;238
00003c  eb090203          ADDGT    r2,r9,r3              ;238
000040  dd58              BLE      |L2.244|
000042  bf00              NOP                            ;238
                  |L2.68|
000044  f1bc0f00          CMP      r12,#0                ;238
000048  d106              BNE      |L2.88|
00004a  eb020a45          ADD      r10,r2,r5,LSL #1      ;238
00004e  f99aa002          LDRSB    r10,[r10,#2]          ;238
000052  f1ba3fff          CMP      r10,#0xffffffff       ;238
000056  d010              BEQ      |L2.122|
                  |L2.88|
000058  f1bc0f2f          CMP      r12,#0x2f             ;238
00005c  d106              BNE      |L2.108|
00005e  eb020a45          ADD      r10,r2,r5,LSL #1      ;238
000062  f89aa002          LDRB     r10,[r10,#2]          ;238
000066  f1ba0f01          CMP      r10,#1                ;238
00006a  d006              BEQ      |L2.122|
                  |L2.108|
00006c  eb020a45          ADD      r10,r2,r5,LSL #1      ;241
000070  f99aa002          LDRSB    r10,[r10,#2]          ;241
000074  44e2              ADD      r10,r10,r12           ;241
                  |L2.118|
000076  b948              CBNZ     r0,|L2.140|
000078  e001              B        |L2.126|
                  |L2.122|
00007a  46e2              MOV      r10,r12               ;243
00007c  e7fb              B        |L2.118|
                  |L2.126|
00007e  eb020b45          ADD      r11,r2,r5,LSL #1      ;243
000082  f99bb001          LDRSB    r11,[r11,#1]          ;243
000086  f1bb3fff          CMP      r11,#0xffffffff       ;243
00008a  d034              BEQ      |L2.246|
                  |L2.140|
00008c  2853              CMP      r0,#0x53              ;243
00008e  d106              BNE      |L2.158|
000090  eb020b45          ADD      r11,r2,r5,LSL #1      ;243
000094  f89bb001          LDRB     r11,[r11,#1]          ;243
000098  f1bb0f01          CMP      r11,#1                ;243
00009c  d02b              BEQ      |L2.246|
                  |L2.158|
00009e  eb020b45          ADD      r11,r2,r5,LSL #1      ;246
0000a2  f99bb001          LDRSB    r11,[r11,#1]          ;246
0000a6  4483              ADD      r11,r11,r0            ;246
                  |L2.168|
0000a8  ebca0aca          RSB      r10,r10,r10,LSL #3    ;252
0000ac  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;252
0000b0  eb010a8a          ADD      r10,r1,r10,LSL #2     ;252
0000b4  44da              ADD      r10,r10,r11           ;252
0000b6  f50a3a88          ADD      r10,r10,#0x11000      ;252
0000ba  f89aa640          LDRB     r10,[r10,#0x640]      ;252
0000be  f1aa0a01          SUB      r10,r10,#1            ;252
0000c2  f1ba0f0f          CMP      r10,#0xf              ;255
0000c6  d810              BHI      |L2.234|
0000c8  f8b4b000          LDRH     r11,[r4,#0]           ;257
0000cc  fa06fa0a          LSL      r10,r6,r10            ;257
0000d0  ea1b0f0a          TST      r11,r10               ;257
0000d4  d109              BNE      |L2.234|
0000d6  ea4b0a0a          ORR      r10,r11,r10           ;259
0000da  f8a4a000          STRH     r10,[r4,#0]           ;259
0000de  f894a002          LDRB     r10,[r4,#2]           ;260
0000e2  f10a0a01          ADD      r10,r10,#1            ;260
0000e6  f884a002          STRB     r10,[r4,#2]           ;260
                  |L2.234|
0000ea  f813a009          LDRB     r10,[r3,r9]           ;235
0000ee  1c6d              ADDS     r5,r5,#1              ;235
0000f0  45aa              CMP      r10,r5                ;235
0000f2  dca7              BGT      |L2.68|
                  |L2.244|
0000f4  e064              B        |L2.448|
                  |L2.246|
0000f6  4683              MOV      r11,r0                ;244
0000f8  e7d6              B        |L2.168|
                  |L2.250|
;;;266        {
;;;267    		for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
0000fa  4d5b              LDR      r5,|L2.616|
0000fc  eb021902          ADD      r9,r2,r2,LSL #4
000100  2300              MOVS     r3,#0
000102  f8152009          LDRB     r2,[r5,r9]
000106  2a00              CMP      r2,#0
;;;268    		{
;;;269    #if (PAD_ == 0)
;;;270    			if((_tPos.r == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == 1))
000108  bfc8              IT       GT
00010a  eb090205          ADDGT    r2,r9,r5
00010e  dd57              BLE      |L2.448|
                  |L2.272|
000110  f1bc0f00          CMP      r12,#0
000114  d106              BNE      |L2.292|
000116  eb020a43          ADD      r10,r2,r3,LSL #1
00011a  f99aa002          LDRSB    r10,[r10,#2]
00011e  f1ba3fff          CMP      r10,#0xffffffff
000122  d010              BEQ      |L2.326|
                  |L2.292|
000124  f1bc0f2f          CMP      r12,#0x2f
000128  d106              BNE      |L2.312|
00012a  eb020a43          ADD      r10,r2,r3,LSL #1
00012e  f89aa002          LDRB     r10,[r10,#2]
000132  f1ba0f01          CMP      r10,#1
000136  d006              BEQ      |L2.326|
                  |L2.312|
;;;271    				r_i = _tPos.r;
;;;272    			else
;;;273    				r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
000138  eb020a43          ADD      r10,r2,r3,LSL #1
00013c  f99aa002          LDRSB    r10,[r10,#2]
000140  44e2              ADD      r10,r10,r12
                  |L2.322|
;;;274    
;;;275    			if((_tPos.c == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == 1))
000142  b948              CBNZ     r0,|L2.344|
000144  e001              B        |L2.330|
                  |L2.326|
000146  46e2              MOV      r10,r12
000148  e7fb              B        |L2.322|
                  |L2.330|
00014a  eb020b43          ADD      r11,r2,r3,LSL #1
00014e  f99bb001          LDRSB    r11,[r11,#1]
000152  f1bb3fff          CMP      r11,#0xffffffff
000156  d07d              BEQ      |L2.596|
                  |L2.344|
000158  2853              CMP      r0,#0x53
00015a  d106              BNE      |L2.362|
00015c  eb020b43          ADD      r11,r2,r3,LSL #1
000160  f89bb001          LDRB     r11,[r11,#1]
000164  f1bb0f01          CMP      r11,#1
000168  d078              BEQ      |L2.604|
                  |L2.362|
;;;276    				c_i = _tPos.c;
;;;277    			else
;;;278    				c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
00016a  eb020b43          ADD      r11,r2,r3,LSL #1
00016e  f99bb001          LDRSB    r11,[r11,#1]
000172  4483              ADD      r11,r11,r0
                  |L2.372|
;;;279    #else 
;;;280    			r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;281    			c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;282    #endif
;;;283    
;;;284    			neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
000174  ebca0aca          RSB      r10,r10,r10,LSL #3
000178  eb0a0a4a          ADD      r10,r10,r10,LSL #1
00017c  eb010a8a          ADD      r10,r1,r10,LSL #2
000180  44da              ADD      r10,r10,r11
000182  f50a3a88          ADD      r10,r10,#0x11000
000186  f89aa640          LDRB     r10,[r10,#0x640]
00018a  f1aa0a01          SUB      r10,r10,#1
;;;285    
;;;286    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;287    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
00018e  f1ba0f0f          CMP      r10,#0xf
000192  d810              BHI      |L2.438|
;;;288    			{
;;;289    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
000194  f8b4b000          LDRH     r11,[r4,#0]
000198  fa06fa0a          LSL      r10,r6,r10
00019c  ea1b0f0a          TST      r11,r10
0001a0  d109              BNE      |L2.438|
;;;290    				{
;;;291    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
0001a2  ea4b0a0a          ORR      r10,r11,r10
0001a6  f8a4a000          STRH     r10,[r4,#0]
;;;292    					_ptConflict->tInfo.NUM++;
0001aa  f894a002          LDRB     r10,[r4,#2]
0001ae  f10a0a01          ADD      r10,r10,#1
0001b2  f884a002          STRB     r10,[r4,#2]
                  |L2.438|
0001b6  f815a009          LDRB     r10,[r5,r9]           ;267
0001ba  1c5b              ADDS     r3,r3,#1              ;267
0001bc  459a              CMP      r10,r3                ;267
0001be  dca7              BGT      |L2.272|
                  |L2.448|
;;;293    				}
;;;294    			}
;;;295    		}
;;;296        }
;;;297    
;;;298    	if( _bModify == YES )
0001c0  9a02              LDR      r2,[sp,#8]
0001c2  2a01              CMP      r2,#1
;;;299    	{
;;;300    		if( _ptConflict->tInfo.NUM == 0 )
;;;301    		{
;;;302    
;;;303    
;;;304    		}
;;;305    		else if( _ptConflict->tInfo.NUM == 1 )
;;;306    		{
;;;307    			for( i=0; i<LOOSE_POSBUF_; i++ )
;;;308    			{
;;;309    				if( (_ptConflict->tInfo.BF & _BV(i)) )
;;;310    				{
;;;311    //					if(mode == LOCAL_FINGER_MODE)
;;;312    //					{
;;;313    //						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;314    //						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;315    //					}
;;;316    //					else
;;;317    					{
;;;318    						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;319    						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;320    					}
;;;321    				}
;;;322    			}
;;;323    		}
;;;324    		else if( _ptConflict->tInfo.NUM > 1 )
;;;325    		{
;;;326    			HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, LABEL_CONFLICT_MARKER);
;;;327    		}
;;;328    	}
;;;329    }
0001c4  bf1c              ITT      NE
0001c6  b006              ADDNE    sp,sp,#0x18
0001c8  e8bd8ff0          POPNE    {r4-r11,pc}
0001cc  78a3              LDRB     r3,[r4,#2]            ;300
0001ce  2b00              CMP      r3,#0                 ;300
0001d0  bf04              ITT      EQ
0001d2  b006              ADDEQ    sp,sp,#0x18
0001d4  e8bd8ff0          POPEQ    {r4-r11,pc}
0001d8  4a21              LDR      r2,|L2.608|
0001da  fa4ffc87          SXTB     r12,r7                ;252
0001de  eb0c0a02          ADD      r10,r12,r2            ;319
0001e2  f3472207          SBFX     r2,r7,#8,#8           ;319
0001e6  f8dfc084          LDR      r12,|L2.620|
0001ea  ebc202c2          RSB      r2,r2,r2,LSL #3       ;318
0001ee  eb020242          ADD      r2,r2,r2,LSL #1       ;318
0001f2  eb0c0982          ADD      r9,r12,r2,LSL #2      ;319
0001f6  2b01              CMP      r3,#1                 ;305
0001f8  bf84              ITT      HI                    ;326
0001fa  203f              MOVHI    r0,#0x3f              ;326
0001fc  f80a0009          STRBHI   r0,[r10,r9]           ;326
000200  bf1c              ITT      NE
000202  b006              ADDNE    sp,sp,#0x18
000204  e8bd8ff0          POPNE    {r4-r11,pc}
000208  f04f0500          MOV      r5,#0                 ;307
00020c  eb0101c2          ADD      r1,r1,r2,LSL #3       ;318
000210  eb010040          ADD      r0,r1,r0,LSL #1       ;318
000214  f5004b70          ADD      r11,r0,#0xf000        ;318
                  |L2.536|
000218  8820              LDRH     r0,[r4,#0]            ;309
00021a  fa06f105          LSL      r1,r6,r5              ;309
00021e  4208              TST      r0,r1                 ;309
000220  d014              BEQ      |L2.588|
000222  e9cd6800          STRD     r6,r8,[sp,#0]         ;309
000226  f9bb26c0          LDRSH    r2,[r11,#0x6c0]       ;318
00022a  b2e8              UXTB     r0,r5                 ;318
00022c  f04f0300          MOV      r3,#0                 ;318
000230  4639              MOV      r1,r7                 ;318
000232  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000236  ebc500c5          RSB      r0,r5,r5,LSL #3       ;319
00023a  eb001145          ADD      r1,r0,r5,LSL #5       ;319
00023e  480c              LDR      r0,|L2.624|
000240  6880              LDR      r0,[r0,#8]            ;319  ; thisInfo
000242  4408              ADD      r0,r0,r1              ;319
000244  f8900046          LDRB     r0,[r0,#0x46]         ;319
000248  f80a0009          STRB     r0,[r10,r9]           ;319
                  |L2.588|
00024c  1c6d              ADDS     r5,r5,#1              ;319
00024e  2d10              CMP      r5,#0x10              ;307
000250  dbe2              BLT      |L2.536|
000252  e000              B        |L2.598|
                  |L2.596|
000254  e002              B        |L2.604|
                  |L2.598|
000256  b006              ADD      sp,sp,#0x18
000258  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.604|
00025c  4683              MOV      r11,r0                ;276
00025e  e789              B        |L2.372|
;;;330    
                          ENDP

                  |L2.608|
                          DCD      FullSharedBuff
                  |L2.612|
                          DCD      ||.data||+0x10
                  |L2.616|
                          DCD      ||.data||+0x3d
                  |L2.620|
                          DCD      0x00011640
                  |L2.624|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_Insert_NewRecord_to_LabelTable||, CODE, READONLY, ALIGN=2

                  algorithm_label_Insert_NewRecord_to_LabelTable PROC
;;;144    
;;;145    void algorithm_label_Insert_NewRecord_to_LabelTable(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bAdd2List, int mode)
000000  b41f              PUSH     {r0-r4}
;;;146    {
;;;147    	tLabelInfo_t	*temp_label;
;;;148    	
;;;149    	temp_label = &thisInfo->tLabel;
000002  491c              LDR      r1,|L3.116|
000004  6889              LDR      r1,[r1,#8]  ; thisInfo
000006  3145              ADDS     r1,r1,#0x45
;;;150    
;;;151    	if( _idx < LOOSE_POSBUF_ )
000008  2810              CMP      r0,#0x10
;;;152    	{
;;;153    		temp_label->tTable[_idx].cId          = _idx + 1;
;;;154    		temp_label->tTable[_idx].sMaxCellVal  = _d;
;;;155    		temp_label->tTable[_idx].tMaxCell     = _tCell;
;;;156    		temp_label->tTable[_idx].tRect.rs     = _tCell.r;
;;;157    		temp_label->tTable[_idx].tRect.re     = _tCell.r;
;;;158    		temp_label->tTable[_idx].tRect.cs     = _tCell.c;
;;;159    		temp_label->tTable[_idx].tRect.ce     = _tCell.c;
;;;160    		temp_label->tTable[_idx].tCoord.x     = _tCell.c * _d;
;;;161    		temp_label->tTable[_idx].tCoord.y     = _tCell.r * _d;
;;;162    		temp_label->tTable[_idx].ulStrength   = _d;
;;;163    		temp_label->tTable[_idx].ulExtStrength= _d;
;;;164    		temp_label->tTable[_idx].usCellNum    = 1;
;;;165    
;;;166    //		if( _bAdd2List )
;;;167    //		{
;;;168    //			temp_label->tTable[_idx].ptListHead = GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;169    //			temp_label->tTable[_idx].ptListTail = temp_label->tTable[_idx].ptListHead;
;;;170    //		}
;;;171    
;;;172    		HAL_WRITE_LABEL_IMAGE(_tCell.r, _tCell.c, temp_label->tTable[_idx].cId);
;;;173    
;;;174    		temp_label->ucNum++;
;;;175    	}
;;;176    }
00000a  bf22              ITTT     CS
00000c  b004              ADDCS    sp,sp,#0x10
00000e  bc10              POPCS    {r4}
000010  4770              BXCS     lr
000012  1c43              ADDS     r3,r0,#1              ;153
000014  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;153
000018  eb0c1040          ADD      r0,r12,r0,LSL #5      ;153
00001c  4408              ADD      r0,r0,r1              ;153
00001e  7043              STRB     r3,[r0,#1]            ;153
000020  8102              STRH     r2,[r0,#8]            ;154
000022  f8bd3004          LDRH     r3,[sp,#4]            ;155
000026  8143              STRH     r3,[r0,#0xa]          ;155
000028  f99dc005          LDRSB    r12,[sp,#5]           ;156
00002c  f880c002          STRB     r12,[r0,#2]           ;156
000030  f880c003          STRB     r12,[r0,#3]           ;157
000034  f99d3004          LDRSB    r3,[sp,#4]            ;158
000038  7103              STRB     r3,[r0,#4]            ;158
00003a  7143              STRB     r3,[r0,#5]            ;159
00003c  fb03f402          MUL      r4,r3,r2              ;160
000040  60c4              STR      r4,[r0,#0xc]          ;160
000042  fb0cf402          MUL      r4,r12,r2             ;161
000046  6104              STR      r4,[r0,#0x10]         ;161
000048  6142              STR      r2,[r0,#0x14]         ;162
00004a  6182              STR      r2,[r0,#0x18]         ;163
00004c  2201              MOVS     r2,#1                 ;164
00004e  80c2              STRH     r2,[r0,#6]            ;164
000050  4a09              LDR      r2,|L3.120|
000052  7840              LDRB     r0,[r0,#1]            ;172
000054  441a              ADD      r2,r2,r3              ;172
000056  ebcc03cc          RSB      r3,r12,r12,LSL #3     ;172
00005a  f8dfc020          LDR      r12,|L3.124|
00005e  eb030343          ADD      r3,r3,r3,LSL #1       ;172
000062  eb0c0383          ADD      r3,r12,r3,LSL #2      ;172
000066  54d0              STRB     r0,[r2,r3]            ;172
000068  7808              LDRB     r0,[r1,#0]            ;174
00006a  1c40              ADDS     r0,r0,#1              ;174
00006c  7008              STRB     r0,[r1,#0]            ;174
00006e  b004              ADD      sp,sp,#0x10
000070  bc10              POP      {r4}
000072  4770              BX       lr
;;;177    
                          ENDP

                  |L3.116|
                          DCD      ||.data||
                  |L3.120|
                          DCD      FullSharedBuff
                  |L3.124|
                          DCD      0x00011640

                          AREA ||i.algorithm_label_MarkBoundary||, CODE, READONLY, ALIGN=2

                  algorithm_label_MarkBoundary PROC
;;;330    
;;;331    void algorithm_label_MarkBoundary(bool_t _bBoundary, int mode)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;332    {
;;;333        int l, i;
;;;334        tCell_t tCellPos;
;;;335        tConflictInfo_t tConflict;
;;;336        uint8_t rLabel_val;
;;;337    
;;;338    	tLabelInfo_t	*temp_label;
;;;339    
;;;340    	temp_label = &thisInfo->tLabel;
000004  4852              LDR      r0,|L4.336|
000006  b08f              SUB      sp,sp,#0x3c           ;332
000008  4689              MOV      r9,r1                 ;332
00000a  6880              LDR      r0,[r0,#8]  ; thisInfo
00000c  3045              ADDS     r0,r0,#0x45
;;;341    
;;;342        for( l=0; l<temp_label->ucValidNum; l++ )
00000e  9006              STR      r0,[sp,#0x18]
000010  2000              MOVS     r0,#0
000012  9005              STR      r0,[sp,#0x14]
000014  9806              LDR      r0,[sp,#0x18]
000016  f8900271          LDRB     r0,[r0,#0x271]
00001a  2800              CMP      r0,#0
;;;343        {
;;;344    		if( temp_label->tValidRect[l].cs > 0 )
;;;345    			temp_label->tValidRect[l].cs--;
;;;346    		if( temp_label->tValidRect[l].ce < (COL_MAX - 1) )
;;;347    			temp_label->tValidRect[l].ce++;
;;;348    		if( temp_label->tValidRect[l].rs > 0 )
;;;349    			temp_label->tValidRect[l].rs--;		
;;;350    		
;;;351    		{
;;;352    			if( temp_label->tValidRect[l].re < (ROW_MAX - 1) )
;;;353    				temp_label->tValidRect[l].re++;
;;;354    		}
;;;355    
;;;356        	for( tCellPos.r=temp_label->tValidRect[l].rs; tCellPos.r<= temp_label->tValidRect[l].re; tCellPos.r++ )
;;;357        	{
;;;358        		for( tCellPos.c=temp_label->tValidRect[l].cs; tCellPos.c<= temp_label->tValidRect[l].ce; tCellPos.c++ )
;;;359        		{
;;;360    				rLabel_val = HAL_READ_LABEL_IMAGE(tCellPos.r, tCellPos.c);
;;;361    
;;;362        			if( rLabel_val == 0 )
;;;363        			{
;;;364        				tConflict.ulValue = 0;
;;;365    
;;;366        				algorithm_label_GetConflictInfo(NO, BOUNDARY_4_SEARCH_DIRECTION, 0, tCellPos, &tConflict, mode);
;;;367    
;;;368        				if( tConflict.tInfo.NUM )
;;;369        				{
;;;370        					for(i=LOOSE_POSBUF_; i--; )
;;;371        					{
;;;372        						if( tConflict.tInfo.BF & _BV(i) )
00001c  bfc7              ITTEE    GT
00001e  f04f0801          MOVGT    r8,#1
000022  2700              MOVGT    r7,#0
;;;373        						{
;;;374    								int sum_delta;
;;;375    								
;;;376    //    							if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;377    //    							{
;;;378    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;379    //    							}
;;;380    //    							else if(mode == LOCAL_FINGER_MODE)
;;;381    //    							{
;;;382    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;383    //    							}
;;;384    //								else
;;;385    //								{
;;;386    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;387    //    							}
;;;388    
;;;389    //								if(mode == LOCAL_FINGER_MODE)
;;;390    //    								sum_delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;391    //								else
;;;392        								sum_delta = HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;393    								
;;;394    								if(sum_delta < 0)	sum_delta = 0;
;;;395    								
;;;396    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, sum_delta, _bBoundary, NO, mode);
;;;397        						}
;;;398        					}
;;;399    
;;;400        	    			HAL_WRITE_LABEL_IMAGE(tCellPos.r, tCellPos.c, LABEL_BOUNDARY_MARKER);
;;;401        				}
;;;402        			}
;;;403        		}
;;;404        	}
;;;405        }
;;;406    }
000024  b011              ADDLE    sp,sp,#0x44
000026  e8bd8ff0          POPLE    {r4-r11,pc}
00002a  bf00              NOP      
                  |L4.44|
00002c  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000030  eb010680          ADD      r6,r1,r0,LSL #2       ;344
000034  f9960274          LDRSB    r0,[r6,#0x274]        ;344
000038  2800              CMP      r0,#0                 ;344
00003a  bfc4              ITT      GT                    ;344
00003c  1e40              SUBGT    r0,r0,#1              ;344
00003e  f8860274          STRBGT   r0,[r6,#0x274]        ;345
000042  f9960275          LDRSB    r0,[r6,#0x275]        ;346
000046  2853              CMP      r0,#0x53              ;346
000048  bfbc              ITT      LT                    ;346
00004a  1c40              ADDLT    r0,r0,#1              ;346
00004c  f8860275          STRBLT   r0,[r6,#0x275]        ;347
000050  f9960272          LDRSB    r0,[r6,#0x272]        ;348
000054  2800              CMP      r0,#0                 ;348
000056  bfc4              ITT      GT                    ;348
000058  1e40              SUBGT    r0,r0,#1              ;348
00005a  f8860272          STRBGT   r0,[r6,#0x272]        ;349
00005e  f9960273          LDRSB    r0,[r6,#0x273]        ;352
000062  282f              CMP      r0,#0x2f              ;352
000064  bfbc              ITT      LT                    ;352
000066  1c40              ADDLT    r0,r0,#1              ;352
000068  f8860273          STRBLT   r0,[r6,#0x273]        ;353
00006c  f9960272          LDRSB    r0,[r6,#0x272]        ;356
000070  f9961273          LDRSB    r1,[r6,#0x273]        ;356
000074  f360250f          BFI      r5,r0,#8,#8           ;356
000078  4288              CMP      r0,r1                 ;356
00007a  dc5a              BGT      |L4.306|
                  |L4.124|
00007c  f9960274          LDRSB    r0,[r6,#0x274]        ;358
000080  f9961275          LDRSB    r1,[r6,#0x275]        ;358
000084  f3600507          BFI      r5,r0,#0,#8           ;358
000088  4288              CMP      r0,r1                 ;358
00008a  dc49              BGT      |L4.288|
00008c  f3452007          SBFX     r0,r5,#8,#8           ;358
000090  ebc000c0          RSB      r0,r0,r0,LSL #3       ;360
000094  492f              LDR      r1,|L4.340|
000096  eb000040          ADD      r0,r0,r0,LSL #1       ;360
00009a  eb0101c0          ADD      r1,r1,r0,LSL #3       ;392
00009e  9107              STR      r1,[sp,#0x1c]         ;360
0000a0  492d              LDR      r1,|L4.344|
0000a2  eb010080          ADD      r0,r1,r0,LSL #2       ;360
0000a6  9009              STR      r0,[sp,#0x24]         ;360
                  |L4.168|
0000a8  482a              LDR      r0,|L4.340|
0000aa  fa4ffa85          SXTB     r10,r5                ;360
0000ae  9909              LDR      r1,[sp,#0x24]         ;360
0000b0  4450              ADD      r0,r0,r10             ;360
0000b2  900a              STR      r0,[sp,#0x28]         ;360
0000b4  5c40              LDRB     r0,[r0,r1]            ;360
0000b6  bb50              CBNZ     r0,|L4.270|
0000b8  a804              ADD      r0,sp,#0x10           ;366
0000ba  e9cd0900          STRD     r0,r9,[sp,#0]         ;366
0000be  2200              MOVS     r2,#0                 ;366
0000c0  462b              MOV      r3,r5                 ;366
0000c2  2104              MOVS     r1,#4                 ;366
0000c4  9704              STR      r7,[sp,#0x10]         ;366
0000c6  4610              MOV      r0,r2                 ;366
0000c8  f7fffffe          BL       algorithm_label_GetConflictInfo
0000cc  f89d0012          LDRB     r0,[sp,#0x12]         ;368
0000d0  b1e8              CBZ      r0,|L4.270|
0000d2  9807              LDR      r0,[sp,#0x1c]         ;392
0000d4  240f              MOVS     r4,#0xf               ;370
0000d6  eb00004a          ADD      r0,r0,r10,LSL #1      ;392
0000da  f5004b70          ADD      r11,r0,#0xf000        ;392
0000de  bf00              NOP                            ;372
                  |L4.224|
0000e0  f8bd0010          LDRH     r0,[sp,#0x10]         ;372
0000e4  fa08f104          LSL      r1,r8,r4              ;372
0000e8  4208              TST      r0,r1                 ;372
0000ea  d00a              BEQ      |L4.258|
0000ec  f9bb26c0          LDRSH    r2,[r11,#0x6c0]       ;392
0000f0  2a00              CMP      r2,#0                 ;394
0000f2  db2b              BLT      |L4.332|
                  |L4.244|
0000f4  e9cd7900          STRD     r7,r9,[sp,#0]         ;396
0000f8  b2e0              UXTB     r0,r4                 ;396
0000fa  4629              MOV      r1,r5                 ;396
0000fc  9b0f              LDR      r3,[sp,#0x3c]         ;396
0000fe  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L4.258|
000102  1e64              SUBS     r4,r4,#1              ;396
000104  d2ec              BCS      |L4.224|
000106  e9dd1209          LDRD     r1,r2,[sp,#0x24]      ;400
00010a  2012              MOVS     r0,#0x12              ;400
00010c  5450              STRB     r0,[r2,r1]            ;400
                  |L4.270|
00010e  f10a0001          ADD      r0,r10,#1             ;400
000112  b240              SXTB     r0,r0                 ;400
000114  f9961275          LDRSB    r1,[r6,#0x275]        ;400
000118  f3600507          BFI      r5,r0,#0,#8           ;400
00011c  4288              CMP      r0,r1                 ;400
00011e  ddc3              BLE      |L4.168|
                  |L4.288|
000120  1228              ASRS     r0,r5,#8              ;400
000122  1c40              ADDS     r0,r0,#1              ;400
000124  b240              SXTB     r0,r0                 ;400
000126  f9961273          LDRSB    r1,[r6,#0x273]        ;400
00012a  f360250f          BFI      r5,r0,#8,#8           ;400
00012e  4288              CMP      r0,r1                 ;400
000130  dda4              BLE      |L4.124|
                  |L4.306|
000132  9805              LDR      r0,[sp,#0x14]         ;400
000134  1c40              ADDS     r0,r0,#1              ;400
000136  9005              STR      r0,[sp,#0x14]         ;400
000138  9806              LDR      r0,[sp,#0x18]         ;400
00013a  f8901271          LDRB     r1,[r0,#0x271]        ;400
00013e  9805              LDR      r0,[sp,#0x14]         ;400
000140  4281              CMP      r1,r0                 ;400
000142  f73faf73          BGT      |L4.44|
000146  b011              ADD      sp,sp,#0x44
000148  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.332|
00014c  2200              MOVS     r2,#0                 ;394
00014e  e7d1              B        |L4.244|
;;;407    
                          ENDP

                  |L4.336|
                          DCD      ||.data||
                  |L4.340|
                          DCD      FullSharedBuff
                  |L4.344|
                          DCD      0x00011640

                          AREA ||i.algorithm_label_Merge||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge PROC
;;;1862   
;;;1863   void algorithm_label_Merge( uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1864   {
;;;1865   	int r, c, i, j;
;;;1866   	tXY_t tPos_i, tPos_j;
;;;1867   	int delta_i, delta_mean, delta_j, delta_target, delta_ratio;
;;;1868   	tCell_t node_i, node_mean, node_j;
;;;1869   	tConflictInfo_t tConflict;
;;;1870   	tRect_t tExpectConflictRect;
;;;1871       uint8_t rLabel_val;
;;;1872   	#if USED_NOISE_HOPPING_FREQ
;;;1873   	int delta_min, delta_max;
;;;1874   	#endif
;;;1875   
;;;1876   	tLabelInfo_t	*temp_label;
;;;1877   
;;;1878   	temp_label = &thisInfo->tLabel;
000004  4bfe              LDR      r3,|L5.1024|
000006  b09c              SUB      sp,sp,#0x70           ;1864
;;;1879   
;;;1880   	for( i=_label_start_idx; i<temp_label->ucNum; i++ )
000008  460f              MOV      r7,r1
00000a  689a              LDR      r2,[r3,#8]            ;1878  ; thisInfo
00000c  3245              ADDS     r2,r2,#0x45           ;1878
00000e  9218              STR      r2,[sp,#0x60]
000010  7811              LDRB     r1,[r2,#0]
000012  42b9              CMP      r1,r7
;;;1881   	{
;;;1882   		if( temp_label->tTable[i].ulStrength == 0 )
;;;1883   		{
;;;1884   			continue;
;;;1885   		}
;;;1886   
;;;1887   		for( j=i+1; j<LOOSE_POSBUF_; j++ )
;;;1888   		{
;;;1889   			if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(j) )
;;;1890   			{
;;;1891   				if( temp_label->tTable[j].ulStrength == 0 )
;;;1892   				{
;;;1893   					temp_label->tTable[i].tConflictInfo.tInfo.BF &= ~_BV(j);
;;;1894   					temp_label->tTable[i].tConflictInfo.tInfo.NUM--;
;;;1895   
;;;1896   					continue;
;;;1897   				}
;;;1898   
;;;1899   				tPos_i.x  = (temp_label->tTable[i].tCoord.x + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1900   				tPos_i.x /= temp_label->tTable[i].ulStrength;
;;;1901   				tPos_i.y  = (temp_label->tTable[i].tCoord.y + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1902   				tPos_i.y /= temp_label->tTable[i].ulStrength;
;;;1903   
;;;1904   				tPos_j.x  = (temp_label->tTable[j].tCoord.x + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1905   				tPos_j.x /= temp_label->tTable[j].ulStrength;
;;;1906   				tPos_j.y  = (temp_label->tTable[j].tCoord.y + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1907   				tPos_j.y /= temp_label->tTable[j].ulStrength;
;;;1908   
;;;1909   				node_i.c = temp_label->tTable[i].tMaxCell.c;
;;;1910   				node_i.r = temp_label->tTable[i].tMaxCell.r;
;;;1911   
;;;1912   //				if(mode == LOCAL_FINGER_MODE)
;;;1913   //					delta_i = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_i.r, node_i.c);
;;;1914   //				else
;;;1915   					delta_i = HAL_READ_DELTA_IMAGE(node_i.r, node_i.c);
;;;1916   
;;;1917   				node_j.c = temp_label->tTable[j].tMaxCell.c;
;;;1918   				node_j.r = temp_label->tTable[j].tMaxCell.r;
;;;1919   
;;;1920   //				if(mode == LOCAL_FINGER_MODE)
;;;1921   //					delta_j = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_j.r, node_j.c);
;;;1922   //				else
;;;1923   					delta_j = HAL_READ_DELTA_IMAGE(node_j.r, node_j.c);
;;;1924   
;;;1925   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
000014  bfc7              ITTEE    GT
000016  eb020040          ADDGT    r0,r2,r0,LSL #1
00001a  901a              STRGT    r0,[sp,#0x68]
;;;1926   				{
;;;1927   					tExpectConflictRect.cs = MIN(temp_label->tTable[i].tRect.cs, temp_label->tTable[j].tRect.cs);
;;;1928   					tExpectConflictRect.ce = MAX(temp_label->tTable[i].tRect.ce, temp_label->tTable[j].tRect.ce);
;;;1929   					tExpectConflictRect.rs = MIN(temp_label->tTable[i].tRect.rs, temp_label->tTable[j].tRect.rs);
;;;1930   					tExpectConflictRect.re = MAX(temp_label->tTable[i].tRect.re, temp_label->tTable[j].tRect.re);
;;;1931   				}
;;;1932   				else
;;;1933   				{
;;;1934   					tExpectConflictRect.cs = MIN(node_i.c, node_j.c);
;;;1935   					tExpectConflictRect.ce = MAX(node_i.c, node_j.c);
;;;1936   					tExpectConflictRect.rs = MIN(node_i.r, node_j.r);
;;;1937   					tExpectConflictRect.re = MAX(node_i.r, node_j.r);
;;;1938   				}
;;;1939   
;;;1940   				delta_mean = INT16_MIN;
;;;1941   				node_mean.r = (node_i.r + node_j.r)>>1;
;;;1942   				node_mean.c = (node_i.c + node_j.c)>>1;
;;;1943   				for( r=tExpectConflictRect.rs; r<=tExpectConflictRect.re; r++ )
;;;1944   				{
;;;1945   					for( c=tExpectConflictRect.cs; c<= tExpectConflictRect.ce; c++ )
;;;1946   					{
;;;1947   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;1948   
;;;1949   						if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;1950   						{
;;;1951   							tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;1952   
;;;1953   							if( (tConflict.tInfo.BF & (_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1))) ==
;;;1954   									(_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1)) )
;;;1955   							{
;;;1956   								int16_t delta_t;
;;;1957   
;;;1958   //								if(mode == LOCAL_FINGER_MODE)
;;;1959   //									delta_t = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c);
;;;1960   //								else
;;;1961   									delta_t = HAL_READ_DELTA_IMAGE(r, c);
;;;1962   
;;;1963   								if( delta_mean < delta_t)
;;;1964   								{
;;;1965   									delta_mean = delta_t;
;;;1966   									node_mean.r = r;
;;;1967   									node_mean.c = c;
;;;1968   								}
;;;1969   							}
;;;1970   						}
;;;1971   					}
;;;1972   				}
;;;1973   
;;;1974   				if( delta_mean == INT16_MIN )
;;;1975   				{
;;;1976   //					if(mode == LOCAL_FINGER_MODE)
;;;1977   //						delta_mean = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;1978   //					else
;;;1979   						delta_mean = HAL_READ_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;1980   				}
;;;1981   
;;;1982   				delta_target = (delta_i*temp_label->tTable[j].ulStrength + delta_j*temp_label->tTable[i].ulStrength)/(temp_label->tTable[i].ulStrength + temp_label->tTable[j].ulStrength);
;;;1983   
;;;1984   //				#ifdef GetAngleLookUpHighResolution
;;;1985   //				angle = algorithm_calc_angle_inter_2points_HighResolution(tPos_j.x-tPos_i.x, tPos_j.y-tPos_i.y) * 0.001;
;;;1986   //				#else
;;;1987   //				angle = algorithm_calc_angle_inter_2points(tPos_j.x-tPos_i.x, tPos_j.y-tPos_i.y) * 0.01;
;;;1988   //				#endif
;;;1989   
;;;1990   //				if( (temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt) && (angle%90 > 20 && angle%90 < 70) )
;;;1991   //				{
;;;1992   //					delta_ratio = (delta_mean * thisModeConf->Label.ucMergeSmallDiagThdPer)/delta_target;
;;;1993   //				}
;;;1994   //				else if( (temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMediumNodeCnt) && (angle%90 > 30 && angle%90 < 60) )
;;;1995   //				{
;;;1996   //					delta_ratio = (delta_mean * thisModeConf->Label.ucMergeMediumDiagThdPer)/delta_target;
;;;1997   //				}
;;;1998   //				else
;;;1999   				{
;;;2000   					delta_ratio = (delta_mean * 100)/delta_target;
;;;2001   				}
;;;2002   
;;;2003   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
;;;2004   				{
;;;2005   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeSmallThdPer;
;;;2006   				}
;;;2007   				else if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMediumNodeCnt )
;;;2008   				{
;;;2009   //					temp_label->iMergeThdPer = thisModeConf->Label.ucSmallMergeThdPer;
;;;2010   //					temp_label->iMergeThdPer += ((thisModeConf->Label.ucLargeMergeThdPer - thisModeConf->Label.ucSmallMergeThdPer)
;;;2011   //							*(temp_label->usValidCellCnt[_valid_area_idx] - thisModeConf->Label.usSmallTouchThd))
;;;2012   //							/(thisModeConf->Label.usLargeTouchThd - thisModeConf->Label.usSmallTouchThd);
;;;2013   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;2014   				}
;;;2015   				else
;;;2016   				{
;;;2017   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;2018   				}
;;;2019   				
;;;2020   				#if USED_NOISE_HOPPING_FREQ
;;;2021   				if(temp_label->tTable[i].sMaxCellVal > temp_label->tTable[j].sMaxCellVal)
;;;2022   				{
;;;2023   					delta_max = temp_label->tTable[i].sMaxCellVal;
;;;2024   					delta_min = temp_label->tTable[j].sMaxCellVal;
;;;2025   				}
;;;2026   				else
;;;2027   				{
;;;2028   					delta_max = temp_label->tTable[j].sMaxCellVal;
;;;2029   					delta_min = temp_label->tTable[i].sMaxCellVal;
;;;2030   				}
;;;2031   				
;;;2032   				if((abs(delta_mean - delta_min) < thisModeConf->Label.usLabelPeakValleyDiffTh || (delta_max - delta_min) > thisModeConf->Label.usLabelPeakDiffTh) && temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMergeLabelSizeTh)
;;;2033   				{
;;;2034   					delta_ratio = temp_label->iMergeThdPer + 1;
;;;2035   				}
;;;2036   				#endif
;;;2037   
;;;2038   				if( temp_label->iMergeThdPer < delta_ratio )
;;;2039   				{
;;;2040   					int k;
;;;2041   					
;;;2042   					for( r=temp_label->tTable[j].tRect.rs; r<=temp_label->tTable[j].tRect.re; r++ )
;;;2043   					{
;;;2044   						for( c=temp_label->tTable[j].tRect.cs; c<=temp_label->tTable[j].tRect.ce; c++ )
;;;2045   						{
;;;2046   							tCell_t tNodePos = { .r = r, .c = c };
;;;2047   
;;;2048   							rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2049   
;;;2050   							if( rLabel_val == temp_label->tTable[j].cId )
;;;2051   							{
;;;2052   //								if(mode == LOCAL_FINGER_MODE)
;;;2053   //								{
;;;2054   //									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2055   //									algorithm_label_Add_NewNode_to_LabelRecord(i, tNodePos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2056   //								}
;;;2057   //								else
;;;2058   								{
;;;2059   									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2060   									algorithm_label_Add_NewNode_to_LabelRecord(i, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2061   								}
;;;2062   							}
;;;2063   							else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;2064   							{
;;;2065   								tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;2066   
;;;2067   								if( (tConflict.tInfo.BF & _BV(i)) && (tConflict.tInfo.BF & _BV(j)) )
;;;2068   								{
;;;2069   									tConflict.tInfo.NUM--;
;;;2070   									tConflict.tInfo.BF &= ~(tConflict.tInfo.BF & _BV(j));
;;;2071   								}
;;;2072   								else if( tConflict.tInfo.BF & _BV(j) )
;;;2073   								{
;;;2074   									tConflict.tInfo.BF |=  _BV(i);
;;;2075   									tConflict.tInfo.BF &= ~_BV(j);
;;;2076   								}
;;;2077   
;;;2078   								if( tConflict.tInfo.NUM == 1 || tConflict.tInfo.BF == 0 )
;;;2079   								{
;;;2080   									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2081   									tConflict.ulValue = 0;
;;;2082   								}
;;;2083   								HAL_WRITE_CONFLICT_LABEL_IMAGE(r, c, tConflict.ulValue);
;;;2084   							}
;;;2085   						}
;;;2086   					}
;;;2087   
;;;2088   					temp_label->tTable[i].tConflictInfo.tInfo.BF |= temp_label->tTable[j].tConflictInfo.tInfo.BF;
;;;2089   					temp_label->tTable[i].tConflictInfo.tInfo.NUM = 0;
;;;2090   					for( k=LOOSE_POSBUF_; k--; )
;;;2091   					{
;;;2092   						if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(k) )
;;;2093   						{
;;;2094   							temp_label->tTable[i].tConflictInfo.tInfo.NUM++;
;;;2095   						}
;;;2096   					}
;;;2097   					// Merge S&R inter 2 Points iTh <== jTh
;;;2098   					{
;;;2099   
;;;2100   					}
;;;2101   					// Clear LabelTable & PosTable 2nd Point
;;;2102   					{
;;;2103   						memset(&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t) );
;;;2104   					}
;;;2105   				}
;;;2106   			}
;;;2107   		}
;;;2108   	}
;;;2109   }
00001c  b01f              ADDLE    sp,sp,#0x7c
00001e  e8bd8ff0          POPLE    {r4-r11,pc}
000022  bf00              NOP                            ;1882
                  |L5.36|
000024  ebc700c7          RSB      r0,r7,r7,LSL #3       ;1882
000028  eb001147          ADD      r1,r0,r7,LSL #5       ;1882
00002c  9818              LDR      r0,[sp,#0x60]         ;1882
00002e  180d              ADDS     r5,r1,r0              ;1882
000030  6968              LDR      r0,[r5,#0x14]         ;1882
000032  2800              CMP      r0,#0                 ;1882
000034  f000821b          BEQ.W    |L5.1134|
000038  1c78              ADDS     r0,r7,#1              ;1887
00003a  9019              STR      r0,[sp,#0x64]         ;1887
00003c  2810              CMP      r0,#0x10              ;1887
00003e  f2808216          BGE.W    |L5.1134|
000042  2001              MOVS     r0,#1                 ;1889
000044  40b8              LSLS     r0,r0,r7              ;2067
000046  9013              STR      r0,[sp,#0x4c]         ;2067
                  |L5.72|
000048  9819              LDR      r0,[sp,#0x64]         ;1889
00004a  2201              MOVS     r2,#1                 ;1889
00004c  8ba9              LDRH     r1,[r5,#0x1c]         ;1889
00004e  fa02f000          LSL      r0,r2,r0              ;1889
000052  4201              TST      r1,r0                 ;1889
000054  9007              STR      r0,[sp,#0x1c]         ;1889
000056  f0008204          BEQ.W    |L5.1122|
00005a  9819              LDR      r0,[sp,#0x64]         ;1891
00005c  ebc002c0          RSB      r2,r0,r0,LSL #3       ;1891
000060  eb021240          ADD      r2,r2,r0,LSL #5       ;1891
000064  9818              LDR      r0,[sp,#0x60]         ;1891
000066  1816              ADDS     r6,r2,r0              ;1891
000068  6970              LDR      r0,[r6,#0x14]         ;1891
00006a  9006              STR      r0,[sp,#0x18]         ;1891
00006c  2800              CMP      r0,#0                 ;1891
00006e  d07d              BEQ      |L5.364|
000070  68e9              LDR      r1,[r5,#0xc]          ;1899
000072  6968              LDR      r0,[r5,#0x14]         ;1899
000074  9005              STR      r0,[sp,#0x14]         ;1901
000076  eb010150          ADD      r1,r1,r0,LSR #1       ;1899
00007a  0209              LSLS     r1,r1,#8              ;1899
00007c  fbb1f1f0          UDIV     r1,r1,r0              ;1900
000080  6929              LDR      r1,[r5,#0x10]         ;1901
000082  f995200b          LDRSB    r2,[r5,#0xb]          ;1910
000086  eb010150          ADD      r1,r1,r0,LSR #1       ;1901
00008a  0209              LSLS     r1,r1,#8              ;1901
00008c  fbb1f0f0          UDIV     r0,r1,r0              ;1902
000090  68f1              LDR      r1,[r6,#0xc]          ;1904
000092  9806              LDR      r0,[sp,#0x18]         ;1904
000094  f995300a          LDRSB    r3,[r5,#0xa]          ;1909
000098  eb010050          ADD      r0,r1,r0,LSR #1       ;1904
00009c  9906              LDR      r1,[sp,#0x18]         ;1905
00009e  0200              LSLS     r0,r0,#8              ;1904
0000a0  fbb0f0f1          UDIV     r0,r0,r1              ;1905
0000a4  6931              LDR      r1,[r6,#0x10]         ;1906
0000a6  9806              LDR      r0,[sp,#0x18]         ;1906
0000a8  eb010050          ADD      r0,r1,r0,LSR #1       ;1906
0000ac  9906              LDR      r1,[sp,#0x18]         ;1907
0000ae  0200              LSLS     r0,r0,#8              ;1906
0000b0  fbb0f0f1          UDIV     r0,r0,r1              ;1907
0000b4  ebc200c2          RSB      r0,r2,r2,LSL #3       ;1915
0000b8  eb000140          ADD      r1,r0,r0,LSL #1       ;1915
0000bc  48d1              LDR      r0,|L5.1028|
0000be  eb0001c1          ADD      r1,r0,r1,LSL #3       ;1915
0000c2  eb010143          ADD      r1,r1,r3,LSL #1       ;1915
0000c6  f5014170          ADD      r1,r1,#0xf000         ;1915
0000ca  f9b116c0          LDRSH    r1,[r1,#0x6c0]        ;1915
0000ce  910f              STR      r1,[sp,#0x3c]         ;1917
0000d0  f996c00b          LDRSB    r12,[r6,#0xb]         ;1918
0000d4  f996100a          LDRSB    r1,[r6,#0xa]          ;1917
0000d8  ebcc04cc          RSB      r4,r12,r12,LSL #3     ;1923
0000dc  eb040444          ADD      r4,r4,r4,LSL #1       ;1923
0000e0  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1923
0000e4  eb000041          ADD      r0,r0,r1,LSL #1       ;1923
0000e8  f5004070          ADD      r0,r0,#0xf000         ;1923
0000ec  4cc4              LDR      r4,|L5.1024|
0000ee  f9b006c0          LDRSH    r0,[r0,#0x6c0]        ;1923
0000f2  9016              STR      r0,[sp,#0x58]         ;1923
0000f4  981a              LDR      r0,[sp,#0x68]         ;1925
0000f6  f8b002f2          LDRH     r0,[r0,#0x2f2]        ;1925
0000fa  9008              STR      r0,[sp,#0x20]         ;1925
0000fc  6864              LDR      r4,[r4,#4]            ;1925  ; thisModeConf
0000fe  940e              STR      r4,[sp,#0x38]         ;1925
000100  f8b4406a          LDRH     r4,[r4,#0x6a]         ;1925
000104  9415              STR      r4,[sp,#0x54]         ;1925
000106  42a0              CMP      r0,r4                 ;1925
000108  d25f              BCS      |L5.458|
00010a  f9950004          LDRSB    r0,[r5,#4]            ;1927
00010e  f9964004          LDRSB    r4,[r6,#4]            ;1927
000112  42a0              CMP      r0,r4                 ;1927
000114  bfa8              IT       GE                    ;1927
000116  4620              MOVGE    r0,r4                 ;1927
000118  9c12              LDR      r4,[sp,#0x48]         ;1927
00011a  f9968005          LDRSB    r8,[r6,#5]            ;1928
00011e  f3604417          BFI      r4,r0,#16,#8          ;1927
000122  f9950005          LDRSB    r0,[r5,#5]            ;1928
000126  4540              CMP      r0,r8                 ;1928
000128  bfd8              IT       LE                    ;1928
00012a  4640              MOVLE    r0,r8                 ;1928
00012c  f360641f          BFI      r4,r0,#24,#8          ;1928
000130  f9958002          LDRSB    r8,[r5,#2]            ;1929
000134  f9960002          LDRSB    r0,[r6,#2]            ;1929
000138  4580              CMP      r8,r0                 ;1929
00013a  bfb8              IT       LT                    ;1929
00013c  4640              MOVLT    r0,r8                 ;1929
00013e  f3600407          BFI      r4,r0,#0,#8           ;1929
000142  f9958003          LDRSB    r8,[r5,#3]            ;1930
000146  f9960003          LDRSB    r0,[r6,#3]            ;1930
00014a  4580              CMP      r8,r0                 ;1930
00014c  bfc8              IT       GT                    ;1930
00014e  4640              MOVGT    r0,r8                 ;1930
                  |L5.336|
000150  f360240f          BFI      r4,r0,#8,#8           ;1930
000154  eb02000c          ADD      r0,r2,r12             ;1941
000158  1042              ASRS     r2,r0,#1              ;1941
00015a  980b              LDR      r0,[sp,#0x2c]         ;1941
00015c  4419              ADD      r1,r1,r3              ;1942
00015e  f8df92a8          LDR      r9,|L5.1032|
000162  9412              STR      r4,[sp,#0x48]         ;1941
000164  f362200f          BFI      r0,r2,#8,#8           ;1941
000168  1049              ASRS     r1,r1,#1              ;1942
00016a  e000              B        |L5.366|
                  |L5.364|
00016c  e024              B        |L5.440|
                  |L5.366|
00016e  f3610007          BFI      r0,r1,#0,#8           ;1942
000172  900b              STR      r0,[sp,#0x2c]         ;1942
000174  f3442007          SBFX     r0,r4,#8,#8           ;1942
000178  b262              SXTB     r2,r4                 ;1942
00017a  900c              STR      r0,[sp,#0x30]         ;1943
00017c  4290              CMP      r0,r2                 ;1943
00017e  db6f              BLT      |L5.608|
000180  f3444007          SBFX     r0,r4,#16,#8          ;1937
000184  1623              ASRS     r3,r4,#24             ;1937
000186  901b              STR      r0,[sp,#0x6c]         ;1937
                  |L5.392|
000188  981b              LDR      r0,[sp,#0x6c]         ;1945
00018a  4283              CMP      r3,r0                 ;1945
00018c  db61              BLT      |L5.594|
00018e  b251              SXTB     r1,r2                 ;1966
000190  9117              STR      r1,[sp,#0x5c]         ;1947
000192  ebc201c2          RSB      r1,r2,r2,LSL #3       ;1947
000196  eb010c41          ADD      r12,r1,r1,LSL #1      ;1947
00019a  499a              LDR      r1,|L5.1028|
00019c  eb010ecc          ADD      lr,r1,r12,LSL #3      ;1961
0001a0  eb01048c          ADD      r4,r1,r12,LSL #2      ;1947
0001a4  eb01180c          ADD      r8,r1,r12,LSL #4      ;1951
                  |L5.424|
0001a8  1821              ADDS     r1,r4,r0              ;1947
0001aa  f5013188          ADD      r1,r1,#0x11000        ;1947
0001ae  f8911640          LDRB     r1,[r1,#0x640]        ;1947
0001b2  293f              CMP      r1,#0x3f              ;1949
0001b4  d14a              BNE      |L5.588|
0001b6  e01e              B        |L5.502|
                  |L5.440|
0001b8  9807              LDR      r0,[sp,#0x1c]         ;1893
0001ba  ea210000          BIC      r0,r1,r0              ;1893
0001be  83a8              STRH     r0,[r5,#0x1c]         ;1893
0001c0  7fa8              LDRB     r0,[r5,#0x1e]         ;1894
0001c2  1e40              SUBS     r0,r0,#1              ;1894
0001c4  77a8              STRB     r0,[r5,#0x1e]         ;1894
0001c6  f000b94c          B.W      |L5.1122|
                  |L5.458|
0001ca  428b              CMP      r3,r1                 ;1934
0001cc  bfb4              ITE      LT                    ;1934
0001ce  4618              MOVLT    r0,r3                 ;1934
0001d0  4608              MOVGE    r0,r1                 ;1934
0001d2  9c12              LDR      r4,[sp,#0x48]         ;1934
0001d4  f3604417          BFI      r4,r0,#16,#8          ;1934
0001d8  bfcc              ITE      GT                    ;1934
0001da  4618              MOVGT    r0,r3                 ;1934
0001dc  4608              MOVLE    r0,r1                 ;1934
0001de  f360641f          BFI      r4,r0,#24,#8          ;1934
0001e2  4562              CMP      r2,r12                ;1936
0001e4  bfb4              ITE      LT                    ;1936
0001e6  4610              MOVLT    r0,r2                 ;1936
0001e8  4660              MOVGE    r0,r12                ;1936
0001ea  f3600407          BFI      r4,r0,#0,#8           ;1936
0001ee  bfcc              ITE      GT                    ;1936
0001f0  4610              MOVGT    r0,r2                 ;1936
0001f2  4660              MOVLE    r0,r12                ;1936
0001f4  e7ac              B        |L5.336|
                  |L5.502|
0001f6  f895c001          LDRB     r12,[r5,#1]           ;1953
0001fa  eb080180          ADD      r1,r8,r0,LSL #2       ;1951
0001fe  f5014130          ADD      r1,r1,#0xb000         ;1951
000202  f1ac0a01          SUB      r10,r12,#1            ;1953
000206  f896b001          LDRB     r11,[r6,#1]           ;1953
00020a  f04f0c01          MOV      r12,#1                ;1953
00020e  f8b117c0          LDRH     r1,[r1,#0x7c0]        ;1951
000212  fa0cfa0a          LSL      r10,r12,r10           ;1953
000216  f1ab0b01          SUB      r11,r11,#1            ;1953
00021a  fa0cfc0b          LSL      r12,r12,r11           ;1953
00021e  ea4a0c0c          ORR      r12,r10,r12           ;1953
000222  b289              UXTH     r1,r1                 ;1953
000224  ea3c0101          BICS     r1,r12,r1             ;1953
000228  d110              BNE      |L5.588|
00022a  eb0e0140          ADD      r1,lr,r0,LSL #1       ;1961
00022e  f5014170          ADD      r1,r1,#0xf000         ;1961
000232  f9b116c0          LDRSH    r1,[r1,#0x6c0]        ;1961
000236  4589              CMP      r9,r1                 ;1963
000238  da08              BGE      |L5.588|
00023a  4689              MOV      r9,r1                 ;1965
00023c  f8ddc05c          LDR      r12,[sp,#0x5c]        ;1966
000240  990b              LDR      r1,[sp,#0x2c]         ;1966
000242  f36c210f          BFI      r1,r12,#8,#8          ;1966
000246  f3600107          BFI      r1,r0,#0,#8           ;1966
00024a  910b              STR      r1,[sp,#0x2c]         ;1966
                  |L5.588|
00024c  1c40              ADDS     r0,r0,#1              ;1966
00024e  4283              CMP      r3,r0                 ;1967
000250  daaa              BGE      |L5.424|
                  |L5.594|
000252  980c              LDR      r0,[sp,#0x30]         ;1967
000254  1c52              ADDS     r2,r2,#1              ;1967
000256  4290              CMP      r0,r2                 ;1967
000258  da96              BGE      |L5.392|
00025a  f5194f00          CMN      r9,#0x8000            ;1974
00025e  d111              BNE      |L5.644|
                  |L5.608|
000260  980b              LDR      r0,[sp,#0x2c]         ;1979
000262  f24f69c0          MOV      r9,#0xf6c0            ;1979
000266  f3402007          SBFX     r0,r0,#8,#8           ;1979
00026a  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1979
00026e  eb000140          ADD      r1,r0,r0,LSL #1       ;1979
000272  4864              LDR      r0,|L5.1028|
000274  eb0001c1          ADD      r1,r0,r1,LSL #3       ;1979
000278  980b              LDR      r0,[sp,#0x2c]         ;1979
00027a  b240              SXTB     r0,r0                 ;1979
00027c  eb010040          ADD      r0,r1,r0,LSL #1       ;1979
000280  f9309009          LDRSH    r9,[r0,r9]            ;1979
                  |L5.644|
000284  990f              LDR      r1,[sp,#0x3c]         ;1982
000286  9806              LDR      r0,[sp,#0x18]         ;1982
000288  fb00f201          MUL      r2,r0,r1              ;1982
00028c  9905              LDR      r1,[sp,#0x14]         ;1982
00028e  9816              LDR      r0,[sp,#0x58]         ;1982
000290  fb002201          MLA      r2,r0,r1,r2           ;1982
000294  9806              LDR      r0,[sp,#0x18]         ;1982
000296  4408              ADD      r0,r0,r1              ;1982
000298  fbb2f0f0          UDIV     r0,r2,r0              ;1982
00029c  2164              MOVS     r1,#0x64              ;2000
00029e  fb09f101          MUL      r1,r9,r1              ;2000
0002a2  fb91f3f0          SDIV     r3,r1,r0              ;2000
0002a6  9915              LDR      r1,[sp,#0x54]         ;2003
0002a8  9808              LDR      r0,[sp,#0x20]         ;2003
0002aa  4288              CMP      r0,r1                 ;2003
0002ac  980e              LDR      r0,[sp,#0x38]         ;2003
0002ae  bf34              ITE      CC                    ;2005
0002b0  f890106e          LDRBCC   r1,[r0,#0x6e]         ;2005
0002b4  f890106f          LDRBCS   r1,[r0,#0x6f]         ;2013
0002b8  9818              LDR      r0,[sp,#0x60]         ;2013
0002ba  f8c0131f          STR      r1,[r0,#0x31f]        ;2013
0002be  f9b51008          LDRSH    r1,[r5,#8]            ;2021
0002c2  f9b60008          LDRSH    r0,[r6,#8]            ;2021
0002c6  4281              CMP      r1,r0                 ;2021
0002c8  bfce              ITEE     GT                    ;2023
0002ca  460a              MOVGT    r2,r1                 ;2023
0002cc  4602              MOVLE    r2,r0                 ;2028
0002ce  4608              MOVLE    r0,r1                 ;2028
0002d0  ebb90100          SUBS     r1,r9,r0              ;2032
0002d4  bf48              IT       MI                    ;2032
0002d6  4249              RSBMI    r1,r1,#0              ;2032
0002d8  f8ddc038          LDR      r12,[sp,#0x38]        ;2032
0002dc  f8bcc088          LDRH     r12,[r12,#0x88]       ;2032
0002e0  4561              CMP      r1,r12                ;2032
0002e2  db05              BLT      |L5.752|
0002e4  1a11              SUBS     r1,r2,r0              ;2032
0002e6  980e              LDR      r0,[sp,#0x38]         ;2032
0002e8  f8b0008a          LDRH     r0,[r0,#0x8a]         ;2032
0002ec  4281              CMP      r1,r0                 ;2032
0002ee  dd0b              BLE      |L5.776|
                  |L5.752|
0002f0  981a              LDR      r0,[sp,#0x68]         ;2032
0002f2  f8b012f2          LDRH     r1,[r0,#0x2f2]        ;2032
0002f6  980e              LDR      r0,[sp,#0x38]         ;2032
0002f8  f8b0008c          LDRH     r0,[r0,#0x8c]         ;2032
0002fc  4281              CMP      r1,r0                 ;2032
0002fe  d203              BCS      |L5.776|
000300  9818              LDR      r0,[sp,#0x60]         ;2034
000302  f8d0031f          LDR      r0,[r0,#0x31f]        ;2034
000306  1c43              ADDS     r3,r0,#1              ;2034
                  |L5.776|
000308  9818              LDR      r0,[sp,#0x60]         ;2038
00030a  f8d0031f          LDR      r0,[r0,#0x31f]        ;2038
00030e  4298              CMP      r0,r3                 ;2038
000310  da75              BGE      |L5.1022|
000312  f9968002          LDRSB    r8,[r6,#2]            ;2042
000316  f9960003          LDRSB    r0,[r6,#3]            ;2042
00031a  4540              CMP      r0,r8                 ;2042
00031c  db76              BLT      |L5.1036|
00031e  bf00              NOP                            ;2044
                  |L5.800|
000320  f9964004          LDRSB    r4,[r6,#4]            ;2044
000324  f9960005          LDRSB    r0,[r6,#5]            ;2044
000328  42a0              CMP      r0,r4                 ;2044
00032a  db76              BLT      |L5.1050|
00032c  ebc800c8          RSB      r0,r8,r8,LSL #3       ;1947
000330  eb000140          ADD      r1,r0,r0,LSL #1       ;1947
000334  4833              LDR      r0,|L5.1028|
000336  fa4ffa88          SXTB     r10,r8                ;1966
00033a  eb000bc1          ADD      r11,r0,r1,LSL #3      ;1961
00033e  eb000981          ADD      r9,r0,r1,LSL #2       ;1947
000342  eb001001          ADD      r0,r0,r1,LSL #4       ;1951
000346  9006              STR      r0,[sp,#0x18]         ;1951
                  |L5.840|
000348  eb090004          ADD      r0,r9,r4              ;2048
00034c  f5003288          ADD      r2,r0,#0x11000        ;2048
000350  f9963001          LDRSB    r3,[r6,#1]            ;2050
000354  f8920640          LDRB     r0,[r2,#0x640]        ;2048
000358  f3640107          BFI      r1,r4,#0,#8           ;1951
00035c  f36a210f          BFI      r1,r10,#8,#8          ;1951
000360  4283              CMP      r3,r0                 ;2050
000362  d110              BNE      |L5.902|
000364  7868              LDRB     r0,[r5,#1]            ;2059
000366  f8820640          STRB     r0,[r2,#0x640]        ;2059
00036a  9a1e              LDR      r2,[sp,#0x78]         ;2060
00036c  2000              MOVS     r0,#0                 ;2060
00036e  e9cd0200          STRD     r0,r2,[sp,#0]         ;2060
000372  eb0b0044          ADD      r0,r11,r4,LSL #1      ;2060
000376  f24f62c0          MOV      r2,#0xf6c0            ;2060
00037a  5e82              LDRSH    r2,[r0,r2]            ;2060
00037c  b2f8              UXTB     r0,r7                 ;2060
00037e  2300              MOVS     r3,#0                 ;2060
000380  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000384  e03a              B        |L5.1020|
                  |L5.902|
000386  283f              CMP      r0,#0x3f              ;2063
000388  d138              BNE      |L5.1020|
00038a  9806              LDR      r0,[sp,#0x18]         ;2065
00038c  f8ddc04c          LDR      r12,[sp,#0x4c]        ;2067
000390  eb000084          ADD      r0,r0,r4,LSL #2       ;2065
000394  f5004330          ADD      r3,r0,#0xb000         ;2065
000398  f8d307c0          LDR      r0,[r3,#0x7c0]        ;2065
00039c  b281              UXTH     r1,r0                 ;2065
00039e  ea110f0c          TST      r1,r12                ;2067
0003a2  f8ddc01c          LDR      r12,[sp,#0x1c]        ;2072
0003a6  ea010c0c          AND      r12,r1,r12            ;2072
0003aa  d00d              BEQ      |L5.968|
0003ac  f1bc0f00          CMP      r12,#0                ;2067
0003b0  d017              BEQ      |L5.994|
0003b2  ea4f4e10          LSR      lr,r0,#16             ;2067
0003b6  f1ae0e01          SUB      lr,lr,#1              ;2067
0003ba  f36e4017          BFI      r0,lr,#16,#8          ;2067
0003be  ea21010c          BIC      r1,r1,r12             ;2070
0003c2  f361000f          BFI      r0,r1,#0,#16          ;2070
0003c6  e00c              B        |L5.994|
                  |L5.968|
0003c8  f1bc0f00          CMP      r12,#0                ;2072
0003cc  d009              BEQ      |L5.994|
0003ce  f8ddc04c          LDR      r12,[sp,#0x4c]        ;2074
0003d2  ea41010c          ORR      r1,r1,r12             ;2074
0003d6  f8ddc01c          LDR      r12,[sp,#0x1c]        ;2075
0003da  ea21010c          BIC      r1,r1,r12             ;2075
0003de  f361000f          BFI      r0,r1,#0,#16          ;2075
                  |L5.994|
0003e2  f3c04107          UBFX     r1,r0,#16,#8          ;2075
0003e6  2901              CMP      r1,#1                 ;2078
0003e8  bf1c              ITT      NE                    ;2078
0003ea  b281              UXTHNE   r1,r0                 ;2078
0003ec  2900              CMPNE    r1,#0                 ;2078
0003ee  d103              BNE      |L5.1016|
0003f0  7868              LDRB     r0,[r5,#1]            ;2080
0003f2  f8820640          STRB     r0,[r2,#0x640]        ;2080
0003f6  2000              MOVS     r0,#0                 ;2081
                  |L5.1016|
0003f8  f8c307c0          STR      r0,[r3,#0x7c0]        ;2083
                  |L5.1020|
0003fc  e008              B        |L5.1040|
                  |L5.1022|
0003fe  e030              B        |L5.1122|
                  |L5.1024|
                          DCD      ||.data||
                  |L5.1028|
                          DCD      FullSharedBuff
                  |L5.1032|
                          DCD      0xffff8000
                  |L5.1036|
00040c  e00c              B        |L5.1064|
00040e  e004              B        |L5.1050|
                  |L5.1040|
000410  f9960005          LDRSB    r0,[r6,#5]            ;2085
000414  1c64              ADDS     r4,r4,#1              ;2085
000416  42a0              CMP      r0,r4                 ;2085
000418  da96              BGE      |L5.840|
                  |L5.1050|
00041a  f9960003          LDRSB    r0,[r6,#3]            ;2085
00041e  f1080801          ADD      r8,r8,#1              ;2085
000422  4540              CMP      r0,r8                 ;2085
000424  f6bfaf7c          BGE      |L5.800|
                  |L5.1064|
000428  8ba8              LDRH     r0,[r5,#0x1c]         ;2088
00042a  8bb1              LDRH     r1,[r6,#0x1c]         ;2088
00042c  ea400301          ORR      r3,r0,r1              ;2088
000430  83ab              STRH     r3,[r5,#0x1c]         ;2088
000432  2000              MOVS     r0,#0                 ;2089
000434  77a8              STRB     r0,[r5,#0x1e]         ;2089
000436  2110              MOVS     r1,#0x10              ;2090
000438  2001              MOVS     r0,#1                 ;2090
00043a  4602              MOV      r2,r0                 ;1889
                  |L5.1084|
00043c  1e49              SUBS     r1,r1,#1              ;1889
00043e  fa02fc01          LSL      r12,r2,r1             ;2092
000442  ea130f0c          TST      r3,r12                ;2092
000446  d005              BEQ      |L5.1108|
000448  f895c01e          LDRB     r12,[r5,#0x1e]        ;2094
00044c  f10c0c01          ADD      r12,r12,#1            ;2094
000450  f885c01e          STRB     r12,[r5,#0x1e]        ;2094
                  |L5.1108|
000454  1c40              ADDS     r0,r0,#1              ;2094
000456  2810              CMP      r0,#0x10              ;2094
000458  ddf0              BLE      |L5.1084|
00045a  1c70              ADDS     r0,r6,#1              ;2103
00045c  2127              MOVS     r1,#0x27              ;2103
00045e  f7fffffe          BL       __aeabi_memclr
                  |L5.1122|
000462  9819              LDR      r0,[sp,#0x64]         ;2105
000464  1c40              ADDS     r0,r0,#1              ;2105
000466  9019              STR      r0,[sp,#0x64]         ;2105
000468  2810              CMP      r0,#0x10              ;2105
00046a  f6ffaded          BLT      |L5.72|
                  |L5.1134|
00046e  9818              LDR      r0,[sp,#0x60]         ;2105
000470  1c7f              ADDS     r7,r7,#1              ;2105
000472  7800              LDRB     r0,[r0,#0]            ;2105
000474  4287              CMP      r7,r0                 ;2105
000476  f6ffadd5          BLT      |L5.36|
00047a  b01f              ADD      sp,sp,#0x7c
00047c  e8bd8ff0          POP      {r4-r11,pc}
;;;2110   
                          ENDP


                          AREA ||i.algorithm_label_Merge_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge_PostProcess PROC
;;;2110   
;;;2111   void algorithm_label_Merge_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2112   {
000004  b092              SUB      sp,sp,#0x48
000006  4605              MOV      r5,r0
;;;2113   	int i, j, l, r, c;
;;;2114   	uint8_t ucDeleteLabel_num = 0;
000008  2000              MOVS     r0,#0
;;;2115       uint8_t rLabel_val;
;;;2116   
;;;2117   	tLabelInfo_t	*temp_label;
;;;2118   	temp_label = &thisInfo->tLabel;
00000a  9010              STR      r0,[sp,#0x40]
00000c  488d              LDR      r0,|L6.580|
;;;2119   
;;;2120   	for( i=_label_start_idx; i<temp_label->ucNum-1; i++ )
00000e  460c              MOV      r4,r1
000010  460e              MOV      r6,r1                 ;2112
000012  6880              LDR      r0,[r0,#8]            ;2118  ; thisInfo
000014  3045              ADDS     r0,r0,#0x45           ;2118
000016  900c              STR      r0,[sp,#0x30]
000018  7800              LDRB     r0,[r0,#0]
00001a  1e40              SUBS     r0,r0,#1
00001c  42a0              CMP      r0,r4
00001e  dd31              BLE      |L6.132|
                  |L6.32|
;;;2121   	{
;;;2122   		if( temp_label->tTable[i].ulStrength == 0 )
000020  ebc400c4          RSB      r0,r4,r4,LSL #3
000024  eb001144          ADD      r1,r0,r4,LSL #5
000028  980c              LDR      r0,[sp,#0x30]
00002a  4401              ADD      r1,r1,r0
00002c  6948              LDR      r0,[r1,#0x14]
00002e  b9f8              CBNZ     r0,|L6.112|
;;;2123   		{
;;;2124   			for( j=i+1; j<temp_label->ucNum; j++ )
000030  980c              LDR      r0,[sp,#0x30]
000032  1c62              ADDS     r2,r4,#1
000034  7803              LDRB     r3,[r0,#0]
000036  4293              CMP      r3,r2
000038  dd1e              BLE      |L6.120|
;;;2125   			{
;;;2126   				if( temp_label->tTable[j].ulStrength != 0 )
00003a  bf00              NOP      
                  |L6.60|
00003c  ebc200c2          RSB      r0,r2,r2,LSL #3
000040  f8ddc030          LDR      r12,[sp,#0x30]
000044  eb001042          ADD      r0,r0,r2,LSL #5
000048  4460              ADD      r0,r0,r12
00004a  6940              LDR      r0,[r0,#0x14]
00004c  b188              CBZ      r0,|L6.114|
;;;2127   				{
;;;2128   					temp_label->tTable[i] = temp_label->tTable[j];
00004e  ebc200c2          RSB      r0,r2,r2,LSL #3
000052  eb001242          ADD      r2,r0,r2,LSL #5
000056  eb02070c          ADD      r7,r2,r12
00005a  1c78              ADDS     r0,r7,#1
00005c  1c4b              ADDS     r3,r1,#1
00005e  4601              MOV      r1,r0
000060  2227              MOVS     r2,#0x27
000062  4618              MOV      r0,r3
000064  f7fffffe          BL       __aeabi_memcpy
;;;2129   					memset((void *)&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t));
000068  1c78              ADDS     r0,r7,#1
00006a  2127              MOVS     r1,#0x27
00006c  f7fffffe          BL       __aeabi_memclr
                  |L6.112|
;;;2130   
;;;2131   					break;
000070  e002              B        |L6.120|
                  |L6.114|
000072  1c52              ADDS     r2,r2,#1
000074  4293              CMP      r3,r2
000076  dce1              BGT      |L6.60|
                  |L6.120|
000078  980c              LDR      r0,[sp,#0x30]
00007a  1c64              ADDS     r4,r4,#1
00007c  7800              LDRB     r0,[r0,#0]
00007e  1e40              SUBS     r0,r0,#1
000080  42a0              CMP      r0,r4
000082  dccd              BGT      |L6.32|
                  |L6.132|
;;;2132   				}
;;;2133   			}
;;;2134   		}
;;;2135   	}
;;;2136   
;;;2137   	for( l=_label_start_idx; l<temp_label->ucNum; l++ )
000084  980c              LDR      r0,[sp,#0x30]
000086  9604              STR      r6,[sp,#0x10]
000088  7800              LDRB     r0,[r0,#0]
00008a  42b0              CMP      r0,r6
00008c  dd7e              BLE      |L6.396|
;;;2138   	{
;;;2139   		if( temp_label->tTable[l].ulStrength != 0 )
;;;2140   		{
;;;2141   			int _Id = temp_label->tTable[l].cId;
;;;2142   			if( _Id != (l+1) )
;;;2143   			{
;;;2144   				for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
00008e  980c              LDR      r0,[sp,#0x30]
;;;2145   				{
;;;2146   					for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
000090  4e6d              LDR      r6,|L6.584|
000092  eb000485          ADD      r4,r0,r5,LSL #2       ;2144
                  |L6.150|
000096  9804              LDR      r0,[sp,#0x10]         ;2139
000098  ebc001c0          RSB      r1,r0,r0,LSL #3       ;2139
00009c  eb011140          ADD      r1,r1,r0,LSL #5       ;2139
0000a0  980c              LDR      r0,[sp,#0x30]         ;2139
0000a2  180d              ADDS     r5,r1,r0              ;2139
0000a4  6968              LDR      r0,[r5,#0x14]         ;2139
0000a6  2800              CMP      r0,#0                 ;2139
0000a8  d071              BEQ      |L6.398|
0000aa  9804              LDR      r0,[sp,#0x10]         ;2142
0000ac  f9952001          LDRSB    r2,[r5,#1]            ;2141
0000b0  f1000801          ADD      r8,r0,#1              ;2142
0000b4  4542              CMP      r2,r8                 ;2142
0000b6  d02a              BEQ      |L6.270|
0000b8  f994c272          LDRSB    r12,[r4,#0x272]       ;2144
0000bc  f9940273          LDRSB    r0,[r4,#0x273]        ;2144
0000c0  4560              CMP      r0,r12                ;2144
;;;2147   					{
;;;2148   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2149   
;;;2150   						if( rLabel_val == _Id )
;;;2151   						{
;;;2152   							HAL_WRITE_LABEL_IMAGE(r, c, l+1);
0000c2  bfa8              IT       GE
0000c4  f00803ff          ANDGE    r3,r8,#0xff
0000c8  db21              BLT      |L6.270|
0000ca  bf00              NOP                            ;2146
                  |L6.204|
0000cc  f9940274          LDRSB    r0,[r4,#0x274]        ;2146
0000d0  f9941275          LDRSB    r1,[r4,#0x275]        ;2146
0000d4  1a09              SUBS     r1,r1,r0              ;2146
0000d6  1c4f              ADDS     r7,r1,#1              ;2146
0000d8  2f00              CMP      r7,#0                 ;2146
0000da  dd12              BLE      |L6.258|
0000dc  ebcc07cc          RSB      r7,r12,r12,LSL #3     ;2146
0000e0  eb070747          ADD      r7,r7,r7,LSL #1       ;2146
0000e4  eb060787          ADD      r7,r6,r7,LSL #2       ;2146
0000e8  4438              ADD      r0,r0,r7              ;2146
0000ea  f5003080          ADD      r0,r0,#0x10000        ;2146
0000ee  f50050b2          ADD      r0,r0,#0x1640         ;2146
0000f2  1c49              ADDS     r1,r1,#1              ;2146
                  |L6.244|
0000f4  7807              LDRB     r7,[r0,#0]            ;2150
0000f6  4297              CMP      r7,r2                 ;2150
0000f8  bf08              IT       EQ
0000fa  7003              STRBEQ   r3,[r0,#0]
0000fc  1c40              ADDS     r0,r0,#1
0000fe  1e49              SUBS     r1,r1,#1
000100  d1f8              BNE      |L6.244|
                  |L6.258|
;;;2153   						}
000102  f9940273          LDRSB    r0,[r4,#0x273]
000106  f10c0c01          ADD      r12,r12,#1
00010a  4560              CMP      r0,r12
00010c  dade              BGE      |L6.204|
                  |L6.270|
;;;2154   					}
;;;2155   				}
;;;2156   			}
;;;2157   
;;;2158   			memset((void *)&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
00010e  1c68              ADDS     r0,r5,#1
000110  2127              MOVS     r1,#0x27
000112  f7fffffe          BL       __aeabi_memclr
;;;2159   			temp_label->tTable[l].cId = l+1;
000116  f8858001          STRB     r8,[r5,#1]
;;;2160   			temp_label->tTable[l].tRect.cs = COL_MAX-1;
00011a  2053              MOVS     r0,#0x53
00011c  7128              STRB     r0,[r5,#4]
;;;2161   			temp_label->tTable[l].tRect.rs = ROW_MAX-1;
00011e  202f              MOVS     r0,#0x2f
000120  70a8              STRB     r0,[r5,#2]
;;;2162   
;;;2163   			for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
000122  f9940272          LDRSB    r0,[r4,#0x272]
000126  900d              STR      r0,[sp,#0x34]
000128  f9941273          LDRSB    r1,[r4,#0x273]
00012c  4281              CMP      r1,r0
00012e  db76              BLT      |L6.542|
;;;2164   			{
;;;2165   				for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
;;;2166   				{
;;;2167   					tCell_t tNodePos = { .r = r, .c = c };
;;;2168   
;;;2169   					rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2170   
;;;2171   					if( rLabel_val == l+1 )
;;;2172   					{
;;;2173   //						if(mode == LOCAL_FINGER_MODE)
;;;2174   //							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2175   //						else
;;;2176   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2177   					}
;;;2178   					else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;2179   					{
;;;2180   						int d;
;;;2181   						tConflictInfo_t tConflict;
;;;2182   
;;;2183   						algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tNodePos, &tConflict, mode);
;;;2184   
;;;2185   						if( tConflict.tInfo.BF & _BV(l) )
000130  9904              LDR      r1,[sp,#0x10]
000132  2001              MOVS     r0,#1
000134  4088              LSLS     r0,r0,r1
000136  900f              STR      r0,[sp,#0x3c]
                  |L6.312|
000138  f9945274          LDRSB    r5,[r4,#0x274]        ;2165
00013c  f9940275          LDRSB    r0,[r4,#0x275]        ;2165
000140  42a8              CMP      r0,r5                 ;2165
000142  db60              BLT      |L6.518|
000144  980d              LDR      r0,[sp,#0x34]         ;2146
000146  990d              LDR      r1,[sp,#0x34]         ;2167
000148  ebc000c0          RSB      r0,r0,r0,LSL #3       ;2146
00014c  eb000040          ADD      r0,r0,r0,LSL #1       ;2146
000150  eb060b80          ADD      r11,r6,r0,LSL #2      ;2146
000154  eb0600c0          ADD      r0,r6,r0,LSL #3       ;2176
000158  fa4ff981          SXTB     r9,r1                 ;2167
00015c  f8cd0018          STR.W    r0,[sp,#0x18]         ;2176
                  |L6.352|
000160  eb0b0005          ADD      r0,r11,r5             ;2169
000164  f5003088          ADD      r0,r0,#0x11000        ;2169
000168  fa4ffa85          SXTB     r10,r5                ;2167
00016c  f8900640          LDRB     r0,[r0,#0x640]        ;2169
000170  f36a0707          BFI      r7,r10,#0,#8          ;2167
000174  f369270f          BFI      r7,r9,#8,#8           ;2167
000178  4540              CMP      r0,r8                 ;2171
00017a  d113              BNE      |L6.420|
00017c  9914              LDR      r1,[sp,#0x50]         ;2176
00017e  2000              MOVS     r0,#0                 ;2176
000180  e9cd0100          STRD     r0,r1,[sp,#0]         ;2176
000184  9806              LDR      r0,[sp,#0x18]         ;2176
000186  eb000045          ADD      r0,r0,r5,LSL #1       ;2176
00018a  e001              B        |L6.400|
                  |L6.396|
00018c  e050              B        |L6.560|
                  |L6.398|
00018e  e042              B        |L6.534|
                  |L6.400|
000190  f24f62c0          MOV      r2,#0xf6c0            ;2176
000194  5e82              LDRSH    r2,[r0,r2]            ;2176
000196  9804              LDR      r0,[sp,#0x10]         ;2176
000198  2300              MOVS     r3,#0                 ;2176
00019a  b2c0              UXTB     r0,r0                 ;2176
00019c  4639              MOV      r1,r7                 ;2176
00019e  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
0001a2  e02b              B        |L6.508|
                  |L6.420|
0001a4  283f              CMP      r0,#0x3f              ;2178
0001a6  d129              BNE      |L6.508|
0001a8  9914              LDR      r1,[sp,#0x50]         ;2183
0001aa  a80a              ADD      r0,sp,#0x28           ;2183
0001ac  e9cd0100          STRD     r0,r1,[sp,#0]         ;2183
0001b0  2200              MOVS     r2,#0                 ;2183
0001b2  463b              MOV      r3,r7                 ;2183
0001b4  2108              MOVS     r1,#8                 ;2183
0001b6  4610              MOV      r0,r2                 ;2183
0001b8  f7fffffe          BL       algorithm_label_GetConflictInfo
0001bc  f8bd1028          LDRH     r1,[sp,#0x28]
0001c0  980f              LDR      r0,[sp,#0x3c]
0001c2  4201              TST      r1,r0
0001c4  d01a              BEQ      |L6.508|
;;;2186   						{
;;;2187   //							if(mode == LOCAL_FINGER_MODE)
;;;2188   //								d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
;;;2189   //							else
;;;2190   								d = HAL_READ_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
0001c6  ebc900c9          RSB      r0,r9,r9,LSL #3
0001ca  eb000040          ADD      r0,r0,r0,LSL #1
0001ce  eb0600c0          ADD      r0,r6,r0,LSL #3
0001d2  eb00004a          ADD      r0,r0,r10,LSL #1
0001d6  f5004070          ADD      r0,r0,#0xf000
0001da  f89d102a          LDRB     r1,[sp,#0x2a]
0001de  f9b006c0          LDRSH    r0,[r0,#0x6c0]
;;;2191   
;;;2192   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, d, NO, NO, mode);
0001e2  9a14              LDR      r2,[sp,#0x50]
0001e4  fb90f1f1          SDIV     r1,r0,r1              ;2190
0001e8  2000              MOVS     r0,#0
0001ea  e9cd0200          STRD     r0,r2,[sp,#0]
0001ee  9804              LDR      r0,[sp,#0x10]
0001f0  b20a              SXTH     r2,r1
0001f2  b2c0              UXTB     r0,r0
0001f4  2300              MOVS     r3,#0
0001f6  4639              MOV      r1,r7
0001f8  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L6.508|
;;;2193   						}
;;;2194   					}
;;;2195   				}
0001fc  f9940275          LDRSB    r0,[r4,#0x275]
000200  1c6d              ADDS     r5,r5,#1
000202  42a8              CMP      r0,r5
000204  daac              BGE      |L6.352|
                  |L6.518|
000206  980d              LDR      r0,[sp,#0x34]
000208  1c40              ADDS     r0,r0,#1
00020a  900d              STR      r0,[sp,#0x34]
00020c  f9941273          LDRSB    r1,[r4,#0x273]
000210  4281              CMP      r1,r0
000212  da91              BGE      |L6.312|
000214  e003              B        |L6.542|
                  |L6.534|
;;;2196   			}
;;;2197   		}
;;;2198   		else
;;;2199   		{
;;;2200   			ucDeleteLabel_num++;
000216  9810              LDR      r0,[sp,#0x40]
000218  1c40              ADDS     r0,r0,#1
00021a  b2c0              UXTB     r0,r0
00021c  9010              STR      r0,[sp,#0x40]
                  |L6.542|
00021e  9804              LDR      r0,[sp,#0x10]
000220  1c40              ADDS     r0,r0,#1
000222  9004              STR      r0,[sp,#0x10]
000224  980c              LDR      r0,[sp,#0x30]
000226  7801              LDRB     r1,[r0,#0]
000228  9804              LDR      r0,[sp,#0x10]
00022a  4281              CMP      r1,r0
00022c  f73faf33          BGT      |L6.150|
                  |L6.560|
;;;2201   		}
;;;2202   	}
;;;2203   
;;;2204   	temp_label->ucNum -= ucDeleteLabel_num;
000230  980c              LDR      r0,[sp,#0x30]
000232  7801              LDRB     r1,[r0,#0]
000234  9810              LDR      r0,[sp,#0x40]
000236  1a08              SUBS     r0,r1,r0
000238  990c              LDR      r1,[sp,#0x30]
00023a  7008              STRB     r0,[r1,#0]
;;;2205   }
00023c  b015              ADD      sp,sp,#0x54
00023e  e8bd8ff0          POP      {r4-r11,pc}
;;;2206   
                          ENDP

000242  0000              DCW      0x0000
                  |L6.580|
                          DCD      ||.data||
                  |L6.584|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_SearchValidArea||, CODE, READONLY, ALIGN=2

                  algorithm_label_SearchValidArea PROC
;;;1168   #else
;;;1169   void algorithm_label_SearchValidArea(tRect_t _tRect, int16_t _deltaThd, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1170   {
;;;1171   	int32_t r, c, i, j;
;;;1172   	uint8_t u_val, l_val, ul_val, ur_val;
;;;1173   	uint8_t max_val1, max_val2, max_val3, min_val1, min_val2, min_val3;
;;;1174   	uint8_t label_num;
;;;1175   	int16_t delta;
;;;1176   	uint8_t label_new, label_max;
;;;1177   	uint8_t	map_val, eq_val, map_data;
;;;1178   	uint8_t remap_index;
;;;1179   	uint8_t ucEqTbl[(LOOSE_POSBUF_ + LABEL_MARGIN)];
;;;1180   
;;;1181   	tLabelInfo_t	*temp_label;
;;;1182   
;;;1183   	temp_label = &thisInfo->tLabel;
000004  49d4              LDR      r1,|L7.856|
000006  b0a0              SUB      sp,sp,#0x80           ;1170
;;;1184   
;;;1185   	label_num = 0;
000008  2400              MOVS     r4,#0
00000a  6889              LDR      r1,[r1,#8]            ;1183  ; thisInfo
;;;1186   	memset((void *)ucEqTbl, 0x00, sizeof(uint8_t)*(LOOSE_POSBUF_ + LABEL_MARGIN));
00000c  9402              STR      r4,[sp,#8]
00000e  9407              STR      r4,[sp,#0x1c]
000010  3145              ADDS     r1,r1,#0x45           ;1183
000012  940c              STR      r4,[sp,#0x30]
000014  9400              STR      r4,[sp,#0]
000016  9116              STR      r1,[sp,#0x58]
000018  9403              STR      r4,[sp,#0xc]
00001a  9405              STR      r4,[sp,#0x14]
00001c  b241              SXTB     r1,r0
00001e  9401              STR      r4,[sp,#4]
000020  9408              STR      r4,[sp,#0x20]
000022  940a              STR      r4,[sp,#0x28]
;;;1187   
;;;1188   	// Stage1
;;;1189   	for (r = _tRect.rs; r <= _tRect.re; r++)
000024  f3402207          SBFX     r2,r0,#8,#8
000028  9404              STR      r4,[sp,#0x10]         ;1186
00002a  9406              STR      r4,[sp,#0x18]         ;1186
00002c  940d              STR      r4,[sp,#0x34]         ;1186
00002e  9119              STR      r1,[sp,#0x64]
000030  9409              STR      r4,[sp,#0x24]         ;1186
000032  940b              STR      r4,[sp,#0x2c]         ;1186
000034  921c              STR      r2,[sp,#0x70]
000036  910f              STR      r1,[sp,#0x3c]
000038  428a              CMP      r2,r1
00003a  f2c0817f          BLT.W    |L7.828|
00003e  f3404107          SBFX     r1,r0,#16,#8          ;1170
000042  ea4f6920          ASR      r9,r0,#24             ;1170
000046  911e              STR      r1,[sp,#0x78]         ;1170
                  |L7.72|
;;;1190   	{
;;;1191   		for (c = _tRect.cs; c <= _tRect.ce; c++)
000048  9a1e              LDR      r2,[sp,#0x78]
00004a  4591              CMP      r9,r2
00004c  f2c080c0          BLT.W    |L7.464|
;;;1192   		{
;;;1193   //			if(mode == LOCAL_FINGER_MODE)
;;;1194   //				delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;1195   //			else
;;;1196   				delta = HAL_READ_DELTA_IMAGE(r,c);
000050  980f              LDR      r0,[sp,#0x3c]
000052  466b              MOV      r3,sp                 ;1179
000054  ebc000c0          RSB      r0,r0,r0,LSL #3
000058  eb000140          ADD      r1,r0,r0,LSL #1
00005c  48bf              LDR      r0,|L7.860|
;;;1197   
;;;1198   			if ( delta >= _deltaThd)
;;;1199   			{
;;;1200   #if (PAD_ == 0)
;;;1201   				if(r == 0)
;;;1202   				{
;;;1203   					u_val  = 0;
;;;1204   					ul_val = 0;
;;;1205   					ur_val = 0;
;;;1206   				}
;;;1207   				else
;;;1208   				{
;;;1209   					u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
00005e  eb000a81          ADD      r10,r0,r1,LSL #2
000062  eb000bc1          ADD      r11,r0,r1,LSL #3      ;1196
000066  bf00              NOP                            ;1196
                  |L7.104|
000068  eb0b0042          ADD      r0,r11,r2,LSL #1      ;1196
00006c  f5004070          ADD      r0,r0,#0xf000         ;1196
000070  9921              LDR      r1,[sp,#0x84]         ;1198
000072  f9b006c0          LDRSH    r0,[r0,#0x6c0]        ;1196
000076  4288              CMP      r0,r1                 ;1198
;;;1210   					if(c == 0)
;;;1211   						ul_val = 0;
;;;1212   					else 
;;;1213   						ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;1214   					
;;;1215   					if(c == COL_MAX-1)
;;;1216   						ur_val = 0;
;;;1217   					else 
;;;1218   						ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;1219   				}
;;;1220   				
;;;1221   				if(c == 0)
;;;1222   					l_val  = 0;
;;;1223   				else
;;;1224   					l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);
;;;1225   #else
;;;1226   				u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
;;;1227   				ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;1228   				ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;1229   				l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);				
;;;1230   #endif
;;;1231   				max_val1 = MAX(ul_val, l_val);
;;;1232   				max_val2 = MAX(u_val, ur_val);
;;;1233   				max_val3 = MAX(max_val1, max_val2);
;;;1234   
;;;1235   				if (max_val3 != 0)
;;;1236   				{
;;;1237   					if (u_val == 0)  u_val  = 127;
;;;1238   					if (l_val == 0)  l_val  = 127;
;;;1239   					if (ul_val == 0) ul_val = 127;
;;;1240   					if (ur_val == 0) ur_val = 127;
;;;1241   
;;;1242   					min_val1 = MIN(u_val, l_val);
;;;1243   					min_val2 = MIN(ul_val, ur_val);
;;;1244   					min_val3 = MIN(min_val1, min_val2);
;;;1245   
;;;1246   					if (min_val3 != max_val3)
;;;1247   					{
;;;1248   						map_val = min_val3;
;;;1249   						//*(thisInfo->ucEqTbl+max_val3) = min_val3;
;;;1250   
;;;1251   						if(u_val != 127)
;;;1252   						{
;;;1253   							remap_index = u_val;
;;;1254   							while(remap_index != ucEqTbl[remap_index])
;;;1255   							{
;;;1256   								remap_index = ucEqTbl[remap_index];
;;;1257   								if(min_val3 < remap_index)
;;;1258   									ucEqTbl[remap_index] = min_val3;
;;;1259   							}
;;;1260   
;;;1261   							if( ucEqTbl[u_val] > min_val3 )
;;;1262   								ucEqTbl[u_val] = min_val3;
;;;1263   						}
;;;1264   						if(l_val != 127)
;;;1265   						{
;;;1266   							remap_index = l_val;
;;;1267   							while(remap_index != ucEqTbl[remap_index])
;;;1268   							{
;;;1269   								remap_index = ucEqTbl[remap_index];
;;;1270   								if(min_val3 < remap_index)
;;;1271   									ucEqTbl[remap_index] = min_val3;
;;;1272   							}
;;;1273   
;;;1274   							if( ucEqTbl[l_val] > min_val3 )
;;;1275   							    ucEqTbl[l_val] = min_val3;
;;;1276   						}
;;;1277   						if(ul_val != 127)
;;;1278   						{
;;;1279   							remap_index = ul_val;
;;;1280   							while(remap_index != ucEqTbl[remap_index])
;;;1281   							{
;;;1282   								remap_index = ucEqTbl[remap_index];
;;;1283   								if(min_val3 < remap_index)
;;;1284   									ucEqTbl[remap_index] = min_val3;
;;;1285   							}
;;;1286   
;;;1287   							if( ucEqTbl[ul_val] > min_val3 )
;;;1288   								ucEqTbl[ul_val] = min_val3;
;;;1289   						}
;;;1290   						if(ur_val != 127)
;;;1291   						{
;;;1292   							remap_index = ur_val;
;;;1293   							while(remap_index != ucEqTbl[remap_index])
;;;1294   							{
;;;1295   								remap_index = ucEqTbl[remap_index];
;;;1296   								if(min_val3 < remap_index)
;;;1297   									ucEqTbl[remap_index] = min_val3;
;;;1298   							}
;;;1299   
;;;1300   							if( ucEqTbl[ur_val] > min_val3 )
;;;1301   								ucEqTbl[ur_val] = min_val3;
;;;1302   						}
;;;1303   					}
;;;1304   					else
;;;1305   					{
;;;1306   						map_val = max_val3;
;;;1307   					}
;;;1308   				}
;;;1309   				else
;;;1310   				{
;;;1311   					if( label_num < (LOOSE_POSBUF_ + LABEL_MARGIN) )
;;;1312   					{
;;;1313   						label_num++;
;;;1314   					}
;;;1315   
;;;1316   					map_val = label_num;
;;;1317   					ucEqTbl[label_num] = label_num;
;;;1318   				}
;;;1319   			}
;;;1320   			else
;;;1321   			{
;;;1322   				map_val = 0;
000078  bfb8              IT       LT
00007a  2700              MOVLT    r7,#0
00007c  f2c0809e          BLT.W    |L7.444|
000080  980f              LDR      r0,[sp,#0x3c]         ;1201
000082  2800              CMP      r0,#0                 ;1201
000084  f000814e          BEQ.W    |L7.804|
000088  eb0a0002          ADD      r0,r10,r2             ;1209
00008c  f5003088          ADD      r0,r0,#0x11000        ;1209
000090  2a00              CMP      r2,#0                 ;1210
000092  f89085ec          LDRB     r8,[r0,#0x5ec]        ;1209
000096  bf08              IT       EQ                    ;1211
000098  2500              MOVEQ    r5,#0                 ;1211
00009a  d006              BEQ      |L7.170|
00009c  f89055eb          LDRB     r5,[r0,#0x5eb]        ;1213
0000a0  2a53              CMP      r2,#0x53              ;1215
0000a2  bf08              IT       EQ                    ;1216
0000a4  f04f0c00          MOVEQ    r12,#0                ;1216
0000a8  d005              BEQ      |L7.182|
                  |L7.170|
0000aa  f890c5ed          LDRB     r12,[r0,#0x5ed]       ;1218
                  |L7.174|
0000ae  2a00              CMP      r2,#0                 ;1221
0000b0  bf08              IT       EQ                    ;1222
0000b2  2600              MOVEQ    r6,#0                 ;1222
0000b4  d005              BEQ      |L7.194|
                  |L7.182|
0000b6  eb0a0002          ADD      r0,r10,r2             ;1224
0000ba  f5003088          ADD      r0,r0,#0x11000        ;1224
0000be  f890663f          LDRB     r6,[r0,#0x63f]        ;1224
                  |L7.194|
0000c2  42b5              CMP      r5,r6                 ;1231
0000c4  bf8c              ITE      HI                    ;1231
0000c6  4628              MOVHI    r0,r5                 ;1231
0000c8  4630              MOVLS    r0,r6                 ;1231
0000ca  45e0              CMP      r8,r12                ;1232
0000cc  bf8c              ITE      HI                    ;1232
0000ce  4647              MOVHI    r7,r8                 ;1232
0000d0  4667              MOVLS    r7,r12                ;1232
0000d2  42b8              CMP      r0,r7                 ;1233
0000d4  bf88              IT       HI                    ;1233
0000d6  4607              MOVHI    r7,r0                 ;1233
0000d8  2f00              CMP      r7,#0                 ;1235
0000da  f0008128          BEQ.W    |L7.814|
0000de  f1b80f00          CMP      r8,#0                 ;1237
0000e2  bf08              IT       EQ                    ;1237
0000e4  f04f087f          MOVEQ    r8,#0x7f              ;1237
0000e8  2e00              CMP      r6,#0                 ;1238
0000ea  bf08              IT       EQ                    ;1238
0000ec  267f              MOVEQ    r6,#0x7f              ;1238
0000ee  2d00              CMP      r5,#0                 ;1239
0000f0  bf08              IT       EQ                    ;1239
0000f2  257f              MOVEQ    r5,#0x7f              ;1239
0000f4  f1bc0f00          CMP      r12,#0                ;1240
0000f8  bf08              IT       EQ                    ;1240
0000fa  f04f0c7f          MOVEQ    r12,#0x7f             ;1240
0000fe  45b0              CMP      r8,r6                 ;1242
000100  bf8c              ITE      HI                    ;1242
000102  4631              MOVHI    r1,r6                 ;1242
000104  4641              MOVLS    r1,r8                 ;1242
000106  4565              CMP      r5,r12                ;1243
000108  bf8c              ITE      HI                    ;1243
00010a  4660              MOVHI    r0,r12                ;1243
00010c  4628              MOVLS    r0,r5                 ;1243
00010e  4281              CMP      r1,r0                 ;1244
000110  bf98              IT       LS                    ;1244
000112  4608              MOVLS    r0,r1                 ;1244
000114  42b8              CMP      r0,r7                 ;1246
000116  d051              BEQ      |L7.444|
000118  4607              MOV      r7,r0                 ;1248
00011a  f1b80f7f          CMP      r8,#0x7f              ;1251
00011e  d014              BEQ      |L7.330|
000120  4641              MOV      r1,r8                 ;1253
000122  f813e001          LDRB     lr,[r3,r1]            ;1254
000126  45c6              CMP      lr,r8                 ;1254
000128  d009              BEQ      |L7.318|
00012a  bf00              NOP                            ;1256
                  |L7.300|
00012c  f00e01ff          AND      r1,lr,#0xff           ;1256
000130  4288              CMP      r0,r1                 ;1257
000132  bf38              IT       CC                    ;1258
000134  5458              STRBCC   r0,[r3,r1]            ;1258
000136  f813e001          LDRB     lr,[r3,r1]            ;1258
00013a  458e              CMP      lr,r1                 ;1258
00013c  d1f6              BNE      |L7.300|
                  |L7.318|
00013e  f8131008          LDRB     r1,[r3,r8]            ;1261
000142  4281              CMP      r1,r0                 ;1261
000144  bf88              IT       HI                    ;1262
000146  f8030008          STRBHI   r0,[r3,r8]            ;1262
                  |L7.330|
00014a  2e7f              CMP      r6,#0x7f              ;1264
00014c  d011              BEQ      |L7.370|
00014e  4631              MOV      r1,r6                 ;1266
000150  f8138001          LDRB     r8,[r3,r1]            ;1267
000154  45b0              CMP      r8,r6                 ;1267
000156  d008              BEQ      |L7.362|
                  |L7.344|
000158  f00801ff          AND      r1,r8,#0xff           ;1269
00015c  4288              CMP      r0,r1                 ;1270
00015e  bf38              IT       CC                    ;1271
000160  5458              STRBCC   r0,[r3,r1]            ;1271
000162  f8138001          LDRB     r8,[r3,r1]            ;1271
000166  4588              CMP      r8,r1                 ;1271
000168  d1f6              BNE      |L7.344|
                  |L7.362|
00016a  5d99              LDRB     r1,[r3,r6]            ;1274
00016c  4281              CMP      r1,r0                 ;1274
00016e  bf88              IT       HI                    ;1275
000170  5598              STRBHI   r0,[r3,r6]            ;1275
                  |L7.370|
000172  2d7f              CMP      r5,#0x7f              ;1277
000174  d00e              BEQ      |L7.404|
000176  4629              MOV      r1,r5                 ;1279
000178  5c5e              LDRB     r6,[r3,r1]            ;1280
00017a  42ae              CMP      r6,r5                 ;1280
00017c  d006              BEQ      |L7.396|
                  |L7.382|
00017e  b2f1              UXTB     r1,r6                 ;1282
000180  4288              CMP      r0,r1                 ;1283
000182  bf38              IT       CC                    ;1284
000184  5458              STRBCC   r0,[r3,r1]            ;1284
000186  5c5e              LDRB     r6,[r3,r1]            ;1284
000188  428e              CMP      r6,r1                 ;1284
00018a  d1f8              BNE      |L7.382|
                  |L7.396|
00018c  5d59              LDRB     r1,[r3,r5]            ;1287
00018e  4281              CMP      r1,r0                 ;1287
000190  bf88              IT       HI                    ;1288
000192  5558              STRBHI   r0,[r3,r5]            ;1288
                  |L7.404|
000194  f1bc0f7f          CMP      r12,#0x7f             ;1290
000198  d010              BEQ      |L7.444|
00019a  4661              MOV      r1,r12                ;1292
00019c  5c5d              LDRB     r5,[r3,r1]            ;1293
00019e  4565              CMP      r5,r12                ;1293
0001a0  d006              BEQ      |L7.432|
                  |L7.418|
0001a2  b2e9              UXTB     r1,r5                 ;1295
0001a4  4288              CMP      r0,r1                 ;1296
0001a6  bf38              IT       CC                    ;1297
0001a8  5458              STRBCC   r0,[r3,r1]            ;1297
0001aa  5c5d              LDRB     r5,[r3,r1]            ;1297
0001ac  428d              CMP      r5,r1                 ;1297
0001ae  d1f8              BNE      |L7.418|
                  |L7.432|
0001b0  f813100c          LDRB     r1,[r3,r12]           ;1300
0001b4  4281              CMP      r1,r0                 ;1300
0001b6  bf88              IT       HI                    ;1301
0001b8  f803000c          STRBHI   r0,[r3,r12]           ;1301
                  |L7.444|
;;;1323   			}
;;;1324   			HAL_WRITE_LABEL_IMAGE(r, c, map_val);
0001bc  eb0a0002          ADD      r0,r10,r2
0001c0  f5003088          ADD      r0,r0,#0x11000
0001c4  1c52              ADDS     r2,r2,#1
0001c6  f8807640          STRB     r7,[r0,#0x640]
0001ca  4591              CMP      r9,r2
0001cc  f6bfaf4c          BGE      |L7.104|
                  |L7.464|
0001d0  980f              LDR      r0,[sp,#0x3c]
0001d2  991c              LDR      r1,[sp,#0x70]
0001d4  1c40              ADDS     r0,r0,#1
0001d6  900f              STR      r0,[sp,#0x3c]
0001d8  4281              CMP      r1,r0
0001da  f6bfaf35          BGE      |L7.72|
;;;1325   		}
;;;1326   	}
;;;1327   
;;;1328   	label_num = MIN( label_num, (LOOSE_POSBUF_ + LABEL_MARGIN) );
0001de  2c38              CMP      r4,#0x38
0001e0  bf24              ITT      CS
0001e2  2138              MOVCS    r1,#0x38
0001e4  460c              MOVCS    r4,r1
0001e6  d204              BCS      |L7.498|
;;;1329   
;;;1330   	if( label_num > 0 )
0001e8  2c00              CMP      r4,#0
;;;1331   	{
;;;1332   		// Stage2
;;;1333   		for (i=label_num; i>0; i--)
0001ea  bf18              IT       NE
0001ec  4621              MOVNE    r1,r4
0001ee  d07c              BEQ      |L7.746|
0001f0  dd0b              BLE      |L7.522|
                  |L7.498|
0001f2  466a              MOV      r2,sp                 ;1179
                  |L7.500|
;;;1334   		{
;;;1335   			eq_val = ucEqTbl[i];
0001f4  5c53              LDRB     r3,[r2,r1]
;;;1336   			if (eq_val != i)
0001f6  428b              CMP      r3,r1
0001f8  d004              BEQ      |L7.516|
                  |L7.506|
;;;1337   			{
;;;1338   				do
;;;1339   				{
;;;1340   					j = eq_val;
0001fa  4618              MOV      r0,r3
;;;1341   					eq_val = ucEqTbl[j];
0001fc  5c13              LDRB     r3,[r2,r0]
0001fe  4298              CMP      r0,r3
000200  d1fb              BNE      |L7.506|
;;;1342   				} while (j != eq_val);
;;;1343   				ucEqTbl[i] = eq_val;
000202  5453              STRB     r3,[r2,r1]
                  |L7.516|
000204  1e49              SUBS     r1,r1,#1
000206  2900              CMP      r1,#0
000208  dcf4              BGT      |L7.500|
                  |L7.522|
;;;1344   			}
;;;1345   		}
;;;1346   
;;;1347   		// Stage3
;;;1348   		label_max = 1;
00020a  2201              MOVS     r2,#1
;;;1349   		label_new = 1;
00020c  4694              MOV      r12,r2
;;;1350   		for (i=1; i<=label_num; i++)
00020e  2c00              CMP      r4,#0
000210  bf1c              ITT      NE
000212  466b              MOVNE    r3,sp
000214  1c58              ADDNE    r0,r3,#1
000216  d013              BEQ      |L7.576|
                  |L7.536|
;;;1351   		{
;;;1352   			eq_val = ucEqTbl[i];
000218  7801              LDRB     r1,[r0,#0]
;;;1353   			if (eq_val < label_max)
00021a  4291              CMP      r1,r2
;;;1354   			{
;;;1355   				ucEqTbl[i] = ucEqTbl[eq_val];
;;;1356   			}
;;;1357   			else if (eq_val > label_max)
;;;1358   			{
;;;1359   				label_new++;
;;;1360   				label_max = eq_val;
;;;1361   				ucEqTbl[i] = label_new;
;;;1362   			}
;;;1363   			else
;;;1364   			{
;;;1365   				ucEqTbl[i] = label_new;
00021c  bf08              IT       EQ
00021e  f880c000          STRBEQ   r12,[r0,#0]
000222  bf3c              ITT      CC                    ;1355
000224  5c59              LDRBCC   r1,[r3,r1]            ;1355
000226  7001              STRBCC   r1,[r0,#0]            ;1355
000228  d906              BLS      |L7.568|
00022a  f10c0201          ADD      r2,r12,#1             ;1359
00022e  f0020cff          AND      r12,r2,#0xff          ;1359
000232  460a              MOV      r2,r1                 ;1360
000234  f880c000          STRB     r12,[r0,#0]           ;1361
                  |L7.568|
000238  f1000001          ADD      r0,r0,#1              ;1361
00023c  1e64              SUBS     r4,r4,#1              ;1361
;;;1366   			}
00023e  d1eb              BNE      |L7.536|
                  |L7.576|
;;;1367   		}
;;;1368   
;;;1369   		// Stage4
;;;1370   		for (r = _tRect.rs; r <= _tRect.re; r++)
000240  9a19              LDR      r2,[sp,#0x64]
000242  981c              LDR      r0,[sp,#0x70]
000244  4290              CMP      r0,r2
000246  db62              BLT      |L7.782|
000248  f8dfe110          LDR      lr,|L7.860|
00024c  466f              MOV      r7,sp                 ;1179
00024e  f04f0800          MOV      r8,#0                 ;1179
                  |L7.594|
;;;1371   		{
;;;1372   			for (c = _tRect.cs; c <= _tRect.ce; c++)
000252  981e              LDR      r0,[sp,#0x78]
000254  4581              CMP      r9,r0
000256  db56              BLT      |L7.774|
000258  ebc201c2          RSB      r1,r2,r2,LSL #3       ;1196
00025c  eb010141          ADD      r1,r1,r1,LSL #1       ;1196
000260  eb0e0681          ADD      r6,lr,r1,LSL #2       ;1209
000264  eb0e0ac1          ADD      r10,lr,r1,LSL #3      ;1196
;;;1373   			{
;;;1374   				map_val  = HAL_READ_LABEL_IMAGE(r,c);
;;;1375   
;;;1376   				if( map_val > 0 )
;;;1377   				{
;;;1378   
;;;1379   					eq_val   = ucEqTbl[map_val];
;;;1380   
;;;1381   					if (map_val != 0 && eq_val <= (LOOSE_POSBUF_ + LABEL_MARGIN))
;;;1382   					{
;;;1383   						if(eq_val <= LOOSE_POSBUF_)
;;;1384   							map_data = eq_val;
;;;1385   						else
;;;1386   							map_data = LOOSE_POSBUF_;
;;;1387   					}
;;;1388   					else
;;;1389   					{
;;;1390   						map_data = 0;
;;;1391   					}
;;;1392   
;;;1393   					HAL_WRITE_LABEL_IMAGE(r, c, 0);
;;;1394   
;;;1395   					if( map_data > 0 )
;;;1396   					{
;;;1397   //						if(mode == LOCAL_FINGER_MODE)
;;;1398   //							delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;1399   //						else
;;;1400   							delta = HAL_READ_DELTA_IMAGE(r, c);
;;;1401   
;;;1402   						if( temp_label->tValidRect[map_data-1].cs > c )
;;;1403   							temp_label->tValidRect[map_data-1].cs = c;
;;;1404   						if( temp_label->tValidRect[map_data-1].ce < c )
;;;1405   							temp_label->tValidRect[map_data-1].ce = c;
;;;1406   						if( temp_label->tValidRect[map_data-1].rs > r )
;;;1407   							temp_label->tValidRect[map_data-1].rs = r;
;;;1408   						if( temp_label->tValidRect[map_data-1].re < r )
;;;1409   							temp_label->tValidRect[map_data-1].re = r;
;;;1410   
;;;1411   						if( temp_label->sValidMaxVal[map_data-1] < delta )
;;;1412   						{
;;;1413   							temp_label->sValidMaxVal[map_data-1] = delta;
;;;1414   
;;;1415   							temp_label->tValidMaxPos[map_data-1].r = r;
000268  fa4ffb82          SXTB     r11,r2
                  |L7.620|
00026c  1831              ADDS     r1,r6,r0              ;1374
00026e  f5013388          ADD      r3,r1,#0x11000        ;1374
000272  f8931640          LDRB     r1,[r3,#0x640]        ;1374
000276  b3c9              CBZ      r1,|L7.748|
000278  5c79              LDRB     r1,[r7,r1]            ;1379
00027a  2938              CMP      r1,#0x38              ;1381
00027c  bf88              IT       HI                    ;1390
00027e  2100              MOVHI    r1,#0                 ;1390
000280  d802              BHI      |L7.648|
000282  2910              CMP      r1,#0x10              ;1383
000284  bf88              IT       HI                    ;1386
000286  2110              MOVHI    r1,#0x10              ;1386
                  |L7.648|
000288  f8838640          STRB     r8,[r3,#0x640]        ;1393
00028c  b371              CBZ      r1,|L7.748|
00028e  eb0a0340          ADD      r3,r10,r0,LSL #1      ;1400
000292  f24f65c0          MOV      r5,#0xf6c0            ;1400
000296  5f5d              LDRSH    r5,[r3,r5]            ;1400
000298  9b16              LDR      r3,[sp,#0x58]         ;1403
00029a  eb030381          ADD      r3,r3,r1,LSL #2       ;1403
00029e  f9934270          LDRSB    r4,[r3,#0x270]        ;1403
0002a2  4284              CMP      r4,r0                 ;1403
0002a4  bfc8              IT       GT                    ;1403
0002a6  4604              MOVGT    r4,r0                 ;1403
0002a8  f8834270          STRB     r4,[r3,#0x270]        ;1403
0002ac  f9934271          LDRSB    r4,[r3,#0x271]        ;1405
0002b0  4284              CMP      r4,r0                 ;1405
0002b2  bfd8              IT       LE                    ;1405
0002b4  4604              MOVLE    r4,r0                 ;1405
0002b6  f8834271          STRB     r4,[r3,#0x271]        ;1405
0002ba  f993426e          LDRSB    r4,[r3,#0x26e]        ;1407
0002be  4294              CMP      r4,r2                 ;1407
0002c0  bfc8              IT       GT                    ;1407
0002c2  4614              MOVGT    r4,r2                 ;1407
0002c4  f883426e          STRB     r4,[r3,#0x26e]        ;1407
0002c8  f993426f          LDRSB    r4,[r3,#0x26f]        ;1409
0002cc  4294              CMP      r4,r2                 ;1409
0002ce  bfd8              IT       LE                    ;1409
0002d0  4614              MOVLE    r4,r2                 ;1409
0002d2  f883426f          STRB     r4,[r3,#0x26f]        ;1409
0002d6  9b16              LDR      r3,[sp,#0x58]         ;1411
0002d8  eb030141          ADD      r1,r3,r1,LSL #1       ;1411
0002dc  f9b132d0          LDRSH    r3,[r1,#0x2d0]        ;1411
0002e0  42ab              CMP      r3,r5                 ;1411
0002e2  da08              BGE      |L7.758|
0002e4  f8a152d0          STRH     r5,[r1,#0x2d0]        ;1413
0002e8  e001              B        |L7.750|
                  |L7.746|
0002ea  e027              B        |L7.828|
                  |L7.748|
0002ec  e008              B        |L7.768|
                  |L7.750|
0002ee  f881b2b1          STRB     r11,[r1,#0x2b1]
;;;1416   							temp_label->tValidMaxPos[map_data-1].c = c;
0002f2  f88102b0          STRB     r0,[r1,#0x2b0]
                  |L7.758|
;;;1417   						}
;;;1418   
;;;1419   
;;;1420   						temp_label->usValidCellCnt[map_data-1]++;
0002f6  f8b132f0          LDRH     r3,[r1,#0x2f0]
0002fa  1c5b              ADDS     r3,r3,#1
0002fc  f8a132f0          STRH     r3,[r1,#0x2f0]
                  |L7.768|
000300  1c40              ADDS     r0,r0,#1
000302  4581              CMP      r9,r0
000304  dab2              BGE      |L7.620|
                  |L7.774|
000306  981c              LDR      r0,[sp,#0x70]
000308  1c52              ADDS     r2,r2,#1
00030a  4290              CMP      r0,r2
00030c  daa1              BGE      |L7.594|
                  |L7.782|
;;;1421   					}
;;;1422   				}
;;;1423   			}
;;;1424   		}
;;;1425   
;;;1426   		temp_label->ucValidNum = MIN(label_new, LOOSE_POSBUF_);
00030e  f1bc0f10          CMP      r12,#0x10
000312  bf28              IT       CS
000314  f04f0c10          MOVCS    r12,#0x10
000318  9816              LDR      r0,[sp,#0x58]
00031a  f880c271          STRB     r12,[r0,#0x271]
;;;1427   	}
;;;1428   	else{
;;;1429   		temp_label->LabelSplitCnt = 0;
;;;1430   		temp_label->LabelSplitFrmCnt = 0;
;;;1431   		temp_label->LabelSplitMergeCnt = 0;
;;;1432   	}
;;;1433   }
00031e  b023              ADD      sp,sp,#0x8c
000320  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.804|
000324  f04f0800          MOV      r8,#0                 ;1203
000328  4645              MOV      r5,r8                 ;1204
00032a  46c4              MOV      r12,r8                ;1205
00032c  e6bf              B        |L7.174|
                  |L7.814|
00032e  2c38              CMP      r4,#0x38              ;1311
000330  bf3c              ITT      CC                    ;1313
000332  1c60              ADDCC    r0,r4,#1              ;1313
000334  b2c4              UXTBCC   r4,r0                 ;1313
000336  4627              MOV      r7,r4                 ;1316
000338  551c              STRB     r4,[r3,r4]            ;1317
00033a  e73f              B        |L7.444|
                  |L7.828|
00033c  9916              LDR      r1,[sp,#0x58]         ;1429
00033e  2000              MOVS     r0,#0                 ;1429
000340  f8c10313          STR      r0,[r1,#0x313]        ;1429
000344  9916              LDR      r1,[sp,#0x58]         ;1430
000346  f8c10319          STR      r0,[r1,#0x319]        ;1430
00034a  9916              LDR      r1,[sp,#0x58]         ;1431
00034c  f8a10317          STRH     r0,[r1,#0x317]        ;1431
000350  b023              ADD      sp,sp,#0x8c
000352  e8bd8ff0          POP      {r4-r11,pc}
;;;1434   #endif
                          ENDP

000356  0000              DCW      0x0000
                  |L7.856|
                          DCD      ||.data||
                  |L7.860|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Split||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split PROC
;;;1441   
;;;1442   void algorithm_label_Split(uint8_t _valid_area_idx, uint8_t _label_start_idx, int16_t _LowerThd, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1443   {
000004  b08d              SUB      sp,sp,#0x34
;;;1444       int16_t threshold = INT16_MAX; // for labeling
;;;1445       uint8_t label_num;
;;;1446       tConflictInfo_t tConflict;
;;;1447       tCell_t tPos;
;;;1448   
;;;1449       int16_t LabelNoiseThd = 0;
;;;1450       int16_t delta;
;;;1451       uint8_t rLabel_val;
;;;1452   
;;;1453   #if FAST_SPLIT		//original
;;;1454       bool_t sort_en = YES;
;;;1455   #else
;;;1456   	int16_t threshold_next = 0;
;;;1457   #endif
;;;1458       // About 3 groups can be eliminated after re-ordering if it is small unmatched group.
;;;1459       // Grouping Start
;;;1460       label_num = _label_start_idx;
;;;1461   
;;;1462       threshold = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
000006  f8df830c          LDR      r8,|L8.788|
00000a  9105              STR      r1,[sp,#0x14]
00000c  4682              MOV      r10,r0                ;1443
00000e  f8d80008          LDR      r0,[r8,#8]  ; thisInfo
;;;1463   
;;;1464   //    algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1465   
;;;1466   //    if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usMediumNodeCnt )
;;;1467   //    {
;;;1468   //    	LabelNoiseThd = thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd;
;;;1469   ////    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1470   //    }
;;;1471   //    else if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usSmallNodeCnt )
;;;1472   //    {
;;;1473   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1474   //    }
;;;1475   //    else
;;;1476   //    {
;;;1477   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/10), 5);
;;;1478   //    }
;;;1479   
;;;1480   	LabelNoiseThd = thisModeConf->Label.ucLabelNoiseThd;
000012  f8d81004          LDR      r1,[r8,#4]  ; thisModeConf
000016  eb00004a          ADD      r0,r0,r10,LSL #1      ;1462
00001a  4615              MOV      r5,r2                 ;1443
00001c  f8919067          LDRB     r9,[r1,#0x67]
;;;1481   
;;;1482   #if FAST_SPLIT		//original
;;;1483   	int i,ii;
;;;1484       if(sort_en == YES)
;;;1485       {
;;;1486       	int valid_sort_num;
;;;1487       	int temp_data;
;;;1488       	int max_pos;
;;;1489   		int comp_val;
;;;1490   		int split_num = 0;
;;;1491   		int split_num_first = 0;
;;;1492   		int split_start_num;
;;;1493       	tCell_t temp_pos;
;;;1494   
;;;1495   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
000020  f99022f7          LDRSB    r2,[r0,#0x2f7]
000024  49bc              LDR      r1,|L8.792|
;;;1496   		{
;;;1497   			tConflict.ulValue = 0;
;;;1498   
;;;1499   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1500   
;;;1501   			if( tConflict.tInfo.NUM == 0 && split_num_first < MAX_SPLIT_NUM-1)
;;;1502   			{
;;;1503   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1504   				split_buf[split_num_first] = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
000026  4fbe              LDR      r7,|L8.800|
000028  440a              ADD      r2,r2,r1              ;1495
00002a  f99012f8          LDRSB    r1,[r0,#0x2f8]        ;1495
00002e  f9b0b317          LDRSH    r11,[r0,#0x317]       ;1462
000032  ebc101c1          RSB      r1,r1,r1,LSL #3       ;1495
000036  eb010341          ADD      r3,r1,r1,LSL #1       ;1495
00003a  49b8              LDR      r1,|L8.796|
00003c  2400              MOVS     r4,#0                 ;1491
00003e  eb010183          ADD      r1,r1,r3,LSL #2       ;1495
;;;1505   				split_pos[split_num_first] = thisInfo->tLabel.tValidMaxPos[_valid_area_idx];
000042  f10706c8          ADD      r6,r7,#0xc8
000046  5c51              LDRB     r1,[r2,r1]            ;1495
000048  bb71              CBNZ     r1,|L8.168|
00004a  2100              MOVS     r1,#0                 ;1497
00004c  9107              STR      r1,[sp,#0x1c]         ;1499
00004e  9a10              LDR      r2,[sp,#0x40]         ;1499
000050  a907              ADD      r1,sp,#0x1c           ;1499
000052  e9cd1200          STRD     r1,r2,[sp,#0]         ;1499
000056  f8b002f7          LDRH     r0,[r0,#0x2f7]        ;1499
00005a  f8ad0024          STRH     r0,[sp,#0x24]         ;1499
00005e  2200              MOVS     r2,#0                 ;1499
000060  2108              MOVS     r1,#8                 ;1499
000062  2001              MOVS     r0,#1                 ;1499
000064  9b09              LDR      r3,[sp,#0x24]         ;1499
000066  f7fffffe          BL       algorithm_label_GetConflictInfo
00006a  f89d001e          LDRB     r0,[sp,#0x1e]         ;1501
00006e  b9d8              CBNZ     r0,|L8.168|
000070  9810              LDR      r0,[sp,#0x40]         ;1503
000072  9000              STR      r0,[sp,#0]            ;1503
000074  f8d80008          LDR      r0,[r8,#8]            ;1503  ; thisInfo
000078  2301              MOVS     r3,#1                 ;1503
00007a  eb00004a          ADD      r0,r0,r10,LSL #1      ;1503
00007e  f9b02317          LDRSH    r2,[r0,#0x317]        ;1503
000082  f8b002f7          LDRH     r0,[r0,#0x2f7]        ;1503
000086  f8ad0010          STRH     r0,[sp,#0x10]         ;1503
00008a  e9dd1004          LDRD     r1,r0,[sp,#0x10]      ;1503
00008e  f7fffffe          BL       algorithm_label_Insert_NewRecord_to_LabelTable
000092  f8d80008          LDR      r0,[r8,#8]            ;1504  ; thisInfo
;;;1506   				split_num_first++;
000096  2401              MOVS     r4,#1
000098  eb00004a          ADD      r0,r0,r10,LSL #1      ;1504
00009c  f8901317          LDRB     r1,[r0,#0x317]        ;1504
0000a0  7039              STRB     r1,[r7,#0]            ;1504
0000a2  f8b002f7          LDRH     r0,[r0,#0x2f7]        ;1505
0000a6  8030              STRH     r0,[r6,#0]            ;1505
                  |L8.168|
;;;1507   			}
;;;1508   		}
;;;1509   		split_start_num = split_num_first;
;;;1510   	
;;;1511   		comp_val = (threshold - LabelNoiseThd);
;;;1512       	split_num = MAX_SPLIT_NUM-1;
;;;1513   
;;;1514   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
0000a8  489a              LDR      r0,|L8.788|
0000aa  940a              STR      r4,[sp,#0x28]
0000ac  21c7              MOVS     r1,#0xc7              ;1512
0000ae  f8d0e008          LDR      lr,[r0,#8]  ; thisInfo
0000b2  ebab0909          SUB      r9,r11,r9             ;1511
0000b6  eb0e008a          ADD      r0,lr,r10,LSL #2
0000ba  f99022b7          LDRSB    r2,[r0,#0x2b7]
0000be  f88d2009          STRB     r2,[sp,#9]
0000c2  f99002b8          LDRSB    r0,[r0,#0x2b8]
0000c6  4282              CMP      r2,r0
0000c8  bfdc              ITT      LE                    ;1495
0000ca  f8df824c          LDRLE    r8,|L8.792|
;;;1515   		{
;;;1516   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
0000ce  eb0e038a          ADDLE    r3,lr,r10,LSL #2
0000d2  dc53              BGT      |L8.380|
                  |L8.212|
0000d4  f99302b9          LDRSB    r0,[r3,#0x2b9]
0000d8  f88d0008          STRB     r0,[sp,#8]
0000dc  f99322ba          LDRSB    r2,[r3,#0x2ba]
0000e0  4290              CMP      r0,r2
0000e2  dc41              BGT      |L8.360|
0000e4  f99d0009          LDRSB    r0,[sp,#9]
0000e8  4a8c              LDR      r2,|L8.796|
;;;1517   			{
;;;1518   //				if(mode == LOCAL_FINGER_MODE)
;;;1519   //				{
;;;1520   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1521   //				}
;;;1522   //				else
;;;1523   				{
;;;1524   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
0000ea  ebc000c0          RSB      r0,r0,r0,LSL #3
0000ee  eb000040          ADD      r0,r0,r0,LSL #1
0000f2  eb080bc0          ADD      r11,r8,r0,LSL #3
;;;1525   				}
;;;1526   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
0000f6  eb020a80          ADD      r10,r2,r0,LSL #2
0000fa  bf00              NOP                            ;1524
                  |L8.252|
0000fc  f99dc008          LDRSB    r12,[sp,#8]           ;1524
000100  eb0b004c          ADD      r0,r11,r12,LSL #1     ;1524
000104  f5004070          ADD      r0,r0,#0xf000         ;1524
000108  eb0c0208          ADD      r2,r12,r8
00010c  f9b006c0          LDRSH    r0,[r0,#0x6c0]        ;1524
000110  f812200a          LDRB     r2,[r2,r10]
;;;1527   
;;;1528   				if(delta >= comp_val && rLabel_val == 0 && split_num_first < MAX_SPLIT_NUM-1)
000114  4548              CMP      r0,r9
000116  bfa8              IT       GE
000118  2a00              CMPGE    r2,#0
00011a  d109              BNE      |L8.304|
00011c  2cc7              CMP      r4,#0xc7
00011e  da07              BGE      |L8.304|
;;;1529   				{
;;;1530   					split_buf[split_num_first] = delta;
000120  5538              STRB     r0,[r7,r4]
;;;1531   					split_pos[split_num_first] = tPos;
000122  eb060044          ADD      r0,r6,r4,LSL #1
000126  f8bd2008          LDRH     r2,[sp,#8]
00012a  8002              STRH     r2,[r0,#0]
00012c  1c64              ADDS     r4,r4,#1
;;;1532   					split_num_first++;
00012e  e012              B        |L8.342|
                  |L8.304|
;;;1533   				}
;;;1534   				else if(delta >= _LowerThd && rLabel_val == 0)
000130  4285              CMP      r5,r0
000132  bfd8              IT       LE
000134  2a00              CMPLE    r2,#0
000136  d10e              BNE      |L8.342|
;;;1535   				{
;;;1536   					split_buf[split_num] = delta;
000138  5478              STRB     r0,[r7,r1]
;;;1537   					split_pos[split_num] = tPos;
00013a  eb060041          ADD      r0,r6,r1,LSL #1
00013e  f8bd2008          LDRH     r2,[sp,#8]
000142  f1a10101          SUB      r1,r1,#1
000146  8002              STRH     r2,[r0,#0]
;;;1538   					split_num--;
;;;1539   					if(split_num < split_num_first)
000148  42a1              CMP      r1,r4
00014a  da04              BGE      |L8.342|
;;;1540   					{
;;;1541   						tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].re;
00014c  f89302b8          LDRB     r0,[r3,#0x2b8]
000150  f88d0009          STRB     r0,[sp,#9]
;;;1542   						break;
000154  e008              B        |L8.360|
                  |L8.342|
000156  f10c0001          ADD      r0,r12,#1
00015a  b240              SXTB     r0,r0
00015c  f88d0008          STRB     r0,[sp,#8]
000160  f99322ba          LDRSB    r2,[r3,#0x2ba]
000164  4290              CMP      r0,r2
000166  ddc9              BLE      |L8.252|
                  |L8.360|
000168  f89d0009          LDRB     r0,[sp,#9]
00016c  1c40              ADDS     r0,r0,#1
00016e  b240              SXTB     r0,r0
000170  f88d0009          STRB     r0,[sp,#9]
000174  f99322b8          LDRSB    r2,[r3,#0x2b8]
000178  4290              CMP      r0,r2
00017a  ddab              BLE      |L8.212|
                  |L8.380|
;;;1543   					}
;;;1544   				}
;;;1545   			}
;;;1546   		}
;;;1547   		
;;;1548   		valid_sort_num = MAX_SPLIT_NUM - 1 - split_num + split_num_first;
00017c  f1c100c7          RSB      r0,r1,#0xc7
000180  1905              ADDS     r5,r0,r4
;;;1549   		
;;;1550   		if(valid_sort_num < MAX_SPLIT_NUM)
000182  2dc8              CMP      r5,#0xc8
;;;1551   		{
;;;1552   			for(i=split_num_first; i<valid_sort_num; i++)
;;;1553   			{
;;;1554   				split_num++;
;;;1555   				split_buf[i] = split_buf[split_num];
;;;1556   				split_pos[i] = split_pos[split_num];
;;;1557   			}
;;;1558   
;;;1559   			for(i=split_num_first; i<valid_sort_num-1; i++)
;;;1560   			{
;;;1561   				temp_data = split_buf[i];
;;;1562   				max_pos = i;
;;;1563   				for(ii=i+1; ii<valid_sort_num; ii++)
;;;1564   				{
;;;1565   					if(temp_data < split_buf[ii])
;;;1566   						max_pos = ii, temp_data = split_buf[ii];
;;;1567   				}
;;;1568   				split_buf[max_pos] = split_buf[i];
;;;1569   				split_buf[i] = temp_data;
;;;1570   				temp_pos = split_pos[max_pos];
;;;1571   				split_pos[max_pos] = split_pos[i];
;;;1572   				split_pos[i] = temp_pos;
;;;1573   			}
;;;1574   
;;;1575   			label_num = thisInfo->tLabel.ucNum;
;;;1576   			for(i=split_start_num; i<valid_sort_num; i++)
;;;1577   			{
;;;1578   				rLabel_val = HAL_READ_LABEL_IMAGE(split_pos[i].r, split_pos[i].c);
;;;1579   
;;;1580   				if (rLabel_val == 0)
;;;1581   				{
;;;1582   					tConflict.tInfo.SET = NO;
;;;1583   					tConflict.tInfo.NUM = 0;
;;;1584   					tConflict.tInfo.BF  = 0;
;;;1585   
;;;1586   					algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, split_pos[i], &tConflict, mode);
;;;1587   
;;;1588   					if( tConflict.tInfo.NUM == 0 )
;;;1589   					{
;;;1590   						if( label_num < LOOSE_POSBUF_ )
;;;1591   						{
;;;1592   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, split_pos[i], split_buf[i], YES, mode);
;;;1593   
;;;1594   							label_num++;
;;;1595   						}
;;;1596   					}
;;;1597   				}
;;;1598   			}
;;;1599   		}
;;;1600       }
;;;1601       else
;;;1602       {
;;;1603   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1604   		{
;;;1605   			tConflict.ulValue = 0;
;;;1606   
;;;1607   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1608   
;;;1609   			if( tConflict.tInfo.NUM == 0 )
;;;1610   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1611   		}
;;;1612   
;;;1613   		// process prev linked-list
;;;1614   		label_num = thisInfo->tLabel.ucNum;
;;;1615   
;;;1616   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1617   		{
;;;1618   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1619   			{
;;;1620   //				if(mode == LOCAL_FINGER_MODE)
;;;1621   //				{
;;;1622   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1623   //				}
;;;1624   //				else
;;;1625   				{
;;;1626   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1627   				}
;;;1628   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1629   
;;;1630   				if ((delta >= _LowerThd) && (rLabel_val == 0))
;;;1631   				{
;;;1632   					tConflict.tInfo.SET = NO;
;;;1633   					tConflict.tInfo.NUM = 0;
;;;1634   					tConflict.tInfo.BF  = 0;
;;;1635   
;;;1636   					algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1637   
;;;1638   					if( tConflict.tInfo.NUM == 0 )
;;;1639   					{
;;;1640   						if( label_num < LOOSE_POSBUF_ )
;;;1641   						{
;;;1642   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1643   
;;;1644   							label_num++;
;;;1645   						}
;;;1646   					}
;;;1647   				}
;;;1648   			}
;;;1649   		}
;;;1650       }
;;;1651   #else
;;;1652   	uint8_t SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
;;;1653   	if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1654   	{
;;;1655   		tConflict.ulValue = 0;
;;;1656   
;;;1657   		if(thisModeConf->Label.bSplitSearchDirc_4_On)SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
;;;1658   		
;;;1659   		algorithm_label_GetConflictInfo(YES, SearchDirc, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1660   
;;;1661   		if( tConflict.tInfo.NUM == 0 )
;;;1662   			algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1663   	}
;;;1664   
;;;1665   	thisInfo->tLabel.LabelSplitMergeCnt = 0;
;;;1666   
;;;1667       do
;;;1668       {
;;;1669       	threshold = MAX((threshold - LabelNoiseThd), _LowerThd);
;;;1670   
;;;1671       	// process prev linked-list
;;;1672       	label_num = thisInfo->tLabel.ucNum;
;;;1673   
;;;1674   		threshold_next = 0;
;;;1675   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1676   		{
;;;1677   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1678   			{
;;;1679   //				if(mode == LOCAL_FINGER_MODE)
;;;1680   //				{
;;;1681   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1682   //				}
;;;1683   //				else
;;;1684   				{
;;;1685   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1686   				}					
;;;1687   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1688   
;;;1689   				if ((delta >= threshold) && (rLabel_val == 0))
;;;1690   				{
;;;1691   					tConflict.tInfo.SET = NO;
;;;1692   					tConflict.tInfo.NUM = 0;
;;;1693   					tConflict.tInfo.BF  = 0;
;;;1694   
;;;1695   					if(thisModeConf->Label.bSplitSearchDirc_4_On)
;;;1696   					{
;;;1697   						if(thisInfo->DrawingDirection == 1 || thisInfo->DrawingDirection == 2)SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
;;;1698   						else SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
;;;1699   					}
;;;1700   						
;;;1701   					algorithm_label_GetConflictInfo(YES, SearchDirc, 0, tPos, &tConflict, mode);
;;;1702   	
;;;1703   					if( tConflict.tInfo.NUM == 0 )
;;;1704   					{
;;;1705   						thisInfo->tLabel.LabelSplitMergeCnt++;
;;;1706   						if(thisInfo->TouchNumCnt > thisModeConf->Coord.ucTouchCountMax && label_num >= thisInfo->tCoord.tOrgPastPos[0].sFinger_)	continue;
;;;1707   						
;;;1708   						if( label_num < LOOSE_POSBUF_ )
;;;1709   						{
;;;1710   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1711   
;;;1712   							label_num++;
;;;1713   						}
;;;1714   					}
;;;1715   				}
;;;1716   				else if( delta < threshold )
;;;1717   				{
;;;1718   					if( threshold_next < delta )
;;;1719   					{
;;;1720   						threshold_next = delta;
;;;1721   					}
;;;1722   				}
;;;1723   			}
;;;1724   		}
;;;1725   
;;;1726   		//if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallTouchThd/*thisModeConf->Label.usLargeTouchThd*/ )
;;;1727   		{
;;;1728   			LabelNoiseThd = (threshold - threshold_next);
;;;1729   		}
;;;1730       } while (threshold > _LowerThd);
;;;1731   #endif
;;;1732   }
000184  bfa4              ITT      GE
000186  b011              ADDGE    sp,sp,#0x44
000188  e8bd8ff0          POPGE    {r4-r11,pc}
00018c  1b2a              SUBS     r2,r5,r4              ;1552
00018e  2a00              CMP      r2,#0                 ;1552
000190  dd1a              BLE      |L8.456|
000192  1878              ADDS     r0,r7,r1              ;1552
000194  eb060141          ADD      r1,r6,r1,LSL #1       ;1552
000198  1c43              ADDS     r3,r0,#1              ;1552
00019a  f1010c02          ADD      r12,r1,#2             ;1552
00019e  eb060044          ADD      r0,r6,r4,LSL #1       ;1552
0001a2  f1010903          ADD      r9,r1,#3              ;1552
0001a6  eb070804          ADD      r8,r7,r4              ;1552
0001aa  1c41              ADDS     r1,r0,#1              ;1552
                  |L8.428|
0001ac  f813ab01          LDRB     r10,[r3],#1           ;1555
0001b0  f808ab01          STRB     r10,[r8],#1           ;1555
0001b4  f81cab02          LDRB     r10,[r12],#2          ;1556
0001b8  f800ab02          STRB     r10,[r0],#2           ;1556
0001bc  f819ab02          LDRB     r10,[r9],#2           ;1556
0001c0  f801ab02          STRB     r10,[r1],#2           ;1556
0001c4  1e52              SUBS     r2,r2,#1              ;1556
0001c6  d1f1              BNE      |L8.428|
                  |L8.456|
0001c8  f1a50a01          SUB      r10,r5,#1             ;1559
0001cc  45a2              CMP      r10,r4                ;1559
0001ce  dd29              BLE      |L8.548|
                  |L8.464|
0001d0  4621              MOV      r1,r4                 ;1563
0001d2  5d38              LDRB     r0,[r7,r4]            ;1561
0001d4  eba50c01          SUB      r12,r5,r1             ;1563
0001d8  f1ac0201          SUB      r2,r12,#1             ;1563
0001dc  4681              MOV      r9,r0                 ;1561
0001de  2a00              CMP      r2,#0                 ;1563
0001e0  dd10              BLE      |L8.516|
0001e2  193a              ADDS     r2,r7,r4              ;1563
0001e4  2300              MOVS     r3,#0                 ;1563
0001e6  1c52              ADDS     r2,r2,#1              ;1563
0001e8  f1ac0c01          SUB      r12,r12,#1            ;1563
                  |L8.492|
0001ec  f8928000          LDRB     r8,[r2,#0]            ;1565
0001f0  4580              CMP      r8,r0                 ;1565
0001f2  dd02              BLE      |L8.506|
0001f4  18e0              ADDS     r0,r4,r3              ;1566
0001f6  1c41              ADDS     r1,r0,#1              ;1566
0001f8  4640              MOV      r0,r8                 ;1566
                  |L8.506|
0001fa  1c52              ADDS     r2,r2,#1              ;1566
0001fc  1c5b              ADDS     r3,r3,#1              ;1566
0001fe  f1bc0c01          SUBS     r12,r12,#1            ;1566
000202  d1f3              BNE      |L8.492|
                  |L8.516|
000204  f8079001          STRB     r9,[r7,r1]            ;1568
000208  5538              STRB     r0,[r7,r4]            ;1569
00020a  eb060141          ADD      r1,r6,r1,LSL #1       ;1570
00020e  eb060244          ADD      r2,r6,r4,LSL #1       ;1571
000212  8808              LDRH     r0,[r1,#0]            ;1570
000214  f8ad0000          STRH     r0,[sp,#0]            ;1570
000218  8813              LDRH     r3,[r2,#0]            ;1571
00021a  800b              STRH     r3,[r1,#0]            ;1571
00021c  1c64              ADDS     r4,r4,#1              ;1572
00021e  8010              STRH     r0,[r2,#0]            ;1572
000220  45a2              CMP      r10,r4                ;1572
000222  dcd5              BGT      |L8.464|
                  |L8.548|
000224  9c0a              LDR      r4,[sp,#0x28]         ;1576
000226  f89e8045          LDRB     r8,[lr,#0x45]         ;1575
00022a  42a5              CMP      r5,r4                 ;1576
00022c  bfdc              ITT      LE
00022e  b011              ADDLE    sp,sp,#0x44
000230  e8bd8ff0          POPLE    {r4-r11,pc}
000234  f04f0b00          MOV      r11,#0
000238  f8dfa0dc          LDR      r10,|L8.792|
00023c  f8df90dc          LDR      r9,|L8.796|
                  |L8.576|
000240  eb060744          ADD      r7,r6,r4,LSL #1       ;1578
000244  f9970000          LDRSB    r0,[r7,#0]            ;1578
000248  eb00010a          ADD      r1,r0,r10             ;1578
00024c  f9970001          LDRSB    r0,[r7,#1]            ;1578
000250  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1578
000254  eb000040          ADD      r0,r0,r0,LSL #1       ;1578
000258  eb090080          ADD      r0,r9,r0,LSL #2       ;1578
00025c  5c08              LDRB     r0,[r1,r0]            ;1578
00025e  2800              CMP      r0,#0                 ;1580
000260  d151              BNE      |L8.774|
000262  f89d001f          LDRB     r0,[sp,#0x1f]         ;1582
000266  9910              LDR      r1,[sp,#0x40]         ;1586
000268  f0200080          BIC      r0,r0,#0x80           ;1582
00026c  f88d001f          STRB     r0,[sp,#0x1f]         ;1582
000270  a807              ADD      r0,sp,#0x1c           ;1586
000272  f88db01e          STRB     r11,[sp,#0x1e]        ;1583
000276  e9cd0100          STRD     r0,r1,[sp,#0]         ;1586
00027a  f8adb01c          STRH     r11,[sp,#0x1c]        ;1584
00027e  8838              LDRH     r0,[r7,#0]            ;1586
000280  f8ad0018          STRH     r0,[sp,#0x18]         ;1586
000284  2200              MOVS     r2,#0                 ;1586
000286  2108              MOVS     r1,#8                 ;1586
000288  2001              MOVS     r0,#1                 ;1586
00028a  9b06              LDR      r3,[sp,#0x18]         ;1586
00028c  f7fffffe          BL       algorithm_label_GetConflictInfo
000290  f89d001e          LDRB     r0,[sp,#0x1e]         ;1588
000294  bbb8              CBNZ     r0,|L8.774|
000296  f1b80f10          CMP      r8,#0x10              ;1590
00029a  d234              BCS      |L8.774|
00029c  4820              LDR      r0,|L8.800|
00029e  883b              LDRH     r3,[r7,#0]            ;1592
0002a0  f8ad3018          STRH     r3,[sp,#0x18]         ;1592
0002a4  5d01              LDRB     r1,[r0,r4]            ;1592
0002a6  481b              LDR      r0,|L8.788|
0002a8  f1080c01          ADD      r12,r8,#1             ;1592
0002ac  6882              LDR      r2,[r0,#8]            ;1592  ; thisInfo
0002ae  ebc800c8          RSB      r0,r8,r8,LSL #3       ;1592
0002b2  eb001048          ADD      r0,r0,r8,LSL #5       ;1592
0002b6  3245              ADDS     r2,r2,#0x45           ;1592
0002b8  4410              ADD      r0,r0,r2              ;1592
0002ba  f880c001          STRB     r12,[r0,#1]           ;1592
0002be  8101              STRH     r1,[r0,#8]            ;1592
0002c0  8143              STRH     r3,[r0,#0xa]          ;1592
0002c2  f99d7019          LDRSB    r7,[sp,#0x19]         ;1592
0002c6  7087              STRB     r7,[r0,#2]            ;1592
0002c8  70c7              STRB     r7,[r0,#3]            ;1592
0002ca  f99d3018          LDRSB    r3,[sp,#0x18]         ;1592
0002ce  7103              STRB     r3,[r0,#4]            ;1592
0002d0  7143              STRB     r3,[r0,#5]            ;1592
0002d2  fb03f801          MUL      r8,r3,r1              ;1592
0002d6  f8c0800c          STR      r8,[r0,#0xc]          ;1592
0002da  fb07f801          MUL      r8,r7,r1              ;1592
0002de  f8c08010          STR      r8,[r0,#0x10]         ;1592
0002e2  6141              STR      r1,[r0,#0x14]         ;1592
0002e4  6181              STR      r1,[r0,#0x18]         ;1592
0002e6  2101              MOVS     r1,#1                 ;1592
0002e8  80c1              STRH     r1,[r0,#6]            ;1592
0002ea  ebc701c7          RSB      r1,r7,r7,LSL #3       ;1592
0002ee  eb010141          ADD      r1,r1,r1,LSL #1       ;1592
0002f2  4453              ADD      r3,r3,r10             ;1592
0002f4  eb090181          ADD      r1,r9,r1,LSL #2       ;1592
0002f8  7840              LDRB     r0,[r0,#1]            ;1592
0002fa  5458              STRB     r0,[r3,r1]            ;1592
0002fc  7810              LDRB     r0,[r2,#0]            ;1592
0002fe  f00c08ff          AND      r8,r12,#0xff          ;1594
000302  1c40              ADDS     r0,r0,#1              ;1594
000304  7010              STRB     r0,[r2,#0]            ;1594
                  |L8.774|
000306  1c64              ADDS     r4,r4,#1              ;1594
000308  42ac              CMP      r4,r5                 ;1594
00030a  db99              BLT      |L8.576|
00030c  b011              ADD      sp,sp,#0x44
00030e  e8bd8ff0          POP      {r4-r11,pc}
;;;1733   
                          ENDP

000312  0000              DCW      0x0000
                  |L8.788|
                          DCD      ||.data||
                  |L8.792|
                          DCD      FullSharedBuff
                  |L8.796|
                          DCD      0x00011640
                  |L8.800|
                          DCD      ||.bss||+0x32

                          AREA ||i.algorithm_label_SplitNMerge_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_SplitNMerge_process PROC
;;;2293   
;;;2294   void algorithm_label_SplitNMerge_process(int mode)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;2295   {
;;;2296   	uint8_t valid_area_idx, label_start_idx;
;;;2297   	uint16_t usLabelThd;
;;;2298   
;;;2299   	tOrigDeltaInfo_t	*temp_delta;
;;;2300   	tLabelInfo_t 		*temp_label;
;;;2301   
;;;2302   	temp_delta = &thisInfo->tDelta;
000004  4c79              LDR      r4,|L9.492|
000006  b094              SUB      sp,sp,#0x50           ;2295
000008  68a0              LDR      r0,[r4,#8]  ; thisInfo
00000a  f100010d          ADD      r1,r0,#0xd
00000e  3045              ADDS     r0,r0,#0x45
;;;2303   	temp_label = &thisInfo->tLabel;
;;;2304   	
;;;2305   	
;;;2306   #if ADAPTIVE_SEEDBASE
;;;2307   	int16_t AdaptiveSeedBase = 0;
;;;2308   	
;;;2309   	if(thisInfo->bIsPalm){
;;;2310   		AdaptiveSeedBase = thisModeConf->Label.usSeedBase - (temp_delta->iPosCnt>>4);
;;;2311   		if(AdaptiveSeedBase < (thisModeConf->Label.usSeedBase>>1))
;;;2312   			AdaptiveSeedBase = (thisModeConf->Label.usSeedBase>>1);
;;;2313   	}
;;;2314   	else					
;;;2315   		AdaptiveSeedBase = thisModeConf->Label.usSeedBase;
;;;2316   	
;;;2317   	usLabelThd  = AdaptiveSeedBase;
;;;2318   	usLabelThd += ((temp_delta->iMaxStrength - AdaptiveSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
;;;2319   #else			
;;;2320   	usLabelThd  = thisModeConf->Label.usSeedBase;
000010  900e              STR      r0,[sp,#0x38]
000012  6862              LDR      r2,[r4,#4]  ; thisModeConf
;;;2321   	usLabelThd += ((temp_delta->iMaxStrength - thisModeConf->Label.usSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
000014  688b              LDR      r3,[r1,#8]
000016  f8b20064          LDRH     r0,[r2,#0x64]         ;2320
00001a  f8922066          LDRB     r2,[r2,#0x66]
00001e  1a1b              SUBS     r3,r3,r0
000020  435a              MULS     r2,r3,r2
000022  eb0013a2          ADD      r3,r0,r2,ASR #6
;;;2322   #endif		
;;;2323   
;;;2324   			
;;;2325   #if LABEL_FAST_EN	
;;;2326   	algorithm_label_SearchValidArea_Fast(temp_delta->tValidRect, usLabelThd, mode);
;;;2327   #else
;;;2328   	algorithm_label_SearchValidArea(temp_delta->tValidRect, usLabelThd, mode);
000026  6808              LDR      r0,[r1,#0]
000028  b219              SXTH     r1,r3
00002a  9a14              LDR      r2,[sp,#0x50]
00002c  910f              STR      r1,[sp,#0x3c]
00002e  f7fffffe          BL       algorithm_label_SearchValidArea
;;;2329   #endif
;;;2330   			
;;;2331   	if(thisModeConf->Palm.ucPalmDetectionOn == 2 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 1))
000032  6860              LDR      r0,[r4,#4]  ; thisModeConf
000034  f8901200          LDRB     r1,[r0,#0x200]
000038  2902              CMP      r1,#2
00003a  d009              BEQ      |L9.80|
00003c  4620              MOV      r0,r4
00003e  2903              CMP      r1,#3
000040  d109              BNE      |L9.86|
000042  6880              LDR      r0,[r0,#8]  ; thisInfo
000044  f5005080          ADD      r0,r0,#0x1000
000048  f89002a6          LDRB     r0,[r0,#0x2a6]
00004c  2801              CMP      r0,#1
00004e  d102              BNE      |L9.86|
                  |L9.80|
;;;2332   		algorithm_label_palm_rejection(mode);
000050  9814              LDR      r0,[sp,#0x50]
000052  f7fffffe          BL       algorithm_label_palm_rejection
                  |L9.86|
;;;2333   			
;;;2334   	for( valid_area_idx=0; valid_area_idx<temp_label->ucValidNum; valid_area_idx++ )
000056  2000              MOVS     r0,#0
000058  9009              STR      r0,[sp,#0x24]
00005a  980e              LDR      r0,[sp,#0x38]
00005c  f8900271          LDRB     r0,[r0,#0x271]
000060  2800              CMP      r0,#0
000062  bf88              IT       HI                    ;2331
000064  f04f0901          MOVHI    r9,#1                 ;2331
000068  d96c              BLS      |L9.324|
                  |L9.106|
;;;2335   	{
;;;2336   		label_start_idx = temp_label->ucNum;
00006a  980e              LDR      r0,[sp,#0x38]
;;;2337   		
;;;2338   	#ifdef SHORT_COMPENSATION			
;;;2339   		algorithm_label_Delta_Compensation(valid_area_idx, label_start_idx, usLabelThd);
;;;2340   	#endif	
;;;2341   		
;;;2342   		algorithm_label_Split(valid_area_idx, label_start_idx, usLabelThd, mode);
00006c  9b14              LDR      r3,[sp,#0x50]
00006e  9a0f              LDR      r2,[sp,#0x3c]
000070  7806              LDRB     r6,[r0,#0]            ;2336
000072  9809              LDR      r0,[sp,#0x24]
000074  4631              MOV      r1,r6
000076  f7fffffe          BL       algorithm_label_Split
00007a  495c              LDR      r1,|L9.492|
00007c  9809              LDR      r0,[sp,#0x24]
00007e  f8dd8050          LDR      r8,[sp,#0x50]
000082  6889              LDR      r1,[r1,#8]  ; thisInfo
000084  f1010a45          ADD      r10,r1,#0x45
000088  eb0a0080          ADD      r0,r10,r0,LSL #2
00008c  9003              STR      r0,[sp,#0xc]
00008e  f9901272          LDRSB    r1,[r0,#0x272]
000092  f9900273          LDRSB    r0,[r0,#0x273]
000096  f361250f          BFI      r5,r1,#8,#8
00009a  4281              CMP      r1,r0
00009c  dc3e              BGT      |L9.284|
                  |L9.158|
00009e  9803              LDR      r0,[sp,#0xc]
0000a0  9903              LDR      r1,[sp,#0xc]
0000a2  f9900274          LDRSB    r0,[r0,#0x274]
0000a6  f9911275          LDRSB    r1,[r1,#0x275]
0000aa  f3600507          BFI      r5,r0,#0,#8
0000ae  4288              CMP      r0,r1
0000b0  dc2a              BGT      |L9.264|
0000b2  f3452007          SBFX     r0,r5,#8,#8
0000b6  494e              LDR      r1,|L9.496|
0000b8  ebc000c0          RSB      r0,r0,r0,LSL #3
0000bc  eb000040          ADD      r0,r0,r0,LSL #1
0000c0  eb010180          ADD      r1,r1,r0,LSL #2
0000c4  9111              STR      r1,[sp,#0x44]
0000c6  494b              LDR      r1,|L9.500|
0000c8  eb0101c0          ADD      r1,r1,r0,LSL #3
0000cc  910c              STR      r1,[sp,#0x30]
0000ce  4949              LDR      r1,|L9.500|
0000d0  eb011000          ADD      r0,r1,r0,LSL #4
0000d4  900a              STR      r0,[sp,#0x28]
                  |L9.214|
0000d6  4847              LDR      r0,|L9.500|
0000d8  b26f              SXTB     r7,r5
0000da  1839              ADDS     r1,r7,r0
0000dc  9811              LDR      r0,[sp,#0x44]
0000de  5c08              LDRB     r0,[r1,r0]
0000e0  283f              CMP      r0,#0x3f
0000e2  f04f0000          MOV      r0,#0
0000e6  d03d              BEQ      |L9.356|
0000e8  990a              LDR      r1,[sp,#0x28]
0000ea  eb010187          ADD      r1,r1,r7,LSL #2
0000ee  f5014130          ADD      r1,r1,#0xb000
0000f2  f8c107c0          STR      r0,[r1,#0x7c0]
                  |L9.246|
0000f6  9903              LDR      r1,[sp,#0xc]
0000f8  1c78              ADDS     r0,r7,#1
0000fa  b240              SXTB     r0,r0
0000fc  f9911275          LDRSB    r1,[r1,#0x275]
000100  f3600507          BFI      r5,r0,#0,#8
000104  4288              CMP      r0,r1
000106  dde6              BLE      |L9.214|
                  |L9.264|
000108  9903              LDR      r1,[sp,#0xc]
00010a  1228              ASRS     r0,r5,#8
00010c  1c40              ADDS     r0,r0,#1
00010e  b240              SXTB     r0,r0
000110  f9911273          LDRSB    r1,[r1,#0x273]
000114  f360250f          BFI      r5,r0,#8,#8
000118  4288              CMP      r0,r1
00011a  ddc0              BLE      |L9.158|
                  |L9.284|
;;;2343   		label_start_idx = algorithm_label_Split_PostProcess(valid_area_idx, label_start_idx, mode);
;;;2344   		algorithm_label_Merge(valid_area_idx, label_start_idx, mode);
00011c  4631              MOV      r1,r6
00011e  9a14              LDR      r2,[sp,#0x50]
000120  9809              LDR      r0,[sp,#0x24]
000122  f7fffffe          BL       algorithm_label_Merge
;;;2345   		algorithm_label_Merge_PostProcess(valid_area_idx, label_start_idx, mode);			
000126  4631              MOV      r1,r6
000128  9a14              LDR      r2,[sp,#0x50]
00012a  9809              LDR      r0,[sp,#0x24]
00012c  f7fffffe          BL       algorithm_label_Merge_PostProcess
000130  9809              LDR      r0,[sp,#0x24]         ;2334
000132  1c40              ADDS     r0,r0,#1              ;2334
000134  b2c0              UXTB     r0,r0                 ;2334
000136  9009              STR      r0,[sp,#0x24]         ;2334
000138  980e              LDR      r0,[sp,#0x38]         ;2334
00013a  f8901271          LDRB     r1,[r0,#0x271]        ;2334
00013e  9809              LDR      r0,[sp,#0x24]         ;2334
000140  4281              CMP      r1,r0                 ;2334
000142  d892              BHI      |L9.106|
                  |L9.324|
;;;2346   	}
;;;2347   
;;;2348   	if( thisModeConf->Label.bExpand )
000144  4829              LDR      r0,|L9.492|
000146  6840              LDR      r0,[r0,#4]  ; thisModeConf
000148  f8900068          LDRB     r0,[r0,#0x68]
00014c  2800              CMP      r0,#0
;;;2349   	{
;;;2350   		algorithm_label_MarkBoundary(YES, mode);
;;;2351   	}
;;;2352   
;;;2353   #if (FingerAreaPenDeltaDelete==1 || FingerAreaPenDeltaNoAcc==1 || FingerAreaLineFilter == 1)		
;;;2354   	if(thisModeConf->BaseLine.cFingerAreaPenDeltaDelete != 0 || thisModeConf->BaseLine.cFingerAreaPenDeltaNoAcc != 0 || thisModeConf->SensingFilter.sFingerAreaLineFilterLimit != 0)
;;;2355   	{
;;;2356   		int i;
;;;2357   		for(i = 0; i<temp_label->ucNum; i++)
;;;2358   		{
;;;2359   			if(thisInfo->tPenInfo.LocalFingerArea.rs > temp_label->tTable[i].tRect.rs)thisInfo->tPenInfo.LocalFingerArea.rs = temp_label->tTable[i].tRect.rs;
;;;2360   			if(thisInfo->tPenInfo.LocalFingerArea.re < temp_label->tTable[i].tRect.re)thisInfo->tPenInfo.LocalFingerArea.re = temp_label->tTable[i].tRect.re;
;;;2361   			if(thisInfo->tPenInfo.LocalFingerArea.cs > temp_label->tTable[i].tRect.cs)thisInfo->tPenInfo.LocalFingerArea.cs = temp_label->tTable[i].tRect.cs;
;;;2362   			if(thisInfo->tPenInfo.LocalFingerArea.ce < temp_label->tTable[i].tRect.ce)thisInfo->tPenInfo.LocalFingerArea.ce = temp_label->tTable[i].tRect.ce;
;;;2363   		}
;;;2364   	}	
;;;2365   #endif
;;;2366   }
00014e  bf04              ITT      EQ
000150  b015              ADDEQ    sp,sp,#0x54
000152  e8bd8ff0          POPEQ    {r4-r11,pc}
000156  2001              MOVS     r0,#1                 ;2350
000158  9914              LDR      r1,[sp,#0x50]         ;2350
00015a  b015              ADD      sp,sp,#0x54           ;2350
00015c  e8bd4ff0          POP      {r4-r11,lr}           ;2350
000160  f7ffbffe          B.W      algorithm_label_MarkBoundary
                  |L9.356|
000164  9005              STR      r0,[sp,#0x14]         ;2350
000166  a805              ADD      r0,sp,#0x14           ;2350
000168  e9cd0800          STRD     r0,r8,[sp,#0]         ;2350
00016c  2200              MOVS     r2,#0                 ;2350
00016e  462b              MOV      r3,r5                 ;2350
000170  2108              MOVS     r1,#8                 ;2350
000172  4610              MOV      r0,r2                 ;2350
000174  f7fffffe          BL       algorithm_label_GetConflictInfo
000178  980c              LDR      r0,[sp,#0x30]         ;2350
00017a  240f              MOVS     r4,#0xf               ;2350
00017c  eb000047          ADD      r0,r0,r7,LSL #1       ;2350
000180  f5004b70          ADD      r11,r0,#0xf000        ;2350
                  |L9.388|
000184  f8bd0014          LDRH     r0,[sp,#0x14]         ;2350
000188  fa09f104          LSL      r1,r9,r4              ;2350
00018c  4208              TST      r0,r1                 ;2350
00018e  d01b              BEQ      |L9.456|
000190  f9bb06c0          LDRSH    r0,[r11,#0x6c0]       ;2350
000194  f89d1016          LDRB     r1,[sp,#0x16]         ;2350
000198  2300              MOVS     r3,#0                 ;2350
00019a  fb90f0f1          SDIV     r0,r0,r1              ;2350
00019e  b202              SXTH     r2,r0                 ;2350
0001a0  2000              MOVS     r0,#0                 ;2350
0001a2  e9cd0800          STRD     r0,r8,[sp,#0]         ;2350
0001a6  b2e0              UXTB     r0,r4                 ;2350
0001a8  4629              MOV      r1,r5                 ;2350
0001aa  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
0001ae  ebc400c4          RSB      r0,r4,r4,LSL #3       ;2350
0001b2  eb001044          ADD      r0,r0,r4,LSL #5       ;2350
0001b6  4450              ADD      r0,r0,r10             ;2350
0001b8  f8bd2014          LDRH     r2,[sp,#0x14]         ;2350
0001bc  8b81              LDRH     r1,[r0,#0x1c]         ;2350
0001be  4311              ORRS     r1,r1,r2              ;2350
0001c0  8381              STRH     r1,[r0,#0x1c]         ;2350
0001c2  42a6              CMP      r6,r4                 ;2350
0001c4  bfc8              IT       GT                    ;2350
0001c6  b2e6              UXTBGT   r6,r4                 ;2350
                  |L9.456|
0001c8  1e64              SUBS     r4,r4,#1              ;2350
0001ca  d2db              BCS      |L9.388|
0001cc  f89d0017          LDRB     r0,[sp,#0x17]         ;2350
0001d0  f0400080          ORR      r0,r0,#0x80           ;2350
0001d4  f88d0017          STRB     r0,[sp,#0x17]         ;2350
0001d8  980a              LDR      r0,[sp,#0x28]         ;2350
0001da  9905              LDR      r1,[sp,#0x14]         ;2350
0001dc  eb000087          ADD      r0,r0,r7,LSL #2       ;2350
0001e0  f5004030          ADD      r0,r0,#0xb000         ;2350
0001e4  f8c017c0          STR      r1,[r0,#0x7c0]        ;2350
0001e8  e785              B        |L9.246|
;;;2367   
                          ENDP

0001ea  0000              DCW      0x0000
                  |L9.492|
                          DCD      ||.data||
                  |L9.496|
                          DCD      0x00011640
                  |L9.500|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Split_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split_PostProcess PROC
;;;1776   
;;;1777   uint8_t algorithm_label_Split_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1778   {
;;;1779   	int l;
;;;1780   	int16_t d, label_id;
;;;1781   	tConflictInfo_t tConflict;
;;;1782   	tCell_t tPos;
;;;1783   	uint8_t rtn_val = _label_start_idx;
000004  460e              MOV      r6,r1
;;;1784   	int sum = 0;
;;;1785   	tLabelInfo_t	*temp_label;
;;;1786   
;;;1787   	temp_label = &thisInfo->tLabel;
000006  494d              LDR      r1,|L10.316|
000008  b08f              SUB      sp,sp,#0x3c           ;1778
00000a  4690              MOV      r8,r2                 ;1778
00000c  6889              LDR      r1,[r1,#8]  ; thisInfo
00000e  f1010945          ADD      r9,r1,#0x45
;;;1788   
;;;1789   	for( tPos.r=temp_label->tValidRect[_valid_area_idx].rs; tPos.r<=temp_label->tValidRect[_valid_area_idx].re; tPos.r++ )
000012  eb090080          ADD      r0,r9,r0,LSL #2
000016  9003              STR      r0,[sp,#0xc]
000018  f9901272          LDRSB    r1,[r0,#0x272]
00001c  f9900273          LDRSB    r0,[r0,#0x273]
000020  f361250f          BFI      r5,r1,#8,#8
000024  4281              CMP      r1,r0
;;;1790   	{
;;;1791   		for( tPos.c=temp_label->tValidRect[_valid_area_idx].cs; tPos.c<=temp_label->tValidRect[_valid_area_idx].ce; tPos.c++ )
;;;1792   		{
;;;1793   			label_id = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1794   
;;;1795   			if( label_id == LABEL_CONFLICT_MARKER )
;;;1796   			{
;;;1797   				sum = 0;
;;;1798   				tConflict.ulValue = 0;
;;;1799   
;;;1800   				algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1801   				
;;;1802   				#if WeightedConflict
;;;1803   				for( l=LOOSE_POSBUF_; l--; )
;;;1804   				{
;;;1805   					if( (tConflict.tInfo.BF & _BV(l)) )
;;;1806   					{
;;;1807   						testLabelSum[l] = heon_algorithm(l+1, 0, tPos);
;;;1808   						sum += heon_algorithm(l+1, 0, tPos);
;;;1809   					}
;;;1810   				}
;;;1811   				testSum = sum;
;;;1812   				testConflictValue = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1813   				#endif
;;;1814   				
;;;1815   				for( l=LOOSE_POSBUF_; l--; )
;;;1816   				{
;;;1817   					if( (tConflict.tInfo.BF & _BV(l)) )
000026  bfd8              IT       LE
000028  f04f0a01          MOVLE    r10,#1
00002c  dc3e              BGT      |L10.172|
                  |L10.46|
00002e  9803              LDR      r0,[sp,#0xc]          ;1791
000030  9903              LDR      r1,[sp,#0xc]          ;1791
000032  f9900274          LDRSB    r0,[r0,#0x274]        ;1791
000036  f9911275          LDRSB    r1,[r1,#0x275]        ;1791
00003a  f3600507          BFI      r5,r0,#0,#8           ;1791
00003e  4288              CMP      r0,r1                 ;1791
000040  dc2a              BGT      |L10.152|
000042  f3452007          SBFX     r0,r5,#8,#8           ;1793
000046  493e              LDR      r1,|L10.320|
000048  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1793
00004c  eb000040          ADD      r0,r0,r0,LSL #1       ;1793
000050  eb010180          ADD      r1,r1,r0,LSL #2       ;1793
000054  910d              STR      r1,[sp,#0x34]         ;1793
000056  493b              LDR      r1,|L10.324|
;;;1818   					{
;;;1819   //						if(mode == LOCAL_FINGER_MODE)
;;;1820   //							d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1821   //						else
;;;1822   						
;;;1823   						
;;;1824   						
;;;1825   						#if WeightedConflict
;;;1826   							#if ConflictTest
;;;1827   								if(sum != 0 && tPos.c < COL_MAX >> 1){
;;;1828   									d = (HAL_READ_DELTA_IMAGE(tPos.r, tPos.c) * heon_algorithm(l+1, 0, tPos)/ sum);
;;;1829   								}
;;;1830   								else
;;;1831   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1832   							#else
;;;1833   								if(sum != 0){
;;;1834   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c) * heon_algorithm(l+1, 0, tPos)/ sum;
;;;1835   								}
;;;1836   								else
;;;1837   									d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1838   							#endif
;;;1839   						#else
;;;1840   							d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
000058  eb0101c0          ADD      r1,r1,r0,LSL #3
00005c  910a              STR      r1,[sp,#0x28]
00005e  4939              LDR      r1,|L10.324|
;;;1841   						#endif
;;;1842   						
;;;1843   						
;;;1844   						algorithm_label_Add_NewNode_to_LabelRecord(l, tPos, d, NO, NO, mode);
;;;1845   
;;;1846   						temp_label->tTable[l].tConflictInfo.tInfo.BF |= tConflict.tInfo.BF;
;;;1847   						if(rtn_val > l)        rtn_val = l;
;;;1848   					}
;;;1849   				}
;;;1850   
;;;1851   				tConflict.tInfo.SET = YES;
;;;1852   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, tConflict.ulValue);
000060  eb011000          ADD      r0,r1,r0,LSL #4
000064  9007              STR      r0,[sp,#0x1c]
                  |L10.102|
000066  4837              LDR      r0,|L10.324|
000068  b26f              SXTB     r7,r5
00006a  1839              ADDS     r1,r7,r0              ;1793
00006c  980d              LDR      r0,[sp,#0x34]         ;1793
00006e  5c08              LDRB     r0,[r1,r0]            ;1793
000070  283f              CMP      r0,#0x3f              ;1795
;;;1853   			}
;;;1854   			else
;;;1855   			{
;;;1856   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, 0);
000072  f04f0000          MOV      r0,#0
000076  d01d              BEQ      |L10.180|
000078  9907              LDR      r1,[sp,#0x1c]
00007a  eb010187          ADD      r1,r1,r7,LSL #2
00007e  f5014130          ADD      r1,r1,#0xb000
000082  f8c107c0          STR      r0,[r1,#0x7c0]
                  |L10.134|
000086  9903              LDR      r1,[sp,#0xc]          ;1791
000088  1c78              ADDS     r0,r7,#1              ;1791
00008a  b240              SXTB     r0,r0                 ;1791
00008c  f9911275          LDRSB    r1,[r1,#0x275]        ;1791
000090  f3600507          BFI      r5,r0,#0,#8           ;1791
000094  4288              CMP      r0,r1                 ;1791
000096  dde6              BLE      |L10.102|
                  |L10.152|
000098  9903              LDR      r1,[sp,#0xc]          ;1789
00009a  1228              ASRS     r0,r5,#8              ;1791
00009c  1c40              ADDS     r0,r0,#1              ;1791
00009e  b240              SXTB     r0,r0                 ;1789
0000a0  f9911273          LDRSB    r1,[r1,#0x273]        ;1789
0000a4  f360250f          BFI      r5,r0,#8,#8           ;1789
0000a8  4288              CMP      r0,r1                 ;1789
0000aa  ddc0              BLE      |L10.46|
                  |L10.172|
;;;1857   			}
;;;1858   		}
;;;1859   	}
;;;1860   	return rtn_val;
;;;1861   }
0000ac  b00f              ADD      sp,sp,#0x3c
0000ae  4630              MOV      r0,r6                 ;1860
0000b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.180|
0000b4  9006              STR      r0,[sp,#0x18]         ;1800
0000b6  a806              ADD      r0,sp,#0x18           ;1800
0000b8  e9cd0800          STRD     r0,r8,[sp,#0]         ;1800
0000bc  2200              MOVS     r2,#0                 ;1800
0000be  462b              MOV      r3,r5                 ;1800
0000c0  2108              MOVS     r1,#8                 ;1800
0000c2  4610              MOV      r0,r2                 ;1800
0000c4  f7fffffe          BL       algorithm_label_GetConflictInfo
0000c8  980a              LDR      r0,[sp,#0x28]         ;1840
0000ca  240f              MOVS     r4,#0xf               ;1815
0000cc  eb000047          ADD      r0,r0,r7,LSL #1       ;1840
0000d0  f5004b70          ADD      r11,r0,#0xf000        ;1840
                  |L10.212|
0000d4  f8bd0018          LDRH     r0,[sp,#0x18]         ;1817
0000d8  fa0af104          LSL      r1,r10,r4             ;1817
0000dc  4208              TST      r0,r1                 ;1817
0000de  d01b              BEQ      |L10.280|
0000e0  f9bb06c0          LDRSH    r0,[r11,#0x6c0]       ;1840
0000e4  f89d101a          LDRB     r1,[sp,#0x1a]         ;1840
0000e8  2300              MOVS     r3,#0                 ;1844
0000ea  fb90f0f1          SDIV     r0,r0,r1              ;1840
0000ee  b202              SXTH     r2,r0                 ;1840
0000f0  2000              MOVS     r0,#0                 ;1844
0000f2  e9cd0800          STRD     r0,r8,[sp,#0]         ;1844
0000f6  b2e0              UXTB     r0,r4                 ;1844
0000f8  4629              MOV      r1,r5                 ;1844
0000fa  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
0000fe  ebc400c4          RSB      r0,r4,r4,LSL #3       ;1846
000102  eb001044          ADD      r0,r0,r4,LSL #5       ;1846
000106  4448              ADD      r0,r0,r9              ;1846
000108  f8bd1018          LDRH     r1,[sp,#0x18]         ;1846
00010c  8b82              LDRH     r2,[r0,#0x1c]         ;1846
00010e  4311              ORRS     r1,r1,r2              ;1846
000110  8381              STRH     r1,[r0,#0x1c]         ;1846
000112  42a6              CMP      r6,r4                 ;1847
000114  bfc8              IT       GT                    ;1847
000116  b2e6              UXTBGT   r6,r4                 ;1847
                  |L10.280|
000118  1e64              SUBS     r4,r4,#1              ;1847
00011a  d2db              BCS      |L10.212|
00011c  f89d001b          LDRB     r0,[sp,#0x1b]         ;1851
000120  f0400080          ORR      r0,r0,#0x80           ;1851
000124  f88d001b          STRB     r0,[sp,#0x1b]         ;1851
000128  e9dd1006          LDRD     r1,r0,[sp,#0x18]      ;1851
00012c  eb000087          ADD      r0,r0,r7,LSL #2       ;1852
000130  f5004030          ADD      r0,r0,#0xb000         ;1852
000134  f8c017c0          STR      r1,[r0,#0x7c0]        ;1852
000138  e7a5              B        |L10.134|
;;;1862   
                          ENDP

00013a  0000              DCW      0x0000
                  |L10.316|
                          DCD      ||.data||
                  |L10.320|
                          DCD      0x00011640
                  |L10.324|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_init||, CODE, READONLY, ALIGN=2

                  algorithm_label_init PROC
;;;82     
;;;83     void algorithm_label_init(void)
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c08              LDR      r4,|L11.40|
;;;84     {
;;;85     //	int r, c;
;;;86     
;;;87     	algorithm_label_init_param();
;;;88     //	thisCommonConf = algorithm_GetCommonConfig();
;;;89     	thisInfo       = algorithm_GetInfo();
000008  6060              STR      r0,[r4,#4]  ; thisModeConf
00000a  f7fffffe          BL       algorithm_GetInfo
;;;90     
;;;91     	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
00000e  60a0              STR      r0,[r4,#8]  ; thisInfo
000010  f44f617c          MOV      r1,#0xfc0
000014  4805              LDR      r0,|L11.44|
000016  f7fffffe          BL       __aeabi_memclr4
;;;92     	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
00001a  e8bd4010          POP      {r4,lr}
00001e  f44f517c          MOV      r1,#0x3f00
000022  4803              LDR      r0,|L11.48|
000024  f7ffbffe          B.W      __aeabi_memclr4
;;;93     //	for( r=-PAD_; r<ROW_MAX + PAD_; r++ )
;;;94     //	{
;;;95     //		for( c=-PAD_; c<COL_MAX + PAD_; c++ )
;;;96     //		{
;;;97     //			HAL_WRITE_LABEL_IMAGE(r, c, 0);
;;;98     //			HAL_WRITE_LABEL_LINKLIST_IMAGE(r, c, 0);
;;;99     //		}
;;;100    //	}
;;;101    }
;;;102    
                          ENDP

                  |L11.40|
                          DCD      ||.data||
                  |L11.44|
                          DCD      FullSharedBuff+0x11640
                  |L11.48|
                          DCD      FullSharedBuff+0xb7c0

                          AREA ||i.algorithm_label_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_label_init_param PROC
;;;102    
;;;103    void algorithm_label_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105    	thisModeConf   = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4901              LDR      r1,|L12.12|
000008  6048              STR      r0,[r1,#4]  ; thisModeConf
;;;106    }
00000a  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_initialise||, CODE, READONLY, ALIGN=2

                  algorithm_label_initialise PROC
;;;107    
;;;108    void algorithm_label_initialise(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;109    {
;;;110    //	int r, c, l; // NOTE : not used!!
;;;111    	int l;
;;;112    
;;;113    	tLabelInfo_t 		*temp_label;
;;;114    
;;;115    	temp_label = &thisInfo->tLabel;
000004  481c              LDR      r0,|L13.120|
;;;116    
;;;117    	temp_label->ucNum = 0;
000006  2400              MOVS     r4,#0
;;;118    	temp_label->ucValidNum = 0;
;;;119    
;;;120    	for( l=LOOSE_POSBUF_; l--; )
000008  2610              MOVS     r6,#0x10
00000a  6885              LDR      r5,[r0,#8]            ;117  ; thisInfo
00000c  2701              MOVS     r7,#1
;;;121    	{
;;;122    		memset(&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
;;;123    
;;;124    		temp_label->tValidRect[l].cs            = COL_MAX-1;
00000e  f04f0853          MOV      r8,#0x53
000012  f8054f45          STRB     r4,[r5,#0x45]!        ;117
;;;125    		temp_label->tValidRect[l].ce            = 0;
;;;126    		temp_label->tValidRect[l].rs            = ROW_MAX-1;
000016  f04f092f          MOV      r9,#0x2f
00001a  f8854271          STRB     r4,[r5,#0x271]        ;118
                  |L13.30|
00001e  1e76              SUBS     r6,r6,#1
000020  ebc600c6          RSB      r0,r6,r6,LSL #3       ;122
000024  eb001046          ADD      r0,r0,r6,LSL #5       ;122
000028  4428              ADD      r0,r0,r5              ;122
00002a  2127              MOVS     r1,#0x27              ;122
00002c  1c40              ADDS     r0,r0,#1              ;122
00002e  f7fffffe          BL       __aeabi_memclr
000032  eb050086          ADD      r0,r5,r6,LSL #2       ;124
;;;127    		temp_label->tValidRect[l].re            = 0;
;;;128    		temp_label->sValidMaxVal[l]             = 0;
;;;129    		temp_label->usValidCellCnt[l]           = 0;
;;;130    		temp_label->tValidMaxPos[l].c           = 0;
;;;131    		temp_label->tValidMaxPos[l].r           = 0;
000036  1c7f              ADDS     r7,r7,#1
000038  f8808274          STRB     r8,[r0,#0x274]        ;124
00003c  f8804275          STRB     r4,[r0,#0x275]        ;125
000040  f8809272          STRB     r9,[r0,#0x272]        ;126
000044  f8804273          STRB     r4,[r0,#0x273]        ;127
000048  eb050046          ADD      r0,r5,r6,LSL #1       ;128
00004c  2f10              CMP      r7,#0x10
00004e  f8a042d2          STRH     r4,[r0,#0x2d2]        ;128
000052  f8a042f2          STRH     r4,[r0,#0x2f2]        ;129
000056  f88042b2          STRB     r4,[r0,#0x2b2]        ;130
00005a  f88042b3          STRB     r4,[r0,#0x2b3]
00005e  ddde              BLE      |L13.30|
;;;132    	}
;;;133    #if (LABEL_FAST_EN != 2)
;;;134    	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
000060  f44f617c          MOV      r1,#0xfc0
000064  4805              LDR      r0,|L13.124|
000066  f7fffffe          BL       __aeabi_memclr4
;;;135    #endif
;;;136    	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
00006a  e8bd47f0          POP      {r4-r10,lr}
00006e  f44f517c          MOV      r1,#0x3f00
000072  4803              LDR      r0,|L13.128|
000074  f7ffbffe          B.W      __aeabi_memclr4
;;;137    }
;;;138    
                          ENDP

                  |L13.120|
                          DCD      ||.data||
                  |L13.124|
                          DCD      FullSharedBuff+0x11640
                  |L13.128|
                          DCD      FullSharedBuff+0xb7c0

                          AREA ||i.algorithm_label_palm_rejection||, CODE, READONLY, ALIGN=2

                  algorithm_label_palm_rejection PROC
;;;459    //#define KEEPPALMREGIONFRAME 50
;;;460    void algorithm_label_palm_rejection(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;461    {
000004  b0a7              SUB      sp,sp,#0x9c
;;;462    	tLabelInfo_t	*temp_label;
;;;463    	uint8_t IsPalm[LOOSE_POSBUF_] = {0,};		//0: Normal finger, 1: Big label(palm), 2: small label cascaded to big label 3: touch down label
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;464    	static int PalmRegionUpdateCnt = 0;
;;;465    	tRect_t CascadeRect[LOOSE_POSBUF_];
;;;466    	uint8_t PalmDetectingFlag = 0,PalmTouchDownFlag = 0, SavePalmRegion = 0, PalmCnt = 0;
00000e  9007              STR      r0,[sp,#0x1c]
000010  901d              STR      r0,[sp,#0x74]
;;;467    	int cl,pl,pl2,r,c;
;;;468    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;469    	bool_t bPalmRegionInit = 1;
;;;470    	bool_t bPenPalmParam = 0;
;;;471    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;472    //	int tmp = 0;
;;;473    	
;;;474    	temp_label = &thisInfo->tLabel;
000012  49fe              LDR      r1,|L14.1036|
000014  901c              STR      r0,[sp,#0x70]
000016  6889              LDR      r1,[r1,#8]  ; thisInfo
000018  9123              STR      r1,[sp,#0x8c]
00001a  f1010445          ADD      r4,r1,#0x45
00001e  f5015180          ADD      r1,r1,#0x1000
;;;475    //	tmp = temp_label->ucValidNum;
;;;476    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;477    	if(thisModeConf->Palm.bPenPalmDetection)
;;;478    	{
;;;479    		if(thisInfo->bLocal_sensing)
;;;480    			PenEnable = thisModeConf->Palm.ucPen_KEEPFRAME;
;;;481    		else if(PenEnable) PenEnable--;
;;;482    		
;;;483    		if(PenEnable)
;;;484    			bPenPalmParam = 1;
;;;485    	}
;;;486    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;487    
;;;488    	thisInfo->bIsPalm = NO;
000022  f88100da          STRB     r0,[r1,#0xda]
000026  48f9              LDR      r0,|L14.1036|
;;;489    	//Initialize and counting touch down frame
;;;490    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;491    	if(temp_label->ucValidNum == 0)
;;;492    	{
;;;493    		if(temp_label->TouchFrameCnt && !thisInfo->bWasPalm_AtLeastOnce)
;;;494    		{
;;;495    			PalmRegionNum = 0;
;;;496    			memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;497    		}
;;;498    		temp_label->PalmTouchDownCnt = 0;
;;;499    		PalmRegionUpdateCnt = 0;
;;;500    		temp_label->TouchFrameCnt = 0;
;;;501    		thisInfo->bWasPalm_AtLeastOnce = 0;
;;;502    		
;;;503    		if(bPenPalmParam)
;;;504    		{
;;;505    			for(pl=PalmRegionNum; pl--; )
;;;506    			{
;;;507    				if(PalmRectEnable[pl])
;;;508    				{
;;;509    					bPalmRegionInit = 0;
;;;510    					break;
;;;511    				}
;;;512    			}
;;;513    		}
;;;514    		if(bPalmRegionInit)
;;;515    		{
;;;516    			PalmRegionNum = 0;
;;;517    			memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;518    		}
;;;519    	}
;;;520    	else if(temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX){
;;;521    		temp_label->PalmTouchDownCnt++;
;;;522    		if(temp_label->PalmTouchDownCnt <= thisModeConf->Palm.ucPalm_IGNOREFRAMENUM)	PalmTouchDownFlag = YES;
;;;523    	}
;;;524    	
;;;525    	// In Pen & Palm conditions, if your finger enters a non-Palm area when there is no Palm, the Palm area is released
;;;526    	if(bPenPalmParam && !thisInfo->bWasPalm_AtLeastOnce)
;;;527    	{
;;;528    		for(pl = 0; pl < MAX_TOUCH_; pl++)
;;;529    		{
;;;530    			if(thisInfo->tCoord.tPastPos[0].vusS[pl])
;;;531    			{
;;;532    				PalmRegionNum = 0;
;;;533    				memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;534    				break;
;;;535    			}
;;;536    		}
;;;537    	}
;;;538    	
;;;539    	// In Pen & Palm conditions, when there is no Palm, if more than ucPalmRelaseFrame is drawn, the Palm area is released
;;;540    	if(bPenPalmParam && !thisInfo->bWasPalm_AtLeastOnce && temp_label->ucValidNum > 0)
;;;541    	{
;;;542    		if(temp_label->TouchFrameCnt < thisModeConf->Palm.ucPalmRelaseFrame) temp_label->TouchFrameCnt++;
;;;543    		else
;;;544    		{
;;;545    			PalmRegionNum = 0;
;;;546    			memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;547    		}
;;;548    	}
;;;549    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;550    	if(temp_label->ucValidNum == 0)
000028  f8941271          LDRB     r1,[r4,#0x271]
;;;551    	{
;;;552    		PalmRegionNum = 0;
;;;553    		memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;554    		temp_label->PalmTouchDownCnt = 0;
;;;555    		PalmRegionUpdateCnt = 0;
;;;556    	}
;;;557    	else if(temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX){
00002c  6840              LDR      r0,[r0,#4]
00002e  901a              STR      r0,[sp,#0x68]         ;461
000030  b1b1              CBZ      r1,|L14.96|
000032  991a              LDR      r1,[sp,#0x68]
000034  f8940312          LDRB     r0,[r4,#0x312]
000038  f8911206          LDRB     r1,[r1,#0x206]
00003c  4288              CMP      r0,r1
00003e  d20a              BCS      |L14.86|
000040  1c40              ADDS     r0,r0,#1
;;;558    		temp_label->PalmTouchDownCnt++;
000042  b2c0              UXTB     r0,r0
000044  f8840312          STRB     r0,[r4,#0x312]
;;;559    		if(temp_label->PalmTouchDownCnt <= thisModeConf->Palm.ucPalm_IGNOREFRAMENUM)	PalmTouchDownFlag = YES;
000048  991a              LDR      r1,[sp,#0x68]
00004a  f8911208          LDRB     r1,[r1,#0x208]
00004e  4281              CMP      r1,r0
000050  bf24              ITT      CS
000052  2001              MOVCS    r0,#1
000054  901c              STRCS    r0,[sp,#0x70]
                  |L14.86|
;;;560    	}
;;;561    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;562    	
;;;563    	//Detect touch down
;;;564    	//compare peak value and nearby value when only 1 label
;;;565    	//if touch down palm, slope is lower than normal finger.
;;;566    	//Do not save palm region for touch down label.
;;;567    	if(temp_label->ucValidNum == 1 && temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX)
000056  f8940271          LDRB     r0,[r4,#0x271]
00005a  2801              CMP      r0,#1
00005c  d119              BNE      |L14.146|
00005e  e009              B        |L14.116|
                  |L14.96|
000060  4eea              LDR      r6,|L14.1036|
000062  2500              MOVS     r5,#0                 ;552
000064  48ea              LDR      r0,|L14.1040|
000066  7035              STRB     r5,[r6,#0]            ;552
000068  f7fffffe          BL       __ARM_common_memclr4_10
00006c  f8845312          STRB     r5,[r4,#0x312]        ;554
000070  60f5              STR      r5,[r6,#0xc]          ;555  ; PalmRegionUpdateCnt
000072  e00e              B        |L14.146|
                  |L14.116|
000074  981a              LDR      r0,[sp,#0x68]
000076  f8941312          LDRB     r1,[r4,#0x312]
00007a  f8900206          LDRB     r0,[r0,#0x206]
00007e  4281              CMP      r1,r0
000080  d207              BCS      |L14.146|
;;;568    	{
;;;569    		if(!thisInfo->tCoord.tPastPos[0].vusS[0])
000082  9923              LDR      r1,[sp,#0x8c]
000084  f8b116fb          LDRH     r1,[r1,#0x6fb]
000088  2900              CMP      r1,#0
;;;570    		{
;;;571    			int neighbor_mean = 0;
;;;572    			tCell_t MaxPos;
;;;573    			uint16_t SlopeTh = 0;
;;;574    			
;;;575    			SlopeTh = thisModeConf->Palm.ucPalm_TOUCHDOWNSLOPETHRESHOLD;
;;;576    			MaxPos.r = temp_label->tValidMaxPos[0].r;
;;;577    			MaxPos.c = temp_label->tValidMaxPos[0].c;
;;;578    			if(0 < MaxPos.r && MaxPos.r < ROW_MAX-1 && 0 < MaxPos.c && MaxPos.c < COL_MAX-1)
;;;579    			{
;;;580    				for(r=MaxPos.r-1 ; r<=MaxPos.r+1 ; r++){
;;;581    					for(c=MaxPos.c-1 ; c<=MaxPos.c+1 ; c++){
;;;582    						if( !(r==MaxPos.r && c==MaxPos.c) )
;;;583    							neighbor_mean += HAL_READ_DELTA_IMAGE(r,c);
;;;584    					}
;;;585    				}
;;;586    				neighbor_mean >>= 3;
;;;587    				if(temp_label->sValidMaxVal[0]*100/neighbor_mean < SlopeTh)	PalmTouchDownFlag = YES;
;;;588    			}
;;;589    		}
;;;590    		else
;;;591    			temp_label->PalmTouchDownCnt = thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX;
00008a  bf18              IT       NE
00008c  f8840312          STRBNE   r0,[r4,#0x312]
000090  d01b              BEQ      |L14.202|
                  |L14.146|
;;;592    	}
;;;593    	
;;;594    	for( cl=temp_label->ucValidNum; cl--; )
000092  f8940271          LDRB     r0,[r4,#0x271]
000096  1e41              SUBS     r1,r0,#1
000098  f0c08197          BCC.W    |L14.970|
;;;595    	{
;;;596    		uint8_t merged_flag = 0;
;;;597    		SavePalmRegion = NO;
;;;598    	
;;;599    		if(thisModeConf->Palm.usPalmLevel < temp_label->usValidCellCnt[cl] ){	//&& temp_label->usValidCellCnt[cl] < (thisModeConf->Palm.usPalmLevel<<6)){	//Certain Big palm
;;;600    			IsPalm[cl] = 1;
;;;601    			SavePalmRegion = YES;
;;;602    		}	//if first frame, palm threshold is in half. It is decided by experimental.
;;;603    #if (PalmFirstDetectionShift == YES)
;;;604    		else if((temp_label->PalmTouchDownCnt==1 && temp_label->usValidCellCnt[cl] > (thisModeConf->Palm.usPalmLevel>>thisModeConf->Palm.ucPalmLevelShift)) || PalmTouchDownFlag)	//Touch down label
;;;605    #else
;;;606    		else if((temp_label->PalmTouchDownCnt==1 && temp_label->usValidCellCnt[cl] > (thisModeConf->Palm.usPalmLevel>>1)) || PalmTouchDownFlag)	//Touch down label
;;;607    #endif
;;;608    			IsPalm[cl] = 3;
;;;609    		
;;;610    		if(IsPalm[cl])
;;;611    		{
;;;612    			//Merge previous palm region and new palm
;;;613    			for(pl=PalmRegionNum; pl--; )
;;;614    			{
;;;615    				if(PalmRectEnable[pl]){
;;;616    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;617    					if((!bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl],thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)) ||
;;;618    						(bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl],thisModeConf->Palm.ucPenPalm_PALM_CONNECT_DIST))){
;;;619    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;620    					if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl],thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
00009c  9823              LDR      r0,[sp,#0x8c]
00009e  4ddc              LDR      r5,|L14.1040|
0000a0  f5005080          ADD      r0,r0,#0x1000
;;;621    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;622    						PalmRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[pl]);
;;;623    						merged_flag = YES;
;;;624    						break;
;;;625    					}
;;;626    				}
;;;627    			}
;;;628    			//Save new palm region
;;;629    			if(!merged_flag && SavePalmRegion){
;;;630    				PalmRect[PalmRegionNum] = temp_label->tValidRect[cl];
;;;631    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;632    				if(!bPenPalmParam)
;;;633    					PalmRectEnable[PalmRegionNum] = thisModeConf->Palm.ucPalm_KEEPPALMREGIONFRAME;
;;;634    				else
;;;635    					PalmRectEnable[PalmRegionNum] = thisModeConf->Palm.ucPenPalm_KEEPPALMREGIONFRAME;
;;;636    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;637    				PalmRectEnable[PalmRegionNum] = thisModeConf->Palm.ucPalm_KEEPPALMREGIONFRAME;
;;;638    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;639    				if(PalmRegionNum < LOOSE_POSBUF_)
;;;640    					PalmRegionNum++;
;;;641    			}
;;;642    			
;;;643    			thisInfo->bIsPalm = YES;
0000a4  9e1a              LDR      r6,[sp,#0x68]
0000a6  f1050a0a          ADD      r10,r5,#0xa           ;620
0000aa  901b              STR      r0,[sp,#0x6c]
                  |L14.172|
0000ac  eb040041          ADD      r0,r4,r1,LSL #1       ;599
0000b0  f8b62201          LDRH     r2,[r6,#0x201]        ;599
0000b4  f8b002f2          LDRH     r0,[r0,#0x2f2]        ;599
0000b8  f04f0800          MOV      r8,#0                 ;597
0000bc  4282              CMP      r2,r0                 ;599
0000be  d240              BCS      |L14.322|
0000c0  2201              MOVS     r2,#1                 ;600
0000c2  a804              ADD      r0,sp,#0x10           ;600
0000c4  4690              MOV      r8,r2                 ;601
0000c6  5442              STRB     r2,[r0,r1]            ;600
0000c8  e051              B        |L14.366|
                  |L14.202|
0000ca  981a              LDR      r0,[sp,#0x68]         ;575
0000cc  f99412b2          LDRSB    r1,[r4,#0x2b2]        ;577
0000d0  f8902207          LDRB     r2,[r0,#0x207]        ;575
0000d4  f99402b3          LDRSB    r0,[r4,#0x2b3]        ;576
0000d8  1e43              SUBS     r3,r0,#1              ;578
0000da  2b2e              CMP      r3,#0x2e              ;578
0000dc  d2d9              BCS      |L14.146|
0000de  2900              CMP      r1,#0                 ;578
0000e0  ddd7              BLE      |L14.146|
0000e2  2953              CMP      r1,#0x53              ;578
0000e4  dad5              BGE      |L14.146|
0000e6  ebc000c0          RSB      r0,r0,r0,LSL #3       ;583
0000ea  eb000340          ADD      r3,r0,r0,LSL #1       ;583
0000ee  48c9              LDR      r0,|L14.1044|
0000f0  eb0000c3          ADD      r0,r0,r3,LSL #3       ;583
0000f4  eb000041          ADD      r0,r0,r1,LSL #1       ;583
0000f8  f5004070          ADD      r0,r0,#0xf000         ;583
0000fc  f9b01616          LDRSH    r1,[r0,#0x616]        ;583
000100  f9b03618          LDRSH    r3,[r0,#0x618]        ;583
000104  4419              ADD      r1,r1,r3              ;583
000106  f9b0361a          LDRSH    r3,[r0,#0x61a]        ;583
00010a  4419              ADD      r1,r1,r3              ;583
00010c  f9b036be          LDRSH    r3,[r0,#0x6be]        ;583
000110  4419              ADD      r1,r1,r3              ;583
000112  f9b036c2          LDRSH    r3,[r0,#0x6c2]        ;583
000116  4419              ADD      r1,r1,r3              ;583
000118  f9b03766          LDRSH    r3,[r0,#0x766]        ;583
00011c  4419              ADD      r1,r1,r3              ;583
00011e  f9b03768          LDRSH    r3,[r0,#0x768]        ;583
000122  f9b0076a          LDRSH    r0,[r0,#0x76a]        ;583
000126  4419              ADD      r1,r1,r3              ;583
000128  4408              ADD      r0,r0,r1              ;583
00012a  f9b412d2          LDRSH    r1,[r4,#0x2d2]        ;587
00012e  2364              MOVS     r3,#0x64              ;587
000130  10c0              ASRS     r0,r0,#3              ;586
000132  4359              MULS     r1,r3,r1              ;587
000134  fb91f0f0          SDIV     r0,r1,r0              ;587
000138  4290              CMP      r0,r2                 ;587
00013a  bfbc              ITT      LT                    ;587
00013c  2001              MOVLT    r0,#1                 ;587
00013e  901c              STRLT    r0,[sp,#0x70]         ;587
000140  e7a7              B        |L14.146|
                  |L14.322|
000142  f8943312          LDRB     r3,[r4,#0x312]        ;604
000146  2b01              CMP      r3,#1                 ;604
000148  d104              BNE      |L14.340|
00014a  f8963203          LDRB     r3,[r6,#0x203]        ;604
00014e  40da              LSRS     r2,r2,r3              ;604
000150  4282              CMP      r2,r0                 ;604
000152  d301              BCC      |L14.344|
                  |L14.340|
000154  981c              LDR      r0,[sp,#0x70]         ;604
000156  b118              CBZ      r0,|L14.352|
                  |L14.344|
000158  aa04              ADD      r2,sp,#0x10           ;608
00015a  2003              MOVS     r0,#3                 ;608
00015c  5450              STRB     r0,[r2,r1]            ;608
00015e  e006              B        |L14.366|
                  |L14.352|
000160  a804              ADD      r0,sp,#0x10           ;610
000162  5c40              LDRB     r0,[r0,r1]            ;610
000164  2800              CMP      r0,#0                 ;610
;;;644    		}
;;;645    		else{
;;;646    			PalmDetectingFlag = YES;
000166  bf04              ITT      EQ
000168  2001              MOVEQ    r0,#1
00016a  901d              STREQ    r0,[sp,#0x74]
00016c  d072              BEQ      |L14.596|
                  |L14.366|
00016e  48a7              LDR      r0,|L14.1036|
000170  f890c000          LDRB     r12,[r0,#0]           ;613  ; PalmRegionNum
000174  f1bc0001          SUBS     r0,r12,#1             ;613
000178  bf28              IT       CS                    ;620
00017a  eb040b81          ADDCS    r11,r4,r1,LSL #2      ;620
00017e  d350              BCC      |L14.546|
                  |L14.384|
000180  5c2a              LDRB     r2,[r5,r0]            ;615
000182  b3da              CBZ      r2,|L14.508|
000184  eb0a0280          ADD      r2,r10,r0,LSL #2      ;620
000188  f8db3272          LDR      r3,[r11,#0x272]       ;620
00018c  6812              LDR      r2,[r2,#0]            ;620
00018e  f8967204          LDRB     r7,[r6,#0x204]        ;620
000192  f3422e07          SBFX     lr,r2,#8,#8           ;620
000196  fa4ff983          SXTB     r9,r3                 ;620
00019a  44be              ADD      lr,lr,r7              ;620
00019c  45f1              CMP      r9,lr                 ;620
00019e  dc3e              BGT      |L14.542|
0001a0  f3432e07          SBFX     lr,r3,#8,#8           ;620
0001a4  fa4ff982          SXTB     r9,r2                 ;620
0001a8  44be              ADD      lr,lr,r7              ;620
0001aa  45f1              CMP      r9,lr                 ;620
0001ac  dc37              BGT      |L14.542|
0001ae  f3434907          SBFX     r9,r3,#16,#8          ;620
0001b2  eb076e22          ADD      lr,r7,r2,ASR #24      ;620
0001b6  45f1              CMP      r9,lr                 ;620
0001b8  dc31              BGT      |L14.542|
0001ba  f3424207          SBFX     r2,r2,#16,#8          ;620
0001be  eb076323          ADD      r3,r7,r3,ASR #24      ;620
0001c2  4293              CMP      r3,r2                 ;620
0001c4  db2b              BLT      |L14.542|
0001c6  eb0a0780          ADD      r7,r10,r0,LSL #2      ;622
0001ca  f8db2272          LDR      r2,[r11,#0x272]       ;622
0001ce  6838              LDR      r0,[r7,#0]            ;622
0001d0  f3424307          SBFX     r3,r2,#16,#8          ;622
0001d4  f3404807          SBFX     r8,r0,#16,#8          ;622
0001d8  4543              CMP      r3,r8                 ;622
0001da  bfa8              IT       GE                    ;622
0001dc  4643              MOVGE    r3,r8                 ;622
0001de  f3634c17          BFI      r12,r3,#16,#8         ;622
0001e2  1613              ASRS     r3,r2,#24             ;622
0001e4  ea4f6820          ASR      r8,r0,#24             ;622
0001e8  4543              CMP      r3,r8                 ;622
0001ea  bfd8              IT       LE                    ;622
0001ec  4643              MOVLE    r3,r8                 ;622
0001ee  f3636c1f          BFI      r12,r3,#24,#8         ;622
0001f2  fa4ff882          SXTB     r8,r2                 ;622
0001f6  b243              SXTB     r3,r0                 ;622
0001f8  4598              CMP      r8,r3                 ;622
0001fa  e000              B        |L14.510|
                  |L14.508|
0001fc  e00f              B        |L14.542|
                  |L14.510|
0001fe  bfb8              IT       LT                    ;622
000200  4643              MOVLT    r3,r8                 ;622
000202  f3630c07          BFI      r12,r3,#0,#8          ;622
000206  f3422207          SBFX     r2,r2,#8,#8           ;622
00020a  f3402007          SBFX     r0,r0,#8,#8           ;622
00020e  4282              CMP      r2,r0                 ;622
000210  bfd8              IT       LE                    ;622
000212  4602              MOVLE    r2,r0                 ;622
000214  f3622c0f          BFI      r12,r2,#8,#8          ;622
000218  f8c7c000          STR      r12,[r7,#0]           ;622
00021c  e016              B        |L14.588|
                  |L14.542|
00021e  1e40              SUBS     r0,r0,#1              ;622
000220  d2ae              BCS      |L14.384|
                  |L14.546|
000222  f1b80f00          CMP      r8,#0                 ;629
000226  d011              BEQ      |L14.588|
000228  eb040381          ADD      r3,r4,r1,LSL #2       ;630
00022c  eb0a028c          ADD      r2,r10,r12,LSL #2     ;630
000230  f8d33272          LDR      r3,[r3,#0x272]        ;630
000234  6013              STR      r3,[r2,#0]            ;630
000236  4875              LDR      r0,|L14.1036|
000238  f8962209          LDRB     r2,[r6,#0x209]        ;637
00023c  f805200c          STRB     r2,[r5,r12]           ;637
000240  f1bc0f10          CMP      r12,#0x10             ;639
000244  bf3c              ITT      CC                    ;640
000246  f10c0201          ADDCC    r2,r12,#1             ;640
00024a  7002              STRBCC   r2,[r0,#0]            ;640
                  |L14.588|
00024c  2001              MOVS     r0,#1                 ;643
00024e  9a1b              LDR      r2,[sp,#0x6c]         ;643
000250  f88200da          STRB     r0,[r2,#0xda]         ;643
                  |L14.596|
000254  1e49              SUBS     r1,r1,#1              ;643
;;;647    		}
;;;648    	}
000256  f4bfaf29          BCS      |L14.172|
;;;649    	
;;;650    	if(PalmDetectingFlag)
00025a  981d              LDR      r0,[sp,#0x74]
00025c  2800              CMP      r0,#0
00025e  d07d              BEQ      |L14.860|
;;;651    	{
;;;652    		int16_t MinDist = 0, Xdist = 0, Ydist = 0;
;;;653    		int8_t match_pl = 0;
;;;654    		//Expand Palm region method2
;;;655    		for(cl=temp_label->ucValidNum; cl--; )
000260  f8940271          LDRB     r0,[r4,#0x271]
000264  1e41              SUBS     r1,r0,#1
000266  d379              BCC      |L14.860|
;;;656    		{
;;;657    			if((IsPalm[cl] & 0x80) == 0)
;;;658    			{
;;;659    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;660    				if(!bPenPalmParam)
;;;661    					MinDist = thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST;
;;;662    				else
;;;663    					MinDist = thisModeConf->Palm.ucPenPalm_PALM_CONNECT_DIST;
;;;664    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;665    				MinDist = thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST;
;;;666    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;667    				match_pl = -1;
;;;668    				for(pl=PalmRegionNum; pl--; )
;;;669    				{
;;;670    					if(PalmRectEnable[pl])
;;;671    					{
;;;672    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;673    						if((!bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)) ||
;;;674    							(bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPenPalm_PALM_CONNECT_DIST))){
;;;675    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;676    						if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
000268  4a68              LDR      r2,|L14.1036|
00026a  981a              LDR      r0,[sp,#0x68]
00026c  9003              STR      r0,[sp,#0xc]          ;668
00026e  7810              LDRB     r0,[r2,#0]            ;668  ; PalmRegionNum
000270  46d1              MOV      r9,r10                ;620
000272  ae04              ADD      r6,sp,#0x10           ;463
000274  9018              STR      r0,[sp,#0x60]         ;463
                  |L14.630|
000276  5c70              LDRB     r0,[r6,r1]            ;657
000278  901f              STR      r0,[sp,#0x7c]         ;657
00027a  f0100f80          TST      r0,#0x80              ;657
00027e  d16e              BNE      |L14.862|
000280  9803              LDR      r0,[sp,#0xc]          ;665
000282  f8902204          LDRB     r2,[r0,#0x204]        ;665
000286  f04f30ff          MOV      r0,#0xffffffff        ;667
00028a  9020              STR      r0,[sp,#0x80]         ;667
00028c  9818              LDR      r0,[sp,#0x60]         ;667
00028e  9219              STR      r2,[sp,#0x64]         ;667
000290  1e40              SUBS     r0,r0,#1              ;667
000292  d364              BCC      |L14.862|
000294  eb040341          ADD      r3,r4,r1,LSL #1       ;599
000298  eb040a81          ADD      r10,r4,r1,LSL #2      ;620
00029c  9321              STR      r3,[sp,#0x84]         ;599
                  |L14.670|
00029e  5c2b              LDRB     r3,[r5,r0]            ;670
0002a0  b3f3              CBZ      r3,|L14.800|
0002a2  eb090880          ADD      r8,r9,r0,LSL #2
0002a6  f8dac272          LDR      r12,[r10,#0x272]
0002aa  f8d83000          LDR      r3,[r8,#0]
0002ae  4617              MOV      r7,r2
0002b0  f3432e07          SBFX     lr,r3,#8,#8
0002b4  fa4ffb8c          SXTB     r11,r12
0002b8  44be              ADD      lr,lr,r7
0002ba  45f3              CMP      r11,lr
0002bc  dc45              BGT      |L14.842|
0002be  f34c2e07          SBFX     lr,r12,#8,#8
0002c2  fa4ffb83          SXTB     r11,r3
0002c6  44be              ADD      lr,lr,r7
0002c8  45f3              CMP      r11,lr
0002ca  dc3e              BGT      |L14.842|
0002cc  f34c4b07          SBFX     r11,r12,#16,#8
0002d0  eb076e23          ADD      lr,r7,r3,ASR #24
0002d4  45f3              CMP      r11,lr
0002d6  dc38              BGT      |L14.842|
0002d8  f3434307          SBFX     r3,r3,#16,#8
0002dc  eb026c2c          ADD      r12,r2,r12,ASR #24
0002e0  459c              CMP      r12,r3
0002e2  db32              BLT      |L14.842|
;;;677    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;678    							Xdist = abs(temp_label->tValidMaxPos[cl].c - ((PalmRect[pl].cs+PalmRect[pl].ce)>>1)) - ((PalmRect[pl].ce-PalmRect[pl].cs)>>1);
0002e4  9f21              LDR      r7,[sp,#0x84]
0002e6  f998c002          LDRSB    r12,[r8,#2]
0002ea  f9983003          LDRSB    r3,[r8,#3]
0002ee  f99772b2          LDRSB    r7,[r7,#0x2b2]
0002f2  eb0c0b03          ADD      r11,r12,r3
0002f6  ebb7076b          SUBS     r7,r7,r11,ASR #1
0002fa  eba3030c          SUB      r3,r3,r12
0002fe  bf48              IT       MI
000300  427f              RSBMI    r7,r7,#0
000302  ebb70363          SUBS     r3,r7,r3,ASR #1
;;;679    							if(Xdist < 0) Xdist = 0;
000306  bf48              IT       MI
000308  2300              MOVMI    r3,#0
;;;680    							Ydist = abs(temp_label->tValidMaxPos[cl].r - ((PalmRect[pl].rs+PalmRect[pl].re)>>1)) - ((PalmRect[pl].re-PalmRect[pl].rs)>>1);
00030a  f998c000          LDRSB    r12,[r8,#0]
00030e  f9987001          LDRSB    r7,[r8,#1]
000312  f8dd8084          LDR      r8,[sp,#0x84]
000316  eb0c0b07          ADD      r11,r12,r7
00031a  f99882b3          LDRSB    r8,[r8,#0x2b3]
00031e  e000              B        |L14.802|
                  |L14.800|
000320  e013              B        |L14.842|
                  |L14.802|
000322  ebb8086b          SUBS     r8,r8,r11,ASR #1
000326  eba70c0c          SUB      r12,r7,r12
00032a  bf48              IT       MI
00032c  f1c80800          RSBMI    r8,r8,#0
000330  ebb80c6c          SUBS     r12,r8,r12,ASR #1
;;;681    							if(Ydist < 0) Ydist = 0;
000334  bf48              IT       MI
000336  f04f0c00          MOVMI    r12,#0
;;;682    							if(Xdist+Ydist < MinDist){
00033a  4463              ADD      r3,r3,r12
00033c  f8ddc064          LDR      r12,[sp,#0x64]
000340  4563              CMP      r3,r12
000342  da02              BGE      |L14.842|
;;;683    								MinDist = Xdist+Ydist;
;;;684    								match_pl = pl;
000344  9319              STR      r3,[sp,#0x64]
000346  b243              SXTB     r3,r0
000348  9320              STR      r3,[sp,#0x80]
                  |L14.842|
00034a  1e40              SUBS     r0,r0,#1
00034c  d2a7              BCS      |L14.670|
;;;685    							}
;;;686    						}
;;;687    						
;;;688    					}
;;;689    				}
;;;690    				if(match_pl != -1)
00034e  9820              LDR      r0,[sp,#0x80]
000350  f1b03fff          CMP      r0,#0xffffffff
000354  d036              BEQ      |L14.964|
;;;691    				{
;;;692    					PalmRect[match_pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[match_pl]);
000356  f8da7272          LDR      r7,[r10,#0x272]
00035a  e001              B        |L14.864|
                  |L14.860|
00035c  e035              B        |L14.970|
                  |L14.862|
00035e  e031              B        |L14.964|
                  |L14.864|
000360  9820              LDR      r0,[sp,#0x80]
000362  f3474807          SBFX     r8,r7,#16,#8
000366  eb090380          ADD      r3,r9,r0,LSL #2
00036a  f8d3c000          LDR      r12,[r3,#0]
00036e  f34c4007          SBFX     r0,r12,#16,#8
000372  4580              CMP      r8,r0
000374  bfb8              IT       LT
000376  4640              MOVLT    r0,r8
000378  f3604217          BFI      r2,r0,#16,#8
00037c  1638              ASRS     r0,r7,#24
00037e  ea4f682c          ASR      r8,r12,#24
000382  4540              CMP      r0,r8
000384  bfd8              IT       LE
000386  4640              MOVLE    r0,r8
000388  f360621f          BFI      r2,r0,#24,#8
00038c  fa4ff887          SXTB     r8,r7
000390  fa4ff08c          SXTB     r0,r12
000394  4580              CMP      r8,r0
000396  bfb8              IT       LT
000398  4640              MOVLT    r0,r8
00039a  f3600207          BFI      r2,r0,#0,#8
00039e  f3472007          SBFX     r0,r7,#8,#8
0003a2  f34c2c07          SBFX     r12,r12,#8,#8
0003a6  4560              CMP      r0,r12
0003a8  bfd8              IT       LE
0003aa  4660              MOVLE    r0,r12
0003ac  f360220f          BFI      r2,r0,#8,#8
0003b0  601a              STR      r2,[r3,#0]
;;;693    					if(IsPalm[cl] == 0){
0003b2  981f              LDR      r0,[sp,#0x7c]
0003b4  2800              CMP      r0,#0
;;;694    						IsPalm[cl] = 2;
0003b6  bf04              ITT      EQ
0003b8  2002              MOVEQ    r0,#2
0003ba  5470              STRBEQ   r0,[r6,r1]
;;;695    					}
;;;696    					IsPalm[cl] |= 0x80;
0003bc  5c70              LDRB     r0,[r6,r1]
0003be  f0400080          ORR      r0,r0,#0x80
0003c2  5470              STRB     r0,[r6,r1]
                  |L14.964|
0003c4  1e49              SUBS     r1,r1,#1
0003c6  f4bfaf56          BCS      |L14.630|
                  |L14.970|
;;;697    				}
;;;698    			}
;;;699    		}
;;;700    		
;;;701    		//Expand Palm region
;;;702    //		for(pl=PalmRegionNum; pl--; )
;;;703    //		{
;;;704    //			if(PalmRectEnable[pl])
;;;705    //			{
;;;706    //				uint8_t expand_flag = YES;
;;;707    //				while(expand_flag){
;;;708    //					expand_flag = NO;
;;;709    //					for( cl=temp_label->ucValidNum; cl--; )
;;;710    //					{
;;;711    //						if((IsPalm[cl] & 0x80) == 0)
;;;712    //						{
;;;713    //							if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
;;;714    //								PalmRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[pl]);
;;;715    //								expand_flag = YES;
;;;716    //								if(IsPalm[cl] == 0){
;;;717    //									IsPalm[cl] = 2;
;;;718    //								}
;;;719    //								IsPalm[cl] |= 0x80;
;;;720    //							}
;;;721    //						}
;;;722    //					}
;;;723    //				}
;;;724    //			}
;;;725    //		}
;;;726    	}
;;;727    	
;;;728    	//Release or downsize palm region
;;;729    	for(pl=PalmRegionNum; pl--; )
0003ca  4810              LDR      r0,|L14.1036|
0003cc  7800              LDRB     r0,[r0,#0]  ; PalmRegionNum
0003ce  9019              STR      r0,[sp,#0x64]
0003d0  f1b00b01          SUBS     r11,r0,#1
0003d4  d379              BCC      |L14.1226|
;;;730    	{
;;;731    		if(PalmRectEnable[pl])
;;;732    		{
;;;733    			uint8_t TouchedFlag = 0, ParentLabelIdx = 0;
;;;734    			uint16_t MaxCellCnt = 0;
;;;735    			for( cl=temp_label->ucValidNum; cl--; )
;;;736    			{
;;;737    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;738    				if((!bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)) ||
;;;739    					(bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPenPalm_PALM_CONNECT_DIST))){		//Overlap
;;;740    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;741    				if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){		//Overlap
0003d6  480d              LDR      r0,|L14.1036|
;;;742    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */			
;;;743    					if( (IsPalm[cl] & 0x0F) > 0 )
;;;744    						TouchedFlag = 1;
;;;745    					else if(TouchedFlag == 0)	//For debugging
;;;746    						TouchedFlag = 2;
;;;747    					
;;;748    					if(MaxCellCnt < temp_label->usValidCellCnt[cl]){
;;;749    						MaxCellCnt = temp_label->usValidCellCnt[cl];
;;;750    						ParentLabelIdx = cl;
;;;751    					}
;;;752    				}
;;;753    			}
;;;754    			
;;;755    			//if no touch label in palm region during KEEPPALMREGIONFRAME, release palm region.
;;;756    			if(TouchedFlag == 0){
;;;757    				if(PalmRectEnable[pl])						PalmRectEnable[pl]--;
;;;758    //				if(PalmRectEnable[pl]==0 && PalmRegionNum>0)	PalmRegionNum--;		//Release palm region
;;;759    			}
;;;760    			else{
;;;761    				uint8_t CascadeFlag = YES;	//Cascade label based on parent label
;;;762    				uint8_t CheckCascade[LOOSE_POSBUF_] = {0};
;;;763    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;764    				if(bPenPalmParam)
;;;765    					PalmRectEnable[pl] = thisModeConf->Palm.ucPenPalm_KEEPPALMREGIONFRAME;
;;;766    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */				
;;;767    				
;;;768    				if(PalmRegionUpdateCnt++ > thisModeConf->Palm.ucPalm_PALM_REGION_UPDATE_PERIOD)
;;;769    				{
;;;770    					PalmRegionUpdateCnt = 0;
0003d8  9d1a              LDR      r5,[sp,#0x68]
0003da  f8dfe034          LDR      lr,|L14.1040|
0003de  68c0              LDR      r0,[r0,#0xc]  ; PalmRegionUpdateCnt
0003e0  f8cd0090          STR.W    r0,[sp,#0x90]         ;553
                  |L14.996|
0003e4  f81e800b          LDRB     r8,[lr,r11]           ;731
0003e8  f1b80f00          CMP      r8,#0                 ;731
0003ec  d06e              BEQ      |L14.1228|
0003ee  2700              MOVS     r7,#0                 ;733
0003f0  971a              STR      r7,[sp,#0x68]         ;735
0003f2  f8941271          LDRB     r1,[r4,#0x271]        ;735
0003f6  46ba              MOV      r10,r7                ;734
0003f8  1e48              SUBS     r0,r1,#1              ;735
0003fa  d36c              BCC      |L14.1238|
0003fc  4a06              LDR      r2,|L14.1048|
0003fe  f8951204          LDRB     r1,[r5,#0x204]        ;620
000402  eb02028b          ADD      r2,r2,r11,LSL #2      ;620
000406  921b              STR      r2,[sp,#0x6c]         ;620
000408  6812              LDR      r2,[r2,#0]            ;620
                  |L14.1034|
00040a  e007              B        |L14.1052|
                  |L14.1036|
                          DCD      ||.data||
                  |L14.1040|
                          DCD      ||.bss||
                  |L14.1044|
                          DCD      FullSharedBuff
                  |L14.1048|
                          DCD      ||.bss||+0xa
                  |L14.1052|
00041c  eb040380          ADD      r3,r4,r0,LSL #2       ;741
000420  f3422607          SBFX     r6,r2,#8,#8           ;741
000424  f8d33272          LDR      r3,[r3,#0x272]        ;741
000428  440e              ADD      r6,r6,r1              ;741
00042a  fa4ffc83          SXTB     r12,r3                ;741
00042e  45b4              CMP      r12,r6                ;741
000430  dc25              BGT      |L14.1150|
000432  f3432607          SBFX     r6,r3,#8,#8           ;741
000436  fa4ffc82          SXTB     r12,r2                ;741
00043a  440e              ADD      r6,r6,r1              ;741
00043c  45b4              CMP      r12,r6                ;741
00043e  dc1e              BGT      |L14.1150|
000440  f3434c07          SBFX     r12,r3,#16,#8         ;741
000444  eb016622          ADD      r6,r1,r2,ASR #24      ;741
000448  45b4              CMP      r12,r6                ;741
00044a  dc18              BGT      |L14.1150|
00044c  f3424c07          SBFX     r12,r2,#16,#8         ;741
000450  eb016323          ADD      r3,r1,r3,ASR #24      ;741
000454  459c              CMP      r12,r3                ;741
000456  dc12              BGT      |L14.1150|
000458  ab04              ADD      r3,sp,#0x10           ;743
00045a  5c1b              LDRB     r3,[r3,r0]            ;743
00045c  f0130f0f          TST      r3,#0xf               ;743
000460  bf18              IT       NE                    ;744
000462  2701              MOVNE    r7,#1                 ;744
000464  d102              BNE      |L14.1132|
000466  2f00              CMP      r7,#0                 ;745
000468  bf08              IT       EQ                    ;746
00046a  2702              MOVEQ    r7,#2                 ;746
                  |L14.1132|
00046c  eb040340          ADD      r3,r4,r0,LSL #1       ;748
000470  f8b332f2          LDRH     r3,[r3,#0x2f2]        ;748
000474  4553              CMP      r3,r10                ;748
000476  d902              BLS      |L14.1150|
000478  469a              MOV      r10,r3                ;749
00047a  b2c3              UXTB     r3,r0                 ;750
00047c  931a              STR      r3,[sp,#0x68]         ;750
                  |L14.1150|
00047e  1e40              SUBS     r0,r0,#1              ;750
000480  d2c3              BCS      |L14.1034|
000482  b32f              CBZ      r7,|L14.1232|
000484  2000              MOVS     r0,#0                 ;762
000486  901c              STR      r0,[sp,#0x70]         ;762
000488  901d              STR      r0,[sp,#0x74]         ;762
00048a  901e              STR      r0,[sp,#0x78]         ;762
00048c  901f              STR      r0,[sp,#0x7c]         ;762
00048e  9824              LDR      r0,[sp,#0x90]         ;768
000490  1c41              ADDS     r1,r0,#1              ;768
000492  9124              STR      r1,[sp,#0x90]         ;768
000494  f8951205          LDRB     r1,[r5,#0x205]        ;768
000498  4288              CMP      r0,r1                 ;768
00049a  dd72              BLE      |L14.1410|
00049c  2000              MOVS     r0,#0
;;;771    					CascadeRect[pl] = temp_label->tValidRect[ParentLabelIdx];	//Initial cascade label
00049e  9024              STR      r0,[sp,#0x90]
0004a0  a808              ADD      r0,sp,#0x20
0004a2  eb00038b          ADD      r3,r0,r11,LSL #2
0004a6  981a              LDR      r0,[sp,#0x68]
0004a8  ae1c              ADD      r6,sp,#0x70           ;762
0004aa  eb040080          ADD      r0,r4,r0,LSL #2
0004ae  f04f0a01          MOV      r10,#1                ;559
0004b2  f8d00272          LDR      r0,[r0,#0x272]
0004b6  6018              STR      r0,[r3,#0]
                  |L14.1208|
;;;772    					while(CascadeFlag){
;;;773    						CascadeFlag = NO;
;;;774    						for( cl=temp_label->ucValidNum; cl--; )
0004b8  f8941271          LDRB     r1,[r4,#0x271]
0004bc  f04f0800          MOV      r8,#0                 ;773
0004c0  1e48              SUBS     r0,r1,#1
0004c2  d35b              BCC      |L14.1404|
                  |L14.1220|
;;;775    						{
;;;776    							if(CheckCascade[cl] == NO){
0004c4  5c31              LDRB     r1,[r6,r0]
0004c6  bbe1              CBNZ     r1,|L14.1346|
0004c8  e00a              B        |L14.1248|
                  |L14.1226|
0004ca  e061              B        |L14.1424|
                  |L14.1228|
0004cc  e059              B        |L14.1410|
0004ce  e002              B        |L14.1238|
                  |L14.1232|
0004d0  f1b80f00          CMP      r8,#0                 ;757
0004d4  d055              BEQ      |L14.1410|
                  |L14.1238|
0004d6  f1a80001          SUB      r0,r8,#1              ;757
0004da  f80e000b          STRB     r0,[lr,r11]           ;757
0004de  e050              B        |L14.1410|
                  |L14.1248|
;;;777    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;778    								if((!bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], CascadeRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)) ||
;;;779    									(bPenPalmParam && algorithm_nearby_rect(temp_label->tValidRect[cl], CascadeRect[pl], thisModeConf->Palm.ucPenPalm_PALM_CONNECT_DIST))){
;;;780    #else /* (PENnPalm_PalmAreaMaintain_EN == YES) */
;;;781    								if(algorithm_nearby_rect(temp_label->tValidRect[cl], CascadeRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
0004e0  eb040180          ADD      r1,r4,r0,LSL #2
0004e4  f895c204          LDRB     r12,[r5,#0x204]
0004e8  f8d12272          LDR      r2,[r1,#0x272]
0004ec  6819              LDR      r1,[r3,#0]
0004ee  b257              SXTB     r7,r2
0004f0  f3412907          SBFX     r9,r1,#8,#8
0004f4  44e1              ADD      r9,r9,r12
0004f6  454f              CMP      r7,r9
0004f8  dc3b              BGT      |L14.1394|
0004fa  f3422907          SBFX     r9,r2,#8,#8
0004fe  b24f              SXTB     r7,r1
000500  44e1              ADD      r9,r9,r12
000502  454f              CMP      r7,r9
000504  dc35              BGT      |L14.1394|
000506  f3424707          SBFX     r7,r2,#16,#8
00050a  eb0c6921          ADD      r9,r12,r1,ASR #24
00050e  454f              CMP      r7,r9
000510  dc2f              BGT      |L14.1394|
000512  f3414707          SBFX     r7,r1,#16,#8
000516  eb0c6c22          ADD      r12,r12,r2,ASR #24
00051a  45bc              CMP      r12,r7
00051c  db29              BLT      |L14.1394|
00051e  f3424707          SBFX     r7,r2,#16,#8
000522  f3414807          SBFX     r8,r1,#16,#8
000526  4547              CMP      r7,r8
000528  bfa8              IT       GE
00052a  4647              MOVGE    r7,r8
00052c  f3674c17          BFI      r12,r7,#16,#8
000530  ea4f6822          ASR      r8,r2,#24
000534  160f              ASRS     r7,r1,#24
000536  45b8              CMP      r8,r7
000538  bfc8              IT       GT
00053a  4647              MOVGT    r7,r8
00053c  f3676c1f          BFI      r12,r7,#24,#8
000540  e000              B        |L14.1348|
                  |L14.1346|
000542  e016              B        |L14.1394|
                  |L14.1348|
000544  fa4ff882          SXTB     r8,r2
000548  b24f              SXTB     r7,r1
00054a  45b8              CMP      r8,r7
00054c  bfb8              IT       LT
00054e  4647              MOVLT    r7,r8
000550  f3670c07          BFI      r12,r7,#0,#8
000554  f3422207          SBFX     r2,r2,#8,#8
000558  f3412107          SBFX     r1,r1,#8,#8
00055c  428a              CMP      r2,r1
00055e  bfc8              IT       GT
000560  4611              MOVGT    r1,r2
000562  f3612c0f          BFI      r12,r1,#8,#8
;;;782    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */							
;;;783    									CascadeRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], CascadeRect[pl]);	//Update cascade rect
;;;784    									CascadeFlag = YES;
;;;785    									CheckCascade[cl] = YES;
000566  f8c3c000          STR      r12,[r3,#0]
00056a  f04f0801          MOV      r8,#1                 ;784
00056e  f806a000          STRB     r10,[r6,r0]
                  |L14.1394|
000572  1e40              SUBS     r0,r0,#1
000574  d2a6              BCS      |L14.1220|
000576  f1b80f00          CMP      r8,#0
00057a  d19d              BNE      |L14.1208|
                  |L14.1404|
;;;786    								}
;;;787    							}
;;;788    						}
;;;789    					}
;;;790    					//downsize palm region
;;;791    //					PalmRect[pl] = CascadeRect[pl];
;;;792    //					PalmRect[pl].cs = ((CascadeRect[pl].cs + PalmRect[pl].cs)>>1);
;;;793    //					PalmRect[pl].ce = ((CascadeRect[pl].ce + PalmRect[pl].ce)>>1);
;;;794    //					PalmRect[pl].rs = ((CascadeRect[pl].rs + PalmRect[pl].rs)>>1);
;;;795    //					PalmRect[pl].re = ((CascadeRect[pl].re + PalmRect[pl].re)>>1);
;;;796    					
;;;797    					PalmRect[pl] = CascadeRect[pl];
00057c  981b              LDR      r0,[sp,#0x6c]
00057e  6819              LDR      r1,[r3,#0]
000580  6001              STR      r1,[r0,#0]
                  |L14.1410|
000582  f1bb0b01          SUBS     r11,r11,#1
;;;798    				}
;;;799    			}
;;;800    		}
000586  f4bfaf2d          BCS      |L14.996|
00058a  496a              LDR      r1,|L14.1844|
00058c  9824              LDR      r0,[sp,#0x90]         ;770
00058e  60c8              STR      r0,[r1,#0xc]          ;770  ; PalmRegionUpdateCnt
                  |L14.1424|
;;;801    	}
;;;802    	
;;;803    	//Merge overlapped palm region
;;;804    	for(pl=0; pl<PalmRegionNum; pl++)
000590  9819              LDR      r0,[sp,#0x64]
000592  2300              MOVS     r3,#0
000594  f8dfe19c          LDR      lr,|L14.1844|
000598  2800              CMP      r0,#0
00059a  dd59              BLE      |L14.1616|
00059c  4d66              LDR      r5,|L14.1848|
00059e  4684              MOV      r12,r0
0005a0  469b              MOV      r11,r3
0005a2  f105090a          ADD      r9,r5,#0xa            ;620
                  |L14.1446|
;;;805    	{
;;;806    		if(PalmRectEnable[pl])
0005a6  5ce8              LDRB     r0,[r5,r3]
0005a8  2800              CMP      r0,#0
;;;807    		{
;;;808    			for(pl2 = pl+1; pl2 < PalmRegionNum; pl2++)
0005aa  bf1c              ITT      NE
0005ac  1c58              ADDNE    r0,r3,#1
0005ae  4560              CMPNE    r0,r12
0005b0  bfb8              IT       LT                    ;620
0005b2  eb090683          ADDLT    r6,r9,r3,LSL #2       ;620
0005b6  da48              BGE      |L14.1610|
                  |L14.1464|
;;;809    			{
;;;810    				if(PalmRectEnable[pl2])
0005b8  5c29              LDRB     r1,[r5,r0]
0005ba  b3d9              CBZ      r1,|L14.1588|
;;;811    				{
;;;812    					if(algorithm_nearby_rect(PalmRect[pl], PalmRect[pl2], 0)){
0005bc  eb090180          ADD      r1,r9,r0,LSL #2
0005c0  6832              LDR      r2,[r6,#0]
0005c2  6809              LDR      r1,[r1,#0]
0005c4  fa4ff882          SXTB     r8,r2
0005c8  f3412707          SBFX     r7,r1,#8,#8
0005cc  45b8              CMP      r8,r7
0005ce  dc39              BGT      |L14.1604|
0005d0  fa4ff881          SXTB     r8,r1
0005d4  f3422707          SBFX     r7,r2,#8,#8
0005d8  45b8              CMP      r8,r7
0005da  dc33              BGT      |L14.1604|
0005dc  f3424807          SBFX     r8,r2,#16,#8
0005e0  160f              ASRS     r7,r1,#24
0005e2  45b8              CMP      r8,r7
0005e4  dc2e              BGT      |L14.1604|
0005e6  f3414707          SBFX     r7,r1,#16,#8
0005ea  ea4f6822          ASR      r8,r2,#24
0005ee  45b8              CMP      r8,r7
0005f0  db28              BLT      |L14.1604|
0005f2  f3424807          SBFX     r8,r2,#16,#8
0005f6  f3414a07          SBFX     r10,r1,#16,#8
0005fa  45d0              CMP      r8,r10
0005fc  bfa8              IT       GE
0005fe  46d0              MOVGE    r8,r10
000600  f3684717          BFI      r7,r8,#16,#8
000604  ea4f6a22          ASR      r10,r2,#24
000608  ea4f6821          ASR      r8,r1,#24
00060c  45c2              CMP      r10,r8
00060e  bfc8              IT       GT
000610  46d0              MOVGT    r8,r10
000612  f368671f          BFI      r7,r8,#24,#8
000616  fa4ffa82          SXTB     r10,r2
00061a  fa4ff881          SXTB     r8,r1
00061e  45c2              CMP      r10,r8
000620  bfb8              IT       LT
000622  46d0              MOVLT    r8,r10
000624  f3680707          BFI      r7,r8,#0,#8
000628  f3422207          SBFX     r2,r2,#8,#8
00062c  f3412107          SBFX     r1,r1,#8,#8
000630  428a              CMP      r2,r1
000632  e000              B        |L14.1590|
                  |L14.1588|
000634  e006              B        |L14.1604|
                  |L14.1590|
000636  bfc8              IT       GT
000638  4611              MOVGT    r1,r2
00063a  f361270f          BFI      r7,r1,#8,#8
;;;813    						PalmRect[pl] = algorithm_merge_rect(PalmRect[pl], PalmRect[pl2]);
00063e  6037              STR      r7,[r6,#0]
;;;814    						PalmRectEnable[pl2] = NO;
000640  f805b000          STRB     r11,[r5,r0]
                  |L14.1604|
000644  1c40              ADDS     r0,r0,#1
000646  4560              CMP      r0,r12
000648  dbb6              BLT      |L14.1464|
                  |L14.1610|
00064a  1c5b              ADDS     r3,r3,#1
00064c  4563              CMP      r3,r12
00064e  dbaa              BLT      |L14.1446|
                  |L14.1616|
;;;815    						
;;;816    					}
;;;817    				}
;;;818    			}
;;;819    		}
;;;820    	}
;;;821    	
;;;822    	//Rearrange PalmRect
;;;823    	PalmCnt = 0;
;;;824    	for(pl=0; pl<PalmRegionNum; pl++)
000650  9819              LDR      r0,[sp,#0x64]
000652  2100              MOVS     r1,#0                 ;823
000654  b398              CBZ      r0,|L14.1726|
000656  4a38              LDR      r2,|L14.1848|
000658  f102080a          ADD      r8,r2,#0xa
00065c  f1080301          ADD      r3,r8,#1
000660  1c5e              ADDS     r6,r3,#1
000662  f102070a          ADD      r7,r2,#0xa
000666  1c9d              ADDS     r5,r3,#2
000668  ea4f0902          MOV.W    r9,r2                 ;553
                  |L14.1644|
;;;825    	{
;;;826    		if(PalmRectEnable[pl])
00066c  f892c000          LDRB     r12,[r2,#0]
000670  f1bc0f00          CMP      r12,#0
000674  d017              BEQ      |L14.1702|
;;;827    		{
;;;828    			PalmRect[PalmCnt] = PalmRect[pl];
000676  eb080c81          ADD      r12,r8,r1,LSL #2
00067a  f897a000          LDRB     r10,[r7,#0]
00067e  f88ca000          STRB     r10,[r12,#0]
000682  f893a000          LDRB     r10,[r3,#0]
000686  f88ca001          STRB     r10,[r12,#1]
00068a  f896a000          LDRB     r10,[r6,#0]
00068e  f88ca002          STRB     r10,[r12,#2]
000692  f895a000          LDRB     r10,[r5,#0]
000696  f88ca003          STRB     r10,[r12,#3]
;;;829    			PalmRectEnable[PalmCnt] = PalmRectEnable[pl];
00069a  f892c000          LDRB     r12,[r2,#0]
00069e  f809c001          STRB     r12,[r9,r1]
0006a2  1c49              ADDS     r1,r1,#1
;;;830    			PalmCnt++;
0006a4  b2c9              UXTB     r1,r1
                  |L14.1702|
0006a6  1e40              SUBS     r0,r0,#1
0006a8  f1020201          ADD      r2,r2,#1
0006ac  f1030304          ADD      r3,r3,#4
0006b0  f1050504          ADD      r5,r5,#4
0006b4  f1060604          ADD      r6,r6,#4
0006b8  f1070704          ADD      r7,r7,#4
;;;831    		}
0006bc  d1d6              BNE      |L14.1644|
                  |L14.1726|
;;;832    	}
;;;833    	PalmRegionNum = PalmCnt;
0006be  f88e1000          STRB     r1,[lr,#0]
;;;834    			
;;;835    	//Remove Palm label
;;;836    	{
;;;837    		int normal_label_num = 0;
0006c2  2100              MOVS     r1,#0
;;;838    		for(cl = 0;cl < temp_label->ucValidNum;cl++)
0006c4  f8942271          LDRB     r2,[r4,#0x271]
0006c8  4608              MOV      r0,r1
0006ca  2a00              CMP      r2,#0
0006cc  dd13              BLE      |L14.1782|
0006ce  9a23              LDR      r2,[sp,#0x8c]         ;643
0006d0  f10d0c10          ADD      r12,sp,#0x10          ;463
0006d4  2501              MOVS     r5,#1                 ;559
0006d6  f5025680          ADD      r6,r2,#0x1000         ;643
;;;839    		{
;;;840    			if((IsPalm[cl] & 0x0F) == 0){
0006da  bf00              NOP      
                  |L14.1756|
0006dc  f81c2000          LDRB     r2,[r12,r0]
0006e0  f0120f0f          TST      r2,#0xf
;;;841    				temp_label->tValidRect[normal_label_num] = temp_label->tValidRect[cl];
;;;842    				temp_label->sValidMaxVal[normal_label_num] = temp_label->sValidMaxVal[cl];
;;;843    				temp_label->tValidMaxPos[normal_label_num] = temp_label->tValidMaxPos[cl];
;;;844    				temp_label->usValidCellCnt[normal_label_num] = temp_label->usValidCellCnt[cl];
;;;845    				normal_label_num++;
;;;846    			}
;;;847    			else
;;;848    				thisInfo->bIsPalm = YES;
0006e4  bf18              IT       NE
0006e6  f88650da          STRBNE   r5,[r6,#0xda]
0006ea  d009              BEQ      |L14.1792|
                  |L14.1772|
0006ec  f8942271          LDRB     r2,[r4,#0x271]
0006f0  1c40              ADDS     r0,r0,#1
0006f2  4282              CMP      r2,r0
0006f4  dcf2              BGT      |L14.1756|
                  |L14.1782|
;;;849    		}
;;;850    		temp_label->ucValidNum = normal_label_num;
0006f6  f8841271          STRB     r1,[r4,#0x271]
;;;851    	}
;;;852    #if (PENnPalm_PalmAreaMaintain_EN == YES)
;;;853    	for(cl = 0; cl < LOOSE_POSBUF_; cl++)
;;;854    	{
;;;855    		if((IsPalm[cl] & 0x0F) == 1)
;;;856    			thisInfo->bWasPalm_AtLeastOnce = 1;
;;;857    	}
;;;858    #endif /* (PENnPalm_PalmAreaMaintain_EN == YES) */	
;;;859    }
0006fa  b027              ADD      sp,sp,#0x9c
0006fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.1792|
000700  eb040380          ADD      r3,r4,r0,LSL #2       ;841
000704  eb040281          ADD      r2,r4,r1,LSL #2       ;841
000708  f8d33272          LDR      r3,[r3,#0x272]        ;841
00070c  f8c23272          STR      r3,[r2,#0x272]        ;841
000710  eb040340          ADD      r3,r4,r0,LSL #1       ;842
000714  eb040241          ADD      r2,r4,r1,LSL #1       ;842
000718  f8b372d2          LDRH     r7,[r3,#0x2d2]        ;842
00071c  f8a272d2          STRH     r7,[r2,#0x2d2]        ;842
000720  f8b372b2          LDRH     r7,[r3,#0x2b2]        ;843
000724  f8a272b2          STRH     r7,[r2,#0x2b2]        ;843
000728  f8b332f2          LDRH     r3,[r3,#0x2f2]        ;844
00072c  f8a232f2          STRH     r3,[r2,#0x2f2]        ;844
000730  1c49              ADDS     r1,r1,#1              ;844
000732  e7db              B        |L14.1772|
;;;860    
                          ENDP

                  |L14.1844|
                          DCD      ||.data||
                  |L14.1848|
                          DCD      ||.bss||

                          AREA ||i.algorithm_label_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_process PROC
;;;2816   
;;;2817   void algorithm_label_process(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2818   {
000004  4682              MOV      r10,r0
000006  481e              LDR      r0,|L15.128|
000008  2400              MOVS     r4,#0
00000a  2610              MOVS     r6,#0x10
00000c  6885              LDR      r5,[r0,#8]  ; thisInfo
00000e  2701              MOVS     r7,#1
000010  f04f0853          MOV      r8,#0x53
000014  f8054f45          STRB     r4,[r5,#0x45]!
000018  f04f092f          MOV      r9,#0x2f
00001c  f8854271          STRB     r4,[r5,#0x271]
                  |L15.32|
000020  1e76              SUBS     r6,r6,#1
000022  ebc600c6          RSB      r0,r6,r6,LSL #3
000026  eb001046          ADD      r0,r0,r6,LSL #5
00002a  4428              ADD      r0,r0,r5
00002c  2127              MOVS     r1,#0x27
00002e  1c40              ADDS     r0,r0,#1
000030  f7fffffe          BL       __aeabi_memclr
000034  eb050086          ADD      r0,r5,r6,LSL #2
000038  eb050146          ADD      r1,r5,r6,LSL #1
00003c  f8808274          STRB     r8,[r0,#0x274]
000040  f8804275          STRB     r4,[r0,#0x275]
000044  f8809272          STRB     r9,[r0,#0x272]
000048  f8804273          STRB     r4,[r0,#0x273]
00004c  f8a142d2          STRH     r4,[r1,#0x2d2]
000050  f8a142f2          STRH     r4,[r1,#0x2f2]
000054  f88142b2          STRB     r4,[r1,#0x2b2]
000058  1c7f              ADDS     r7,r7,#1
00005a  f88142b3          STRB     r4,[r1,#0x2b3]
00005e  2f10              CMP      r7,#0x10
000060  ddde              BLE      |L15.32|
000062  f44f617c          MOV      r1,#0xfc0
000066  4807              LDR      r0,|L15.132|
000068  f7fffffe          BL       __aeabi_memclr4
00006c  f44f517c          MOV      r1,#0x3f00
000070  4805              LDR      r0,|L15.136|
000072  f7fffffe          BL       __aeabi_memclr4
;;;2819   	algorithm_label_initialise(mode);
;;;2820   
;;;2821   //	if( (thisInfo->bTouchExpect && mode == FULL_MODE) | (thisInfo->bTouchExpect && mode == LOCAL_FINGER_MODE) 
;;;2822   //		| (thisInfo->bTouchExpect_local && mode == LOCAL_MODE) | (thisInfo->bTouchExpect_local && mode == LOCAL_HOVER_MODE))
;;;2823   	{
;;;2824   		algorithm_label_SplitNMerge_process(mode);
000076  4650              MOV      r0,r10
000078  e8bd47f0          POP      {r4-r10,lr}
00007c  f7ffbffe          B.W      algorithm_label_SplitNMerge_process
;;;2825   	}
;;;2826   }
                          ENDP

                  |L15.128|
                          DCD      ||.data||
                  |L15.132|
                          DCD      FullSharedBuff+0x11640
                  |L15.136|
                          DCD      FullSharedBuff+0xb7c0

                          AREA ||i.algorithm_merge_rect||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect PROC
;;;417    
;;;418    tRect_t algorithm_merge_rect(tRect_t RectA, tRect_t RectB)
000000  f3404c07          SBFX     r12,r0,#16,#8
;;;419    {
000004  f3414207          SBFX     r2,r1,#16,#8
000008  4603              MOV      r3,r0
;;;420    	tRect_t RectC;
;;;421    	
;;;422    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00000a  4594              CMP      r12,r2
00000c  bfb8              IT       LT
00000e  4662              MOVLT    r2,r12
000010  f3624017          BFI      r0,r2,#16,#8
000014  ea4f6c23          ASR      r12,r3,#24
000018  160a              ASRS     r2,r1,#24
;;;423    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
00001a  4594              CMP      r12,r2
00001c  bfc8              IT       GT
00001e  4662              MOVGT    r2,r12
000020  f362601f          BFI      r0,r2,#24,#8
000024  fa4ffc83          SXTB     r12,r3
000028  b24a              SXTB     r2,r1
;;;424    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
00002a  4594              CMP      r12,r2
00002c  bfb8              IT       LT
00002e  4662              MOVLT    r2,r12
000030  f3620007          BFI      r0,r2,#0,#8
000034  f3432207          SBFX     r2,r3,#8,#8
000038  f3412107          SBFX     r1,r1,#8,#8
;;;425    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
00003c  428a              CMP      r2,r1
00003e  bfd8              IT       LE
000040  460a              MOVLE    r2,r1
000042  f362200f          BFI      r0,r2,#8,#8
;;;426    	
;;;427    	return RectC;
;;;428    }
000046  4770              BX       lr
;;;429    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
                          ENDP


                          AREA ||i.algorithm_merge_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect_point PROC
;;;437    }
;;;438    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
000000  b470              PUSH     {r4-r6}
;;;439    {
;;;440    	tRect_t RectB, RectC;
;;;441    	
;;;442    	RectB.cs = 0 < (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)-1 : 0;
000002  ea4f2c21          ASR      r12,r1,#8
000006  4604              MOV      r4,r0                 ;439
000008  f1bc0f00          CMP      r12,#0
00000c  bfcc              ITE      GT
00000e  f1ac0301          SUBGT    r3,r12,#1
000012  2300              MOVLE    r3,#0
000014  b25b              SXTB     r3,r3
;;;443    	RectB.ce = (COL_MAX - 1) > (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)+1 : (COL_MAX - 1);
000016  2553              MOVS     r5,#0x53
000018  ebb52f21          CMP      r5,r1,ASR #8
00001c  bfcc              ITE      GT
00001e  f10c0101          ADDGT    r1,r12,#1
000022  2153              MOVLE    r1,#0x53
000024  b249              SXTB     r1,r1
;;;444    	RectB.rs = 0 < (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)-1 : 0;
000026  1215              ASRS     r5,r2,#8
000028  2d00              CMP      r5,#0
00002a  bfcc              ITE      GT
00002c  f1a50c01          SUBGT    r12,r5,#1
000030  f04f0c00          MOVLE    r12,#0
000034  fa4ffc8c          SXTB     r12,r12
;;;445    	RectB.re = (ROW_MAX - 1) > (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)+1 : (ROW_MAX - 1);
000038  262f              MOVS     r6,#0x2f
00003a  ebb62f22          CMP      r6,r2,ASR #8
00003e  bfcc              ITE      GT
000040  1c6a              ADDGT    r2,r5,#1
000042  222f              MOVLE    r2,#0x2f
000044  b252              SXTB     r2,r2
000046  f3444507          SBFX     r5,r4,#16,#8
;;;446    	
;;;447    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00004a  429d              CMP      r5,r3
00004c  bfb8              IT       LT
00004e  462b              MOVLT    r3,r5
000050  f3634017          BFI      r0,r3,#16,#8
000054  1623              ASRS     r3,r4,#24
;;;448    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
000056  428b              CMP      r3,r1
000058  bfc8              IT       GT
00005a  4619              MOVGT    r1,r3
00005c  f361601f          BFI      r0,r1,#24,#8
000060  b261              SXTB     r1,r4
;;;449    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
000062  4561              CMP      r1,r12
000064  bfb8              IT       LT
000066  468c              MOVLT    r12,r1
000068  f36c0007          BFI      r0,r12,#0,#8
00006c  f3442107          SBFX     r1,r4,#8,#8
;;;450    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
000070  4291              CMP      r1,r2
000072  bfc8              IT       GT
000074  460a              MOVGT    r2,r1
000076  f362200f          BFI      r0,r2,#8,#8
;;;451    	
;;;452    //	RectC.cs = RectA.cs < (PointA.x>>POS_BOOST_SHIFT_) ? RectA.cs : (PointA.x>>POS_BOOST_SHIFT_);
;;;453    //	RectC.ce = RectA.ce > (PointA.x>>POS_BOOST_SHIFT_) ? RectA.ce : (PointA.x>>POS_BOOST_SHIFT_);
;;;454    //	RectC.rs = RectA.rs < (PointA.y>>POS_BOOST_SHIFT_) ? RectA.rs : (PointA.y>>POS_BOOST_SHIFT_);
;;;455    //	RectC.re = RectA.re > (PointA.y>>POS_BOOST_SHIFT_) ? RectA.re : (PointA.y>>POS_BOOST_SHIFT_);
;;;456    	
;;;457    	return RectC;
;;;458    }
00007a  bc70              POP      {r4-r6}
00007c  4770              BX       lr
;;;459    //#define KEEPPALMREGIONFRAME 50
                          ENDP


                          AREA ||i.algorithm_nearby_rect||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect PROC
;;;407    
;;;408    bool_t algorithm_nearby_rect(tRect_t RectA, tRect_t RectB, uint8_t dist_th)
000000  f3412c07          SBFX     r12,r1,#8,#8
;;;409    {
000004  b243              SXTB     r3,r0
;;;410    	if(RectA.rs <= RectB.re+dist_th && RectB.rs <= RectA.re+dist_th){
000006  4494              ADD      r12,r12,r2
000008  4563              CMP      r3,r12
00000a  dc13              BGT      |L18.52|
00000c  f3402c07          SBFX     r12,r0,#8,#8          ;409
000010  b24b              SXTB     r3,r1                 ;409
000012  4494              ADD      r12,r12,r2
000014  4563              CMP      r3,r12
000016  dc0d              BGT      |L18.52|
000018  f3404307          SBFX     r3,r0,#16,#8
;;;411    		if(RectA.cs <= RectB.ce+dist_th && RectB.cs <= RectA.ce+dist_th){
00001c  eb026c21          ADD      r12,r2,r1,ASR #24
000020  4563              CMP      r3,r12
000022  dc07              BGT      |L18.52|
000024  f3414107          SBFX     r1,r1,#16,#8
000028  eb026020          ADD      r0,r2,r0,ASR #24
00002c  4288              CMP      r0,r1
;;;412    			return YES;
00002e  bfa4              ITT      GE
000030  2001              MOVGE    r0,#1
;;;413    		}
;;;414    	}
;;;415    	return NO;
;;;416    }
000032  4770              BXGE     lr
                  |L18.52|
000034  2000              MOVS     r0,#0                 ;415
000036  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.algorithm_nearby_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect_point PROC
;;;428    }
;;;429    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
000000  b410              PUSH     {r4}
;;;430    {
000002  fa4ffc80          SXTB     r12,r0
;;;431    	if(RectA.rs <= (PointA.y>>POS_BOOST_SHIFT_)+dist_th && RectA.re+dist_th >= (PointA.y>>POS_BOOST_SHIFT_)){
000006  eb032422          ADD      r4,r3,r2,ASR #8
00000a  4564              CMP      r4,r12
00000c  db13              BLT      |L19.54|
00000e  f3402c07          SBFX     r12,r0,#8,#8          ;430
000012  449c              ADD      r12,r12,r3
000014  ebbc2f22          CMP      r12,r2,ASR #8
000018  db0d              BLT      |L19.54|
00001a  f3404207          SBFX     r2,r0,#16,#8
;;;432    		if(RectA.cs <= (PointA.x>>POS_BOOST_SHIFT_)+dist_th && RectA.ce+dist_th >= (PointA.x>>POS_BOOST_SHIFT_)){
00001e  eb032c21          ADD      r12,r3,r1,ASR #8
000022  4562              CMP      r2,r12
000024  dc07              BGT      |L19.54|
000026  eb036020          ADD      r0,r3,r0,ASR #24
00002a  ebb02f21          CMP      r0,r1,ASR #8
;;;433    			return YES;
00002e  bfa2              ITTT     GE
000030  2001              MOVGE    r0,#1
;;;434    		}
;;;435    	}
;;;436    	return NO;
;;;437    }
000032  bc10              POPGE    {r4}
000034  4770              BXGE     lr
                  |L19.54|
000036  2000              MOVS     r0,#0                 ;436
000038  bc10              POP      {r4}
00003a  4770              BX       lr
;;;438    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
                          ENDP


                          AREA ||i.heon_algorithm||, CODE, READONLY, ALIGN=2

                  heon_algorithm PROC
;;;1735   int testLabelArray2[4];
;;;1736   int heon_algorithm(int id, uint8_t _search_idx, tCell_t _tPos)
000000  e92d0ff0          PUSH     {r4-r11}
;;;1737   {
;;;1738   	int i, r_i, c_i;
;;;1739   	uint8_t neighbor_label_id;
;;;1740   	int sum = 0;
;;;1741   
;;;1742   	for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
000004  4b36              LDR      r3,|L20.224|
000006  eb011101          ADD      r1,r1,r1,LSL #4
00000a  4682              MOV      r10,r0                ;1737
00000c  5c5d              LDRB     r5,[r3,r1]
00000e  2000              MOVS     r0,#0                 ;1740
000010  2d00              CMP      r5,#0                 ;1737
;;;1743   	{
;;;1744   #if (PAD_ == 0)
;;;1745   			if((_tPos.r == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;1746   				r_i = _tPos.r;
;;;1747   			else
;;;1748   				r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;1749   
;;;1750   			if((_tPos.c == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;1751   				c_i = _tPos.c;
;;;1752   			else
;;;1753   				c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;1754   #else 
;;;1755   			r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;1756   			c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;1757   #endif
;;;1758   
;;;1759   		if(HAL_READ_LABEL_IMAGE(r_i,c_i) == id)
;;;1760   		{
;;;1761   			if(id==1)
;;;1762   				testLabelArray[i] = HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1763   			else
;;;1764   				testLabelArray2[i] = HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1765   			
;;;1766   			sum += HAL_READ_DELTA_IMAGE(r_i,c_i);
;;;1767   		}
;;;1768   	}
;;;1769   	
;;;1770   	return sum;
;;;1771   }
000012  bf04              ITT      EQ
000014  e8bd0ff0          POPEQ    {r4-r11}
000018  4770              BXEQ     lr
00001a  f8df80c8          LDR      r8,|L20.228|
00001e  4419              ADD      r1,r1,r3              ;1742
000020  f3422307          SBFX     r3,r2,#8,#8           ;1742
000024  4e30              LDR      r6,|L20.232|
000026  f1080710          ADD      r7,r8,#0x10           ;1742
00002a  1c8c              ADDS     r4,r1,#2              ;1742
00002c  f1010c01          ADD      r12,r1,#1             ;1742
000030  b252              SXTB     r2,r2                 ;1742
                  |L20.50|
000032  2b00              CMP      r3,#0                 ;1745
000034  bf04              ITT      EQ                    ;1745
000036  f9941000          LDRSBEQ  r1,[r4,#0]            ;1745
00003a  f1b13fff          CMPEQ    r1,#0xffffffff        ;1745
00003e  d04a              BEQ      |L20.214|
000040  2b2f              CMP      r3,#0x2f              ;1745
000042  bf07              ITTEE    EQ                    ;1745
000044  7821              LDRBEQ   r1,[r4,#0]            ;1745
000046  2901              CMPEQ    r1,#1                 ;1745
000048  f9941000          LDRSBNE  r1,[r4,#0]            ;1748
00004c  eb030901          ADDNE    r9,r3,r1              ;1748
000050  d041              BEQ      |L20.214|
                  |L20.82|
000052  2a00              CMP      r2,#0                 ;1750
000054  bf04              ITT      EQ                    ;1750
000056  f99c1000          LDRSBEQ  r1,[r12,#0]           ;1750
00005a  f1b13fff          CMPEQ    r1,#0xffffffff        ;1750
00005e  d03c              BEQ      |L20.218|
000060  2a53              CMP      r2,#0x53              ;1750
000062  bf07              ITTEE    EQ                    ;1750
000064  f89c1000          LDRBEQ   r1,[r12,#0]           ;1750
000068  2901              CMPEQ    r1,#1                 ;1750
00006a  f99c1000          LDRSBNE  r1,[r12,#0]           ;1753
00006e  4411              ADDNE    r1,r2                 ;1753
000070  d033              BEQ      |L20.218|
000072  bf00              NOP                            ;1759
                  |L20.116|
000074  ebc909c9          RSB      r9,r9,r9,LSL #3       ;1759
000078  eb090949          ADD      r9,r9,r9,LSL #1       ;1759
00007c  eb060b89          ADD      r11,r6,r9,LSL #2      ;1759
000080  448b              ADD      r11,r11,r1            ;1759
000082  f50b3b88          ADD      r11,r11,#0x11000      ;1759
000086  f89bb640          LDRB     r11,[r11,#0x640]      ;1759
00008a  45d3              CMP      r11,r10               ;1759
00008c  d117              BNE      |L20.190|
00008e  eb060bc9          ADD      r11,r6,r9,LSL #3      ;1764
000092  eb0b0b41          ADD      r11,r11,r1,LSL #1     ;1764
000096  f50b4b70          ADD      r11,r11,#0xf000       ;1764
00009a  f1ba0f01          CMP      r10,#1                ;1761
00009e  f9bbb6c0          LDRSH    r11,[r11,#0x6c0]      ;1764
0000a2  bf14              ITE      NE                    ;1764
0000a4  f8c7b000          STRNE    r11,[r7,#0]           ;1764
0000a8  f8c8b000          STREQ    r11,[r8,#0]           ;1762
0000ac  eb0609c9          ADD      r9,r6,r9,LSL #3       ;1766
0000b0  eb090141          ADD      r1,r9,r1,LSL #1       ;1766
0000b4  f5014170          ADD      r1,r1,#0xf000         ;1766
0000b8  f9b116c0          LDRSH    r1,[r1,#0x6c0]        ;1766
0000bc  4408              ADD      r0,r0,r1              ;1766
                  |L20.190|
0000be  1ca4              ADDS     r4,r4,#2              ;1766
0000c0  1e6d              SUBS     r5,r5,#1              ;1766
0000c2  f1070704          ADD      r7,r7,#4              ;1766
0000c6  f1080804          ADD      r8,r8,#4              ;1766
0000ca  f10c0c02          ADD      r12,r12,#2            ;1766
0000ce  d1b0              BNE      |L20.50|
0000d0  e8bd0ff0          POP      {r4-r11}
0000d4  4770              BX       lr
                  |L20.214|
0000d6  4699              MOV      r9,r3                 ;1746
0000d8  e7bb              B        |L20.82|
                  |L20.218|
0000da  4611              MOV      r1,r2                 ;1746
0000dc  e7ca              B        |L20.116|
;;;1772   
                          ENDP

0000de  0000              DCW      0x0000
                  |L20.224|
                          DCD      ||.data||+0x3d
                  |L20.228|
                          DCD      ||.bss||+0x28c
                  |L20.232|
                          DCD      FullSharedBuff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PalmRectEnable
                          %        10
                  PalmRect
                          %        40
                  split_buf
                          %        200
                  split_pos
                          %        402
                  testLabelArray
                          %        16
                  testLabelArray2
                          %        16

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.bss||
                  testLabelSum
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  PalmRegionNum
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  PalmRegionUpdateCnt
                          DCD      0x00000000
                  BOUNDARY_4_SEARCH_TABLE
000010  04ff0000          DCB      0x04,0xff,0x00,0x00
000014  ff010000          DCB      0xff,0x01,0x00,0x00
000018  0103ff00          DCB      0x01,0x03,0xff,0x00
00001c  00ff0001          DCB      0x00,0xff,0x00,0x01
000020  000003ff          DCB      0x00,0x00,0x03,0xff
000024  0000ff01          DCB      0x00,0x00,0xff,0x01
000028  00000003          DCB      0x00,0x00,0x00,0x03
00002c  00ff0100          DCB      0x00,0xff,0x01,0x00
000030  00010000          DCB      0x00,0x01,0x00,0x00
000034  03ff0001          DCB      0x03,0xff,0x00,0x01
000038  00000100          DCB      0x00,0x00,0x01,0x00
00003c  00                DCB      0x00
                  BOUNDARY_8_SEARCH_TABLE
00003d  08ff00            DCB      0x08,0xff,0x00
000040  ffff00ff          DCB      0xff,0xff,0x00,0xff
000044  01ff0100          DCB      0x01,0xff,0x01,0x00
000048  01010001          DCB      0x01,0x01,0x00,0x01
00004c  ff010701          DCB      0xff,0x01,0x07,0x01
000050  010001ff          DCB      0x01,0x00,0x01,0xff
000054  01ff00ff          DCB      0x01,0xff,0x00,0xff
000058  ff00ff01          DCB      0xff,0x00,0xff,0x01
00005c  ff000006          DCB      0xff,0x00,0x00,0x06
000060  ff01ff00          DCB      0xff,0x01,0xff,0x00
000064  ffff00ff          DCB      0xff,0xff,0x00,0xff
000068  01ff0100          DCB      0x01,0xff,0x01,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  05ffff00          DCB      0x05,0xff,0xff,0x00
000074  ff01ff01          DCB      0xff,0x01,0xff,0x01
000078  00010100          DCB      0x00,0x01,0x01,0x00
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  0006ffff          DCB      0x00,0x06,0xff,0xff
000084  00ff01ff          DCB      0x00,0xff,0x01,0xff
000088  01000101          DCB      0x01,0x00,0x01,0x01
00008c  00010000          DCB      0x00,0x01,0x00,0x00
000090  00000501          DCB      0x00,0x00,0x05,0x01
000094  ff010001          DCB      0xff,0x01,0x00,0x01
000098  010001ff          DCB      0x01,0x00,0x01,0xff
00009c  01000000          DCB      0x01,0x00,0x00,0x00
0000a0  00000006          DCB      0x00,0x00,0x00,0x06
0000a4  01ff0100          DCB      0x01,0xff,0x01,0x00
0000a8  01010001          DCB      0x01,0x01,0x00,0x01
0000ac  ff01ff00          DCB      0xff,0x01,0xff,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  04010100          DCB      0x04,0x01,0x01,0x00
0000b8  01ff01ff          DCB      0x01,0xff,0x01,0xff
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00050101          DCB      0x00,0x05,0x01,0x01
0000c8  0001ff01          DCB      0x00,0x01,0xff,0x01
0000cc  ff00ffff          DCB      0xff,0x00,0xff,0xff
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  0000              DCB      0x00,0x00

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  testConflictValue
                          DCD      0x00000000

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  testSum
                          DCD      0x00000000

                          AREA ||i.__ARM_common_memclr4_10||, COMGROUP=__ARM_common_memclr4_10, CODE, READONLY, ALIGN=1

                  __ARM_common_memclr4_10 PROC
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  8101              STRH     r1,[r0,#8]
000008  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Label\\algorithm_label.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_label_c_b54f614d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REVSH|
#line 402
|__asm___17_algorithm_label_c_b54f614d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____RRX|
#line 587
|__asm___17_algorithm_label_c_b54f614d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
