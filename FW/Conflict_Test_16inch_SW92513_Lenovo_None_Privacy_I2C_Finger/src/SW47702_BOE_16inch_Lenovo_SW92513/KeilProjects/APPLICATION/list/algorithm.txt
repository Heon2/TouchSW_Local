; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\algorithm.crf ..\..\App\Algorithm\algorithm.c]
                          THUMB

                          AREA ||i.GetOperTimeUS||, CODE, READONLY, ALIGN=2

                  GetOperTimeUS PROC
;;;458    uint32_t OperEndTime;
;;;459    void GetOperTimeUS(uint64_t* StartTime, uint32_t* ScanTime)
000000  b570              PUSH     {r4-r6,lr}
;;;460    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  e9d50100          LDRD     r0,r1,[r5,#0]
00000a  2400              MOVS     r4,#0
;;;461    	uint16_t Temp = 0;
;;;462    
;;;463    	if (*StartTime == 0)
00000c  ea500201          ORRS     r2,r0,r1
000010  d00a              BEQ      |L1.40|
;;;464    	{
;;;465    		goto GETSCANTIME__GOTO_END;
;;;466    	}
;;;467    	
;;;468    	Temp = (uint16_t)(getElapsedUS(*StartTime));
000012  f7fffffe          BL       getElapsedLongSYSTICK
000016  4a0d              LDR      r2,|L1.76|
000018  6812              LDR      r2,[r2,#0]  ; _timer_clock_
00001a  4623              MOV      r3,r4
00001c  f7fffffe          BL       __aeabi_uldivmod
;;;469    	*ScanTime += Temp;
000020  6831              LDR      r1,[r6,#0]
000022  b280              UXTH     r0,r0                 ;468
000024  4408              ADD      r0,r0,r1
000026  6030              STR      r0,[r6,#0]
                  |L1.40|
;;;470    
;;;471    GETSCANTIME__GOTO_END:
;;;472    
;;;473    	*StartTime = (uint64_t)getLongSysTick();
000028  4809              LDR      r0,|L1.80|
00002a  6800              LDR      r0,[r0,#0]  ; _timertick_high_rank_count_
00002c  03a2              LSLS     r2,r4,#14
00002e  ea424290          ORR      r2,r2,r0,LSR #18
000032  0381              LSLS     r1,r0,#14
000034  f04f4080          MOV      r0,#0x40000000
000038  f8d001b8          LDR      r0,[r0,#0x1b8]
00003c  f3c0000d          UBFX     r0,r0,#0,#14
000040  4308              ORRS     r0,r0,r1
000042  ea420104          ORR      r1,r2,r4
000046  e9c50100          STRD     r0,r1,[r5,#0]
;;;474    }
00004a  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP

                  |L1.76|
                          DCD      _timer_clock_
                  |L1.80|
                          DCD      _timertick_high_rank_count_

                          AREA ||i.algorithm_CheckFingerIdleModeControl||, CODE, READONLY, ALIGN=2

                  algorithm_CheckFingerIdleModeControl PROC
;;;197    #if USED_IDLE_MODE_CONTROL
;;;198    bool_t algorithm_CheckFingerIdleModeControl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
;;;200    	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
000002  f7fffffe          BL       HAL_GetSensingMode
;;;201    
;;;202    	if(IS_ACTIVE_MODE(eSensingMode))
;;;203    	{
;;;204    		if(thisInfo->bTouchExpect)
000006  4c1d              LDR      r4,|L2.124|
000008  4605              MOV      r5,r0                 ;200
00000a  f0100f01          TST      r0,#1                 ;202
;;;205    		{
;;;206    			thisInfo->ulIdleModeEnterCheckCount = 0;
;;;207    		}
;;;208    		else
;;;209    		{
;;;210    	#if USED_ENTER_IDLE_REAL_TIME_CHECK
;;;211    			if(thisInfo->ulIdleModeEnterCheckCount == 0)
;;;212    			{
;;;213    				TimerTick_ResetIdleModeCheckTime();
;;;214    				thisInfo->ulIdleModeEnterCheckCount++;
;;;215    			}
;;;216    	#else /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;217    			thisInfo->ulIdleModeEnterCheckCount++;
;;;218    	#endif /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;219    
;;;220    #if USED_NOISE_HOPPING_FREQ
;;;221    	#if USED_ENTER_IDLE_REAL_TIME_CHECK
;;;222    			if(IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
;;;223    			{
;;;224    				if(TimerTick_GetIdleModeCheckTimeSec() >= thisInfo->ulIdleModeEnterFrameCntTHD)
;;;225    				{
;;;226    					thisInfo->ulIdleModeEnterCheckCount = 0;
;;;227    					HAL_SetSensingChangeMode(SM_CHANGE_IDLE_MODE);
;;;228    					return YES;
;;;229    				}
;;;230    			}
;;;231    	#else /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;232    			if(IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
;;;233    			{
;;;234    				if(thisInfo->ulIdleModeEnterCheckCount > thisInfo->ulIdleModeEnterFrameCntTHD)
;;;235    				{
;;;236    					thisInfo->ulIdleModeEnterCheckCount = 0;
;;;237    					HAL_SetSensingChangeMode(SM_CHANGE_IDLE_MODE);
;;;238    					return YES;
;;;239    				}
;;;240    			}
;;;241    			else
;;;242    			{
;;;243    				if(thisInfo->ulIdleModeEnterCheckCount > thisInfo->ulHopFrqIdleModeFrameCntTHD)
;;;244    				{
;;;245    //					HoppingInitFlag = YES;
;;;246    					thisInfo->ulIdleModeEnterCheckCount = 0;
;;;247    					return YES;
;;;248    				}
;;;249    			}
;;;250    	#endif /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;251    #else /* USED_NOISE_HOPPING_FREQ */
;;;252    	#if USED_ENTER_IDLE_REAL_TIME_CHECK
;;;253    			if(TimerTick_GetIdleModeCheckTimeSec() >= thisInfo->ulIdleModeEnterFrameCntTHD)
;;;254    			{
;;;255    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;256    				HAL_SetSensingChangeMode(SM_CHANGE_IDLE_MODE);
;;;257    				return YES;
;;;258    			}
;;;259    	#else /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;260    			if(thisInfo->ulIdleModeEnterCheckCount > thisInfo->ulIdleModeEnterFrameCntTHD)
;;;261    			{
;;;262    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;263    				HAL_SetSensingChangeMode(SM_CHANGE_IDLE_MODE);
;;;264    				return YES;
;;;265    			}
;;;266    	#endif /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;267    #endif /* USED_NOISE_HOPPING_FREQ */
;;;268    		}
;;;269    	}
;;;270    	else
;;;271    	{
;;;272    		if(thisInfo->bTouchExpect)
00000e  68e0              LDR      r0,[r4,#0xc]  ; thisInfo
000010  f5005080          ADD      r0,r0,#0x1000
000014  d027              BEQ      |L2.102|
000016  f89010dd          LDRB     r1,[r0,#0xdd]         ;204
00001a  2600              MOVS     r6,#0                 ;204
00001c  2900              CMP      r1,#0                 ;204
00001e  bf18              IT       NE                    ;206
000020  f8c0616c          STRNE    r6,[r0,#0x16c]        ;206
000024  d127              BNE      |L2.118|
000026  f8d0016c          LDR      r0,[r0,#0x16c]        ;211
00002a  b948              CBNZ     r0,|L2.64|
00002c  f7fffffe          BL       TimerTick_ResetIdleModeCheckTime
000030  68e0              LDR      r0,[r4,#0xc]          ;214  ; thisInfo
000032  f5005080          ADD      r0,r0,#0x1000         ;214
000036  f8d0116c          LDR      r1,[r0,#0x16c]        ;214
00003a  1c49              ADDS     r1,r1,#1              ;214
00003c  f8c0116c          STR      r1,[r0,#0x16c]        ;214
                  |L2.64|
000040  f0150f02          TST      r5,#2                 ;222
000044  d017              BEQ      |L2.118|
000046  f7fffffe          BL       TimerTick_GetIdleModeCheckTimeSec
00004a  68e1              LDR      r1,[r4,#0xc]          ;224  ; thisInfo
00004c  f5015180          ADD      r1,r1,#0x1000         ;224
000050  f8d12168          LDR      r2,[r1,#0x168]        ;224
000054  4282              CMP      r2,r0                 ;224
000056  d80e              BHI      |L2.118|
000058  2001              MOVS     r0,#1                 ;227
00005a  f8c1616c          STR      r6,[r1,#0x16c]        ;227
00005e  f7fffffe          BL       HAL_SetSensingChangeMode
000062  2001              MOVS     r0,#1                 ;228
;;;273    		{
;;;274    			/*
;;;275    			 * NOTE : Idle -> Active Is Always Normal Frequency Operation
;;;276    			 */
;;;277    #if USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE
;;;278    			HAL_SetSensingChangeMode(SM_CHANGE_FULLSCAN_IDLE_MODE);
;;;279    #else /* USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE */
;;;280    	#if USED_FAST_SWITCH_IDLE_TO_ACTIVE
;;;281    			HAL_SetSensingChangeMode(SM_FAST_CHANGE_ACTIVE_MODE);
;;;282    	#else /* USED_FAST_SWITCH_IDLE_TO_ACTIVE */
;;;283    			HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_MODE);
;;;284    	#endif /* USED_FAST_SWITCH_IDLE_TO_ACTIVE */
;;;285    #endif /* USED_FULLSCAN_SWITCH_IDLE_TO_ACTIVE */
;;;286    #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;287    			thisInfo->bIsIdleToActive = YES;
;;;288    #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;289    
;;;290    			return YES;
;;;291    		}
;;;292    	}
;;;293    
;;;294    	return NO;
;;;295    }
000064  bd70              POP      {r4-r6,pc}
                  |L2.102|
000066  f89000dd          LDRB     r0,[r0,#0xdd]         ;272
00006a  b120              CBZ      r0,|L2.118|
00006c  2004              MOVS     r0,#4                 ;278
00006e  f7fffffe          BL       HAL_SetSensingChangeMode
000072  2001              MOVS     r0,#1                 ;290
000074  bd70              POP      {r4-r6,pc}
                  |L2.118|
000076  2000              MOVS     r0,#0                 ;294
000078  bd70              POP      {r4-r6,pc}
;;;296    #endif /* USED_IDLE_MODE_CONTROL */
                          ENDP

00007a  0000              DCW      0x0000
                  |L2.124|
                          DCD      ||.data||

                          AREA ||i.algorithm_Check_Mux_Delta||, CODE, READONLY, ALIGN=2

                  algorithm_Check_Mux_Delta PROC
;;;2569   
;;;2570   bool_t algorithm_Check_Mux_Delta(uint8_t _mux_num, uint8_t _col, uint16_t _delta_thd, bool_t _bUpperCnt)
000000  e92d03f0          PUSH     {r4-r9}
;;;2571   {
000004  4606              MOV      r6,r0
;;;2572   	bool_t bResult = NO;
000006  2000              MOVS     r0,#0
;;;2573   	uint8_t i, size, ucDeltaCnt;
;;;2574   	int16_t data;
;;;2575   
;;;2576   	ucDeltaCnt = 0;
000008  4604              MOV      r4,r0
;;;2577   	size = (_mux_num == LAST_MUX_NUM ? LAST_MUX_ROW : ROW_PER_MUX);
00000a  2e09              CMP      r6,#9
00000c  bf0c              ITE      EQ
00000e  2703              MOVEQ    r7,#3
000010  2705              MOVNE    r7,#5
;;;2578   
;;;2579   	for (i=0; i<size; i++)
000012  2500              MOVS     r5,#0
;;;2580   	{
;;;2581   		data = HAL_READ_DELTA_IMAGE((_mux_num * ROW_PER_MUX) + i, _col);
;;;2582   
;;;2583   		if (_bUpperCnt)
;;;2584   		{
;;;2585   			if (data >= _delta_thd)
000014  f8df8048          LDR      r8,|L3.96|
000018  46bc              MOV      r12,r7                ;2579
00001a  eb060686          ADD      r6,r6,r6,LSL #2
;;;2586   				ucDeltaCnt++;
;;;2587   		}
;;;2588   		else
;;;2589   		{
;;;2590   			if (data < _delta_thd)
00001e  bf00              NOP      
                  |L3.32|
000020  eb060905          ADD      r9,r6,r5
000024  ebc909c9          RSB      r9,r9,r9,LSL #3
000028  eb090949          ADD      r9,r9,r9,LSL #1
00002c  eb0809c9          ADD      r9,r8,r9,LSL #3
000030  eb090941          ADD      r9,r9,r1,LSL #1
000034  f5094970          ADD      r9,r9,#0xf000
000038  f9b996c0          LDRSH    r9,[r9,#0x6c0]
00003c  b113              CBZ      r3,|L3.68|
00003e  4591              CMP      r9,r2                 ;2585
000040  da02              BGE      |L3.72|
000042  e003              B        |L3.76|
                  |L3.68|
000044  4591              CMP      r9,r2
000046  da01              BGE      |L3.76|
                  |L3.72|
000048  1c64              ADDS     r4,r4,#1
;;;2591   				ucDeltaCnt++;
00004a  b2e4              UXTB     r4,r4
                  |L3.76|
00004c  1c6d              ADDS     r5,r5,#1
00004e  f1bc0c01          SUBS     r12,r12,#1
;;;2592   		}
;;;2593   	}
000052  d1e5              BNE      |L3.32|
;;;2594   
;;;2595   	if (ucDeltaCnt >= size)
000054  42bc              CMP      r4,r7
;;;2596   		bResult = YES;
000056  bf28              IT       CS
000058  2001              MOVCS    r0,#1
;;;2597   
;;;2598   	return bResult;
;;;2599   }
00005a  e8bd03f0          POP      {r4-r9}
00005e  4770              BX       lr
;;;2600   #endif /* USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN */
                          ENDP

                  |L3.96|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_PendTouchEvent||, CODE, READONLY, ALIGN=2

                  algorithm_PendTouchEvent PROC
;;;1046   
;;;1047   void algorithm_PendTouchEvent(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1048   {
000004  b087              SUB      sp,sp,#0x1c
;;;1049   	
;;;1050   	int i;
;;;1051   	int distX, distY;
;;;1052   	tXY_t pos, old_pos;
;;;1053   	uint8_t ucMoveTHD_X,ucMoveTHD_Y;
;;;1054   
;;;1055   #if (ID_MAPPING_CHANGE)
;;;1056   static uint8_t NewID = 50;
;;;1057   static uint8_t Id_Map[MAX_TOUCH_] = {0,};
;;;1058   static uint16_t NonTouchCnt = 0;
;;;1059   #endif
;;;1060   
;;;1061   	hal_set_overlap_pen();
000006  f7fffffe          BL       hal_set_overlap_pen
;;;1062   
;;;1063   	memset(HID_status,0,HID_MAX_TOUCH);
00000a  48bb              LDR      r0,|L4.760|
00000c  f7fffffe          BL       __ARM_common_memclr4_10
;;;1064   	memset(HID_id,0,HID_MAX_TOUCH);
000010  48ba              LDR      r0,|L4.764|
000012  f7fffffe          BL       __ARM_common_memclr4_10
;;;1065   	memset(HID_x,0,HID_MAX_TOUCH);
000016  48ba              LDR      r0,|L4.768|
000018  f7fffffe          BL       __ARM_common_memclr4_10
;;;1066   	memset(HID_y,0,HID_MAX_TOUCH);
00001c  48b9              LDR      r0,|L4.772|
00001e  f7fffffe          BL       __ARM_common_memclr4_10
;;;1067   
;;;1068   	eSWIPPacketFormatId_t id = protocol_swip_GetPacketFormatId();
000022  f7fffffe          BL       protocol_swip_GetPacketFormatId
000026  4682              MOV      r10,r0
;;;1069   #define SET_POS(tItem, pos)  \
;;;1070   	do{    \
;;;1071   			(tItem).tItem00.ucXHigh = ((pos).x >> 8) & 0xFF;    \
;;;1072   			(tItem).tItem00.ucYHigh = ((pos).y >> 8) & 0xFF;    \
;;;1073   			(tItem).tItem00.ucXLow = (pos).x & 0xFF;    \
;;;1074   			(tItem).tItem00.ucYLow = (pos).y & 0xFF;    \
;;;1075   		} while(0)
;;;1076   
;;;1077   	//if(g_ConnectedDevice == I2C_CONNECT_PC)
;;;1078   	{
;;;1079   		protocol_swip_InitTouchEventBuffer();
000028  f7fffffe          BL       protocol_swip_InitTouchEventBuffer
;;;1080   		//    protocol_hid_InitTouchEventBuffer();
;;;1081   	}
;;;1082   	
;;;1083   	hid_index=0;
00002c  48b6              LDR      r0,|L4.776|
;;;1084   	
;;;1085   #if (SWIP_QUEUE_MODE)
;;;1086   	thisInfo->bQueueStart 	= 0;
00002e  4db7              LDR      r5,|L4.780|
000030  2600              MOVS     r6,#0                 ;1083
000032  6006              STR      r6,[r0,#0]  ; hid_index
000034  68e9              LDR      r1,[r5,#0xc]  ; thisInfo
000036  f5015080          ADD      r0,r1,#0x1000
00003a  f880615a          STRB     r6,[r0,#0x15a]
;;;1087   	#if (SWIP_QUEUE_MODE == 2)
;;;1088   		thisInfo->bTouchOffFlag	= 0;
00003e  f880615b          STRB     r6,[r0,#0x15b]
;;;1089   	#endif
;;;1090   #endif
;;;1091   
;;;1092   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1093   	tTouchItemType_t touchItemType;
;;;1094   	memset(&touchItemType, 0, sizeof(tTouchItemType_t));
;;;1095   	/*
;;;1096   	 * TODO : finger modeئ Ңڻ8؎ ܳd.
;;;1097   	 * algorithm; хģ Ʉ touch typeߡ ֻإ flagئ setting Șߟ Ȕ.
;;;1098   	 */
;;;1099   	touchItemType.active_stylus_hover = YES;
;;;1100   	touchItemType.active_stylus = YES;
;;;1101   	touchItemType.passive_stylus = YES;
;;;1102   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1103   
;;;1104   #ifdef LocalFingerNoiseRemove
;;;1105   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;1106   	if(thisInfo->bLocal_sensing == YES /*&& thisInfo->tCoord_local_dsp.PenContactCnt < 100*/)
;;;1107   	{	
;;;1108   		uint8_t Label_num = 0;
;;;1109   		for( i=MAX_TOUCH_; i--; )
;;;1110   		{		
;;;1111   			if (thisInfo->tCoord.tPos.vusS[i] > 0)
;;;1112   			{
;;;1113   				Label_num++;
;;;1114   			}
;;;1115   		}
;;;1116   	
;;;1117   		for( i=MAX_TOUCH_; i--; )
;;;1118   		{
;;;1119   			distX = algorithm_coord_calc_distance(thisInfo->tCoord.tPos.tXY[i], thisInfo->tCoord_local_dsp.tPos.tXY);
;;;1120   			
;;;1121   			if( distX > 1024 && ((thisInfo->tCoord.tPos.MaxDelta[i] > thisModeConf->CoordTracking.sFirstTouchOnMaxCellVal && Label_num > 1) || (thisInfo->tCoord.tPos.MaxDelta[i] > (thisModeConf->CoordTracking.sFirstTouchOnMaxCellVal+20) && Label_num == 1)) )
;;;1122   			{
;;;1123   			}
;;;1124   			else
;;;1125   			{
;;;1126   				thisInfo->tCoord.tPos.vusS[i] = 0;
;;;1127   				thisInfo->tCoord.cScreenDebCnt[i] = 0;
;;;1128   			}
;;;1129   			
;;;1130   		}
;;;1131   	}
;;;1132   	#endif
;;;1133   #endif
;;;1134   	
;;;1135   	if(thisModeConf->Palm.bPalm_WholeTouchRemove && thisInfo->bIsPalm == YES)
000042  68aa              LDR      r2,[r5,#8]  ; thisModeConf
000044  f892220a          LDRB     r2,[r2,#0x20a]
000048  b1a2              CBZ      r2,|L4.116|
00004a  f89000da          LDRB     r0,[r0,#0xda]
00004e  2801              CMP      r0,#1
000050  d110              BNE      |L4.116|
;;;1136   	{
;;;1137   		for( i=MAX_TOUCH_; i--; )thisInfo->tCoord.tPos.vusS[i] = 0;
000052  200a              MOVS     r0,#0xa
000054  2201              MOVS     r2,#1
000056  f1000c01          ADD      r12,r0,#1
                  |L4.90|
00005a  1e43              SUBS     r3,r0,#1
00005c  eb010343          ADD      r3,r1,r3,LSL #1
000060  1e80              SUBS     r0,r0,#2
000062  f8a364ef          STRH     r6,[r3,#0x4ef]
000066  eb010340          ADD      r3,r1,r0,LSL #1
00006a  1c92              ADDS     r2,r2,#2
00006c  f8a364ef          STRH     r6,[r3,#0x4ef]
000070  4562              CMP      r2,r12
000072  dbf2              BLT      |L4.90|
                  |L4.116|
;;;1138   	}
;;;1139   
;;;1140   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN	
;;;1141   	algorithm_EdgeReportDelay();
;;;1142   #endif
;;;1143   	
;;;1144   	for (i = 0; i < MAX_TOUCH_; i++)
000074  2400              MOVS     r4,#0
000076  f04f0b01          MOV      r11,#1                ;1135
                  |L4.122|
;;;1145   	{
;;;1146   		//        bool_t bIsHover = NO;
;;;1147   		if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
00007a  68ea              LDR      r2,[r5,#0xc]  ; thisInfo
00007c  eb020144          ADD      r1,r2,r4,LSL #1
000080  f8b10cce          LDRH     r0,[r1,#0xcce]
000084  b138              CBZ      r0,|L4.150|
;;;1148   		{
;;;1149   //			old_pos = thisInfo->tCoord.tPastSentPos.tXY[i];
;;;1150   //			alogorithm_coord_modify_pos(&old_pos,&old_pos, i);
;;;1151   			old_pos.x = thisInfo->tCoord.tRealPastSentPos.tXY[i].x;
000086  eb0200c4          ADD      r0,r2,r4,LSL #3
00008a  f8d03d1f          LDR      r3,[r0,#0xd1f]
;;;1152   			old_pos.y = thisInfo->tCoord.tRealPastSentPos.tXY[i].y;
00008e  9302              STR      r3,[sp,#8]
000090  f8d00d23          LDR      r0,[r0,#0xd23]
000094  9003              STR      r0,[sp,#0xc]
                  |L4.150|
;;;1153   		}
;;;1154   
;;;1155   		if (thisInfo->tCoord.tPos.vusS[i] > 0)
000096  f8b104ef          LDRH     r0,[r1,#0x4ef]
00009a  2800              CMP      r0,#0
00009c  f00080c0          BEQ.W    |L4.544|
;;;1156   		{
;;;1157   			pos = thisInfo->tCoord.tPos.tXY[i];
0000a0  eb0200c4          ADD      r0,r2,r4,LSL #3
0000a4  f8d0249f          LDR      r2,[r0,#0x49f]
0000a8  9200              STR      r2,[sp,#0]
0000aa  f8d004a3          LDR      r0,[r0,#0x4a3]
;;;1158   			
;;;1159   //			if(thisModeConf->Palm.ucPalmDrawingOn > 1)
;;;1160   //				algorithm_width_height_calculation(i);
;;;1161   
;;;1162   			if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
0000ae  9001              STR      r0,[sp,#4]
0000b0  f8b10cce          LDRH     r0,[r1,#0xcce]
;;;1163   				alogorithm_coord_modify_pos(&old_pos,&pos, i);
;;;1164   			else
;;;1165   				alogorithm_coord_modify_pos(&pos, &pos, i);
0000b4  4622              MOV      r2,r4
0000b6  2800              CMP      r0,#0                 ;1162
0000b8  4669              MOV      r1,sp
0000ba  bf0c              ITE      EQ
0000bc  4608              MOVEQ    r0,r1
0000be  a802              ADDNE    r0,sp,#8              ;1163
0000c0  f7fffffe          BL       alogorithm_coord_modify_pos
;;;1166   		}
;;;1167   
;;;1168   		if (thisInfo->tCoord.tPos.vusS[i] > 0)
0000c4  68ea              LDR      r2,[r5,#0xc]  ; thisInfo
0000c6  eb020044          ADD      r0,r2,r4,LSL #1
0000ca  f8b014ef          LDRH     r1,[r0,#0x4ef]
0000ce  2900              CMP      r1,#0
0000d0  d07e              BEQ      |L4.464|
;;;1169   		{
;;;1170   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1171   			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,0);
;;;1172   #endif
;;;1173   			
;;;1174   			distX = pos.x - old_pos.x;
0000d2  9b02              LDR      r3,[sp,#8]
0000d4  9900              LDR      r1,[sp,#0]
0000d6  eba10903          SUB      r9,r1,r3
;;;1175   			distY = pos.y - old_pos.y;
0000da  9b03              LDR      r3,[sp,#0xc]
0000dc  9901              LDR      r1,[sp,#4]
0000de  ebb10803          SUBS     r8,r1,r3
;;;1176   			if (distY < 0)
;;;1177   			distY = -distY;
0000e2  bf48              IT       MI
0000e4  f1c80800          RSBMI    r8,r8,#0
;;;1178   			if (distX < 0)
0000e8  f1b90f00          CMP      r9,#0
;;;1179   			distX = -distX;
0000ec  bfb8              IT       LT
0000ee  f1c90900          RSBLT    r9,r9,#0
;;;1180   
;;;1181   			if (!thisInfo->tCoord.bFirstLongDistanceMoved[i])
0000f2  1911              ADDS     r1,r2,r4
0000f4  f8911e23          LDRB     r1,[r1,#0xe23]
0000f8  2900              CMP      r1,#0
;;;1182   			{
;;;1183   				ucMoveTHD_X = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;1184   				ucMoveTHD_Y = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;1185   			}
;;;1186   			else
;;;1187   			{
;;;1188   				ucMoveTHD_X = thisModeConf->Coord.ucMoveEventTHD;
0000fa  68a9              LDR      r1,[r5,#8]  ; thisModeConf
0000fc  bf0c              ITE      EQ                    ;1183
0000fe  f8917097          LDRBEQ   r7,[r1,#0x97]         ;1183
000102  f8917098          LDRBNE   r7,[r1,#0x98]
;;;1189   				ucMoveTHD_Y = thisModeConf->Coord.ucMoveEventTHD;
;;;1190   			}
;;;1191   			
;;;1192   			if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 || (distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X))
000106  f8b01cce          LDRH     r1,[r0,#0xcce]
00010a  2900              CMP      r1,#0
00010c  bf18              IT       NE
00010e  45b8              CMPNE    r8,r7
000110  bfb8              IT       LT
000112  45b9              CMPLT    r9,r7
;;;1193   			{
;;;1194   #if (ID_MAPPING_CHANGE)
;;;1195   				if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 )
;;;1196   				{
;;;1197   					NewID++;
;;;1198   					if(NewID > 30)NewID=1;
;;;1199   					Id_Map[i] = NewID;
;;;1200   				}
;;;1201   #endif				
;;;1202   				uSWIPTouchItem_t tItem;
;;;1203   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1204   				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1205   				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;1206   				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1207   									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1208   									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1209   									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1210   									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1211   									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1212   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1213   				tItem.tItem00.tInfo.bTouch = YES;
;;;1214   				tItem.tItem00.tInfo.bHover = NO;
;;;1215   				tItem.tItem00.tInfo.bScreen = YES;
;;;1216   				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
;;;1217   	#if (ID_MAPPING_CHANGE)
;;;1218   				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1219   	#else
;;;1220   				tItem.tItem00.tInfo.b4FingerID = i + 1;
;;;1221   	#endif
;;;1222   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1223   				tItem.tItem00.ucRowStart = 0;
;;;1224   
;;;1225   				SET_POS(tItem, pos);
;;;1226   				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
;;;1227   				//                tItem.tItem00.ucWidth = thisInfo->tCoord.cScreenDebCnt[i];
;;;1228   				
;;;1229   //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;1230   //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;1231   				
;;;1232   				if(id == 0)
;;;1233   				{
;;;1234   					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
;;;1235   				}
;;;1236   #if !(ID_MAPPING_CHANGE)
;;;1237   				protocol_swip_PushTouchEvent(&tItem);
;;;1238   #endif				
;;;1239   				protocol_hid_PushTouchEvent(&tItem);
;;;1240   
;;;1241   				if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0 && ((distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X)) ) //distance moved.
;;;1242   				{
;;;1243   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = YES;
;;;1244   				}
;;;1245   				else //1st touch.
;;;1246   				{
;;;1247   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
;;;1248   				}
;;;1249   
;;;1250   				thisInfo->tCoord.tPastSentPos.tXY[i].x = thisInfo->tCoord.tPos.tXY[i].x;
;;;1251   				thisInfo->tCoord.tPastSentPos.tXY[i].y = thisInfo->tCoord.tPos.tXY[i].y;
;;;1252   				thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
;;;1253   				thisInfo->tCoord.tPastSentPos.vusR[i] = thisInfo->tCoord.tPos.vusR[i];
;;;1254   //				thisInfo->tCoord.tPastSentPos.vusW[i] = thisInfo->tCoord.tPos.vusW[i];
;;;1255   //				thisInfo->tCoord.tPastSentPos.vusH[i] = thisInfo->tCoord.tPos.vusH[i];
;;;1256   				
;;;1257   				thisInfo->tCoord.tRealPastSentPos.tXY[i].x = pos.x;
;;;1258   				thisInfo->tCoord.tRealPastSentPos.tXY[i].y = pos.y;
;;;1259   			}
;;;1260   			else
;;;1261   			{
;;;1262   				uSWIPTouchItem_t tItem;
;;;1263   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1264   				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1265   				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;1266   				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1267   									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1268   									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1269   									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1270   									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1271   									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1272   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1273   				tItem.tItem00.tInfo.bTouch = YES;
000114  f89d1010          LDRB     r1,[sp,#0x10]
;;;1274   				tItem.tItem00.tInfo.bHover = NO;
;;;1275   				tItem.tItem00.tInfo.bScreen = YES;
000118  f5025280          ADD      r2,r2,#0x1000
00011c  f0410180          ORR      r1,r1,#0x80           ;1273
000120  f0210120          BIC      r1,r1,#0x20           ;1274
;;;1276   				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
000124  f89220da          LDRB     r2,[r2,#0xda]
000128  f0410140          ORR      r1,r1,#0x40           ;1275
00012c  f3621104          BFI      r1,r2,#4,#1
;;;1277   	#if (ID_MAPPING_CHANGE)
;;;1278   				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1279   	#else
;;;1280   				tItem.tItem00.tInfo.b4FingerID = i + 1;
000130  f1040201          ADD      r2,r4,#1
000134  f3620103          BFI      r1,r2,#0,#4
000138  f88d1010          STRB     r1,[sp,#0x10]
;;;1281   	#endif
;;;1282   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1283   				tItem.tItem00.ucRowStart = 0;
00013c  f88d6018          STRB     r6,[sp,#0x18]
000140  db4d              BLT      |L4.478|
000142  9900              LDR      r1,[sp,#0]            ;1225
000144  0a09              LSRS     r1,r1,#8              ;1225
000146  f88d1011          STRB     r1,[sp,#0x11]         ;1225
00014a  9901              LDR      r1,[sp,#4]            ;1225
00014c  0a09              LSRS     r1,r1,#8              ;1225
00014e  f88d1012          STRB     r1,[sp,#0x12]         ;1225
000152  9900              LDR      r1,[sp,#0]            ;1225
000154  f88d1013          STRB     r1,[sp,#0x13]         ;1225
000158  9901              LDR      r1,[sp,#4]            ;1225
00015a  f88d1014          STRB     r1,[sp,#0x14]         ;1225
00015e  f8b01503          LDRH     r1,[r0,#0x503]        ;1226
000162  29ff              CMP      r1,#0xff              ;1226
000164  bf28              IT       CS                    ;1226
000166  21ff              MOVCS    r1,#0xff              ;1226
000168  f88d1015          STRB     r1,[sp,#0x15]         ;1226
00016c  f1ba0f00          CMP      r10,#0                ;1232
000170  bf04              ITT      EQ                    ;1234
000172  f8b004ef          LDRHEQ   r0,[r0,#0x4ef]        ;1234
000176  f8ad0016          STRHEQ   r0,[sp,#0x16]         ;1234
00017a  a804              ADD      r0,sp,#0x10           ;1237
00017c  f7fffffe          BL       protocol_swip_PushTouchEvent
000180  a804              ADD      r0,sp,#0x10           ;1239
000182  f7fffffe          BL       protocol_hid_PushTouchEvent
000186  68e8              LDR      r0,[r5,#0xc]          ;1241  ; thisInfo
000188  eb000144          ADD      r1,r0,r4,LSL #1       ;1241
00018c  f8b12cce          LDRH     r2,[r1,#0xcce]        ;1241
000190  b13a              CBZ      r2,|L4.418|
000192  463a              MOV      r2,r7                 ;1241
000194  45b8              CMP      r8,r7                 ;1241
000196  bfb2              ITEE     LT                    ;1241
000198  4591              CMPLT    r9,r2                 ;1241
00019a  1902              ADDGE    r2,r0,r4              ;1243
00019c  f882be23          STRBGE   r11,[r2,#0xe23]       ;1243
0001a0  da02              BGE      |L4.424|
                  |L4.418|
0001a2  1902              ADDS     r2,r0,r4              ;1247
0001a4  f8826e23          STRB     r6,[r2,#0xe23]        ;1247
                  |L4.424|
0001a8  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1250
0001ac  f8d0249f          LDR      r2,[r0,#0x49f]        ;1250
0001b0  f8c02c7e          STR      r2,[r0,#0xc7e]        ;1250
0001b4  f8d024a3          LDR      r2,[r0,#0x4a3]        ;1251
0001b8  f8c02c82          STR      r2,[r0,#0xc82]        ;1251
0001bc  f8b124ef          LDRH     r2,[r1,#0x4ef]        ;1252
0001c0  f8a12cce          STRH     r2,[r1,#0xcce]        ;1252
0001c4  f8b12503          LDRH     r2,[r1,#0x503]        ;1253
0001c8  f8a12ce2          STRH     r2,[r1,#0xce2]        ;1253
0001cc  9900              LDR      r1,[sp,#0]            ;1257
0001ce  e000              B        |L4.466|
                  |L4.464|
0001d0  e026              B        |L4.544|
                  |L4.466|
0001d2  f8c01d1f          STR      r1,[r0,#0xd1f]        ;1257
0001d6  9901              LDR      r1,[sp,#4]            ;1258
0001d8  f8c01d23          STR      r1,[r0,#0xd23]        ;1258
0001dc  e057              B        |L4.654|
                  |L4.478|
;;;1284   				SET_POS(tItem, old_pos);
0001de  9902              LDR      r1,[sp,#8]
0001e0  f88d3014          STRB     r3,[sp,#0x14]
0001e4  0a09              LSRS     r1,r1,#8
0001e6  f88d1011          STRB     r1,[sp,#0x11]
0001ea  0a19              LSRS     r1,r3,#8
0001ec  f88d1012          STRB     r1,[sp,#0x12]
0001f0  9902              LDR      r1,[sp,#8]
0001f2  f88d1013          STRB     r1,[sp,#0x13]
;;;1285   				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
0001f6  f8b01503          LDRH     r1,[r0,#0x503]
0001fa  29ff              CMP      r1,#0xff
0001fc  bf28              IT       CS
0001fe  21ff              MOVCS    r1,#0xff
000200  f88d1015          STRB     r1,[sp,#0x15]
;;;1286   
;;;1287   				//To do	-> Old Width, Height
;;;1288   //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;1289   //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;1290   				
;;;1291   				if(id == 0)
000204  f1ba0f00          CMP      r10,#0
;;;1292   				{
;;;1293   					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
000208  bf04              ITT      EQ
00020a  f8b004ef          LDRHEQ   r0,[r0,#0x4ef]
00020e  f8ad0016          STRHEQ   r0,[sp,#0x16]
                  |L4.530|
;;;1294   				}
;;;1295   #if !(ID_MAPPING_CHANGE)
;;;1296   				protocol_swip_PushTouchEvent(&tItem);
000212  a804              ADD      r0,sp,#0x10
000214  f7fffffe          BL       protocol_swip_PushTouchEvent
;;;1297   #endif				
;;;1298   				protocol_hid_PushTouchEvent(&tItem);
000218  a804              ADD      r0,sp,#0x10
00021a  f7fffffe          BL       protocol_hid_PushTouchEvent
;;;1299   				
;;;1300   			}
00021e  e036              B        |L4.654|
                  |L4.544|
;;;1301   #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;1302   			thisInfo->bIsIdleToActive = NO;
;;;1303   #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;1304   		}
;;;1305   		else if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
000220  4611              MOV      r1,r2
000222  eb020244          ADD      r2,r2,r4,LSL #1
000226  f8b20cce          LDRH     r0,[r2,#0xcce]
00022a  b378              CBZ      r0,|L4.652|
;;;1306   		{
;;;1307   			
;;;1308   		#if (SWIP_QUEUE_MODE == 2)
;;;1309   			thisInfo->bTouchOffFlag = 1;
00022c  f5015380          ADD      r3,r1,#0x1000
000230  f883b15b          STRB     r11,[r3,#0x15b]
;;;1310   		#endif
;;;1311   			
;;;1312   			uSWIPTouchItem_t tItem;
;;;1313   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1314   			tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1315   			tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_RELEASE;		// status
;;;1316   			tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1317   								  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1318   								  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1319   								  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1320   								  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1321   								  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1322   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1323   			tItem.tItem00.tInfo.bTouch = NO;
000234  f89d0010          LDRB     r0,[sp,#0x10]
;;;1324   			tItem.tItem00.tInfo.bHover = NO;
;;;1325   			tItem.tItem00.tInfo.bScreen = YES;
;;;1326   			tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
000238  f89330da          LDRB     r3,[r3,#0xda]
00023c  f02000a0          BIC      r0,r0,#0xa0           ;1324
000240  f0400040          ORR      r0,r0,#0x40           ;1325
000244  f3631004          BFI      r0,r3,#4,#1
;;;1327   	#if (ID_MAPPING_CHANGE)
;;;1328   			tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1329   	#else
;;;1330   			tItem.tItem00.tInfo.b4FingerID = i + 1;
000248  1c63              ADDS     r3,r4,#1
00024a  f3630003          BFI      r0,r3,#0,#4
00024e  f88d0010          STRB     r0,[sp,#0x10]
;;;1331   	#endif
;;;1332   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1333   			tItem.tItem00.ucRowStart = 0;
;;;1334   
;;;1335   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1336   			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,1);			
;;;1337   #endif
;;;1338   			
;;;1339   			SET_POS(tItem, old_pos);	
000252  9802              LDR      r0,[sp,#8]
000254  f88d6018          STRB     r6,[sp,#0x18]         ;1333
000258  0a00              LSRS     r0,r0,#8
00025a  f88d0011          STRB     r0,[sp,#0x11]
00025e  9803              LDR      r0,[sp,#0xc]
000260  0a00              LSRS     r0,r0,#8
000262  f88d0012          STRB     r0,[sp,#0x12]
000266  9802              LDR      r0,[sp,#8]
000268  f88d0013          STRB     r0,[sp,#0x13]
00026c  9803              LDR      r0,[sp,#0xc]
00026e  f88d0014          STRB     r0,[sp,#0x14]
;;;1340   			tItem.tItem00.ucWidth = 0;
000272  f88d6015          STRB     r6,[sp,#0x15]
;;;1341   			//			thisInfo->bGhostState = NO;
;;;1342   
;;;1343   			if(id == 0)
000276  f1ba0f00          CMP      r10,#0
;;;1344   			{
;;;1345   				tItem.tItem00.usStrength =thisInfo->tCoord.tPos.vusS[i];
00027a  bf04              ITT      EQ
00027c  f8b204ef          LDRHEQ   r0,[r2,#0x4ef]
000280  f8ad0016          STRHEQ   r0,[sp,#0x16]
;;;1346   			}
;;;1347   
;;;1348   			thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
000284  1908              ADDS     r0,r1,r4
000286  f8806e23          STRB     r6,[r0,#0xe23]
;;;1349   #if !(ID_MAPPING_CHANGE)
;;;1350   			protocol_swip_PushTouchEvent(&tItem);
;;;1351   #endif
;;;1352   			protocol_hid_PushTouchEvent(&tItem);
;;;1353   		}
00028a  e7c2              B        |L4.530|
                  |L4.652|
00028c  e7ff              B        |L4.654|
                  |L4.654|
;;;1354   		thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
00028e  68e8              LDR      r0,[r5,#0xc]  ; thisInfo
000290  eb000044          ADD      r0,r0,r4,LSL #1
000294  1c64              ADDS     r4,r4,#1
000296  f8b014ef          LDRH     r1,[r0,#0x4ef]
00029a  f8a01cce          STRH     r1,[r0,#0xcce]
00029e  2c0a              CMP      r4,#0xa
0002a0  f6ffaeeb          BLT      |L4.122|
;;;1355   	}
;;;1356   #if (SWIP_QUEUE_MODE)
;;;1357   	if(thisInfo->bQueueStart == 1){
0002a4  68ea              LDR      r2,[r5,#0xc]  ; thisInfo
0002a6  f5025080          ADD      r0,r2,#0x1000
0002aa  f890115a          LDRB     r1,[r0,#0x15a]
0002ae  2901              CMP      r1,#1
0002b0  d115              BNE      |L4.734|
;;;1358   	#if (SWIP_QUEUE_MODE == 2)
;;;1359   		if(thisInfo->QueueFront == thisInfo->QueueRear || thisInfo->bTouchOffFlag )
0002b2  f8903159          LDRB     r3,[r0,#0x159]
0002b6  f8901158          LDRB     r1,[r0,#0x158]
0002ba  428b              CMP      r3,r1
0002bc  d002              BEQ      |L4.708|
0002be  f890315b          LDRB     r3,[r0,#0x15b]
0002c2  b163              CBZ      r3,|L4.734|
                  |L4.708|
;;;1360   	#endif
;;;1361   		{
;;;1362   			thisInfo->QueueRear++;
;;;1363   			thisInfo->QueueRear = (thisInfo->QueueRear) % SWIP_QUEUE_SIZE;
0002c4  4c12              LDR      r4,|L4.784|
0002c6  1c49              ADDS     r1,r1,#1              ;1359
0002c8  b2c9              UXTB     r1,r1                 ;1362
0002ca  46a4              MOV      r12,r4
0002cc  2300              MOVS     r3,#0
0002ce  fbe1c304          UMLAL    r12,r3,r1,r4
0002d2  085b              LSRS     r3,r3,#1
0002d4  eba303c3          SUB      r3,r3,r3,LSL #3
0002d8  4419              ADD      r1,r1,r3
0002da  f8801158          STRB     r1,[r0,#0x158]
                  |L4.734|
;;;1364   		}
;;;1365   	}
;;;1366   #endif	
;;;1367   	//uA A´Ȭ¬ ¬ɣƬI ɺƬAIȡç.
;;;1368   	thisInfo->tCoord.tPastSentPos.sFinger_ = thisInfo->tCoord.tPos.sFinger_;
0002de  f892049e          LDRB     r0,[r2,#0x49e]
0002e2  f8820c7d          STRB     r0,[r2,#0xc7d]
;;;1369   //	thisInfo->bWasPalm = thisInfo->bIsPalm;
;;;1370   
;;;1371   //	if ((CheckI2CReady() == 0))
;;;1372   #if !(ID_MAPPING_CHANGE)
;;;1373   	protocol_swip_SendTouchEvent(); // ߩҢܭ ۸=
0002e6  f7fffffe          BL       protocol_swip_SendTouchEvent
;;;1374   #endif
;;;1375   //	 protocol_hid_SendTouchEvent();
;;;1376   
;;;1377   #ifdef JOSH3_PEN_TEST
;;;1378   	SendPenData();
;;;1379   #else
;;;1380   #ifdef ADD_TOUCH
;;;1381   	SendTouchData();
0002ea  f7fffffe          BL       SendTouchData
;;;1382   #endif
;;;1383   #endif
;;;1384   #if (ID_MAPPING_CHANGE)	
;;;1385   	if(thisInfo->tCoord.tPos.sFinger_ == 0 && thisInfo->tCoord.tPastPos[0].sFinger_ == 0){if(NonTouchCnt++ > 32767)NonTouchCnt=30;}
;;;1386   	else NonTouchCnt = 0;
;;;1387   	
;;;1388   	if(NonTouchCnt >= 30)
;;;1389   	{
;;;1390   		NewID = 30;
;;;1391   		memset(Id_Map,0,sizeof(Id_Map));
;;;1392   	}
;;;1393   #endif	
;;;1394   	hal_clear_overlap_pen();
0002ee  f7fffffe          BL       hal_clear_overlap_pen
;;;1395   
;;;1396   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1397   	if(thisInfo->tCoord.tPos.sFinger_==0 || thisInfo->tCoord.tPos.sFinger_>1)
;;;1398   	{
;;;1399   		if(bBigFingerEdgeTestEn[0] || bBigFingerEdgeTestEn[1] || bBigFingerEdgeTestEn[2] || bBigFingerEdgeTestEn[3])
;;;1400   		{
;;;1401   			ucBigFingerEdgeTest_MoveEventTHD_Change=0;
;;;1402   			memset(bBigFingerEdgeTestFlag,0,sizeof(bBigFingerEdgeTestFlag));
;;;1403   			if(thisInfo->tCoord.tPos.sFinger_==0)bBigFingerEdgeTestEn[0]=bBigFingerEdgeTestEn[1]=bBigFingerEdgeTestEn[2]=bBigFingerEdgeTestEn[3]=0;
;;;1404   		}
;;;1405   	}	
;;;1406   #endif	
;;;1407   }
0002f2  b007              ADD      sp,sp,#0x1c
0002f4  e8bd8ff0          POP      {r4-r11,pc}
;;;1408   
                          ENDP

                  |L4.760|
                          DCD      HID_status
                  |L4.764|
                          DCD      HID_id
                  |L4.768|
                          DCD      HID_x
                  |L4.772|
                          DCD      HID_y
                  |L4.776|
                          DCD      hid_index
                  |L4.780|
                          DCD      ||.data||
                  |L4.784|
                          DCD      0x49249249

                          AREA ||i.algorithm_calc_angle_inter_2points||, CODE, READONLY, ALIGN=2

                  algorithm_calc_angle_inter_2points PROC
;;;573    #ifndef TILT_OPCODE
;;;574    int32_t algorithm_calc_angle_inter_2points(int diff_x, int diff_y)
000000  e92d03f0          PUSH     {r4-r9}
;;;575    {
;;;576    	int angle = 0;
;;;577    
;;;578    //	int diff_x, diff_y;
;;;579    
;;;580    //	diff_x = _tPos2.x - _tPos1.x;
;;;581    //	diff_y = _tPos2.y - _tPos1.y;
;;;582    
;;;583    	if( diff_x > 0  )
;;;584    	{
;;;585    		if( diff_y > 0 )
;;;586    		{
;;;587    			if( diff_x >= diff_y )
;;;588    				angle = sucArcTanLookUpTable[(diff_y * 100)/diff_x];
000004  f04f0364          MOV      r3,#0x64
000008  fb01f503          MUL      r5,r1,r3
;;;589    			else
;;;590    				angle = 9000 - sucArcTanLookUpTable[(diff_x * 100)/diff_y];
;;;591    		}
;;;592    		else if( diff_y < 0 )
;;;593    		{
;;;594    			if( diff_x >= -(diff_y) )
;;;595    				angle = 36000 - sucArcTanLookUpTable[(-diff_y * 100)/diff_x];
00000c  f06f0c63          MVN      r12,#0x63
000010  1e02              SUBS     r2,r0,#0              ;575
000012  4b3d              LDR      r3,|L5.264|
000014  fb01f40c          MUL      r4,r1,r12
000018  f04f0000          MOV      r0,#0                 ;576
00001c  f2423728          MOV      r7,#0x2328            ;590
;;;596    			else
;;;597    				angle = 27000 + sucArcTanLookUpTable[(diff_x * 100)/-diff_y];
000020  f6461878          MOV      r8,#0x6978
000024  f1c10c00          RSB      r12,r1,#0             ;594
000028  dd2c              BLE      |L5.132|
00002a  2664              MOVS     r6,#0x64              ;590
00002c  4356              MULS     r6,r2,r6              ;590
00002e  2900              CMP      r1,#0                 ;585
000030  dd10              BLE      |L5.84|
000032  4291              CMP      r1,r2                 ;587
000034  bfdf              ITTTT    LE                    ;588
000036  fb95f0f2          SDIVLE   r0,r5,r2              ;588
00003a  f8330010          LDRHLE   r0,[r3,r0,LSL #1]     ;588
;;;598    		}
;;;599    		else
;;;600    		{
;;;601    			angle = 0;
;;;602    		}
;;;603    	}
;;;604    	else if( diff_x < 0 )
;;;605    	{
;;;606    		if( diff_y > 0 )
;;;607    		{
;;;608    			if( -diff_x < diff_y )
;;;609    				angle = 9000 + sucArcTanLookUpTable[(-diff_x * 100)/diff_y];
;;;610    			else
;;;611    				angle = 18000 - sucArcTanLookUpTable[(diff_y * 100)/-diff_x];
;;;612    		}
;;;613    		else if( diff_y < 0 )
;;;614    		{
;;;615    			if( -diff_x >= -diff_y )
;;;616    				angle = 18000 + sucArcTanLookUpTable[(-diff_y * 100)/-diff_x];
;;;617    			else
;;;618    				angle = 27000 - sucArcTanLookUpTable[(-diff_x * 100)/-diff_y];
;;;619    		}
;;;620    		else
;;;621    		{
;;;622    			angle = 18000;
;;;623    		}
;;;624    	}
;;;625    	else
;;;626    	{
;;;627    		if( diff_y > 0 )
;;;628    			angle = 9000;
;;;629    		else if( diff_y < 0 )
;;;630    		{
;;;631    			angle = 27000;
;;;632    		}
;;;633    	}
;;;634    
;;;635    	return angle;
;;;636    }
00003e  e8bd03f0          POPLE    {r4-r9}
000042  4770              BXLE     lr
000044  fb96f0f1          SDIV     r0,r6,r1              ;590
000048  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;590
00004c  1a38              SUBS     r0,r7,r0              ;590
00004e  e8bd03f0          POP      {r4-r9}
000052  4770              BX       lr
                  |L5.84|
000054  bfa4              ITT      GE
000056  e8bd03f0          POPGE    {r4-r9}
00005a  4770              BXGE     lr
00005c  4562              CMP      r2,r12                ;594
00005e  db09              BLT      |L5.116|
000060  fb94f0f2          SDIV     r0,r4,r2              ;595
000064  f64841a0          MOV      r1,#0x8ca0            ;595
000068  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;595
00006c  e8bd03f0          POP      {r4-r9}
000070  1a08              SUBS     r0,r1,r0              ;595
000072  4770              BX       lr
                  |L5.116|
000074  fb96f0fc          SDIV     r0,r6,r12             ;597
000078  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;597
00007c  4440              ADD      r0,r0,r8              ;597
00007e  e8bd03f0          POP      {r4-r9}
000082  4770              BX       lr
                  |L5.132|
000084  da35              BGE      |L5.242|
000086  f06f0063          MVN      r0,#0x63              ;609
00008a  fb02f600          MUL      r6,r2,r0              ;609
00008e  4250              RSBS     r0,r2,#0              ;608
000090  f2446950          MOV      r9,#0x4650            ;611
000094  2900              CMP      r1,#0                 ;606
000096  bf08              IT       EQ                    ;622
000098  f2446050          MOVEQ    r0,#0x4650            ;622
00009c  dd12              BLE      |L5.196|
00009e  4281              CMP      r1,r0                 ;608
0000a0  dd07              BLE      |L5.178|
0000a2  fb96f0f1          SDIV     r0,r6,r1              ;609
0000a6  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;609
0000aa  4438              ADD      r0,r0,r7              ;609
0000ac  e8bd03f0          POP      {r4-r9}
0000b0  4770              BX       lr
                  |L5.178|
0000b2  fb95f0f0          SDIV     r0,r5,r0              ;611
0000b6  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;611
0000ba  eba90000          SUB      r0,r9,r0              ;611
0000be  e8bd03f0          POP      {r4-r9}
0000c2  4770              BX       lr
                  |L5.196|
0000c4  bfa4              ITT      GE
0000c6  e8bd03f0          POPGE    {r4-r9}
0000ca  4770              BXGE     lr
0000cc  4560              CMP      r0,r12                ;615
0000ce  db07              BLT      |L5.224|
0000d0  fb94f0f0          SDIV     r0,r4,r0              ;616
0000d4  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;616
0000d8  4448              ADD      r0,r0,r9              ;616
0000da  e8bd03f0          POP      {r4-r9}
0000de  4770              BX       lr
                  |L5.224|
0000e0  fb96f0fc          SDIV     r0,r6,r12             ;618
0000e4  f8330010          LDRH     r0,[r3,r0,LSL #1]     ;618
0000e8  eba80000          SUB      r0,r8,r0              ;618
0000ec  e8bd03f0          POP      {r4-r9}
0000f0  4770              BX       lr
                  |L5.242|
0000f2  2900              CMP      r1,#0                 ;627
0000f4  bfb8              IT       LT                    ;631
0000f6  f6461078          MOVLT    r0,#0x6978            ;631
0000fa  bfc8              IT       GT                    ;628
0000fc  f2423028          MOVGT    r0,#0x2328            ;628
000100  e8bd03f0          POP      {r4-r9}
000104  4770              BX       lr
;;;637    #endif /* TILT_OPCODE */
                          ENDP

000106  0000              DCW      0x0000
                  |L5.264|
                          DCD      sucArcTanLookUpTable

                          AREA ||i.algorithm_calc_sqrt||, CODE, READONLY, ALIGN=1

                  algorithm_calc_sqrt PROC
;;;475    
;;;476    int32_t algorithm_calc_sqrt(int32_t d)
000000  2101              MOVS     r1,#1
;;;477    {
;;;478        uint32_t x = 1;
;;;479    
;;;480        x = (x + d/x)>>1;
000002  fbb0f1f1          UDIV     r1,r0,r1
000006  1c49              ADDS     r1,r1,#1
000008  0849              LSRS     r1,r1,#1
;;;481        x = (x + d/x)>>1;
00000a  fbb0f2f1          UDIV     r2,r0,r1
00000e  4411              ADD      r1,r1,r2
000010  0849              LSRS     r1,r1,#1
;;;482        x = (x + d/x)>>1;
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  4411              ADD      r1,r1,r2
000018  0849              LSRS     r1,r1,#1
;;;483        x = (x + d/x)>>1;
00001a  fbb0f2f1          UDIV     r2,r0,r1
00001e  4411              ADD      r1,r1,r2
000020  0849              LSRS     r1,r1,#1
;;;484        x = (x + d/x)>>1;
000022  fbb0f2f1          UDIV     r2,r0,r1
000026  4411              ADD      r1,r1,r2
000028  0849              LSRS     r1,r1,#1
;;;485        x = (x + d/x)>>1;
00002a  fbb0f2f1          UDIV     r2,r0,r1
00002e  4411              ADD      r1,r1,r2
000030  0849              LSRS     r1,r1,#1
;;;486        x = (x + d/x)>>1;
000032  fbb0f2f1          UDIV     r2,r0,r1
000036  4411              ADD      r1,r1,r2
000038  0849              LSRS     r1,r1,#1
;;;487        x = (x + d/x)>>1;
00003a  fbb0f2f1          UDIV     r2,r0,r1
00003e  4411              ADD      r1,r1,r2
000040  0849              LSRS     r1,r1,#1
;;;488        x = (x + d/x)>>1;
000042  fbb0f2f1          UDIV     r2,r0,r1
000046  4411              ADD      r1,r1,r2
000048  0849              LSRS     r1,r1,#1
;;;489        x = (x + d/x)>>1;
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  4411              ADD      r1,r1,r2
000050  0849              LSRS     r1,r1,#1
;;;490        x = (x + d/x)>>1;
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  4411              ADD      r1,r1,r2
000058  0849              LSRS     r1,r1,#1
;;;491        x = (x + d/x)>>1;
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  4411              ADD      r1,r1,r2
000060  0849              LSRS     r1,r1,#1
;;;492        x = (x + d/x)>>1;
000062  fbb0f2f1          UDIV     r2,r0,r1
000066  4411              ADD      r1,r1,r2
000068  0849              LSRS     r1,r1,#1
;;;493        x = (x + d/x)>>1;
00006a  fbb0f2f1          UDIV     r2,r0,r1
00006e  4411              ADD      r1,r1,r2
000070  0849              LSRS     r1,r1,#1
;;;494        x = (x + d/x)>>1;
000072  fbb0f0f1          UDIV     r0,r0,r1
000076  4408              ADD      r0,r0,r1
000078  0840              LSRS     r0,r0,#1
;;;495    
;;;496        return x;
;;;497    }
00007a  4770              BX       lr
;;;498    
                          ENDP


                          AREA ||i.algorithm_check_recal_cond||, CODE, READONLY, ALIGN=2

                  algorithm_check_recal_cond PROC
;;;1408   
;;;1409   void algorithm_check_recal_cond(void)
000000  4912              LDR      r1,|L7.76|
;;;1410   {
;;;1411   	thisInfo->bIsRecalCond  = NO;
000002  2200              MOVS     r2,#0
000004  68c8              LDR      r0,[r1,#0xc]  ; thisInfo
000006  7082              STRB     r2,[r0,#2]
;;;1412   	thisInfo->bIsRecalCond2 = NO;
000008  70c2              STRB     r2,[r0,#3]
;;;1413   
;;;1414   	thisInfo->bIsRecalCond = (
00000a  6889              LDR      r1,[r1,#8]  ; thisModeConf
00000c  f8d02025          LDR      r2,[r0,#0x25]
000010  f8d13027          LDR      r3,[r1,#0x27]
000014  429a              CMP      r2,r3
000016  db08              BLT      |L7.42|
;;;1415   			   (thisInfo->tDelta.iPosSum >= thisModeConf->BaseLine.iRecalCond1_PosSum_Thd)
;;;1416   			&& ((thisInfo->tDelta.iNegSum + thisInfo->tDelta.iPosSum) < thisModeConf->BaseLine.iRecalCond1_AccSum_Thd)
000018  f8d0302d          LDR      r3,[r0,#0x2d]
00001c  441a              ADD      r2,r2,r3
00001e  f8d1302b          LDR      r3,[r1,#0x2b]
000022  429a              CMP      r2,r3
000024  bfb8              IT       LT
000026  2201              MOVLT    r2,#1
000028  db00              BLT      |L7.44|
                  |L7.42|
00002a  2200              MOVS     r2,#0
                  |L7.44|
00002c  7082              STRB     r2,[r0,#2]
;;;1417   	);
;;;1418   	thisInfo->bIsRecalCond2 = (
00002e  f24102dd          MOV      r2,#0x10dd
000032  5c12              LDRB     r2,[r2,r0]
000034  b93a              CBNZ     r2,|L7.70|
;;;1419   			   (thisInfo->bTouchExpect == NO)
;;;1420   			&& (thisInfo->tDelta.iNegSum < thisModeConf->BaseLine.iRecalCond2_AccSum_Thd)
000036  f8d0202d          LDR      r2,[r0,#0x2d]
00003a  f8d1102f          LDR      r1,[r1,#0x2f]
00003e  428a              CMP      r2,r1
000040  bfb8              IT       LT
000042  2101              MOVLT    r1,#1
000044  db00              BLT      |L7.72|
                  |L7.70|
000046  2100              MOVS     r1,#0
                  |L7.72|
000048  70c1              STRB     r1,[r0,#3]
;;;1421   	);
;;;1422   }
00004a  4770              BX       lr
;;;1423   
                          ENDP

                  |L7.76|
                          DCD      ||.data||

                          AREA ||i.algorithm_init||, CODE, READONLY, ALIGN=2

                  algorithm_init PROC
;;;122    tAlgorithmInfo_t * tTempAlgorithmInfoDebug;
;;;123    void algorithm_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
;;;125    #if (USED_IDLE_MODE_CONTROL || USED_PEN_MODE_OPERATION || USED_LOCAL_IDLE_MODE_CONTROL || USED_NOISE_HOPPING_FREQ)
;;;126    	const tAppCommonConf_t * _ptAppCommonConf = NULL;
;;;127    	_ptAppCommonConf = app_GetCommonConfig();
000002  f7fffffe          BL       app_GetCommonConfig
000006  4605              MOV      r5,r0
000008  f7fffffe          BL       module_GetModeConfig
00000c  4c19              LDR      r4,|L8.116|
00000e  6060              STR      r0,[r4,#4]  ; ptModuleModeConf
000010  f7fffffe          BL       algorithm_GetModeConfig
000014  60a0              STR      r0,[r4,#8]  ; thisModeConf
000016  f7fffffe          BL       algorithm_baseline_init_param
00001a  f7fffffe          BL       algorithm_label_init_param
00001e  f7fffffe          BL       algorithm_coord_init_param
;;;128    #endif
;;;129    	
;;;130    	algorithm_init_param();
;;;131    	thisInfo = algorithm_GetInfo();
000022  f7fffffe          BL       algorithm_GetInfo
;;;132    #if USED_NOISE_HOPPING_FREQ
;;;133    	ptAppInfo = app_GetInfo();
000026  60e0              STR      r0,[r4,#0xc]  ; thisInfo
000028  f7fffffe          BL       app_GetInfo
;;;134    #endif /* USED_NOISE_HOPPING_FREQ */
;;;135    
;;;136    	DebugAlgorithmInfo = thisInfo;
00002c  6120              STR      r0,[r4,#0x10]  ; ptAppInfo
00002e  68e1              LDR      r1,[r4,#0xc]  ; thisInfo
;;;137    	tTempAlgorithmInfoDebug = thisInfo;
000030  6161              STR      r1,[r4,#0x14]  ; DebugAlgorithmInfo
;;;138    
;;;139    #if USED_IDLE_MODE_CONTROL
;;;140    	#if USED_ENTER_IDLE_REAL_TIME_CHECK
;;;141    		thisInfo->ulIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec;
000032  61a1              STR      r1,[r4,#0x18]  ; tTempAlgorithmInfoDebug
000034  4602              MOV      r2,r0                 ;133
000036  f5015380          ADD      r3,r1,#0x1000
00003a  f8b50013          LDRH     r0,[r5,#0x13]
;;;142    	#else
;;;143    		thisInfo->ulIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;144    	#endif /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;145    	thisInfo->ulIdleModeEnterCheckCount = 0;
00003e  2100              MOVS     r1,#0
000040  e9c3015a          STRD     r0,r1,[r3,#0x168]
;;;146    #if USED_NOISE_HOPPING_FREQ
;;;147    	thisInfo->ulHopFrqIdleModeFrameCntTHD = thisInfo->ulIdleModeEnterFrameCntTHD;
;;;148    #endif /* USED_NOISE_HOPPING_FREQ */
;;;149    
;;;150    #endif /* USED_IDLE_MODE_CONTROL */
;;;151    
;;;152    #if USED_PEN_MODE_OPERATION
;;;153    	thisInfo->uPenLocalModeEnterFrameCntTHD = _ptAppCommonConf->ucPenLocalModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;154    	thisInfo->ulPenLocalModeEnterCheckCount = 0;
;;;155    
;;;156    	thisInfo->ulPenLocalModeChangeFrameCntTHD = _ptAppCommonConf->ucPenLocalModeChangeFrameCntTHD;
;;;157    	thisInfo->ulPenLocalModeChangeCheckCount = 0;
;;;158    	thisInfo->ulPenFullModeChangeFrameCntTHD = _ptAppCommonConf->ucPenFullModeChangeFrameCntTHD;
;;;159    	thisInfo->ulPenFullModeChangeCheckCount = 0;
;;;160    
;;;161    #if USED_LOCAL_IDLE_MODE_CONTROL
;;;162    	thisInfo->ulPenLocalIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec * (_ptAppCommonConf->ucFrameRate / 2);
;;;163    	thisInfo->ulPenLocalIdleModeEnterCheckCount = 0;
;;;164    #endif /* USED_LOCAL_IDLE_MODE_CONTROL */
;;;165    #endif /* USED_PEN_MODE_OPERATION */
;;;166    
;;;167    #if USED_NOISE_HOPPING_FREQ
;;;168    	thisInfo->ulHoppMainRollbackFrameCntTHD = _ptAppCommonConf->HoppMainRollbackSec * _ptAppCommonConf->ucFrameRate;
000044  f8c3015c          STR      r0,[r3,#0x15c]
000048  f8b50017          LDRH     r0,[r5,#0x17]
00004c  f895c010          LDRB     r12,[r5,#0x10]
000050  fb00f00c          MUL      r0,r0,r12
000054  e9c30158          STRD     r0,r1,[r3,#0x160]
;;;169    	thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;170    #if USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE
;;;171    	ptAppInfo->bIsHoppFreqBaseUpdateContinueCheckStart = NO;
000058  75d1              STRB     r1,[r2,#0x17]
;;;172    	ptAppInfo->bIsNormalReadyIdleCheckCountMaintain = NO;
00005a  7591              STRB     r1,[r2,#0x16]
;;;173    	ptAppInfo->ulHoppFreqBaseUpdateFrameCheckCnt = 0;
00005c  6191              STR      r1,[r2,#0x18]
;;;174    	ptAppInfo->ulHoppFreqBaseUpdateContinueCheckCnt = 0;
00005e  61d1              STR      r1,[r2,#0x1c]
;;;175    #endif /* USE_FREQ_HOPPING_BASELINE_CONTI_UPDATE */
;;;176    #endif /* USED_NOISE_HOPPING_FREQ */
;;;177    //	thisInfo-> = _ptAppCommonConf->ucIdleModeEnterSec * _ptAppCommonConf->ucFrameRate;
;;;178    
;;;179    	algorithm_baseline_init();
000060  f7fffffe          BL       algorithm_baseline_init
;;;180    	algorithm_label_init();
000064  f7fffffe          BL       algorithm_label_init
;;;181    	algorithm_coord_init();
000068  f7fffffe          BL       algorithm_coord_init
;;;182    #if USED_NOISE_HOPPING_FREQ
;;;183    	algorithm_noise_init();
00006c  e8bd4070          POP      {r4-r6,lr}
000070  f7ffbffe          B.W      algorithm_noise_init
;;;184    #endif /* USED_NOISE_HOPPING_FREQ */
;;;185    }
;;;186    
                          ENDP

                  |L8.116|
                          DCD      ||.data||

                          AREA ||i.algorithm_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_init_param PROC
;;;186    
;;;187    void algorithm_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;188    {
;;;189    	ptModuleModeConf = module_GetModeConfig();
000002  f7fffffe          BL       module_GetModeConfig
000006  4c06              LDR      r4,|L9.32|
;;;190    	thisModeConf = algorithm_GetModeConfig();
000008  6060              STR      r0,[r4,#4]  ; ptModuleModeConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;191    	algorithm_baseline_init_param();
00000e  60a0              STR      r0,[r4,#8]  ; thisModeConf
000010  f7fffffe          BL       algorithm_baseline_init_param
;;;192    	algorithm_label_init_param();
000014  f7fffffe          BL       algorithm_label_init_param
;;;193    //	algorithm_coord_init();
;;;194    	algorithm_coord_init_param();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      algorithm_coord_init_param
;;;195    }
;;;196    
                          ENDP

                  |L9.32|
                          DCD      ||.data||

                          AREA ||i.algorithm_is_recalibrate||, CODE, READONLY, ALIGN=2

                  algorithm_is_recalibrate PROC
;;;1423   
;;;1424   bool_t algorithm_is_recalibrate(void)
000000  4811              LDR      r0,|L10.72|
;;;1425   {
;;;1426     
;;;1427       /*
;;;1428        * Debouncing.
;;;1429        */
;;;1430       if (thisInfo->bIsRecalCond)
000002  4911              LDR      r1,|L10.72|
000004  2200              MOVS     r2,#0
000006  68c0              LDR      r0,[r0,#0xc]  ; thisInfo
;;;1431       {
;;;1432           if (thisInfo->iRecalCondCnt <= thisModeConf->BaseLine.ucRecalCond1_WaitCnt)
000008  6889              LDR      r1,[r1,#8]
00000a  7883              LDRB     r3,[r0,#2]            ;1430
00000c  b153              CBZ      r3,|L10.36|
00000e  f8911033          LDRB     r1,[r1,#0x33]
000012  6843              LDR      r3,[r0,#4]
000014  428b              CMP      r3,r1
;;;1433           {
;;;1434               thisInfo->iRecalCondCnt++;
000016  bfda              ITTE     LE
000018  1c59              ADDLE    r1,r3,#1
00001a  6041              STRLE    r1,[r0,#4]
;;;1435           }
;;;1436           else
;;;1437           {
;;;1438               thisInfo->iRecalCondCnt = 0;   // added
00001c  6042              STRGT    r2,[r0,#4]
00001e  dd10              BLE      |L10.66|
                  |L10.32|
;;;1439               return YES;
;;;1440           }
;;;1441       }
;;;1442       else if (thisInfo->bIsRecalCond2)
;;;1443       {
;;;1444           if (thisInfo->iRecalCond2Cnt <= thisModeConf->BaseLine.ucRecalCond2_WaitCnt)     // 300 msec
;;;1445           {
;;;1446           	thisInfo->iRecalCond2Cnt++;
;;;1447           }
;;;1448           else
;;;1449           {
;;;1450           	thisInfo->iRecalCond2Cnt = 0;   // added
;;;1451               return YES;
000020  2001              MOVS     r0,#1
;;;1452           }
;;;1453       }
;;;1454       else
;;;1455       {
;;;1456           thisInfo->iRecalCondCnt = 0;
;;;1457           thisInfo->iRecalCond2Cnt = 0;
;;;1458       }
;;;1459   
;;;1460       return NO;
;;;1461   }
000022  4770              BX       lr
                  |L10.36|
000024  78c3              LDRB     r3,[r0,#3]            ;1442
000026  2b00              CMP      r3,#0                 ;1442
000028  bf04              ITT      EQ                    ;1457
00002a  6042              STREQ    r2,[r0,#4]            ;1457
00002c  6082              STREQ    r2,[r0,#8]            ;1457
00002e  d008              BEQ      |L10.66|
000030  f8911034          LDRB     r1,[r1,#0x34]         ;1444
000034  6883              LDR      r3,[r0,#8]            ;1444
000036  428b              CMP      r3,r1                 ;1444
000038  bfda              ITTE     LE                    ;1446
00003a  1c59              ADDLE    r1,r3,#1              ;1446
00003c  6081              STRLE    r1,[r0,#8]            ;1446
00003e  6082              STRGT    r2,[r0,#8]            ;1450
000040  dcee              BGT      |L10.32|
                  |L10.66|
000042  2000              MOVS     r0,#0                 ;1460
000044  4770              BX       lr
;;;1462   
                          ENDP

000046  0000              DCW      0x0000
                  |L10.72|
                          DCD      ||.data||

                          AREA ||i.algorithm_process||, CODE, READONLY, ALIGN=2

                  algorithm_process PROC
;;;2603   
;;;2604   bool_t algorithm_process(uint8_t mode)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;2605   {
;;;2606   	if(hz60) hz60 = NO;
000004  4cfe              LDR      r4,|L11.1024|
;;;2607   	else	hz60 = YES;
000006  2501              MOVS     r5,#1
000008  b098              SUB      sp,sp,#0x60           ;2605
00000a  7860              LDRB     r0,[r4,#1]            ;2606  ; hz60
00000c  2800              CMP      r0,#0                 ;2606
00000e  bf1a              ITTE     NE                    ;2606
000010  2000              MOVNE    r0,#0                 ;2606
000012  7060              STRBNE   r0,[r4,#1]            ;2606
000014  7065              STRBEQ   r5,[r4,#1]
;;;2608   	
;;;2609   	bool_t bIsRecalState = NO;
000016  2000              MOVS     r0,#0
;;;2610   	eSENSING_MODE_t eSensingMode;
;;;2611   	eSensingMode = HAL_GetSensingMode();
000018  9014              STR      r0,[sp,#0x50]
00001a  f7fffffe          BL       HAL_GetSensingMode
;;;2612   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2613   	uint8_t ucInterpolation_Ver = 0;
;;;2614   #endif
;;;2615   	
;;;2616   #if USED_NOISE_HOPPING_FREQ
;;;2617   	{
;;;2618   #if USED_PEN_MODE_OPERATION
;;;2619   #define RAWDATA_STABLE_CNT		(1)
;;;2620   #else
;;;2621   #define RAWDATA_STABLE_CNT		(2)
;;;2622   #endif /* USED_PEN_MODE_OPERATION */
;;;2623   
;;;2624   		if (ptAppInfo->eHoppingStatus == FREQ_HOPPING_CHANGED)
00001e  9008              STR      r0,[sp,#0x20]
000020  6920              LDR      r0,[r4,#0x10]  ; ptAppInfo
000022  7d01              LDRB     r1,[r0,#0x14]
000024  2901              CMP      r1,#1
000026  d07c              BEQ      |L11.290|
                  |L11.40|
;;;2625   		{
;;;2626   			ptAppInfo->ucHoppFrameCnt++;
;;;2627   
;;;2628   			if (ptAppInfo->ucHoppFrameCnt > RAWDATA_STABLE_CNT)
;;;2629   			{
;;;2630   				ptAppInfo->eHoppingStatus = FREQ_HOPPING_NONE;
;;;2631   			}
;;;2632   			else
;;;2633   			{
;;;2634   				return YES;
;;;2635   			}
;;;2636   		}
;;;2637   	}
;;;2638   #endif
;;;2639   	
;;;2640   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2641   	if( (thisModeConf->Coord.ucFullFingerInterpolation_On > 0 && mode == FULL_MODE) || (thisModeConf->Coord.ucLocalFingerInterpolation_On > 0 && mode == LOCAL_FINGER_MODE) )
;;;2642   	{
;;;2643   		if(mode == FULL_MODE)ucInterpolation_Ver = thisModeConf->Coord.ucFullFingerInterpolation_On;
;;;2644   		else ucInterpolation_Ver = thisModeConf->Coord.ucLocalFingerInterpolation_On;
;;;2645   	}
;;;2646   	
;;;2647   #if !USED_DO_NOT_FINGER_TOUCH_REPORT
;;;2648   	if(ucInterpolation_Ver > 0)
;;;2649   	{
;;;2650   
;;;2651   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2652   		if(ucInterpolation_Ver == 2 || ucInterpolation_Ver == 3)
;;;2653   		{
;;;2654   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;2655   			//algorithm_PendTouchEvent();
;;;2656   	#endif
;;;2657   			//algorithm_coord_UpdatePosHistoryInfo();
;;;2658   		}
;;;2659   #endif
;;;2660   		
;;;2661   		thisInfo->tCoord.bInterpolation_On = YES;
;;;2662   		algorithm_coord_interpolation(ucInterpolation_Ver);
;;;2663   		
;;;2664   #if (INTERPOLATION_VER1_En == YES)
;;;2665   		if(ucInterpolation_Ver == 1)
;;;2666   		{
;;;2667   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;2668   			//if(hz60)	algorithm_PendTouchEvent();
;;;2669   	#endif
;;;2670   			//if(hz60)	algorithm_coord_UpdatePosHistoryInfo();
;;;2671   		}
;;;2672   #endif
;;;2673   	}
;;;2674   	else
;;;2675   #endif /* !USED_DO_NOT_FINGER_TOUCH_REPORT */
;;;2676   	{
;;;2677   		thisInfo->tCoord.bInterpolation_On = NO;
;;;2678   	}
;;;2679   #endif
;;;2680   	
;;;2681   	algorithm_coord_initialise_pos_buffer();
000028  f7fffffe          BL       algorithm_coord_initialise_pos_buffer
00002c  f8df93d8          LDR      r9,|L11.1032|
000030  f8dfe3d0          LDR      lr,|L11.1028|
000034  2000              MOVS     r0,#0
000036  f10901a0          ADD      r1,r9,#0xa0
00003a  bf00              NOP      
                  |L11.60|
00003c  4ef3              LDR      r6,|L11.1036|
00003e  f04f0b00          MOV      r11,#0
000042  4df3              LDR      r5,|L11.1040|
000044  eb000340          ADD      r3,r0,r0,LSL #1
000048  465a              MOV      r2,r11
00004a  f10607a0          ADD      r7,r6,#0xa0
00004e  eb0304c0          ADD      r4,r3,r0,LSL #3
000052  bf00              NOP      
                  |L11.84|
000054  f85e3022          LDR      r3,[lr,r2,LSL #2]
000058  2a02              CMP      r2,#2
00005a  ebc31303          RSB      r3,r3,r3,LSL #4
00005e  ebc303c3          RSB      r3,r3,r3,LSL #3
000062  eb0503c3          ADD      r3,r5,r3,LSL #3
000066  f833c014          LDRH     r12,[r3,r4,LSL #1]
00006a  eb030344          ADD      r3,r3,r4,LSL #1
00006e  f8b33154          LDRH     r3,[r3,#0x154]
000072  d921              BLS      |L11.184|
000074  eb091802          ADD      r8,r9,r2,LSL #4
000078  eb080840          ADD      r8,r8,r0,LSL #1
00007c  f9388c30          LDRSH    r8,[r8,#-0x30]
000080  45e0              CMP      r8,r12
000082  d119              BNE      |L11.184|
000084  eb061802          ADD      r8,r6,r2,LSL #4
000088  eb080840          ADD      r8,r8,r0,LSL #1
00008c  f9388c30          LDRSH    r8,[r8,#-0x30]
000090  45e0              CMP      r8,r12
000092  d111              BNE      |L11.184|
000094  eb011802          ADD      r8,r1,r2,LSL #4
000098  eb080840          ADD      r8,r8,r0,LSL #1
00009c  f9388c30          LDRSH    r8,[r8,#-0x30]
0000a0  4598              CMP      r8,r3
0000a2  d109              BNE      |L11.184|
0000a4  eb071802          ADD      r8,r7,r2,LSL #4
0000a8  eb080840          ADD      r8,r8,r0,LSL #1
0000ac  f9388c30          LDRSH    r8,[r8,#-0x30]
0000b0  4598              CMP      r8,r3
0000b2  bf08              IT       EQ
0000b4  f10b0b01          ADDEQ    r11,r11,#1
                  |L11.184|
0000b8  eb091802          ADD      r8,r9,r2,LSL #4
0000bc  f828c010          STRH     r12,[r8,r0,LSL #1]
0000c0  eb011c02          ADD      r12,r1,r2,LSL #4
0000c4  1c52              ADDS     r2,r2,#1
0000c6  f82c3010          STRH     r3,[r12,r0,LSL #1]
0000ca  2a0a              CMP      r2,#0xa
0000cc  d3c2              BCC      |L11.84|
0000ce  2200              MOVS     r2,#0
0000d0  4614              MOV      r4,r2
0000d2  4694              MOV      r12,r2
                  |L11.212|
0000d4  f00c03ff          AND      r3,r12,#0xff
0000d8  eb091503          ADD      r5,r9,r3,LSL #4
0000dc  eb011303          ADD      r3,r1,r3,LSL #4
0000e0  f8358010          LDRH     r8,[r5,r0,LSL #1]
0000e4  f8337010          LDRH     r7,[r3,r0,LSL #1]
0000e8  f10c0303          ADD      r3,r12,#3
0000ec  b2dd              UXTB     r5,r3
0000ee  eb091305          ADD      r3,r9,r5,LSL #4
0000f2  eb011505          ADD      r5,r1,r5,LSL #4
0000f6  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000fa  f8356010          LDRH     r6,[r5,r0,LSL #1]
0000fe  f10c0506          ADD      r5,r12,#6
000102  b2ed              UXTB     r5,r5
000104  eb091a05          ADD      r10,r9,r5,LSL #4
000108  eb011505          ADD      r5,r1,r5,LSL #4
00010c  f83aa010          LDRH     r10,[r10,r0,LSL #1]
000110  f8355010          LDRH     r5,[r5,r0,LSL #1]
000114  4598              CMP      r8,r3
000116  bf02              ITTT     EQ
000118  4553              CMPEQ    r3,r10
00011a  1c63              ADDEQ    r3,r4,#1
00011c  b2dc              UXTBEQ   r4,r3
00011e  42b7              CMP      r7,r6
000120  e000              B        |L11.292|
                  |L11.290|
000122  e02c              B        |L11.382|
                  |L11.292|
000124  bf02              ITTT     EQ
000126  42ae              CMPEQ    r6,r5
000128  1c52              ADDEQ    r2,r2,#1
00012a  b2d2              UXTBEQ   r2,r2
00012c  f10c0c01          ADD      r12,r12,#1
000130  f1bc0f03          CMP      r12,#3
000134  d3ce              BCC      |L11.212|
000136  2c03              CMP      r4,#3
000138  bf28              IT       CS
00013a  2a03              CMPCS    r2,#3
00013c  d302              BCC      |L11.324|
00013e  4bb0              LDR      r3,|L11.1024|
000140  2201              MOVS     r2,#1
000142  701a              STRB     r2,[r3,#0]
                  |L11.324|
000144  f1bb0f07          CMP      r11,#7
000148  d024              BEQ      |L11.404|
00014a  1c40              ADDS     r0,r0,#1
00014c  2808              CMP      r0,#8
00014e  f4ffaf75          BCC      |L11.60|
000152  49ad              LDR      r1,|L11.1032|
000154  22a0              MOVS     r2,#0xa0
000156  f50170a0          ADD      r0,r1,#0x140
00015a  f7fffffe          BL       __aeabi_memcpy
00015e  49ad              LDR      r1,|L11.1044|
000160  22a0              MOVS     r2,#0xa0
000162  f50170a0          ADD      r0,r1,#0x140
000166  f7fffffe          BL       __aeabi_memcpy
00016a  2000              MOVS     r0,#0
                  |L11.364|
;;;2682   
;;;2683   #if USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK
;;;2684   	thisInfo->bIsESDRecovery = algorithm_CheckRawDataStuck();
00016c  4da4              LDR      r5,|L11.1024|
;;;2685   	if(thisInfo->bIsESDRecovery)
00016e  2800              CMP      r0,#0
000170  68e9              LDR      r1,[r5,#0xc]          ;2684  ; thisInfo
000172  f5015180          ADD      r1,r1,#0x1000         ;2684
000176  f88102a8          STRB     r0,[r1,#0x2a8]        ;2684
00017a  d15e              BNE      |L11.570|
00017c  e00c              B        |L11.408|
                  |L11.382|
00017e  7d41              LDRB     r1,[r0,#0x15]         ;2626
000180  1c49              ADDS     r1,r1,#1              ;2626
000182  b2c9              UXTB     r1,r1                 ;2626
000184  7541              STRB     r1,[r0,#0x15]         ;2626
000186  2902              CMP      r1,#2                 ;2628
000188  bf84              ITT      HI                    ;2630
00018a  2100              MOVHI    r1,#0                 ;2630
00018c  7501              STRBHI   r1,[r0,#0x14]         ;2630
00018e  f63faf4b          BHI      |L11.40|
000192  e052              B        |L11.570|
                  |L11.404|
000194  2001              MOVS     r0,#1                 ;2628
000196  e7e9              B        |L11.364|
                  |L11.408|
;;;2686   	{
;;;2687   	#if USED_ESD_DEBUG
;;;2688   		gbRawdataStuckReset = thisInfo->bIsESDRecovery;
;;;2689   	#endif
;;;2690   		return YES; //
;;;2691   //		while(1); // watch-dog Reset!!
;;;2692   	}
;;;2693   #endif /* USED_ESD_RECOERY_DETECTION_RAWDATA_STUCK */
;;;2694   
;;;2695   #if DEF_ESD_DEBUG_RAWDATA_BEFORE_LINEFILTER
;;;2696   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_GET_RAW_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*Raw Data*/);
000198  4e9f              LDR      r6,|L11.1048|
00019a  e9d60100          LDRD     r0,r1,[r6,#0]
00019e  68b2              LDR      r2,[r6,#8]  ; <Data4>
0001a0  9001              STR      r0,[sp,#4]
0001a2  e9cd1202          STRD     r1,r2,[sp,#8]
0001a6  4a9a              LDR      r2,|L11.1040|
0001a8  a901              ADD      r1,sp,#4
0001aa  2003              MOVS     r0,#3
0001ac  f7fffffe          BL       protocol_Log
;;;2697   	#if USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;2698   		protocol_LogMatrix(LT_PENPOS_RAWDATA, COL_MAX, HAL_GET_ESD_RAW_IMAGE_PTR(), COL_MAX, FINGER_ESD_SCAN_ROW_MAX_NUM, 84/*Raw Data*/);
0001b0  e9d60103          LDRD     r0,r1,[r6,#0xc]
0001b4  6972              LDR      r2,[r6,#0x14]  ; <Data5>
0001b6  900a              STR      r0,[sp,#0x28]
0001b8  e9cd120b          STRD     r1,r2,[sp,#0x2c]
0001bc  4c94              LDR      r4,|L11.1040|
0001be  a90a              ADD      r1,sp,#0x28
0001c0  f50452fc          ADD      r2,r4,#0x1f80
0001c4  2019              MOVS     r0,#0x19
0001c6  f7fffffe          BL       protocol_Log
;;;2699   	#endif
;;;2700   #endif
;;;2701   
;;;2702   	memset(sLFOffsetRow, 0, sizeof(sLFOffsetRow));
0001ca  2160              MOVS     r1,#0x60
0001cc  4893              LDR      r0,|L11.1052|
0001ce  f7fffffe          BL       __aeabi_memclr
;;;2703   	memset(sLFOffsetCol, 0, sizeof(sLFOffsetCol));
0001d2  21a8              MOVS     r1,#0xa8
0001d4  4892              LDR      r0,|L11.1056|
0001d6  f7fffffe          BL       __aeabi_memclr
;;;2704   
;;;2705   	if(!IS_S3_MODE(eSensingMode))
0001da  9808              LDR      r0,[sp,#0x20]
0001dc  f4106f00          TST      r0,#0x800
0001e0  d106              BNE      |L11.496|
;;;2706   	{
;;;2707   	#if FINGER_LF_VER1_EN
;;;2708   		if(thisModeConf->SensingFilter.cLineFilter == 1)
;;;2709   		{
;;;2710   			alogorithm_linefilter(eSensingMode);
;;;2711   		}
;;;2712   	#endif
;;;2713   	#if FINGER_LF_VER2_EN
;;;2714   		if(thisModeConf->SensingFilter.cLineFilter == 2)
0001e2  68a8              LDR      r0,[r5,#8]  ; thisModeConf
0001e4  f890004c          LDRB     r0,[r0,#0x4c]
0001e8  2802              CMP      r0,#2
;;;2715   		{
;;;2716   			alogorithm_linefilter_2();
0001ea  bf08              IT       EQ
0001ec  f7fffffe          BLEQ     alogorithm_linefilter_2
                  |L11.496|
;;;2717   		}
;;;2718   	#endif
;;;2719   	#if	USED_DSPA_FUNC_FOR_FINGER && USED_DSPA_FUNC_FOR_FINGER_LF
;;;2720   		if(thisModeConf->SensingFilter.cLineFilter == 3)
;;;2721   		{
;;;2722   			uint16_t * pBaseImage;
;;;2723   		#if USED_NOISE_HOPPING_FREQ
;;;2724   			if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;2725   			{
;;;2726   				pBaseImage = g_pFingerBaseImage;
;;;2727   			}
;;;2728   			else
;;;2729   			{
;;;2730   				pBaseImage = g_pFingerHop1BaseImage;
;;;2731   			}
;;;2732   //			pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2733   		#else /* USED_NOISE_HOPPING_FREQ */
;;;2734   			pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2735   		#endif /* USED_NOISE_HOPPING_FREQ */
;;;2736   			alogorithm_linefilter_dspA((uint32_t)&RAWIMAGE[0][0],(uint32_t)(&pBaseImage[0]),(uint32_t)&DSPATMPDELTA_Finger[0][0],(uint32_t)&LINEFILTERBUFST2_Finger[0],(uint32_t)&LINEFILTERBUFST3_Finger[0],ROW_MAX,
;;;2737   			(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift),0);
;;;2738   		}
;;;2739   	#endif
;;;2740   	#if FINGER_LF_VER4_EN
;;;2741   		if(thisModeConf->SensingFilter.cLineFilter == 4)
;;;2742   		{
;;;2743   			alogorithm_linefilter_simple(eSensingMode);
;;;2744   			alogorithm_vertical_linefilter_simple(eSensingMode);
;;;2745   		}
;;;2746   	#endif /* (CUSTOMER != MODEL_DEF_FHD_92503B) */
;;;2747   	}
;;;2748   
;;;2749   #if (DEF_ESD_DEBUG_RAWDATA_BEFORE_LINEFILTER == NO)
;;;2750   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_GET_RAW_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*Raw Data*/);
;;;2751   #endif
;;;2752   
;;;2753   	algorithm_baseline_calculate_delta(mode);
0001f0  9818              LDR      r0,[sp,#0x60]
0001f2  f7fffffe          BL       algorithm_baseline_calculate_delta
;;;2754   	
;;;2755   	#if USED_ESD_RECOVERY_RESET_TOUCH_AT_FIRST_FRAME
;;;2756   	if(thisInfo->bIsESDGhostRecoveryATFirstFrame_Check)
0001f6  68e8              LDR      r0,[r5,#0xc]  ; thisInfo
0001f8  f5005080          ADD      r0,r0,#0x1000
0001fc  f89012a9          LDRB     r1,[r0,#0x2a9]
000200  b1f9              CBZ      r1,|L11.578|
;;;2757   	{
;;;2758   		if(thisInfo->ulESDGhostRecoveryATFirstFrame_Check_Count == 0)
000202  f8d012ac          LDR      r1,[r0,#0x2ac]
000206  2900              CMP      r1,#0
;;;2759   		{
;;;2760   			thisInfo->ulESDGhostRecoveryATFirstFrame_TouchExpect_Count = 0;
000208  bf04              ITT      EQ
00020a  2200              MOVEQ    r2,#0
00020c  f8c022b0          STREQ    r2,[r0,#0x2b0]
000210  1c49              ADDS     r1,r1,#1
;;;2761   		}
;;;2762   
;;;2763   		thisInfo->ulESDGhostRecoveryATFirstFrame_Check_Count++;
;;;2764   		if(thisInfo->ulESDGhostRecoveryATFirstFrame_Check_Count < DEF_ESD_RECOVERY_RESET_TOUCH_AT_FIRST_FRAME_CNT_THD)
000212  f8c012ac          STR      r1,[r0,#0x2ac]
000216  290a              CMP      r1,#0xa
000218  d208              BCS      |L11.556|
;;;2765   		{
;;;2766   			if(thisInfo->bTouchExpect)
00021a  f89010dd          LDRB     r1,[r0,#0xdd]
00021e  b181              CBZ      r1,|L11.578|
;;;2767   			{
;;;2768   				thisInfo->ulESDGhostRecoveryATFirstFrame_TouchExpect_Count++;
000220  f8d012b0          LDR      r1,[r0,#0x2b0]
000224  1c49              ADDS     r1,r1,#1
;;;2769   				// Touch Skip!!
;;;2770   				return YES;
000226  f8c012b0          STR      r1,[r0,#0x2b0]
00022a  e006              B        |L11.570|
                  |L11.556|
;;;2771   			}
;;;2772   		}
;;;2773   		else
;;;2774   		{
;;;2775   			thisInfo->bIsESDGhostRecoveryATFirstFrame_Check = NO;
00022c  2100              MOVS     r1,#0
00022e  f88012a9          STRB     r1,[r0,#0x2a9]
;;;2776   			if(thisInfo->ulESDGhostRecoveryATFirstFrame_TouchExpect_Count > 0)
000232  f8d012b0          LDR      r1,[r0,#0x2b0]
000236  b939              CBNZ     r1,|L11.584|
000238  e003              B        |L11.578|
                  |L11.570|
;;;2777   			{
;;;2778   				thisInfo->bIsESDRecovery = YES;
;;;2779   				// Reset For ESD!!
;;;2780   				return YES;
;;;2781   			}
;;;2782   		}
;;;2783   	}
;;;2784   	#endif /* USED_ESD_RECOVERY_RESET_TOUCH_AT_FIRST_FRAME */
;;;2785   
;;;2786   	#if USED_ESD_RECOVERY_CHECK_ABNORMAL_PEN_DELTA
;;;2787   	if (thisInfo->bIsESD_Abnormal_Delta_Reset)
;;;2788   	{
;;;2789   		thisInfo->bIsESDRecovery = YES;
;;;2790   		// Reset For ESD!!
;;;2791   		return YES;
;;;2792   	}
;;;2793   	#endif
;;;2794   
;;;2795   //	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);
;;;2796   	#if USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;2797   		protocol_LogMatrix(LT_PENPOS_INTENSITY, COL_MAX, HAL_GET_ESD_DELTA_IMAGE_PTR(), COL_MAX, FINGER_ESD_SCAN_ROW_MAX_NUM, 81/*MAX Intensity*/);
;;;2798   	#endif
;;;2799   
;;;2800   	#if USED_ESD_RECOVERY_SENSING_WITHOUT_MODULATION
;;;2801   	{
;;;2802   		if(thisInfo->bIsESD_ReportSkip_ByESDScan == YES)
;;;2803   		{
;;;2804   			if(thisInfo->ulESD_ReportSkip_Count_ByESDScan < DEF_ESD_SCAN_REPORT_SKIP_CNT_THD)
;;;2805   			{
;;;2806   				thisInfo->ulESD_ReportSkip_Count_ByESDScan++;
;;;2807   				// Touch Skip!!
;;;2808   				return YES;
;;;2809   			}
;;;2810   			else
;;;2811   			{
;;;2812   				thisInfo->bIsESD_ReportSkip_ByESDScan = NO;
;;;2813   				thisInfo->ulESD_ReportSkip_Count_ByESDScan = 0;
;;;2814   			}
;;;2815   		}
;;;2816   	}
;;;2817   	#endif
;;;2818   //	return YES;
;;;2819   		
;;;2820   	if((mode == FULL_MODE && !thisModeConf->BaseLine.bFullModeReBaseCheckOff) || (mode == LOCAL_FINGER_MODE && !thisModeConf->BaseLine.bLocalModeReBaseCheckOff))
;;;2821   	{
;;;2822   		algorithm_check_recal_cond();
;;;2823   		bIsRecalState = algorithm_is_recalibrate();
;;;2824   	#if USED_ESD_DEBUG
;;;2825   		gbRecalReset = bIsRecalState;
;;;2826   	#endif
;;;2827   	}
;;;2828   	
;;;2829   	if(IS_S3_MODE(eSensingMode) && IS_IDLE_MODE(eSensingMode))
;;;2830   	{
;;;2831   		algorithm_baseline_tracking_continuous(mode);
;;;2832   	}
;;;2833   	else
;;;2834   	{
;;;2835   		if(bIsRecalState == NO)
;;;2836   		{
;;;2837   #if (FingerAreaPenDeltaDelete==1 || FingerAreaPenDeltaNoAcc==1 || FingerAreaLineFilter == 1)
;;;2838   			if(mode == LOCAL_FINGER_MODE)
;;;2839   			{
;;;2840   				if(thisModeConf->BaseLine.cFingerAreaPenDeltaDelete != 0 || thisModeConf->BaseLine.cFingerAreaPenDeltaNoAcc != 0 || thisModeConf->SensingFilter.sFingerAreaLineFilterLimit != 0)
;;;2841   				{
;;;2842   					thisInfo->tPenInfo.LocalFingerArea.rs = ROW_MAX;
;;;2843   					thisInfo->tPenInfo.LocalFingerArea.re = 0;
;;;2844   					thisInfo->tPenInfo.LocalFingerArea.cs = COL_MAX;
;;;2845   					thisInfo->tPenInfo.LocalFingerArea.ce = 0;	
;;;2846   				}
;;;2847   			}
;;;2848   #endif			
;;;2849   			// process label image from delta image
;;;2850   			algorithm_label_process(mode);
;;;2851   			algorithm_coord_process(FULL_MODE);
;;;2852   			//heon
;;;2853   			for( int rx = 0; rx<ROW_MAX; rx++ ){
;;;2854   				for( int cx = 0; cx <COL_MAX; cx++){
;;;2855   					if(HAL_READ_LABEL_IMAGE(rx,cx) != 0){
;;;2856   						HAL_WRITE_DELTA_IMAGE(rx+13,cx,HAL_READ_LABEL_IMAGE(rx,cx)+10);
;;;2857   					}
;;;2858   				}
;;;2859   			}
;;;2860   			protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);
;;;2861   			//
;;;2862   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2863   			if(ucInterpolation_Ver >= 2)
;;;2864   			{		
;;;2865   				algorithm_coord_interpolation_v02(ucInterpolation_Ver);
;;;2866   			}
;;;2867   #endif
;;;2868   		}
;;;2869   
;;;2870   #if USED_NOISE_HOPPING_FREQ
;;;2871   //		if(mode == FULL_MODE)
;;;2872   		{
;;;2873   			algorithm_noise_process(eSensingMode);
;;;2874   		}
;;;2875   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2876   
;;;2877   #if PALM_VER1_EN
;;;2878   		if(thisModeConf->Palm.ucPalmDetectionOn == 1 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 0))
;;;2879   			public_func_PalmTouch_handler();
;;;2880   		
;;;2881   		if(thisInfo->bIsPalm || thisInfo->tCoord.tPos.sFinger_ > 5) thisInfo->bNewVersionPalm = 1;
;;;2882   		if(!thisInfo->bTouchExpect) thisInfo->bNewVersionPalm = 0;
;;;2883   #endif
;;;2884   		if(thisInfo->bIsPalm)
;;;2885   		{
;;;2886   			if(thisInfo->tLabel.ucPalmCnt < 100)
;;;2887   				thisInfo->tLabel.ucPalmCnt++;
;;;2888   		}
;;;2889   		else
;;;2890   			thisInfo->tLabel.ucPalmCnt = 0;
;;;2891   
;;;2892   #if USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN
;;;2893   		{
;;;2894   			bool_t bTopMuxDelta, bBottomMuxDelta;
;;;2895   			uint8_t max_c, mux_num;
;;;2896   			uint16_t min_delta;
;;;2897   
;;;2898   //			usLabelThd  = thisModeConf->Label.usSeedBase;
;;;2899   //			usLabelThd += ((temp_delta->iMaxStrength - thisModeConf->Label.usSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
;;;2900   
;;;2901   			if (thisInfo->tDelta.iMaxStrength > thisModeConf->Label.usSeedBase)
;;;2902   			{
;;;2903   				max_c = thisInfo->tDelta.tMaxCellPos.c;
;;;2904   				mux_num = thisInfo->tDelta.tMaxCellPos.r / ROW_PER_MUX;
;;;2905   				min_delta = thisInfo->tDelta.iMaxStrength * MIN_DELTA_RATIO / 10;
;;;2906   
;;;2907   				//	1. Check current mux delta
;;;2908   				if (algorithm_Check_Mux_Delta(mux_num, max_c, min_delta, YES))
;;;2909   				{
;;;2910   					//	2. Check top/bottom mux delta
;;;2911   
;;;2912   					bTopMuxDelta = bBottomMuxDelta = YES;
;;;2913   
;;;2914   					if (mux_num != FIRST_MUX_NUM)
;;;2915   						bTopMuxDelta = algorithm_Check_Mux_Delta(mux_num - 1, max_c, MIN_DELTA, NO);
;;;2916   
;;;2917   					if (mux_num != LAST_MUX_NUM)
;;;2918   						bBottomMuxDelta = algorithm_Check_Mux_Delta(mux_num + 1, max_c, MIN_DELTA, NO);
;;;2919   
;;;2920   
;;;2921   					if (bTopMuxDelta && bBottomMuxDelta)
;;;2922   						gbSkipTouch = YES;	//	ESD Ghost Touch
;;;2923   				}
;;;2924   			}
;;;2925   
;;;2926   //			while(gbSkipTouch)	//	Debug
;;;2927   //			{
;;;2928   //				protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);
;;;2929   //				medium_delay(300);
;;;2930   //#ifdef MODE_WDT
;;;2931   //				KICK_DOG();
;;;2932   //#endif
;;;2933   //			};
;;;2934   		}
;;;2935   #endif /* USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN */
;;;2936   
;;;2937   #if USED_PEN_MODE_OPERATION
;;;2938   		if(mode == FULL_MODE)
;;;2939   		{
;;;2940   			thisInfo->sFullLcoalChangeMinTh = thisModeConf->BaseLine.sFullLcoalChangeMinTh;
;;;2941   			if((thisInfo->bIsPalm == YES && thisInfo->tCoord.tPos.sFinger_ >= 1) || thisInfo->tCoord.tPos.sFinger_ >= 6)
;;;2942   				thisInfo->sFullLcoalChangeMinTh += thisModeConf->BaseLine.cFullLcoalChangeMinThOffset;
;;;2943   			if(thisInfo->tDelta.iMinStrength < thisInfo->sFullLcoalChangeMinTh)
;;;2944   			{
;;;2945   				thisInfo->bLocal_sensing = YES;
;;;2946   				algorithm_baseline_calculate_mux_range(thisInfo->tDelta.tMinCellPos.r, thisInfo->tDelta.tMinCellPos.c);
;;;2947   			}
;;;2948   		}
;;;2949   #endif
;;;2950   	
;;;2951   #if !USED_DO_NOT_FINGER_TOUCH_REPORT
;;;2952   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2953   		if(ucInterpolation_Ver < 2)
;;;2954   #endif
;;;2955   		{
;;;2956   	#if (FINGER_Latency_Test_ByFW == YES)
;;;2957   			algorithm_coord_latency_cal_test();
;;;2958   	#endif
;;;2959   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;2960   #if (DEF_ESD_RECOVERY_CHECK_CURRENT_FRAME_RAWDATA_STUCK || USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN)
;;;2961   			if (!gbSkipTouch){
;;;2962   				if(hz60)	algorithm_PendTouchEvent();
;;;2963   			}
;;;2964   			else
;;;2965   			{
;;;2966   				gbSkipTouch = NO;
;;;2967   				gusSkipTouchCnt++;
;;;2968   			}
;;;2969   #else /* (DEF_ESD_RECOVERY_CHECK_CURRENT_FRAME_RAWDATA_STUCK || USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN) */
;;;2970   //			if(hz60)	algorithm_PendTouchEvent();
;;;2971   #endif /* (DEF_ESD_RECOVERY_CHECK_CURRENT_FRAME_RAWDATA_STUCK || USED_ESD_RECOVERY_GHOST_TOUCH_DELTA_PATTERN) */
;;;2972   	#endif
;;;2973   			if(hz60)	algorithm_coord_UpdatePosHistoryInfo();
;;;2974   		}
;;;2975   #endif /* !USED_DO_NOT_FINGER_TOUCH_REPORT */
;;;2976   		
;;;2977   		if(thisModeConf->BaseLine.bFingerBaseTracking == 1 && ((mode == FULL_MODE && thisModeConf->BaseLine.bFullFingerBaseTracking == 1) || (mode == LOCAL_FINGER_MODE)))
;;;2978   			algorithm_baseline_tracking_continuous(mode);
;;;2979   	}
;;;2980   
;;;2981   	return (bIsRecalState == NO);
;;;2982   }
00023a  b019              ADD      sp,sp,#0x64
00023c  2001              MOVS     r0,#1                 ;2780
00023e  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.578|
000242  f89012bc          LDRB     r1,[r0,#0x2bc]        ;2787
000246  b119              CBZ      r1,|L11.592|
                  |L11.584|
000248  2101              MOVS     r1,#1                 ;2789
00024a  f88012a8          STRB     r1,[r0,#0x2a8]        ;2789
00024e  e7f4              B        |L11.570|
                  |L11.592|
000250  e9d60106          LDRD     r0,r1,[r6,#0x18]      ;2797
000254  6a32              LDR      r2,[r6,#0x20]         ;2797  ; <Data6>
000256  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;2797
00025a  9206              STR      r2,[sp,#0x18]         ;2797
00025c  4a71              LDR      r2,|L11.1060|
00025e  a904              ADD      r1,sp,#0x10           ;2797
000260  201b              MOVS     r0,#0x1b              ;2797
000262  f7fffffe          BL       protocol_Log
000266  68e8              LDR      r0,[r5,#0xc]          ;2802  ; thisInfo
000268  f5005380          ADD      r3,r0,#0x1000         ;2802
00026c  f89312b4          LDRB     r1,[r3,#0x2b4]        ;2802
000270  2901              CMP      r1,#1                 ;2802
000272  d004              BEQ      |L11.638|
                  |L11.628|
000274  9918              LDR      r1,[sp,#0x60]         ;2820
000276  b189              CBZ      r1,|L11.668|
000278  2902              CMP      r1,#2                 ;2820
00027a  d014              BEQ      |L11.678|
00027c  e05b              B        |L11.822|
                  |L11.638|
00027e  f8d312b8          LDR      r1,[r3,#0x2b8]        ;2804
000282  290a              CMP      r1,#0xa               ;2804
000284  bf39              ITTEE    CC                    ;2806
000286  1c48              ADDCC    r0,r1,#1              ;2806
000288  f8c302b8          STRCC    r0,[r3,#0x2b8]        ;2806
00028c  2100              MOVCS    r1,#0                 ;2812
00028e  f88312b4          STRBCS   r1,[r3,#0x2b4]        ;2812
000292  bf28              IT       CS                    ;2813
000294  f8c312b8          STRCS    r1,[r3,#0x2b8]        ;2813
000298  d3cf              BCC      |L11.570|
00029a  e7eb              B        |L11.628|
                  |L11.668|
00029c  68a9              LDR      r1,[r5,#8]            ;2820  ; thisModeConf
00029e  f8911035          LDRB     r1,[r1,#0x35]         ;2820
0002a2  bbb9              CBNZ     r1,|L11.788|
0002a4  e003              B        |L11.686|
                  |L11.678|
0002a6  68a9              LDR      r1,[r5,#8]            ;2820  ; thisModeConf
0002a8  f8911036          LDRB     r1,[r1,#0x36]         ;2820
0002ac  bb91              CBNZ     r1,|L11.788|
                  |L11.686|
0002ae  2200              MOVS     r2,#0                 ;2820
0002b0  7082              STRB     r2,[r0,#2]            ;2820
0002b2  70c2              STRB     r2,[r0,#3]            ;2820
0002b4  68a9              LDR      r1,[r5,#8]            ;2820  ; thisModeConf
0002b6  f8d0c025          LDR      r12,[r0,#0x25]        ;2820
0002ba  f8d17027          LDR      r7,[r1,#0x27]         ;2820
0002be  45bc              CMP      r12,r7                ;2820
0002c0  db09              BLT      |L11.726|
0002c2  f8d0702d          LDR      r7,[r0,#0x2d]         ;2820
0002c6  44bc              ADD      r12,r12,r7            ;2820
0002c8  f8d1702b          LDR      r7,[r1,#0x2b]         ;2820
0002cc  45bc              CMP      r12,r7                ;2820
0002ce  bfb8              IT       LT                    ;2820
0002d0  f04f0c01          MOVLT    r12,#1                ;2820
0002d4  db01              BLT      |L11.730|
                  |L11.726|
0002d6  f04f0c00          MOV      r12,#0                ;2820
                  |L11.730|
0002da  f880c002          STRB     r12,[r0,#2]           ;2820
0002de  f89330dd          LDRB     r3,[r3,#0xdd]         ;2820
0002e2  b93b              CBNZ     r3,|L11.756|
0002e4  f8d0302d          LDR      r3,[r0,#0x2d]         ;2820
0002e8  f8d1702f          LDR      r7,[r1,#0x2f]         ;2820
0002ec  42bb              CMP      r3,r7                 ;2820
0002ee  bfb8              IT       LT                    ;2820
0002f0  2301              MOVLT    r3,#1                 ;2820
0002f2  db00              BLT      |L11.758|
                  |L11.756|
0002f4  2300              MOVS     r3,#0                 ;2820
                  |L11.758|
0002f6  70c3              STRB     r3,[r0,#3]            ;2820
0002f8  f1bc0f00          CMP      r12,#0                ;2820
0002fc  d00b              BEQ      |L11.790|
0002fe  f8911033          LDRB     r1,[r1,#0x33]         ;2820
000302  6843              LDR      r3,[r0,#4]            ;2820
000304  428b              CMP      r3,r1                 ;2820
000306  bfda              ITTE     LE                    ;2820
000308  1c59              ADDLE    r1,r3,#1              ;2820
00030a  6041              STRLE    r1,[r0,#4]            ;2820
00030c  6042              STRGT    r2,[r0,#4]            ;2820
00030e  dd10              BLE      |L11.818|
                  |L11.784|
000310  2001              MOVS     r0,#1                 ;2820
000312  e00f              B        |L11.820|
                  |L11.788|
000314  e00f              B        |L11.822|
                  |L11.790|
000316  2b00              CMP      r3,#0                 ;2820
000318  bf04              ITT      EQ                    ;2820
00031a  6042              STREQ    r2,[r0,#4]            ;2820
00031c  6082              STREQ    r2,[r0,#8]            ;2820
00031e  d008              BEQ      |L11.818|
000320  f8911034          LDRB     r1,[r1,#0x34]         ;2820
000324  6883              LDR      r3,[r0,#8]            ;2820
000326  428b              CMP      r3,r1                 ;2820
000328  bfda              ITTE     LE                    ;2820
00032a  1c59              ADDLE    r1,r3,#1              ;2820
00032c  6081              STRLE    r1,[r0,#8]            ;2820
00032e  6082              STRGT    r2,[r0,#8]            ;2820
000330  dcee              BGT      |L11.784|
                  |L11.818|
000332  2000              MOVS     r0,#0                 ;2820
                  |L11.820|
000334  9014              STR      r0,[sp,#0x50]         ;2823
                  |L11.822|
000336  9808              LDR      r0,[sp,#0x20]         ;2829
000338  f4106f00          TST      r0,#0x800             ;2829
00033c  bf1e              ITTT     NE                    ;2829
00033e  9808              LDRNE    r0,[sp,#0x20]         ;2829
000340  f4107f80          TSTNE    r0,#0x100             ;2829
000344  9818              LDRNE    r0,[sp,#0x60]         ;2831
000346  d173              BNE      |L11.1072|
000348  9814              LDR      r0,[sp,#0x50]         ;2835
00034a  bb60              CBNZ     r0,|L11.934|
00034c  9818              LDR      r0,[sp,#0x60]         ;2850
00034e  f7fffffe          BL       algorithm_label_process
000352  2000              MOVS     r0,#0                 ;2851
000354  f7fffffe          BL       algorithm_coord_process
000358  2000              MOVS     r0,#0                 ;2853
                  |L11.858|
00035a  1821              ADDS     r1,r4,r0              ;2855
00035c  f5013188          ADD      r1,r1,#0x11000        ;2855
000360  f8912640          LDRB     r2,[r1,#0x640]        ;2855
000364  b132              CBZ      r2,|L11.884|
000366  eb040340          ADD      r3,r4,r0,LSL #1       ;2856
00036a  f5034370          ADD      r3,r3,#0xf000         ;2856
00036e  320a              ADDS     r2,r2,#0xa            ;2856
000370  f8a32f48          STRH     r2,[r3,#0xf48]        ;2856
                  |L11.884|
000374  f8911641          LDRB     r1,[r1,#0x641]        ;2855
000378  b131              CBZ      r1,|L11.904|
00037a  eb040240          ADD      r2,r4,r0,LSL #1       ;2856
00037e  f5024270          ADD      r2,r2,#0xf000         ;2856
000382  310a              ADDS     r1,r1,#0xa            ;2856
000384  f8a21f4a          STRH     r1,[r2,#0xf4a]        ;2856
                  |L11.904|
000388  1c80              ADDS     r0,r0,#2              ;2856
00038a  f5b06f7c          CMP      r0,#0xfc0             ;2856
00038e  dbe4              BLT      |L11.858|
000390  e9d60109          LDRD     r0,r1,[r6,#0x24]      ;2860
000394  6af2              LDR      r2,[r6,#0x2c]         ;2860  ; <Data8>
000396  920f              STR      r2,[sp,#0x3c]         ;2860
000398  e9cd010d          STRD     r0,r1,[sp,#0x34]      ;2860
00039c  4a22              LDR      r2,|L11.1064|
00039e  a90d              ADD      r1,sp,#0x34           ;2860
0003a0  2004              MOVS     r0,#4                 ;2860
0003a2  f7fffffe          BL       protocol_Log
                  |L11.934|
0003a6  9808              LDR      r0,[sp,#0x20]         ;2873
0003a8  f7fffffe          BL       algorithm_noise_process
0003ac  68e8              LDR      r0,[r5,#0xc]          ;2884  ; thisInfo
0003ae  f24101da          MOV      r1,#0x10da            ;2884
0003b2  5c09              LDRB     r1,[r1,r0]            ;2884
0003b4  b129              CBZ      r1,|L11.962|
0003b6  f8901368          LDRB     r1,[r0,#0x368]        ;2886
0003ba  2964              CMP      r1,#0x64              ;2886
0003bc  bf38              IT       CC                    ;2886
0003be  1c49              ADDCC    r1,r1,#1              ;2886
0003c0  d201              BCS      |L11.966|
                  |L11.962|
0003c2  f8801368          STRB     r1,[r0,#0x368]        ;2887
                  |L11.966|
0003c6  68aa              LDR      r2,[r5,#8]            ;2901  ; thisModeConf
0003c8  f8d01015          LDR      r1,[r0,#0x15]         ;2901
0003cc  f8b22064          LDRH     r2,[r2,#0x64]         ;2901
0003d0  4291              CMP      r1,r2                 ;2901
0003d2  dd4c              BLE      |L11.1134|
0003d4  f8908035          LDRB     r8,[r0,#0x35]         ;2903
0003d8  f9900036          LDRSB    r0,[r0,#0x36]         ;2904
0003dc  2267              MOVS     r2,#0x67              ;2904
0003de  4350              MULS     r0,r2,r0              ;2904
0003e0  1242              ASRS     r2,r0,#9              ;2904
0003e2  eba270e0          SUB      r0,r2,r0,ASR #31      ;2904
0003e6  b2c4              UXTB     r4,r0                 ;2904
0003e8  00c8              LSLS     r0,r1,#3              ;2904
0003ea  4910              LDR      r1,|L11.1068|
0003ec  fb811000          SMULL    r1,r0,r1,r0           ;2905
0003f0  1081              ASRS     r1,r0,#2              ;2905
0003f2  eba170e0          SUB      r0,r1,r0,ASR #31      ;2905
0003f6  b282              UXTH     r2,r0                 ;2905
0003f8  2301              MOVS     r3,#1                 ;2908
0003fa  4641              MOV      r1,r8                 ;2908
0003fc  4620              MOV      r0,r4                 ;2908
0003fe  e018              B        |L11.1074|
                  |L11.1024|
                          DCD      ||.data||
                  |L11.1028|
                          DCD      ||.data||+0x1c
                  |L11.1032|
                          DCD      ||area_number.21||+0x60
                  |L11.1036|
                          DCD      ||area_number.21||+0x1a0
                  |L11.1040|
                          DCD      FullSharedBuff
                  |L11.1044|
                          DCD      ||area_number.21||+0x100
                  |L11.1048|
                          DCD      ||.constdata||
                  |L11.1052|
                          DCD      ||area_number.21||
                  |L11.1056|
                          DCD      ||area_number.21||+0x376
                  |L11.1060|
                          DCD      FullSharedBuff+0x3330
                  |L11.1064|
                          DCD      FullSharedBuff+0xf6c0
                  |L11.1068|
                          DCD      0x66666667
                  |L11.1072|
000430  e041              B        |L11.1206|
                  |L11.1074|
000432  f7fffffe          BL       algorithm_Check_Mux_Delta
000436  b1d0              CBZ      r0,|L11.1134|
000438  2701              MOVS     r7,#1                 ;2912
00043a  463e              MOV      r6,r7                 ;2912
00043c  b14c              CBZ      r4,|L11.1106|
00043e  1e60              SUBS     r0,r4,#1              ;2915
000440  b2c0              UXTB     r0,r0                 ;2915
000442  2300              MOVS     r3,#0                 ;2915
000444  220a              MOVS     r2,#0xa               ;2915
000446  4641              MOV      r1,r8                 ;2915
000448  f7fffffe          BL       algorithm_Check_Mux_Delta
00044c  4606              MOV      r6,r0                 ;2915
00044e  2c09              CMP      r4,#9                 ;2917
000450  d007              BEQ      |L11.1122|
                  |L11.1106|
000452  1c60              ADDS     r0,r4,#1              ;2918
000454  b2c0              UXTB     r0,r0                 ;2918
000456  2300              MOVS     r3,#0                 ;2918
000458  220a              MOVS     r2,#0xa               ;2918
00045a  4641              MOV      r1,r8                 ;2918
00045c  f7fffffe          BL       algorithm_Check_Mux_Delta
000460  4607              MOV      r7,r0                 ;2918
                  |L11.1122|
000462  2e00              CMP      r6,#0                 ;2921
000464  bf1e              ITTT     NE                    ;2921
000466  2f00              CMPNE    r7,#0                 ;2921
000468  2001              MOVNE    r0,#1                 ;2922
00046a  7028              STRBNE   r0,[r5,#0]            ;2922
00046c  d101              BNE      |L11.1138|
                  |L11.1134|
00046e  7828              LDRB     r0,[r5,#0]            ;2961  ; gbSkipTouch
000470  b188              CBZ      r0,|L11.1174|
                  |L11.1138|
000472  f04f0000          MOV      r0,#0                 ;2966
000476  7028              STRB     r0,[r5,#0]            ;2966
000478  8868              LDRH     r0,[r5,#2]            ;2967  ; gusSkipTouchCnt
00047a  f1000001          ADD      r0,r0,#1              ;2967
00047e  8068              STRH     r0,[r5,#2]            ;2967
                  |L11.1152|
000480  7868              LDRB     r0,[r5,#1]            ;2973  ; hz60
000482  2800              CMP      r0,#0                 ;2973
000484  bf18              IT       NE                    ;2973
000486  f7fffffe          BLNE     algorithm_coord_UpdatePosHistoryInfo
                  |L11.1162|
00048a  68a8              LDR      r0,[r5,#8]            ;2977  ; thisModeConf
00048c  f8901043          LDRB     r1,[r0,#0x43]         ;2977
000490  2901              CMP      r1,#1                 ;2977
000492  d006              BEQ      |L11.1186|
000494  e011              B        |L11.1210|
                  |L11.1174|
000496  7868              LDRB     r0,[r5,#1]            ;2962  ; hz60
000498  2800              CMP      r0,#0                 ;2962
00049a  d0f6              BEQ      |L11.1162|
00049c  f7fffffe          BL       algorithm_PendTouchEvent
0004a0  e7ee              B        |L11.1152|
                  |L11.1186|
0004a2  9918              LDR      r1,[sp,#0x60]         ;2977
0004a4  b111              CBZ      r1,|L11.1196|
0004a6  2902              CMP      r1,#2                 ;2977
0004a8  d004              BEQ      |L11.1204|
0004aa  e006              B        |L11.1210|
                  |L11.1196|
0004ac  f890004a          LDRB     r0,[r0,#0x4a]         ;2977
0004b0  2801              CMP      r0,#1                 ;2977
0004b2  d102              BNE      |L11.1210|
                  |L11.1204|
0004b4  4608              MOV      r0,r1                 ;2978
                  |L11.1206|
0004b6  f7fffffe          BL       algorithm_baseline_tracking_continuous
                  |L11.1210|
0004ba  9814              LDR      r0,[sp,#0x50]         ;2981
0004bc  2800              CMP      r0,#0                 ;2981
0004be  bf18              IT       NE                    ;2981
0004c0  2000              MOVNE    r0,#0                 ;2981
0004c2  f43faeba          BEQ      |L11.570|
0004c6  b019              ADD      sp,sp,#0x64
0004c8  e8bd8ff0          POP      {r4-r11,pc}
;;;2983   
                          ENDP


                          AREA ||i.algorithm_process_Idle||, CODE, READONLY, ALIGN=2

                  algorithm_process_Idle PROC
;;;3033   #if USED_IDLE_MODE_CONTROL
;;;3034   bool_t algorithm_process_Idle(void)
000000  b510              PUSH     {r4,lr}
;;;3035   {
000002  b086              SUB      sp,sp,#0x18
;;;3036   	bool_t bIsRecalState = NO;
;;;3037   
;;;3038   	memset(sLFOffsetRow, 0, sizeof(sLFOffsetRow));
000004  2160              MOVS     r1,#0x60
000006  4813              LDR      r0,|L12.84|
000008  f7fffffe          BL       __aeabi_memclr
;;;3039   	memset(sLFOffsetCol, 0, sizeof(sLFOffsetCol));
00000c  21a8              MOVS     r1,#0xa8
00000e  4812              LDR      r0,|L12.88|
000010  f7fffffe          BL       __aeabi_memclr
;;;3040   	alogorithm_linefilter_idle();
000014  f7fffffe          BL       alogorithm_linefilter_idle
;;;3041   	algorithm_baseline_calculate_delta_idle();
000018  f7fffffe          BL       algorithm_baseline_calculate_delta_idle
;;;3042   	algorithm_baseline_tracking_continuous_idle();
00001c  f7fffffe          BL       algorithm_baseline_tracking_continuous_idle
;;;3043   
;;;3044   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_NI_GET_RAW_IMAGE_PTR(), COL_MAX, NI_ROW_MAX, 84/*MAX Intensity*/);
000020  4c0e              LDR      r4,|L12.92|
000022  e9d4010c          LDRD     r0,r1,[r4,#0x30]
000026  6ba2              LDR      r2,[r4,#0x38]  ; <Data11>
000028  9000              STR      r0,[sp,#0]
00002a  e9cd1201          STRD     r1,r2,[sp,#4]
00002e  4a0c              LDR      r2,|L12.96|
000030  4669              MOV      r1,sp
000032  2003              MOVS     r0,#3
000034  f7fffffe          BL       protocol_Log
;;;3045   //	#if USED_IDLE_FINGER_EVEN_ODD
;;;3046   //		protocol_LogMatrix(LT_INTENSITY, COL_MAX, HAL_NI_GET_DELTA_IMAGE_PTR(), COL_MAX, (LOCAL_FINGER_1MUX_ROW_NUM<<1), 84/*MAX Intensity*/);
;;;3047   //	#else
;;;3048   		protocol_LogMatrix(LT_INTENSITY, COL_MAX, HAL_NI_GET_DELTA_IMAGE_PTR(), COL_MAX, LOCAL_FINGER_1MUX_ROW_NUM, 84/*MAX Intensity*/);
000038  e9d4010f          LDRD     r0,r1,[r4,#0x3c]
00003c  6c62              LDR      r2,[r4,#0x44]  ; <Data12>
00003e  9205              STR      r2,[sp,#0x14]
000040  e9cd0103          STRD     r0,r1,[sp,#0xc]
000044  4a07              LDR      r2,|L12.100|
000046  a903              ADD      r1,sp,#0xc
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       protocol_Log
;;;3049   //	#endif
;;;3050   
;;;3051   	return (bIsRecalState == NO);
;;;3052   }
00004e  b006              ADD      sp,sp,#0x18
000050  2001              MOVS     r0,#1                 ;3051
000052  bd10              POP      {r4,pc}
;;;3053   #endif /* USED_IDLE_MODE_CONTROL */
                          ENDP

                  |L12.84|
                          DCD      ||area_number.21||
                  |L12.88|
                          DCD      ||area_number.21||+0x376
                  |L12.92|
                          DCD      ||.constdata||
                  |L12.96|
                          DCD      FullSharedBuff
                  |L12.100|
                          DCD      FullSharedBuff+0x12600

                          AREA ||i.alogorithm_linefilter_2||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_2 PROC
;;;1735    */
;;;1736   void alogorithm_linefilter_2(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1737   {
;;;1738   	uint32_t r, c;
;;;1739   	uint32_t i, j;
;;;1740   	int16_t d;
;;;1741   	int16_t SortBufCol[COL_MAX], TempBuf;
;;;1742   	uint8_t sort_cnt, sort_range;
;;;1743   	int16_t sub_offset;
;;;1744   	uint16_t * pBaseImage;
;;;1745   	int Max_Val, Min_Val;
;;;1746   	int lDiff, lDiffSum = 0, lDiffSumCnt = 0;
;;;1747   	int min_delta_th = (thisModeConf->SensingFilter.ucMinDeltaTh << ptModuleModeConf->ucOvrShift);
000004  495b              LDR      r1,|L13.372|
000006  b0c7              SUB      sp,sp,#0x11c          ;1737
;;;1748   	int lUpperTHD = thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift, lLowTHD = thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1749   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1750   
;;;1751   	//int max_compan_val = 11;
;;;1752   #if (ROW_MAX == 45)
;;;1753   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44};
;;;1754   #elif (ROW_MAX == 47)
;;;1755   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46};
;;;1756   #elif (ROW_MAX == 48)
;;;1757   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47};
000008  ad30              ADD      r5,sp,#0xc0
00000a  688a              LDR      r2,[r1,#8]            ;1747  ; thisModeConf
00000c  6848              LDR      r0,[r1,#4]            ;1747  ; ptModuleModeConf
00000e  f8923054          LDRB     r3,[r2,#0x54]         ;1747
000012  7800              LDRB     r0,[r0,#0]            ;1747
000014  4083              LSLS     r3,r3,r0              ;1747
000016  9340              STR      r3,[sp,#0x100]        ;1748
000018  f9b2304d          LDRSH    r3,[r2,#0x4d]         ;1748
00001c  f9b2204f          LDRSH    r2,[r2,#0x4f]         ;1748
000020  fa03f700          LSL      r7,r3,r0              ;1748
000024  fa02f800          LSL      r8,r2,r0              ;1748
000028  a053              ADR      r0,|L13.376|
00002a  e8b0101c          LDM      r0!,{r2-r4,r12}
00002e  e885101c          STM      r5,{r2-r4,r12}
000032  e8b0101c          LDM      r0!,{r2-r4,r12}
000036  ad34              ADD      r5,sp,#0xd0
000038  e885101c          STM      r5,{r2-r4,r12}
00003c  e890100d          LDM      r0,{r0,r2,r3,r12}
000040  ac38              ADD      r4,sp,#0xe0
000042  e884100d          STM      r4,{r0,r2,r3,r12}
;;;1758   #elif (ROW_MAX == 50)
;;;1759   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49};
;;;1760   #endif
;;;1761   	uint8_t row_cnt = sizeof(do_row);
;;;1762   	uint8_t real_row;
;;;1763   	
;;;1764   	sort_cnt = 4;//(uint8_t)(((int)COL_MAX * 5)/100);
;;;1765   	sort_range = COL_MAX/4 + COL_MAX%4;
;;;1766   
;;;1767   #if USED_NOISE_HOPPING_FREQ
;;;1768   	if(ptAppInfo->eCurrentSelectFreq == FREQ_MAIN)
000046  6908              LDR      r0,[r1,#0x10]  ; ptAppInfo
000048  7c80              LDRB     r0,[r0,#0x12]
00004a  2801              CMP      r0,#1
;;;1769   //	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;1770   	{
;;;1771   		pBaseImage = g_pFingerBaseImage;
00004c  bf0c              ITE      EQ
00004e  4856              LDREQ    r0,|L13.424|
;;;1772   	}
;;;1773   	else
;;;1774   	{
;;;1775   		pBaseImage = g_pFingerHop1BaseImage;
000050  4856              LDRNE    r0,|L13.428|
000052  6800              LDR      r0,[r0,#0]  ; g_pFingerHop1BaseImage
;;;1776   	}
;;;1777   #else /* USED_NOISE_HOPPING_FREQ */
;;;1778   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1779   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1780   	
;;;1781   	for(r = 0; r < row_cnt; r++)
;;;1782   	{
;;;1783   		real_row = do_row[r];
;;;1784   		lDiffSum = 0, lDiffSumCnt = 0;
;;;1785   		Max_Val = INT16_MIN, Min_Val = INT16_MAX;
;;;1786   		for( c = 0; c < sort_range; c++ )
;;;1787   		{
;;;1788   			SortBufCol[c] = lDiff = (int16_t)HAL_READ_RAW_IMAGE(real_row, (c*4)) - (int16_t)pBaseImage[real_row*COL_MAX + c*4];
;;;1789   			
;;;1790   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;1791   			{
;;;1792   				if(Max_Val < lDiff)Max_Val = lDiff;
;;;1793   				if(Min_Val > lDiff)Min_Val = lDiff;
;;;1794   				lDiffSum += lDiff;
;;;1795   				lDiffSumCnt++;
;;;1796   			}
;;;1797   		}
;;;1798   		
;;;1799   		if(min_delta_th && Min_Val < -min_delta_th && thisInfo->tLabel.ucPalmCnt < 10)
000054  9041              STR      r0,[sp,#0x104]
000056  68c8              LDR      r0,[r1,#0xc]  ; thisInfo
000058  9042              STR      r0,[sp,#0x108]        ;1747
00005a  9840              LDR      r0,[sp,#0x100]
00005c  2500              MOVS     r5,#0                 ;1781
00005e  4240              RSBS     r0,r0,#0
000060  902e              STR      r0,[sp,#0xb8]
                  |L13.98|
000062  a830              ADD      r0,sp,#0xc0           ;1783
000064  9941              LDR      r1,[sp,#0x104]        ;1786
000066  5d46              LDRB     r6,[r0,r5]            ;1783
000068  4a52              LDR      r2,|L13.436|
00006a  ebc600c6          RSB      r0,r6,r6,LSL #3       ;1786
00006e  eb000040          ADD      r0,r0,r0,LSL #1       ;1786
000072  f04f0b00          MOV      r11,#0                ;1784
000076  f8dfa138          LDR      r10,|L13.432|
00007a  465c              MOV      r4,r11                ;1784
00007c  f64779ff          MOV      r9,#0x7fff            ;1785
000080  eb0101c0          ADD      r1,r1,r0,LSL #3       ;1786
000084  466b              MOV      r3,sp                 ;1786
000086  eb0202c0          ADD      r2,r2,r0,LSL #3       ;1786
00008a  f04f0c15          MOV      r12,#0x15             ;1786
00008e  bf00              NOP                            ;1788
                  |L13.144|
000090  f9b20000          LDRSH    r0,[r2,#0]            ;1788
000094  f9b1e000          LDRSH    lr,[r1,#0]            ;1788
000098  eba0000e          SUB      r0,r0,lr              ;1788
00009c  f8230b02          STRH     r0,[r3],#2            ;1788
0000a0  42b8              CMP      r0,r7                 ;1790
0000a2  bfb8              IT       LT                    ;1790
0000a4  4580              CMPLT    r8,r0                 ;1790
0000a6  da05              BGE      |L13.180|
0000a8  4582              CMP      r10,r0                ;1792
0000aa  db5e              BLT      |L13.362|
                  |L13.172|
0000ac  4581              CMP      r9,r0                 ;1793
0000ae  dc5e              BGT      |L13.366|
                  |L13.176|
0000b0  4483              ADD      r11,r11,r0            ;1794
0000b2  1c64              ADDS     r4,r4,#1              ;1794
                  |L13.180|
0000b4  3108              ADDS     r1,r1,#8              ;1794
0000b6  3208              ADDS     r2,r2,#8              ;1794
0000b8  f1bc0c01          SUBS     r12,r12,#1            ;1794
0000bc  d1e8              BNE      |L13.144|
0000be  9840              LDR      r0,[sp,#0x100]
0000c0  b188              CBZ      r0,|L13.230|
0000c2  982e              LDR      r0,[sp,#0xb8]
0000c4  4581              CMP      r9,r0
0000c6  da0d              BGE      |L13.228|
0000c8  9842              LDR      r0,[sp,#0x108]
0000ca  f8900368          LDRB     r0,[r0,#0x368]
0000ce  280a              CMP      r0,#0xa
0000d0  d208              BCS      |L13.228|
;;;1800   		{
;;;1801   			if(lDiffSumCnt > 3)
0000d2  2c03              CMP      r4,#3
0000d4  dd27              BLE      |L13.294|
;;;1802   			{
;;;1803   				sLFOffsetRow[real_row] = lDiffSum / ((int16_t)lDiffSumCnt);
0000d6  b220              SXTH     r0,r4
0000d8  fb9bf0f0          SDIV     r0,r11,r0
0000dc  4936              LDR      r1,|L13.440|
0000de  f8210016          STRH     r0,[r1,r6,LSL #1]
0000e2  e020              B        |L13.294|
                  |L13.228|
;;;1804   			}
;;;1805   		}
;;;1806   		else
;;;1807   		{
;;;1808   			for( i=0; i<=(sort_cnt); i++ )
0000e4  2000              MOVS     r0,#0
                  |L13.230|
0000e6  4669              MOV      r1,sp                 ;1741
                  |L13.232|
;;;1809   			{
;;;1810   				for( j=(i+1); j<sort_range; j++ )
0000e8  eb010240          ADD      r2,r1,r0,LSL #1
0000ec  f1c00c14          RSB      r12,r0,#0x14
0000f0  f1120202          ADDS.W   r2,r2,#2
                  |L13.244|
;;;1811   				{
;;;1812   					if( SortBufCol[i] > SortBufCol[j] )
0000f4  f9313010          LDRSH    r3,[r1,r0,LSL #1]
0000f8  f9b24000          LDRSH    r4,[r2,#0]
0000fc  42a3              CMP      r3,r4
;;;1813   					{
;;;1814   						TempBuf = SortBufCol[i];
;;;1815   						SortBufCol[i] = SortBufCol[j];
0000fe  bfc4              ITT      GT
000100  f8214010          STRHGT   r4,[r1,r0,LSL #1]
;;;1816   						SortBufCol[j] = TempBuf;
000104  8013              STRHGT   r3,[r2,#0]
000106  1c92              ADDS     r2,r2,#2
000108  f1bc0c01          SUBS     r12,r12,#1
00010c  d1f2              BNE      |L13.244|
                  |L13.270|
00010e  1c40              ADDS     r0,r0,#1              ;1812
;;;1817   					}
000110  2805              CMP      r0,#5
000112  d203              BCS      |L13.284|
000114  1c42              ADDS     r2,r0,#1              ;1810
000116  2a15              CMP      r2,#0x15              ;1810
000118  d2f9              BCS      |L13.270|
00011a  e7e5              B        |L13.232|
                  |L13.284|
;;;1818   				}
;;;1819   			}
;;;1820   			TempBuf = SortBufCol[sort_cnt];
;;;1821   			
;;;1822   			sLFOffsetRow[real_row] = TempBuf;
00011c  4926              LDR      r1,|L13.440|
00011e  f8bd0008          LDRH     r0,[sp,#8]            ;1820
000122  f8210016          STRH     r0,[r1,r6,LSL #1]
                  |L13.294|
000126  1c6d              ADDS     r5,r5,#1
000128  2d30              CMP      r5,#0x30
00012a  d39a              BCC      |L13.98|
00012c  4d21              LDR      r5,|L13.436|
00012e  4e22              LDR      r6,|L13.440|
;;;1823   		}
;;;1824   	}
;;;1825   
;;;1826   #if !FAST_LF_EN		
;;;1827   	for(r = 0; r < row_cnt; r++)
000130  2300              MOVS     r3,#0
000132  ac30              ADD      r4,sp,#0xc0           ;1757
                  |L13.308|
;;;1828   	{
;;;1829   		real_row = do_row[r];
;;;1830   		for( c=0; c<COL_MAX; c++ )
000134  2254              MOVS     r2,#0x54
000136  5ce0              LDRB     r0,[r4,r3]            ;1829
;;;1831   		{
;;;1832   			d = (int16_t)HAL_READ_RAW_IMAGE(real_row, c);
;;;1833   			sub_offset = sLFOffsetRow[real_row];
000138  f936c010          LDRSH    r12,[r6,r0,LSL #1]
00013c  ebc000c0          RSB      r0,r0,r0,LSL #3       ;1830
000140  eb000040          ADD      r0,r0,r0,LSL #1       ;1830
000144  eb0500c0          ADD      r0,r5,r0,LSL #3       ;1830
                  |L13.328|
000148  8801              LDRH     r1,[r0,#0]            ;1832
;;;1834   			d = d - sub_offset;
00014a  eba1010c          SUB      r1,r1,r12
00014e  b209              SXTH     r1,r1
;;;1835   			if(d < 0)
000150  2900              CMP      r1,#0
;;;1836   			{
;;;1837   				d = 0;
000152  bfb8              IT       LT
000154  2100              MOVLT    r1,#0
;;;1838   			}
;;;1839   			HAL_WRITE_RAW_IMAGE(real_row, c, (uint16_t)d);
000156  f8201b02          STRH     r1,[r0],#2
00015a  1e52              SUBS     r2,r2,#1
00015c  d1f4              BNE      |L13.328|
00015e  1c5b              ADDS     r3,r3,#1              ;1835
000160  2b30              CMP      r3,#0x30
000162  d3e7              BCC      |L13.308|
;;;1840   		}
;;;1841   	}
;;;1842   #endif
;;;1843   }
000164  b047              ADD      sp,sp,#0x11c
000166  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.362|
00016a  4682              MOV      r10,r0                ;1792
00016c  e79e              B        |L13.172|
                  |L13.366|
00016e  4681              MOV      r9,r0                 ;1793
000170  e79e              B        |L13.176|
;;;1844   #if FINGER_LF_VER1_EN
                          ENDP

000172  0000              DCW      0x0000
                  |L13.372|
                          DCD      ||.data||
                  |L13.376|
000178  00                DCB      0
000179  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,17,18,19,20,21,22,23
00017d  05060708
000181  090a0b0c
000185  0d0e0f10
000189  11121314
00018d  151617  
000190  18191a1b          DCB      24,25,26,27,28,29,30,31," !""#$$%&'()*+,-./"
000194  1c1d1e1f
000198  20212223
00019c  24252627
0001a0  28292a2b
0001a4  2c2d2e2f
                  |L13.424|
                          DCD      g_pFingerBaseImage
                  |L13.428|
                          DCD      g_pFingerHop1BaseImage
                  |L13.432|
                          DCD      0xffff8000
                  |L13.436|
                          DCD      FullSharedBuff
                  |L13.440|
                          DCD      ||area_number.21||

                          AREA ||i.alogorithm_linefilter_idle||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_idle PROC
;;;2035   #if (USED_LOCAL_IDLE_MODE_CONTROL || USED_IDLE_MODE_CONTROL)
;;;2036   void alogorithm_linefilter_idle(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;2037   {
;;;2038   	int32_t r, c;
;;;2039   	int16_t LINE_FILTER_UPPER_LIMIT			= (thisModeConf->SensingFilter.sLineFilterUpLimit_Idle) << ptModuleModeConf->ucIdleOvrShift; //thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  492a              LDR      r1,|L14.176|
;;;2040   	int16_t LINE_FILTER_LOWER_LIMIT			= (thisModeConf->SensingFilter.sLineFilterLowLimit_Idle) << ptModuleModeConf->ucIdleOvrShift; //thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;2041   	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;2042   	int16_t sDiff;
;;;2043   	int16_t sDiffSum = 0;
;;;2044   	uint32_t ulDiffSumCnt = 0;
;;;2045   
;;;2046   	uint16_t *pBaseImage, *pRawImage;
;;;2047   
;;;2048   	pRawImage = HAL_NI_GET_RAW_IMAGE_PTR();
;;;2049   	pBaseImage = HAL_NI_GET_BASELINE_IMAGE_PTR();
000006  f8dfb0b0          LDR      r11,|L14.184|
00000a  6888              LDR      r0,[r1,#8]            ;2039  ; thisModeConf
00000c  6849              LDR      r1,[r1,#4]            ;2039  ; ptModuleModeConf
00000e  f8b0205c          LDRH     r2,[r0,#0x5c]         ;2039
000012  7849              LDRB     r1,[r1,#1]            ;2039
000014  f890c051          LDRB     r12,[r0,#0x51]        ;2041
000018  408a              LSLS     r2,r2,r1              ;2039
00001a  fa0ff882          SXTH     r8,r2                 ;2039
00001e  f8b0205e          LDRH     r2,[r0,#0x5e]         ;2040
000022  4824              LDR      r0,|L14.180|
000024  fa02f101          LSL      r1,r2,r1              ;2040
000028  fa0ff981          SXTH     r9,r1                 ;2040
;;;2050   
;;;2051   	for(r = 0; r < NI_ROW_MAX; r++)
00002c  2100              MOVS     r1,#0
;;;2052   	{
;;;2053   		sDiffSum = 0;
;;;2054   		ulDiffSumCnt = 0;
;;;2055   		for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
00002e  f10c0a53          ADD      r10,r12,#0x53
000032  9000              STR      r0,[sp,#0]
                  |L14.52|
000034  fbbaf3fc          UDIV     r3,r10,r12
000038  2700              MOVS     r7,#0                 ;2053
00003a  463c              MOV      r4,r7                 ;2054
00003c  2b00              CMP      r3,#0
00003e  dd31              BLE      |L14.164|
000040  ebc100c1          RSB      r0,r1,r1,LSL #3
000044  eb000540          ADD      r5,r0,r0,LSL #1
000048  9800              LDR      r0,[sp,#0]
00004a  eb0b06c5          ADD      r6,r11,r5,LSL #3
00004e  eb0000c5          ADD      r0,r0,r5,LSL #3
000052  4602              MOV      r2,r0
                  |L14.84|
;;;2056   		{
;;;2057   			sDiff = (int16_t)(pRawImage[r*COL_MAX+c] - pBaseImage[r*COL_MAX+c]);
000054  f8b6e000          LDRH     lr,[r6,#0]
000058  8815              LDRH     r5,[r2,#0]
00005a  eba5050e          SUB      r5,r5,lr
00005e  b22d              SXTH     r5,r5
;;;2058   			if(sDiff < LINE_FILTER_UPPER_LIMIT || sDiff > LINE_FILTER_LOWER_LIMIT)
000060  4545              CMP      r5,r8
000062  db01              BLT      |L14.104|
000064  454d              CMP      r5,r9
000066  dd02              BLE      |L14.110|
                  |L14.104|
;;;2059   			{
;;;2060   				sDiffSum += sDiff;
000068  443d              ADD      r5,r5,r7
00006a  b22f              SXTH     r7,r5
00006c  1c64              ADDS     r4,r4,#1
                  |L14.110|
;;;2061   				ulDiffSumCnt++;
;;;2062   			}
00006e  eb02024c          ADD      r2,r2,r12,LSL #1
000072  eb06064c          ADD      r6,r6,r12,LSL #1
000076  1e5b              SUBS     r3,r3,#1
000078  d1ec              BNE      |L14.84|
;;;2063   		}
;;;2064   
;;;2065   		if(ulDiffSumCnt > 3)
00007a  2c03              CMP      r4,#3
00007c  d912              BLS      |L14.164|
;;;2066   		{
;;;2067   			sLFOffsetRow[r] = sDiffSum / ((int16_t)ulDiffSumCnt);
00007e  b222              SXTH     r2,r4
000080  fb97f2f2          SDIV     r2,r7,r2
000084  4c0d              LDR      r4,|L14.188|
;;;2068   
;;;2069   			for(c = 0; c < COL_MAX; c++)
000086  2354              MOVS     r3,#0x54
000088  f8242011          STRH     r2,[r4,r1,LSL #1]     ;2067
                  |L14.140|
;;;2070   			{
;;;2071   				sDiff = (int16_t)pRawImage[r*COL_MAX+c] - sLFOffsetRow[r];
00008c  8802              LDRH     r2,[r0,#0]
00008e  f8345011          LDRH     r5,[r4,r1,LSL #1]
000092  1b52              SUBS     r2,r2,r5
000094  b212              SXTH     r2,r2
;;;2072   				if(sDiff < 0)
000096  2a00              CMP      r2,#0
;;;2073   					sDiff = 0;
000098  bfb8              IT       LT
00009a  2200              MOVLT    r2,#0
;;;2074   				pRawImage[r*COL_MAX+c] = (uint16_t)sDiff;
00009c  f8202b02          STRH     r2,[r0],#2
0000a0  1e5b              SUBS     r3,r3,#1
0000a2  d1f3              BNE      |L14.140|
                  |L14.164|
0000a4  1c49              ADDS     r1,r1,#1              ;2072
0000a6  290a              CMP      r1,#0xa
0000a8  dbc4              BLT      |L14.52|
;;;2075   			}
;;;2076   		}
;;;2077   	}
;;;2078   }
0000aa  e8bd8ff8          POP      {r3-r11,pc}
;;;2079   #endif /* (USED_LOCAL_IDLE_MODE_CONTROL || USED_IDLE_MODE_CONTROL) */
                          ENDP

0000ae  0000              DCW      0x0000
                  |L14.176|
                          DCD      ||.data||
                  |L14.180|
                          DCD      FullSharedBuff
                  |L14.184|
                          DCD      FullSharedBuff+0x12c90
                  |L14.188|
                          DCD      ||area_number.21||

                          AREA ||i.alogorithm_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_simple PROC
;;;1971   #endif
;;;1972   void alogorithm_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1973   {
;;;1974   	uint32_t r, c, pos;
;;;1975   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  482e              LDR      r0,|L15.192|
000006  6881              LDR      r1,[r0,#8]  ; thisModeConf
000008  6842              LDR      r2,[r0,#4]  ; ptModuleModeConf
;;;1976   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1977   	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;1978   	
;;;1979   	int16_t lDiff;
;;;1980   	int16_t lDiffSum = 0;//, lDiffSum2 = 0;
;;;1981   	uint32_t lDiffSumCnt = 0;//, lDiffSumCnt2 = 0;
;;;1982   	int32_t lLowTHD, lUpperTHD;
;;;1983   	uint16_t * pBaseImage;
;;;1984   //	uint16_t rawdata;
;;;1985   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1986   
;;;1987   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;1988   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;1989   
;;;1990   #if USED_NOISE_HOPPING_FREQ
;;;1991   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
00000a  6900              LDR      r0,[r0,#0x10]  ; ptAppInfo
00000c  f8b1304d          LDRH     r3,[r1,#0x4d]         ;1975
000010  7812              LDRB     r2,[r2,#0]            ;1975
000012  7cc0              LDRB     r0,[r0,#0x13]
000014  4093              LSLS     r3,r3,r2              ;1975
000016  b21c              SXTH     r4,r3                 ;1975
000018  f8b1304f          LDRH     r3,[r1,#0x4f]         ;1976
00001c  f891c051          LDRB     r12,[r1,#0x51]        ;1977
000020  fa03f202          LSL      r2,r3,r2              ;1976
000024  fa0ff882          SXTH     r8,r2                 ;1976
000028  2801              CMP      r0,#1
;;;1992   	{
;;;1993   		pBaseImage = g_pFingerBaseImage;
00002a  bf0c              ITE      EQ
00002c  4825              LDREQ    r0,|L15.196|
;;;1994   	}
;;;1995   	else
;;;1996   	{
;;;1997   		pBaseImage = g_pFingerHop1BaseImage;
00002e  4826              LDRNE    r0,|L15.200|
000030  6800              LDR      r0,[r0,#0]  ; g_pFingerHop1BaseImage
;;;1998   	}
;;;1999   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2000   #else /* USED_NOISE_HOPPING_FREQ */
;;;2001   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2002   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2003   
;;;2004   	pos = 0;
000032  f04f0900          MOV      r9,#0
;;;2005   	for(r=0; r< ROW_MAX; r++, pos += COL_MAX)
000036  4649              MOV      r1,r9
;;;2006   	{
;;;2007   		lDiffSumCnt = 0;
;;;2008   		lDiffSum = 0;
;;;2009   
;;;2010   		for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
000038  f10c0b53          ADD      r11,r12,#0x53
00003c  9000              STR      r0,[sp,#0]
                  |L15.62|
00003e  fbbbf3fc          UDIV     r3,r11,r12
000042  2600              MOVS     r6,#0                 ;2007
000044  46b2              MOV      r10,r6                ;2008
000046  2b00              CMP      r3,#0
000048  d033              BEQ      |L15.178|
00004a  9800              LDR      r0,[sp,#0]
00004c  eb000549          ADD      r5,r0,r9,LSL #1
000050  ebc100c1          RSB      r0,r1,r1,LSL #3
000054  eb000240          ADD      r2,r0,r0,LSL #1
000058  481c              LDR      r0,|L15.204|
00005a  eb0000c2          ADD      r0,r0,r2,LSL #3
00005e  4602              MOV      r2,r0
                  |L15.96|
;;;2011   		{
;;;2012   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos+c]);
000060  f8b5e000          LDRH     lr,[r5,#0]
000064  8817              LDRH     r7,[r2,#0]
000066  eba7070e          SUB      r7,r7,lr
00006a  b23f              SXTH     r7,r7
;;;2013   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
00006c  42a7              CMP      r7,r4
00006e  bfb8              IT       LT
000070  45b8              CMPLT    r8,r7
000072  da03              BGE      |L15.124|
;;;2014   			{
;;;2015   				lDiffSum += lDiff;
000074  4457              ADD      r7,r7,r10
000076  fa0ffa87          SXTH     r10,r7
00007a  1c76              ADDS     r6,r6,#1
                  |L15.124|
;;;2016   				lDiffSumCnt++;
;;;2017   			}
00007c  eb05054c          ADD      r5,r5,r12,LSL #1
000080  eb02024c          ADD      r2,r2,r12,LSL #1
000084  1e5b              SUBS     r3,r3,#1
000086  d1eb              BNE      |L15.96|
;;;2018   		}
;;;2019   
;;;2020   		if(lDiffSumCnt > 3)
000088  2e03              CMP      r6,#3
00008a  d912              BLS      |L15.178|
;;;2021   		{
;;;2022   			sLFOffsetRow[r] = lDiffSum / ((int16_t)lDiffSumCnt);
00008c  b232              SXTH     r2,r6
00008e  fb9af2f2          SDIV     r2,r10,r2
000092  4d0f              LDR      r5,|L15.208|
;;;2023   #if !FAST_LF_EN		
;;;2024   			for(c = 0; c < COL_MAX; c++)
000094  2354              MOVS     r3,#0x54
000096  f8252011          STRH     r2,[r5,r1,LSL #1]     ;2022
                  |L15.154|
;;;2025   			{
;;;2026   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetRow[r]);
00009a  8802              LDRH     r2,[r0,#0]
00009c  f8356011          LDRH     r6,[r5,r1,LSL #1]
0000a0  1b92              SUBS     r2,r2,r6
0000a2  b212              SXTH     r2,r2
;;;2027   				if(lDiff<0)lDiff=0;
0000a4  2a00              CMP      r2,#0
0000a6  bfb8              IT       LT
0000a8  2200              MOVLT    r2,#0
;;;2028   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000aa  f8202b02          STRH     r2,[r0],#2
0000ae  1e5b              SUBS     r3,r3,#1
0000b0  d1f3              BNE      |L15.154|
                  |L15.178|
0000b2  1c49              ADDS     r1,r1,#1              ;2027
0000b4  f1090954          ADD      r9,r9,#0x54           ;2027
;;;2029   			}
;;;2030   #endif
;;;2031   		}
;;;2032   	}
0000b8  2930              CMP      r1,#0x30
0000ba  d3c0              BCC      |L15.62|
;;;2033   }
0000bc  e8bd8ff8          POP      {r3-r11,pc}
;;;2034   
                          ENDP

                  |L15.192|
                          DCD      ||.data||
                  |L15.196|
                          DCD      g_pFingerBaseImage
                  |L15.200|
                          DCD      g_pFingerHop1BaseImage
                  |L15.204|
                          DCD      FullSharedBuff
                  |L15.208|
                          DCD      ||area_number.21||

                          AREA ||i.alogorithm_vertical_linefilter||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter PROC
;;;2133   int16_t sLFOffsetCol[COL_MAX];
;;;2134   void alogorithm_vertical_linefilter(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2135   {
;;;2136   	uint32_t r, c;
;;;2137   	int16_t LINE_FILTER_UPPER_LIMIT			= ((15)<<ptModuleModeConf->ucOvrShift); //thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  492b              LDR      r1,|L16.180|
000006  6848              LDR      r0,[r1,#4]  ; ptModuleModeConf
000008  7802              LDRB     r2,[r0,#0]
00000a  200f              MOVS     r0,#0xf
00000c  fa00f202          LSL      r2,r0,r2
000010  b210              SXTH     r0,r2
;;;2138   	int16_t LINE_FILTER_LOWER_LIMIT			= (-((15)<<ptModuleModeConf->ucOvrShift)); //thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;2139   	uint8_t LINE_FILTER_ROW_OFFSET			= 3;//(thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;2140   
;;;2141   	int16_t lDiff;
;;;2142   	int16_t lDiffSum = 0;
;;;2143   	uint32_t lDiffSumCnt = 0;
;;;2144   	int32_t lLowTHD, lUpperTHD;
;;;2145   	uint16_t * pBaseImage;
;;;2146   
;;;2147   	lUpperTHD = (LINE_FILTER_UPPER_LIMIT>>1);
000012  1047              ASRS     r7,r0,#1
;;;2148   	lLowTHD = (LINE_FILTER_LOWER_LIMIT>>1);
;;;2149   
;;;2150   #if USED_NOISE_HOPPING_FREQ
;;;2151   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000014  6908              LDR      r0,[r1,#0x10]  ; ptAppInfo
000016  4252              RSBS     r2,r2,#0              ;2138
000018  b212              SXTH     r2,r2                 ;2138
00001a  7cc0              LDRB     r0,[r0,#0x13]
00001c  ea4f0862          ASR      r8,r2,#1              ;2148
000020  2801              CMP      r0,#1
;;;2152   	{
;;;2153   		pBaseImage = g_pFingerBaseImage;
000022  bf0c              ITE      EQ
000024  4824              LDREQ    r0,|L16.184|
;;;2154   	}
;;;2155   	else
;;;2156   	{
;;;2157   		pBaseImage = g_pFingerHop1BaseImage;
000026  4825              LDRNE    r0,|L16.188|
;;;2158   	}
;;;2159   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2160   #else /* USED_NOISE_HOPPING_FREQ */
;;;2161   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2162   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2163   
;;;2164   	for(c=0; c<COL_MAX; c++)
000028  2100              MOVS     r1,#0
;;;2165   	{
;;;2166   		lDiffSumCnt = 0;
;;;2167   		lDiffSum = 0;
;;;2168   		for(r = 0; r < ROW_MAX; r+=LINE_FILTER_ROW_OFFSET)
00002a  f8dfb094          LDR      r11,|L16.192|
;;;2169   		{
;;;2170   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[(r*COL_MAX)+c]);
;;;2171   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;2172   			{
;;;2173   				lDiffSum += lDiff;
;;;2174   				lDiffSumCnt++;
;;;2175   			}
;;;2176   			else
;;;2177   			{
;;;2178   				if(lDiff > lUpperTHD)
;;;2179   				{
;;;2180   					lDiff += lUpperTHD;
;;;2181   					lDiffSumCnt++;
;;;2182   				}
;;;2183   				else if(lDiff < lLowTHD)
;;;2184   				{
;;;2185   					lDiff += lLowTHD;
;;;2186   					lDiffSumCnt++;
;;;2187   				}
;;;2188   			}
;;;2189   		}
;;;2190   
;;;2191   		if(lDiffSumCnt > 3)
;;;2192   		{
;;;2193   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
00002e  f8dfa094          LDR      r10,|L16.196|
000032  f8d09000          LDR      r9,[r0,#0]  ; g_pFingerHop1BaseImage
                  |L16.54|
000036  2000              MOVS     r0,#0                 ;2166
000038  eb0b0241          ADD      r2,r11,r1,LSL #1      ;2168
00003c  4606              MOV      r6,r0                 ;2167
00003e  2410              MOVS     r4,#0x10              ;2168
000040  eb090541          ADD      r5,r9,r1,LSL #1       ;2168
000044  ea4f0302          MOV.W    r3,r2                 ;2168
                  |L16.72|
000048  f8b5e000          LDRH     lr,[r5,#0]            ;2170
00004c  f8b3c000          LDRH     r12,[r3,#0]           ;2170
000050  ebac0c0e          SUB      r12,r12,lr            ;2170
000054  fa0ffc8c          SXTH     r12,r12               ;2170
000058  45bc              CMP      r12,r7                ;2171
00005a  bfb8              IT       LT                    ;2171
00005c  45e0              CMPLT    r8,r12                ;2171
00005e  da04              BGE      |L16.106|
000060  44b4              ADD      r12,r12,r6            ;2173
000062  fa0ff68c          SXTH     r6,r12                ;2173
000066  1c40              ADDS     r0,r0,#1              ;2173
000068  e004              B        |L16.116|
                  |L16.106|
00006a  4567              CMP      r7,r12                ;2178
00006c  db01              BLT      |L16.114|
00006e  45e0              CMP      r8,r12                ;2183
000070  dd00              BLE      |L16.116|
                  |L16.114|
000072  1c40              ADDS     r0,r0,#1              ;2183
                  |L16.116|
000074  f50373fc          ADD      r3,r3,#0x1f8          ;2183
000078  1e64              SUBS     r4,r4,#1              ;2183
00007a  f50575fc          ADD      r5,r5,#0x1f8          ;2183
00007e  d1e3              BNE      |L16.72|
000080  2803              CMP      r0,#3                 ;2191
000082  d912              BLS      |L16.170|
000084  b200              SXTH     r0,r0
000086  fb96f0f0          SDIV     r0,r6,r0
00008a  f82a0011          STRH     r0,[r10,r1,LSL #1]
;;;2194   #if !FAST_LF_EN		
;;;2195   			for(r = 0; r < ROW_MAX; r++)
00008e  2330              MOVS     r3,#0x30
                  |L16.144|
;;;2196   			{
;;;2197   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
000090  8810              LDRH     r0,[r2,#0]
000092  f83ac011          LDRH     r12,[r10,r1,LSL #1]
000096  eba0000c          SUB      r0,r0,r12
00009a  b200              SXTH     r0,r0
;;;2198   				if(lDiff<0)
00009c  2800              CMP      r0,#0
;;;2199   					lDiff=0;
00009e  bfb8              IT       LT
0000a0  2000              MOVLT    r0,#0
;;;2200   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000a2  f8220ba8          STRH     r0,[r2],#0xa8
0000a6  1e5b              SUBS     r3,r3,#1
0000a8  d1f2              BNE      |L16.144|
                  |L16.170|
0000aa  1c49              ADDS     r1,r1,#1              ;2198
0000ac  2954              CMP      r1,#0x54
0000ae  d3c2              BCC      |L16.54|
;;;2201   			}
;;;2202   #endif
;;;2203   		}
;;;2204   	}
;;;2205   }
0000b0  e8bd8ff0          POP      {r4-r11,pc}
;;;2206   
                          ENDP

                  |L16.180|
                          DCD      ||.data||
                  |L16.184|
                          DCD      g_pFingerBaseImage
                  |L16.188|
                          DCD      g_pFingerHop1BaseImage
                  |L16.192|
                          DCD      FullSharedBuff
                  |L16.196|
                          DCD      ||area_number.21||+0x376

                          AREA ||i.alogorithm_vertical_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter_simple PROC
;;;2206   
;;;2207   void alogorithm_vertical_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2208   {
;;;2209   	uint32_t r, c, pos;
;;;2210   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  4e2a              LDR      r6,|L17.176|
000006  b0ab              SUB      sp,sp,#0xac           ;2208
000008  68b1              LDR      r1,[r6,#8]  ; thisModeConf
00000a  6870              LDR      r0,[r6,#4]  ; ptModuleModeConf
00000c  f8b1204d          LDRH     r2,[r1,#0x4d]
000010  7800              LDRB     r0,[r0,#0]
;;;2211   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
000012  f8b1104f          LDRH     r1,[r1,#0x4f]
000016  4082              LSLS     r2,r2,r0              ;2210
000018  fa01f000          LSL      r0,r1,r0
00001c  b205              SXTH     r5,r0
00001e  b214              SXTH     r4,r2                 ;2210
;;;2212   //	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;2213   	
;;;2214   	int16_t sLFOffsetCol[COL_MAX] = {0};
000020  21a8              MOVS     r1,#0xa8
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       __aeabi_memclr4
;;;2215   	int16_t lDiff;
;;;2216   	int16_t lDiffSum = 0;
;;;2217   	uint32_t lDiffSumCnt = 0;
;;;2218   	int32_t lLowTHD, lUpperTHD;
;;;2219   	uint16_t * pBaseImage;
;;;2220   //	uint16_t rawdata;
;;;2221   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;2222   
;;;2223   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;2224   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;2225   
;;;2226   #if USED_NOISE_HOPPING_FREQ
;;;2227   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000028  6930              LDR      r0,[r6,#0x10]  ; ptAppInfo
00002a  7cc0              LDRB     r0,[r0,#0x13]
00002c  2801              CMP      r0,#1
;;;2228   	{
;;;2229   		pBaseImage = g_pFingerBaseImage;
00002e  bf0c              ITE      EQ
000030  4820              LDREQ    r0,|L17.180|
;;;2230   	}
;;;2231   	else
;;;2232   	{
;;;2233   		pBaseImage = g_pFingerHop1BaseImage;
000032  4821              LDRNE    r0,|L17.184|
;;;2234   	}
;;;2235   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2236   #else /* USED_NOISE_HOPPING_FREQ */
;;;2237   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;2238   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2239   
;;;2240   	for(c=0; c<COL_MAX; c++)
000034  f8d09000          LDR      r9,[r0,#0]  ; g_pFingerHop1BaseImage
;;;2241   	{
;;;2242   		lDiffSumCnt = 0;
;;;2243   		lDiffSum = 0;
;;;2244   		
;;;2245   		pos = c;
;;;2246   		for(r = 0; r < ROW_MAX; r+=2,pos += (COL_MAX<<1))
000038  f8dfb080          LDR      r11,|L17.188|
00003c  2000              MOVS     r0,#0                 ;2240
00003e  46ea              MOV      r10,sp                ;2214
                  |L17.64|
000040  2300              MOVS     r3,#0                 ;2242
000042  eb0b0140          ADD      r1,r11,r0,LSL #1
000046  461e              MOV      r6,r3                 ;2243
000048  eb090c40          ADD      r12,r9,r0,LSL #1
00004c  460a              MOV      r2,r1
00004e  f04f0818          MOV      r8,#0x18
                  |L17.82|
;;;2247   		{
;;;2248   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos]);
000052  8817              LDRH     r7,[r2,#0]
000054  f8bce000          LDRH     lr,[r12,#0]
000058  eba7070e          SUB      r7,r7,lr
00005c  b23f              SXTH     r7,r7
;;;2249   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
00005e  42a7              CMP      r7,r4
000060  bfb8              IT       LT
000062  42bd              CMPLT    r5,r7
000064  da02              BGE      |L17.108|
;;;2250   			{
;;;2251   				lDiffSum += lDiff;
000066  443e              ADD      r6,r6,r7
000068  b236              SXTH     r6,r6
00006a  1c5b              ADDS     r3,r3,#1
                  |L17.108|
00006c  f50272a8          ADD      r2,r2,#0x150
000070  f1b80801          SUBS     r8,r8,#1
000074  f50c7ca8          ADD      r12,r12,#0x150
;;;2252   				lDiffSumCnt++;
;;;2253   			}
000078  d1eb              BNE      |L17.82|
;;;2254   		}
;;;2255   
;;;2256   		if(lDiffSumCnt > 3)
00007a  2b03              CMP      r3,#3
00007c  d912              BLS      |L17.164|
;;;2257   		{
;;;2258   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
00007e  b21a              SXTH     r2,r3
000080  fb96f2f2          SDIV     r2,r6,r2
000084  f82a2010          STRH     r2,[r10,r0,LSL #1]
;;;2259   #if !FAST_LF_EN		
;;;2260   			for(r = 0; r < ROW_MAX; r++)
000088  2330              MOVS     r3,#0x30
                  |L17.138|
;;;2261   			{
;;;2262   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
00008a  880a              LDRH     r2,[r1,#0]
00008c  f83ac010          LDRH     r12,[r10,r0,LSL #1]
000090  eba2020c          SUB      r2,r2,r12
000094  b212              SXTH     r2,r2
;;;2263   				if(lDiff<0)lDiff=0;
000096  2a00              CMP      r2,#0
000098  bfb8              IT       LT
00009a  2200              MOVLT    r2,#0
;;;2264   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
00009c  f8212ba8          STRH     r2,[r1],#0xa8
0000a0  1e5b              SUBS     r3,r3,#1
0000a2  d1f2              BNE      |L17.138|
                  |L17.164|
0000a4  1c40              ADDS     r0,r0,#1              ;2263
0000a6  2854              CMP      r0,#0x54
0000a8  d3ca              BCC      |L17.64|
;;;2265   			}
;;;2266   #endif
;;;2267   		}
;;;2268   	}
;;;2269   }
0000aa  b02b              ADD      sp,sp,#0xac
0000ac  e8bd8ff0          POP      {r4-r11,pc}
;;;2270   
                          ENDP

                  |L17.176|
                          DCD      ||.data||
                  |L17.180|
                          DCD      g_pFingerBaseImage
                  |L17.184|
                          DCD      g_pFingerHop1BaseImage
                  |L17.188|
                          DCD      FullSharedBuff

                          AREA ||i.public_func_PalmTouch_handler||, CODE, READONLY, ALIGN=2

                  public_func_PalmTouch_handler PROC
;;;1472   #define PALM_KEEP_FRM		(10)
;;;1473   void public_func_PalmTouch_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1474   {
000004  b08f              SUB      sp,sp,#0x3c
;;;1475   	static uint8_t ucFrameCnt[POSBUF_]  = {0,};
;;;1476   //	static uint16_t usPrevMaxCellNum[POSBUF_]  = {0,}; // NOTE : Not used!!
;;;1477   	static uint8_t ucPalmContCnt[POSBUF_]  = {0,};
;;;1478   	static uint8_t ucParNum[POSBUF_]  = {0,};
;;;1479   	static tXY_t ucPalmPos[POSBUF_] ;
;;;1480   	static tRect_t ucPalmRect[POSBUF_] ;
;;;1481   	uint8_t ucParCnt[POSBUF_] = {0,};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1482   	uint8_t ucParBF[POSBUF_] = {0,};
;;;1483   	bool_t bIsPalm[POSBUF_] = {0,};
;;;1484   	uint8_t ucPalmExpect[POSBUF_] = {0,};
;;;1485   	int cl;
;;;1486   	
;;;1487   //    if(!sptPalmTouchConf->bEnable) return;
;;;1488   
;;;1489   //	tMemConf_t       * ptMemConf = (tMemConf_t *)param1;
;;;1490   //	tAlgorithmInfo_t * ptInfo     = (tAlgorithmInfo_t *)param2;
;;;1491   
;;;1492   //	sptPalmTouchConf->bPalmExpect = NO;
;;;1493   
;;;1494   	thisInfo->bIsPalm = NO;
00000c  f8dfa440          LDR      r10,|L18.1104|
000010  9002              STR      r0,[sp,#8]            ;1482
000012  9003              STR      r0,[sp,#0xc]          ;1482
000014  9004              STR      r0,[sp,#0x10]         ;1482
000016  9005              STR      r0,[sp,#0x14]         ;1483
000018  9006              STR      r0,[sp,#0x18]         ;1483
00001a  9007              STR      r0,[sp,#0x1c]         ;1483
00001c  9008              STR      r0,[sp,#0x20]         ;1484
00001e  9009              STR      r0,[sp,#0x24]         ;1484
000020  900a              STR      r0,[sp,#0x28]         ;1484
000022  900b              STR      r0,[sp,#0x2c]
000024  f8da100c          LDR      r1,[r10,#0xc]  ; thisInfo
;;;1495   	
;;;1496   	for( cl=MAX_TOUCH_; cl--; )
;;;1497   	{
;;;1498   		if(thisInfo->tCoord.tPos.vusR[cl] != 0)
;;;1499   		{
;;;1500   			if(thisInfo->tCoord.tPos.vusR[cl] > thisModeConf->Palm.usPalmLevel)
;;;1501   			{
;;;1502   				bIsPalm[cl] = YES;
;;;1503   				ucParNum[cl] = cl;
;;;1504   				ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1505   			}
;;;1506   //			else if(ucFrameCnt[cl] < 10
;;;1507   //				&& ((thisInfo->tCoord.tPos.vusR[cl] > 10
;;;1508   //				&& (int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > 3 )
;;;1509   //				|| ((int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > (3*2+1))))
;;;1510   //			{
;;;1511   //				thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1512   //				ucPalmExpect[cl] = 1;
;;;1513   //			}
;;;1514   			else
;;;1515   			{
;;;1516   				int pl, i;
;;;1517   				uint8_t ucOverlap[POSBUF_] = {0,};
;;;1518   				uint8_t ucOverlapCnt = 0;
;;;1519   
;;;1520   				for( pl=MAX_TOUCH_; pl--; )
;;;1521   				{
;;;1522   					if(ucPalmContCnt[pl] != 0)
;;;1523   					{
;;;1524   						if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[cl].re && thisInfo->tCoord.tPos.rect[cl].rs <= ucPalmRect[pl].re)
;;;1525   						{
;;;1526   							if(ucPalmRect[pl].cs <= thisInfo->tCoord.tPos.rect[cl].ce && thisInfo->tCoord.tPos.rect[cl].cs <= ucPalmRect[pl].ce)
;;;1527   								ucOverlap[ucOverlapCnt++] = pl;
;;;1528   						}
;;;1529   					}
;;;1530   				}
;;;1531   
;;;1532   				if(ucOverlapCnt != 0)
;;;1533   				{
;;;1534   					if(ucOverlapCnt > 1)
;;;1535   					{
;;;1536   						int palm_dist;
;;;1537   						int min_dist = INT32_MAX;
;;;1538   
;;;1539   						for(i=0; i<ucOverlapCnt; i++)
;;;1540   						{
;;;1541   							palm_dist = algorithm_coord_calc_distance(ucPalmPos[ucOverlap[i]], thisInfo->tCoord.tPos.tXY[cl]);
;;;1542   							if(min_dist > palm_dist)
;;;1543   								min_dist = palm_dist, pl = ucOverlap[i];
;;;1544   						}
;;;1545   					}
;;;1546   					else
;;;1547   						pl = ucOverlap[0];
;;;1548   
;;;1549   					bIsPalm[cl] = YES;
;;;1550   					ucParCnt[pl]++;
;;;1551   					ucParBF[pl] |= _BV(cl);
;;;1552   					if(ucPalmContCnt[cl] == 0)
;;;1553   						ucParNum[cl] = ucParNum[pl];
;;;1554   
;;;1555   					ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1556   				}
;;;1557   			}
;;;1558   
;;;1559   			if( ucFrameCnt[cl] < 10 )
;;;1560   				ucFrameCnt[cl]++;
;;;1561   		}
;;;1562   		else
;;;1563   			ucFrameCnt[cl] = 0;
;;;1564   	}
;;;1565   
;;;1566   	for( cl=MAX_TOUCH_; cl--;)
;;;1567   	{
;;;1568   		if(ucParCnt[cl] > 1)
;;;1569   		{
;;;1570   			int max_palm_num = -1;
;;;1571   			int max_palm_size = 0;
;;;1572   
;;;1573   			if(bIsPalm[cl] == NO)
;;;1574   			{
;;;1575   				int pl;
;;;1576   
;;;1577   				for( pl=MAX_TOUCH_; pl--;)
;;;1578   				{
;;;1579   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1580   					{
;;;1581   						if(max_palm_size < thisInfo->tCoord.tPos.vusR[pl])
;;;1582   						{
;;;1583   							max_palm_num = pl;
;;;1584   							max_palm_size = thisInfo->tCoord.tPos.vusR[pl];
;;;1585   						}
;;;1586   					}
;;;1587   				}
;;;1588   
;;;1589   				for( pl=MAX_TOUCH_; pl--;)
;;;1590   				{
;;;1591   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1592   						ucParNum[pl] = max_palm_num;
;;;1593   				}
;;;1594   
;;;1595   				ucPalmContCnt[cl] = 0;
;;;1596   			}
;;;1597   		}
;;;1598   	}
;;;1599   
;;;1600   	for( cl=MAX_TOUCH_; cl--;)
;;;1601   	{
;;;1602   		if(bIsPalm[cl] == YES)
;;;1603   		{
;;;1604   			if(ucParNum[cl] != cl)
;;;1605   			{
;;;1606   				int pl = ucParNum[cl];
;;;1607   				int palm_dist;
;;;1608   
;;;1609   				if(thisInfo->tCoord.tPos.vusR[pl] == 0 && ucPalmContCnt[cl] != 0)
;;;1610   				{
;;;1611   					int pcl;
;;;1612   					int max_palm_num = -1;
;;;1613   					int max_palm_size = 0;
;;;1614   
;;;1615   					for( pcl=MAX_TOUCH_; pcl--;)
;;;1616   					{
;;;1617   						if(pcl != cl && bIsPalm[pcl] == YES)
;;;1618   						{
;;;1619   							if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[pcl].re && thisInfo->tCoord.tPos.rect[pcl].rs <= ucPalmRect[pl].re)
;;;1620   							{
;;;1621   								if(max_palm_size < thisInfo->tCoord.tPos.vusR[pcl])
;;;1622   									max_palm_size = thisInfo->tCoord.tPos.vusR[pcl], max_palm_num = pcl;
;;;1623   							}
;;;1624   						}
;;;1625   					}
;;;1626   
;;;1627   					if(max_palm_num != -1)
;;;1628   					{
;;;1629   
;;;1630   						ucParNum[cl] = max_palm_num;
;;;1631   						for( pcl=MAX_TOUCH_; pcl--;)
;;;1632   						{
;;;1633   							if(ucPalmContCnt[pcl] != 0)
;;;1634   							{
;;;1635   								if(ucParNum[pcl] == pl)
;;;1636   									ucParNum[pcl] = max_palm_num;
;;;1637   							}
;;;1638   						}
;;;1639   					}
;;;1640   					else
;;;1641   						ucParNum[cl] = cl;
;;;1642   				}
;;;1643   
;;;1644   				if(ucPalmContCnt[pl] != 0)
;;;1645   				{
;;;1646   					palm_dist = algorithm_coord_calc_distance(ucPalmPos[pl], ucPalmPos[cl]);
;;;1647   					if(PALM_VALID_AREA < palm_dist)
;;;1648   						bIsPalm[cl] = NO;
;;;1649   				}
;;;1650   				else
;;;1651   					bIsPalm[cl] = NO;
;;;1652   			}
;;;1653   		}
;;;1654   
;;;1655   		if(bIsPalm[cl] == YES)
;;;1656   		{
;;;1657   			ucPalmExpect[cl] = 1;
;;;1658   			ucPalmContCnt[cl] = PALM_KEEP_FRM;
;;;1659   			ucPalmRect[cl] = thisInfo->tCoord.tPos.rect[cl];
;;;1660   			ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1661   			thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1662   
;;;1663   			if(ucPalmRect[cl].rs > 0)
;;;1664   				ucPalmRect[cl].rs--;
;;;1665   			if(ucPalmRect[cl].re < (ROW_MAX - 1))
;;;1666   				ucPalmRect[cl].re++;
;;;1667   			if(ucPalmRect[cl].cs > 0)
;;;1668   				ucPalmRect[cl].cs--;
;;;1669   			if(ucPalmRect[cl].ce < (COL_MAX - 1))
;;;1670   				ucPalmRect[cl].ce++;
;;;1671   			
;;;1672   			thisInfo->bIsPalm = YES;
;;;1673   			thisInfo->tCoord.tPos.sFinger_--;
;;;1674   		}
;;;1675   	}
;;;1676   
;;;1677   	for( cl=MAX_TOUCH_; cl--;)
;;;1678   	{
;;;1679   		if(ucPalmExpect[cl] != 0)
;;;1680   		{
;;;1681   			int pl;
;;;1682   //			tRect_t ori_rect, cmp_rect; // NOTE : not used
;;;1683   			tRect_t ori_rect;
;;;1684   
;;;1685   #if (CUSTOMER == MODEL_DEF_QHD_92407 || CUSTOMER == MODEL_DEF_QHD_92407_FLIP)
;;;1686   			int offset = 5;
;;;1687   #else
;;;1688   			int offset = 1;
;;;1689   #endif
;;;1690   			
;;;1691               if(thisInfo->tCoord.tPos.rect[cl].rs > (offset-1))
;;;1692   				ori_rect.rs = thisInfo->tCoord.tPos.rect[cl].rs - offset;
;;;1693               else
;;;1694                   ori_rect.rs = 0;
;;;1695   			if(thisInfo->tCoord.tPos.rect[cl].re < (ROW_MAX - offset))
;;;1696   				ori_rect.re = thisInfo->tCoord.tPos.rect[cl].re + offset;
;;;1697               else
;;;1698                   ori_rect.re = ROW_MAX - 1;
;;;1699   			if(thisInfo->tCoord.tPos.rect[cl].cs > (offset-1))
;;;1700   				ori_rect.cs = thisInfo->tCoord.tPos.rect[cl].cs - offset;
;;;1701               else
;;;1702                   ori_rect.cs = 0;
;;;1703   			if(thisInfo->tCoord.tPos.rect[cl].ce < (COL_MAX - offset))
;;;1704   				ori_rect.ce = thisInfo->tCoord.tPos.rect[cl].ce + offset;
;;;1705               else
;;;1706                   ori_rect.ce = COL_MAX - 1;
;;;1707               
;;;1708               for( pl=MAX_TOUCH_; pl--;)
;;;1709   			{
;;;1710   				if(thisInfo->tCoord.tPos.vusS[pl])
;;;1711   				{
;;;1712   					if(ori_rect.rs <= thisInfo->tCoord.tPos.rect[pl].re+1 && thisInfo->tCoord.tPos.rect[pl].rs-1 <= ori_rect.re)
;;;1713   					{
;;;1714   						if(ori_rect.cs <= thisInfo->tCoord.tPos.rect[pl].ce+1 && thisInfo->tCoord.tPos.rect[pl].cs-1 <= ori_rect.ce)
;;;1715   						{
;;;1716   							thisInfo->tCoord.tPos.vusS[pl] = 0;
;;;1717   						}
;;;1718   					}
;;;1719   				}
;;;1720   			}
;;;1721   		}
;;;1722   
;;;1723   		if(ucPalmContCnt[cl] != 0)
;;;1724   			ucPalmContCnt[cl]--;
;;;1725   
;;;1726   //		usPrevMaxCellNum[cl] = thisInfo->tCoord.tPos.vusR[cl];  // NOTE : Not used!!		
;;;1727   	}
;;;1728   
;;;1729   //	public_protocol_LogCode(LT_DIAGNOSIS, (220)/*System is Entered!*/);
;;;1730   }
000028  2409              MOVS     r4,#9
00002a  f5015180          ADD      r1,r1,#0x1000         ;1494
00002e  f10d0930          ADD      r9,sp,#0x30           ;1517
000032  f88100da          STRB     r0,[r1,#0xda]         ;1494
000036  bf00              NOP                            ;1498
                  |L18.56|
000038  f8da000c          LDR      r0,[r10,#0xc]         ;1498  ; thisInfo
00003c  eb000144          ADD      r1,r0,r4,LSL #1       ;1498
000040  f8b11503          LDRH     r1,[r1,#0x503]        ;1498
000044  2900              CMP      r1,#0                 ;1498
000046  d07d              BEQ      |L18.324|
000048  f8da2008          LDR      r2,[r10,#8]           ;1500  ; thisModeConf
00004c  f8b22201          LDRH     r2,[r2,#0x201]        ;1500
000050  4291              CMP      r1,r2                 ;1500
000052  d910              BLS      |L18.118|
000054  a906              ADD      r1,sp,#0x18           ;1502
000056  2201              MOVS     r2,#1                 ;1502
000058  550a              STRB     r2,[r1,r4]            ;1502
00005a  49fe              LDR      r1,|L18.1108|
00005c  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1504
000060  550c              STRB     r4,[r1,r4]            ;1503
000062  310a              ADDS     r1,r1,#0xa            ;1504
000064  eb0101c4          ADD      r1,r1,r4,LSL #3       ;1504
000068  f8d0249f          LDR      r2,[r0,#0x49f]        ;1504
00006c  600a              STR      r2,[r1,#0]            ;1504
00006e  f8d004a3          LDR      r0,[r0,#0x4a3]        ;1504
000072  6048              STR      r0,[r1,#4]            ;1504
000074  e08b              B        |L18.398|
                  |L18.118|
000076  2100              MOVS     r1,#0                 ;1517
000078  910c              STR      r1,[sp,#0x30]         ;1517
00007a  910d              STR      r1,[sp,#0x34]         ;1517
00007c  460d              MOV      r5,r1                 ;1518
00007e  910e              STR      r1,[sp,#0x38]         ;1520
000080  49f5              LDR      r1,|L18.1112|
000082  2700              MOVS     r7,#0                 ;1520
000084  f101065b          ADD      r6,r1,#0x5b           ;1520
000088  f1060224          ADD      r2,r6,#0x24           ;1520
00008c  1c53              ADDS     r3,r2,#1              ;1520
00008e  f1060c26          ADD      r12,r6,#0x26          ;1520
000092  f04f080a          MOV      r8,#0xa               ;1520
000096  eb000084          ADD      r0,r0,r4,LSL #2       ;1524
00009a  3627              ADDS     r6,r6,#0x27           ;1524
                  |L18.156|
00009c  f811b901          LDRB     r11,[r1],#-1          ;1522
0000a0  f1bb0f00          CMP      r11,#0                ;1522
0000a4  d01d              BEQ      |L18.226|
0000a6  f992b000          LDRSB    r11,[r2,#0]           ;1524
0000aa  f990e518          LDRSB    lr,[r0,#0x518]        ;1524
0000ae  45f3              CMP      r11,lr                ;1524
0000b0  dc17              BGT      |L18.226|
0000b2  f990b517          LDRSB    r11,[r0,#0x517]       ;1524
0000b6  f993e000          LDRSB    lr,[r3,#0]            ;1524
0000ba  45f3              CMP      r11,lr                ;1524
0000bc  dc11              BGT      |L18.226|
0000be  f99cb000          LDRSB    r11,[r12,#0]          ;1526
0000c2  f990e51a          LDRSB    lr,[r0,#0x51a]        ;1526
0000c6  45f3              CMP      r11,lr                ;1526
0000c8  dc0b              BGT      |L18.226|
0000ca  f990b519          LDRSB    r11,[r0,#0x519]       ;1526
0000ce  f996e000          LDRSB    lr,[r6,#0]            ;1526
0000d2  45f3              CMP      r11,lr                ;1526
0000d4  dc05              BGT      |L18.226|
0000d6  f1c70b09          RSB      r11,r7,#9             ;1527
0000da  f809b005          STRB     r11,[r9,r5]           ;1527
0000de  1c6d              ADDS     r5,r5,#1              ;1527
0000e0  b2ed              UXTB     r5,r5                 ;1527
                  |L18.226|
0000e2  1f12              SUBS     r2,r2,#4              ;1527
0000e4  1f1b              SUBS     r3,r3,#4              ;1527
0000e6  1f36              SUBS     r6,r6,#4              ;1527
0000e8  1c7f              ADDS     r7,r7,#1              ;1527
0000ea  f1b80801          SUBS     r8,r8,#1              ;1527
0000ee  f1ac0c04          SUB      r12,r12,#4            ;1527
0000f2  d1d3              BNE      |L18.156|
0000f4  f04f36ff          MOV      r6,#0xffffffff        ;1520
0000f8  2d00              CMP      r5,#0                 ;1532
0000fa  d048              BEQ      |L18.398|
0000fc  2d01              CMP      r5,#1                 ;1534
0000fe  bf98              IT       LS                    ;1547
000100  f89d6030          LDRBLS   r6,[sp,#0x30]         ;1547
000104  d923              BLS      |L18.334|
000106  f06f4700          MVN      r7,#0x80000000        ;1537
00010a  f04f0800          MOV      r8,#0                 ;1539
00010e  2d00              CMP      r5,#0                 ;1539
000110  bfc8              IT       GT                    ;1504
000112  f8dfb348          LDRGT    r11,|L18.1116|
000116  dd1a              BLE      |L18.334|
                  |L18.280|
000118  f8da000c          LDR      r0,[r10,#0xc]         ;1541  ; thisInfo
00011c  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1541
000120  f8d0249f          LDR      r2,[r0,#0x49f]        ;1541
000124  f8d034a3          LDR      r3,[r0,#0x4a3]        ;1541
000128  f8190008          LDRB     r0,[r9,r8]            ;1541
00012c  eb0b01c0          ADD      r1,r11,r0,LSL #3      ;1541
000130  6808              LDR      r0,[r1,#0]            ;1541
000132  6849              LDR      r1,[r1,#4]            ;1541
000134  f7fffffe          BL       algorithm_coord_calc_distance
000138  4287              CMP      r7,r0                 ;1542
00013a  bfc4              ITT      GT                    ;1543
00013c  4607              MOVGT    r7,r0                 ;1543
00013e  f8196008          LDRBGT   r6,[r9,r8]            ;1543
000142  e000              B        |L18.326|
                  |L18.324|
000144  e02a              B        |L18.412|
                  |L18.326|
000146  f1080801          ADD      r8,r8,#1              ;1543
00014a  45a8              CMP      r8,r5                 ;1543
00014c  dbe4              BLT      |L18.280|
                  |L18.334|
00014e  a906              ADD      r1,sp,#0x18           ;1549
000150  2001              MOVS     r0,#1                 ;1549
000152  5508              STRB     r0,[r1,r4]            ;1549
000154  f81d2006          LDRB     r2,[sp,r6]            ;1550
000158  a903              ADD      r1,sp,#0xc            ;1551
00015a  1c52              ADDS     r2,r2,#1              ;1550
00015c  f80d2006          STRB     r2,[sp,r6]            ;1550
000160  5d8a              LDRB     r2,[r1,r6]            ;1551
000162  40a0              LSLS     r0,r0,r4              ;1551
000164  4310              ORRS     r0,r0,r2              ;1551
000166  5588              STRB     r0,[r1,r6]            ;1551
000168  48bd              LDR      r0,|L18.1120|
00016a  5d00              LDRB     r0,[r0,r4]            ;1552
00016c  b910              CBNZ     r0,|L18.372|
00016e  48b9              LDR      r0,|L18.1108|
000170  5d81              LDRB     r1,[r0,r6]            ;1553
000172  5501              STRB     r1,[r0,r4]            ;1553
                  |L18.372|
000174  f8da100c          LDR      r1,[r10,#0xc]         ;1555  ; thisInfo
000178  48b8              LDR      r0,|L18.1116|
00017a  eb0101c4          ADD      r1,r1,r4,LSL #3       ;1555
00017e  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1555
000182  f8d1249f          LDR      r2,[r1,#0x49f]        ;1555
000186  6002              STR      r2,[r0,#0]            ;1555
000188  f8d114a3          LDR      r1,[r1,#0x4a3]        ;1555
00018c  6041              STR      r1,[r0,#4]            ;1555
                  |L18.398|
00018e  48b5              LDR      r0,|L18.1124|
000190  5d01              LDRB     r1,[r0,r4]            ;1559
000192  290a              CMP      r1,#0xa               ;1559
000194  bf3c              ITT      CC                    ;1559
000196  1c49              ADDCC    r1,r1,#1              ;1559
000198  5501              STRBCC   r1,[r0,r4]            ;1560
00019a  e002              B        |L18.418|
                  |L18.412|
00019c  49b1              LDR      r1,|L18.1124|
00019e  2000              MOVS     r0,#0                 ;1563
0001a0  5508              STRB     r0,[r1,r4]            ;1563
                  |L18.418|
0001a2  1e64              SUBS     r4,r4,#1              ;1563
0001a4  f4bfaf48          BCS      |L18.56|
0001a8  48a9              LDR      r0,|L18.1104|
0001aa  f8dfa2a8          LDR      r10,|L18.1108|
0001ae  2209              MOVS     r2,#9
0001b0  f8d0900c          LDR      r9,[r0,#0xc]          ;1502  ; thisInfo
0001b4  46eb              MOV      r11,sp                ;1481
0001b6  ad06              ADD      r5,sp,#0x18           ;1483
0001b8  2001              MOVS     r0,#1                 ;1502
0001ba  f04f0e00          MOV      lr,#0                 ;1502
0001be  f1aa060a          SUB      r6,r10,#0xa           ;1520
0001c2  bf00              NOP                            ;1568
                  |L18.452|
0001c4  f81b1002          LDRB     r1,[r11,r2]           ;1568
0001c8  2901              CMP      r1,#1                 ;1568
0001ca  d939              BLS      |L18.576|
0001cc  5ca9              LDRB     r1,[r5,r2]            ;1573
0001ce  f04f37ff          MOV      r7,#0xffffffff        ;1570
0001d2  2300              MOVS     r3,#0                 ;1571
0001d4  bba1              CBNZ     r1,|L18.576|
0001d6  f10d0c0c          ADD      r12,sp,#0xc           ;1482
0001da  210a              MOVS     r1,#0xa               ;1577
0001dc  f81cc002          LDRB     r12,[r12,r2]          ;1579
0001e0  2401              MOVS     r4,#1                 ;1577
                  |L18.482|
0001e2  1e49              SUBS     r1,r1,#1              ;1579
0001e4  fa00f801          LSL      r8,r0,r1              ;1579
0001e8  ea1c0f08          TST      r12,r8                ;1579
0001ec  d007              BEQ      |L18.510|
0001ee  eb090841          ADD      r8,r9,r1,LSL #1       ;1581
0001f2  f8b88503          LDRH     r8,[r8,#0x503]        ;1581
0001f6  4598              CMP      r8,r3                 ;1581
0001f8  bfc4              ITT      GT                    ;1583
0001fa  460f              MOVGT    r7,r1                 ;1583
0001fc  4643              MOVGT    r3,r8                 ;1583
                  |L18.510|
0001fe  1c64              ADDS     r4,r4,#1              ;1583
000200  2c0a              CMP      r4,#0xa               ;1584
000202  ddee              BLE      |L18.482|
000204  2100              MOVS     r1,#0
000206  f10a030a          ADD      r3,r10,#0xa           ;1589
00020a  2405              MOVS     r4,#5                 ;1589
00020c  fa5ff787          UXTB.W   r7,r7                 ;1592
                  |L18.528|
000210  f1c10809          RSB      r8,r1,#9              ;1591
000214  fa00f808          LSL      r8,r0,r8              ;1591
000218  ea1c0f08          TST      r12,r8                ;1591
00021c  bf18              IT       NE                    ;1592
00021e  f8037c01          STRBNE   r7,[r3,#-1]           ;1592
000222  f1c10808          RSB      r8,r1,#8              ;1591
000226  fa00f808          LSL      r8,r0,r8              ;1591
00022a  ea1c0f08          TST      r12,r8                ;1591
00022e  bf18              IT       NE                    ;1592
000230  f8037c02          STRBNE   r7,[r3,#-2]           ;1592
000234  1c89              ADDS     r1,r1,#2              ;1592
000236  1e9b              SUBS     r3,r3,#2              ;1592
000238  1e64              SUBS     r4,r4,#1              ;1592
00023a  d1e9              BNE      |L18.528|
00023c  f806e002          STRB     lr,[r6,r2]            ;1595
                  |L18.576|
000240  1e52              SUBS     r2,r2,#1              ;1595
000242  d2bf              BCS      |L18.452|
000244  2409              MOVS     r4,#9
                  |L18.582|
000246  5d28              LDRB     r0,[r5,r4]            ;1602
000248  2801              CMP      r0,#1                 ;1602
00024a  d178              BNE      |L18.830|
00024c  f8dfe204          LDR      lr,|L18.1108|
000250  f81e1004          LDRB     r1,[lr,r4]            ;1604
000254  42a1              CMP      r1,r4                 ;1604
000256  d06e              BEQ      |L18.822|
000258  487d              LDR      r0,|L18.1104|
00025a  68c3              LDR      r3,[r0,#0xc]          ;1609  ; thisInfo
00025c  eb030041          ADD      r0,r3,r1,LSL #1       ;1609
000260  f8b00503          LDRH     r0,[r0,#0x503]        ;1609
000264  bbe8              CBNZ     r0,|L18.738|
000266  5d30              LDRB     r0,[r6,r4]            ;1609
000268  b3d8              CBZ      r0,|L18.738|
00026a  200a              MOVS     r0,#0xa               ;1615
00026c  f10e0c5a          ADD      r12,lr,#0x5a          ;1520
000270  f04f3aff          MOV      r10,#0xffffffff       ;1612
000274  f04f0800          MOV      r8,#0                 ;1613
000278  2201              MOVS     r2,#1                 ;1615
00027a  eb0c0981          ADD      r9,r12,r1,LSL #2      ;1619
                  |L18.638|
00027e  1e40              SUBS     r0,r0,#1              ;1619
000280  42a0              CMP      r0,r4                 ;1617
000282  d01a              BEQ      |L18.698|
000284  f815c000          LDRB     r12,[r5,r0]           ;1617
000288  f1bc0f01          CMP      r12,#1                ;1617
00028c  d115              BNE      |L18.698|
00028e  eb030c80          ADD      r12,r3,r0,LSL #2      ;1619
000292  f9997000          LDRSB    r7,[r9,#0]            ;1619
000296  f99cb518          LDRSB    r11,[r12,#0x518]      ;1619
00029a  455f              CMP      r7,r11                ;1619
00029c  dc0d              BGT      |L18.698|
00029e  f99cc517          LDRSB    r12,[r12,#0x517]      ;1619
0002a2  f9997001          LDRSB    r7,[r9,#1]            ;1619
0002a6  45bc              CMP      r12,r7                ;1619
0002a8  dc07              BGT      |L18.698|
0002aa  eb030c40          ADD      r12,r3,r0,LSL #1      ;1621
0002ae  f8bcc503          LDRH     r12,[r12,#0x503]      ;1621
0002b2  45e0              CMP      r8,r12                ;1621
0002b4  bfbc              ITT      LT                    ;1621
0002b6  46e0              MOVLT    r8,r12                ;1621
0002b8  4682              MOVLT    r10,r0                ;1622
                  |L18.698|
0002ba  1c52              ADDS     r2,r2,#1              ;1622
0002bc  2a0a              CMP      r2,#0xa               ;1622
0002be  ddde              BLE      |L18.638|
0002c0  f1ba3fff          CMP      r10,#0xffffffff       ;1627
0002c4  bf08              IT       EQ                    ;1641
0002c6  f80e4004          STRBEQ   r4,[lr,r4]            ;1641
0002ca  d021              BEQ      |L18.784|
0002cc  f00a03ff          AND      r3,r10,#0xff          ;1630
0002d0  f80e3004          STRB     r3,[lr,r4]            ;1630
0002d4  f106020a          ADD      r2,r6,#0xa            ;1631
0002d8  f10e000a          ADD      r0,lr,#0xa            ;1631
0002dc  f04f0c05          MOV      r12,#5                ;1631
                  |L18.736|
0002e0  e000              B        |L18.740|
                  |L18.738|
0002e2  e015              B        |L18.784|
                  |L18.740|
0002e4  f8127c01          LDRB     r7,[r2,#-1]           ;1633
0002e8  b12f              CBZ      r7,|L18.758|
0002ea  f8107c01          LDRB     r7,[r0,#-1]           ;1635
0002ee  428f              CMP      r7,r1                 ;1635
0002f0  bf08              IT       EQ                    ;1636
0002f2  f8003c01          STRBEQ   r3,[r0,#-1]           ;1636
                  |L18.758|
0002f6  f8127d02          LDRB     r7,[r2,#-2]!          ;1633
0002fa  b12f              CBZ      r7,|L18.776|
0002fc  f8107c02          LDRB     r7,[r0,#-2]           ;1635
000300  428f              CMP      r7,r1                 ;1635
000302  bf08              IT       EQ                    ;1636
000304  f8003c02          STRBEQ   r3,[r0,#-2]           ;1636
                  |L18.776|
000308  1e80              SUBS     r0,r0,#2              ;1636
00030a  f1bc0c01          SUBS     r12,r12,#1            ;1636
00030e  d1e7              BNE      |L18.736|
                  |L18.784|
000310  5c70              LDRB     r0,[r6,r1]            ;1644
000312  b168              CBZ      r0,|L18.816|
000314  4851              LDR      r0,|L18.1116|
000316  eb0003c4          ADD      r3,r0,r4,LSL #3       ;1646
00031a  eb0001c1          ADD      r1,r0,r1,LSL #3       ;1646
00031e  681a              LDR      r2,[r3,#0]            ;1646
000320  6808              LDR      r0,[r1,#0]            ;1646
000322  685b              LDR      r3,[r3,#4]            ;1646
000324  6849              LDR      r1,[r1,#4]            ;1646
000326  f7fffffe          BL       algorithm_coord_calc_distance
00032a  f5b05fb0          CMP      r0,#0x1600            ;1647
00032e  dd03              BLE      |L18.824|
                  |L18.816|
000330  2000              MOVS     r0,#0                 ;1651
000332  5528              STRB     r0,[r5,r4]            ;1651
000334  e003              B        |L18.830|
                  |L18.822|
000336  e073              B        |L18.1056|
                  |L18.824|
000338  5d28              LDRB     r0,[r5,r4]            ;1655
00033a  2801              CMP      r0,#1                 ;1655
00033c  d071              BEQ      |L18.1058|
                  |L18.830|
00033e  1e64              SUBS     r4,r4,#1              ;1655
000340  d281              BCS      |L18.582|
000342  4843              LDR      r0,|L18.1104|
000344  2209              MOVS     r2,#9
000346  f10d0e24          ADD      lr,sp,#0x24           ;1484
00034a  68c3              LDR      r3,[r0,#0xc]          ;1484  ; thisInfo
00034c  f04f0900          MOV      r9,#0                 ;1484
                  |L18.848|
000350  f81e0002          LDRB     r0,[lr,r2]            ;1679
000354  b3f0              CBZ      r0,|L18.980|
000356  eb030082          ADD      r0,r3,r2,LSL #2       ;1691
00035a  f9901517          LDRSB    r1,[r0,#0x517]        ;1691
00035e  2900              CMP      r1,#0                 ;1691
000360  bfd2              ITEE     LE                    ;1691
000362  f3690c07          BFILE    r12,r9,#0,#8          ;1691
000366  1e49              SUBGT    r1,r1,#1              ;1691
000368  f3610c07          BFIGT    r12,r1,#0,#8          ;1691
00036c  f9901518          LDRSB    r1,[r0,#0x518]        ;1695
000370  242f              MOVS     r4,#0x2f              ;1695
000372  292f              CMP      r1,#0x2f              ;1695
000374  bfba              ITTE     LT                    ;1695
000376  1c49              ADDLT    r1,r1,#1              ;1695
000378  f3612c0f          BFILT    r12,r1,#8,#8          ;1695
00037c  f3642c0f          BFIGE    r12,r4,#8,#8          ;1695
000380  f9901519          LDRSB    r1,[r0,#0x519]        ;1699
000384  2900              CMP      r1,#0                 ;1699
000386  bfc6              ITTE     GT                    ;1699
000388  1e49              SUBGT    r1,r1,#1              ;1699
00038a  f3614c17          BFIGT    r12,r1,#16,#8         ;1699
00038e  f3694c17          BFILE    r12,r9,#16,#8         ;1699
000392  f990051a          LDRSB    r0,[r0,#0x51a]        ;1703
000396  2153              MOVS     r1,#0x53              ;1703
000398  2853              CMP      r0,#0x53              ;1703
00039a  bfba              ITTE     LT                    ;1703
00039c  1c40              ADDLT    r0,r0,#1              ;1703
00039e  f3606c1f          BFILT    r12,r0,#24,#8         ;1703
0003a2  f3616c1f          BFIGE    r12,r1,#24,#8         ;1703
0003a6  200a              MOVS     r0,#0xa               ;1708
0003a8  2101              MOVS     r1,#1                 ;1708
0003aa  fa4ff78c          SXTB     r7,r12                ;1708
0003ae  f34c2507          SBFX     r5,r12,#8,#8          ;1708
0003b2  f34c4a07          SBFX     r10,r12,#16,#8        ;1708
0003b6  ea4f6b2c          ASR      r11,r12,#24           ;1708
                  |L18.954|
0003ba  1e40              SUBS     r0,r0,#1              ;1708
0003bc  eb030440          ADD      r4,r3,r0,LSL #1       ;1710
0003c0  f8b4c4ef          LDRH     r12,[r4,#0x4ef]       ;1710
0003c4  f1bc0f00          CMP      r12,#0                ;1710
0003c8  d01d              BEQ      |L18.1030|
0003ca  eb030c80          ADD      r12,r3,r0,LSL #2      ;1712
0003ce  f99c8518          LDRSB    r8,[r12,#0x518]       ;1712
0003d2  e000              B        |L18.982|
                  |L18.980|
0003d4  e01a              B        |L18.1036|
                  |L18.982|
0003d6  f1080801          ADD      r8,r8,#1              ;1712
0003da  4547              CMP      r7,r8                 ;1712
0003dc  dc13              BGT      |L18.1030|
0003de  f99c8517          LDRSB    r8,[r12,#0x517]       ;1712
0003e2  f1a80801          SUB      r8,r8,#1              ;1712
0003e6  45a8              CMP      r8,r5                 ;1712
0003e8  dc0d              BGT      |L18.1030|
0003ea  f99c851a          LDRSB    r8,[r12,#0x51a]       ;1714
0003ee  f1080801          ADD      r8,r8,#1              ;1714
0003f2  45c2              CMP      r10,r8                ;1714
0003f4  dc07              BGT      |L18.1030|
0003f6  f99cc519          LDRSB    r12,[r12,#0x519]      ;1714
0003fa  f1ac0c01          SUB      r12,r12,#1            ;1714
0003fe  45dc              CMP      r12,r11               ;1714
000400  bfd8              IT       LE                    ;1716
000402  f8a494ef          STRHLE   r9,[r4,#0x4ef]        ;1716
                  |L18.1030|
000406  1c49              ADDS     r1,r1,#1              ;1716
000408  290a              CMP      r1,#0xa               ;1716
00040a  ddd6              BLE      |L18.954|
                  |L18.1036|
00040c  5cb0              LDRB     r0,[r6,r2]            ;1723
00040e  2800              CMP      r0,#0                 ;1723
000410  bf1c              ITT      NE                    ;1723
000412  1e40              SUBNE    r0,r0,#1              ;1723
000414  54b0              STRBNE   r0,[r6,r2]            ;1724
000416  1e52              SUBS     r2,r2,#1              ;1724
000418  d29a              BCS      |L18.848|
00041a  b00f              ADD      sp,sp,#0x3c
00041c  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.1056|
000420  e7ff              B        |L18.1058|
                  |L18.1058|
000422  a809              ADD      r0,sp,#0x24           ;1657
000424  2301              MOVS     r3,#1                 ;1657
000426  5503              STRB     r3,[r0,r4]            ;1657
000428  4909              LDR      r1,|L18.1104|
00042a  200a              MOVS     r0,#0xa               ;1658
00042c  5530              STRB     r0,[r6,r4]            ;1658
00042e  68c9              LDR      r1,[r1,#0xc]          ;1659  ; thisInfo
000430  480d              LDR      r0,|L18.1128|
000432  eb010284          ADD      r2,r1,r4,LSL #2       ;1659
000436  eb000084          ADD      r0,r0,r4,LSL #2       ;1659
00043a  f8d22517          LDR      r2,[r2,#0x517]        ;1659
00043e  6002              STR      r2,[r0,#0]            ;1659
000440  4a06              LDR      r2,|L18.1116|
000442  eb020cc4          ADD      r12,r2,r4,LSL #3      ;1660
000446  eb0102c4          ADD      r2,r1,r4,LSL #3       ;1660
00044a  f8d2749f          LDR      r7,[r2,#0x49f]        ;1660
00044e  e00d              B        |L18.1132|
                  |L18.1104|
                          DCD      ||.data||
                  |L18.1108|
                          DCD      ||area_number.21||+0x2f4
                  |L18.1112|
                          DCD      ||area_number.21||+0x2f3
                  |L18.1116|
                          DCD      ||area_number.21||+0x2fe
                  |L18.1120|
                          DCD      ||area_number.21||+0x2ea
                  |L18.1124|
                          DCD      ||area_number.21||+0x2e0
                  |L18.1128|
                          DCD      ||area_number.21||+0x34e
                  |L18.1132|
00046c  f8cc7000          STR      r7,[r12,#0]           ;1660
000470  f8d224a3          LDR      r2,[r2,#0x4a3]        ;1660
000474  f8cc2004          STR      r2,[r12,#4]           ;1660
000478  eb010c44          ADD      r12,r1,r4,LSL #1      ;1661
00047c  2200              MOVS     r2,#0                 ;1661
00047e  f8ac24ef          STRH     r2,[r12,#0x4ef]       ;1661
000482  f9902000          LDRSB    r2,[r0,#0]            ;1663
000486  2a00              CMP      r2,#0                 ;1663
000488  bfc4              ITT      GT                    ;1663
00048a  1e52              SUBGT    r2,r2,#1              ;1663
00048c  7002              STRBGT   r2,[r0,#0]            ;1664
00048e  f9902001          LDRSB    r2,[r0,#1]            ;1665
000492  2a2f              CMP      r2,#0x2f              ;1665
000494  bfbc              ITT      LT                    ;1665
000496  1c52              ADDLT    r2,r2,#1              ;1665
000498  7042              STRBLT   r2,[r0,#1]            ;1666
00049a  f9902002          LDRSB    r2,[r0,#2]            ;1667
00049e  2a00              CMP      r2,#0                 ;1667
0004a0  bfc4              ITT      GT                    ;1667
0004a2  1e52              SUBGT    r2,r2,#1              ;1667
0004a4  7082              STRBGT   r2,[r0,#2]            ;1668
0004a6  f9902003          LDRSB    r2,[r0,#3]            ;1669
0004aa  2a53              CMP      r2,#0x53              ;1669
0004ac  bfbc              ITT      LT                    ;1669
0004ae  1c52              ADDLT    r2,r2,#1              ;1669
0004b0  70c2              STRBLT   r2,[r0,#3]            ;1670
0004b2  f24100da          MOV      r0,#0x10da            ;1672
0004b6  5443              STRB     r3,[r0,r1]            ;1672
0004b8  f891049e          LDRB     r0,[r1,#0x49e]        ;1673
0004bc  1e40              SUBS     r0,r0,#1              ;1673
0004be  f881049e          STRB     r0,[r1,#0x49e]        ;1673
0004c2  e73c              B        |L18.830|
;;;1731   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  testArray
                          %        400

                          AREA ||area_number.21||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.21||, ||.bss||
                  sLFOffsetRow
                          %        96
                  gvsCurrentCheckRawData_AFE_1
                          %        160
                  gvsCurrentCheckRawData_AFE_2
                          %        160
                  gvsPastCheckRawData_AFE_1
                          %        160
                  gvsPastCheckRawData_AFE_2
                          %        160
                  ucFrameCnt
                          %        10
                  ucPalmContCnt
                          %        10
                  ucParNum
                          %        10
                  ucPalmPos
                          %        80
                  ucPalmRect
                          %        40
                  sLFOffsetCol
                          %        168

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  30545482          DCB      0x30,0x54,0x54,0x82
000004  5400              DCB      0x54,0x00
000006  0000              DCW      0x0000
000008  0000              DCW      0x0000
00000a  0000              DCB      0x00,0x00
00000c  0a545482          DCB      0x0a,0x54,0x54,0x82
000010  5400              DCB      0x54,0x00
000012  0000              DCW      0x0000
000014  0000              DCW      0x0000
000016  0000              DCB      0x00,0x00
000018  0a545482          DCB      0x0a,0x54,0x54,0x82
00001c  5100              DCB      0x51,0x00
00001e  0000              DCW      0x0000
000020  0000              DCW      0x0000
000022  0000              DCB      0x00,0x00
000024  30545482          DCB      0x30,0x54,0x54,0x82
000028  5100              DCB      0x51,0x00
00002a  0000              DCW      0x0000
00002c  0000              DCW      0x0000
00002e  0000              DCB      0x00,0x00
000030  0a545482          DCB      0x0a,0x54,0x54,0x82
000034  5400              DCB      0x54,0x00
000036  0000              DCW      0x0000
000038  0000              DCW      0x0000
00003a  0000              DCB      0x00,0x00
00003c  05545482          DCB      0x05,0x54,0x54,0x82
000040  5400              DCB      0x54,0x00
000042  0000              DCW      0x0000
000044  0000              DCW      0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  gbSkipTouch
000000  00                DCB      0x00
                  hz60
000001  01                DCB      0x01
                  gusSkipTouchCnt
000002  0000              DCW      0x0000
                  ptModuleModeConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  DebugAlgorithmInfo
                          DCD      0x00000000
                  tTempAlgorithmInfoDebug
                          DCD      0x00000000
                  ulMuxSensingOrder
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000005
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x00000008
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  DoReportOrgPos
000000  00                DCB      0x00

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  ErrorFrameProcessMode
000000  00                DCB      0x00

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  testcnt
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  bRawdataStuckDebug
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.data||
                  ulDetecForRecovery_Cnt
                          DCD      0x00000000

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  gbMuxDeltaDebug
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.data||
                  gucDebugCol
000000  49                DCB      0x49

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  gucDebugRow
000000  1a                DCB      0x1a

                          AREA ||area_number.33||, DATA, ALIGN=3

                          EXPORTAS ||area_number.33||, ||.data||
                  OperStartTime
                          %        8

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  OperEndTime
                          DCD      0x00000000

                          AREA ||i.__ARM_common_memclr4_10||, COMGROUP=__ARM_common_memclr4_10, CODE, READONLY, ALIGN=1

                  __ARM_common_memclr4_10 PROC
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  8101              STRH     r1,[r0,#8]
000008  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\algorithm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___11_algorithm_c_e1335427____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REVSH|
#line 402
|__asm___11_algorithm_c_e1335427____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____RRX|
#line 587
|__asm___11_algorithm_c_e1335427____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
