; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\dspa.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\dspa.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Hal\gdma -I..\..\Hal\flitf -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\dbgserial -I..\..\Hal\tlvds -I..\..\Tuning_process -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ --wchar32 --omf_browse=.\bin\dspa.crf ..\..\Hal\dspA\dspA.c]
                          THUMB

                          AREA ||i.Calc_LineFilter_Value||, CODE, READONLY, ALIGN=1

                  Calc_LineFilter_Value PROC
;;;282    
;;;283    int32_t Calc_LineFilter_Value(int32_t sum, int16_t cnt)
000000  2900              CMP      r1,#0
;;;284    {
;;;285        int32_t avg;
;;;286        
;;;287        if(cnt != 0)
;;;288            avg = sum / cnt;
000002  bf14              ITE      NE
000004  fb90f0f1          SDIVNE   r0,r0,r1
;;;289        else
;;;290            avg = 0;
000008  2000              MOVEQ    r0,#0
;;;291        
;;;292        return avg;
;;;293    }
00000a  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i.DSPA_CalculateDelta_Process||, CODE, READONLY, ALIGN=2

                  DSPA_CalculateDelta_Process PROC
;;;294    
;;;295    void DSPA_CalculateDelta_Process(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;296    uint32_t SRC1_ADDR,
;;;297    uint32_t SRC2_ADDR,
;;;298    uint32_t SRC3_ADDR,
;;;299    uint32_t DST_ADDR,
;;;300    uint8_t CAL1_WithCoef,
;;;301    uint8_t CAL2_MODE,
;;;302    uint8_t SRC2_DIV,
;;;303    uint8_t DST_DIV,
;;;304    uint8_t GetValueEnable,
;;;305    uint16_t Const_a,
;;;306    uint16_t Const_b,
;;;307    uint8_t Const_n, 
;;;308    uint8_t SRC2_DataType,
;;;309    uint8_t DST_DataType,
;;;310    int32_t PosTH, 
;;;311    int32_t NegTH, 
;;;312    int32_t GroupTH, 
;;;313    uint8_t cs,
;;;314    uint8_t ce,
;;;315    bool_t LocalColumnEn,
;;;316    uint8_t Row_Size, 
;;;317    bool_t mux_sum,		
;;;318    bool_t PadMode,		
;;;319    uint8_t OpMode		 // 0 : Pen , 1 : Finger, 2 : Phase, 3 : LineFilter
;;;320    )
;;;321    {
000004  b09f              SUB      sp,sp,#0x7c
;;;322    	uint32_t Src1_Addr, Src2_Addr;
;;;323    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN || USED_PEN_PROTOCOL == PEN_PROTOCOL_MSnWACOM_PEN || USED_PEN_PROTOCOL ==PEN_PROTOCOL_MSnWGP_PEN)
;;;324    	if((gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS && thisInfo->tPenInfo.bPen_phase[mux_sum] == 1) && OpMode == 0)
;;;325    	{
;;;326    		Src1_Addr = SRC2_ADDR;
;;;327    		Src2_Addr = SRC1_ADDR;
;;;328    	}
;;;329    	else
;;;330    #elif (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;331    	if(mux_sum && thisInfo->tPenInfo.bPen_phase[mux_sum] == 1 && OpMode == 0)
;;;332    	{
;;;333    		Src1_Addr = SRC2_ADDR;
;;;334    		Src2_Addr = SRC1_ADDR;
;;;335    	}
;;;336    	else
;;;337    #endif
;;;338    	{
;;;339    		Src1_Addr = SRC1_ADDR;
;;;340    		Src2_Addr = SRC2_ADDR;
;;;341    	}
;;;342    
;;;343    	uint8_t col_size,row_size,end_r;
;;;344    	uint8_t start_r = 0;
000006  2500              MOVS     r5,#0
000008  e9ddc339          LDRD     r12,r3,[sp,#0xe4]     ;321
00000c  9a3c              LDR      r2,[sp,#0xf0]         ;339
;;;345    	uint8_t ColMaxOffset = 0;
;;;346    	uint8_t start_c = cs;
;;;347    	
;;;348    	if(LocalColumnEn)
00000e  900a              STR      r0,[sp,#0x28]
000010  f8dd90b8          LDR      r9,[sp,#0xb8]         ;339
000014  9f30              LDR      r7,[sp,#0xc0]         ;339
000016  f8cdc01c          STR      r12,[sp,#0x1c]
00001a  983b              LDR      r0,[sp,#0xec]         ;321
00001c  9102              STR      r1,[sp,#8]
00001e  b158              CBZ      r0,|L2.56|
;;;349    	{
;;;350    		col_size = ce-start_c;
000020  eba3000c          SUB      r0,r3,r12
000024  b2c6              UXTB     r6,r0
;;;351    		row_size = 1;
000026  2001              MOVS     r0,#1
000028  e9cd2003          STRD     r2,r0,[sp,#0xc]
;;;352    		end_r = Row_Size;
;;;353    	}
;;;354    	else
;;;355    	{
;;;356    		start_c = 0;
;;;357    		col_size = COL_MAX;
;;;358    		row_size = Row_Size;
;;;359    		end_r = 1;
;;;360    	}
;;;361    	
;;;362    #if PAD_ > 0	
;;;363    	if(PadMode == 1)
;;;364    	{
;;;365    		if(LocalColumnEn)
;;;366    		{
;;;367    			col_size = ce-start_c;
;;;368    			row_size = 1;
;;;369    			start_r = PAD_;
;;;370    			end_r = Row_Size+PAD_;
;;;371    			ColMaxOffset = 2*PAD_;
;;;372    		}
;;;373    		else
;;;374    		{
;;;375    			start_c = 0;
;;;376    			col_size = COL_MAX+2*PAD_;
;;;377    			row_size = Row_Size+2*PAD_;
;;;378    			end_r = 1;
;;;379    		}
;;;380    	}
;;;381    #endif
;;;382    		
;;;383    	for(int r = start_r; r<end_r; r++)
00002c  2a00              CMP      r2,#0
;;;384    	{
;;;385    		DSPA_ParamSet
;;;386    		(
;;;387    			CAL1_WithCoef,                         // CAL1 : With/Without Coef
;;;388    			CAL2_MODE,                        // CAL2 :
;;;389    			SRC2_DIV,                         // SRC2_DIV
;;;390    			DST_DIV,                            // DST_DIV
;;;391    			GetValueEnable,                         // Get Value Enable
;;;392    			Const_a,                            // Const_a
;;;393    			Const_b,                            // Const_b
;;;394    			Const_n,                            // Const_n
;;;395    			col_size,       // Node COL Size
;;;396    			row_size,       // Node ROW Size
;;;397    			col_size*row_size,  // Node Total Size
;;;398    			SRC2_DataType,                           // SRC2 DataType
;;;399    			DST_DataType,                           // DST DataType
;;;400    			Src1_Addr+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),//LOCALRAWIMAGE,                 // SRC1 Address
;;;401    			Src2_Addr+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),//LOCALBASELINE,                // SRC2 Address
;;;402    			SRC3_ADDR,                                  		// SRC3 Address
;;;403    			DST_ADDR+(((r)*(COL_MAX+ColMaxOffset)+start_c)<<1),               // DST Address
;;;404    			PosTH, //thisModeConf->Label.usLocalSeedBase,   //thisModeConf->BaseLine.sBlockPosThd,         // Positive ���� Thd
;;;405    			NegTH,       // Negative ���� Thd
;;;406    			500,        // Upper Line Count Thd
;;;407    			-500,       // Lower Line Count Thd
;;;408    			GroupTH, //thisModeConf->Label.usLocalSeedBase,                    // TGroup Thd (Label Seed)
;;;409    			LINE_FILTER_HOR
;;;410    		);
;;;411    	
;;;412    		DSPA_Start(1);
;;;413    		
;;;414    		if(GetValueEnable)
;;;415    		{
;;;416    			if(LocalColumnEn)
;;;417    			{
;;;418    				if(OpMode == 0)
;;;419    				{
;;;420    					if(thisInfo->tDelta_local.iMaxStrength < tDSPAOutPutInfo.usPositiveMaxData)
;;;421    					{
;;;422    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;423    						thisInfo->tDelta_local.tMaxCellPos.r = r;
;;;424    						thisInfo->tDelta_local.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx+start_c;
;;;425    					}
;;;426    					
;;;427    					if(thisInfo->tDelta_local.iMinStrength > tDSPAOutPutInfo.sNegativeMaxData)
;;;428    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;429    					
;;;430    					if( thisInfo->tDelta_local.tValidRect.cs > tDSPAOutPutInfo.ulTouchAreaCol_sIdx+start_c )
;;;431    						thisInfo->tDelta_local.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx+start_c;
;;;432    					if( thisInfo->tDelta_local.tValidRect.ce < tDSPAOutPutInfo.ulTouchAreaCol_eIdx+start_c )
;;;433    						thisInfo->tDelta_local.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx+start_c;
;;;434    					if(tDSPAOutPutInfo.ulPositiveCellNum > 0)
;;;435    					{
;;;436    						if( thisInfo->tDelta_local.tValidRect.rs > r )
;;;437    							thisInfo->tDelta_local.tValidRect.rs = r;
;;;438    						if( thisInfo->tDelta_local.tValidRect.re < r )
;;;439    							thisInfo->tDelta_local.tValidRect.re = r;
;;;440    					}
;;;441    				}
;;;442    				else if(OpMode == 2)
;;;443    				{
;;;444    					if(thisInfo->tDelta_local.iMaxStrength < tDSPAOutPutInfo.usPositiveMaxData)
;;;445    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;446    					
;;;447    					if(thisInfo->tDelta_local.iMinStrength > tDSPAOutPutInfo.sNegativeMaxData)
;;;448    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;					
;;;449    				}
;;;450    			}
;;;451    			else
;;;452    			{
;;;453    				if(OpMode == 1)
;;;454    				{
;;;455    					thisInfo->tDelta.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;456    					thisInfo->tDelta.tValidRect.rs = tDSPAOutPutInfo.ulTouchAreaRow_sIdx;
;;;457    					thisInfo->tDelta.tValidRect.re = tDSPAOutPutInfo.ulTouchAreaRow_eIdx;
;;;458    					thisInfo->tDelta.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx;
;;;459    					thisInfo->tDelta.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx;
;;;460    					thisInfo->tDelta.tMaxCellPos.r = tDSPAOutPutInfo.ulPositiveMaxData_RowIdx;
;;;461    					thisInfo->tDelta.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx;
;;;462    					thisInfo->tDelta.iPosSum = tDSPAOutPutInfo.ulPositiveCellTotalSum;
;;;463    					thisInfo->tDelta.iPosCnt = tDSPAOutPutInfo.ulPositiveCellNum;
;;;464    					thisInfo->tDelta.tMinCellPos.r = tDSPAOutPutInfo.ulNegativeMaxData_RowIdx;
;;;465    					thisInfo->tDelta.tMinCellPos.c = tDSPAOutPutInfo.ulNegativeMaxData_ColIdx;
;;;466    					thisInfo->tDelta.iNegCnt = tDSPAOutPutInfo.ulNegativeCellNum;
;;;467    					thisInfo->tDelta.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;468    					thisInfo->tDelta.iNegSum = tDSPAOutPutInfo.lNegativeCellTotalSum;
;;;469    				}
;;;470    				else
;;;471    				{
;;;472    					if(OpMode == 0)
;;;473    					{
;;;474    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;475    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;
;;;476    						thisInfo->tDelta_local.tMaxCellPos.r = tDSPAOutPutInfo.ulPositiveMaxData_RowIdx;
;;;477    						thisInfo->tDelta_local.tMaxCellPos.c = tDSPAOutPutInfo.ulPositiveMaxData_ColIdx;
;;;478    						thisInfo->tDelta_local.tValidRect.cs = tDSPAOutPutInfo.ulTouchAreaCol_sIdx;
;;;479    						thisInfo->tDelta_local.tValidRect.ce = tDSPAOutPutInfo.ulTouchAreaCol_eIdx;
;;;480    						thisInfo->tDelta_local.tValidRect.rs = tDSPAOutPutInfo.ulTouchAreaRow_sIdx;
;;;481    						thisInfo->tDelta_local.tValidRect.re = tDSPAOutPutInfo.ulTouchAreaRow_eIdx;
;;;482    						thisInfo->tDelta_local.iNegSum = tDSPAOutPutInfo.lNegativeCellTotalSum;
;;;483    					}
;;;484    					else if(OpMode == 2)
;;;485    					{
;;;486    						thisInfo->tDelta_local.iMaxStrength = tDSPAOutPutInfo.usPositiveMaxData;
;;;487    						thisInfo->tDelta_local.iMinStrength = tDSPAOutPutInfo.sNegativeMaxData;					
;;;488    					}
;;;489    				}
;;;490    			}
;;;491    		}
;;;492    	}
;;;493    	
;;;494    #if PAD_ > 0	
;;;495    	if(PadMode == 1)
;;;496    	{	
;;;497    		thisInfo->tDelta_local.tMaxCellPos.r -= PAD_;
;;;498    		thisInfo->tDelta_local.tValidRect.rs -= PAD_;
;;;499    		thisInfo->tDelta_local.tValidRect.re -= PAD_;
;;;500    		thisInfo->tDelta_local.tMaxCellPos.c -= PAD_;
;;;501    		thisInfo->tDelta_local.tValidRect.cs -= PAD_;
;;;502    		thisInfo->tDelta_local.tValidRect.ce -= PAD_;	
;;;503    	}
;;;504    #endif
;;;505    }
00002e  bfdc              ITT      LE
000030  b023              ADDLE    sp,sp,#0x8c
000032  e8bd8ff0          POPLE    {r4-r11,pc}
000036  e005              B        |L2.68|
                  |L2.56|
000038  2000              MOVS     r0,#0                 ;356
00003a  2654              MOVS     r6,#0x54              ;357
00003c  9007              STR      r0,[sp,#0x1c]         ;359
00003e  2001              MOVS     r0,#1                 ;359
000040  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;359
                  |L2.68|
000044  9804              LDR      r0,[sp,#0x10]         ;385
000046  fb06f800          MUL      r8,r6,r0              ;385
00004a  bf00              NOP                            ;385
                  |L2.76|
00004c  e9dda02c          LDRD     r10,r0,[sp,#0xb0]     ;385
000050  e9dd3e31          LDRD     r3,lr,[sp,#0xc4]      ;385
000054  f8ddb0cc          LDR      r11,[sp,#0xcc]        ;385
000058  f8cdb04c          STR      r11,[sp,#0x4c]        ;385
00005c  f8ddb010          LDR      r11,[sp,#0x10]        ;385
000060  f8cdb048          STR      r11,[sp,#0x48]        ;385
000064  ebc501c5          RSB      r1,r5,r5,LSL #3       ;385
000068  e9dd2b34          LDRD     r2,r11,[sp,#0xd0]     ;385
00006c  eb010441          ADD      r4,r1,r1,LSL #1       ;385
000070  9907              LDR      r1,[sp,#0x1c]         ;385
000072  f8cdb03c          STR      r11,[sp,#0x3c]        ;385
000076  eb010184          ADD      r1,r1,r4,LSL #2       ;385
00007a  9c0a              LDR      r4,[sp,#0x28]         ;385
00007c  f8ddc0bc          LDR      r12,[sp,#0xbc]        ;385
000080  eb040b41          ADD      r11,r4,r1,LSL #1      ;385
000084  9c02              LDR      r4,[sp,#8]            ;385
000086  f8cdb038          STR      r11,[sp,#0x38]        ;385
00008a  eb040b41          ADD      r11,r4,r1,LSL #1      ;385
00008e  f8cdb034          STR      r11,[sp,#0x34]        ;385
000092  f8ddb084          LDR      r11,[sp,#0x84]        ;385
000096  9c22              LDR      r4,[sp,#0x88]         ;385
000098  f8cdb030          STR      r11,[sp,#0x30]        ;385
00009c  eb040b41          ADD      r11,r4,r1,LSL #1      ;385
0000a0  f8cdb074          STR      r11,[sp,#0x74]        ;385
0000a4  f8ddb0d8          LDR      r11,[sp,#0xd8]        ;385
0000a8  f8cdb070          STR      r11,[sp,#0x70]        ;385
0000ac  f8ddb0dc          LDR      r11,[sp,#0xdc]        ;385
0000b0  f8cdb06c          STR      r11,[sp,#0x6c]        ;385
0000b4  f44f7bfa          MOV      r11,#0x1f4            ;385
0000b8  f1cb0100          RSB      r1,r11,#0             ;385
0000bc  f8cdb068          STR      r11,[sp,#0x68]        ;385
0000c0  f8ddb0e0          LDR      r11,[sp,#0xe0]        ;385
0000c4  4cad              LDR      r4,|L2.892|
0000c6  f8cdb004          STR      r11,[sp,#4]           ;385
0000ca  f04f0b01          MOV      r11,#1                ;385
0000ce  f8c4b004          STR      r11,[r4,#4]           ;385
0000d2  f8d4b008          LDR      r11,[r4,#8]           ;385
0000d6  f02b0b10          BIC      r11,r11,#0x10         ;385
0000da  f8c4b008          STR      r11,[r4,#8]           ;385
0000de  f8d4b008          LDR      r11,[r4,#8]           ;385
0000e2  f36a0b00          BFI      r11,r10,#0,#1         ;385
0000e6  f8c4b008          STR      r11,[r4,#8]           ;385
0000ea  f8d4a008          LDR      r10,[r4,#8]           ;385
0000ee  f3600a43          BFI      r10,r0,#1,#3          ;385
0000f2  f8c4a008          STR      r10,[r4,#8]           ;385
0000f6  f8d4a00c          LDR      r10,[r4,#0xc]         ;385
0000fa  f3690a00          BFI      r10,r9,#0,#1          ;385
0000fe  f8c4a00c          STR      r10,[r4,#0xc]         ;385
000102  f8d4a00c          LDR      r10,[r4,#0xc]         ;385
000106  f36c0a41          BFI      r10,r12,#1,#1         ;385
00010a  f8c4a00c          STR      r10,[r4,#0xc]         ;385
00010e  f8d4c00c          LDR      r12,[r4,#0xc]         ;385
000112  f3670c82          BFI      r12,r7,#2,#1          ;385
000116  f8c4c00c          STR      r12,[r4,#0xc]         ;385
00011a  f8d4c010          LDR      r12,[r4,#0x10]        ;385
00011e  f3630c09          BFI      r12,r3,#0,#10         ;385
000122  f8c4c010          STR      r12,[r4,#0x10]        ;385
000126  6923              LDR      r3,[r4,#0x10]         ;385
000128  f36e2393          BFI      r3,lr,#10,#10         ;385
00012c  6123              STR      r3,[r4,#0x10]         ;385
00012e  f8ddb04c          LDR      r11,[sp,#0x4c]        ;385
000132  6923              LDR      r3,[r4,#0x10]         ;385
000134  f36b5317          BFI      r3,r11,#20,#4         ;385
000138  6123              STR      r3,[r4,#0x10]         ;385
00013a  6963              LDR      r3,[r4,#0x14]         ;385
00013c  f3660307          BFI      r3,r6,#0,#8           ;385
000140  6163              STR      r3,[r4,#0x14]         ;385
000142  f8ddb048          LDR      r11,[sp,#0x48]        ;385
000146  6963              LDR      r3,[r4,#0x14]         ;385
000148  f36b230f          BFI      r3,r11,#8,#8          ;385
00014c  6163              STR      r3,[r4,#0x14]         ;385
00014e  6963              LDR      r3,[r4,#0x14]         ;385
000150  f368431f          BFI      r3,r8,#16,#16         ;385
000154  6163              STR      r3,[r4,#0x14]         ;385
000156  69a3              LDR      r3,[r4,#0x18]         ;385
000158  f3620301          BFI      r3,r2,#0,#2           ;385
00015c  61a3              STR      r3,[r4,#0x18]         ;385
00015e  f8ddb03c          LDR      r11,[sp,#0x3c]        ;385
000162  69a2              LDR      r2,[r4,#0x18]         ;385
000164  f36b0283          BFI      r2,r11,#2,#2          ;385
000168  61a2              STR      r2,[r4,#0x18]         ;385
00016a  69a2              LDR      r2,[r4,#0x18]         ;385
00016c  f366120b          BFI      r2,r6,#4,#8           ;385
000170  61a2              STR      r2,[r4,#0x18]         ;385
000172  f8ddb038          LDR      r11,[sp,#0x38]        ;385
000176  f8c4b01c          STR      r11,[r4,#0x1c]        ;385
00017a  f8ddb034          LDR      r11,[sp,#0x34]        ;385
00017e  f8c4b020          STR      r11,[r4,#0x20]        ;385
000182  f8ddb030          LDR      r11,[sp,#0x30]        ;385
000186  f8c4b024          STR      r11,[r4,#0x24]        ;385
00018a  f8ddb074          LDR      r11,[sp,#0x74]        ;385
00018e  f8c4b028          STR      r11,[r4,#0x28]        ;385
000192  f8ddb070          LDR      r11,[sp,#0x70]        ;385
000196  f8c4b02c          STR      r11,[r4,#0x2c]        ;385
00019a  f8ddb06c          LDR      r11,[sp,#0x6c]        ;385
00019e  f8c4b030          STR      r11,[r4,#0x30]        ;385
0001a2  f8ddb068          LDR      r11,[sp,#0x68]        ;385
0001a6  f8c4b034          STR      r11,[r4,#0x34]        ;385
0001aa  63a1              STR      r1,[r4,#0x38]         ;385
0001ac  f8ddb004          LDR      r11,[sp,#4]           ;385
0001b0  f8c4b03c          STR      r11,[r4,#0x3c]        ;385
0001b4  f1b90f01          CMP      r9,#1                 ;385
0001b8  d004              BEQ      |L2.452|
                  |L2.442|
0001ba  2007              MOVS     r0,#7                 ;385
0001bc  f7fffffe          BL       hal_get_irq_flag
0001c0  b970              CBNZ     r0,|L2.480|
0001c2  e008              B        |L2.470|
                  |L2.452|
0001c4  2807              CMP      r0,#7                 ;385
0001c6  bf14              ITE      NE                    ;385
0001c8  f04f3054          MOVNE    r0,#0x54545454        ;385
0001cc  f04f3001          MOVEQ    r0,#0x1010101         ;385
0001d0  64a0              STR      r0,[r4,#0x48]         ;385
0001d2  64e0              STR      r0,[r4,#0x4c]         ;385
0001d4  e7f1              B        |L2.442|
                  |L2.470|
0001d6  2001              MOVS     r0,#1                 ;385
0001d8  6020              STR      r0,[r4,#0]            ;385
0001da  4869              LDR      r0,|L2.896|
0001dc  f7fffffe          BL       DSPA_WaitForIrq
                  |L2.480|
0001e0  2f00              CMP      r7,#0                 ;414
0001e2  d046              BEQ      |L2.626|
0001e4  983b              LDR      r0,[sp,#0xec]         ;416
0001e6  2800              CMP      r0,#0                 ;416
0001e8  983f              LDR      r0,[sp,#0xfc]         ;416
0001ea  d058              BEQ      |L2.670|
0001ec  b110              CBZ      r0,|L2.500|
0001ee  2802              CMP      r0,#2                 ;442
0001f0  d040              BEQ      |L2.628|
0001f2  e0ba              B        |L2.874|
                  |L2.500|
0001f4  4863              LDR      r0,|L2.900|
0001f6  4962              LDR      r1,|L2.896|
0001f8  6840              LDR      r0,[r0,#4]            ;420  ; thisInfo
0001fa  890a              LDRH     r2,[r1,#8]            ;420  ; tDSPAOutPutInfo
0001fc  f8d03f48          LDR      r3,[r0,#0xf48]        ;420
000200  4293              CMP      r3,r2                 ;420
000202  da08              BGE      |L2.534|
000204  f8c02f48          STR      r2,[r0,#0xf48]        ;423
000208  f8805f69          STRB     r5,[r0,#0xf69]        ;423
00020c  7c0b              LDRB     r3,[r1,#0x10]         ;424  ; tDSPAOutPutInfo
00020e  9a07              LDR      r2,[sp,#0x1c]         ;424
000210  441a              ADD      r2,r2,r3              ;424
000212  f8802f68          STRB     r2,[r0,#0xf68]        ;424
                  |L2.534|
000216  f9b1301c          LDRSH    r3,[r1,#0x1c]         ;428  ; tDSPAOutPutInfo
00021a  f8d02f64          LDR      r2,[r0,#0xf64]        ;428
00021e  429a              CMP      r2,r3                 ;428
000220  bfc8              IT       GT                    ;428
000222  461a              MOVGT    r2,r3                 ;428
000224  f8c02f64          STR      r2,[r0,#0xf64]        ;430
000228  f8d1c030          LDR      r12,[r1,#0x30]        ;430  ; tDSPAOutPutInfo
00022c  9a07              LDR      r2,[sp,#0x1c]         ;430
00022e  f9903f42          LDRSB    r3,[r0,#0xf42]        ;430
000232  4462              ADD      r2,r2,r12             ;430
000234  4293              CMP      r3,r2                 ;430
000236  bf88              IT       HI                    ;431
000238  f8802f42          STRBHI   r2,[r0,#0xf42]        ;431
00023c  f9903f43          LDRSB    r3,[r0,#0xf43]        ;432
000240  f8d1c034          LDR      r12,[r1,#0x34]        ;432  ; tDSPAOutPutInfo
000244  9a07              LDR      r2,[sp,#0x1c]         ;432
000246  4462              ADD      r2,r2,r12             ;432
000248  4293              CMP      r3,r2                 ;432
00024a  bf38              IT       CC                    ;433
00024c  f8802f43          STRBCC   r2,[r0,#0xf43]        ;433
000250  6809              LDR      r1,[r1,#0]            ;434  ; tDSPAOutPutInfo
000252  2900              CMP      r1,#0                 ;434
000254  d00d              BEQ      |L2.626|
000256  f9901f40          LDRSB    r1,[r0,#0xf40]        ;437
00025a  42a9              CMP      r1,r5                 ;437
00025c  bfc8              IT       GT                    ;437
00025e  4629              MOVGT    r1,r5                 ;437
000260  f8801f40          STRB     r1,[r0,#0xf40]        ;437
000264  f9901f41          LDRSB    r1,[r0,#0xf41]        ;439
000268  42a9              CMP      r1,r5                 ;439
00026a  bfd8              IT       LE                    ;439
00026c  4629              MOVLE    r1,r5                 ;439
00026e  f8801f41          STRB     r1,[r0,#0xf41]        ;439
                  |L2.626|
000272  e07a              B        |L2.874|
                  |L2.628|
000274  4843              LDR      r0,|L2.900|
000276  4a42              LDR      r2,|L2.896|
000278  6841              LDR      r1,[r0,#4]            ;445  ; thisInfo
00027a  8913              LDRH     r3,[r2,#8]            ;445  ; tDSPAOutPutInfo
00027c  f8d10f48          LDR      r0,[r1,#0xf48]        ;445
000280  4298              CMP      r0,r3                 ;445
000282  bfd8              IT       LE                    ;445
000284  4618              MOVLE    r0,r3                 ;445
000286  f8c10f48          STR      r0,[r1,#0xf48]        ;448
00028a  f9b2001c          LDRSH    r0,[r2,#0x1c]         ;448  ; tDSPAOutPutInfo
00028e  f8d13f64          LDR      r3,[r1,#0xf64]        ;448
000292  4283              CMP      r3,r0                 ;448
000294  bfd8              IT       LE                    ;448
000296  4618              MOVLE    r0,r3                 ;448
000298  f8c10f64          STR      r0,[r1,#0xf64]        ;445
00029c  e065              B        |L2.874|
                  |L2.670|
00029e  2801              CMP      r0,#1                 ;453
0002a0  d003              BEQ      |L2.682|
0002a2  b398              CBZ      r0,|L2.780|
0002a4  2802              CMP      r0,#2                 ;484
0002a6  d056              BEQ      |L2.854|
0002a8  e05f              B        |L2.874|
                  |L2.682|
0002aa  4936              LDR      r1,|L2.900|
0002ac  4834              LDR      r0,|L2.896|
0002ae  6849              LDR      r1,[r1,#4]            ;455  ; thisInfo
0002b0  8902              LDRH     r2,[r0,#8]            ;455  ; tDSPAOutPutInfo
0002b2  f8c12015          STR      r2,[r1,#0x15]         ;455
0002b6  f8902028          LDRB     r2,[r0,#0x28]         ;456  ; tDSPAOutPutInfo
0002ba  734a              STRB     r2,[r1,#0xd]          ;456
0002bc  f890202c          LDRB     r2,[r0,#0x2c]         ;457  ; tDSPAOutPutInfo
0002c0  738a              STRB     r2,[r1,#0xe]          ;457
0002c2  f8902030          LDRB     r2,[r0,#0x30]         ;458  ; tDSPAOutPutInfo
0002c6  73ca              STRB     r2,[r1,#0xf]          ;458
0002c8  f8902034          LDRB     r2,[r0,#0x34]         ;459  ; tDSPAOutPutInfo
0002cc  740a              STRB     r2,[r1,#0x10]         ;459
0002ce  7b02              LDRB     r2,[r0,#0xc]          ;460  ; tDSPAOutPutInfo
0002d0  f8812036          STRB     r2,[r1,#0x36]         ;460
0002d4  7c02              LDRB     r2,[r0,#0x10]         ;461  ; tDSPAOutPutInfo
0002d6  f8812035          STRB     r2,[r1,#0x35]         ;461
0002da  6842              LDR      r2,[r0,#4]            ;462  ; tDSPAOutPutInfo
0002dc  f8c12025          STR      r2,[r1,#0x25]         ;462
0002e0  6802              LDR      r2,[r0,#0]            ;463  ; tDSPAOutPutInfo
0002e2  f8c12021          STR      r2,[r1,#0x21]         ;463
0002e6  f8902020          LDRB     r2,[r0,#0x20]         ;464  ; tDSPAOutPutInfo
0002ea  f8812038          STRB     r2,[r1,#0x38]         ;464
0002ee  f8902024          LDRB     r2,[r0,#0x24]         ;465  ; tDSPAOutPutInfo
0002f2  f8812037          STRB     r2,[r1,#0x37]         ;465
0002f6  6942              LDR      r2,[r0,#0x14]         ;466  ; tDSPAOutPutInfo
0002f8  f8c12029          STR      r2,[r1,#0x29]         ;466
0002fc  f9b0201c          LDRSH    r2,[r0,#0x1c]         ;467  ; tDSPAOutPutInfo
000300  f8c12031          STR      r2,[r1,#0x31]         ;467
000304  6980              LDR      r0,[r0,#0x18]         ;468  ; tDSPAOutPutInfo
000306  f8c1002d          STR      r0,[r1,#0x2d]         ;468
00030a  e02e              B        |L2.874|
                  |L2.780|
00030c  e7ff              B        |L2.782|
                  |L2.782|
00030e  481d              LDR      r0,|L2.900|
000310  491b              LDR      r1,|L2.896|
000312  6840              LDR      r0,[r0,#4]            ;474  ; thisInfo
000314  890a              LDRH     r2,[r1,#8]            ;474  ; tDSPAOutPutInfo
000316  f8c02f48          STR      r2,[r0,#0xf48]        ;475
00031a  f9b1201c          LDRSH    r2,[r1,#0x1c]         ;475  ; tDSPAOutPutInfo
00031e  f8c02f64          STR      r2,[r0,#0xf64]        ;476
000322  7b0a              LDRB     r2,[r1,#0xc]          ;476  ; tDSPAOutPutInfo
000324  f8802f69          STRB     r2,[r0,#0xf69]        ;476
000328  7c0a              LDRB     r2,[r1,#0x10]         ;477  ; tDSPAOutPutInfo
00032a  f8802f68          STRB     r2,[r0,#0xf68]        ;477
00032e  f8912030          LDRB     r2,[r1,#0x30]         ;478  ; tDSPAOutPutInfo
000332  f8802f42          STRB     r2,[r0,#0xf42]        ;478
000336  f8912034          LDRB     r2,[r1,#0x34]         ;479  ; tDSPAOutPutInfo
00033a  f8802f43          STRB     r2,[r0,#0xf43]        ;479
00033e  f8912028          LDRB     r2,[r1,#0x28]         ;480  ; tDSPAOutPutInfo
000342  f8802f40          STRB     r2,[r0,#0xf40]        ;480
000346  f891202c          LDRB     r2,[r1,#0x2c]         ;481  ; tDSPAOutPutInfo
00034a  f8802f41          STRB     r2,[r0,#0xf41]        ;481
00034e  6989              LDR      r1,[r1,#0x18]         ;482  ; tDSPAOutPutInfo
000350  f8c01f60          STR      r1,[r0,#0xf60]        ;482
000354  e009              B        |L2.874|
                  |L2.854|
000356  480b              LDR      r0,|L2.900|
000358  4909              LDR      r1,|L2.896|
00035a  6840              LDR      r0,[r0,#4]            ;486  ; thisInfo
00035c  890a              LDRH     r2,[r1,#8]            ;486  ; tDSPAOutPutInfo
00035e  f8c02f48          STR      r2,[r0,#0xf48]        ;487
000362  f9b1101c          LDRSH    r1,[r1,#0x1c]         ;487  ; tDSPAOutPutInfo
000366  f8c01f64          STR      r1,[r0,#0xf64]        ;487
                  |L2.874|
00036a  9803              LDR      r0,[sp,#0xc]          ;487
00036c  1c6d              ADDS     r5,r5,#1              ;487
00036e  4285              CMP      r5,r0                 ;487
000370  f6ffae6c          BLT      |L2.76|
000374  b023              ADD      sp,sp,#0x8c
000376  e8bd8ff0          POP      {r4-r11,pc}
;;;506    
                          ENDP

00037a  0000              DCW      0x0000
                  |L2.892|
                          DCD      0x40003000
                  |L2.896|
                          DCD      ||.bss||
                  |L2.900|
                          DCD      ||.data||

                          AREA ||i.DSPA_Initialize||, CODE, READONLY, ALIGN=2

                  DSPA_Initialize PROC
;;;108    
;;;109    void DSPA_Initialize(void)
000000  490b              LDR      r1,|L3.48|
;;;110    {
;;;111    	Fncp_DSP_A_IRQHandler = DSP_A_InterruptHandler;
000002  480a              LDR      r0,|L3.44|
000004  6008              STR      r0,[r1,#0]  ; Fncp_DSP_A_IRQHandler
000006  490b              LDR      r1,|L3.52|
000008  2080              MOVS     r0,#0x80
00000a  f8810400          STRB     r0,[r1,#0x400]
00000e  f04f21e0          MOV      r1,#0xe000e000
000012  01c0              LSLS     r0,r0,#7
000014  f8c10100          STR      r0,[r1,#0x100]
;;;112    
;;;113    	NVIC_SetPriority(DSP_A_IRQn, DSP_A_IRQn_Priority);
;;;114        NVIC_EnableIRQ(DSP_A_IRQn);
;;;115    
;;;116        DSPA->dspa_int_en.tBit.int_op_end = 0x1; // Interrupt Enable
000018  4807              LDR      r0,|L3.56|
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  f0410101          ORR      r1,r1,#1
000020  6641              STR      r1,[r0,#0x64]
;;;117        DSPA->dspa_int_en.tBit.int_tmode = 0x0; // Interrupt Enable
000022  6e41              LDR      r1,[r0,#0x64]
000024  f0210108          BIC      r1,r1,#8
000028  6641              STR      r1,[r0,#0x64]
;;;118    }
00002a  4770              BX       lr
;;;119    
                          ENDP

                  |L3.44|
                          DCD      DSP_A_InterruptHandler
                  |L3.48|
                          DCD      Fncp_DSP_A_IRQHandler
                  |L3.52|
                          DCD      0xe000e00e
                  |L3.56|
                          DCD      0x40003000

                          AREA ||i.DSPA_LineFilter_2nd_Stage||, CODE, READONLY, ALIGN=2

                  DSPA_LineFilter_2nd_Stage PROC
;;;506    
;;;507    void DSPA_LineFilter_2nd_Stage(uint32_t TmpDeltaAddr, uint32_t LF_BUF2_ADDR , uint32_t LF_BUF3_ADDR, uint32_t RowIdx,uint8_t RowSize, int32_t PosTHD,int32_t NegTHD)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;508    {  	
000004  b094              SUB      sp,sp,#0x50
;;;509    	int32_t *pLF_BUF2 = (int32_t *)LF_BUF2_ADDR;
;;;510    	int32_t *pLF_BUF3 = (int32_t *)LF_BUF3_ADDR;
;;;511    
;;;512    	memset(pLF_BUF2, 0, 8*sizeof(int32_t));	
000006  f04f0c00          MOV      r12,#0
00000a  e9dd761b          LDRD     r7,r6,[sp,#0x6c]      ;508
00000e  f8dd8068          LDR      r8,[sp,#0x68]
000012  f8c1c000          STR      r12,[r1,#0]
000016  f8c1c004          STR      r12,[r1,#4]
00001a  f8c1c008          STR      r12,[r1,#8]
00001e  f8c1c00c          STR      r12,[r1,#0xc]
000022  f8c1c010          STR      r12,[r1,#0x10]
000026  f8c1c014          STR      r12,[r1,#0x14]
00002a  f8c1c018          STR      r12,[r1,#0x18]
;;;513    	memset(pLF_BUF3, 0, 8*sizeof(int32_t));
00002e  f8c1c01c          STR      r12,[r1,#0x1c]
000032  f8c2c000          STR      r12,[r2,#0]
000036  f8c2c004          STR      r12,[r2,#4]
00003a  f8c2c008          STR      r12,[r2,#8]
00003e  f8c2c00c          STR      r12,[r2,#0xc]
000042  f8c2c010          STR      r12,[r2,#0x10]
000046  f8c2c014          STR      r12,[r2,#0x14]
00004a  4615              MOV      r5,r2                 ;510
00004c  f8c2c018          STR      r12,[r2,#0x18]
;;;514    
;;;515    	DSPA_CalculateDelta_Process(
000050  f8c5c01c          STR      r12,[r5,#0x1c]
000054  2203              MOVS     r2,#3
000056  e9cd8c10          STRD     r8,r12,[sp,#0x40]
00005a  e9cdc212          STRD     r12,r2,[sp,#0x48]
00005e  2254              MOVS     r2,#0x54
000060  e9cdc20d          STRD     r12,r2,[sp,#0x34]
000064  2202              MOVS     r2,#2
000066  f8cdc03c          STR      r12,[sp,#0x3c]
00006a  f8cdc010          STR      r12,[sp,#0x10]
00006e  f8cdc014          STR      r12,[sp,#0x14]
000072  f8cdc018          STR      r12,[sp,#0x18]
000076  f8cdc01c          STR      r12,[sp,#0x1c]
00007a  9208              STR      r2,[sp,#0x20]
00007c  e9cd2709          STRD     r2,r7,[sp,#0x24]
000080  f44f78fa          MOV      r8,#0x1f4
000084  e9cd680b          STRD     r6,r8,[sp,#0x2c]
000088  2201              MOVS     r2,#1
00008a  2606              MOVS     r6,#6
00008c  f8cdc000          STR      r12,[sp,#0]
000090  e9cd6201          STRD     r6,r2,[sp,#4]
000094  460c              MOV      r4,r1                 ;509
000096  4418              ADD      r0,r0,r3
000098  9203              STR      r2,[sp,#0xc]
00009a  4623              MOV      r3,r4
00009c  4a21              LDR      r2,|L4.292|
00009e  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;516    		TmpDeltaAddr+RowIdx, LF_BUF2_ADDR, (uint32_t)&LINEFILTERBUFST1[0], LF_BUF2_ADDR,	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;517    		0,LINEFILTER_ST2, 1,1,0, 0,0,0, WORD,WORD,   										//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;518    		PosTHD,NegTHD,500,                     												//PosTH,NegTH,GroupTH 
;;;519    		0,COL_MAX, 0, RowSize, 0,0,3);      												//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;520    		
;;;521    	pLF_BUF3[0] = Calc_LineFilter_Value(pLF_BUF2[0],DSPA->dspa_gen_reg2.Linefilter.n_cnt0);
0000a2  4821              LDR      r0,|L4.296|
0000a4  6822              LDR      r2,[r4,#0]
0000a6  6d01              LDR      r1,[r0,#0x50]
0000a8  b209              SXTH     r1,r1
0000aa  2900              CMP      r1,#0
0000ac  bf18              IT       NE
0000ae  fb92f1f1          SDIVNE   r1,r2,r1
;;;522    	pLF_BUF3[1] = Calc_LineFilter_Value(pLF_BUF2[1],DSPA->dspa_gen_reg2.Linefilter.n_cnt1);
0000b2  6029              STR      r1,[r5,#0]
0000b4  6862              LDR      r2,[r4,#4]
0000b6  6d01              LDR      r1,[r0,#0x50]
0000b8  1409              ASRS     r1,r1,#16
0000ba  bf18              IT       NE
0000bc  fb92f1f1          SDIVNE   r1,r2,r1
;;;523    	pLF_BUF3[2] = Calc_LineFilter_Value(pLF_BUF2[2],DSPA->dspa_gen_reg3.Linefilter.n_cnt2);
0000c0  6069              STR      r1,[r5,#4]
0000c2  68a2              LDR      r2,[r4,#8]
0000c4  6d41              LDR      r1,[r0,#0x54]
0000c6  b209              SXTH     r1,r1
0000c8  2900              CMP      r1,#0
0000ca  bf18              IT       NE
0000cc  fb92f1f1          SDIVNE   r1,r2,r1
;;;524    	pLF_BUF3[3] = Calc_LineFilter_Value(pLF_BUF2[3],DSPA->dspa_gen_reg3.Linefilter.n_cnt3);
0000d0  60a9              STR      r1,[r5,#8]
0000d2  68e2              LDR      r2,[r4,#0xc]
0000d4  6d41              LDR      r1,[r0,#0x54]
0000d6  1409              ASRS     r1,r1,#16
0000d8  bf18              IT       NE
0000da  fb92f1f1          SDIVNE   r1,r2,r1
;;;525    	pLF_BUF3[4] = Calc_LineFilter_Value(pLF_BUF2[4],DSPA->dspa_gen_reg4.Linefilter.n_cnt4);
0000de  60e9              STR      r1,[r5,#0xc]
0000e0  6922              LDR      r2,[r4,#0x10]
0000e2  6d81              LDR      r1,[r0,#0x58]
0000e4  b209              SXTH     r1,r1
0000e6  2900              CMP      r1,#0
0000e8  bf18              IT       NE
0000ea  fb92f1f1          SDIVNE   r1,r2,r1
;;;526    	pLF_BUF3[5] = Calc_LineFilter_Value(pLF_BUF2[5],DSPA->dspa_gen_reg4.Linefilter.n_cnt5);
0000ee  6129              STR      r1,[r5,#0x10]
0000f0  6962              LDR      r2,[r4,#0x14]
0000f2  6d81              LDR      r1,[r0,#0x58]
0000f4  1409              ASRS     r1,r1,#16
0000f6  bf18              IT       NE
0000f8  fb92f1f1          SDIVNE   r1,r2,r1
;;;527    	pLF_BUF3[6] = Calc_LineFilter_Value(pLF_BUF2[6],DSPA->dspa_gen_reg5.Linefilter.n_cnt6);
0000fc  6169              STR      r1,[r5,#0x14]
0000fe  69a2              LDR      r2,[r4,#0x18]
000100  6dc1              LDR      r1,[r0,#0x5c]
000102  b209              SXTH     r1,r1
000104  2900              CMP      r1,#0
000106  bf18              IT       NE
000108  fb92f1f1          SDIVNE   r1,r2,r1
;;;528    	pLF_BUF3[7] = Calc_LineFilter_Value(pLF_BUF2[7],DSPA->dspa_gen_reg5.Linefilter.n_cnt7);
00010c  61a9              STR      r1,[r5,#0x18]
00010e  69e1              LDR      r1,[r4,#0x1c]
000110  6dc0              LDR      r0,[r0,#0x5c]
000112  1400              ASRS     r0,r0,#16
000114  bf18              IT       NE
000116  fb91f0f0          SDIVNE   r0,r1,r0
00011a  61e8              STR      r0,[r5,#0x1c]
;;;529    }
00011c  b014              ADD      sp,sp,#0x50
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;530    
                          ENDP

000122  0000              DCW      0x0000
                  |L4.292|
                          DCD      DspA_LF_ArrayS32_1
                  |L4.296|
                          DCD      0x40003000

                          AREA ||i.DSPA_ParamSet||, CODE, READONLY, ALIGN=2

                  DSPA_ParamSet PROC
;;;161    
;;;162    void DSPA_ParamSet(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;163            uint8_t     cal1_mode,
;;;164            uint8_t     cal2_mode,
;;;165            uint8_t     src2_div_en,
;;;166            uint8_t     dst_div_en,
;;;167            uint8_t     get_value_en,
;;;168            uint16_t    const_a,
;;;169            uint16_t    const_b,
;;;170            uint8_t     const_n,
;;;171            uint8_t     x_size,
;;;172            uint8_t     y_size,
;;;173            uint16_t    total_node_size,
;;;174            uint8_t     src2_dtype,
;;;175            uint8_t     dst_dtype,
;;;176            uint32_t    src1_addr,
;;;177            uint32_t    src2_addr,
;;;178            uint32_t    src3_addr,
;;;179            uint32_t    dst_addr,
;;;180            int32_t     thd1,
;;;181            int32_t     thd2,
;;;182            int32_t     thd3,
;;;183            int32_t     thd4,
;;;184            int32_t     thd5,
;;;185            uint8_t     filter_dir
;;;186    )
;;;187    {
;;;188        DSPA->dspa_init                    = 1;
000004  f8dfc148          LDR      r12,|L5.336|
000008  e9dd641a          LDRD     r6,r4,[sp,#0x68]      ;187
00000c  e9dd590d          LDRD     r5,r9,[sp,#0x34]      ;187
000010  e9dd8712          LDRD     r8,r7,[sp,#0x48]      ;187
000014  e9ddba09          LDRD     r11,r10,[sp,#0x24]    ;187
000018  f04f0e01          MOV      lr,#1
00001c  f8cce004          STR      lr,[r12,#4]
;;;189    
;;;190        if (filter_dir == LINE_FILTER_HOR)
000020  2c00              CMP      r4,#0
;;;191            DSPA->dspa_mode.tBit.sens_dir          = 0;
000022  bf04              ITT      EQ
000024  f8dce008          LDREQ    lr,[r12,#8]
000028  f02e0e10          BICEQ    lr,lr,#0x10
00002c  d006              BEQ      |L5.60|
;;;192        else if(filter_dir == LINE_FILTER_VER)
00002e  2c01              CMP      r4,#1
;;;193            DSPA->dspa_mode.tBit.sens_dir          = 1;
000030  bf04              ITT      EQ
000032  f8dce008          LDREQ    lr,[r12,#8]
000036  f04e0e10          ORREQ    lr,lr,#0x10
00003a  d101              BNE      |L5.64|
                  |L5.60|
00003c  f8cce008          STR      lr,[r12,#8]
                  |L5.64|
;;;194    
;;;195        DSPA->dspa_mode.tBit.cal1_mode         = cal1_mode;
000040  f8dce008          LDR      lr,[r12,#8]
000044  f3600e00          BFI      lr,r0,#0,#1
000048  f8cce008          STR      lr,[r12,#8]
;;;196        DSPA->dspa_mode.tBit.cal2_mode         = cal2_mode;
00004c  f8dc0008          LDR      r0,[r12,#8]
000050  f3610043          BFI      r0,r1,#1,#3
000054  f8cc0008          STR      r0,[r12,#8]
;;;197    
;;;198        DSPA->dspa_cal_ctrl.tBit.src2_div_en   = src2_div_en;
000058  f8dc000c          LDR      r0,[r12,#0xc]
00005c  f3620000          BFI      r0,r2,#0,#1
000060  f8cc000c          STR      r0,[r12,#0xc]
;;;199        DSPA->dspa_cal_ctrl.tBit.dst_div_en    = dst_div_en;
000064  f8dc000c          LDR      r0,[r12,#0xc]
000068  f3630041          BFI      r0,r3,#1,#1
00006c  f8cc000c          STR      r0,[r12,#0xc]
;;;200        DSPA->dspa_cal_ctrl.tBit.get_val_en    = get_value_en;
000070  f8dc000c          LDR      r0,[r12,#0xc]
000074  f36b0082          BFI      r0,r11,#2,#1
000078  f8cc000c          STR      r0,[r12,#0xc]
;;;201    
;;;202        DSPA->dspa_cal_const.tBit.const_a      = const_a;
00007c  f8dc0010          LDR      r0,[r12,#0x10]
000080  f36a0009          BFI      r0,r10,#0,#10
000084  f8cc0010          STR      r0,[r12,#0x10]
;;;203        DSPA->dspa_cal_const.tBit.const_b      = const_b;
000088  980b              LDR      r0,[sp,#0x2c]
00008a  f8dc3010          LDR      r3,[r12,#0x10]
00008e  f3602393          BFI      r3,r0,#10,#10
000092  f8cc3010          STR      r3,[r12,#0x10]
;;;204        DSPA->dspa_cal_const.tBit.const_n      = const_n;
000096  980c              LDR      r0,[sp,#0x30]
000098  f8dc3010          LDR      r3,[r12,#0x10]
00009c  f3605317          BFI      r3,r0,#20,#4
0000a0  f8cc3010          STR      r3,[r12,#0x10]
;;;205    
;;;206        DSPA->dspa_size_cfg.tBit.xsize         = x_size;
0000a4  f8dc0014          LDR      r0,[r12,#0x14]
0000a8  f3650007          BFI      r0,r5,#0,#8
0000ac  f8cc0014          STR      r0,[r12,#0x14]
;;;207        DSPA->dspa_size_cfg.tBit.ysize         = y_size;
0000b0  f8dc0014          LDR      r0,[r12,#0x14]
0000b4  f369200f          BFI      r0,r9,#8,#8
0000b8  f8cc0014          STR      r0,[r12,#0x14]
;;;208        DSPA->dspa_size_cfg.tBit.datalen       = total_node_size;
0000bc  980f              LDR      r0,[sp,#0x3c]
0000be  f8dc3014          LDR      r3,[r12,#0x14]
0000c2  f360431f          BFI      r3,r0,#16,#16
0000c6  f8cc3014          STR      r3,[r12,#0x14]
;;;209    
;;;210        DSPA->dspa_dsize.tBit.src2_dsize       = src2_dtype;
0000ca  9810              LDR      r0,[sp,#0x40]
0000cc  f8dc3018          LDR      r3,[r12,#0x18]
0000d0  f3600301          BFI      r3,r0,#0,#2
0000d4  f8cc3018          STR      r3,[r12,#0x18]
;;;211        DSPA->dspa_dsize.tBit.dst_dsize        = dst_dtype;
0000d8  9811              LDR      r0,[sp,#0x44]
0000da  f8dc3018          LDR      r3,[r12,#0x18]
0000de  f3600383          BFI      r3,r0,#2,#2
0000e2  f8cc3018          STR      r3,[r12,#0x18]
;;;212        DSPA->dspa_dsize.tBit.tot_xsize        = x_size;
0000e6  f8dc0018          LDR      r0,[r12,#0x18]
0000ea  f365100b          BFI      r0,r5,#4,#8
0000ee  f8cc0018          STR      r0,[r12,#0x18]
;;;213    
;;;214        DSPA->dspa_src1_addr                 = src1_addr;
0000f2  f8cc801c          STR      r8,[r12,#0x1c]
;;;215        DSPA->dspa_src2_addr                 = src2_addr;
0000f6  f8cc7020          STR      r7,[r12,#0x20]
;;;216        DSPA->dspa_src3_addr                 = src3_addr;
0000fa  9814              LDR      r0,[sp,#0x50]
0000fc  f8cc0024          STR      r0,[r12,#0x24]
;;;217        DSPA->dspa_dst_addr                  = dst_addr;
000100  9815              LDR      r0,[sp,#0x54]
000102  f8cc0028          STR      r0,[r12,#0x28]
;;;218    
;;;219        DSPA->dspa_lf_uppth                  = thd1;
000106  9816              LDR      r0,[sp,#0x58]
000108  f8cc002c          STR      r0,[r12,#0x2c]
;;;220        DSPA->dspa_lf_lowth                  = (uint32_t)thd2;
00010c  9817              LDR      r0,[sp,#0x5c]
00010e  f8cc0030          STR      r0,[r12,#0x30]
;;;221        DSPA->dspa_lcnt_uppth                = thd3;
000112  9818              LDR      r0,[sp,#0x60]
000114  f8cc0034          STR      r0,[r12,#0x34]
;;;222        DSPA->dspa_lcnt_lowth                = (uint32_t)thd4;
000118  9819              LDR      r0,[sp,#0x64]
00011a  f8cc0038          STR      r0,[r12,#0x38]
;;;223        DSPA->dspa_param_th                  = thd5;
00011e  f8cc603c          STR      r6,[r12,#0x3c]
;;;224    
;;;225        if ( src2_div_en == 1 )
000122  2a01              CMP      r2,#1
;;;226        {
;;;227            if( cal2_mode == LINECELLCOUNT )
;;;228            {
;;;229                DSPA->dspa_gen_reg0.w  = (1 << 24) | (1 << 16) | (1 << 8) | 1;
;;;230                DSPA->dspa_gen_reg1.w  = (1 << 24) | (1 << 16) | (1 << 8) | 1;
;;;231            }
;;;232            else    // Linfilter Step 1,2,3
;;;233            {
;;;234                if (filter_dir == LINE_FILTER_HOR)
;;;235                {
;;;236                    DSPA->dspa_gen_reg0.w  = (COL_MAX << 0)
;;;237                                             | (COL_MAX << 8)
;;;238                                             | (COL_MAX << 16)
;;;239                                             | (COL_MAX << 24);
;;;240                    DSPA->dspa_gen_reg1.w  = (COL_MAX << 0)
;;;241                                             | (COL_MAX << 8)
;;;242                                             | (COL_MAX << 16)
;;;243                                             | (COL_MAX << 24);
;;;244                }
;;;245                else
;;;246                {
;;;247                    DSPA->dspa_gen_reg0.w  = (1 << 0)
;;;248                                             | (1 << 8)
;;;249                                             | (1 << 16)
;;;250                                             | (1 << 24);
;;;251                    DSPA->dspa_gen_reg1.w  = (1 << 0)
;;;252                                             | (1 << 8)
;;;253                                             | (1 << 16)
;;;254                                             | (1 << 24);
;;;255                }
;;;256            }
;;;257        }
;;;258    
;;;259    //    if( _DEF_TEST_MODE_EN_ )
;;;260    //    {
;;;261    //        DSPA->dspa_tmode_cfg.tBit.tmode_brk_en =  1;
;;;262    //        DSPA->dspa_tmode_cfg.tBit.tmode_brk_pos = _DEF_TEST_MODE_NODE_POS_;
;;;263    //    }
;;;264    }
000124  bf18              IT       NE
000126  e8bd8ff0          POPNE    {r4-r11,pc}
00012a  f04f3001          MOV      r0,#0x1010101         ;229
00012e  2907              CMP      r1,#7                 ;227
000130  d000              BEQ      |L5.308|
000132  b12c              CBZ      r4,|L5.320|
                  |L5.308|
000134  f8cc0048          STR      r0,[r12,#0x48]        ;229
000138  f8cc004c          STR      r0,[r12,#0x4c]        ;230
00013c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.320|
000140  f04f3054          MOV      r0,#0x54545454        ;236
000144  f8cc0048          STR      r0,[r12,#0x48]        ;236
000148  f8cc004c          STR      r0,[r12,#0x4c]        ;240
00014c  e8bd8ff0          POP      {r4-r11,pc}
;;;265    
                          ENDP

                  |L5.336|
                          DCD      0x40003000

                          AREA ||i.DSPA_Start||, CODE, READONLY, ALIGN=2

                  DSPA_Start PROC
;;;265    
;;;266    void DSPA_Start(bool_t bIsWait)
000000  b510              PUSH     {r4,lr}
;;;267    {
000002  4604              MOV      r4,r0
;;;268    	if(hal_get_irq_flag(IRQ_ID_DSPA) == 0)
000004  2007              MOVS     r0,#7
000006  f7fffffe          BL       hal_get_irq_flag
00000a  2800              CMP      r0,#0
;;;269    	{
;;;270    		DSPA->dspa_start = 1;
;;;271    		if(bIsWait)
;;;272    		{
;;;273    			DSPA_WaitForIrq(&tDSPAOutPutInfo);
;;;274    		}
;;;275    	}
;;;276    }
00000c  bf18              IT       NE
00000e  bd10              POPNE    {r4,pc}
000010  2001              MOVS     r0,#1                 ;270
000012  4905              LDR      r1,|L6.40|
000014  6008              STR      r0,[r1,#0]            ;270
000016  2c00              CMP      r4,#0                 ;271
000018  bf08              IT       EQ
00001a  bd10              POPEQ    {r4,pc}
00001c  4803              LDR      r0,|L6.44|
00001e  e8bd4010          POP      {r4,lr}               ;273
000022  f7ffbffe          B.W      DSPA_WaitForIrq
;;;277    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x40003000
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.DSPA_WaitForIrq||, CODE, READONLY, ALIGN=2

                  DSPA_WaitForIrq PROC
;;;120    int LoopCntDspA = 0;
;;;121    void DSPA_WaitForIrq(tDSPAOutPutInfo_t * ptOutPutInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;122    {
;;;123    //	uint32_t ulMinValue;
;;;124    //	uint32_t ulMaxValue;
;;;125    	LoopCntDspA = 0;
000002  4d25              LDR      r5,|L7.152|
000004  2600              MOVS     r6,#0
000006  4604              MOV      r4,r0                 ;122
000008  616e              STR      r6,[r5,#0x14]  ; LoopCntDspA
                  |L7.10|
;;;126    	while(YES)
;;;127    	{
;;;128    	    if(hal_get_irq_flag(IRQ_ID_DSPA))
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       hal_get_irq_flag
000010  2800              CMP      r0,#0
000012  d036              BEQ      |L7.130|
;;;129    	    {
;;;130    	    	hal_clear_irq_flag(IRQ_ID_DSPA);
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       hal_clear_irq_flag
;;;131    			LoopCntDspA = 0;
;;;132    			if(DSPA->dspa_cal_ctrl.tBit.get_val_en)
00001a  4920              LDR      r1,|L7.156|
00001c  616e              STR      r6,[r5,#0x14]  ; LoopCntDspA
00001e  68c8              LDR      r0,[r1,#0xc]
000020  f0100f04          TST      r0,#4
;;;133    			{
;;;134    				ptOutPutInfo->ulPositiveCellNum = (DSPA->dspa_gen_reg0.w  >>  0) & 0xffff;
;;;135    				ptOutPutInfo->usPositiveMaxData = (DSPA->dspa_gen_reg0.w  >> 16) & 0xffff;
;;;136    				ptOutPutInfo->ulPositiveCellTotalSum = (int32_t)(DSPA->dspa_gen_reg1.w );
;;;137    				ptOutPutInfo->ulPositiveMaxData_ColIdx = (DSPA->dspa_gen_reg2.w  >>  0) & 0xff;
;;;138    				ptOutPutInfo->ulPositiveMaxData_RowIdx = (DSPA->dspa_gen_reg2.w  >>  8) & 0xff;
;;;139    				ptOutPutInfo->ulNegativeMaxData_ColIdx = (DSPA->dspa_gen_reg2.w  >> 16) & 0xff;
;;;140    				ptOutPutInfo->ulNegativeMaxData_RowIdx = (DSPA->dspa_gen_reg2.w  >> 24) & 0xff;
;;;141    
;;;142    				ptOutPutInfo->ulNegativeCellNum = (DSPA->dspa_gen_reg3.w  >>  0) & 0xffff;
;;;143    				ptOutPutInfo->sNegativeMaxData = (DSPA->dspa_gen_reg3.w  >> 16) & 0xffff;
;;;144    				ptOutPutInfo->lNegativeCellTotalSum = (int32_t)DSPA->dspa_gen_reg4.w;
;;;145    
;;;146    				ptOutPutInfo->ulTouchAreaCol_sIdx = (DSPA->dspa_gen_reg5.w  >>  0) & 0xff;
;;;147    				ptOutPutInfo->ulTouchAreaCol_eIdx = (DSPA->dspa_gen_reg5.w  >>  8) & 0xff;
;;;148    				ptOutPutInfo->ulTouchAreaRow_sIdx = (DSPA->dspa_gen_reg5.w  >> 16) & 0xff;
;;;149    				ptOutPutInfo->ulTouchAreaRow_eIdx = (DSPA->dspa_gen_reg5.w  >> 24) & 0xff;
;;;150    			}
;;;151    	    	break;
;;;152    	    }
;;;153    		
;;;154    		if(++LoopCntDspA > 32000)
;;;155    		{
;;;156    			hal_clear_irq_flag(IRQ_ID_DSPA);
;;;157    			break;
;;;158    		}
;;;159    	}
;;;160    }
000024  bf08              IT       EQ
000026  bd70              POPEQ    {r4-r6,pc}
000028  6c88              LDR      r0,[r1,#0x48]         ;134
00002a  b280              UXTH     r0,r0                 ;134
00002c  6020              STR      r0,[r4,#0]            ;135
00002e  6c88              LDR      r0,[r1,#0x48]         ;135
000030  0c00              LSRS     r0,r0,#16             ;135
000032  8120              STRH     r0,[r4,#8]            ;135
000034  6cc8              LDR      r0,[r1,#0x4c]         ;136
000036  6060              STR      r0,[r4,#4]            ;137
000038  6d08              LDR      r0,[r1,#0x50]         ;137
00003a  b2c0              UXTB     r0,r0                 ;137
00003c  6120              STR      r0,[r4,#0x10]         ;138
00003e  6d08              LDR      r0,[r1,#0x50]         ;138
000040  f3c02007          UBFX     r0,r0,#8,#8           ;138
000044  60e0              STR      r0,[r4,#0xc]          ;139
000046  6d08              LDR      r0,[r1,#0x50]         ;139
000048  f3c04007          UBFX     r0,r0,#16,#8          ;139
00004c  6260              STR      r0,[r4,#0x24]         ;140
00004e  6d08              LDR      r0,[r1,#0x50]         ;140
000050  0e00              LSRS     r0,r0,#24             ;140
000052  6220              STR      r0,[r4,#0x20]         ;142
000054  6d48              LDR      r0,[r1,#0x54]         ;142
000056  b280              UXTH     r0,r0                 ;142
000058  6160              STR      r0,[r4,#0x14]         ;143
00005a  6d48              LDR      r0,[r1,#0x54]         ;143
00005c  1400              ASRS     r0,r0,#16             ;143
00005e  83a0              STRH     r0,[r4,#0x1c]         ;143
000060  6d88              LDR      r0,[r1,#0x58]         ;144
000062  61a0              STR      r0,[r4,#0x18]         ;146
000064  6dc8              LDR      r0,[r1,#0x5c]         ;146
000066  b2c0              UXTB     r0,r0                 ;146
000068  6320              STR      r0,[r4,#0x30]         ;147
00006a  6dc8              LDR      r0,[r1,#0x5c]         ;147
00006c  f3c02007          UBFX     r0,r0,#8,#8           ;147
000070  6360              STR      r0,[r4,#0x34]         ;148
000072  6dc8              LDR      r0,[r1,#0x5c]         ;148
000074  f3c04007          UBFX     r0,r0,#16,#8          ;148
000078  62a0              STR      r0,[r4,#0x28]         ;149
00007a  6dc8              LDR      r0,[r1,#0x5c]         ;149
00007c  0e00              LSRS     r0,r0,#24             ;149
00007e  62e0              STR      r0,[r4,#0x2c]         ;149
000080  bd70              POP      {r4-r6,pc}
                  |L7.130|
000082  6968              LDR      r0,[r5,#0x14]         ;154  ; LoopCntDspA
000084  1c40              ADDS     r0,r0,#1              ;154
000086  6168              STR      r0,[r5,#0x14]         ;154  ; LoopCntDspA
000088  f5b04ffa          CMP      r0,#0x7d00            ;154
00008c  ddbd              BLE      |L7.10|
00008e  e8bd4070          POP      {r4-r6,lr}            ;156
000092  2007              MOVS     r0,#7                 ;156
000094  f7ffbffe          B.W      hal_clear_irq_flag
;;;161    
                          ENDP

                  |L7.152|
                          DCD      ||.data||
                  |L7.156|
                          DCD      0x40003000

                          AREA ||i.DSPA_WaitOK||, CODE, READONLY, ALIGN=2

                  DSPA_WaitOK PROC
;;;277    
;;;278    void DSPA_WaitOK(void)
000000  4801              LDR      r0,|L8.8|
;;;279    {
;;;280    	DSPA_WaitForIrq(&tDSPAOutPutInfo);
000002  f7ffbffe          B.W      DSPA_WaitForIrq
;;;281    }
;;;282    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i.DSP_A_InterruptHandler||, CODE, READONLY, ALIGN=2

                  DSP_A_InterruptHandler PROC
;;;97     
;;;98     void DSP_A_InterruptHandler(void)
000000  b510              PUSH     {r4,lr}
000002  f04f21e0          MOV      r1,#0xe000e000
000006  f44f4080          MOV      r0,#0x4000
00000a  f8c10280          STR      r0,[r1,#0x280]
;;;99     {
;;;100        NVIC_ClearPendingIRQ(DSP_A_IRQn);
;;;101    
;;;102        if( DSPA->dspa_status.tBit.int_op_end_sts )
00000e  4c07              LDR      r4,|L9.44|
000010  6ee0              LDR      r0,[r4,#0x6c]
000012  f0100f01          TST      r0,#1
;;;103        {
;;;104        	hal_set_irq_flag(IRQ_ID_DSPA);
;;;105            DSPA->dspa_int_clr.tBit.int_op_end_clr = 0x1; // Interrupt Clear
;;;106        }
;;;107    }
000016  bf08              IT       EQ
000018  bd10              POPEQ    {r4,pc}
00001a  2007              MOVS     r0,#7                 ;104
00001c  f7fffffe          BL       hal_set_irq_flag
000020  6ea0              LDR      r0,[r4,#0x68]         ;105
000022  f0400001          ORR      r0,r0,#1              ;105
000026  66a0              STR      r0,[r4,#0x68]         ;105
000028  bd10              POP      {r4,pc}
;;;108    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x40003000

                          AREA ||i.algorithm_baseline_calculate_delta_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_baseline_calculate_delta_dspA PROC
;;;744    
;;;745    void algorithm_baseline_calculate_delta_dspA(int mode)
000000  b5f0              PUSH     {r4-r7,lr}
;;;746    {
000002  b095              SUB      sp,sp,#0x54
;;;747    	uint16_t * pBaseImage;
;;;748    	uint32_t Dst_Addr;
;;;749    #if (PAD_ > 0)	
;;;750    	Dst_Addr = (uint32_t)&DSPATMPDELTA_Finger[0][0];
;;;751    //	memset(DSPATMPDELTA_Finger,0,sizeof(DSPATMPDELTA_Finger));
;;;752    #else
;;;753    	Dst_Addr = (uint32_t)&DELTAIMAGE[0][0];
000004  4f1f              LDR      r7,|L10.132|
;;;754    #endif
;;;755    
;;;756    #if USED_NOISE_HOPPING_FREQ
;;;757    	tAppInfo_t * pAppInfo = app_GetInfo();
000006  f7fffffe          BL       app_GetInfo
;;;758    	if(pAppInfo->eSelectFreq == FREQ_MAIN)
00000a  7cc0              LDRB     r0,[r0,#0x13]
00000c  2801              CMP      r0,#1
;;;759    	{
;;;760    		pBaseImage = g_pFingerBaseImage;
00000e  bf0c              ITE      EQ
000010  481d              LDREQ    r0,|L10.136|
;;;761    	}
;;;762    	else
;;;763    	{
;;;764    		pBaseImage = g_pFingerHop1BaseImage;
000012  481e              LDRNE    r0,|L10.140|
;;;765    	}
;;;766    #else /* USED_NOISE_HOPPING_FREQ */
;;;767    	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;768    #endif /* USED_NOISE_HOPPING_FREQ */
;;;769    
;;;770    	DSPA_CalculateDelta_Process(
000014  2401              MOVS     r4,#1
000016  2500              MOVS     r5,#0
000018  6801              LDR      r1,[r0,#0]  ; g_pFingerHop1BaseImage
00001a  2030              MOVS     r0,#0x30
00001c  e9cd0510          STRD     r0,r5,[sp,#0x40]
000020  4e1b              LDR      r6,|L10.144|
000022  e9cd5412          STRD     r5,r4,[sp,#0x48]
000026  68f0              LDR      r0,[r6,#0xc]  ; thisModeConf
000028  2354              MOVS     r3,#0x54
00002a  f8b02064          LDRH     r2,[r0,#0x64]
00002e  e9cd350e          STRD     r3,r5,[sp,#0x38]
000032  e9cd250c          STRD     r2,r5,[sp,#0x30]
000036  f9b0200b          LDRSH    r2,[r0,#0xb]
00003a  f9b00009          LDRSH    r0,[r0,#9]
00003e  e9cd020a          STRD     r0,r2,[sp,#0x28]
000042  9408              STR      r4,[sp,#0x20]
000044  9409              STR      r4,[sp,#0x24]
000046  68b0              LDR      r0,[r6,#8]  ; ptModuleModeConf
000048  463b              MOV      r3,r7
00004a  2200              MOVS     r2,#0
00004c  7800              LDRB     r0,[r0,#0]
00004e  9405              STR      r4,[sp,#0x14]
000050  e9cd4006          STRD     r4,r0,[sp,#0x18]
000054  9404              STR      r4,[sp,#0x10]
000056  9400              STR      r4,[sp,#0]
000058  e9cd4501          STRD     r4,r5,[sp,#4]
00005c  480d              LDR      r0,|L10.148|
00005e  9503              STR      r5,[sp,#0xc]
000060  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;771    		(uint32_t)&RAWIMAGE[0][0], (uint32_t)(&pBaseImage[0]), 0,Dst_Addr,																					//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR
;;;772    		WITHCOEF,SUBTRACTION, 0,0,1, 1,1,ptModuleModeConf->ucOvrShift, HALFWORD,HALFWORD,														//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;773    		(int32_t)thisModeConf->BaseLine.sAccumPosSumThd,(int32_t)thisModeConf->BaseLine.sAccumNegSumThd,(int32_t)thisModeConf->Label.usSeedBase, 	//PosTH,NegTH,GroupTH 
;;;774    		0,COL_MAX, 0, ROW_MAX, 0, 0, 1);																										//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;775    	
;;;776    	if(  thisInfo->tDelta.iMaxStrength > thisModeConf->Label.usSeedBase)
000064  6870              LDR      r0,[r6,#4]  ; thisInfo
000066  68f2              LDR      r2,[r6,#0xc]  ; thisModeConf
000068  f8d01015          LDR      r1,[r0,#0x15]
00006c  f8b22064          LDRH     r2,[r2,#0x64]
000070  f5005080          ADD      r0,r0,#0x1000
000074  4291              CMP      r1,r2
;;;777    	{
;;;778    		thisInfo->bTouchExpect = YES;
000076  bfcc              ITE      GT
000078  f88040dd          STRBGT   r4,[r0,#0xdd]
;;;779    	}
;;;780    	else thisInfo->bTouchExpect = NO;
00007c  f88050dd          STRBLE   r5,[r0,#0xdd]
;;;781    
;;;782    	
;;;783    #if (PAD_ > 0)
;;;784    	algorithm_delta_padding(mode);
;;;785    #endif
;;;786    }
000080  b015              ADD      sp,sp,#0x54
000082  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L10.132|
                          DCD      FullSharedBuff+0xf6c0
                  |L10.136|
                          DCD      g_pFingerBaseImage
                  |L10.140|
                          DCD      g_pFingerHop1BaseImage
                  |L10.144|
                          DCD      ||.data||
                  |L10.148|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_delta_padding||, CODE, READONLY, ALIGN=2

                  algorithm_delta_padding PROC
;;;560    
;;;561    void algorithm_delta_padding(uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;562    {
;;;563        uint16_t r,end_r;
;;;564        int16_t *psrc;
;;;565        int16_t *pdst;
;;;566        uint32_t MemTransSize;
;;;567        
;;;568        MemTransSize = COL_MAX*sizeof(int16_t);
000004  f04f08a8          MOV      r8,#0xa8
;;;569       
;;;570    	if(mode == LOCAL_HOVER_MODE)
000008  2803              CMP      r0,#3
;;;571    	{
;;;572    		psrc = &DSPATMPDELTA[0][0];
00000a  bf04              ITT      EQ
00000c  4c0f              LDREQ    r4,|L11.76|
;;;573    		pdst = &DSPATMPDELTA_PAD[0][0];	
00000e  4810              LDREQ    r0,|L11.80|
000010  d01a              BEQ      |L11.72|
;;;574    		end_r = PEN_COORD_ROW_MAX;		
;;;575    	}
;;;576    	else if(mode == LOCAL_MODE)
000012  2801              CMP      r0,#1
000014  d016              BEQ      |L11.68|
;;;577    	{
;;;578    		psrc = &DSPATMPDELTA[0][0];
;;;579    		pdst = &LOCALDELTAIMAGE[0][0];	
;;;580    		end_r = PEN_COORD_ROW_MAX;		
;;;581    	}
;;;582    	else
;;;583    	{
;;;584    		psrc = &DSPATMPDELTA_Finger[0][0];
000016  4c0f              LDR      r4,|L11.84|
;;;585    		pdst = HAL_GET_DELTA_IMAGE_PTR();
000018  480f              LDR      r0,|L11.88|
;;;586    		end_r = ROW_MAX;
00001a  2530              MOVS     r5,#0x30
                  |L11.28|
;;;587    	}
;;;588    
;;;589    	pdst += (COL_MAX + 2*PAD_+PAD_);
;;;590    
;;;591    	for( r=0; r<end_r; r++ )
00001c  2600              MOVS     r6,#0
00001e  f10007a8          ADD      r7,r0,#0xa8           ;589
000022  2d00              CMP      r5,#0
;;;592    	{
;;;593    		memcpy(pdst, psrc, MemTransSize);
;;;594    
;;;595    		psrc += COL_MAX;
;;;596    		pdst += (COL_MAX + 2*PAD_);
;;;597    	}
;;;598    }
000024  bf98              IT       LS
000026  e8bd81f0          POPLS    {r4-r8,pc}
                  |L11.42|
00002a  4642              MOV      r2,r8                 ;593
00002c  4621              MOV      r1,r4                 ;593
00002e  4638              MOV      r0,r7                 ;593
000030  f7fffffe          BL       __aeabi_memcpy
000034  1c70              ADDS     r0,r6,#1              ;591
000036  b286              UXTH     r6,r0                 ;591
000038  34a8              ADDS     r4,r4,#0xa8           ;591
00003a  37a8              ADDS     r7,r7,#0xa8           ;591
00003c  42b5              CMP      r5,r6                 ;591
00003e  d8f4              BHI      |L11.42|
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L11.68|
000044  4c01              LDR      r4,|L11.76|
000046  4805              LDR      r0,|L11.92|
                  |L11.72|
000048  2505              MOVS     r5,#5                 ;580
00004a  e7e7              B        |L11.28|
;;;599    
                          ENDP

                  |L11.76|
                          DCD      DspA_TmpDelta
                  |L11.80|
                          DCD      DspA_TmpDelta_Pad
                  |L11.84|
                          DCD      DspA_TmpDelta_Finger
                  |L11.88|
                          DCD      FullSharedBuff+0xf6c0
                  |L11.92|
                          DCD      LocalSharedBuff+0x4c20

                          AREA ||i.algorithm_init_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_init_dspA PROC
;;;62     
;;;63     void algorithm_init_dspA(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65     	ptModuleModeConf = module_GetModeConfig();
000002  f7fffffe          BL       module_GetModeConfig
000006  4c0b              LDR      r4,|L12.52|
;;;66     	thisModeConf     = algorithm_GetModeConfig();
000008  60a0              STR      r0,[r4,#8]  ; ptModuleModeConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;67     	thisInfo         = algorithm_GetInfo();
00000e  60e0              STR      r0,[r4,#0xc]  ; thisModeConf
000010  f7fffffe          BL       algorithm_GetInfo
;;;68     #if USED_NOISE_HOPPING_FREQ
;;;69     	ptAppInfo		 = app_GetInfo();
000014  6060              STR      r0,[r4,#4]  ; thisInfo
000016  f7fffffe          BL       app_GetInfo
;;;70     #endif /* USED_NOISE_HOPPING_FREQ */
;;;71     	memset(LINEFILTERBUFST1, 0, sizeof(LINEFILTERBUFST1));
00001a  6120              STR      r0,[r4,#0x10]  ; ptAppInfo
00001c  4806              LDR      r0,|L12.56|
00001e  2100              MOVS     r1,#0
000020  6001              STR      r1,[r0,#0]  ; DspA_LF_ArrayS32_1
000022  6041              STR      r1,[r0,#4]  ; DspA_LF_ArrayS32_1
000024  6081              STR      r1,[r0,#8]  ; DspA_LF_ArrayS32_1
000026  60c1              STR      r1,[r0,#0xc]  ; DspA_LF_ArrayS32_1
000028  6101              STR      r1,[r0,#0x10]  ; DspA_LF_ArrayS32_1
00002a  6141              STR      r1,[r0,#0x14]  ; DspA_LF_ArrayS32_1
00002c  6181              STR      r1,[r0,#0x18]  ; DspA_LF_ArrayS32_1
00002e  61c1              STR      r1,[r0,#0x1c]  ; DspA_LF_ArrayS32_1
;;;72     	
;;;73     //#if ((USED_PEN_PROTOCOL == PEN_PROTOCOL_MS_PEN) || (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN))
;;;74     //	BaseAddr_Finger = (uint32_t)&BASELINEIMAGE[0][0];
;;;75     //#else 
;;;76     //	BaseAddr_Finger = (uint32_t)&BASELINEIMAGE_2[0][0];
;;;77     //#endif 
;;;78     }
000030  bd10              POP      {r4,pc}
;;;79     
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      ||.data||
                  |L12.56|
                          DCD      DspA_LF_ArrayS32_1

                          AREA ||i.algorithm_init_param_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_init_param_dspA PROC
;;;79     
;;;80     void algorithm_init_param_dspA(void)
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82     	thisModeConf     = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4c03              LDR      r4,|L13.20|
;;;83     	ptModuleModeConf = module_GetModeConfig();
000008  60e0              STR      r0,[r4,#0xc]  ; thisModeConf
00000a  f7fffffe          BL       module_GetModeConfig
00000e  60a0              STR      r0,[r4,#8]  ; ptModuleModeConf
;;;84     //#if (USED_DSPA_FUNC_FOR_PEN_LOCAL || USED_DSPA_FUNC_FOR_PEN_SEARCH || USED_DSPA_FUNC_FOR_FINGER)
;;;85     //#if (USED_PEN_PROTOCOL != PEN_PROTOCOL_WGP_UHD_PEN)
;;;86     //	if(gAlgoRawDataType == ACTIVEPEN_TYPE_LOCAL_MS)
;;;87     //	{
;;;88     //		BaseAddr_Finger = (uint32_t)&BASELINEIMAGE[0][0];
;;;89     //	}
;;;90     //	else
;;;91     //	{
;;;92     //		BaseAddr_Finger = (uint32_t)&BASELINEIMAGE_2[0][0];
;;;93     //	}
;;;94     //#endif
;;;95     //#endif
;;;96     }
000010  bd10              POP      {r4,pc}
;;;97     
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      ||.data||

                          AREA ||i.algorithm_local_mode_calculate_delta_loop_dspA||, CODE, READONLY, ALIGN=2

                  algorithm_local_mode_calculate_delta_loop_dspA PROC
;;;656    
;;;657    void algorithm_local_mode_calculate_delta_loop_dspA(uint8_t cs, uint8_t ce, uint8_t mode, bool_t MuxSum)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;658    {
000004  4688              MOV      r8,r1
000006  b095              SUB      sp,sp,#0x54
;;;659    	uint32_t Dst_Addr;
;;;660    	bool_t get_val_1st=0,get_val_2nd=0,LocalCol=1;
000008  2100              MOVS     r1,#0
00000a  2601              MOVS     r6,#1
;;;661    	
;;;662    	if(mode == LOCAL_SEARCH_MODE)
;;;663    	{
;;;664    		Dst_Addr = (uint32_t)&LOCALDELTAIMAGE[0][0];
00000c  f8dfb1e0          LDR      r11,|L14.496|
000010  461d              MOV      r5,r3                 ;658
000012  4617              MOV      r7,r2                 ;658
000014  4681              MOV      r9,r0                 ;658
000016  9114              STR      r1,[sp,#0x50]         ;662
000018  2a04              CMP      r2,#4                 ;662
00001a  bf04              ITT      EQ                    ;662
00001c  46da              MOVEQ    r10,r11               ;662
;;;665    		LocalCol = 0;
00001e  2600              MOVEQ    r6,#0
000020  d006              BEQ      |L14.48|
;;;666    	}
;;;667    	else if(mode == LOCAL_HOVER_MODE)
000022  2f03              CMP      r7,#3
;;;668    	{
;;;669    		Dst_Addr = (uint32_t)&DSPATMPDELTA[0][0];
000024  bf08              IT       EQ
000026  f8dfa1cc          LDREQ    r10,|L14.500|
00002a  d001              BEQ      |L14.48|
;;;670    	}
;;;671    	else if(mode == LOCAL_MODE)	
00002c  2f01              CMP      r7,#1
00002e  d07b              BEQ      |L14.296|
                  |L14.48|
;;;672    	{
;;;673    		get_val_1st = !MuxSum;
;;;674    		get_val_2nd = 1;
;;;675    #if (PAD_ > 0)	
;;;676    		Dst_Addr = (uint32_t)&DSPATMPDELTA[0][0];		
;;;677    #else
;;;678    		Dst_Addr = (uint32_t)&LOCALDELTAIMAGE[0][0];
;;;679    #endif	
;;;680    	}	
;;;681    
;;;682    	DSPA_CalculateDelta_Process(
000030  2400              MOVS     r4,#0
000032  2005              MOVS     r0,#5
000034  e9cd0410          STRD     r0,r4,[sp,#0x40]
000038  f8dfc1bc          LDR      r12,|L14.504|
00003c  9412              STR      r4,[sp,#0x48]
00003e  9413              STR      r4,[sp,#0x4c]
000040  f8dc000c          LDR      r0,[r12,#0xc]  ; thisModeConf
000044  2201              MOVS     r2,#1
000046  4b6d              LDR      r3,|L14.508|
000048  f8b00072          LDRH     r0,[r0,#0x72]
00004c  9208              STR      r2,[sp,#0x20]
00004e  e9cd090c          STRD     r0,r9,[sp,#0x30]
000052  930b              STR      r3,[sp,#0x2c]
000054  e9cd2009          STRD     r2,r0,[sp,#0x24]
000058  e9cd860e          STRD     r8,r6,[sp,#0x38]
00005c  f8dc0008          LDR      r0,[r12,#8]  ; ptModuleModeConf
000060  4653              MOV      r3,r10
000062  7880              LDRB     r0,[r0,#2]
000064  e9cd1204          STRD     r1,r2,[sp,#0x10]
000068  e9cd2006          STRD     r2,r0,[sp,#0x18]
00006c  9200              STR      r2,[sp,#0]
00006e  e9cd2401          STRD     r2,r4,[sp,#4]
000072  9403              STR      r4,[sp,#0xc]
000074  e9dc1006          LDRD     r1,r0,[r12,#0x18]
000078  2200              MOVS     r2,#0
00007a  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;683    		BaseAddr, RawAddr, 0, Dst_Addr,																		//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;684    		WITHCOEF,SUBTRACTION, 0,0,get_val_1st, 1,1,(ptModuleModeConf->ucLocalOvrShift), HALFWORD,HALFWORD,  //CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;685    		(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;686    		cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                  		//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;687    			
;;;688    	if(MuxSum)
00007e  2d00              CMP      r5,#0
000080  d045              BEQ      |L14.270|
;;;689    	{
;;;690    		DSPA_CalculateDelta_Process(
000082  2005              MOVS     r0,#5
000084  9010              STR      r0,[sp,#0x40]
000086  e9cd5411          STRD     r5,r4,[sp,#0x44]
00008a  485b              LDR      r0,|L14.504|
00008c  9413              STR      r4,[sp,#0x4c]
00008e  2501              MOVS     r5,#1
000090  68c0              LDR      r0,[r0,#0xc]  ; thisModeConf
000092  495a              LDR      r1,|L14.508|
000094  4b5a              LDR      r3,|L14.512|
000096  f8b00072          LDRH     r0,[r0,#0x72]
00009a  9508              STR      r5,[sp,#0x20]
00009c  e9cd090c          STRD     r0,r9,[sp,#0x30]
0000a0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000a4  9509              STR      r5,[sp,#0x24]
0000a6  4854              LDR      r0,|L14.504|
0000a8  e9cd860e          STRD     r8,r6,[sp,#0x38]
0000ac  6880              LDR      r0,[r0,#8]  ; ptModuleModeConf
0000ae  2200              MOVS     r2,#0
0000b0  7880              LDRB     r0,[r0,#2]
0000b2  e9cd4504          STRD     r4,r5,[sp,#0x10]
0000b6  e9cd5006          STRD     r5,r0,[sp,#0x18]
0000ba  9500              STR      r5,[sp,#0]
0000bc  e9cd5401          STRD     r5,r4,[sp,#4]
0000c0  484d              LDR      r0,|L14.504|
0000c2  9403              STR      r4,[sp,#0xc]
0000c4  6a41              LDR      r1,[r0,#0x24]  ; RawAddr_MuxSum
0000c6  6a00              LDR      r0,[r0,#0x20]  ; BaseAddr_MuxSum
0000c8  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;691    			BaseAddr_MuxSum, RawAddr_MuxSum, 0, (uint32_t)&DSPATMPDELTA[PEN_COORD_ROW_MAX][0],					//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;692    			WITHCOEF,SUBTRACTION, 0,0,0, 1,1,(ptModuleModeConf->ucLocalOvrShift), HALFWORD,HALFWORD,         	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;693    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;694    			cs,ce, LocalCol, PEN_COORD_ROW_MAX,MuxSum, 0, 0);                                                   //cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;695    		
;;;696    		DSPA_CalculateDelta_Process(
0000cc  2005              MOVS     r0,#5
0000ce  e9cd0410          STRD     r0,r4,[sp,#0x40]
0000d2  4849              LDR      r0,|L14.504|
0000d4  9412              STR      r4,[sp,#0x48]
0000d6  9413              STR      r4,[sp,#0x4c]
0000d8  68c0              LDR      r0,[r0,#0xc]  ; thisModeConf
0000da  4948              LDR      r1,|L14.508|
0000dc  4653              MOV      r3,r10
0000de  f8b00072          LDRH     r0,[r0,#0x72]
0000e2  9508              STR      r5,[sp,#0x20]
0000e4  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000e8  e9cd090c          STRD     r0,r9,[sp,#0x30]
0000ec  9509              STR      r5,[sp,#0x24]
0000ee  e9cd860e          STRD     r8,r6,[sp,#0x38]
0000f2  9814              LDR      r0,[sp,#0x50]
0000f4  e9cd0404          STRD     r0,r4,[sp,#0x10]
0000f8  9406              STR      r4,[sp,#0x18]
0000fa  9407              STR      r4,[sp,#0x1c]
0000fc  9400              STR      r4,[sp,#0]
0000fe  9401              STR      r4,[sp,#4]
000100  9402              STR      r4,[sp,#8]
000102  2200              MOVS     r2,#0
000104  493e              LDR      r1,|L14.512|
000106  4618              MOV      r0,r3
000108  9403              STR      r4,[sp,#0xc]
00010a  f7fffffe          BL       DSPA_CalculateDelta_Process
                  |L14.270|
;;;697    			Dst_Addr, (uint32_t)&DSPATMPDELTA[PEN_COORD_ROW_MAX][0], 0, Dst_Addr, 								//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;698    			0,ADDER, 0,0,get_val_2nd, 0,0,0, HALFWORD,HALFWORD,                                             	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;699    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,     //PosTH,NegTH,GroupTH 
;;;700    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                       //cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;701    	}
;;;702    
;;;703    	if(mode == LOCAL_SEARCH_MODE)
00010e  2f04              CMP      r7,#4
000110  d045              BEQ      |L14.414|
;;;704    	{
;;;705    		//Pen_Detection_Acc_Process
;;;706    		DSPA_CalculateDelta_Process(
;;;707    			(uint32_t)(&g_pFullHoverImage[currentRowStart*COL_MAX]), (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)(&g_pFullHoverImage[currentRowStart*COL_MAX]),	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;708    			0,ADDER, 0,0,1, 0,0,0, HALFWORD,HALFWORD,                                                                                                           //CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;709    			(int32_t)thisModeConf->Label.usLocalSeedBase,thisModeConf->BaseLine.sAccumNegSumThd,(int32_t)thisModeConf->Label.usLocalSeedBase,                                              		//PosTH,NegTH,GroupTH 
;;;710    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                                                                    	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;711    	}	
;;;712    #if (PAD_ > 0)
;;;713    	else
;;;714    		algorithm_delta_padding(mode);
;;;715    #endif
;;;716    	
;;;717    	if(mode == LOCAL_HOVER_MODE)
000112  2f03              CMP      r7,#3
;;;718    	{
;;;719    		uint16_t hover_weight = 0;
;;;720    		if(thisModeConf->Label.ucHoverOutCheckFrm < 6)
;;;721    			hover_weight = thisModeConf->Label.ucHoverOutCheckFrm/2;
;;;722    		else if(thisModeConf->Label.ucHoverOutCheckFrm < 8)
;;;723    			hover_weight = 2;
;;;724    		else if(thisModeConf->Label.ucHoverOutCheckFrm < 16)
;;;725    			hover_weight = 3;
;;;726    		else 
;;;727    			hover_weight = 4;
;;;728    
;;;729    #if (PAD_ > 0)		
;;;730    		DSPA_CalculateDelta_Process(
;;;731    			(uint32_t)&DSPATMPDELTA_PAD[0][0], (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)&LOCALDELTAIMAGE[0][0], 	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;732    			1,ADDER, 0,0,1, 1<<hover_weight,(1<<hover_weight)-1,(uint8_t)hover_weight, HALFWORD,HALFWORD,         		//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;733    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,       		//PosTH,NegTH,GroupTH 
;;;734    			cs+PAD_,ce+PAD_, LocalCol, PEN_COORD_ROW_MAX, 0, 1, 0);                                                  	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;735    #else
;;;736    		DSPA_CalculateDelta_Process(
;;;737    			(uint32_t)&DSPATMPDELTA[0][0], (uint32_t)&LOCALDELTAIMAGE[0][0], 0, (uint32_t)&LOCALDELTAIMAGE[0][0], 		//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;738    			1,ADDER, 0,0,1, 1<<hover_weight,(1<<hover_weight)-1,(uint8_t)hover_weight, HALFWORD,HALFWORD,         	 	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;739    			(int32_t)thisModeConf->Label.usLocalSeedBase,-500,(int32_t)thisModeConf->Label.usLocalSeedBase,       		//PosTH,NegTH,GroupTH 
;;;740    			cs,ce, LocalCol, PEN_COORD_ROW_MAX, 0, 0, 0);                                                             	//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;741    #endif
;;;742    	}
;;;743    }
000114  bf1c              ITT      NE
000116  b015              ADDNE    sp,sp,#0x54
000118  e8bd8ff0          POPNE    {r4-r11,pc}
00011c  4836              LDR      r0,|L14.504|
00011e  68c1              LDR      r1,[r0,#0xc]          ;720  ; thisModeConf
000120  f8910086          LDRB     r0,[r1,#0x86]         ;720
000124  2806              CMP      r0,#6                 ;720
000126  e000              B        |L14.298|
                  |L14.296|
000128  e031              B        |L14.398|
                  |L14.298|
00012a  bf38              IT       CC                    ;721
00012c  0840              LSRCC    r0,r0,#1              ;721
00012e  d307              BCC      |L14.320|
000130  2808              CMP      r0,#8                 ;722
000132  bf38              IT       CC                    ;723
000134  2002              MOVCC    r0,#2                 ;723
000136  d303              BCC      |L14.320|
000138  2810              CMP      r0,#0x10              ;724
00013a  bf34              ITE      CC                    ;725
00013c  2003              MOVCC    r0,#3                 ;725
00013e  2004              MOVCS    r0,#4                 ;727
                  |L14.320|
000140  2205              MOVS     r2,#5                 ;736
000142  e9cd2410          STRD     r2,r4,[sp,#0x40]      ;736
000146  9412              STR      r4,[sp,#0x48]         ;736
000148  9413              STR      r4,[sp,#0x4c]         ;736
00014a  f8b12072          LDRH     r2,[r1,#0x72]         ;736
00014e  2101              MOVS     r1,#1                 ;736
000150  9108              STR      r1,[sp,#0x20]         ;736
000152  e9cd290c          STRD     r2,r9,[sp,#0x30]      ;736
000156  4b29              LDR      r3,|L14.508|
000158  930b              STR      r3,[sp,#0x2c]         ;736
00015a  e9cd1209          STRD     r1,r2,[sp,#0x24]      ;736
00015e  fa01f200          LSL      r2,r1,r0              ;736
000162  1e53              SUBS     r3,r2,#1              ;736
000164  b292              UXTH     r2,r2                 ;736
000166  e9cd1204          STRD     r1,r2,[sp,#0x10]      ;736
00016a  e9cd1400          STRD     r1,r4,[sp,#0]         ;736
00016e  b29b              UXTH     r3,r3                 ;736
000170  9402              STR      r4,[sp,#8]            ;736
000172  e9cd3006          STRD     r3,r0,[sp,#0x18]      ;736
000176  e9cd860e          STRD     r8,r6,[sp,#0x38]      ;736
00017a  465b              MOV      r3,r11                ;736
00017c  9403              STR      r4,[sp,#0xc]          ;736
00017e  2200              MOVS     r2,#0                 ;736
000180  4619              MOV      r1,r3                 ;736
000182  481c              LDR      r0,|L14.500|
                  |L14.388|
000184  f7fffffe          BL       DSPA_CalculateDelta_Process
000188  b015              ADD      sp,sp,#0x54
00018a  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.398|
00018e  2d00              CMP      r5,#0                 ;673
000190  bf14              ITE      NE                    ;673
000192  2100              MOVNE    r1,#0                 ;673
000194  2101              MOVEQ    r1,#1                 ;673
000196  2001              MOVS     r0,#1                 ;674
000198  46da              MOV      r10,r11               ;674
00019a  9014              STR      r0,[sp,#0x50]         ;673
00019c  e748              B        |L14.48|
                  |L14.414|
00019e  2005              MOVS     r0,#5                 ;706
0001a0  e9cd0410          STRD     r0,r4,[sp,#0x40]      ;706
0001a4  4a14              LDR      r2,|L14.504|
0001a6  9412              STR      r4,[sp,#0x48]         ;706
0001a8  9413              STR      r4,[sp,#0x4c]         ;706
0001aa  68d1              LDR      r1,[r2,#0xc]          ;706  ; thisModeConf
0001ac  f8b10072          LDRH     r0,[r1,#0x72]         ;706
0001b0  e9cd090c          STRD     r0,r9,[sp,#0x30]      ;706
0001b4  e9cd860e          STRD     r8,r6,[sp,#0x38]      ;706
0001b8  f9b1300b          LDRSH    r3,[r1,#0xb]          ;706
0001bc  2101              MOVS     r1,#1                 ;706
0001be  930b              STR      r3,[sp,#0x2c]         ;706
0001c0  9108              STR      r1,[sp,#0x20]         ;706
0001c2  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;706
0001c6  e9cd1404          STRD     r1,r4,[sp,#0x10]      ;706
0001ca  9406              STR      r4,[sp,#0x18]         ;706
0001cc  9407              STR      r4,[sp,#0x1c]         ;706
0001ce  480d              LDR      r0,|L14.516|
0001d0  9400              STR      r4,[sp,#0]            ;706
0001d2  9401              STR      r4,[sp,#4]            ;706
0001d4  9402              STR      r4,[sp,#8]            ;706
0001d6  9403              STR      r4,[sp,#0xc]          ;706
0001d8  8800              LDRH     r0,[r0,#0]            ;706  ; currentRowStart
0001da  6ad1              LDR      r1,[r2,#0x2c]         ;706  ; g_pFullHoverImage
0001dc  ebc000c0          RSB      r0,r0,r0,LSL #3       ;706
0001e0  eb000040          ADD      r0,r0,r0,LSL #1       ;706
0001e4  eb0103c0          ADD      r3,r1,r0,LSL #3       ;706
0001e8  4618              MOV      r0,r3                 ;706
0001ea  2200              MOVS     r2,#0                 ;706
0001ec  4659              MOV      r1,r11                ;706
0001ee  e7c9              B        |L14.388|
;;;744    
                          ENDP

                  |L14.496|
                          DCD      LocalSharedBuff+0x4c20
                  |L14.500|
                          DCD      DspA_TmpDelta
                  |L14.504|
                          DCD      ||.data||
                  |L14.508|
                          DCD      0xfffffe0c
                  |L14.512|
                          DCD      DspA_TmpDelta+0x348
                  |L14.516|
                          DCD      currentRowStart

                          AREA ||i.alogorithm_dspA_get_addr||, CODE, READONLY, ALIGN=2

                  alogorithm_dspA_get_addr PROC
;;;599    
;;;600    void alogorithm_dspA_get_addr(uint8_t mode)
000000  e92d03f0          PUSH     {r4-r9}
;;;601    {
;;;602    #if USED_NOISE_HOPPING_FREQ
;;;603    	uint16_t * pBaseImage;
;;;604    
;;;605    	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
000004  4936              LDR      r1,|L15.224|
000006  690a              LDR      r2,[r1,#0x10]  ; ptAppInfo
000008  7cd2              LDRB     r2,[r2,#0x13]
00000a  2a01              CMP      r2,#1
;;;606    	{
;;;607    		pBaseImage = g_pLocalBaseImage;
00000c  bf0c              ITE      EQ
00000e  6a8b              LDREQ    r3,[r1,#0x28]  ; g_pLocalBaseImage
;;;608    	}
;;;609    	else
;;;610    	{
;;;611    		pBaseImage = g_pLocalHop1BaseImage;
000010  6b0b              LDRNE    r3,[r1,#0x30]  ; g_pLocalHop1BaseImage
;;;612    	}
;;;613    #else /* USED_NOISE_HOPPING_FREQ */
;;;614    	uint16_t * pBaseImage = g_pLocalBaseImage;
;;;615    #endif /* USED_NOISE_HOPPING_FREQ */
;;;616    
;;;617    	raw_idx = base_idx = 0;
000012  f04f0c00          MOV      r12,#0
000016  f881c001          STRB     r12,[r1,#1]
00001a  f881c000          STRB     r12,[r1,#0]
;;;618    	if(thisModeConf->BaseLine.ucPP_MUX_Select)
00001e  68ca              LDR      r2,[r1,#0xc]  ; thisModeConf
;;;619    	{
;;;620    		raw_idx = PEN_COORD_ROW_MAX;
000020  2605              MOVS     r6,#5
;;;621    		if(thisModeConf->BaseLine.bPen_2BASE)base_idx = ROW_MAX;
000022  2430              MOVS     r4,#0x30
000024  f8928044          LDRB     r8,[r2,#0x44]         ;618
000028  f1b80f00          CMP      r8,#0                 ;618
00002c  d005              BEQ      |L15.58|
00002e  700e              STRB     r6,[r1,#0]            ;620
000030  f8925040          LDRB     r5,[r2,#0x40]
000034  2d00              CMP      r5,#0
000036  bf18              IT       NE
000038  704c              STRBNE   r4,[r1,#1]
                  |L15.58|
;;;622    	}
;;;623    
;;;624    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;625    	RawAddr = (uint32_t)&LOCALDATARAW_3[0][0]+((raw_idx*COL_MAX)<<1);	
;;;626    #else
;;;627    	RawAddr = (uint32_t)&LOCALRAWIMAGE[0][0]+((raw_idx*COL_MAX)<<1);
00003a  780d              LDRB     r5,[r1,#0]  ; raw_idx
00003c  4f29              LDR      r7,|L15.228|
00003e  ebc505c5          RSB      r5,r5,r5,LSL #3
000042  eb050545          ADD      r5,r5,r5,LSL #1
000046  eb0705c5          ADD      r5,r7,r5,LSL #3
;;;628    #endif
;;;629    	BaseAddr = (uint32_t)(&pBaseImage[0])+(((currentRowStart+base_idx)*COL_MAX)<<1);
00004a  618d              STR      r5,[r1,#0x18]  ; RawAddr
00004c  4d26              LDR      r5,|L15.232|
00004e  f8919001          LDRB     r9,[r1,#1]  ; base_idx
000052  882d              LDRH     r5,[r5,#0]  ; currentRowStart
000054  44a9              ADD      r9,r9,r5
000056  ebc909c9          RSB      r9,r9,r9,LSL #3
00005a  eb090949          ADD      r9,r9,r9,LSL #1
00005e  eb0309c9          ADD      r9,r3,r9,LSL #3
;;;630    	
;;;631    	if( (thisModeConf->BaseLine.b2MUX_SUM_LocalMode == YES && mode!=LOCAL_SEARCH_MODE) || (thisModeConf->BaseLine.b2MUX_SUM_LocalSearchMode == YES && mode==LOCAL_SEARCH_MODE) )
000062  f8c1901c          STR      r9,[r1,#0x1c]  ; BaseAddr
000066  f892903f          LDRB     r9,[r2,#0x3f]
00006a  f1b90f01          CMP      r9,#1
00006e  d011              BEQ      |L15.148|
000070  f892903e          LDRB     r9,[r2,#0x3e]
000074  f1b90f01          CMP      r9,#1
000078  bf0e              ITEE     EQ
00007a  2804              CMPEQ    r0,#4
;;;632    	{
;;;633    		raw_idx_MuxSum = base_idx_MuxSum = 0;
;;;634    		if(thisModeConf->BaseLine.ucPP_MUX_Select == 0)
;;;635    		{
;;;636    			raw_idx_MuxSum = PEN_COORD_ROW_MAX;
;;;637    			if(thisModeConf->BaseLine.bPen_2BASE)base_idx_MuxSum = ROW_MAX;
;;;638    		}
;;;639    #if (USED_PEN_PROTOCOL == PEN_PROTOCOL_WGP_UHD_PEN)
;;;640    		RawAddr_MuxSum = (uint32_t)&LOCALDATARAW_3[0][0]+((raw_idx_MuxSum*COL_MAX)<<1);	
;;;641    #else		
;;;642    		RawAddr_MuxSum = (uint32_t)&LOCALRAWIMAGE[0][0]+((raw_idx_MuxSum*COL_MAX)<<1);
;;;643    #endif
;;;644    		BaseAddr_MuxSum = (uint32_t)(&pBaseImage[0])+(((currentRowStart+base_idx_MuxSum)*COL_MAX)<<1);
;;;645    	}
;;;646    }
00007c  e8bd03f0          POPNE    {r4-r9}
000080  4770              BXNE     lr
000082  bf00              NOP                            ;633
                  |L15.132|
000084  f881c003          STRB     r12,[r1,#3]           ;633
000088  f881c002          STRB     r12,[r1,#2]           ;633
00008c  f1b80f00          CMP      r8,#0                 ;634
000090  d111              BNE      |L15.182|
000092  e00a              B        |L15.170|
                  |L15.148|
000094  2804              CMP      r0,#4                 ;631
000096  d1f5              BNE      |L15.132|
000098  f892903e          LDRB     r9,[r2,#0x3e]         ;631
00009c  f1b90f01          CMP      r9,#1                 ;631
0000a0  bf1c              ITT      NE
0000a2  e8bd03f0          POPNE    {r4-r9}
0000a6  4770              BXNE     lr
0000a8  e7ec              B        |L15.132|
                  |L15.170|
0000aa  708e              STRB     r6,[r1,#2]            ;636
0000ac  f8920040          LDRB     r0,[r2,#0x40]         ;637
0000b0  2800              CMP      r0,#0                 ;637
0000b2  bf18              IT       NE                    ;637
0000b4  70cc              STRBNE   r4,[r1,#3]            ;637
                  |L15.182|
0000b6  7888              LDRB     r0,[r1,#2]            ;642  ; raw_idx_MuxSum
0000b8  ebc000c0          RSB      r0,r0,r0,LSL #3       ;642
0000bc  eb000040          ADD      r0,r0,r0,LSL #1       ;642
0000c0  eb0700c0          ADD      r0,r7,r0,LSL #3       ;642
0000c4  6248              STR      r0,[r1,#0x24]         ;644  ; RawAddr_MuxSum
0000c6  78c8              LDRB     r0,[r1,#3]            ;644  ; base_idx_MuxSum
0000c8  4428              ADD      r0,r0,r5              ;644
0000ca  ebc000c0          RSB      r0,r0,r0,LSL #3       ;644
0000ce  eb000040          ADD      r0,r0,r0,LSL #1       ;644
0000d2  eb0300c0          ADD      r0,r3,r0,LSL #3       ;644
0000d6  6208              STR      r0,[r1,#0x20]         ;644  ; BaseAddr_MuxSum
0000d8  e8bd03f0          POP      {r4-r9}
0000dc  4770              BX       lr
;;;647    
                          ENDP

0000de  0000              DCW      0x0000
                  |L15.224|
                          DCD      ||.data||
                  |L15.228|
                          DCD      LocalSharedBuff
                  |L15.232|
                          DCD      currentRowStart

                          AREA ||i.alogorithm_linefilter_dspA||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_dspA PROC
;;;531    extern int16_t sLFOffsetRow[ROW_MAX];
;;;532    void alogorithm_linefilter_dspA(uint32_t RAW_ADDR,uint32_t BASE_ADDR, uint32_t TmpDeltaAddr, uint32_t LF_BUF2_ADDR , uint32_t LF_BUF3_ADDR, uint8_t row_max, int32_t PosTHD,int32_t NegTHD, bool_t mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;533    {	
000004  b095              SUB      sp,sp,#0x54
;;;534    	DSPA_CalculateDelta_Process(
000006  2400              MOVS     r4,#0
000008  9823              LDR      r0,[sp,#0x8c]
00000a  f04f0803          MOV      r8,#3
00000e  e9cd4812          STRD     r4,r8,[sp,#0x48]
000012  f8ddb094          LDR      r11,[sp,#0x94]
000016  e9cd0410          STRD     r0,r4,[sp,#0x40]
00001a  f44f76fa          MOV      r6,#0x1f4
00001e  f04f0954          MOV      r9,#0x54
000022  e9cd640c          STRD     r6,r4,[sp,#0x30]
000026  e9cd940e          STRD     r9,r4,[sp,#0x38]
00002a  f1c60a00          RSB      r10,r6,#0
00002e  2501              MOVS     r5,#1
000030  f8cda02c          STR      r10,[sp,#0x2c]
000034  9508              STR      r5,[sp,#0x20]
000036  9404              STR      r4,[sp,#0x10]
000038  9405              STR      r4,[sp,#0x14]
00003a  9406              STR      r4,[sp,#0x18]
00003c  9407              STR      r4,[sp,#0x1c]
00003e  e9cd5609          STRD     r5,r6,[sp,#0x24]
000042  e9cd4500          STRD     r4,r5,[sp,#0]
000046  9403              STR      r4,[sp,#0xc]
000048  9402              STR      r4,[sp,#8]
00004a  2200              MOVS     r2,#0
00004c  9b17              LDR      r3,[sp,#0x5c]
00004e  9815              LDR      r0,[sp,#0x54]
000050  f7fffffe          BL       DSPA_CalculateDelta_Process
;;;535    		RAW_ADDR, BASE_ADDR, 0, TmpDeltaAddr,				//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  	
;;;536    		0, SUBTRACTION, 0,0,0, 0,0,0, HALFWORD,HALFWORD,	//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;537    		500,-500,500,                      					//PosTH,NegTH,GroupTH 
;;;538    		0,COL_MAX, 0, row_max, 0, 0, 3);      				//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode	
;;;539    	
;;;540    	int i,j,row_size;
;;;541    	for(i=0; i<row_max; i+=8)
000054  9823              LDR      r0,[sp,#0x8c]
000056  2700              MOVS     r7,#0
000058  2800              CMP      r0,#0
00005a  bfc7              ITTEE    GT
00005c  3808              SUBGT    r0,r0,#8
;;;542    	{
;;;543    		uint32_t AddrOffset = (i*COL_MAX)<<1;
;;;544    		if(i > row_max-8)row_size = row_max-i;
00005e  9014              STRGT    r0,[sp,#0x50]
;;;545    		else row_size = 8;
;;;546    		
;;;547    		DSPA_LineFilter_2nd_Stage(TmpDeltaAddr,LF_BUF2_ADDR,LF_BUF3_ADDR,((i*COL_MAX)<<1),row_size,PosTHD,NegTHD);
;;;548    
;;;549    		DSPA_CalculateDelta_Process(
;;;550    			RAW_ADDR+AddrOffset, LF_BUF3_ADDR, 0, RAW_ADDR+AddrOffset, 	//SRC1_ADDR, SRC2_ADDR, SRC3_ADDR, DST_DDR  
;;;551    			0, SUBTRACTION, 1,0,0, 0,0,0, WORD,HALFWORD,          		//CAL1_WithCoef,CAL2_MODE, SRC2_DIV,DST_DIV,GetValueEnable, Const_a,Const_b,Const_n, SRC2_DataType,DST_DataType
;;;552    			500,-500,500,                      							//PosTH,NegTH,GroupTH 
;;;553    			0,COL_MAX, 0, row_size, 0, 0, 3);      						//cs,ce, LocalColumnEn, Row_Size, mux_sum, PadMode, OpMode
;;;554    		
;;;555    		if(mode == 0)
;;;556    			for(j=0;j<row_size;j++)
;;;557    				sLFOffsetRow[i+j] = LINEFILTERBUFST3_Finger[j];
;;;558    	}
;;;559    }
000060  b019              ADDLE    sp,sp,#0x64
000062  e8bd8ff0          POPLE    {r4-r11,pc}
                  |L16.102|
000066  20a8              MOVS     r0,#0xa8              ;543
000068  9914              LDR      r1,[sp,#0x50]         ;544
00006a  fb07fa00          MUL      r10,r7,r0             ;543
00006e  428f              CMP      r7,r1                 ;544
000070  bfc6              ITTE     GT                    ;544
000072  9923              LDRGT    r1,[sp,#0x8c]         ;544
000074  eba10907          SUBGT    r9,r1,r7              ;544
000078  f04f0908          MOVLE    r9,#8                 ;545
00007c  f0090cff          AND      r12,r9,#0xff          ;547
000080  e9dd2117          LDRD     r2,r1,[sp,#0x5c]      ;547
000084  2600              MOVS     r6,#0                 ;547
000086  9d22              LDR      r5,[sp,#0x88]         ;547
000088  9b24              LDR      r3,[sp,#0x90]         ;547
00008a  600e              STR      r6,[r1,#0]            ;547
00008c  604e              STR      r6,[r1,#4]            ;547
00008e  608e              STR      r6,[r1,#8]            ;547
000090  60ce              STR      r6,[r1,#0xc]          ;547
000092  610e              STR      r6,[r1,#0x10]         ;547
000094  614e              STR      r6,[r1,#0x14]         ;547
000096  618e              STR      r6,[r1,#0x18]         ;547
000098  61ce              STR      r6,[r1,#0x1c]         ;547
00009a  602e              STR      r6,[r5,#0]            ;547
00009c  606e              STR      r6,[r5,#4]            ;547
00009e  60ae              STR      r6,[r5,#8]            ;547
0000a0  60ee              STR      r6,[r5,#0xc]          ;547
0000a2  612e              STR      r6,[r5,#0x10]         ;547
0000a4  616e              STR      r6,[r5,#0x14]         ;547
0000a6  61ae              STR      r6,[r5,#0x18]         ;547
0000a8  61ee              STR      r6,[r5,#0x1c]         ;547
0000aa  f04f0803          MOV      r8,#3                 ;547
0000ae  e9cdc610          STRD     r12,r6,[sp,#0x40]     ;547
0000b2  e9cd6812          STRD     r6,r8,[sp,#0x48]      ;547
0000b6  f04f0c54          MOV      r12,#0x54             ;547
0000ba  e9cdc60e          STRD     r12,r6,[sp,#0x38]     ;547
0000be  f44f78fa          MOV      r8,#0x1f4             ;547
0000c2  e9cd860c          STRD     r8,r6,[sp,#0x30]      ;547
0000c6  9605              STR      r6,[sp,#0x14]         ;547
0000c8  9606              STR      r6,[sp,#0x18]         ;547
0000ca  e9cd3b0a          STRD     r3,r11,[sp,#0x28]     ;547
0000ce  f04f0c02          MOV      r12,#2                ;547
0000d2  9604              STR      r6,[sp,#0x10]         ;547
0000d4  f8cdc020          STR      r12,[sp,#0x20]        ;547
0000d8  f04f0801          MOV      r8,#1                 ;547
0000dc  f8cdc024          STR      r12,[sp,#0x24]        ;547
0000e0  9607              STR      r6,[sp,#0x1c]         ;547
0000e2  2306              MOVS     r3,#6                 ;547
0000e4  9600              STR      r6,[sp,#0]            ;547
0000e6  e9cd3801          STRD     r3,r8,[sp,#4]         ;547
0000ea  eb02000a          ADD      r0,r2,r10             ;547
0000ee  460c              MOV      r4,r1                 ;547
0000f0  460b              MOV      r3,r1                 ;547
0000f2  4a4a              LDR      r2,|L16.540|
0000f4  f8cd800c          STR      r8,[sp,#0xc]          ;547
0000f8  f7fffffe          BL       DSPA_CalculateDelta_Process
0000fc  4848              LDR      r0,|L16.544|
0000fe  6822              LDR      r2,[r4,#0]            ;547
000100  6d01              LDR      r1,[r0,#0x50]         ;547
000102  b209              SXTH     r1,r1                 ;547
000104  2900              CMP      r1,#0                 ;547
000106  bf18              IT       NE                    ;547
000108  fb92f1f1          SDIVNE   r1,r2,r1              ;547
00010c  6029              STR      r1,[r5,#0]            ;547
00010e  6862              LDR      r2,[r4,#4]            ;547
000110  6d01              LDR      r1,[r0,#0x50]         ;547
000112  1409              ASRS     r1,r1,#16             ;547
000114  bf18              IT       NE                    ;547
000116  fb92f1f1          SDIVNE   r1,r2,r1              ;547
00011a  6069              STR      r1,[r5,#4]            ;547
00011c  68a2              LDR      r2,[r4,#8]            ;547
00011e  6d41              LDR      r1,[r0,#0x54]         ;547
000120  b209              SXTH     r1,r1                 ;547
000122  2900              CMP      r1,#0                 ;547
000124  bf18              IT       NE                    ;547
000126  fb92f1f1          SDIVNE   r1,r2,r1              ;547
00012a  60a9              STR      r1,[r5,#8]            ;547
00012c  68e2              LDR      r2,[r4,#0xc]          ;547
00012e  6d41              LDR      r1,[r0,#0x54]         ;547
000130  1409              ASRS     r1,r1,#16             ;547
000132  bf18              IT       NE                    ;547
000134  fb92f1f1          SDIVNE   r1,r2,r1              ;547
000138  60e9              STR      r1,[r5,#0xc]          ;547
00013a  6922              LDR      r2,[r4,#0x10]         ;547
00013c  6d81              LDR      r1,[r0,#0x58]         ;547
00013e  b209              SXTH     r1,r1                 ;547
000140  2900              CMP      r1,#0                 ;547
000142  bf18              IT       NE                    ;547
000144  fb92f1f1          SDIVNE   r1,r2,r1              ;547
000148  6129              STR      r1,[r5,#0x10]         ;547
00014a  6962              LDR      r2,[r4,#0x14]         ;547
00014c  6d81              LDR      r1,[r0,#0x58]         ;547
00014e  1409              ASRS     r1,r1,#16             ;547
000150  bf18              IT       NE                    ;547
000152  fb92f1f1          SDIVNE   r1,r2,r1              ;547
000156  6169              STR      r1,[r5,#0x14]         ;547
000158  69a2              LDR      r2,[r4,#0x18]         ;547
00015a  6dc1              LDR      r1,[r0,#0x5c]         ;547
00015c  b209              SXTH     r1,r1                 ;547
00015e  2900              CMP      r1,#0                 ;547
000160  bf18              IT       NE                    ;547
000162  fb92f1f1          SDIVNE   r1,r2,r1              ;547
000166  61a9              STR      r1,[r5,#0x18]         ;547
000168  69e1              LDR      r1,[r4,#0x1c]         ;547
00016a  6dc0              LDR      r0,[r0,#0x5c]         ;547
00016c  1400              ASRS     r0,r0,#16             ;547
00016e  bf18              IT       NE                    ;547
000170  fb91f0f0          SDIVNE   r0,r1,r0              ;547
000174  61e8              STR      r0,[r5,#0x1c]         ;549
000176  f00901ff          AND      r1,r9,#0xff           ;549
00017a  2003              MOVS     r0,#3                 ;549
00017c  e9cd1610          STRD     r1,r6,[sp,#0x40]      ;549
000180  e9cd6012          STRD     r6,r0,[sp,#0x48]      ;549
000184  2154              MOVS     r1,#0x54              ;549
000186  e9cd160e          STRD     r1,r6,[sp,#0x38]      ;549
00018a  f44f70fa          MOV      r0,#0x1f4             ;549
00018e  e9cd060c          STRD     r0,r6,[sp,#0x30]      ;549
000192  4241              RSBS     r1,r0,#0              ;549
000194  9606              STR      r6,[sp,#0x18]         ;549
000196  2202              MOVS     r2,#2                 ;549
000198  9604              STR      r6,[sp,#0x10]         ;549
00019a  9605              STR      r6,[sp,#0x14]         ;549
00019c  910b              STR      r1,[sp,#0x2c]         ;549
00019e  e9cd6207          STRD     r6,r2,[sp,#0x1c]      ;549
0001a2  e9cd8009          STRD     r8,r0,[sp,#0x24]      ;549
0001a6  e9cd6800          STRD     r6,r8,[sp,#0]         ;549
0001aa  9815              LDR      r0,[sp,#0x54]         ;549
0001ac  e9cd8602          STRD     r8,r6,[sp,#8]         ;549
0001b0  4450              ADD      r0,r0,r10             ;549
0001b2  4603              MOV      r3,r0                 ;549
0001b4  2200              MOVS     r2,#0                 ;549
0001b6  9922              LDR      r1,[sp,#0x88]         ;549
0001b8  f7fffffe          BL       DSPA_CalculateDelta_Process
0001bc  9826              LDR      r0,[sp,#0x98]         ;555
0001be  bb28              CBNZ     r0,|L16.524|
0001c0  f1a90201          SUB      r2,r9,#1              ;556
0001c4  2a00              CMP      r2,#0                 ;556
0001c6  dd17              BLE      |L16.504|
0001c8  4917              LDR      r1,|L16.552|
0001ca  4816              LDR      r0,|L16.548|
0001cc  eb010147          ADD      r1,r1,r7,LSL #1       ;556
0001d0  1e89              SUBS     r1,r1,#2              ;556
0001d2  f0190f01          TST      r9,#1
0001d6  d103              BNE      |L16.480|
0001d8  f8303f04          LDRH     r3,[r0,#4]!           ;557
0001dc  f8213f02          STRH     r3,[r1,#2]!           ;557
                  |L16.480|
0001e0  6843              LDR      r3,[r0,#4]            ;556
0001e2  1052              ASRS     r2,r2,#1              ;556
0001e4  d008              BEQ      |L16.504|
0001e6  bf00              NOP      
                  |L16.488|
0001e8  f830cf08          LDRH     r12,[r0,#8]!
0001ec  804b              STRH     r3,[r1,#2]            ;557
0001ee  6843              LDR      r3,[r0,#4]            ;557
0001f0  f821cf04          STRH     r12,[r1,#4]!          ;557
0001f4  1e52              SUBS     r2,r2,#1              ;557
0001f6  d1f7              BNE      |L16.488|
                  |L16.504|
0001f8  f1b90001          SUBS     r0,r9,#1              ;557
0001fc  d406              BMI      |L16.524|
0001fe  490b              LDR      r1,|L16.556|
000200  183a              ADDS     r2,r7,r0              ;557
000202  f8311020          LDRH     r1,[r1,r0,LSL #2]     ;557
000206  4808              LDR      r0,|L16.552|
000208  f8201012          STRH     r1,[r0,r2,LSL #1]     ;557
                  |L16.524|
00020c  9823              LDR      r0,[sp,#0x8c]         ;558
00020e  3708              ADDS     r7,r7,#8              ;558
000210  4287              CMP      r7,r0                 ;558
000212  f6ffaf28          BLT      |L16.102|
000216  b019              ADD      sp,sp,#0x64
000218  e8bd8ff0          POP      {r4-r11,pc}
;;;560    
                          ENDP

                  |L16.540|
                          DCD      DspA_LF_ArrayS32_1
                  |L16.544|
                          DCD      0x40003000
                  |L16.548|
                          DCD      DspA_LF_ArrayS32_3_Finger-0x4
                  |L16.552|
                          DCD      sLFOffsetRow
                  |L16.556|
                          DCD      DspA_LF_ArrayS32_3_Finger

                          AREA ||i.alogorithm_local_linefilter_dspA||, CODE, READONLY, ALIGN=2

                  alogorithm_local_linefilter_dspA PROC
;;;647    
;;;648    void alogorithm_local_linefilter_dspA(bool_t MuxSum, uint8_t mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;649    {	
;;;650    	alogorithm_linefilter_dspA(RawAddr,BaseAddr,(uint32_t)&DSPATMPDELTA[0][0],(uint32_t)&LINEFILTERBUFST2[0],(uint32_t)&LINEFILTERBUFST3[0],PEN_COORD_ROW_MAX,
000004  4c1b              LDR      r4,|L17.116|
000006  4607              MOV      r7,r0                 ;649
000008  b086              SUB      sp,sp,#0x18           ;649
00000a  68e0              LDR      r0,[r4,#0xc]  ; thisModeConf
00000c  68a1              LDR      r1,[r4,#8]  ; ptModuleModeConf
00000e  2505              MOVS     r5,#5
000010  f9b0205a          LDRSH    r2,[r0,#0x5a]
000014  7889              LDRB     r1,[r1,#2]
000016  f9b00058          LDRSH    r0,[r0,#0x58]
00001a  408a              LSLS     r2,r2,r1
00001c  4088              LSLS     r0,r0,r1
00001e  f8df8058          LDR      r8,|L17.120|
000022  e9cd0202          STRD     r0,r2,[sp,#8]
000026  e9cd8500          STRD     r8,r5,[sp,#0]
00002a  2601              MOVS     r6,#1
00002c  9604              STR      r6,[sp,#0x10]
00002e  e9d40106          LDRD     r0,r1,[r4,#0x18]
000032  4b12              LDR      r3,|L17.124|
000034  4a12              LDR      r2,|L17.128|
000036  f7fffffe          BL       alogorithm_linefilter_dspA
;;;651    	(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),1);
;;;652    	if(MuxSum)
00003a  2f00              CMP      r7,#0
;;;653    		alogorithm_linefilter_dspA(RawAddr_MuxSum,BaseAddr_MuxSum,(uint32_t)&DSPATMPDELTA[0][0],(uint32_t)&LINEFILTERBUFST2[0],(uint32_t)&LINEFILTERBUFST3[0],PEN_COORD_ROW_MAX,
;;;654    		(uint32_t)(thisModeConf->SensingFilter.sLineFilterUpLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),(uint32_t)(thisModeConf->SensingFilter.sLineFilterLowLimit_Pen<<ptModuleModeConf->ucLocalOvrShift),1);
;;;655    }
00003c  bf04              ITT      EQ
00003e  b006              ADDEQ    sp,sp,#0x18
000040  e8bd81f0          POPEQ    {r4-r8,pc}
000044  68e0              LDR      r0,[r4,#0xc]          ;653  ; thisModeConf
000046  68a1              LDR      r1,[r4,#8]            ;653  ; ptModuleModeConf
000048  4b0c              LDR      r3,|L17.124|
00004a  f9b0205a          LDRSH    r2,[r0,#0x5a]         ;653
00004e  7889              LDRB     r1,[r1,#2]            ;653
000050  f9b00058          LDRSH    r0,[r0,#0x58]         ;653
000054  408a              LSLS     r2,r2,r1              ;653
000056  4088              LSLS     r0,r0,r1              ;653
000058  e9cd0202          STRD     r0,r2,[sp,#8]         ;653
00005c  e9cd8500          STRD     r8,r5,[sp,#0]         ;653
000060  9604              STR      r6,[sp,#0x10]         ;653
000062  e9d41008          LDRD     r1,r0,[r4,#0x20]      ;653
000066  4a06              LDR      r2,|L17.128|
000068  f7fffffe          BL       alogorithm_linefilter_dspA
00006c  b006              ADD      sp,sp,#0x18
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;656    
                          ENDP

000072  0000              DCW      0x0000
                  |L17.116|
                          DCD      ||.data||
                  |L17.120|
                          DCD      DspA_LF_ArrayS32_3
                  |L17.124|
                          DCD      DspA_LF_ArrayS32_2
                  |L17.128|
                          DCD      DspA_TmpDelta

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tDSPAOutPutInfo
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  raw_idx
000000  00                DCB      0x00
                  base_idx
000001  00                DCB      0x00
                  raw_idx_MuxSum
000002  00                DCB      0x00
                  base_idx_MuxSum
000003  00                DCB      0x00
                  thisInfo
                          DCD      0x00000000
                  ptModuleModeConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  ptAppInfo
                          DCD      0x00000000
                  LoopCntDspA
                          DCD      0x00000000
                  RawAddr
                          DCD      0x00000000
                  BaseAddr
                          DCD      0x00000000
                  BaseAddr_MuxSum
                          DCD      0x00000000
                  RawAddr_MuxSum
                          DCD      0x00000000
                  g_pLocalBaseImage
                          DCD      0x00000000
                  g_pFullHoverImage
                          DCD      0x00000000
                  g_pLocalHop1BaseImage
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\dspA\\dspA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_dspA_c_bffd97c3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____REVSH|
#line 402
|__asm___6_dspA_c_bffd97c3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_dspA_c_bffd97c3____RRX|
#line 587
|__asm___6_dspA_c_bffd97c3____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
