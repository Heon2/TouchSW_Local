; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\pwmdrv.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\pwmdrv.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\pwmdrv.crf ..\..\Hal\pwmdrv\pwmdrv.c]
                          THUMB

                          AREA ||i.PWMDRV_Cmd||, CODE, READONLY, ALIGN=1

                  PWMDRV_Cmd PROC
;;;678    
;;;679    void PWMDRV_Cmd(FunctionalState NewState)
000000  f04f2140          MOV      r1,#0x40004000
;;;680    {
;;;681    	PWMDRV->GBL_b.PWMDRV_ENA = NewState;
000004  680a              LDR      r2,[r1,#0]
000006  f3600200          BFI      r2,r0,#0,#1
00000a  600a              STR      r2,[r1,#0]
;;;682    }
00000c  4770              BX       lr
;;;683    
                          ENDP


                          AREA ||i.PWMDRV_FG_F_F0_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_FG_F_F0_ACT PROC
;;;612    
;;;613    void PWMDRV_FG_F_F0_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;614    {
;;;615    	PWMDRV->FG_F_F0_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc50ac          LDR      r5,[r12,#0xac]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc50ac          STR      r5,[r12,#0xac]
;;;616    	PWMDRV->FG_F_F0_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc00ac          LDR      r0,[r12,#0xac]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc00ac          STR      r0,[r12,#0xac]
;;;617    	PWMDRV->FG_F_F0_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc00b0          LDR      r0,[r12,#0xb0]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc00b0          STR      r0,[r12,#0xb0]
;;;618    	PWMDRV->FG_F_F0_ACT_1_b.DLY      = DLY;
00002c  f8dc00b0          LDR      r0,[r12,#0xb0]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc00b0          STR      r0,[r12,#0xb0]
;;;619    	PWMDRV->FG_F_F0_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc00b4          LDR      r0,[r12,#0xb4]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc00b4          STR      r0,[r12,#0xb4]
;;;620    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;621    
                          ENDP


                          AREA ||i.PWMDRV_FG_F_F1_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_FG_F_F1_ACT PROC
;;;621    
;;;622    void PWMDRV_FG_F_F1_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;623    {
;;;624    	PWMDRV->FG_F_F1_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc50b8          LDR      r5,[r12,#0xb8]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc50b8          STR      r5,[r12,#0xb8]
;;;625    	PWMDRV->FG_F_F1_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc00b8          LDR      r0,[r12,#0xb8]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc00b8          STR      r0,[r12,#0xb8]
;;;626    	PWMDRV->FG_F_F1_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc00bc          LDR      r0,[r12,#0xbc]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc00bc          STR      r0,[r12,#0xbc]
;;;627    	PWMDRV->FG_F_F1_ACT_1_b.DLY      = DLY;
00002c  f8dc00bc          LDR      r0,[r12,#0xbc]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc00bc          STR      r0,[r12,#0xbc]
;;;628    	PWMDRV->FG_F_F1_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc00c0          LDR      r0,[r12,#0xc0]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc00c0          STR      r0,[r12,#0xc0]
;;;629    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;630    
                          ENDP


                          AREA ||i.PWMDRV_FG_F_F2_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_FG_F_F2_ACT PROC
;;;630    
;;;631    void PWMDRV_FG_F_F2_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;632    {
;;;633    	PWMDRV->FG_F_F2_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc50c4          LDR      r5,[r12,#0xc4]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc50c4          STR      r5,[r12,#0xc4]
;;;634    	PWMDRV->FG_F_F2_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc00c4          LDR      r0,[r12,#0xc4]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc00c4          STR      r0,[r12,#0xc4]
;;;635    	PWMDRV->FG_F_F2_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc00c8          LDR      r0,[r12,#0xc8]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc00c8          STR      r0,[r12,#0xc8]
;;;636    	PWMDRV->FG_F_F2_ACT_1_b.DLY      = DLY;
00002c  f8dc00c8          LDR      r0,[r12,#0xc8]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc00c8          STR      r0,[r12,#0xc8]
;;;637    	PWMDRV->FG_F_F2_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc00cc          LDR      r0,[r12,#0xcc]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc00cc          STR      r0,[r12,#0xcc]
;;;638    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;639    
                          ENDP


                          AREA ||i.PWMDRV_FG_F_F3_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_FG_F_F3_ACT PROC
;;;639    
;;;640    void PWMDRV_FG_F_F3_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;641    {
;;;642    	PWMDRV->FG_F_F3_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc50d0          LDR      r5,[r12,#0xd0]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc50d0          STR      r5,[r12,#0xd0]
;;;643    	PWMDRV->FG_F_F3_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc00d0          LDR      r0,[r12,#0xd0]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc00d0          STR      r0,[r12,#0xd0]
;;;644    	PWMDRV->FG_F_F3_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc00d4          LDR      r0,[r12,#0xd4]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc00d4          STR      r0,[r12,#0xd4]
;;;645    	PWMDRV->FG_F_F3_ACT_1_b.DLY      = DLY;
00002c  f8dc00d4          LDR      r0,[r12,#0xd4]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc00d4          STR      r0,[r12,#0xd4]
;;;646    	PWMDRV->FG_F_F3_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc00d8          LDR      r0,[r12,#0xd8]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc00d8          STR      r0,[r12,#0xd8]
;;;647    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;648    
                          ENDP


                          AREA ||i.PWMDRV_FG_L_F0_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_FG_L_F0_ACT PROC
;;;648    
;;;649    void PWMDRV_FG_L_F0_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;650    {
;;;651    	PWMDRV->FG_L_F0_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc5064          LDR      r5,[r12,#0x64]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc5064          STR      r5,[r12,#0x64]
;;;652    	PWMDRV->FG_L_F0_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc0064          LDR      r0,[r12,#0x64]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc0064          STR      r0,[r12,#0x64]
;;;653    	PWMDRV->FG_L_F0_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc0068          LDR      r0,[r12,#0x68]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc0068          STR      r0,[r12,#0x68]
;;;654    	PWMDRV->FG_L_F0_ACT_1_b.DLY      = DLY;
00002c  f8dc0068          LDR      r0,[r12,#0x68]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc0068          STR      r0,[r12,#0x68]
;;;655    	PWMDRV->FG_L_F0_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc006c          LDR      r0,[r12,#0x6c]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc006c          STR      r0,[r12,#0x6c]
;;;656    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;657    
                          ENDP


                          AREA ||i.PWMDRV_GPIO_Init||, CODE, READONLY, ALIGN=2

                  PWMDRV_GPIO_Init PROC
;;;524    
;;;525    void PWMDRV_GPIO_Init(eSENSING_MODE_t eSensingMode)
000000  f4106f00          TST      r0,#0x800
;;;526    {
;;;527    	// I/O COnfiguration
;;;528    #if USED_OPERATION_STAND_ALONE
;;;529    	GPIO->tGPIO_AFIO_1._GPIO_VSYNC = 0; // VSYNC
;;;530    	GPIO->tGPIO_DIR_0._GPIO_VSYNC = 0;  // input
;;;531    //	GPIO->tGPIO_PD_0._GPIO_VSYNC = 1;  // Pull Down
;;;532    
;;;533    	GPIO->tGPIO_AFIO_1._GPIO_TSYNC_IN = 0; // TSYNCN_IN
;;;534    	GPIO->tGPIO_DIR_0._GPIO_TSYNC_IN = 0;  // input
;;;535    //	GPIO->tGPIO_PD_0._GPIO_TSYNC_IN = 1;  // Pull Down
;;;536    #else /* USED_OPERATION_STAND_ALONE */
;;;537    	if(IS_S3_MODE(eSensingMode))
;;;538    	{
;;;539    		GPIO->tGPIO_AFIO_1._GPIO_VSYNC = 0; // VSYNC
000004  482c              LDR      r0,|L7.184|
000006  d010              BEQ      |L7.42|
000008  6e41              LDR      r1,[r0,#0x64]
00000a  f4211140          BIC      r1,r1,#0x300000
00000e  6641              STR      r1,[r0,#0x64]
;;;540    		GPIO->tGPIO_DIR_0._GPIO_VSYNC = 0;  // input
000010  6881              LDR      r1,[r0,#8]
000012  f0216180          BIC      r1,r1,#0x4000000
000016  6081              STR      r1,[r0,#8]
;;;541    
;;;542    		GPIO->tGPIO_AFIO_1._GPIO_TSYNC_IN = 0; // TSYNCN_IN
000018  6e41              LDR      r1,[r0,#0x64]
00001a  f4210140          BIC      r1,r1,#0xc00000
00001e  6641              STR      r1,[r0,#0x64]
;;;543    		GPIO->tGPIO_DIR_0._GPIO_TSYNC_IN = 0;  // input
000020  6881              LDR      r1,[r0,#8]
000022  f0216100          BIC      r1,r1,#0x8000000
000026  6081              STR      r1,[r0,#8]
000028  e013              B        |L7.82|
                  |L7.42|
;;;544    	}
;;;545    	else
;;;546    	{
;;;547    #if USED_NEW_TCON_BOARD
;;;548    		GPIO->tGPIO_AFIO_1._GPIO_VSYNC = 0; // VSYNC
;;;549    		GPIO->tGPIO_DIR_0._GPIO_VSYNC = 0;  // input
;;;550    #else /* USED_NEW_TCON_BOARD */
;;;551    		GPIO->tGPIO_DIR_0._GPIO_VSYNC  = 0x0;	// input
00002a  6881              LDR      r1,[r0,#8]
00002c  f0216180          BIC      r1,r1,#0x4000000
000030  6081              STR      r1,[r0,#8]
;;;552    		GPIO->tGPIO_AFIO_1._GPIO_VSYNC = 0x1;	// VSYNC
000032  6e41              LDR      r1,[r0,#0x64]
000034  f4211140          BIC      r1,r1,#0x300000
000038  f5011180          ADD      r1,r1,#0x100000
00003c  6641              STR      r1,[r0,#0x64]
;;;553    #endif /* USED_NEW_TCON_BOARD */
;;;554    		GPIO->tGPIO_DIR_0._GPIO_TSYNC_IN  = 0x0;	// input
00003e  6881              LDR      r1,[r0,#8]
000040  f0216100          BIC      r1,r1,#0x8000000
000044  6081              STR      r1,[r0,#8]
;;;555    		GPIO->tGPIO_AFIO_1._GPIO_TSYNC_IN = 0x1;	// TSYNC_IN
000046  6e41              LDR      r1,[r0,#0x64]
000048  f4210140          BIC      r1,r1,#0xc00000
00004c  f5010180          ADD      r1,r1,#0x400000
000050  6641              STR      r1,[r0,#0x64]
                  |L7.82|
;;;556    	}
;;;557    #endif /* USED_OPERATION_STAND_ALONE */
;;;558    
;;;559    	GPIO->tGPIO_AFIO_1._GPIO_PWM_SRIC = 1; // PWM_TX
000052  6e41              LDR      r1,[r0,#0x64]
000054  f0217140          BIC      r1,r1,#0x3000000
000058  f1017180          ADD      r1,r1,#0x1000000
00005c  6641              STR      r1,[r0,#0x64]
;;;560    	GPIO->tGPIO_AFIO_1._GPIO_PWM_GATE = 1; // ADD (Must Enable) PWM_TPIC --> PWM_GATE
00005e  6e41              LDR      r1,[r0,#0x64]
000060  f0216140          BIC      r1,r1,#0xc000000
000064  f1016180          ADD      r1,r1,#0x4000000
000068  6641              STR      r1,[r0,#0x64]
;;;561    #if USED_TEST_OPERATION_ENABLE
;;;562    	GPIO->tGPIO_AFIO_1._GPIO_PWM_TPIC = 1; // PWM_DATA (PWM_LFD)
;;;563    #endif
;;;564    	GPIO->tGPIO_P1_0._GPIO_PWM_SRIC = 0x1;
00006a  f8d01080          LDR      r1,[r0,#0x80]
00006e  f0415180          ORR      r1,r1,#0x10000000
000072  f8c01080          STR      r1,[r0,#0x80]
;;;565    	GPIO->tGPIO_P2_0._GPIO_PWM_SRIC = 0x1;
000076  6f81              LDR      r1,[r0,#0x78]
000078  f0415180          ORR      r1,r1,#0x10000000
00007c  6781              STR      r1,[r0,#0x78]
;;;566    #if USED_TEST_OPERATION_ENABLE
;;;567    	GPIO->tGPIO_P1_0._GPIO_PWM_TPIC = 0x1;
;;;568    	GPIO->tGPIO_P2_0._GPIO_PWM_TPIC = 0x1;
;;;569    #endif
;;;570    #if USED_LPWG_MODE_CONTROL
;;;571    	if(IS_LPWG_MODE(HAL_GetSensingMode()))
;;;572    	{				
;;;573    		GPIO->tGPIO_DATA_1._GPIO_TSYNC_OUT = 0x0;
;;;574    		GPIO->tGPIO_DIR_1._GPIO_TSYNC_OUT  = 0x1;
;;;575    		GPIO->tGPIO_AFIO_2._GPIO_TSYNC_OUT = 0x0;
;;;576    	}
;;;577    	else
;;;578    	{
;;;579    		GPIO->tGPIO_AFIO_2._GPIO_TSYNC_OUT = 1;	// TSYNCN_OUT
;;;580    		GPIO->tGPIO_P1_1._GPIO_TSYNC_OUT = 0x1;
;;;581    		GPIO->tGPIO_P2_1._GPIO_TSYNC_OUT = 0x1;
;;;582    	}
;;;583    #else /* USED_LPWG_MODE_CONTROL */
;;;584    	GPIO->tGPIO_AFIO_2._GPIO_TSYNC_OUT = 1;	// TSYNCN_OUT
00007e  6e81              LDR      r1,[r0,#0x68]
000080  f02101c0          BIC      r1,r1,#0xc0
000084  3140              ADDS     r1,r1,#0x40
000086  6681              STR      r1,[r0,#0x68]
;;;585    	GPIO->tGPIO_P1_1._GPIO_TSYNC_OUT = 0x1;
000088  f8d01084          LDR      r1,[r0,#0x84]
00008c  f0410108          ORR      r1,r1,#8
000090  f8c01084          STR      r1,[r0,#0x84]
;;;586    	GPIO->tGPIO_P2_1._GPIO_TSYNC_OUT = 0x1;
000094  6fc1              LDR      r1,[r0,#0x7c]
000096  f0410108          ORR      r1,r1,#8
00009a  67c1              STR      r1,[r0,#0x7c]
;;;587    	
;;;588    	// Temp - choigs
;;;589    //	PWMDRV->GBL_b.SEL_EXT_VSYNC = 1; 			// 0:Internal 1:External
;;;590    //	PWMDRV->GBL_b.SEL_EXT_TSYNC = 1;
;;;591    //	PWMDRV->GBL_b.SEL_FR_TSYNC	= 0;
;;;592    //	PWMDRV->VSWT_CFG_1_b.SEL_TSYNC_OUT = 0; // 0:Ext, 1:Internal, 2:FreeRunning, 3:x
;;;593    
;;;594    	
;;;595    	
;;;596    #endif /* USED_LPWG_MODE_CONTROL */
;;;597    	
;;;598    	GPIO->tGPIO_AFIO_2._GPIO_DEBUG_B5 = 0;
00009c  6e81              LDR      r1,[r0,#0x68]
00009e  f4210140          BIC      r1,r1,#0xc00000
0000a2  6681              STR      r1,[r0,#0x68]
;;;599    	GPIO->tGPIO_DIR_1._GPIO_DEBUG_B5 = 1;  // output
0000a4  68c1              LDR      r1,[r0,#0xc]
0000a6  f4416100          ORR      r1,r1,#0x800
0000aa  60c1              STR      r1,[r0,#0xc]
;;;600    	GPIO->tGPIO_DATA_1._GPIO_DEBUG_B5 = 0;
0000ac  6841              LDR      r1,[r0,#4]
0000ae  f4216100          BIC      r1,r1,#0x800
0000b2  6041              STR      r1,[r0,#4]
;;;601    }
0000b4  4770              BX       lr
;;;602    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L7.184|
                          DCD      0x40007000

                          AREA ||i.PWMDRV_ITConfig||, CODE, READONLY, ALIGN=1

                  PWMDRV_ITConfig PROC
;;;683    
;;;684    void PWMDRV_ITConfig(FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
000004  2180              MOVS     r1,#0x80
000006  f8c21280          STR      r1,[r2,#0x280]
00000a  f1020c07          ADD      r12,r2,#7
00000e  2360              MOVS     r3,#0x60
000010  f88c3400          STRB     r3,[r12,#0x400]
;;;685    {
;;;686    	NVIC_ClearPendingIRQ(PWMDRV_IRQn);
;;;687    	NVIC_SetPriority(PWMDRV_IRQn, PWMDRV_IRQn_Priority);
;;;688    
;;;689    	if(NewState != DISABLE)
000014  2800              CMP      r0,#0
000016  bf14              ITE      NE
000018  f8c21100          STRNE    r1,[r2,#0x100]
00001c  f8c21180          STREQ    r1,[r2,#0x180]
;;;690    	{
;;;691    		NVIC_EnableIRQ(PWMDRV_IRQn);
;;;692    	}
;;;693    	else
;;;694    	{
;;;695    		NVIC_DisableIRQ(PWMDRV_IRQn);
;;;696    	}
;;;697    #if (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE)
;;;698    	AbnormalTsyncCheckEn = NO;
;;;699    #endif /* (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE) */	
;;;700    }
000020  4770              BX       lr
;;;701    
                          ENDP


                          AREA ||i.PWMDRV_Init||, CODE, READONLY, ALIGN=2

                  PWMDRV_Init PROC
;;;445    
;;;446    void PWMDRV_Init(eSENSING_MODE_t eSensingMode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;447    {
000004  4602              MOV      r2,r0
;;;448    	if(IS_FINGER_PEN_MODE(eSensingMode))
000006  f4104f80          TST      r0,#0x4000
;;;449    	{
;;;450    		Fncp_PWMDRV_IRQHandler = &PWMDRV_InterruptHandler_PartialScan;
00000a  485b              LDR      r0,|L9.376|
00000c  bf1c              ITT      NE
00000e  495b              LDRNE    r1,|L9.380|
000010  6001              STRNE    r1,[r0,#0]  ; Fncp_PWMDRV_IRQHandler
000012  d07c              BEQ      |L9.270|
                  |L9.20|
;;;451    	}
;;;452    	else if(IS_S3_MODE(eSensingMode))
;;;453    	{
;;;454    		Fncp_PWMDRV_IRQHandler = &PWMDRV_InterruptHandler_LPWG;
;;;455    	}
;;;456    	else
;;;457    	{
;;;458    		Fncp_PWMDRV_IRQHandler = &PWMDRV_InterruptHandler_FullScan;
;;;459    	}
;;;460    
;;;461    	PWMDRV_GPIO_Init(eSensingMode);
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       PWMDRV_GPIO_Init
;;;462    
;;;463    	PWMDRV->VSWT_CFG_1_b.SEL_TSYNC_OUT = s_pktHalPwmdrvCommonConf->ucSelTsyncOut;
00001a  4d59              LDR      r5,|L9.384|
00001c  f04f2440          MOV      r4,#0x40004000
000020  6869              LDR      r1,[r5,#4]  ; s_pktHalPwmdrvCommonConf
000022  f8d40144          LDR      r0,[r4,#0x144]
000026  7b0b              LDRB     r3,[r1,#0xc]
000028  f3630042          BFI      r0,r3,#1,#2
00002c  f8c40144          STR      r0,[r4,#0x144]
;;;464    	PWMDRV->GBL = s_pktHalPwmdrvCommonConf->tPWMDRV_GBL.ulBulk;
000030  6808              LDR      r0,[r1,#0]
000032  6020              STR      r0,[r4,#0]
;;;465    #if USED_LPWG_MODE_CONTROL
;;;466    	if(IS_LPWG_MODE(HAL_GetSensingMode()))
;;;467    	{		
;;;468    		PWMDRV->GBL_b.SEL_EXT_VSYNC = 0;	// 0:Internal 1:External
;;;469    		PWMDRV->GBL_b.SEL_EXT_TSYNC = 0;	// 0:Internal 1:External
;;;470    		PWMDRV->GBL_b.SEL_FR_TSYNC	= 1;	// 0:F/W   1:Free Running
;;;471    	}
;;;472    #endif /* USED_LPWG_MODE_CONTROL */
;;;473    	PWMDRV->IN_CTRL = s_pktHalPwmdrvCommonConf->tPWMDRV_IN_CTRL.ulBulk;
000034  f8d10059          LDR      r0,[r1,#0x59]
000038  60a0              STR      r0,[r4,#8]
;;;474    	PWMDRV->INTR_CFG = s_pktHalPwmdrvCommonConf->tPWMDRV_INTR_CFG.ulBulk;
00003a  6848              LDR      r0,[r1,#4]
00003c  f8c40158          STR      r0,[r4,#0x158]
;;;475    	PWMDRV->VSYNC_FREQ_b.F0_TSYNC = TSYNC_LHB;
000040  6a20              LDR      r0,[r4,#0x20]
000042  f020003f          BIC      r0,r0,#0x3f
000046  1c40              ADDS     r0,r0,#1
000048  6220              STR      r0,[r4,#0x20]
;;;476    	PWMDRV->FG_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_FG_0.ulBulk;
00004a  f8d10049          LDR      r0,[r1,#0x49]
00004e  6120              STR      r0,[r4,#0x10]
;;;477    	PWMDRV->FG_1 = s_pktHalPwmdrvCommonConf->tPWMDRV_FG_1.ulBulk;
000050  f8d1004d          LDR      r0,[r1,#0x4d]
000054  6160              STR      r0,[r4,#0x14]
;;;478    	PWMDRV->PN_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_PN_0.ulBulk;
000056  f8d10051          LDR      r0,[r1,#0x51]
00005a  61a0              STR      r0,[r4,#0x18]
;;;479    	PWMDRV->PN_1 = s_pktHalPwmdrvCommonConf->tPWMDRV_PN_1.ulBulk;
00005c  f8d10055          LDR      r0,[r1,#0x55]
000060  61e0              STR      r0,[r4,#0x1c]
;;;480    	PWMDRV->EPLG_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_EPLG_0.ulBulk;
000062  f8d10039          LDR      r0,[r1,#0x39]
000066  65a0              STR      r0,[r4,#0x58]
;;;481    	PWMDRV->EPLG_1 = s_pktHalPwmdrvCommonConf->tPWMDRV_EPLG_1.ulBulk;
000068  f8d1003d          LDR      r0,[r1,#0x3d]
00006c  65e0              STR      r0,[r4,#0x5c]
;;;482    	PWMDRV->EPLG_2 = s_pktHalPwmdrvCommonConf->tPWMDRV_EPLG_2.ulBulk;
00006e  f8d10041          LDR      r0,[r1,#0x41]
000072  6620              STR      r0,[r4,#0x60]
;;;483    	PWMDRV->PRLG = s_pktHalPwmdrvCommonConf->tPWMDRV_PRLG.ulBulk;
000074  f8d10045          LDR      r0,[r1,#0x45]
000078  64a0              STR      r0,[r4,#0x48]
;;;484    	PWMDRV->PRE_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_0.ulBulk;
00007a  f8d1002d          LDR      r0,[r1,#0x2d]
00007e  64e0              STR      r0,[r4,#0x4c]
;;;485    	PWMDRV->PRE_1 = s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_1.ulBulk;
000080  f8d10031          LDR      r0,[r1,#0x31]
000084  6520              STR      r0,[r4,#0x50]
;;;486    	PWMDRV->PRE_2 = s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_2.ulBulk;
000086  f8d10035          LDR      r0,[r1,#0x35]
00008a  6560              STR      r0,[r4,#0x54]
;;;487    
;;;488    #ifdef _USE_APP_LGD_LIB_
;;;489    	PWMDRV_PRE(PWM_Full_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq), PWM_Half_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq), g_tPWMDRV_lib_reg.ucPwmPreNum, g_tPWMDRV_lib_reg.usFullFingerPWMPreDly, s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_2.tBit.DSSS_DLY);
;;;490    	PWMDRV_SectionEnable(eSensingMode);
;;;491    
;;;492    	PWMDRV_FG_F_F0_ACT(PWM_Full_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq), PWM_Half_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq),
;;;493    			(g_tPWMDRV_lib_reg.ucPwmSetNum + g_tPWMDRV_lib_reg.ucPwmFingerActNum), g_tPWMDRV_lib_reg.usFullFingerPWMIntervalDly, g_tPWMDRV_lib_reg.ucPwmTotalMuxNum);
;;;494    
;;;495    	PWMDRV_FG_F_F1_ACT(PWM_Full_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq), PWM_Half_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq),
;;;496    			(g_tPWMDRV_lib_reg.ucPwmSetNum + g_tPWMDRV_lib_reg.ucPwmFingerActNum), g_tPWMDRV_lib_reg.usFullFingerPWMIntervalDly, g_tPWMDRV_lib_reg.ucPwm1stMuxStart);
;;;497    //			(1+24), PWM_us(50), 12);
;;;498    
;;;499    	PWMDRV_FG_F_F2_ACT(PWM_Full_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq), PWM_Half_PRD_KHz(g_tPWMDRV_lib_reg.usPwmFreq),
;;;500    			(g_tPWMDRV_lib_reg.ucPwmSetNum + g_tPWMDRV_lib_reg.ucPwmFingerActNum), g_tPWMDRV_lib_reg.usFullFingerPWMIntervalDly, g_tPWMDRV_lib_reg.ucPwm2ndMuxStart);
;;;501    //			(1+24), PWM_us(50), 13);
;;;502    
;;;503    	PWMDRV_FG_F_F3_ACT(PWM_Full_PRD_KHz(g_tPWMDRV_lib_reg.usNIPwmFreq), PWM_Half_PRD_KHz(g_tPWMDRV_lib_reg.usNIPwmFreq),
;;;504    			(g_tPWMDRV_lib_reg.ucPwmSetNum + g_tPWMDRV_lib_reg.ucNIPwmFingerActNum), g_tPWMDRV_lib_reg.usFullFingerPWMIntervalDly, g_tPWMDRV_lib_reg.ucPwm3rdMuxStart);
;;;505    #else /* _USE_APP_LGD_LIB_ */
;;;506    	PWMDRV_PRE(PWM_Full_PRD_KHz(s_pktHalPwmdrvCommonConf->usPwmFreq),
00008c  f8b1000d          LDRH     r0,[r1,#0xd]
000090  2800              CMP      r0,#0
000092  bf0f              ITEEE    EQ
000094  2300              MOVEQ    r3,#0
000096  f64263e0          MOVNE    r3,#0x2ee0
00009a  fbb3f3f0          UDIVNE   r3,r3,r0
00009e  1e9b              SUBNE    r3,r3,#2
0000a0  b29b              UXTH     r3,r3
;;;507    			PWM_Half_PRD_KHz(s_pktHalPwmdrvCommonConf->usPwmFreq),
0000a2  bf0f              ITEEE    EQ
0000a4  2000              MOVEQ    r0,#0
0000a6  f2417c70          MOVNE    r12,#0x1770
0000aa  fbbcf0f0          UDIVNE   r0,r12,r0
0000ae  1e80              SUBNE    r0,r0,#2
0000b0  7bcf              LDRB     r7,[r1,#0xf]
0000b2  f8b1c032          LDRH     r12,[r1,#0x32]
0000b6  f8916034          LDRB     r6,[r1,#0x34]
0000ba  ea4c4c06          ORR      r12,r12,r6,LSL #16
0000be  f8916035          LDRB     r6,[r1,#0x35]
0000c2  ea4f0c9c          LSR      r12,r12,#2
0000c6  f8d4804c          LDR      r8,[r4,#0x4c]
0000ca  f363080f          BFI      r8,r3,#0,#16
0000ce  f8c4804c          STR      r8,[r4,#0x4c]
0000d2  6ce3              LDR      r3,[r4,#0x4c]
0000d4  f360431f          BFI      r3,r0,#16,#16
0000d8  64e3              STR      r3,[r4,#0x4c]
0000da  6d20              LDR      r0,[r4,#0x50]
0000dc  f3670009          BFI      r0,r7,#0,#10
0000e0  6520              STR      r0,[r4,#0x50]
0000e2  6d20              LDR      r0,[r4,#0x50]
0000e4  f36c2099          BFI      r0,r12,#10,#16
0000e8  6520              STR      r0,[r4,#0x50]
0000ea  6d60              LDR      r0,[r4,#0x54]
0000ec  f3660007          BFI      r0,r6,#0,#8
0000f0  6560              STR      r0,[r4,#0x54]
0000f2  f4124f80          TST      r2,#0x4000
0000f6  bf14              ITE      NE
0000f8  f8d10061          LDRNE    r0,[r1,#0x61]
0000fc  f8d1005d          LDREQ    r0,[r1,#0x5d]
000100  f8c40130          STR      r0,[r4,#0x130]
;;;508    			s_pktHalPwmdrvCommonConf->ucPwmPreNum,
;;;509    			s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_1.tBit.PRE_DLY,
;;;510    			s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_2.tBit.DSSS_DLY);
;;;511    	PWMDRV_SectionEnable(eSensingMode);
;;;512    	PWMDRV_Set_Pulse_Config(eSensingMode);
000104  4610              MOV      r0,r2
000106  f7fffffe          BL       PWMDRV_Set_Pulse_Config
;;;513    #endif /* _USE_APP_LGD_LIB_ */
;;;514    
;;;515    	PWMDRV->FW_CTRL_b.PEN_MODE = 0;
00010a  6860              LDR      r0,[r4,#4]
00010c  e000              B        |L9.272|
                  |L9.270|
00010e  e02c              B        |L9.362|
                  |L9.272|
000110  f0200001          BIC      r0,r0,#1
000114  6060              STR      r0,[r4,#4]
;;;516    	PWMDRV->ENA_PWM_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_ENA_PWM[ePWM_PARAM_FINGER].ulBulk;
000116  6868              LDR      r0,[r5,#4]  ; s_pktHalPwmdrvCommonConf
000118  f8d0005d          LDR      r0,[r0,#0x5d]
00011c  f8c40130          STR      r0,[r4,#0x130]
;;;517    	PWMDRV->DSSS_CFG_b.beacon_en = 0;
000120  f8d40164          LDR      r0,[r4,#0x164]
000124  f0200001          BIC      r0,r0,#1
000128  f8c40164          STR      r0,[r4,#0x164]
;;;518    	PWMDRV->DSSS_CFG_b.beacon_en = 0;
00012c  f8d40164          LDR      r0,[r4,#0x164]
000130  f0200001          BIC      r0,r0,#1
000134  f8c40164          STR      r0,[r4,#0x164]
;;;519    	PWMDRV->DSSS_CFG_b.ping_en = 0;
000138  f8d40164          LDR      r0,[r4,#0x164]
00013c  f0200002          BIC      r0,r0,#2
000140  f8c40164          STR      r0,[r4,#0x164]
;;;520    	PWMDRV->WFE_CFG_0_b.ENA = 0x3F;
000144  f8d40150          LDR      r0,[r4,#0x150]
000148  f040003f          ORR      r0,r0,#0x3f
00014c  f8c40150          STR      r0,[r4,#0x150]
000150  f04f21e0          MOV      r1,#0xe000e000
000154  2080              MOVS     r0,#0x80
000156  f8c10280          STR      r0,[r1,#0x280]
00015a  2260              MOVS     r2,#0x60
00015c  1dcb              ADDS     r3,r1,#7
00015e  f8832400          STRB     r2,[r3,#0x400]
000162  f8c10100          STR      r0,[r1,#0x100]
;;;521    
;;;522    	PWMDRV_ITConfig(ENABLE);
;;;523    }
000166  e8bd81f0          POP      {r4-r8,pc}
                  |L9.362|
00016a  f4126f00          TST      r2,#0x800             ;452
00016e  bf14              ITE      NE                    ;454
000170  4904              LDRNE    r1,|L9.388|
000172  4905              LDREQ    r1,|L9.392|
000174  6001              STR      r1,[r0,#0]            ;452  ; Fncp_PWMDRV_IRQHandler
000176  e74d              B        |L9.20|
;;;524    
                          ENDP

                  |L9.376|
                          DCD      Fncp_PWMDRV_IRQHandler
                  |L9.380|
                          DCD      PWMDRV_InterruptHandler_PartialScan
                  |L9.384|
                          DCD      ||.data||
                  |L9.388|
                          DCD      PWMDRV_InterruptHandler_LPWG
                  |L9.392|
                          DCD      PWMDRV_InterruptHandler_FullScan

                          AREA ||i.PWMDRV_Initialize||, CODE, READONLY, ALIGN=2

                  PWMDRV_Initialize PROC
;;;440    
;;;441    void PWMDRV_Initialize(void)
000000  b510              PUSH     {r4,lr}
;;;442    {
;;;443    	s_pktHalPwmdrvCommonConf = hal_pwmdrv_GetCommonConfig();
000002  f7fffffe          BL       hal_pwmdrv_GetCommonConfig
000006  4901              LDR      r1,|L10.12|
000008  6048              STR      r0,[r1,#4]  ; s_pktHalPwmdrvCommonConf
;;;444    }
00000a  bd10              POP      {r4,pc}
;;;445    
                          ENDP

                  |L10.12|
                          DCD      ||.data||

                          AREA ||i.PWMDRV_InterruptHandler_FullScan||, CODE, READONLY, ALIGN=2

                  PWMDRV_InterruptHandler_FullScan PROC
;;;74     void SRIC_Stop(void);
;;;75     void PWMDRV_InterruptHandler_FullScan(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;76     {
;;;77     	if(PWMDRV->INTR_ST_b.MIS_TSYNC_IN_EXT != 0)
000004  f04f2440          MOV      r4,#0x40004000
000008  f8d40160          LDR      r0,[r4,#0x160]
;;;78     	{
;;;79     		PWMDRV->INTR_CLR_b.TSYNC_IN_EXT = 0x1;
;;;80     
;;;81     //		tHalIntrHandle.ulTSyncInBothEdgeCnt++;
;;;82     //		if(tHalIntrHandle.ulTSyncInBothEdgeCnt % 2 == 1)
;;;83     		if(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0)
00000c  f8df8174          LDR      r8,|L11.388|
;;;84     		{
;;;85     //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;86     //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;87     
;;;88     #if (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE)
;;;89     			if(AbnormalTsyncCheckEn)
;;;90     			{
;;;91     				ScanTime = (uint64_t)getLongSysTick();
;;;92     				if(StartTime > ScanTime)
;;;93     				{
;;;94     					TsyncHighTime = (StartTime-ScanTime)/(TMCU_MAIN_TRIM_CLOCK_SPEED*1000);
;;;95     					if(TsyncHighTime < 10/*13ms(60Hz)-2ms-1ms*/ || TsyncHighTime > 28/*26ms(30Hz)+2ms*/)
;;;96     					{
;;;97     						//Reset mspi mux count
;;;98     						MSPI->SPISTART = 0x3F;
;;;99     					}
;;;100    				}
;;;101    			}
;;;102    			else
;;;103    			{
;;;104    				if(SkipTsyncCnt < SKIP_TSYNC_NUM) 
;;;105    				{
;;;106    					SkipTsyncCnt++;
;;;107    				}
;;;108    				else
;;;109    				{
;;;110    					SkipTsyncCnt = 0;
;;;111    					AbnormalTsyncCheckEn = YES;
;;;112    				}
;;;113    			}
;;;114    #endif /* (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE) */		
;;;115    			
;;;116    #if USED_IDLE_MODE_CONTROL
;;;117    //			if(IDLE_FLAG)
;;;118    //			{
;;;119    //				if(FLAG_30Hz==1)
;;;120    //				{
;;;121    //					//s_pktHalPwmdrvCommonConf->tPWMDRV_ENA_PWM[ePWM_PARAM_FINGER].tBit.ACT_ENA_T0 = 0;
;;;122    //					PWMDRV->ENA_PWM_0 = 0;	//t0 sric tx, t1 tpic
;;;123    
;;;124    //					FLAG_30Hz=0;
;;;125    //				}
;;;126    //				else if(FLAG_30Hz==0)
;;;127    //				{
;;;128    //					FLAG_30Hz=1;
;;;129    //					PWMDRV->ENA_PWM_0 = 0x00002306;
;;;130    //				}
;;;131    //			}
;;;132    
;;;133    			if(IDLE_FLAG==IDLE_OPER)	// sric control
;;;134    			{
;;;135    				if(FLAG_30Hz==1)
;;;136    				{
;;;137    					//s_pktHalPwmdrvCommonConf->tPWMDRV_ENA_PWM[ePWM_PARAM_FINGER].tBit.ACT_ENA_T0 = 0;
;;;138    					PWMDRV->ENA_PWM_0 = 0;	//t0 sric tx, t1 tpic
;;;139    					FLAG_30Hz=0;
;;;140    				}
;;;141    				else if(FLAG_30Hz==0)
;;;142    				{
;;;143    					PWMDRV->ENA_PWM_0 = 0x00002306;
;;;144    					FLAG_30Hz=1;
;;;145    				}
;;;146    			}
;;;147    #endif /* USED_IDLE_MODE_CONTROL */
;;;148    			/*
;;;149    			 * T-Sync Falling
;;;150    			 */
;;;151    			tHalIntrHandle.ulTSyncInFallingCnt++;
000010  4f5d              LDR      r7,|L11.392|
000012  f0100f04          TST      r0,#4                 ;77
;;;152    
;;;153    #if ABNORMAL_TSYNC_FALLING_TIME_CHECK
;;;154    			TsyncFallingStartTime = (uint64_t)getLongSysTick();
;;;155    
;;;156    //			if(TsyncRisingStartTime > TsyncFallingStartTime)
;;;157    //			{
;;;158    //				TsyncLowTime = (TsyncRisingStartTime-TsyncFallingStartTime)/(TMCU_MAIN_TRIM_CLOCK_SPEED*1000);
;;;159    //				if(TsyncLowTime < 10/*13ms(60Hz)-2ms-1ms*/ || TsyncLowTime > 28/*26ms(30Hz)+2ms*/)
;;;160    //				{
;;;161    //					//Reset mspi mux count
;;;162    //					MSPI->SPISTART = 0x3F;
;;;163    //				}
;;;164    //			}
;;;165    #endif
;;;166    
;;;167    #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;168    			if(HAL_GetTPICMuxEnControl())
;;;169    			{
;;;170    #if USED_FRAME_SKIP_IDLE_MODE_CONTROL
;;;171    				if(SkipFrameCnt == 0)
;;;172    				{
;;;173    					GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 1;
;;;174    				}
;;;175    #else /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;176    				GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 1;
;;;177    #endif /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;178    			}
;;;179    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;180    		}
;;;181    		else
;;;182    		{	
;;;183    //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;184    //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;185    //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;186    //			GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;187    
;;;188    #if (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE)
;;;189    			StartTime = (uint64_t)getLongSysTick();
;;;190    #endif /* (USED_LPWG_MODE_CONTROL || USED_ESD_RECOVERY_CODE) */			
;;;191    			
;;;192    #if USED_FRAME_SKIP_IDLE_MODE_CONTROL
;;;193    			if(IS_IDLE_MODE(HAL_GetSensingMode()))
;;;194    			{
;;;195    				if(SkipFrameCnt == 0)
;;;196    				{
;;;197    					SkipFrameCnt++;
000016  f04f0901          MOV      r9,#1
00001a  f04f0600          MOV      r6,#0
00001e  d072              BEQ      |L11.262|
000020  f8d4015c          LDR      r0,[r4,#0x15c]        ;79
000024  f0400004          ORR      r0,r0,#4              ;79
000028  f8c4015c          STR      r0,[r4,#0x15c]        ;79
00002c  f8d80000          LDR      r0,[r8,#0]            ;83
000030  f8dfa158          LDR      r10,|L11.396|
000034  4d56              LDR      r5,|L11.400|
000036  f0106f00          TST      r0,#0x8000000         ;83
00003a  f04f2be0          MOV      r11,#0xe000e000       ;154
00003e  d007              BEQ      |L11.80|
000040  f7fffffe          BL       HAL_GetSensingMode
000044  f4107f80          TST      r0,#0x100             ;193
;;;198    					PWMDRV_Cmd(DISABLE);
;;;199    				}
;;;200    				else if(SkipFrameCnt < SKIP_FRAME_NUM_ON_IDLE_MODE)
;;;201    				{
;;;202    					SkipFrameCnt++;
;;;203    				}
;;;204    				else
;;;205    				{
;;;206    					SkipFrameCnt = 0;
;;;207    					PWMDRV_Cmd(ENABLE);
;;;208    				}
;;;209    			}
;;;210    			else
;;;211    			{
;;;212    				if(SkipFrameCnt != 0)
000048  7828              LDRB     r0,[r5,#0]  ; SkipFrameCnt
00004a  d027              BEQ      |L11.156|
00004c  b1f0              CBZ      r0,|L11.140|
00004e  e026              B        |L11.158|
                  |L11.80|
000050  6938              LDR      r0,[r7,#0x10]         ;151  ; tHalIntrHandle
000052  1c40              ADDS     r0,r0,#1              ;151
000054  6138              STR      r0,[r7,#0x10]         ;151  ; tHalIntrHandle
000056  f8da0000          LDR      r0,[r10,#0]           ;154  ; _systick_high_rank_count_
00005a  0432              LSLS     r2,r6,#16             ;154
00005c  ea424110          ORR      r1,r2,r0,LSR #16      ;154
000060  0402              LSLS     r2,r0,#16             ;154
000062  f8db0018          LDR      r0,[r11,#0x18]        ;154
000066  4331              ORRS     r1,r1,r6              ;154
000068  b280              UXTH     r0,r0                 ;154
00006a  4310              ORRS     r0,r0,r2              ;154
00006c  e9c50102          STRD     r0,r1,[r5,#8]         ;154
000070  f7fffffe          BL       HAL_GetTPICMuxEnControl
000074  2800              CMP      r0,#0                 ;168
000076  d046              BEQ      |L11.262|
000078  7828              LDRB     r0,[r5,#0]            ;171  ; SkipFrameCnt
00007a  2800              CMP      r0,#0                 ;171
00007c  d143              BNE      |L11.262|
00007e  f8d80004          LDR      r0,[r8,#4]            ;173
000082  f0400010          ORR      r0,r0,#0x10           ;173
000086  f8c80004          STR      r0,[r8,#4]            ;173
00008a  e03c              B        |L11.262|
                  |L11.140|
00008c  f8859000          STRB     r9,[r5,#0]            ;197
000090  6821              LDR      r1,[r4,#0]            ;197
000092  2000              MOVS     r0,#0                 ;198
000094  f3600100          BFI      r1,r0,#0,#1           ;198
000098  6021              STR      r1,[r4,#0]            ;198
00009a  e006              B        |L11.170|
                  |L11.156|
00009c  b128              CBZ      r0,|L11.170|
                  |L11.158|
;;;213    				{
;;;214    					SkipFrameCnt = 0;
00009e  702e              STRB     r6,[r5,#0]
0000a0  6821              LDR      r1,[r4,#0]
;;;215    					PWMDRV_Cmd(ENABLE);
0000a2  2001              MOVS     r0,#1
0000a4  f3600100          BFI      r1,r0,#0,#1
0000a8  6021              STR      r1,[r4,#0]
                  |L11.170|
;;;216    				}
;;;217    			}
;;;218    #endif /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;219    			
;;;220    #if USED_IDLE_MODE_CONTROL
;;;221    			if(IDLE_FLAG==IDLE_READY)
;;;222    			{
;;;223    				IDLE_FLAG = IDLE_OPER;
;;;224    			}
;;;225    			else if(IDLE_FLAG==IDLE_OPER)
;;;226    			{
;;;227    				if(FLAG_30Hz==0)
;;;228    				{
;;;229    					MSPI_Set_TLPMODE();
;;;230    					SRIC_Run();
;;;231    					MSPI_Set_AITMODE(HAL_GetSensingMode());
;;;232    					MSPI_ITConfig(ENABLE);
;;;233    					MSPI_Cmd(ENABLE);
;;;234    					//IDLE_FLAG = 2;
;;;235    				}
;;;236    			}
;;;237    			else if(IDLE_FLAG==IDLE_END)
;;;238    			{
;;;239    				MSPI_Set_TLPMODE();
;;;240    				SRIC_Run();
;;;241    				MSPI_Set_AITMODE(HAL_GetSensingMode());
;;;242    				MSPI_ITConfig(ENABLE);
;;;243    				MSPI_Cmd(ENABLE);
;;;244    				IDLE_FLAG = NORMAL_OPER;
;;;245    			}
;;;246    #endif /* USED_IDLE_MODE_CONTROL */
;;;247    			
;;;248    			/*
;;;249    			 * T-Sync Rising
;;;250    			 */
;;;251    			tHalIntrHandle.ulTSyncInRisingCnt++;
0000aa  6978              LDR      r0,[r7,#0x14]  ; tHalIntrHandle
0000ac  1c40              ADDS     r0,r0,#1
0000ae  6178              STR      r0,[r7,#0x14]  ; tHalIntrHandle
;;;252    
;;;253    #if ABNORMAL_TSYNC_FALLING_TIME_CHECK
;;;254    			TsyncRisingStartTime = (uint64_t)getLongSysTick();
0000b0  f8da0000          LDR      r0,[r10,#0]  ; _systick_high_rank_count_
0000b4  0432              LSLS     r2,r6,#16
0000b6  ea424110          ORR      r1,r2,r0,LSR #16
0000ba  0402              LSLS     r2,r0,#16
0000bc  f8db0018          LDR      r0,[r11,#0x18]
0000c0  4331              ORRS     r1,r1,r6
0000c2  b280              UXTH     r0,r0
0000c4  4310              ORRS     r0,r0,r2
0000c6  e9c50104          STRD     r0,r1,[r5,#0x10]
0000ca  e9d53202          LDRD     r3,r2,[r5,#8]
0000ce  ebb00c03          SUBS     r12,r0,r3
0000d2  eb710c02          SBCS     r12,r1,r2
;;;255    
;;;256    			if(TsyncRisingStartTime < TsyncFallingStartTime)
0000d6  d216              BCS      |L11.262|
0000d8  1a18              SUBS     r0,r3,r0
0000da  eb620101          SBC      r1,r2,r1
;;;257    			{
;;;258    //				TsyncLowTime = (TsyncFallingStartTime-TsyncRisingStartTime);
;;;259    				TsyncLowTime = (TsyncFallingStartTime-TsyncRisingStartTime)/(TMCU_MAIN_TRIM_CLOCK_SPEED*1000);  // msec
;;;260    				TsyncLowTime = (TsyncFallingStartTime-TsyncRisingStartTime)/(TMCU_MAIN_TRIM_CLOCK_SPEED);  // usec
0000de  2248              MOVS     r2,#0x48
0000e0  2300              MOVS     r3,#0
0000e2  f7fffffe          BL       __aeabi_uldivmod
;;;261    				if(TsyncLowTime < 3500)  // Tsync In Low 3.5ms check...
0000e6  f64052ac          MOV      r2,#0xdac
0000ea  e9c50106          STRD     r0,r1,[r5,#0x18]
0000ee  1a80              SUBS     r0,r0,r2
0000f0  f1710000          SBCS     r0,r1,#0
;;;262    				{
;;;263    					abnormalTsyncLowTime = YES;
;;;264    					//Reset mspi mux count
;;;265    					MSPI->SPISTART = 0x3F;
;;;266    				}
;;;267    				else
;;;268    				{
;;;269    					abnormalTsyncLowTime = NO;
0000f4  bf28              IT       CS
0000f6  706e              STRBCS   r6,[r5,#1]
0000f8  d205              BCS      |L11.262|
0000fa  4926              LDR      r1,|L11.404|
0000fc  f8859001          STRB     r9,[r5,#1]            ;263
000100  203f              MOVS     r0,#0x3f              ;265
000102  f8c100d4          STR      r0,[r1,#0xd4]         ;265
                  |L11.262|
;;;270    				}
;;;271    			}
;;;272    #endif
;;;273    
;;;274    #if (USED_TPIC_MUXEN_ON_OFF_CONTROL && USED_TPIC_MUXEN_OFF_TIMING_LAST_PWM == NO)
;;;275    			if(HAL_GetTPICMuxEnControl())
;;;276                {
;;;277        			GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 0;
;;;278                }
;;;279    #endif /* (USED_TPIC_MUXEN_ON_OFF_CONTROL && USED_TPIC_MUXEN_OFF_TIMING_LAST_PWM == NO) */
;;;280    		}
;;;281    	}
;;;282    	
;;;283    	if(PWMDRV->INTR_ST_b.MIS_VSYNC_IN_EXT != 0)
000106  f8d40160          LDR      r0,[r4,#0x160]
00010a  f0100f02          TST      r0,#2
00010e  d019              BEQ      |L11.324|
;;;284    	{
;;;285    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;286    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;287    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;288    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;289    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;290    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;291    
;;;292    #if USED_ESD_RECOVERY_CODE
;;;293    		if(AbnormalTsyncCheckEn)
;;;294    		{
;;;295    			ScanTime2 = (uint64_t)getLongSysTick();
;;;296    			if(StartTime2 > ScanTime2)
;;;297    			{
;;;298    				VsynPeriod = (StartTime2-ScanTime2)/(TMCU_MAIN_TRIM_CLOCK_SPEED*1000);
;;;299    				if(VsynPeriod < 12/*16.6ms(60Hz)-2.5ms-1ms*/ || VsynPeriod > 36/*33.3ms(30Hz)+2.5ms*/)
;;;300    				{
;;;301    					if(GPIO->tGPIO_DATA_1._GPIO_LCD_ON == 0x1)
;;;302    					{
;;;303    						//Reset mspi mux count
;;;304    						MSPI->SPISTART = 0x3F;
;;;305    					}
;;;306    				}
;;;307    			}
;;;308    		}
;;;309    		StartTime2 = (uint64_t)getLongSysTick();
;;;310    #endif /* USED_ESD_RECOVERY_CODE */ 
;;;311    		
;;;312    		PWMDRV->INTR_CLR_b.VSYNC_IN_EXT = 0x1;
000110  f8d4015c          LDR      r0,[r4,#0x15c]
000114  f0400002          ORR      r0,r0,#2
000118  f8c4015c          STR      r0,[r4,#0x15c]
;;;313    		tHalIntrHandle.ulVSyncFlag = 1;
00011c  f8c79008          STR      r9,[r7,#8]  ; tHalIntrHandle
;;;314    
;;;315    		tHalIntrHandle.ulTSyncInBothEdgeCnt = 0;
000120  60fe              STR      r6,[r7,#0xc]  ; tHalIntrHandle
;;;316    		tHalIntrHandle.ulTSyncInFallingCnt = 0;
000122  613e              STR      r6,[r7,#0x10]  ; tHalIntrHandle
;;;317    		tHalIntrHandle.ulTSyncInRisingCnt = 0;
000124  617e              STR      r6,[r7,#0x14]  ; tHalIntrHandle
;;;318    
;;;319    		if(tHalIntrHandle.ulInitFirstFrame < 20)
000126  69b8              LDR      r0,[r7,#0x18]  ; tHalIntrHandle
000128  2814              CMP      r0,#0x14
00012a  d202              BCS      |L11.306|
;;;320    		{
;;;321    			tHalIntrHandle.ulInitFirstFrame++;
00012c  69b8              LDR      r0,[r7,#0x18]  ; tHalIntrHandle
00012e  1c40              ADDS     r0,r0,#1
000130  61b8              STR      r0,[r7,#0x18]  ; tHalIntrHandle
                  |L11.306|
;;;322    		}
;;;323    
;;;324    		if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
000132  f7fffffe          BL       HAL_GetSensingChangeMode
000136  f7fffffe          BL       HAL_CheckSensningModeChange
00013a  2800              CMP      r0,#0
;;;325    		{
;;;326    			HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
00013c  bf1c              ITT      NE
00013e  2000              MOVNE    r0,#0
000140  f7fffffe          BLNE     HAL_SetSensingChangeMode
                  |L11.324|
;;;327    		}
;;;328    #if USED_ESD_RECOVERY_CODE
;;;329    		if(MUX_COUNT_ERROR == YES)
;;;330    		{
;;;331    			MSPI->SPISTART = 0x3F;
;;;332    		}
;;;333    		FSM_ON_FLAG 	= NO;
;;;334    		MUX_COUNT_ERROR = NO;
;;;335    #endif /* USED_ESD_RECOVERY_CODE */
;;;336    	}
;;;337    
;;;338    	if(PWMDRV->INTR_ST_b.MIS_FSM_ON != 0)
000144  f8d40160          LDR      r0,[r4,#0x160]
000148  f0100f01          TST      r0,#1
;;;339    	{		
;;;340    		PWMDRV->INTR_CLR_b.FSM_ON = 0x1;
;;;341    
;;;342    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;343    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;344    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;345    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;346    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;347    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;348    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 1; // SWV
;;;349    //		GPIO->tGPIO_DATA_1.tBit.GPA33 = 0;
;;;350    
;;;351    #if USED_TPIC_MUXEN_ON_OFF_CONTROL 
;;;352    #if USED_TPIC_MUXEN_OFF_TIMING_LAST_PWM
;;;353    		if(HAL_GetTPICMuxEnControl())
;;;354            {
;;;355    			GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 0;
;;;356            }
;;;357    #elif USED_LPWG_MODE_CONTROL
;;;358    		if(IS_LPWG_MODE(HAL_GetSensingMode()))
;;;359    		{
;;;360    			if(HAL_GetTPICMuxEnControl())
;;;361                {
;;;362        			GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 0;
;;;363                }
;;;364    		}
;;;365    #endif /* USED_TPIC_MUXEN_OFF_TIMING_LAST_PWM */
;;;366    #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */
;;;367    		
;;;368    #if USED_ECLK_ON_OFF_CONTROL
;;;369    		if(HAL_GetECLKOnOffControl())
;;;370    		{
;;;371    			HAL_ECLK_Off();
;;;372    		}
;;;373    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;374    
;;;375    #if USED_ESD_RECOVERY_CODE
;;;376    		FSM_ON_FLAG = YES;
;;;377    #endif /* USED_ESD_RECOVERY_CODE */
;;;378    	}
;;;379    #ifdef MODE_I2C
;;;380    	QueueCommonData_I2C();
;;;381    #else
;;;382    //	QueueCommonData_USB();
;;;383    #endif
;;;384    }
00014c  bf08              IT       EQ
00014e  e8bd9ff0          POPEQ    {r4-r12,pc}
000152  f8d4015c          LDR      r0,[r4,#0x15c]        ;340
000156  f0400001          ORR      r0,r0,#1              ;340
00015a  f8c4015c          STR      r0,[r4,#0x15c]        ;340
00015e  f7fffffe          BL       HAL_GetTPICMuxEnControl
000162  b128              CBZ      r0,|L11.368|
000164  f8d80004          LDR      r0,[r8,#4]            ;355
000168  f0200010          BIC      r0,r0,#0x10           ;355
00016c  f8c80004          STR      r0,[r8,#4]            ;355
                  |L11.368|
000170  f7fffffe          BL       HAL_GetECLKOnOffControl
000174  2800              CMP      r0,#0                 ;369
000176  bf08              IT       EQ
000178  e8bd9ff0          POPEQ    {r4-r12,pc}
00017c  e8bd5ff0          POP      {r4-r12,lr}           ;371
000180  f7ffbffe          B.W      HAL_ECLK_Off
;;;385    
                          ENDP

                  |L11.388|
                          DCD      0x40007000
                  |L11.392|
                          DCD      tHalIntrHandle
                  |L11.396|
                          DCD      _systick_high_rank_count_
                  |L11.400|
                          DCD      ||.data||
                  |L11.404|
                          DCD      0x40005000

                          AREA ||i.PWMDRV_InterruptHandler_LPWG||, CODE, READONLY, ALIGN=1

                  PWMDRV_InterruptHandler_LPWG PROC
;;;395    
;;;396    void PWMDRV_InterruptHandler_LPWG(void)
000000  f04f2040          MOV      r0,#0x40004000
;;;397    {
;;;398    	if(PWMDRV->INTR_ST_b.MIS_FSM_ON != 0)
000004  f8d01160          LDR      r1,[r0,#0x160]
000008  f0110f01          TST      r1,#1
00000c  d005              BEQ      |L12.26|
;;;399    	{
;;;400    		PWMDRV->INTR_CLR_b.FSM_ON = 0x1;
00000e  f8d0115c          LDR      r1,[r0,#0x15c]
000012  f0410101          ORR      r1,r1,#1
000016  f8c0115c          STR      r1,[r0,#0x15c]
                  |L12.26|
;;;401    	}
;;;402    
;;;403    //	if(PWMDRV->INTR_ST_b.MIS_VSYNC_IN_EXT != 0)
;;;404    //	{
;;;405    //		PWMDRV->INTR_CLR_b.VSYNC_IN_EXT = 0x1;
;;;406    ////#if (USED_OPERATION_STAND_ALONE_DISPLAY_ON)
;;;407    //		gTSyncInFallingCnt = 0;
;;;408    //		gulTsyncBothEdgeCnt = 0;
;;;409    ////#endif /* (USED_OPERATION_STAND_ALONE_DISPLAY_ON) */
;;;410    //
;;;411    //		if(HAL_CheckSensningModeChange(HAL_GetSensingChangeMode()))
;;;412    //		{
;;;413    //			HAL_SetSensingChangeMode(SM_CHANGE_COMPLETE);
;;;414    //		}
;;;415    //	}
;;;416    
;;;417    	if(PWMDRV->INTR_ST_b.MIS_TSYNC_OUT_EXT != 0)
00001a  f8d01160          LDR      r1,[r0,#0x160]
00001e  f0110f08          TST      r1,#8
000022  d005              BEQ      |L12.48|
;;;418    	{
;;;419    		PWMDRV->INTR_CLR_b.TSYNC_OUT_EXT = 0x1;
000024  f8d0115c          LDR      r1,[r0,#0x15c]
000028  f0410108          ORR      r1,r1,#8
00002c  f8c0115c          STR      r1,[r0,#0x15c]
                  |L12.48|
;;;420    	}
;;;421    
;;;422    #ifdef MODE_I2C
;;;423    	QueueCommonData_I2C();
;;;424    #else
;;;425    	QueueCommonData_USB();
000030  f7ffbffe          B.W      QueueCommonData_USB
;;;426    #endif
;;;427    }
;;;428    
                          ENDP


                          AREA ||i.PWMDRV_InterruptHandler_PartialScan||, CODE, READONLY, ALIGN=1

                  PWMDRV_InterruptHandler_PartialScan PROC
;;;385    
;;;386    void PWMDRV_InterruptHandler_PartialScan(void)
000000  f7ffbffe          B.W      QueueCommonData_USB
;;;387    {
;;;388    
;;;389    #ifdef MODE_I2C
;;;390    	QueueCommonData_I2C();
;;;391    #else
;;;392    	QueueCommonData_USB();
;;;393    #endif
;;;394    }
;;;395    
                          ENDP


                          AREA ||i.PWMDRV_PN_D_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_PN_D_ACT PROC
;;;666    
;;;667    void PWMDRV_PN_D_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;668    {
;;;669    	PWMDRV->PN_D_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc50a0          LDR      r5,[r12,#0xa0]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc50a0          STR      r5,[r12,#0xa0]
;;;670    	PWMDRV->PN_D_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc00a0          LDR      r0,[r12,#0xa0]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc00a0          STR      r0,[r12,#0xa0]
;;;671    	PWMDRV->PN_D_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc00a4          LDR      r0,[r12,#0xa4]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc00a4          STR      r0,[r12,#0xa4]
;;;672    	PWMDRV->PN_D_ACT_1_b.DLY      = DLY;
00002c  f8dc00a4          LDR      r0,[r12,#0xa4]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc00a4          STR      r0,[r12,#0xa4]
;;;673    	PWMDRV->PN_D_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc00a8          LDR      r0,[r12,#0xa8]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc00a8          STR      r0,[r12,#0xa8]
;;;674    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;675    
                          ENDP


                          AREA ||i.PWMDRV_PN_P_ACT||, CODE, READONLY, ALIGN=1

                  PWMDRV_PN_P_ACT PROC
;;;657    
;;;658    void PWMDRV_PN_P_ACT(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t DLY, uint16_t LINE_NUM)
000000  b430              PUSH     {r4,r5}
;;;659    {
;;;660    	PWMDRV->PN_P_ACT_0_b.TX_PRD   = TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc5094          LDR      r5,[r12,#0x94]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc5094          STR      r5,[r12,#0x94]
;;;661    	PWMDRV->PN_P_ACT_0_b.TX_LOW   = TX_LOW;
000014  f8dc0094          LDR      r0,[r12,#0x94]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc0094          STR      r0,[r12,#0x94]
;;;662    	PWMDRV->PN_P_ACT_1_b.TX_NUM   = TX_NUM;
000020  f8dc0098          LDR      r0,[r12,#0x98]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc0098          STR      r0,[r12,#0x98]
;;;663    	PWMDRV->PN_P_ACT_1_b.DLY      = DLY;
00002c  f8dc0098          LDR      r0,[r12,#0x98]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc0098          STR      r0,[r12,#0x98]
;;;664    	PWMDRV->PN_P_ACT_2_b.LINE_NUM = LINE_NUM;
000038  f8dc009c          LDR      r0,[r12,#0x9c]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc009c          STR      r0,[r12,#0x9c]
;;;665    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;666    
                          ENDP


                          AREA ||i.PWMDRV_PRE||, CODE, READONLY, ALIGN=1

                  PWMDRV_PRE PROC
;;;602    
;;;603    void PWMDRV_PRE(uint16_t TX_PRD, uint16_t TX_LOW, uint16_t TX_NUM, uint16_t PRE_DLY, uint16_t DSSS_DLY)
000000  b430              PUSH     {r4,r5}
;;;604    {
;;;605    	PWMDRV->PRE_0_b.TX_PRD		= TX_PRD;
000002  f04f2c40          MOV      r12,#0x40004000
000006  9c02              LDR      r4,[sp,#8]
000008  f8dc504c          LDR      r5,[r12,#0x4c]
00000c  f360050f          BFI      r5,r0,#0,#16
000010  f8cc504c          STR      r5,[r12,#0x4c]
;;;606    	PWMDRV->PRE_0_b.TX_LOW		= TX_LOW;
000014  f8dc004c          LDR      r0,[r12,#0x4c]
000018  f361401f          BFI      r0,r1,#16,#16
00001c  f8cc004c          STR      r0,[r12,#0x4c]
;;;607    	PWMDRV->PRE_1_b.TX_NUM		= TX_NUM;
000020  f8dc0050          LDR      r0,[r12,#0x50]
000024  f3620009          BFI      r0,r2,#0,#10
000028  f8cc0050          STR      r0,[r12,#0x50]
;;;608    	PWMDRV->PRE_1_b.PRE_DLY		= PRE_DLY;
00002c  f8dc0050          LDR      r0,[r12,#0x50]
000030  f3632099          BFI      r0,r3,#10,#16
000034  f8cc0050          STR      r0,[r12,#0x50]
;;;609    	PWMDRV->PRE_2_b.DSSS_DLY	= DSSS_DLY;
000038  f8dc0054          LDR      r0,[r12,#0x54]
00003c  f3640007          BFI      r0,r4,#0,#8
000040  f8cc0054          STR      r0,[r12,#0x54]
;;;610    }
000044  bc30              POP      {r4,r5}
000046  4770              BX       lr
;;;611    
                          ENDP


                          AREA ||i.PWMDRV_SectionEnable||, CODE, READONLY, ALIGN=2

                  PWMDRV_SectionEnable PROC
;;;701    
;;;702    void PWMDRV_SectionEnable(eSENSING_MODE_t mode)
000000  f4104f80          TST      r0,#0x4000
;;;703    {
;;;704    	if(IS_FINGER_PEN_MODE(mode))
;;;705    	{
;;;706    		PWMDRV->ENA_PWM_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_ENA_PWM[ePWM_PARAM_PEN].ulBulk;
000004  4805              LDR      r0,|L17.28|
000006  f04f2140          MOV      r1,#0x40004000
00000a  6840              LDR      r0,[r0,#4]
00000c  bf14              ITE      NE
00000e  f8d00061          LDRNE    r0,[r0,#0x61]
;;;707    	}
;;;708    	else
;;;709    	{
;;;710    		PWMDRV->ENA_PWM_0 = s_pktHalPwmdrvCommonConf->tPWMDRV_ENA_PWM[ePWM_PARAM_FINGER].ulBulk;
000012  f8d0005d          LDREQ    r0,[r0,#0x5d]
000016  f8c10130          STR      r0,[r1,#0x130]        ;706
;;;711    	}
;;;712    }
00001a  4770              BX       lr
;;;713    
                          ENDP

                  |L17.28|
                          DCD      ||.data||

                          AREA ||i.PWMDRV_Set_DSSS||, CODE, READONLY, ALIGN=2

                  PWMDRV_Set_DSSS PROC
;;;713    
;;;714    void PWMDRV_Set_DSSS(void)
000000  4814              LDR      r0,|L18.84|
;;;715    {
;;;716    	uint32_t beacon_table = s_pktHalPwmdrvCommonConf->ulBeaconTable;
000002  6840              LDR      r0,[r0,#4]  ; s_pktHalPwmdrvCommonConf
000004  8901              LDRH     r1,[r0,#8]
;;;717    
;;;718    	PWMDRV->DSSS_INFO_1_b.BEACON_D0 = PWMDRV_DSSS_CODE_P;
000006  f04f2040          MOV      r0,#0x40004000
00000a  f8502fe4          LDR      r2,[r0,#0xe4]!
00000e  f022021f          BIC      r2,r2,#0x1f
000012  3210              ADDS     r2,r2,#0x10
000014  6002              STR      r2,[r0,#0]
;;;719    	PWMDRV->DSSS_INFO_1_b.BEACON_D1 = PWMDRV_DSSS_CODE_P;
000016  6802              LDR      r2,[r0,#0]
000018  f4227278          BIC      r2,r2,#0x3e0
00001c  f5027200          ADD      r2,r2,#0x200
000020  6002              STR      r2,[r0,#0]
;;;720        PWMDRV->DSSS_INFO_1_b.BEACON_D2 = beacon_table & 0x0F;
000022  6802              LDR      r2,[r0,#0]
000024  f001030f          AND      r3,r1,#0xf
000028  f363228e          BFI      r2,r3,#10,#5
00002c  6002              STR      r2,[r0,#0]
;;;721    	PWMDRV->DSSS_INFO_1_b.BEACON_D3 = (beacon_table >> 4) & 0x0F;
00002e  6802              LDR      r2,[r0,#0]
000030  f3c11303          UBFX     r3,r1,#4,#4
000034  f36332d3          BFI      r2,r3,#15,#5
000038  6002              STR      r2,[r0,#0]
;;;722    	PWMDRV->DSSS_INFO_1_b.BEACON_D4 = (beacon_table >> 8) & 0x0F;
00003a  f3c12203          UBFX     r2,r1,#8,#4
00003e  6801              LDR      r1,[r0,#0]
000040  f3625118          BFI      r1,r2,#20,#5
000044  6001              STR      r1,[r0,#0]
;;;723        PWMDRV->DSSS_INFO_1_b.BEACON_D5 = 0x0d;
000046  6801              LDR      r1,[r0,#0]
000048  f0215178          BIC      r1,r1,#0x3e000000
00004c  f10151d0          ADD      r1,r1,#0x1a000000
000050  6001              STR      r1,[r0,#0]
;;;724    }
000052  4770              BX       lr
;;;725    
                          ENDP

                  |L18.84|
                          DCD      ||.data||

                          AREA ||i.PWMDRV_Set_Mode||, CODE, READONLY, ALIGN=2

                  PWMDRV_Set_Mode PROC
;;;776    
;;;777    void PWMDRV_Set_Mode(eSENSING_MODE_t mode)
000000  4a15              LDR      r2,|L19.88|
;;;778    {
;;;779    	if(IS_FINGER_PEN_MODE(mode))
000002  f4104f80          TST      r0,#0x4000
;;;780    	{
;;;781    		Fncp_PWMDRV_IRQHandler = &PWMDRV_InterruptHandler_PartialScan;
;;;782    		PWMDRV->FW_CTRL_b.PEN_MODE = 1;
000006  f04f2140          MOV      r1,#0x40004000
00000a  d012              BEQ      |L19.50|
00000c  4813              LDR      r0,|L19.92|
00000e  6010              STR      r0,[r2,#0]  ; Fncp_PWMDRV_IRQHandler
000010  6848              LDR      r0,[r1,#4]
000012  f0400001          ORR      r0,r0,#1
000016  6048              STR      r0,[r1,#4]
;;;783    		PWMDRV->DSSS_CFG_b.beacon_en = 1;
000018  f8d10164          LDR      r0,[r1,#0x164]
00001c  f0400001          ORR      r0,r0,#1
000020  f8c10164          STR      r0,[r1,#0x164]
                  |L19.36|
;;;784    #if USED_WACOM_PEN
;;;785    		PWMDRV->DSSS_CFG_b.ping_en = 1;
;;;786    #else
;;;787    		PWMDRV->DSSS_CFG_b.ping_en = 0;
;;;788    #endif
;;;789    	}
;;;790    	else
;;;791    	{
;;;792    		Fncp_PWMDRV_IRQHandler = &PWMDRV_InterruptHandler_FullScan;
;;;793    		PWMDRV->FW_CTRL_b.PEN_MODE = 0;
;;;794    		if(IS_FINGER_PEN_SEARCH_MODE(mode))
;;;795    		{
;;;796    			PWMDRV->DSSS_CFG_b.beacon_en = 1;
;;;797    		}
;;;798    		else
;;;799    		{
;;;800    			PWMDRV->DSSS_CFG_b.beacon_en = 0;
;;;801    		}
;;;802    		PWMDRV->DSSS_CFG_b.ping_en = 0;
000024  f8d10164          LDR      r0,[r1,#0x164]
000028  f0200002          BIC      r0,r0,#2
00002c  f8c10164          STR      r0,[r1,#0x164]
;;;803    	}
;;;804    }
000030  4770              BX       lr
                  |L19.50|
000032  4b0b              LDR      r3,|L19.96|
000034  6013              STR      r3,[r2,#0]            ;793  ; Fncp_PWMDRV_IRQHandler
000036  684a              LDR      r2,[r1,#4]            ;793
000038  f0220201          BIC      r2,r2,#1              ;793
00003c  604a              STR      r2,[r1,#4]            ;793
00003e  f4105f00          TST      r0,#0x2000            ;794
000042  f8d10164          LDR      r0,[r1,#0x164]        ;800
000046  bf14              ITE      NE                    ;796
000048  f0400001          ORRNE    r0,r0,#1              ;796
00004c  f0200001          BICEQ    r0,r0,#1              ;800
000050  f8c10164          STR      r0,[r1,#0x164]        ;800
000054  e7e6              B        |L19.36|
                          ENDP

000056  0000              DCW      0x0000
                  |L19.88|
                          DCD      Fncp_PWMDRV_IRQHandler
                  |L19.92|
                          DCD      PWMDRV_InterruptHandler_PartialScan
                  |L19.96|
                          DCD      PWMDRV_InterruptHandler_FullScan

                          AREA ||i.PWMDRV_Set_Pulse_Config||, CODE, READONLY, ALIGN=2

                  PWMDRV_Set_Pulse_Config PROC
;;;734    
;;;735    void PWMDRV_Set_Pulse_Config(eSENSING_MODE_t eSensingMode)
000000  e92d0ff0          PUSH     {r4-r11}
;;;736    {
;;;737    	if(IS_ACTIVE_MODE(eSensingMode))
;;;738    	{
;;;739    		uint8_t ucActNum;
;;;740    		uint16_t ulNormalFreq;
;;;741    		uint16_t ulPWMIntervalDly;
;;;742    		
;;;743    		if(IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
;;;744    		{
;;;745    			ulNormalFreq = s_pktHalPwmdrvCommonConf->usPwmFreq;
000004  4968              LDR      r1,|L20.424|
000006  f0100301          ANDS     r3,r0,#1              ;737
;;;746    			ucActNum = s_pktHalPwmdrvCommonConf->ucPwmFingerActNum;
;;;747    			ulPWMIntervalDly = s_pktHalPwmdrvCommonConf->usFullFingerPWMIntervalDly;
;;;748    		}
;;;749    		else if(IS_ACTIVE_MODE_FRQ_HOP1(eSensingMode))
;;;750    		{
;;;751    			ulNormalFreq = s_pktHalPwmdrvCommonConf->usPwmNiFreq1;
;;;752    			ucActNum = s_pktHalPwmdrvCommonConf->ucPwmNiActNum;
;;;753    			ulPWMIntervalDly = s_pktHalPwmdrvCommonConf->usFullFingerPWMIntervalDly << 1;
;;;754    		}
;;;755    
;;;756    		PWMDRV_PRE(PWM_Full_PRD_KHz(ulNormalFreq),
;;;757    				PWM_Half_PRD_KHz(ulNormalFreq),
00000a  684a              LDR      r2,[r1,#4]
00000c  f04f2140          MOV      r1,#0x40004000
000010  f892c00f          LDRB     r12,[r2,#0xf]
000014  d07b              BEQ      |L20.270|
000016  f0100f02          TST      r0,#2                 ;743
00001a  d005              BEQ      |L20.40|
00001c  f8b2300d          LDRH     r3,[r2,#0xd]          ;745
000020  7c55              LDRB     r5,[r2,#0x11]         ;746
000022  f8b24021          LDRH     r4,[r2,#0x21]         ;747
000026  e00b              B        |L20.64|
                  |L20.40|
000028  f0100f04          TST      r0,#4                 ;749
00002c  d008              BEQ      |L20.64|
00002e  f8b20021          LDRH     r0,[r2,#0x21]         ;753
000032  f8b2301d          LDRH     r3,[r2,#0x1d]         ;751
000036  7fd5              LDRB     r5,[r2,#0x1f]         ;752
000038  f64f74ff          MOV      r4,#0xffff            ;753
00003c  ea040440          AND      r4,r4,r0,LSL #1       ;753
                  |L20.64|
000040  f64266e0          MOV      r6,#0x2ee0            ;756
000044  1077              ASRS     r7,r6,#1
000046  2b00              CMP      r3,#0                 ;756
000048  bf1f              ITTTT    NE                    ;756
00004a  fbb6f0f3          UDIVNE   r0,r6,r3              ;756
00004e  1e80              SUBNE    r0,r0,#2              ;756
000050  fa1ff880          UXTHNE   r8,r0                 ;756
000054  fbb7f0f3          UDIVNE   r0,r7,r3
000058  bf12              ITEE     NE
00005a  1e80              SUBNE    r0,r0,#2
00005c  f04f0800          MOVEQ    r8,#0                 ;756
000060  4640              MOVEQ    r0,r8
000062  f8b29032          LDRH     r9,[r2,#0x32]
000066  f892a034          LDRB     r10,[r2,#0x34]
00006a  ea49490a          ORR      r9,r9,r10,LSL #16
00006e  ea4f0a99          LSR      r10,r9,#2
000072  f8929035          LDRB     r9,[r2,#0x35]
000076  f8d1b04c          LDR      r11,[r1,#0x4c]
00007a  f3680b0f          BFI      r11,r8,#0,#16
00007e  f8c1b04c          STR      r11,[r1,#0x4c]
000082  f8d1804c          LDR      r8,[r1,#0x4c]
000086  f360481f          BFI      r8,r0,#16,#16
00008a  f8c1804c          STR      r8,[r1,#0x4c]
00008e  6d08              LDR      r0,[r1,#0x50]
000090  f36c0009          BFI      r0,r12,#0,#10
000094  6508              STR      r0,[r1,#0x50]
000096  6d08              LDR      r0,[r1,#0x50]
000098  f36a2099          BFI      r0,r10,#10,#16
00009c  6508              STR      r0,[r1,#0x50]
00009e  6d48              LDR      r0,[r1,#0x54]
0000a0  f3690007          BFI      r0,r9,#0,#8
0000a4  6548              STR      r0,[r1,#0x54]
;;;758    				s_pktHalPwmdrvCommonConf->ucPwmPreNum,
;;;759    				s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_1.tBit.PRE_DLY,
;;;760    				s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_2.tBit.DSSS_DLY);
;;;761    
;;;762    		PWMDRV_FG_F_F0_ACT(PWM_Full_PRD_KHz(ulNormalFreq),
0000a6  bf04              ITT      EQ
0000a8  f04f0c00          MOVEQ    r12,#0
;;;763    				PWM_Half_PRD_KHz(ulNormalFreq),
0000ac  4660              MOVEQ    r0,r12
0000ae  d009              BEQ      |L20.196|
0000b0  fbb6f0f3          UDIV     r0,r6,r3              ;762
0000b4  f1a00002          SUB      r0,r0,#2              ;762
0000b8  fa1ffc80          UXTH     r12,r0                ;762
0000bc  fbb7f0f3          UDIV     r0,r7,r3
0000c0  f1a00002          SUB      r0,r0,#2
                  |L20.196|
0000c4  7c13              LDRB     r3,[r2,#0x10]
0000c6  7c92              LDRB     r2,[r2,#0x12]
0000c8  442b              ADD      r3,r3,r5
0000ca  f8d150ac          LDR      r5,[r1,#0xac]
0000ce  f36c050f          BFI      r5,r12,#0,#16
0000d2  f8c150ac          STR      r5,[r1,#0xac]
0000d6  f8d1c0ac          LDR      r12,[r1,#0xac]
0000da  f3604c1f          BFI      r12,r0,#16,#16
0000de  f8c1c0ac          STR      r12,[r1,#0xac]
0000e2  f8d100b0          LDR      r0,[r1,#0xb0]
0000e6  f3630009          BFI      r0,r3,#0,#10
0000ea  f8c100b0          STR      r0,[r1,#0xb0]
0000ee  f8d100b0          LDR      r0,[r1,#0xb0]
0000f2  f3642099          BFI      r0,r4,#10,#16
0000f6  f8c100b0          STR      r0,[r1,#0xb0]
0000fa  f8d100b4          LDR      r0,[r1,#0xb4]
0000fe  f3620007          BFI      r0,r2,#0,#8
000102  f8c100b4          STR      r0,[r1,#0xb4]
;;;764    				(s_pktHalPwmdrvCommonConf->ucPwmSetNum + ucActNum),
;;;765    				ulPWMIntervalDly,
;;;766    				s_pktHalPwmdrvCommonConf->ucPwmFinger1LHBMuxNum);
;;;767    	}
;;;768    	else
;;;769    	{
;;;770    		PWMDRV_PRE(97, 48, s_pktHalPwmdrvCommonConf->ucPwmPreNum, s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_1.tBit.PRE_DLY, s_pktHalPwmdrvCommonConf->tPWMDRV_PRE_2.tBit.DSSS_DLY);
;;;771    
;;;772    		PWMDRV_FG_F_F0_ACT(97, 48, (s_pktHalPwmdrvCommonConf->ucPwmSetNum + s_pktHalPwmdrvCommonConf->ucPwmNiActNum), s_pktHalPwmdrvCommonConf->usFullFingerPWMIntervalDly, s_pktHalPwmdrvCommonConf
;;;773    									->ucPwmNi1LHBMuxNum);
;;;774    	}
;;;775    }
000106  e8bd0ff0          POP      {r4-r11}
00010a  4770              BX       lr
00010c  e7ff              B        |L20.270|
                  |L20.270|
00010e  8e50              LDRH     r0,[r2,#0x32]         ;770
000110  f04f0561          MOV      r5,#0x61              ;770
000114  f04f0330          MOV      r3,#0x30              ;770
000118  f8924034          LDRB     r4,[r2,#0x34]         ;770
00011c  ea404004          ORR      r0,r0,r4,LSL #16      ;770
000120  f8924035          LDRB     r4,[r2,#0x35]         ;770
000124  ea4f0090          LSR      r0,r0,#2              ;770
000128  6cce              LDR      r6,[r1,#0x4c]         ;770
00012a  f365060f          BFI      r6,r5,#0,#16          ;770
00012e  64ce              STR      r6,[r1,#0x4c]         ;770
000130  6ccd              LDR      r5,[r1,#0x4c]         ;770
000132  f363451f          BFI      r5,r3,#16,#16         ;770
000136  64cd              STR      r5,[r1,#0x4c]         ;770
000138  6d0b              LDR      r3,[r1,#0x50]         ;770
00013a  f36c0309          BFI      r3,r12,#0,#10         ;770
00013e  650b              STR      r3,[r1,#0x50]         ;770
000140  6d0b              LDR      r3,[r1,#0x50]         ;770
000142  f3602399          BFI      r3,r0,#10,#16         ;770
000146  650b              STR      r3,[r1,#0x50]         ;770
000148  6d48              LDR      r0,[r1,#0x54]         ;770
00014a  f3640007          BFI      r0,r4,#0,#8           ;770
00014e  6548              STR      r0,[r1,#0x54]         ;770
000150  7c10              LDRB     r0,[r2,#0x10]         ;772
000152  7fd4              LDRB     r4,[r2,#0x1f]         ;772
000154  f8d150ac          LDR      r5,[r1,#0xac]         ;772
000158  4420              ADD      r0,r0,r4              ;772
00015a  f8b24021          LDRH     r4,[r2,#0x21]         ;772
00015e  f8922020          LDRB     r2,[r2,#0x20]         ;772
000162  f04f0c61          MOV      r12,#0x61             ;772
000166  f04f0330          MOV      r3,#0x30              ;772
00016a  f36c050f          BFI      r5,r12,#0,#16         ;772
00016e  f8c150ac          STR      r5,[r1,#0xac]         ;772
000172  f8d1c0ac          LDR      r12,[r1,#0xac]        ;772
000176  f3634c1f          BFI      r12,r3,#16,#16        ;772
00017a  f8c1c0ac          STR      r12,[r1,#0xac]        ;772
00017e  f8d130b0          LDR      r3,[r1,#0xb0]         ;772
000182  f3600309          BFI      r3,r0,#0,#10          ;772
000186  f8c130b0          STR      r3,[r1,#0xb0]         ;772
00018a  f8d100b0          LDR      r0,[r1,#0xb0]         ;772
00018e  f3642099          BFI      r0,r4,#10,#16         ;772
000192  f8c100b0          STR      r0,[r1,#0xb0]         ;772
000196  f8d100b4          LDR      r0,[r1,#0xb4]         ;772
00019a  f3620007          BFI      r0,r2,#0,#8           ;772
00019e  f8c100b4          STR      r0,[r1,#0xb4]         ;772
0001a2  e8bd0ff0          POP      {r4-r11}
0001a6  4770              BX       lr
;;;776    
                          ENDP

                  |L20.424|
                          DCD      ||.data||

                          AREA ||i.PWMDRV_Set_VSWT||, CODE, READONLY, ALIGN=1

                  PWMDRV_Set_VSWT PROC
;;;725    
;;;726    void PWMDRV_Set_VSWT(void)
000000  f04f2040          MOV      r0,#0x40004000
;;;727    {
;;;728    	PWMDRV->VSWT_CFG_1_b.DLY_SEL_PWM_PRE = 0;
000004  f8d01144          LDR      r1,[r0,#0x144]
000008  f0210138          BIC      r1,r1,#0x38
00000c  f8c01144          STR      r1,[r0,#0x144]
;;;729    	PWMDRV->VSWT_CFG_1_b.DLY_SEL_PWM_ACT = 0;
000010  f8d01144          LDR      r1,[r0,#0x144]
000014  f42171e0          BIC      r1,r1,#0x1c0
000018  f8c01144          STR      r1,[r0,#0x144]
;;;730    	PWMDRV->VSWT_CFG_0_b.SEL_1_pwm_tx = 2;
00001c  f8d01140          LDR      r1,[r0,#0x140]
000020  f02161c0          BIC      r1,r1,#0x6000000
000024  f1016180          ADD      r1,r1,#0x4000000
000028  f8c01140          STR      r1,[r0,#0x140]
;;;731    	PWMDRV->VSWT_CFG_1_b.DLY_ENA_PWM_TX = 1;
00002c  f8d01144          LDR      r1,[r0,#0x144]
000030  f4417100          ORR      r1,r1,#0x200
000034  f8c01144          STR      r1,[r0,#0x144]
;;;732    	PWMDRV->DLY_PWM_CFG_0_b.TX = 1;
000038  f8d01148          LDR      r1,[r0,#0x148]
00003c  f36f010f          BFC      r1,#0,#16
000040  1c49              ADDS     r1,r1,#1
000042  f8c01148          STR      r1,[r0,#0x148]
;;;733    }
000046  4770              BX       lr
;;;734    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=3

                  SkipFrameCnt
000000  00                DCB      0x00
                  abnormalTsyncLowTime
000001  000000            DCB      0x00,0x00,0x00
                  s_pktHalPwmdrvCommonConf
                          DCD      0x00000000
                  TsyncFallingStartTime
                          %        8
                  TsyncRisingStartTime
                          %        8
                  TsyncLowTime
                          %        8

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  FLAG_30Hz
000000  03                DCB      0x03

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  IDLE_FLAG
000000  00                DCB      0x00

                          AREA ||area_number.27||, DATA, ALIGN=3

                          EXPORTAS ||area_number.27||, ||.data||
                  StartTime
                          %        8

                          AREA ||area_number.28||, DATA, ALIGN=3

                          EXPORTAS ||area_number.28||, ||.data||
                  StartTime2
                          %        8

                          AREA ||area_number.29||, DATA, ALIGN=3

                          EXPORTAS ||area_number.29||, ||.data||
                  ScanTime
                          %        8

                          AREA ||area_number.30||, DATA, ALIGN=3

                          EXPORTAS ||area_number.30||, ||.data||
                  ScanTime2
                          %        8

                          AREA ||area_number.31||, DATA, ALIGN=3

                          EXPORTAS ||area_number.31||, ||.data||
                  VsynPeriod
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\pwmdrv\\pwmdrv.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_pwmdrv_c_7aa9114f____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___8_pwmdrv_c_7aa9114f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_pwmdrv_c_7aa9114f____REVSH|
#line 402
|__asm___8_pwmdrv_c_7aa9114f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_pwmdrv_c_7aa9114f____RRX|
#line 587
|__asm___8_pwmdrv_c_7aa9114f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
