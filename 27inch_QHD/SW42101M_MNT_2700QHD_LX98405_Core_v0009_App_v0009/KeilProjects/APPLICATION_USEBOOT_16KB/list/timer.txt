; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\timer.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\timer.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\timer.crf ..\..\Hal\timer\timer.c]
                          THUMB

                          AREA ||i.HAL_Observe_Timer_Clear||, CODE, READONLY, ALIGN=1

                  HAL_Observe_Timer_Clear PROC
;;;400    
;;;401    void HAL_Observe_Timer_Clear(TIM_Channel TIMx_Chanel)
000000  f7ffbffe          B.W      TIM_DeInit
;;;402    {
;;;403    	TIM_DeInit(TIMx_Chanel);
;;;404    }
;;;405    
                          ENDP


                          AREA ||i.HAL_Observe_Timer_Disable||, CODE, READONLY, ALIGN=1

                  HAL_Observe_Timer_Disable PROC
;;;405    
;;;406    uint32_t HAL_Observe_Timer_Disable(TIM_Channel TIMx_Chanel)
000000  2000              MOVS     r0,#0
;;;407    {
;;;408    #if 0
;;;409    	TIM_GetCounter(TIMx_Chanel);
;;;410    	TIM_Cmd(TIMx_Chanel, DISABLE);
;;;411    
;;;412    	return (TIM_MAX_CNT_VAL - retval);
;;;413    #endif
;;;414    	return 0;
;;;415    }
000002  4770              BX       lr
;;;416    
                          ENDP


                          AREA ||i.HAL_Observe_Timer_Init||, CODE, READONLY, ALIGN=1

                  HAL_Observe_Timer_Init PROC
;;;382    
;;;383    void HAL_Observe_Timer_Init(TIM_Channel TIMx_Chanel)
000000  b500              PUSH     {lr}
;;;384    {
000002  b083              SUB      sp,sp,#0xc
;;;385    	// 12Mhz(TIMCLK) / 4 DIV = 3Mhz = 0.333us	
;;;386    	// 1 Step Count = 333ns(0.333us)
;;;387    	// ex) Count val: 3 code => 1us, 3000 code => 1ms, 300003 code => 100ms, 3000030 code => 1s
;;;388    	
;;;389    	TIM_TimeBaseInitTypeDef TIM_Init;
;;;390    
;;;391    	TIM_Init.TIM_Channel = TIMx_Chanel;
;;;392    	TIM_Init.TIM_Mode = TIM_Mode_Run;
;;;393    	TIM_Init.TIM_Int_Mask = TIM_INT_Mask_EN;
000004  2101              MOVS     r1,#1
000006  f88d0002          STRB     r0,[sp,#2]            ;391
00000a  2000              MOVS     r0,#0                 ;392
00000c  f88d0000          STRB     r0,[sp,#0]            ;392
000010  f88d1001          STRB     r1,[sp,#1]
000014  f04f22e0          MOV      r2,#0xe000e000
000018  2108              MOVS     r1,#8
00001a  f8c21100          STR      r1,[r2,#0x100]
00001e  1cd1              ADDS     r1,r2,#3
000020  f8810400          STRB     r0,[r1,#0x400]
;;;394    
;;;395    	NVIC_EnableIRQ (TIMER_IRQn);
;;;396    	NVIC_SetPriority(TIMER_IRQn, 0);	
;;;397    
;;;398    	TIM_TimeBaseInit(&TIM_Init);
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;399    }
00002a  b003              ADD      sp,sp,#0xc
00002c  bd00              POP      {pc}
;;;400    
                          ENDP


                          AREA ||i.HAL_Observe_Timer_Start||, CODE, READONLY, ALIGN=1

                  HAL_Observe_Timer_Start PROC
;;;416    
;;;417    void HAL_Observe_Timer_Start(TIM_Channel TIMx_Chanel)
000000  2101              MOVS     r1,#1
;;;418    {
;;;419    	TIM_Cmd(TIMx_Chanel, ENABLE);
000002  f7ffbffe          B.W      TIM_Cmd
;;;420    }
                          ENDP


                          AREA ||i.HAL_Timer_Clear||, CODE, READONLY, ALIGN=1

                  HAL_Timer_Clear PROC
;;;367    
;;;368    void HAL_Timer_Clear(void)
000000  2000              MOVS     r0,#0
;;;369    {
;;;370    	TIM_DeInit(TIM_Channel_0);
000002  f7ffbffe          B.W      TIM_DeInit
;;;371    }
;;;372    
                          ENDP


                          AREA ||i.HAL_Timer_Enable||, CODE, READONLY, ALIGN=2

                  HAL_Timer_Enable PROC
;;;327    
;;;328    void HAL_Timer_Enable(TIM_Channel TIMx_Chanel, FunctionalState En)
000000  4a1e              LDR      r2,|L6.124|
;;;329    {
000002  b1a8              CBZ      r0,|L6.48|
;;;330    	if (TIMx_Chanel == TIM_Channel_0)
;;;331    		TIMER->Timer0_CR_b.Timer0_En = En;
;;;332    	else if (TIMx_Chanel == TIM_Channel_1)
000004  2801              CMP      r0,#1
000006  d018              BEQ      |L6.58|
;;;333    		TIMER->Timer1_CR_b.Timer1_En = En;
;;;334    	else if (TIMx_Chanel == TIM_Channel_2)
000008  2802              CMP      r0,#2
00000a  d01b              BEQ      |L6.68|
;;;335    		TIMER->Timer2_CR_b.Timer2_En = En;
;;;336    	else if (TIMx_Chanel == TIM_Channel_3)
00000c  2803              CMP      r0,#3
00000e  d01e              BEQ      |L6.78|
;;;337    		TIMER->Timer3_CR_b.Timer3_En = En;
;;;338    	else if (TIMx_Chanel == TIM_Channel_4)
000010  2804              CMP      r0,#4
000012  d021              BEQ      |L6.88|
;;;339    		TIMER->Timer4_CR_b.Timer4_En = En;
;;;340    	else if (TIMx_Chanel == TIM_Channel_5)
000014  2805              CMP      r0,#5
000016  d024              BEQ      |L6.98|
;;;341    		TIMER->Timer5_CR_b.Timer5_En = En;
;;;342    	else if (TIMx_Chanel == TIM_Channel_6)
000018  2806              CMP      r0,#6
00001a  d027              BEQ      |L6.108|
;;;343    		TIMER->Timer6_CR_b.Timer6_En = En;
;;;344    	else if (TIMx_Chanel == TIM_Channel_7)
00001c  2807              CMP      r0,#7
;;;345    		TIMER->Timer7_CR_b.Timer7_En = En;
;;;346    }
00001e  bf18              IT       NE
000020  4770              BXNE     lr
000022  f8d20094          LDR      r0,[r2,#0x94]         ;345
000026  f3610000          BFI      r0,r1,#0,#1           ;345
00002a  f8c20094          STR      r0,[r2,#0x94]         ;345
00002e  4770              BX       lr
                  |L6.48|
000030  6890              LDR      r0,[r2,#8]            ;331
000032  f3610000          BFI      r0,r1,#0,#1           ;331
000036  6090              STR      r0,[r2,#8]            ;331
000038  4770              BX       lr
                  |L6.58|
00003a  69d0              LDR      r0,[r2,#0x1c]         ;333
00003c  f3610000          BFI      r0,r1,#0,#1           ;333
000040  61d0              STR      r0,[r2,#0x1c]         ;333
000042  4770              BX       lr
                  |L6.68|
000044  6b10              LDR      r0,[r2,#0x30]         ;335
000046  f3610000          BFI      r0,r1,#0,#1           ;335
00004a  6310              STR      r0,[r2,#0x30]         ;335
00004c  4770              BX       lr
                  |L6.78|
00004e  6c50              LDR      r0,[r2,#0x44]         ;337
000050  f3610000          BFI      r0,r1,#0,#1           ;337
000054  6450              STR      r0,[r2,#0x44]         ;337
000056  4770              BX       lr
                  |L6.88|
000058  6d90              LDR      r0,[r2,#0x58]         ;339
00005a  f3610000          BFI      r0,r1,#0,#1           ;339
00005e  6590              STR      r0,[r2,#0x58]         ;339
000060  4770              BX       lr
                  |L6.98|
000062  6ed0              LDR      r0,[r2,#0x6c]         ;341
000064  f3610000          BFI      r0,r1,#0,#1           ;341
000068  66d0              STR      r0,[r2,#0x6c]         ;341
00006a  4770              BX       lr
                  |L6.108|
00006c  f8d20080          LDR      r0,[r2,#0x80]         ;343
000070  f3610000          BFI      r0,r1,#0,#1           ;343
000074  f8c20080          STR      r0,[r2,#0x80]         ;343
000078  4770              BX       lr
;;;347    
                          ENDP

00007a  0000              DCW      0x0000
                  |L6.124|
                          DCD      0x40006000

                          AREA ||i.HAL_Timer_Get_Counter||, CODE, READONLY, ALIGN=2

                  HAL_Timer_Get_Counter PROC
;;;377    
;;;378    void HAL_Timer_Get_Counter(void)
000000  4801              LDR      r0,|L7.8|
000002  6840              LDR      r0,[r0,#4]
;;;379    {
;;;380    	TIM_GetCounter(TIM_Channel_0);
;;;381    }
000004  4770              BX       lr
;;;382    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x40006000

                          AREA ||i.HAL_Timer_Init||, CODE, READONLY, ALIGN=2

                  HAL_Timer_Init PROC
;;;307    
;;;308    void HAL_Timer_Init(void)
000000  b500              PUSH     {lr}
;;;309    {
;;;310    	// 12Mhz(TIMCLK) / 4 DIV = 3Mhz = 0.333us	
;;;311    	// 1 Step Count = 333ns(0.333us)
;;;312    	// ex) Count val: 3 code => 1us, 3000 code => 1ms, 300003 code => 100ms, 3000030 code => 1s
;;;313    	Fncp_TIMER_IRQHandler = &TIMER_InterruptHandler;
000002  490f              LDR      r1,|L8.64|
000004  b083              SUB      sp,sp,#0xc            ;309
000006  480d              LDR      r0,|L8.60|
;;;314    	
;;;315    	TIM_TimeBaseInitTypeDef TIM_Init;
;;;316    
;;;317    	TIM_Init.TIM_Channel = TIM_Channel_0;
000008  6008              STR      r0,[r1,#0]  ; Fncp_TIMER_IRQHandler
;;;318    	TIM_Init.TIM_Count = 90000;	//30ms 
00000a  490e              LDR      r1,|L8.68|
00000c  2000              MOVS     r0,#0                 ;317
;;;319    	TIM_Init.TIM_Mode = TIM_Mode_Count;
00000e  9101              STR      r1,[sp,#4]
000010  f88d0002          STRB     r0,[sp,#2]            ;317
000014  2101              MOVS     r1,#1
000016  f88d1000          STRB     r1,[sp,#0]
;;;320    	TIM_Init.TIM_Int_Mask = TIM_INT_Mask_DISABLE;
00001a  f88d0001          STRB     r0,[sp,#1]
;;;321    	TIM_TimeBaseInit(&TIM_Init);
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       TIM_TimeBaseInit
000024  f04f21e0          MOV      r1,#0xe000e000
000028  2008              MOVS     r0,#8
00002a  f8c10100          STR      r0,[r1,#0x100]
00002e  20a0              MOVS     r0,#0xa0
000030  1cc9              ADDS     r1,r1,#3
000032  f8810400          STRB     r0,[r1,#0x400]
;;;322    
;;;323    	NVIC_EnableIRQ (TIMER_IRQn);
;;;324    	NVIC_SetPriority(TIMER_IRQn, TIMER_IRQn_Priority);
;;;325    	
;;;326    }
000036  b003              ADD      sp,sp,#0xc
000038  bd00              POP      {pc}
;;;327    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      TIMER_InterruptHandler
                  |L8.64|
                          DCD      Fncp_TIMER_IRQHandler
                  |L8.68|
                          DCD      0x00015f90

                          AREA ||i.HAL_Timer_Set_Count_us||, CODE, READONLY, ALIGN=2

                  HAL_Timer_Set_Count_us PROC
;;;347    
;;;348    void HAL_Timer_Set_Count_us(TIM_Channel TIMx_Chanel, uint32_t Count)
000000  4a11              LDR      r2,|L9.72|
;;;349    {
;;;350    	if (TIMx_Chanel == TIM_Channel_0)
;;;351    		TIMER->Timer0_LoadCount_CR = 3*Count;
000002  eb010141          ADD      r1,r1,r1,LSL #1
000006  2800              CMP      r0,#0                 ;350
000008  bf04              ITT      EQ
00000a  6011              STREQ    r1,[r2,#0]
;;;352    	else if (TIMx_Chanel == TIM_Channel_1)
;;;353    		TIMER->Timer1_LoadCount_CR = 3*Count;
;;;354    	else if (TIMx_Chanel == TIM_Channel_2)
;;;355    		TIMER->Timer2_LoadCount_CR = 3*Count;
;;;356    	else if (TIMx_Chanel == TIM_Channel_3)
;;;357    		TIMER->Timer3_LoadCount_CR = 3*Count;
;;;358    	else if (TIMx_Chanel == TIM_Channel_4)
;;;359    		TIMER->Timer4_LoadCount_CR = 3*Count;
;;;360    	else if (TIMx_Chanel == TIM_Channel_5)
;;;361    		TIMER->Timer5_LoadCount_CR = 3*Count;
;;;362    	else if (TIMx_Chanel == TIM_Channel_6)
;;;363    		TIMER->Timer6_LoadCount_CR = 3*Count;
;;;364    	else if (TIMx_Chanel == TIM_Channel_7)
;;;365    		TIMER->Timer7_LoadCount_CR = 3*Count;
;;;366    }
00000c  4770              BXEQ     lr
00000e  2801              CMP      r0,#1                 ;352
000010  bf04              ITT      EQ                    ;353
000012  6151              STREQ    r1,[r2,#0x14]         ;353
000014  4770              BXEQ     lr
000016  2802              CMP      r0,#2                 ;354
000018  bf04              ITT      EQ                    ;355
00001a  6291              STREQ    r1,[r2,#0x28]         ;355
00001c  4770              BXEQ     lr
00001e  2803              CMP      r0,#3                 ;356
000020  bf04              ITT      EQ                    ;357
000022  63d1              STREQ    r1,[r2,#0x3c]         ;357
000024  4770              BXEQ     lr
000026  2804              CMP      r0,#4                 ;358
000028  bf04              ITT      EQ                    ;359
00002a  6511              STREQ    r1,[r2,#0x50]         ;359
00002c  4770              BXEQ     lr
00002e  2805              CMP      r0,#5                 ;360
000030  bf04              ITT      EQ                    ;361
000032  6651              STREQ    r1,[r2,#0x64]         ;361
000034  4770              BXEQ     lr
000036  2806              CMP      r0,#6                 ;362
000038  bf04              ITT      EQ                    ;363
00003a  6791              STREQ    r1,[r2,#0x78]         ;363
00003c  4770              BXEQ     lr
00003e  2807              CMP      r0,#7                 ;364
000040  bf08              IT       EQ                    ;365
000042  f8c2108c          STREQ    r1,[r2,#0x8c]         ;365
000046  4770              BX       lr
;;;367    
                          ENDP

                  |L9.72|
                          DCD      0x40006000

                          AREA ||i.HAL_Timer_Start||, CODE, READONLY, ALIGN=1

                  HAL_Timer_Start PROC
;;;372    
;;;373    void HAL_Timer_Start(void)
000000  2101              MOVS     r1,#1
;;;374    {
;;;375    	TIM_Cmd(TIM_Channel_0, ENABLE);
000002  2000              MOVS     r0,#0
000004  f7ffbffe          B.W      TIM_Cmd
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.TIMER_InterruptHandler||, CODE, READONLY, ALIGN=2

                  TIMER_InterruptHandler PROC
;;;34     
;;;35     void TIMER_InterruptHandler(void)
000000  4808              LDR      r0,|L11.36|
;;;36     {
;;;37     	HW_REG(TIMER->Timer0_EOI_SR); // interrupt clear
000002  68c1              LDR      r1,[r0,#0xc]
000004  6809              LDR      r1,[r1,#0]
;;;38     	TIMER->Timer0_CR_b.Timer0_En = 0; // Disable timer 0 for LoadCount setting
000006  6881              LDR      r1,[r0,#8]
000008  f0210101          BIC      r1,r1,#1
00000c  6081              STR      r1,[r0,#8]
;;;39     	
;;;40     #if (CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405)
;;;41     	if(GPIO->tGPIO_DATA_1._GPIO_SLEEP_RST == 0x0)
00000e  4806              LDR      r0,|L11.40|
000010  6841              LDR      r1,[r0,#4]
000012  f4114f80          TST      r1,#0x4000
;;;42     	{
;;;43     		GPIO->tGPIO_DATA_1._GPIO_SLEEP_RST = 0x1;
;;;44     		return;
;;;45     	}
;;;46     #endif /* (CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405) */
;;;47     
;;;48     #if USED_LPWG_MODE_CONTROL
;;;49     	PWMDRV->FW_CTRL_b.VSYNC_IN = 1;
;;;50     	GPIO->tGPIO_DATA_1._GPIO_TSYNC_OUT = 0x1;
;;;51     	GPIO->tGPIO_DATA_1._GPIO_TSYNC_OUT = 0x0;
;;;52     	
;;;53     #if USED_TPIC_MUXEN_ON_OFF_CONTROL
;;;54     	if(HAL_GetTPICMuxEnControl())
;;;55     	{
;;;56     		GPIO->tGPIO_DATA_1._GPIO_TPIC_MUX_EN = 1;
;;;57     	}
;;;58     #endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL */	
;;;59     	
;;;60     	HAL_Timer_Set_Count_us(TIM_Channel_0, 50000);
;;;61     	HAL_Timer_Enable(TIM_Channel_0, ENABLE);
;;;62     #endif /* USED_LPWG_MODE_CONTROL */	
;;;63     }
000016  bf18              IT       NE
000018  4770              BXNE     lr
00001a  6841              LDR      r1,[r0,#4]            ;43
00001c  f4414180          ORR      r1,r1,#0x4000         ;43
000020  6041              STR      r1,[r0,#4]            ;43
000022  4770              BX       lr
;;;64     
                          ENDP

                  |L11.36|
                          DCD      0x40006000
                  |L11.40|
                          DCD      0x40007000

                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=2

                  TIM_Cmd PROC
;;;224    
;;;225    void TIM_Cmd(TIM_Channel TIMx_Chanel, FunctionalState NewState)
000000  4a3e              LDR      r2,|L12.252|
;;;226    {
;;;227    	if (NewState != DISABLE)
000002  2900              CMP      r1,#0
000004  d032              BEQ      |L12.108|
;;;228    	{
;;;229    		if (TIMx_Chanel == TIM_Channel_0)
000006  2800              CMP      r0,#0
;;;230    			TIMER->Timer0_CR_b.Timer0_En = ENABLE;
000008  bf04              ITT      EQ
00000a  6890              LDREQ    r0,[r2,#8]
00000c  f0400001          ORREQ    r0,r0,#1
000010  d04a              BEQ      |L12.168|
;;;231    		else if (TIMx_Chanel == TIM_Channel_1)
000012  2801              CMP      r0,#1
;;;232    			TIMER->Timer1_CR_b.Timer1_En = ENABLE;
000014  bf04              ITT      EQ
000016  69d0              LDREQ    r0,[r2,#0x1c]
000018  f0400001          ORREQ    r0,r0,#1
00001c  d04a              BEQ      |L12.180|
;;;233    		else if (TIMx_Chanel == TIM_Channel_2)
00001e  2802              CMP      r0,#2
;;;234    			TIMER->Timer2_CR_b.Timer2_En = ENABLE;
000020  bf04              ITT      EQ
000022  6b10              LDREQ    r0,[r2,#0x30]
000024  f0400001          ORREQ    r0,r0,#1
000028  d04a              BEQ      |L12.192|
;;;235    		else if (TIMx_Chanel == TIM_Channel_3)
00002a  2803              CMP      r0,#3
;;;236    			TIMER->Timer3_CR_b.Timer3_En = ENABLE;
00002c  bf04              ITT      EQ
00002e  6c50              LDREQ    r0,[r2,#0x44]
000030  f0400001          ORREQ    r0,r0,#1
000034  d04a              BEQ      |L12.204|
;;;237    		else if (TIMx_Chanel == TIM_Channel_4)
000036  2804              CMP      r0,#4
;;;238    			TIMER->Timer4_CR_b.Timer4_En = ENABLE;
000038  bf04              ITT      EQ
00003a  6d90              LDREQ    r0,[r2,#0x58]
00003c  f0400001          ORREQ    r0,r0,#1
000040  d04a              BEQ      |L12.216|
;;;239    		else if (TIMx_Chanel == TIM_Channel_5)
000042  2805              CMP      r0,#5
;;;240    			TIMER->Timer5_CR_b.Timer5_En = ENABLE;
000044  bf04              ITT      EQ
000046  6ed0              LDREQ    r0,[r2,#0x6c]
000048  f0400001          ORREQ    r0,r0,#1
00004c  d04a              BEQ      |L12.228|
;;;241    		else if (TIMx_Chanel == TIM_Channel_6)
00004e  2806              CMP      r0,#6
;;;242    			TIMER->Timer6_CR_b.Timer6_En = ENABLE;
000050  bf04              ITT      EQ
000052  f8d20080          LDREQ    r0,[r2,#0x80]
000056  f0400001          ORREQ    r0,r0,#1
00005a  d04b              BEQ      |L12.244|
;;;243    		else if (TIMx_Chanel == TIM_Channel_7)
00005c  2807              CMP      r0,#7
;;;244    			TIMER->Timer7_CR_b.Timer7_En = ENABLE;
00005e  bf04              ITT      EQ
000060  f8d20094          LDREQ    r0,[r2,#0x94]
000064  f0400001          ORREQ    r0,r0,#1
000068  d017              BEQ      |L12.154|
;;;245    	}
;;;246    	else
;;;247    	{
;;;248    		if (TIMx_Chanel == TIM_Channel_0)
;;;249    			TIMER->Timer0_CR_b.Timer0_En &= DISABLE;
;;;250    		else if (TIMx_Chanel == TIM_Channel_1)
;;;251    			TIMER->Timer1_CR_b.Timer1_En &= DISABLE;
;;;252    		else if (TIMx_Chanel == TIM_Channel_2)
;;;253    			TIMER->Timer2_CR_b.Timer2_En &= DISABLE;
;;;254    		else if (TIMx_Chanel == TIM_Channel_3)
;;;255    			TIMER->Timer3_CR_b.Timer3_En &= DISABLE;
;;;256    		else if (TIMx_Chanel == TIM_Channel_4)
;;;257    			TIMER->Timer4_CR_b.Timer4_En &= DISABLE;
;;;258    		else if (TIMx_Chanel == TIM_Channel_5)
;;;259    			TIMER->Timer5_CR_b.Timer5_En &= DISABLE;
;;;260    		else if (TIMx_Chanel == TIM_Channel_6)
;;;261    			TIMER->Timer6_CR_b.Timer6_En &= DISABLE;
;;;262    		else if (TIMx_Chanel == TIM_Channel_7)
;;;263    			TIMER->Timer7_CR_b.Timer7_En &= DISABLE;
;;;264    	}
;;;265    }
00006a  4770              BX       lr
                  |L12.108|
00006c  2100              MOVS     r1,#0
00006e  b1b8              CBZ      r0,|L12.160|
000070  2801              CMP      r0,#1                 ;250
000072  d01b              BEQ      |L12.172|
000074  2802              CMP      r0,#2                 ;252
000076  d01f              BEQ      |L12.184|
000078  2803              CMP      r0,#3                 ;254
00007a  d023              BEQ      |L12.196|
00007c  2804              CMP      r0,#4                 ;256
00007e  d027              BEQ      |L12.208|
000080  2805              CMP      r0,#5                 ;258
000082  d02b              BEQ      |L12.220|
000084  2806              CMP      r0,#6                 ;260
000086  d02f              BEQ      |L12.232|
000088  2807              CMP      r0,#7                 ;262
00008a  bf18              IT       NE
00008c  4770              BXNE     lr
00008e  f8d20094          LDR      r0,[r2,#0x94]         ;263
000092  f8d20094          LDR      r0,[r2,#0x94]         ;263
000096  f3610000          BFI      r0,r1,#0,#1           ;263
                  |L12.154|
00009a  f8c20094          STR      r0,[r2,#0x94]         ;244
00009e  4770              BX       lr
                  |L12.160|
0000a0  6890              LDR      r0,[r2,#8]            ;249
0000a2  6890              LDR      r0,[r2,#8]            ;249
0000a4  f3610000          BFI      r0,r1,#0,#1           ;249
                  |L12.168|
0000a8  6090              STR      r0,[r2,#8]            ;230
0000aa  4770              BX       lr
                  |L12.172|
0000ac  69d0              LDR      r0,[r2,#0x1c]         ;251
0000ae  69d0              LDR      r0,[r2,#0x1c]         ;251
0000b0  f3610000          BFI      r0,r1,#0,#1           ;251
                  |L12.180|
0000b4  61d0              STR      r0,[r2,#0x1c]         ;232
0000b6  4770              BX       lr
                  |L12.184|
0000b8  6b10              LDR      r0,[r2,#0x30]         ;253
0000ba  6b10              LDR      r0,[r2,#0x30]         ;253
0000bc  f3610000          BFI      r0,r1,#0,#1           ;253
                  |L12.192|
0000c0  6310              STR      r0,[r2,#0x30]         ;234
0000c2  4770              BX       lr
                  |L12.196|
0000c4  6c50              LDR      r0,[r2,#0x44]         ;255
0000c6  6c50              LDR      r0,[r2,#0x44]         ;255
0000c8  f3610000          BFI      r0,r1,#0,#1           ;255
                  |L12.204|
0000cc  6450              STR      r0,[r2,#0x44]         ;236
0000ce  4770              BX       lr
                  |L12.208|
0000d0  6d90              LDR      r0,[r2,#0x58]         ;257
0000d2  6d90              LDR      r0,[r2,#0x58]         ;257
0000d4  f3610000          BFI      r0,r1,#0,#1           ;257
                  |L12.216|
0000d8  6590              STR      r0,[r2,#0x58]         ;238
0000da  4770              BX       lr
                  |L12.220|
0000dc  6ed0              LDR      r0,[r2,#0x6c]         ;259
0000de  6ed0              LDR      r0,[r2,#0x6c]         ;259
0000e0  f3610000          BFI      r0,r1,#0,#1           ;259
                  |L12.228|
0000e4  66d0              STR      r0,[r2,#0x6c]         ;240
0000e6  4770              BX       lr
                  |L12.232|
0000e8  f8d20080          LDR      r0,[r2,#0x80]         ;261
0000ec  f8d20080          LDR      r0,[r2,#0x80]         ;261
0000f0  f3610000          BFI      r0,r1,#0,#1           ;261
                  |L12.244|
0000f4  f8c20080          STR      r0,[r2,#0x80]         ;242
0000f8  4770              BX       lr
;;;266    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L12.252|
                          DCD      0x40006000

                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;64     
;;;65     void TIM_DeInit(TIM_Channel TIMx_Chanel)
000000  4930              LDR      r1,|L13.196|
;;;66     {
000002  b1d8              CBZ      r0,|L13.60|
;;;67     	if(TIMx_Chanel == TIM_Channel_0) 
;;;68     	{ 
;;;69     		TIMER->Timer0_CR_b.Timer0_En = ENABLE;
;;;70     		TIMER->Timer0_CR_b.Timer0_En = DISABLE;
;;;71     	}
;;;72     	else if(TIMx_Chanel == TIM_Channel_1)
000004  2801              CMP      r0,#1
000006  d022              BEQ      |L13.78|
;;;73     	{
;;;74     		TIMER->Timer1_CR_b.Timer1_En = ENABLE;
;;;75     		TIMER->Timer1_CR_b.Timer1_En = DISABLE;
;;;76     	}
;;;77     	else if(TIMx_Chanel == TIM_Channel_2)
000008  2802              CMP      r0,#2
00000a  d029              BEQ      |L13.96|
;;;78     	{
;;;79     		TIMER->Timer2_CR_b.Timer2_En = ENABLE;
;;;80     		TIMER->Timer2_CR_b.Timer2_En = DISABLE;
;;;81     	}
;;;82     	else if(TIMx_Chanel == TIM_Channel_3)
00000c  2803              CMP      r0,#3
00000e  d030              BEQ      |L13.114|
;;;83     	{
;;;84     		TIMER->Timer3_CR_b.Timer3_En = ENABLE;
;;;85     		TIMER->Timer3_CR_b.Timer3_En = DISABLE;
;;;86     	}
;;;87     	else if(TIMx_Chanel == TIM_Channel_4)
000010  2804              CMP      r0,#4
000012  d037              BEQ      |L13.132|
;;;88     	{
;;;89     		TIMER->Timer4_CR_b.Timer4_En = ENABLE;
;;;90     		TIMER->Timer4_CR_b.Timer4_En = DISABLE;		
;;;91     	}
;;;92     	else if(TIMx_Chanel == TIM_Channel_5)
000014  2805              CMP      r0,#5
000016  d03e              BEQ      |L13.150|
;;;93     	{
;;;94     		TIMER->Timer5_CR_b.Timer5_En = ENABLE;                           
;;;95     		TIMER->Timer5_CR_b.Timer5_En = DISABLE;
;;;96     	}
;;;97     	else if(TIMx_Chanel == TIM_Channel_6)
000018  2806              CMP      r0,#6
00001a  d045              BEQ      |L13.168|
;;;98     	{
;;;99     		TIMER->Timer6_CR_b.Timer6_En = ENABLE;
;;;100    		TIMER->Timer6_CR_b.Timer6_En = DISABLE;
;;;101    	}
;;;102    	else if(TIMx_Chanel == TIM_Channel_7)
00001c  2807              CMP      r0,#7
;;;103    	{
;;;104    		TIMER->Timer7_CR_b.Timer7_En = ENABLE;
;;;105    		TIMER->Timer7_CR_b.Timer7_En = DISABLE;
;;;106    	}	
;;;107    }
00001e  bf18              IT       NE
000020  4770              BXNE     lr
000022  f8d10094          LDR      r0,[r1,#0x94]         ;104
000026  f0400001          ORR      r0,r0,#1              ;104
00002a  f8c10094          STR      r0,[r1,#0x94]         ;104
00002e  f8d10094          LDR      r0,[r1,#0x94]         ;105
000032  f0200001          BIC      r0,r0,#1              ;105
000036  f8c10094          STR      r0,[r1,#0x94]         ;105
00003a  4770              BX       lr
                  |L13.60|
00003c  6888              LDR      r0,[r1,#8]            ;69
00003e  f0400001          ORR      r0,r0,#1              ;69
000042  6088              STR      r0,[r1,#8]            ;69
000044  6888              LDR      r0,[r1,#8]            ;70
000046  f0200001          BIC      r0,r0,#1              ;70
00004a  6088              STR      r0,[r1,#8]            ;70
00004c  4770              BX       lr
                  |L13.78|
00004e  69c8              LDR      r0,[r1,#0x1c]         ;74
000050  f0400001          ORR      r0,r0,#1              ;74
000054  61c8              STR      r0,[r1,#0x1c]         ;74
000056  69c8              LDR      r0,[r1,#0x1c]         ;75
000058  f0200001          BIC      r0,r0,#1              ;75
00005c  61c8              STR      r0,[r1,#0x1c]         ;75
00005e  4770              BX       lr
                  |L13.96|
000060  6b08              LDR      r0,[r1,#0x30]         ;79
000062  f0400001          ORR      r0,r0,#1              ;79
000066  6308              STR      r0,[r1,#0x30]         ;79
000068  6b08              LDR      r0,[r1,#0x30]         ;80
00006a  f0200001          BIC      r0,r0,#1              ;80
00006e  6308              STR      r0,[r1,#0x30]         ;80
000070  4770              BX       lr
                  |L13.114|
000072  6c48              LDR      r0,[r1,#0x44]         ;84
000074  f0400001          ORR      r0,r0,#1              ;84
000078  6448              STR      r0,[r1,#0x44]         ;84
00007a  6c48              LDR      r0,[r1,#0x44]         ;85
00007c  f0200001          BIC      r0,r0,#1              ;85
000080  6448              STR      r0,[r1,#0x44]         ;85
000082  4770              BX       lr
                  |L13.132|
000084  6d88              LDR      r0,[r1,#0x58]         ;89
000086  f0400001          ORR      r0,r0,#1              ;89
00008a  6588              STR      r0,[r1,#0x58]         ;89
00008c  6d88              LDR      r0,[r1,#0x58]         ;90
00008e  f0200001          BIC      r0,r0,#1              ;90
000092  6588              STR      r0,[r1,#0x58]         ;90
000094  4770              BX       lr
                  |L13.150|
000096  6ec8              LDR      r0,[r1,#0x6c]         ;94
000098  f0400001          ORR      r0,r0,#1              ;94
00009c  66c8              STR      r0,[r1,#0x6c]         ;94
00009e  6ec8              LDR      r0,[r1,#0x6c]         ;95
0000a0  f0200001          BIC      r0,r0,#1              ;95
0000a4  66c8              STR      r0,[r1,#0x6c]         ;95
0000a6  4770              BX       lr
                  |L13.168|
0000a8  f8d10080          LDR      r0,[r1,#0x80]         ;99
0000ac  f0400001          ORR      r0,r0,#1              ;99
0000b0  f8c10080          STR      r0,[r1,#0x80]         ;99
0000b4  f8d10080          LDR      r0,[r1,#0x80]         ;100
0000b8  f0200001          BIC      r0,r0,#1              ;100
0000bc  f8c10080          STR      r0,[r1,#0x80]         ;100
0000c0  4770              BX       lr
;;;108    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L13.196|
                          DCD      0x40006000

                          AREA ||i.TIM_EOIStatus||, CODE, READONLY, ALIGN=2

                  TIM_EOIStatus PROC
;;;207    
;;;208    uint32_t TIM_EOIStatus(void)
000000  4801              LDR      r0,|L14.8|
;;;209    {
;;;210    	return TIMER->Timers_EOI_SR;
000002  f8d000a4          LDR      r0,[r0,#0xa4]
;;;211    
;;;212    #if 0
;;;213    	if(TIMx_Chanel == TIM_Channel_0) { return pTIM->Timer0_EOI_SR; }
;;;214    	else if(TIMx_Chanel == TIM_Channel_1) { return pTIM->Timer1_EOI_SR; }
;;;215    	else if(TIMx_Chanel == TIM_Channel_2) { return pTIM->Timer2_EOI_SR; }
;;;216    	else if(TIMx_Chanel == TIM_Channel_3) { return pTIM->Timer3_EOI_SR; }
;;;217    	else if(TIMx_Chanel == TIM_Channel_4) { return pTIM->Timer4_EOI_SR; }
;;;218    	else if(TIMx_Chanel == TIM_Channel_5) { return pTIM->Timer5_EOI_SR; }
;;;219    	else if(TIMx_Chanel == TIM_Channel_6) { return pTIM->Timer6_EOI_SR; }
;;;220    	else if(TIMx_Chanel == TIM_Channel_7) { return pTIM->Timer7_EOI_SR; }	
;;;221    #endif
;;;222    	
;;;223    }
000006  4770              BX       lr
;;;224    
                          ENDP

                  |L14.8|
                          DCD      0x40006000

                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=2

                  TIM_GetCounter PROC
;;;266    
;;;267    void TIM_GetCounter(TIM_Channel TIMx_Chanel)
000000  4910              LDR      r1,|L15.68|
;;;268    {	
;;;269    	if (TIMx_Chanel == TIM_Channel_0)
000002  2800              CMP      r0,#0
;;;270    		(TIMER->Timer0_CurrentValue_SR);
000004  bf04              ITT      EQ
000006  6848              LDREQ    r0,[r1,#4]
;;;271    	else if (TIMx_Chanel == TIM_Channel_1)
;;;272    		(TIMER->Timer1_CurrentValue_SR);
;;;273    	else if (TIMx_Chanel == TIM_Channel_2)
;;;274    		(TIMER->Timer2_CurrentValue_SR);
;;;275    	else if (TIMx_Chanel == TIM_Channel_3)
;;;276    		(TIMER->Timer3_CurrentValue_SR);
;;;277    	else if (TIMx_Chanel == TIM_Channel_4)
;;;278    		(TIMER->Timer4_CurrentValue_SR);
;;;279    	else if (TIMx_Chanel == TIM_Channel_5)
;;;280    		(TIMER->Timer5_CurrentValue_SR);
;;;281    	else if (TIMx_Chanel == TIM_Channel_6)
;;;282    		(TIMER->Timer6_CurrentValue_SR);
;;;283    	else if (TIMx_Chanel == TIM_Channel_7)
;;;284    		(TIMER->Timer7_CurrentValue_SR);
;;;285    }
000008  4770              BXEQ     lr
00000a  2801              CMP      r0,#1                 ;271
00000c  bf04              ITT      EQ                    ;272
00000e  6988              LDREQ    r0,[r1,#0x18]         ;272
000010  4770              BXEQ     lr
000012  2802              CMP      r0,#2                 ;273
000014  bf04              ITT      EQ                    ;274
000016  6ac8              LDREQ    r0,[r1,#0x2c]         ;274
000018  4770              BXEQ     lr
00001a  2803              CMP      r0,#3                 ;275
00001c  bf04              ITT      EQ                    ;276
00001e  6c08              LDREQ    r0,[r1,#0x40]         ;276
000020  4770              BXEQ     lr
000022  2804              CMP      r0,#4                 ;277
000024  bf04              ITT      EQ                    ;278
000026  6d48              LDREQ    r0,[r1,#0x54]         ;278
000028  4770              BXEQ     lr
00002a  2805              CMP      r0,#5                 ;279
00002c  bf04              ITT      EQ                    ;280
00002e  6e88              LDREQ    r0,[r1,#0x68]         ;280
000030  4770              BXEQ     lr
000032  2806              CMP      r0,#6                 ;281
000034  bf04              ITT      EQ                    ;282
000036  6fc8              LDREQ    r0,[r1,#0x7c]         ;282
000038  4770              BXEQ     lr
00003a  2807              CMP      r0,#7                 ;283
00003c  bf08              IT       EQ                    ;284
00003e  f8d10090          LDREQ    r0,[r1,#0x90]         ;284
000042  4770              BX       lr
;;;286    
                          ENDP

                  |L15.68|
                          DCD      0x40006000

                          AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=2

                  TIM_GetITStatus PROC
;;;187    
;;;188    void TIM_GetITStatus(TIM_Channel TIMx_Chanel)
000000  4911              LDR      r1,|L16.72|
;;;189    {
;;;190    	if (TIMx_Chanel == TIM_Channel_0)
000002  2800              CMP      r0,#0
;;;191    		TIMER->Timer0_Int_SR_b.Timer0_Int;
000004  bf04              ITT      EQ
000006  6908              LDREQ    r0,[r1,#0x10]
;;;192    	else if (TIMx_Chanel == TIM_Channel_1)
;;;193    		TIMER->Timer1_Int_SR_b.Timer1_Int;
;;;194    	else if (TIMx_Chanel == TIM_Channel_2)
;;;195    		TIMER->Timer2_Int_SR_b.Timer2_Int;
;;;196    	else if (TIMx_Chanel == TIM_Channel_3)
;;;197    		TIMER->Timer3_Int_SR_b.Timer3_Int;
;;;198    	else if (TIMx_Chanel == TIM_Channel_4)
;;;199    		TIMER->Timer4_Int_SR_b.Timer4_Int;
;;;200    	else if (TIMx_Chanel == TIM_Channel_5)
;;;201    		TIMER->Timer5_Int_SR_b.Timer5_Int;
;;;202    	else if (TIMx_Chanel == TIM_Channel_6)
;;;203    		TIMER->Timer6_Int_SR_b.Timer6_Int;
;;;204    	else if (TIMx_Chanel == TIM_Channel_7)
;;;205    		TIMER->Timer7_Int_SR_b.Timer7_Int;
;;;206    }
000008  4770              BXEQ     lr
00000a  2801              CMP      r0,#1                 ;192
00000c  bf04              ITT      EQ                    ;193
00000e  6a48              LDREQ    r0,[r1,#0x24]         ;193
000010  4770              BXEQ     lr
000012  2802              CMP      r0,#2                 ;194
000014  bf04              ITT      EQ                    ;195
000016  6b88              LDREQ    r0,[r1,#0x38]         ;195
000018  4770              BXEQ     lr
00001a  2803              CMP      r0,#3                 ;196
00001c  bf04              ITT      EQ                    ;197
00001e  6cc8              LDREQ    r0,[r1,#0x4c]         ;197
000020  4770              BXEQ     lr
000022  2804              CMP      r0,#4                 ;198
000024  bf04              ITT      EQ                    ;199
000026  6e08              LDREQ    r0,[r1,#0x60]         ;199
000028  4770              BXEQ     lr
00002a  2805              CMP      r0,#5                 ;200
00002c  bf04              ITT      EQ                    ;201
00002e  6f48              LDREQ    r0,[r1,#0x74]         ;201
000030  4770              BXEQ     lr
000032  2806              CMP      r0,#6                 ;202
000034  bf04              ITT      EQ                    ;203
000036  f8d10088          LDREQ    r0,[r1,#0x88]         ;203
00003a  4770              BXEQ     lr
00003c  2807              CMP      r0,#7                 ;204
00003e  bf08              IT       EQ                    ;205
000040  f8d1009c          LDREQ    r0,[r1,#0x9c]         ;205
000044  4770              BX       lr
;;;207    
                          ENDP

000046  0000              DCW      0x0000
                  |L16.72|
                          DCD      0x40006000

                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITConfig PROC
;;;160    
;;;161    void TIM_ITConfig(TIM_Channel TIMx_Chanel, FunctionalState NewState)
000000  4a4f              LDR      r2,|L17.320|
;;;162    {
;;;163        if (NewState != DISABLE)
000002  2900              CMP      r1,#0
000004  d04d              BEQ      |L17.162|
;;;164        {
;;;165    		if(TIMx_Chanel == TIM_Channel_0) { TIMER->Timer0_CR_b.Timer0_InterruptMask &= TIM_INT_Not_Mask; }
000006  b1c0              CBZ      r0,|L17.58|
;;;166    		else if(TIMx_Chanel == TIM_Channel_1) { TIMER->Timer1_CR_b.Timer1_InterruptMask &= TIM_INT_Not_Mask; }
000008  2801              CMP      r0,#1
00000a  d01d              BEQ      |L17.72|
;;;167    		else if(TIMx_Chanel == TIM_Channel_2) { TIMER->Timer2_CR_b.Timer2_InterruptMask &= TIM_INT_Not_Mask; }
00000c  2802              CMP      r0,#2
00000e  d022              BEQ      |L17.86|
;;;168    		else if(TIMx_Chanel == TIM_Channel_3) { TIMER->Timer3_CR_b.Timer3_InterruptMask &= TIM_INT_Not_Mask; }
000010  2803              CMP      r0,#3
000012  d027              BEQ      |L17.100|
;;;169    		else if(TIMx_Chanel == TIM_Channel_4) { TIMER->Timer4_CR_b.Timer4_InterruptMask &= TIM_INT_Not_Mask; }
000014  2804              CMP      r0,#4
000016  d02c              BEQ      |L17.114|
;;;170    		else if(TIMx_Chanel == TIM_Channel_5) { TIMER->Timer5_CR_b.Timer5_InterruptMask &= TIM_INT_Not_Mask; }
000018  2805              CMP      r0,#5
00001a  d031              BEQ      |L17.128|
;;;171    		else if(TIMx_Chanel == TIM_Channel_6) { TIMER->Timer6_CR_b.Timer6_InterruptMask &= TIM_INT_Not_Mask; }
00001c  2806              CMP      r0,#6
00001e  d036              BEQ      |L17.142|
;;;172    		else if(TIMx_Chanel == TIM_Channel_7) { TIMER->Timer7_CR_b.Timer7_InterruptMask &= TIM_INT_Not_Mask; }		
000020  2807              CMP      r0,#7
;;;173        }
;;;174    	else
;;;175    	{
;;;176    		if(TIMx_Chanel == TIM_Channel_0) { TIMER->Timer0_CR_b.Timer0_InterruptMask |= TIM_INT_Mask; }
;;;177    		else if(TIMx_Chanel == TIM_Channel_1) { TIMER->Timer1_CR_b.Timer1_InterruptMask |= TIM_INT_Mask; }
;;;178    		else if(TIMx_Chanel == TIM_Channel_2) { TIMER->Timer2_CR_b.Timer2_InterruptMask |= TIM_INT_Mask; }
;;;179    		else if(TIMx_Chanel == TIM_Channel_3) { TIMER->Timer3_CR_b.Timer3_InterruptMask |= TIM_INT_Mask; }
;;;180    		else if(TIMx_Chanel == TIM_Channel_4) { TIMER->Timer4_CR_b.Timer4_InterruptMask |= TIM_INT_Mask; }
;;;181    		else if(TIMx_Chanel == TIM_Channel_5) { TIMER->Timer5_CR_b.Timer5_InterruptMask |= TIM_INT_Mask; }
;;;182    		else if(TIMx_Chanel == TIM_Channel_6) { TIMER->Timer6_CR_b.Timer6_InterruptMask |= TIM_INT_Mask; }
;;;183    		else if(TIMx_Chanel == TIM_Channel_7) { TIMER->Timer7_CR_b.Timer7_InterruptMask |= TIM_INT_Mask; }		
;;;184    	}
;;;185    }
000022  bf18              IT       NE
000024  4770              BXNE     lr
000026  f8d20094          LDR      r0,[r2,#0x94]         ;172
00002a  0881              LSRS     r1,r0,#2              ;172
00002c  f8d20094          LDR      r0,[r2,#0x94]         ;172
000030  f3610082          BFI      r0,r1,#2,#1           ;172
000034  f8c20094          STR      r0,[r2,#0x94]         ;172
000038  4770              BX       lr
                  |L17.58|
00003a  6890              LDR      r0,[r2,#8]            ;165
00003c  0881              LSRS     r1,r0,#2              ;165
00003e  6890              LDR      r0,[r2,#8]            ;165
000040  f3610082          BFI      r0,r1,#2,#1           ;165
000044  6090              STR      r0,[r2,#8]            ;165
000046  4770              BX       lr
                  |L17.72|
000048  69d0              LDR      r0,[r2,#0x1c]         ;166
00004a  0881              LSRS     r1,r0,#2              ;166
00004c  69d0              LDR      r0,[r2,#0x1c]         ;166
00004e  f3610082          BFI      r0,r1,#2,#1           ;166
000052  61d0              STR      r0,[r2,#0x1c]         ;166
000054  4770              BX       lr
                  |L17.86|
000056  6b10              LDR      r0,[r2,#0x30]         ;167
000058  0881              LSRS     r1,r0,#2              ;167
00005a  6b10              LDR      r0,[r2,#0x30]         ;167
00005c  f3610082          BFI      r0,r1,#2,#1           ;167
000060  6310              STR      r0,[r2,#0x30]         ;167
000062  4770              BX       lr
                  |L17.100|
000064  6c50              LDR      r0,[r2,#0x44]         ;168
000066  0881              LSRS     r1,r0,#2              ;168
000068  6c50              LDR      r0,[r2,#0x44]         ;168
00006a  f3610082          BFI      r0,r1,#2,#1           ;168
00006e  6450              STR      r0,[r2,#0x44]         ;168
000070  4770              BX       lr
                  |L17.114|
000072  6d90              LDR      r0,[r2,#0x58]         ;169
000074  0881              LSRS     r1,r0,#2              ;169
000076  6d90              LDR      r0,[r2,#0x58]         ;169
000078  f3610082          BFI      r0,r1,#2,#1           ;169
00007c  6590              STR      r0,[r2,#0x58]         ;169
00007e  4770              BX       lr
                  |L17.128|
000080  6ed0              LDR      r0,[r2,#0x6c]         ;170
000082  0881              LSRS     r1,r0,#2              ;170
000084  6ed0              LDR      r0,[r2,#0x6c]         ;170
000086  f3610082          BFI      r0,r1,#2,#1           ;170
00008a  66d0              STR      r0,[r2,#0x6c]         ;170
00008c  4770              BX       lr
                  |L17.142|
00008e  f8d20080          LDR      r0,[r2,#0x80]         ;171
000092  0881              LSRS     r1,r0,#2              ;171
000094  f8d20080          LDR      r0,[r2,#0x80]         ;171
000098  f3610082          BFI      r0,r1,#2,#1           ;171
00009c  f8c20080          STR      r0,[r2,#0x80]         ;171
0000a0  4770              BX       lr
                  |L17.162|
0000a2  b1c0              CBZ      r0,|L17.214|
0000a4  2801              CMP      r0,#1                 ;177
0000a6  d01d              BEQ      |L17.228|
0000a8  2802              CMP      r0,#2                 ;178
0000aa  d022              BEQ      |L17.242|
0000ac  2803              CMP      r0,#3                 ;179
0000ae  d027              BEQ      |L17.256|
0000b0  2804              CMP      r0,#4                 ;180
0000b2  d02c              BEQ      |L17.270|
0000b4  2805              CMP      r0,#5                 ;181
0000b6  d031              BEQ      |L17.284|
0000b8  2806              CMP      r0,#6                 ;182
0000ba  d036              BEQ      |L17.298|
0000bc  2807              CMP      r0,#7                 ;183
0000be  bf18              IT       NE
0000c0  4770              BXNE     lr
0000c2  f8d20094          LDR      r0,[r2,#0x94]         ;183
0000c6  0881              LSRS     r1,r0,#2              ;183
0000c8  f8d20094          LDR      r0,[r2,#0x94]         ;183
0000cc  f3610082          BFI      r0,r1,#2,#1           ;183
0000d0  f8c20094          STR      r0,[r2,#0x94]         ;183
0000d4  4770              BX       lr
                  |L17.214|
0000d6  6890              LDR      r0,[r2,#8]            ;176
0000d8  0881              LSRS     r1,r0,#2              ;176
0000da  6890              LDR      r0,[r2,#8]            ;176
0000dc  f3610082          BFI      r0,r1,#2,#1           ;176
0000e0  6090              STR      r0,[r2,#8]            ;176
0000e2  4770              BX       lr
                  |L17.228|
0000e4  69d0              LDR      r0,[r2,#0x1c]         ;177
0000e6  0881              LSRS     r1,r0,#2              ;177
0000e8  69d0              LDR      r0,[r2,#0x1c]         ;177
0000ea  f3610082          BFI      r0,r1,#2,#1           ;177
0000ee  61d0              STR      r0,[r2,#0x1c]         ;177
0000f0  4770              BX       lr
                  |L17.242|
0000f2  6b10              LDR      r0,[r2,#0x30]         ;178
0000f4  0881              LSRS     r1,r0,#2              ;178
0000f6  6b10              LDR      r0,[r2,#0x30]         ;178
0000f8  f3610082          BFI      r0,r1,#2,#1           ;178
0000fc  6310              STR      r0,[r2,#0x30]         ;178
0000fe  4770              BX       lr
                  |L17.256|
000100  6c50              LDR      r0,[r2,#0x44]         ;179
000102  0881              LSRS     r1,r0,#2              ;179
000104  6c50              LDR      r0,[r2,#0x44]         ;179
000106  f3610082          BFI      r0,r1,#2,#1           ;179
00010a  6450              STR      r0,[r2,#0x44]         ;179
00010c  4770              BX       lr
                  |L17.270|
00010e  6d90              LDR      r0,[r2,#0x58]         ;180
000110  0881              LSRS     r1,r0,#2              ;180
000112  6d90              LDR      r0,[r2,#0x58]         ;180
000114  f3610082          BFI      r0,r1,#2,#1           ;180
000118  6590              STR      r0,[r2,#0x58]         ;180
00011a  4770              BX       lr
                  |L17.284|
00011c  6ed0              LDR      r0,[r2,#0x6c]         ;181
00011e  0881              LSRS     r1,r0,#2              ;181
000120  6ed0              LDR      r0,[r2,#0x6c]         ;181
000122  f3610082          BFI      r0,r1,#2,#1           ;181
000126  66d0              STR      r0,[r2,#0x6c]         ;181
000128  4770              BX       lr
                  |L17.298|
00012a  f8d20080          LDR      r0,[r2,#0x80]         ;182
00012e  0881              LSRS     r1,r0,#2              ;182
000130  f8d20080          LDR      r0,[r2,#0x80]         ;182
000134  f3610082          BFI      r0,r1,#2,#1           ;182
000138  f8c20080          STR      r0,[r2,#0x80]         ;182
00013c  4770              BX       lr
;;;186    
                          ENDP

00013e  0000              DCW      0x0000
                  |L17.320|
                          DCD      0x40006000

                          AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=2

                  TIM_SetCounter PROC
;;;286    
;;;287    void TIM_SetCounter(TIM_Channel TIMx_Chanel, uint32_t Cnt)
000000  4a10              LDR      r2,|L18.68|
;;;288    {
;;;289    	if (TIMx_Chanel == TIM_Channel_0)
000002  2800              CMP      r0,#0
;;;290    		TIMER->Timer0_LoadCount_CR = Cnt;
000004  bf04              ITT      EQ
000006  6011              STREQ    r1,[r2,#0]
;;;291    	else if (TIMx_Chanel == TIM_Channel_1)
;;;292    		TIMER->Timer1_LoadCount_CR = Cnt;
;;;293    	else if (TIMx_Chanel == TIM_Channel_2)
;;;294    		TIMER->Timer2_LoadCount_CR = Cnt;
;;;295    	else if (TIMx_Chanel == TIM_Channel_3)
;;;296    		TIMER->Timer3_LoadCount_CR = Cnt;
;;;297    	else if (TIMx_Chanel == TIM_Channel_4)
;;;298    		TIMER->Timer4_LoadCount_CR = Cnt;
;;;299    	else if (TIMx_Chanel == TIM_Channel_5)
;;;300    		TIMER->Timer5_LoadCount_CR = Cnt;
;;;301    	else if (TIMx_Chanel == TIM_Channel_6)
;;;302    		TIMER->Timer6_LoadCount_CR = Cnt;
;;;303    	else if (TIMx_Chanel == TIM_Channel_7)
;;;304    		TIMER->Timer7_LoadCount_CR = Cnt;
;;;305    }
000008  4770              BXEQ     lr
00000a  2801              CMP      r0,#1                 ;291
00000c  bf04              ITT      EQ                    ;292
00000e  6151              STREQ    r1,[r2,#0x14]         ;292
000010  4770              BXEQ     lr
000012  2802              CMP      r0,#2                 ;293
000014  bf04              ITT      EQ                    ;294
000016  6291              STREQ    r1,[r2,#0x28]         ;294
000018  4770              BXEQ     lr
00001a  2803              CMP      r0,#3                 ;295
00001c  bf04              ITT      EQ                    ;296
00001e  63d1              STREQ    r1,[r2,#0x3c]         ;296
000020  4770              BXEQ     lr
000022  2804              CMP      r0,#4                 ;297
000024  bf04              ITT      EQ                    ;298
000026  6511              STREQ    r1,[r2,#0x50]         ;298
000028  4770              BXEQ     lr
00002a  2805              CMP      r0,#5                 ;299
00002c  bf04              ITT      EQ                    ;300
00002e  6651              STREQ    r1,[r2,#0x64]         ;300
000030  4770              BXEQ     lr
000032  2806              CMP      r0,#6                 ;301
000034  bf04              ITT      EQ                    ;302
000036  6791              STREQ    r1,[r2,#0x78]         ;302
000038  4770              BXEQ     lr
00003a  2807              CMP      r0,#7                 ;303
00003c  bf08              IT       EQ                    ;304
00003e  f8c2108c          STREQ    r1,[r2,#0x8c]         ;304
000042  4770              BX       lr
;;;306    
                          ENDP

                  |L18.68|
                          DCD      0x40006000

                          AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=2

                  TIM_TimeBaseInit PROC
;;;108    
;;;109    void TIM_TimeBaseInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  7882              LDRB     r2,[r0,#2]
;;;110    {
;;;111    	if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_0)
;;;112    	{
;;;113    		TIMER->Timer0_CR_b.Timer0_Mode = TIM_TimeBaseInitStruct->TIM_Mode;
000002  4961              LDR      r1,|L19.392|
000004  b35a              CBZ      r2,|L19.94|
;;;114    		TIMER->Timer0_CR_b.Timer0_InterruptMask = TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;115    		TIMER->Timer0_LoadCount_R_b.Timer0_LoadCount = TIM_TimeBaseInitStruct->TIM_Count;
;;;116    	}
;;;117    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_1)
000006  2a01              CMP      r2,#1
000008  d037              BEQ      |L19.122|
;;;118    	{
;;;119    		TIMER->Timer1_CR_b.Timer1_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;
;;;120    		TIMER->Timer1_CR_b.Timer1_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;121    		TIMER->Timer1_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;122    	}
;;;123    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_2)
00000a  2a02              CMP      r2,#2
00000c  d04a              BEQ      |L19.164|
;;;124    	{
;;;125    		TIMER->Timer2_CR_b.Timer2_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;
;;;126    		TIMER->Timer2_CR_b.Timer2_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;127    		TIMER->Timer2_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;128    	}
;;;129    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_3)
00000e  2a03              CMP      r2,#3
000010  d05d              BEQ      |L19.206|
;;;130    	{
;;;131    		TIMER->Timer3_CR_b.Timer3_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;
;;;132    		TIMER->Timer3_CR_b.Timer3_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;133    		TIMER->Timer3_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;134    	}
;;;135    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_4)
000012  2a04              CMP      r2,#4
000014  d073              BEQ      |L19.254|
;;;136    	{
;;;137    		TIMER->Timer4_CR_b.Timer4_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;
;;;138    		TIMER->Timer4_CR_b.Timer4_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;139    		TIMER->Timer4_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;140    	}
;;;141    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_5)
000016  2a05              CMP      r2,#5
000018  d06f              BEQ      |L19.250|
;;;142    	{
;;;143    		TIMER->Timer5_CR_b.Timer5_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;	
;;;144    		TIMER->Timer5_CR_b.Timer5_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;145    		TIMER->Timer5_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;146    	}
;;;147    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_6)
00001a  2a06              CMP      r2,#6
00001c  d06e              BEQ      |L19.252|
;;;148    	{
;;;149    		TIMER->Timer6_CR_b.Timer6_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;	
;;;150    		TIMER->Timer6_CR_b.Timer6_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;151    		TIMER->Timer6_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;152    	}
;;;153    	else if(TIM_TimeBaseInitStruct->TIM_Channel == TIM_Channel_7)
00001e  2a07              CMP      r2,#7
;;;154    	{
;;;155    		TIMER->Timer7_CR_b.Timer7_Mode |= TIM_TimeBaseInitStruct->TIM_Mode;	
;;;156    		TIMER->Timer7_CR_b.Timer7_InterruptMask |= TIM_TimeBaseInitStruct->TIM_Int_Mask;
;;;157    		TIMER->Timer7_LoadCount_CR |= TIM_TimeBaseInitStruct->TIM_Count;
;;;158    	}
;;;159    }
000020  bf18              IT       NE
000022  4770              BXNE     lr
000024  f8d12094          LDR      r2,[r1,#0x94]         ;155
000028  7803              LDRB     r3,[r0,#0]            ;155
00002a  ea430352          ORR      r3,r3,r2,LSR #1       ;155
00002e  f8d12094          LDR      r2,[r1,#0x94]         ;155
000032  f3630241          BFI      r2,r3,#1,#1           ;155
000036  f8c12094          STR      r2,[r1,#0x94]         ;155
00003a  f8d12094          LDR      r2,[r1,#0x94]         ;156
00003e  7843              LDRB     r3,[r0,#1]            ;156
000040  ea430392          ORR      r3,r3,r2,LSR #2       ;156
000044  f8d12094          LDR      r2,[r1,#0x94]         ;156
000048  f3630282          BFI      r2,r3,#2,#1           ;156
00004c  f8c12094          STR      r2,[r1,#0x94]         ;156
000050  f8d1208c          LDR      r2,[r1,#0x8c]         ;157
000054  6840              LDR      r0,[r0,#4]            ;157
000056  4310              ORRS     r0,r0,r2              ;157
000058  f8c1008c          STR      r0,[r1,#0x8c]         ;157
00005c  4770              BX       lr
                  |L19.94|
00005e  7803              LDRB     r3,[r0,#0]            ;113
000060  688a              LDR      r2,[r1,#8]            ;113
000062  f3630241          BFI      r2,r3,#1,#1           ;113
000066  608a              STR      r2,[r1,#8]            ;113
000068  7843              LDRB     r3,[r0,#1]            ;114
00006a  688a              LDR      r2,[r1,#8]            ;114
00006c  f3630282          BFI      r2,r3,#2,#1           ;114
000070  608a              STR      r2,[r1,#8]            ;114
000072  6840              LDR      r0,[r0,#4]            ;115
000074  680a              LDR      r2,[r1,#0]            ;115
000076  6008              STR      r0,[r1,#0]            ;115
000078  4770              BX       lr
                  |L19.122|
00007a  69ca              LDR      r2,[r1,#0x1c]         ;119
00007c  7803              LDRB     r3,[r0,#0]            ;119
00007e  ea430352          ORR      r3,r3,r2,LSR #1       ;119
000082  69ca              LDR      r2,[r1,#0x1c]         ;119
000084  f3630241          BFI      r2,r3,#1,#1           ;119
000088  61ca              STR      r2,[r1,#0x1c]         ;119
00008a  69ca              LDR      r2,[r1,#0x1c]         ;120
00008c  7843              LDRB     r3,[r0,#1]            ;120
00008e  ea430392          ORR      r3,r3,r2,LSR #2       ;120
000092  69ca              LDR      r2,[r1,#0x1c]         ;120
000094  f3630282          BFI      r2,r3,#2,#1           ;120
000098  61ca              STR      r2,[r1,#0x1c]         ;120
00009a  694a              LDR      r2,[r1,#0x14]         ;121
00009c  6840              LDR      r0,[r0,#4]            ;121
00009e  4310              ORRS     r0,r0,r2              ;121
0000a0  6148              STR      r0,[r1,#0x14]         ;121
0000a2  4770              BX       lr
                  |L19.164|
0000a4  6b0a              LDR      r2,[r1,#0x30]         ;125
0000a6  7803              LDRB     r3,[r0,#0]            ;125
0000a8  ea430352          ORR      r3,r3,r2,LSR #1       ;125
0000ac  6b0a              LDR      r2,[r1,#0x30]         ;125
0000ae  f3630241          BFI      r2,r3,#1,#1           ;125
0000b2  630a              STR      r2,[r1,#0x30]         ;125
0000b4  6b0a              LDR      r2,[r1,#0x30]         ;126
0000b6  7843              LDRB     r3,[r0,#1]            ;126
0000b8  ea430392          ORR      r3,r3,r2,LSR #2       ;126
0000bc  6b0a              LDR      r2,[r1,#0x30]         ;126
0000be  f3630282          BFI      r2,r3,#2,#1           ;126
0000c2  630a              STR      r2,[r1,#0x30]         ;126
0000c4  6a8a              LDR      r2,[r1,#0x28]         ;127
0000c6  6840              LDR      r0,[r0,#4]            ;127
0000c8  4310              ORRS     r0,r0,r2              ;127
0000ca  6288              STR      r0,[r1,#0x28]         ;127
0000cc  4770              BX       lr
                  |L19.206|
0000ce  6c4a              LDR      r2,[r1,#0x44]         ;131
0000d0  7803              LDRB     r3,[r0,#0]            ;131
0000d2  ea430352          ORR      r3,r3,r2,LSR #1       ;131
0000d6  6c4a              LDR      r2,[r1,#0x44]         ;131
0000d8  f3630241          BFI      r2,r3,#1,#1           ;131
0000dc  644a              STR      r2,[r1,#0x44]         ;131
0000de  6c4a              LDR      r2,[r1,#0x44]         ;132
0000e0  7843              LDRB     r3,[r0,#1]            ;132
0000e2  ea430392          ORR      r3,r3,r2,LSR #2       ;132
0000e6  6c4a              LDR      r2,[r1,#0x44]         ;132
0000e8  f3630282          BFI      r2,r3,#2,#1           ;132
0000ec  644a              STR      r2,[r1,#0x44]         ;132
0000ee  6bca              LDR      r2,[r1,#0x3c]         ;133
0000f0  6840              LDR      r0,[r0,#4]            ;133
0000f2  4310              ORRS     r0,r0,r2              ;133
0000f4  63c8              STR      r0,[r1,#0x3c]         ;133
0000f6  4770              BX       lr
0000f8  e001              B        |L19.254|
                  |L19.250|
0000fa  e015              B        |L19.296|
                  |L19.252|
0000fc  e029              B        |L19.338|
                  |L19.254|
0000fe  6d8a              LDR      r2,[r1,#0x58]         ;137
000100  7803              LDRB     r3,[r0,#0]            ;137
000102  ea430352          ORR      r3,r3,r2,LSR #1       ;137
000106  6d8a              LDR      r2,[r1,#0x58]         ;137
000108  f3630241          BFI      r2,r3,#1,#1           ;137
00010c  658a              STR      r2,[r1,#0x58]         ;137
00010e  6d8a              LDR      r2,[r1,#0x58]         ;138
000110  7843              LDRB     r3,[r0,#1]            ;138
000112  ea430392          ORR      r3,r3,r2,LSR #2       ;138
000116  6d8a              LDR      r2,[r1,#0x58]         ;138
000118  f3630282          BFI      r2,r3,#2,#1           ;138
00011c  658a              STR      r2,[r1,#0x58]         ;138
00011e  6d0a              LDR      r2,[r1,#0x50]         ;139
000120  6840              LDR      r0,[r0,#4]            ;139
000122  4310              ORRS     r0,r0,r2              ;139
000124  6508              STR      r0,[r1,#0x50]         ;139
000126  4770              BX       lr
                  |L19.296|
000128  6eca              LDR      r2,[r1,#0x6c]         ;143
00012a  7803              LDRB     r3,[r0,#0]            ;143
00012c  ea430352          ORR      r3,r3,r2,LSR #1       ;143
000130  6eca              LDR      r2,[r1,#0x6c]         ;143
000132  f3630241          BFI      r2,r3,#1,#1           ;143
000136  66ca              STR      r2,[r1,#0x6c]         ;143
000138  6eca              LDR      r2,[r1,#0x6c]         ;144
00013a  7843              LDRB     r3,[r0,#1]            ;144
00013c  ea430392          ORR      r3,r3,r2,LSR #2       ;144
000140  6eca              LDR      r2,[r1,#0x6c]         ;144
000142  f3630282          BFI      r2,r3,#2,#1           ;144
000146  66ca              STR      r2,[r1,#0x6c]         ;144
000148  6e4a              LDR      r2,[r1,#0x64]         ;145
00014a  6840              LDR      r0,[r0,#4]            ;145
00014c  4310              ORRS     r0,r0,r2              ;145
00014e  6648              STR      r0,[r1,#0x64]         ;145
000150  4770              BX       lr
                  |L19.338|
000152  f8d12080          LDR      r2,[r1,#0x80]         ;149
000156  7803              LDRB     r3,[r0,#0]            ;149
000158  ea430352          ORR      r3,r3,r2,LSR #1       ;149
00015c  f8d12080          LDR      r2,[r1,#0x80]         ;149
000160  f3630241          BFI      r2,r3,#1,#1           ;149
000164  f8c12080          STR      r2,[r1,#0x80]         ;149
000168  f8d12080          LDR      r2,[r1,#0x80]         ;150
00016c  7843              LDRB     r3,[r0,#1]            ;150
00016e  ea430392          ORR      r3,r3,r2,LSR #2       ;150
000172  f8d12080          LDR      r2,[r1,#0x80]         ;150
000176  f3630282          BFI      r2,r3,#2,#1           ;150
00017a  f8c12080          STR      r2,[r1,#0x80]         ;150
00017e  6f8a              LDR      r2,[r1,#0x78]         ;151
000180  6840              LDR      r0,[r0,#4]            ;151
000182  4310              ORRS     r0,r0,r2              ;151
000184  6788              STR      r0,[r1,#0x78]         ;151
000186  4770              BX       lr
;;;160    
                          ENDP

                  |L19.392|
                          DCD      0x40006000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\timer\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_ef4b2645____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___7_timer_c_ef4b2645____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_ef4b2645____REVSH|
#line 402
|__asm___7_timer_c_ef4b2645____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_ef4b2645____RRX|
#line 587
|__asm___7_timer_c_ef4b2645____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
