; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\algorithm.crf ..\..\App\Algorithm\algorithm.c]
                          THUMB

                          AREA ||i.algorithm_CheckFingerIdleModeControl||, CODE, READONLY, ALIGN=2

                  algorithm_CheckFingerIdleModeControl PROC
;;;230    #if (USED_IDLE_MODE_CONTROL || USED_FRAME_SKIP_IDLE_MODE_CONTROL)
;;;231    bool_t algorithm_CheckFingerIdleModeControl(void)
000000  b510              PUSH     {r4,lr}
;;;232    {
;;;233    	eSENSING_MODE_t eSensingMode = HAL_GetSensingMode();
000002  f7fffffe          BL       HAL_GetSensingMode
;;;234    
;;;235    	if(IS_ACTIVE_MODE(eSensingMode))
;;;236    	{
;;;237    		if(thisInfo->bTouchExpect)
000006  4917              LDR      r1,|L1.100|
000008  f0100f01          TST      r0,#1                 ;235
00000c  d01a              BEQ      |L1.68|
00000e  6888              LDR      r0,[r1,#8]  ; thisInfo
000010  2100              MOVS     r1,#0
000012  f5005080          ADD      r0,r0,#0x1000
000016  f8902f8b          LDRB     r2,[r0,#0xf8b]
00001a  2a00              CMP      r2,#0
;;;238    		{
;;;239    			thisInfo->ulIdleModeEnterCheckCount = 0;
00001c  bf18              IT       NE
00001e  f8c01fa4          STRNE    r1,[r0,#0xfa4]
000022  d11d              BNE      |L1.96|
;;;240    		}
;;;241    		else
;;;242    		{
;;;243    			thisInfo->ulIdleModeEnterCheckCount++;
000024  f8d02fa4          LDR      r2,[r0,#0xfa4]
000028  1c52              ADDS     r2,r2,#1
;;;244    
;;;245    			if(thisInfo->ulIdleModeEnterCheckCount > thisInfo->ulIdleModeEnterFrameCntTHD)
00002a  f8c02fa4          STR      r2,[r0,#0xfa4]
00002e  f8d03fa0          LDR      r3,[r0,#0xfa0]
000032  429a              CMP      r2,r3
000034  d914              BLS      |L1.96|
;;;246    			{
;;;247    				thisInfo->ulIdleModeEnterCheckCount = 0;
;;;248    				HAL_SetSensingChangeMode(SM_CHANGE_IDLE_MODE);
000036  f8c01fa4          STR      r1,[r0,#0xfa4]
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       HAL_SetSensingChangeMode
;;;249    				return YES;
000040  2001              MOVS     r0,#1
;;;250    			}
;;;251    		}
;;;252    	}
;;;253    #if (USED_ONLY_IDLE_MODE == NO)
;;;254    	else if(IS_IDLE_MODE(eSensingMode))
;;;255    	{
;;;256    		if(thisInfo->bTouchExpect)
;;;257    		{
;;;258    			/*
;;;259    			 * NOTE : Idle -> Active Is Always Normal Frequency Operation
;;;260    			 */
;;;261    			HAL_SetSensingChangeMode(SM_CHANGE_ACTIVE_FRQ_MAIN_MODE);
;;;262    #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;263    			thisInfo->bIsIdleToActive = YES;
;;;264    #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;265    
;;;266    			return YES;
;;;267    		}
;;;268    	}
;;;269    #endif /* (USED_ONLY_IDLE_MODE == NO) */
;;;270    
;;;271    	return NO;
;;;272    }
000042  bd10              POP      {r4,pc}
                  |L1.68|
000044  f4107f80          TST      r0,#0x100             ;254
000048  d00a              BEQ      |L1.96|
00004a  6888              LDR      r0,[r1,#8]            ;256  ; thisInfo
00004c  f5005080          ADD      r0,r0,#0x1000         ;256
000050  f8900f8b          LDRB     r0,[r0,#0xf8b]        ;256
000054  b120              CBZ      r0,|L1.96|
000056  2002              MOVS     r0,#2                 ;261
000058  f7fffffe          BL       HAL_SetSensingChangeMode
00005c  2001              MOVS     r0,#1                 ;266
00005e  bd10              POP      {r4,pc}
                  |L1.96|
000060  2000              MOVS     r0,#0                 ;271
000062  bd10              POP      {r4,pc}
;;;273    #endif /* (USED_IDLE_MODE_CONTROL || USED_FRAME_SKIP_IDLE_MODE_CONTROL) */
                          ENDP

                  |L1.100|
                          DCD      ||.data||

                          AREA ||i.algorithm_PendTouchEvent||, CODE, READONLY, ALIGN=2

                  algorithm_PendTouchEvent PROC
;;;841    //extern uint8_t	g_ConnectedDevice;
;;;842    void algorithm_PendTouchEvent(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;843    {
000004  b087              SUB      sp,sp,#0x1c
;;;844    	int i;
;;;845    	int distX, distY;
;;;846    	tXY_t pos, old_pos;
;;;847    	uint8_t ucMoveTHD_X,ucMoveTHD_Y;
;;;848    
;;;849    #if (ID_MAPPING_CHANGE)
;;;850    static uint8_t NewID = 50;
;;;851    static uint8_t Id_Map[MAX_TOUCH_] = {0,};
;;;852    static uint16_t NonTouchCnt = 0;
;;;853    #endif
;;;854    
;;;855    	hal_set_overlap_pen();
000006  f7fffffe          BL       hal_set_overlap_pen
;;;856    
;;;857    	memset(HID_status,0,HID_MAX_TOUCH);
00000a  48bb              LDR      r0,|L2.760|
00000c  f7fffffe          BL       __ARM_common_memclr4_10
;;;858    	memset(HID_id,0,HID_MAX_TOUCH);
000010  48ba              LDR      r0,|L2.764|
000012  f7fffffe          BL       __ARM_common_memclr4_10
;;;859    	memset(HID_x,0,HID_MAX_TOUCH);
000016  48ba              LDR      r0,|L2.768|
000018  f7fffffe          BL       __ARM_common_memclr4_10
;;;860    	memset(HID_y,0,HID_MAX_TOUCH);
00001c  48b9              LDR      r0,|L2.772|
00001e  f7fffffe          BL       __ARM_common_memclr4_10
;;;861    
;;;862    	eSWIPPacketFormatId_t id = protocol_swip_GetPacketFormatId();
000022  f7fffffe          BL       protocol_swip_GetPacketFormatId
000026  4682              MOV      r10,r0
;;;863    #define SET_POS(tItem, pos)  \
;;;864    	do{    \
;;;865    			(tItem).tItem00.ucXHigh = ((pos).x >> 8) & 0xFF;    \
;;;866    			(tItem).tItem00.ucYHigh = ((pos).y >> 8) & 0xFF;    \
;;;867    			(tItem).tItem00.ucXLow = (pos).x & 0xFF;    \
;;;868    			(tItem).tItem00.ucYLow = (pos).y & 0xFF;    \
;;;869    		} while(0)
;;;870    
;;;871    	//if(g_ConnectedDevice == I2C_CONNECT_PC)
;;;872    	{
;;;873    		protocol_swip_InitTouchEventBuffer();
000028  f7fffffe          BL       protocol_swip_InitTouchEventBuffer
;;;874    		//    protocol_hid_InitTouchEventBuffer();
;;;875    	}
;;;876    	
;;;877    	hid_index=0;
00002c  48b6              LDR      r0,|L2.776|
;;;878    	
;;;879    #if (SWIP_QUEUE_MODE)
;;;880    	thisInfo->bQueueStart 	= 0;
00002e  4db7              LDR      r5,|L2.780|
000030  2600              MOVS     r6,#0                 ;877
000032  6006              STR      r6,[r0,#0]  ; hid_index
000034  68a9              LDR      r1,[r5,#8]  ; thisInfo
000036  f5015080          ADD      r0,r1,#0x1000
00003a  f8806f9e          STRB     r6,[r0,#0xf9e]
;;;881    	#if (SWIP_QUEUE_MODE == 2)
;;;882    		thisInfo->bTouchOffFlag	= 0;
00003e  f8806f9f          STRB     r6,[r0,#0xf9f]
;;;883    	#endif
;;;884    #endif
;;;885    
;;;886    #if USED_SHARP_SPECIFIC_PROTOCOL
;;;887    	tTouchItemType_t touchItemType;
;;;888    	memset(&touchItemType, 0, sizeof(tTouchItemType_t));
;;;889    	/*
;;;890    	 * TODO : finger mode를 기본으로 설정.
;;;891    	 * algorithm을 거친 후 touch type에 따른 flag를 setting 해야 함.
;;;892    	 */
;;;893    	touchItemType.active_stylus_hover = YES;
;;;894    	touchItemType.active_stylus = YES;
;;;895    	touchItemType.passive_stylus = YES;
;;;896    #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;897    
;;;898    	if(thisModeConf->Palm.bPalm_WholeTouchRemove && thisInfo->bIsPalm == YES)
000042  686a              LDR      r2,[r5,#4]  ; thisModeConf
000044  f89220f6          LDRB     r2,[r2,#0xf6]
000048  b1a2              CBZ      r2,|L2.116|
00004a  f8900f87          LDRB     r0,[r0,#0xf87]
00004e  2801              CMP      r0,#1
000050  d110              BNE      |L2.116|
;;;899    	{
;;;900    		for( i=MAX_TOUCH_; i--; )thisInfo->tCoord.tPos.vusS[i] = 0;
000052  200a              MOVS     r0,#0xa
000054  2201              MOVS     r2,#1
000056  1c43              ADDS     r3,r0,#1
                  |L2.88|
000058  f1a00c01          SUB      r12,r0,#1
00005c  eb010c4c          ADD      r12,r1,r12,LSL #1
000060  1e80              SUBS     r0,r0,#2
000062  f8ac64d0          STRH     r6,[r12,#0x4d0]
000066  eb010c40          ADD      r12,r1,r0,LSL #1
00006a  1c92              ADDS     r2,r2,#2
00006c  f8ac64d0          STRH     r6,[r12,#0x4d0]
000070  429a              CMP      r2,r3
000072  dbf1              BLT      |L2.88|
                  |L2.116|
;;;901    	}
;;;902    
;;;903    #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN	
;;;904    	algorithm_EdgeReportDelay();
;;;905    #endif
;;;906    	
;;;907    	for (i = 0; i < MAX_TOUCH_; i++)
000074  2400              MOVS     r4,#0
000076  f04f0b01          MOV      r11,#1                ;898
                  |L2.122|
;;;908    	{
;;;909    		//        bool_t bIsHover = NO;
;;;910    		if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
00007a  68a9              LDR      r1,[r5,#8]  ; thisInfo
00007c  eb010044          ADD      r0,r1,r4,LSL #1
000080  f8b02c87          LDRH     r2,[r0,#0xc87]
000084  b13a              CBZ      r2,|L2.150|
;;;911    		{
;;;912    //			old_pos = thisInfo->tCoord.tPastSentPos.tXY[i];
;;;913    //			alogorithm_coord_modify_pos(&old_pos,&old_pos, i);
;;;914    			old_pos.x = thisInfo->tCoord.tRealPastSentPos.tXY[i].x;
000086  eb0102c4          ADD      r2,r1,r4,LSL #3
00008a  f8d23cb0          LDR      r3,[r2,#0xcb0]
;;;915    			old_pos.y = thisInfo->tCoord.tRealPastSentPos.tXY[i].y;
00008e  9302              STR      r3,[sp,#8]
000090  f8d22cb4          LDR      r2,[r2,#0xcb4]
000094  9203              STR      r2,[sp,#0xc]
                  |L2.150|
;;;916    		}
;;;917    
;;;918    		if (thisInfo->tCoord.tPos.vusS[i] > 0)
000096  f8b024d0          LDRH     r2,[r0,#0x4d0]
00009a  2a00              CMP      r2,#0
00009c  f00080c0          BEQ.W    |L2.544|
;;;919    		{
;;;920    			pos = thisInfo->tCoord.tPos.tXY[i];
0000a0  eb0101c4          ADD      r1,r1,r4,LSL #3
0000a4  f8d12480          LDR      r2,[r1,#0x480]
0000a8  f8d11484          LDR      r1,[r1,#0x484]
0000ac  e9cd2100          STRD     r2,r1,[sp,#0]
;;;921    			
;;;922    //			if(thisModeConf->Palm.ucPalmDrawingOn > 1)
;;;923    //				algorithm_width_height_calculation(i);
;;;924    
;;;925    			if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
0000b0  f8b00c87          LDRH     r0,[r0,#0xc87]
;;;926    				alogorithm_coord_modify_pos(&old_pos,&pos, i);
;;;927    			else
;;;928    				alogorithm_coord_modify_pos(&pos, &pos, i);
0000b4  4622              MOV      r2,r4
0000b6  2800              CMP      r0,#0                 ;925
0000b8  4669              MOV      r1,sp
0000ba  bf0c              ITE      EQ
0000bc  4608              MOVEQ    r0,r1
0000be  a802              ADDNE    r0,sp,#8              ;926
0000c0  f7fffffe          BL       alogorithm_coord_modify_pos
;;;929    		}
;;;930    		
;;;931    		if (thisInfo->tCoord.tPos.vusS[i] > 0)
0000c4  68a9              LDR      r1,[r5,#8]  ; thisInfo
0000c6  eb010044          ADD      r0,r1,r4,LSL #1
0000ca  f8b024d0          LDRH     r2,[r0,#0x4d0]
0000ce  2a00              CMP      r2,#0
0000d0  d07e              BEQ      |L2.464|
;;;932    		{
;;;933    #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;934    			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,0);
;;;935    #endif
;;;936    			
;;;937    			distX = pos.x - old_pos.x;
0000d2  9b02              LDR      r3,[sp,#8]
0000d4  9a00              LDR      r2,[sp,#0]
0000d6  eba20903          SUB      r9,r2,r3
;;;938    			distY = pos.y - old_pos.y;
0000da  9b03              LDR      r3,[sp,#0xc]
0000dc  9a01              LDR      r2,[sp,#4]
0000de  ebb20803          SUBS     r8,r2,r3
;;;939    			if (distY < 0)
;;;940    			distY = -distY;
0000e2  bf48              IT       MI
0000e4  f1c80800          RSBMI    r8,r8,#0
;;;941    			if (distX < 0)
0000e8  f1b90f00          CMP      r9,#0
;;;942    			distX = -distX;
0000ec  bfb8              IT       LT
0000ee  f1c90900          RSBLT    r9,r9,#0
;;;943    
;;;944    			if (!thisInfo->tCoord.bFirstLongDistanceMoved[i])
0000f2  190a              ADDS     r2,r1,r4
0000f4  f8922e05          LDRB     r2,[r2,#0xe05]
0000f8  2a00              CMP      r2,#0
;;;945    			{
;;;946    				ucMoveTHD_X = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;947    				ucMoveTHD_Y = thisModeConf->Coord.ucFirstMoveEventTHD;
;;;948    			}
;;;949    			else
;;;950    			{
;;;951    				ucMoveTHD_X = thisModeConf->Coord.ucMoveEventTHD;
0000fa  686a              LDR      r2,[r5,#4]  ; thisModeConf
0000fc  bf0c              ITE      EQ                    ;946
0000fe  f8927058          LDRBEQ   r7,[r2,#0x58]         ;946
000102  f8927059          LDRBNE   r7,[r2,#0x59]
;;;952    				ucMoveTHD_Y = thisModeConf->Coord.ucMoveEventTHD;
;;;953    			}
;;;954    			
;;;955    			if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 || (distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X))
000106  f8b02c87          LDRH     r2,[r0,#0xc87]
00010a  2a00              CMP      r2,#0
00010c  bf18              IT       NE
00010e  45b8              CMPNE    r8,r7
000110  bfb8              IT       LT
000112  45b9              CMPLT    r9,r7
;;;956    			{
;;;957    #if (ID_MAPPING_CHANGE)
;;;958    				if (thisInfo->tCoord.tPastSentPos.vusS[i] == 0 )
;;;959    				{
;;;960    					NewID++;
;;;961    					if(NewID > 30)NewID=1;
;;;962    					Id_Map[i] = NewID;
;;;963    				}
;;;964    #endif				
;;;965    				uSWIPTouchItem_t tItem;
;;;966    #if USED_SHARP_SPECIFIC_PROTOCOL
;;;967    				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;968    				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;969    				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;970    									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;971    									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;972    									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;973    									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;974    									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;975    #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;976    				tItem.tItem00.tInfo.bTouch = YES;
;;;977    				tItem.tItem00.tInfo.bHover = NO;
;;;978    				tItem.tItem00.tInfo.bScreen = YES;
;;;979    				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
;;;980    	#if (ID_MAPPING_CHANGE)
;;;981    				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;982    	#else
;;;983    				tItem.tItem00.tInfo.b4FingerID = i + 1;
;;;984    	#endif
;;;985    #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;986    				tItem.tItem00.ucRowStart = 0;
;;;987    
;;;988    				SET_POS(tItem, pos);
;;;989    				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
;;;990    				//                tItem.tItem00.ucWidth = thisInfo->tCoord.cScreenDebCnt[i];
;;;991    				
;;;992    //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;993    //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;994    				
;;;995    				if(id == 0)
;;;996    				{
;;;997    					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
;;;998    				}
;;;999    #if !(ID_MAPPING_CHANGE)
;;;1000   				protocol_swip_PushTouchEvent(&tItem);
;;;1001   #endif				
;;;1002   				protocol_hid_PushTouchEvent(&tItem);
;;;1003   
;;;1004   				if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0 && ((distY >= ucMoveTHD_Y) || (distX >= ucMoveTHD_X)) ) //distance moved.
;;;1005   				{
;;;1006   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = YES;
;;;1007   				}
;;;1008   				else //1st touch.
;;;1009   				{
;;;1010   					thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
;;;1011   				}
;;;1012   
;;;1013   				thisInfo->tCoord.tPastSentPos.tXY[i].x = thisInfo->tCoord.tPos.tXY[i].x;
;;;1014   				thisInfo->tCoord.tPastSentPos.tXY[i].y = thisInfo->tCoord.tPos.tXY[i].y;
;;;1015   				thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
;;;1016   				thisInfo->tCoord.tPastSentPos.vusR[i] = thisInfo->tCoord.tPos.vusR[i];
;;;1017   //				thisInfo->tCoord.tPastSentPos.vusW[i] = thisInfo->tCoord.tPos.vusW[i];
;;;1018   //				thisInfo->tCoord.tPastSentPos.vusH[i] = thisInfo->tCoord.tPos.vusH[i];
;;;1019   				
;;;1020   #if (REMOVE_EDGE_EN == YES)
;;;1021   				thisInfo->tCoord.tRealPastSentPos1.tXY[i].x = thisInfo->tCoord.tRealPastSentPos.tXY[i].x;
;;;1022   				thisInfo->tCoord.tRealPastSentPos1.tXY[i].y = thisInfo->tCoord.tRealPastSentPos.tXY[i].y;
;;;1023   #endif
;;;1024   				
;;;1025   				thisInfo->tCoord.tRealPastSentPos.tXY[i].x = pos.x;
;;;1026   				thisInfo->tCoord.tRealPastSentPos.tXY[i].y = pos.y;
;;;1027   			}
;;;1028   			else
;;;1029   			{
;;;1030   				uSWIPTouchItem_t tItem;
;;;1031   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1032   				tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1033   				tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_PRESS;		// status
;;;1034   				tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1035   									  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1036   									  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1037   									  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1038   									  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1039   									  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1040   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1041   				tItem.tItem00.tInfo.bTouch = YES;
000114  f89d2010          LDRB     r2,[sp,#0x10]
;;;1042   				tItem.tItem00.tInfo.bHover = NO;
;;;1043   				tItem.tItem00.tInfo.bScreen = YES;
000118  f5015180          ADD      r1,r1,#0x1000
00011c  f0420280          ORR      r2,r2,#0x80           ;1041
000120  f0220220          BIC      r2,r2,#0x20           ;1042
;;;1044   				tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
000124  f8911f87          LDRB     r1,[r1,#0xf87]
000128  f0420240          ORR      r2,r2,#0x40           ;1043
00012c  f3611204          BFI      r2,r1,#4,#1
;;;1045   	#if (ID_MAPPING_CHANGE)
;;;1046   				tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1047   	#else
;;;1048   				tItem.tItem00.tInfo.b4FingerID = i + 1;
000130  f1040101          ADD      r1,r4,#1
000134  f3610203          BFI      r2,r1,#0,#4
000138  f88d2010          STRB     r2,[sp,#0x10]
;;;1049   	#endif
;;;1050   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1051   				tItem.tItem00.ucRowStart = 0;
00013c  f88d6018          STRB     r6,[sp,#0x18]
000140  db4d              BLT      |L2.478|
000142  9900              LDR      r1,[sp,#0]            ;988
000144  0a09              LSRS     r1,r1,#8              ;988
000146  f88d1011          STRB     r1,[sp,#0x11]         ;988
00014a  9901              LDR      r1,[sp,#4]            ;988
00014c  0a09              LSRS     r1,r1,#8              ;988
00014e  f88d1012          STRB     r1,[sp,#0x12]         ;988
000152  9900              LDR      r1,[sp,#0]            ;988
000154  f88d1013          STRB     r1,[sp,#0x13]         ;988
000158  9901              LDR      r1,[sp,#4]            ;988
00015a  f88d1014          STRB     r1,[sp,#0x14]         ;988
00015e  f8b014e4          LDRH     r1,[r0,#0x4e4]        ;989
000162  29ff              CMP      r1,#0xff              ;989
000164  bf28              IT       CS                    ;989
000166  21ff              MOVCS    r1,#0xff              ;989
000168  f88d1015          STRB     r1,[sp,#0x15]         ;989
00016c  f1ba0f00          CMP      r10,#0                ;995
000170  bf04              ITT      EQ                    ;997
000172  f8b004d0          LDRHEQ   r0,[r0,#0x4d0]        ;997
000176  f8ad0016          STRHEQ   r0,[sp,#0x16]         ;997
00017a  a804              ADD      r0,sp,#0x10           ;1000
00017c  f7fffffe          BL       protocol_swip_PushTouchEvent
000180  a804              ADD      r0,sp,#0x10           ;1002
000182  f7fffffe          BL       protocol_hid_PushTouchEvent
000186  68a8              LDR      r0,[r5,#8]            ;1004  ; thisInfo
000188  eb000144          ADD      r1,r0,r4,LSL #1       ;1004
00018c  f8b12c87          LDRH     r2,[r1,#0xc87]        ;1004
000190  b13a              CBZ      r2,|L2.418|
000192  463a              MOV      r2,r7                 ;1004
000194  45b8              CMP      r8,r7                 ;1004
000196  bfb2              ITEE     LT                    ;1004
000198  4591              CMPLT    r9,r2                 ;1004
00019a  1902              ADDGE    r2,r0,r4              ;1006
00019c  f882be05          STRBGE   r11,[r2,#0xe05]       ;1006
0001a0  da02              BGE      |L2.424|
                  |L2.418|
0001a2  1902              ADDS     r2,r0,r4              ;1010
0001a4  f8826e05          STRB     r6,[r2,#0xe05]        ;1010
                  |L2.424|
0001a8  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1013
0001ac  f8d02480          LDR      r2,[r0,#0x480]        ;1013
0001b0  f8c02c37          STR      r2,[r0,#0xc37]        ;1013
0001b4  f8d02484          LDR      r2,[r0,#0x484]        ;1014
0001b8  f8c02c3b          STR      r2,[r0,#0xc3b]        ;1014
0001bc  f8b124d0          LDRH     r2,[r1,#0x4d0]        ;1015
0001c0  f8a12c87          STRH     r2,[r1,#0xc87]        ;1015
0001c4  f8b124e4          LDRH     r2,[r1,#0x4e4]        ;1016
0001c8  f8a12c9b          STRH     r2,[r1,#0xc9b]        ;1016
0001cc  9900              LDR      r1,[sp,#0]            ;1025
0001ce  e000              B        |L2.466|
                  |L2.464|
0001d0  e026              B        |L2.544|
                  |L2.466|
0001d2  f8c01cb0          STR      r1,[r0,#0xcb0]        ;1026
0001d6  9901              LDR      r1,[sp,#4]            ;1026
0001d8  f8c01cb4          STR      r1,[r0,#0xcb4]        ;1027
0001dc  e056              B        |L2.652|
                  |L2.478|
;;;1052   				SET_POS(tItem, old_pos);
0001de  9902              LDR      r1,[sp,#8]
0001e0  f88d3014          STRB     r3,[sp,#0x14]
0001e4  0a09              LSRS     r1,r1,#8
0001e6  f88d1011          STRB     r1,[sp,#0x11]
0001ea  0a19              LSRS     r1,r3,#8
0001ec  f88d1012          STRB     r1,[sp,#0x12]
0001f0  9902              LDR      r1,[sp,#8]
0001f2  f88d1013          STRB     r1,[sp,#0x13]
;;;1053   				tItem.tItem00.ucWidth = MIN(thisInfo->tCoord.tPos.vusR[i], UINT8_MAX);
0001f6  f8b014e4          LDRH     r1,[r0,#0x4e4]
0001fa  29ff              CMP      r1,#0xff
0001fc  bf28              IT       CS
0001fe  21ff              MOVCS    r1,#0xff
000200  f88d1015          STRB     r1,[sp,#0x15]
;;;1054   
;;;1055   				//To do	-> Old Width, Height
;;;1056   //				tItem.tItem02.usWidth = thisInfo->tCoord.tPos.vusW[i];
;;;1057   //				tItem.tItem02.usHeight = thisInfo->tCoord.tPos.vusH[i];
;;;1058   				
;;;1059   				if(id == 0)
000204  f1ba0f00          CMP      r10,#0
;;;1060   				{
;;;1061   					tItem.tItem00.usStrength = thisInfo->tCoord.tPos.vusS[i];
000208  bf04              ITT      EQ
00020a  f8b004d0          LDRHEQ   r0,[r0,#0x4d0]
00020e  f8ad0016          STRHEQ   r0,[sp,#0x16]
                  |L2.530|
;;;1062   				}
;;;1063   #if !(ID_MAPPING_CHANGE)
;;;1064   				protocol_swip_PushTouchEvent(&tItem);
000212  a804              ADD      r0,sp,#0x10
000214  f7fffffe          BL       protocol_swip_PushTouchEvent
;;;1065   #endif				
;;;1066   				protocol_hid_PushTouchEvent(&tItem);
000218  a804              ADD      r0,sp,#0x10
00021a  f7fffffe          BL       protocol_hid_PushTouchEvent
;;;1067   				
;;;1068   			}
00021e  e035              B        |L2.652|
                  |L2.544|
;;;1069   #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;1070   			thisInfo->bIsIdleToActive = NO;
;;;1071   #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;1072   		}
;;;1073   		else if (thisInfo->tCoord.tPastSentPos.vusS[i] > 0)
000220  eb010244          ADD      r2,r1,r4,LSL #1
000224  f8b20c87          LDRH     r0,[r2,#0xc87]
000228  b378              CBZ      r0,|L2.650|
;;;1074   		{
;;;1075   			
;;;1076   		#if (SWIP_QUEUE_MODE == 2)
;;;1077   			thisInfo->bTouchOffFlag = 1;
00022a  f5015380          ADD      r3,r1,#0x1000
00022e  f883bf9f          STRB     r11,[r3,#0xf9f]
;;;1078   		#endif
;;;1079   			
;;;1080   			uSWIPTouchItem_t tItem;
;;;1081   #if USED_SHARP_SPECIFIC_PROTOCOL
;;;1082   			tItem.tItem00.tInfo.b4FingerID = i + 1;					// id
;;;1083   			tItem.tItem00.tInfo.b1Status = TOUCH_STATUS_RELEASE;		// status
;;;1084   			tItem.tItem00.tInfo.b6Type = (touchItemType.finger << TOUCH_TYPE_FINGER) |
;;;1085   								  (touchItemType.glove << TOUCH_TYPE_GLOVE) |
;;;1086   								  (touchItemType.hover << TOUCH_TYPE_HOVER) |
;;;1087   								  (touchItemType.passive_stylus << TOUCH_TYPE_PASSIVE_STYLUS) |
;;;1088   								  (touchItemType.active_stylus << TOUCH_TYPE_ACTIVE_STYLUS) |
;;;1089   								  (touchItemType.active_stylus_hover << TOUCH_TYPE_ACTIVE_STYLUS_HOVER);
;;;1090   #else /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1091   			tItem.tItem00.tInfo.bTouch = NO;
000232  f89d0010          LDRB     r0,[sp,#0x10]
;;;1092   			tItem.tItem00.tInfo.bHover = NO;
;;;1093   			tItem.tItem00.tInfo.bScreen = YES;
;;;1094   			tItem.tItem00.tInfo.bPalm = thisInfo->bIsPalm;
000236  f8933f87          LDRB     r3,[r3,#0xf87]
00023a  f02000a0          BIC      r0,r0,#0xa0           ;1092
00023e  f0400040          ORR      r0,r0,#0x40           ;1093
000242  f3631004          BFI      r0,r3,#4,#1
;;;1095   	#if (ID_MAPPING_CHANGE)
;;;1096   			tItem.tItem00.tInfo.b4FingerID = Id_Map[i];
;;;1097   	#else
;;;1098   			tItem.tItem00.tInfo.b4FingerID = i + 1;
000246  1c63              ADDS     r3,r4,#1
000248  f3630003          BFI      r0,r3,#0,#4
00024c  f88d0010          STRB     r0,[sp,#0x10]
;;;1099   	#endif
;;;1100   #endif /* USED_SHARP_SPECIFIC_PROTOCOL */
;;;1101   			tItem.tItem00.ucRowStart = 0;
;;;1102   
;;;1103   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1104   			if(i == 0)algorithm_BigFingerEdgeAccTest(&pos,&old_pos,1);			
;;;1105   #endif
;;;1106   			
;;;1107   			SET_POS(tItem, old_pos);	
000250  9802              LDR      r0,[sp,#8]
000252  f88d6018          STRB     r6,[sp,#0x18]         ;1101
000256  0a00              LSRS     r0,r0,#8
000258  f88d0011          STRB     r0,[sp,#0x11]
00025c  9803              LDR      r0,[sp,#0xc]
00025e  0a00              LSRS     r0,r0,#8
000260  f88d0012          STRB     r0,[sp,#0x12]
000264  9802              LDR      r0,[sp,#8]
000266  f88d0013          STRB     r0,[sp,#0x13]
00026a  9803              LDR      r0,[sp,#0xc]
00026c  f88d0014          STRB     r0,[sp,#0x14]
;;;1108   			tItem.tItem00.ucWidth = 0;
000270  f88d6015          STRB     r6,[sp,#0x15]
;;;1109   			//			thisInfo->bGhostState = NO;
;;;1110   
;;;1111   			if(id == 0)
000274  f1ba0f00          CMP      r10,#0
;;;1112   			{
;;;1113   				tItem.tItem00.usStrength =thisInfo->tCoord.tPos.vusS[i];
000278  bf04              ITT      EQ
00027a  f8b204d0          LDRHEQ   r0,[r2,#0x4d0]
00027e  f8ad0016          STRHEQ   r0,[sp,#0x16]
;;;1114   			}
;;;1115   
;;;1116   			thisInfo->tCoord.bFirstLongDistanceMoved[i] = NO;
000282  1908              ADDS     r0,r1,r4
000284  f8806e05          STRB     r6,[r0,#0xe05]
;;;1117   #if !(ID_MAPPING_CHANGE)
;;;1118   			protocol_swip_PushTouchEvent(&tItem);
;;;1119   #endif
;;;1120   			protocol_hid_PushTouchEvent(&tItem);
;;;1121   		}
000288  e7c3              B        |L2.530|
                  |L2.650|
00028a  e7ff              B        |L2.652|
                  |L2.652|
;;;1122   		thisInfo->tCoord.tPastSentPos.vusS[i] = thisInfo->tCoord.tPos.vusS[i];
00028c  68a8              LDR      r0,[r5,#8]  ; thisInfo
00028e  eb000044          ADD      r0,r0,r4,LSL #1
000292  1c64              ADDS     r4,r4,#1
000294  f8b014d0          LDRH     r1,[r0,#0x4d0]
000298  f8a01c87          STRH     r1,[r0,#0xc87]
00029c  2c0a              CMP      r4,#0xa
00029e  f6ffaeec          BLT      |L2.122|
;;;1123   	}
;;;1124   #if (SWIP_QUEUE_MODE)
;;;1125   	if(thisInfo->bQueueStart == 1){
0002a2  68ab              LDR      r3,[r5,#8]  ; thisInfo
0002a4  f5035080          ADD      r0,r3,#0x1000
0002a8  f8901f9e          LDRB     r1,[r0,#0xf9e]
0002ac  2901              CMP      r1,#1
0002ae  d115              BNE      |L2.732|
;;;1126   	#if (SWIP_QUEUE_MODE == 2)
;;;1127   		if(thisInfo->QueueFront == thisInfo->QueueRear || thisInfo->bTouchOffFlag )
0002b0  f8902f9d          LDRB     r2,[r0,#0xf9d]
0002b4  f8901f9c          LDRB     r1,[r0,#0xf9c]
0002b8  428a              CMP      r2,r1
0002ba  d002              BEQ      |L2.706|
0002bc  f8902f9f          LDRB     r2,[r0,#0xf9f]
0002c0  b162              CBZ      r2,|L2.732|
                  |L2.706|
;;;1128   	#endif
;;;1129   		{
;;;1130   			thisInfo->QueueRear++;
;;;1131   			thisInfo->QueueRear = (thisInfo->QueueRear) % SWIP_QUEUE_SIZE;
0002c2  4c13              LDR      r4,|L2.784|
0002c4  1c49              ADDS     r1,r1,#1              ;1127
0002c6  b2c9              UXTB     r1,r1                 ;1130
0002c8  46a4              MOV      r12,r4
0002ca  2200              MOVS     r2,#0
0002cc  fbe1c204          UMLAL    r12,r2,r1,r4
0002d0  0852              LSRS     r2,r2,#1
0002d2  eba202c2          SUB      r2,r2,r2,LSL #3
0002d6  4411              ADD      r1,r1,r2
0002d8  f8801f9c          STRB     r1,[r0,#0xf9c]
                  |L2.732|
;;;1132   		}
;;;1133   	}
;;;1134   #endif	
;;;1135   	//°u°A A¤º¸ ¸ðμI ¾÷μ￥AIÆ®.
;;;1136   	thisInfo->tCoord.tPastSentPos.sFinger_ = thisInfo->tCoord.tPos.sFinger_;
0002dc  f893047f          LDRB     r0,[r3,#0x47f]
0002e0  f8830c36          STRB     r0,[r3,#0xc36]
;;;1137   //	thisInfo->bWasPalm = thisInfo->bIsPalm;
;;;1138   
;;;1139   //	if ((CheckI2CReady() == 0))
;;;1140   #if !(ID_MAPPING_CHANGE)
;;;1141   	protocol_swip_SendTouchEvent(); // 여기서 뻗음
0002e4  f7fffffe          BL       protocol_swip_SendTouchEvent
;;;1142   #endif
;;;1143   //	 protocol_hid_SendTouchEvent();
;;;1144   
;;;1145   #ifdef JOSH3_PEN_TEST
;;;1146   	SendPenData();
;;;1147   #else
;;;1148   #ifdef ADD_TOUCH
;;;1149   	SendTouchData();  // Touch en (choigs)
0002e8  f7fffffe          BL       SendTouchData
;;;1150   #endif
;;;1151   #endif
;;;1152   #if (ID_MAPPING_CHANGE)	
;;;1153   	if(thisInfo->tCoord.tPos.sFinger_ == 0 && thisInfo->tCoord.tPastPos[0].sFinger_ == 0){if(NonTouchCnt++ > 32767)NonTouchCnt=30;}
;;;1154   	else NonTouchCnt = 0;
;;;1155   	
;;;1156   	if(NonTouchCnt >= 30)
;;;1157   	{
;;;1158   		NewID = 30;
;;;1159   		memset(Id_Map,0,sizeof(Id_Map));
;;;1160   	}
;;;1161   #endif	
;;;1162   	hal_clear_overlap_pen();
0002ec  f7fffffe          BL       hal_clear_overlap_pen
;;;1163   
;;;1164   #if BIG_FINGER_EDGE_ACC_TEST_ALGO_EN
;;;1165   	if(thisInfo->tCoord.tPos.sFinger_==0 || thisInfo->tCoord.tPos.sFinger_>1)
;;;1166   	{
;;;1167   		if(bBigFingerEdgeTestEn[0] || bBigFingerEdgeTestEn[1] || bBigFingerEdgeTestEn[2] || bBigFingerEdgeTestEn[3])
;;;1168   		{
;;;1169   			ucBigFingerEdgeTest_MoveEventTHD_Change=0;
;;;1170   			memset(bBigFingerEdgeTestFlag,0,sizeof(bBigFingerEdgeTestFlag));
;;;1171   			if(thisInfo->tCoord.tPos.sFinger_==0)bBigFingerEdgeTestEn[0]=bBigFingerEdgeTestEn[1]=bBigFingerEdgeTestEn[2]=bBigFingerEdgeTestEn[3]=0;
;;;1172   		}
;;;1173   	}	
;;;1174   #endif	
;;;1175   }
0002f0  b007              ADD      sp,sp,#0x1c
0002f2  e8bd8ff0          POP      {r4-r11,pc}
;;;1176   
                          ENDP

0002f6  0000              DCW      0x0000
                  |L2.760|
                          DCD      HID_status
                  |L2.764|
                          DCD      HID_id
                  |L2.768|
                          DCD      HID_x
                  |L2.772|
                          DCD      HID_y
                  |L2.776|
                          DCD      hid_index
                  |L2.780|
                          DCD      ||.data||
                  |L2.784|
                          DCD      0x49249249

                          AREA ||i.algorithm_calc_angle_inter_2points||, CODE, READONLY, ALIGN=2

                  algorithm_calc_angle_inter_2points PROC
;;;371    #else
;;;372    int32_t algorithm_calc_angle_inter_2points(int diff_x, int diff_y)
000000  e92d03f0          PUSH     {r4-r9}
;;;373    {
;;;374    	int angle = 0;
;;;375    
;;;376    //	int diff_x, diff_y;
;;;377    
;;;378    //	diff_x = _tPos2.x - _tPos1.x;
;;;379    //	diff_y = _tPos2.y - _tPos1.y;
;;;380    
;;;381    	if( diff_x > 0  )
;;;382    	{
;;;383    		if( diff_y > 0 )
;;;384    		{
;;;385    			if( diff_x >= diff_y )
;;;386    				angle = sucArcTanLookUpTable[(diff_y * 100)/diff_x];
000004  f04f0364          MOV      r3,#0x64
000008  fb01f503          MUL      r5,r1,r3
;;;387    			else
;;;388    				angle = 9000 - sucArcTanLookUpTable[(diff_x * 100)/diff_y];
;;;389    		}
;;;390    		else if( diff_y < 0 )
;;;391    		{
;;;392    			if( diff_x >= -(diff_y) )
;;;393    				angle = 36000 - sucArcTanLookUpTable[(-diff_y * 100)/diff_x];
00000c  f06f0c63          MVN      r12,#0x63
000010  1e02              SUBS     r2,r0,#0              ;373
000012  4b3d              LDR      r3,|L3.264|
000014  fb01f40c          MUL      r4,r1,r12
000018  f04f0000          MOV      r0,#0                 ;374
00001c  f2423728          MOV      r7,#0x2328            ;388
;;;394    			else
;;;395    				angle = 27000 + sucArcTanLookUpTable[(diff_x * 100)/-diff_y];
000020  f6461878          MOV      r8,#0x6978
000024  f1c10c00          RSB      r12,r1,#0             ;392
000028  dd2c              BLE      |L3.132|
00002a  2664              MOVS     r6,#0x64              ;388
00002c  4356              MULS     r6,r2,r6              ;388
00002e  2900              CMP      r1,#0                 ;383
000030  dd10              BLE      |L3.84|
000032  4291              CMP      r1,r2                 ;385
000034  bfdf              ITTTT    LE                    ;386
000036  fb95f0f2          SDIVLE   r0,r5,r2              ;386
00003a  f9330010          LDRSHLE  r0,[r3,r0,LSL #1]     ;386
;;;396    		}
;;;397    		else
;;;398    		{
;;;399    			angle = 0;
;;;400    		}
;;;401    	}
;;;402    	else if( diff_x < 0 )
;;;403    	{
;;;404    		if( diff_y > 0 )
;;;405    		{
;;;406    			if( -diff_x < diff_y )
;;;407    				angle = 9000 + sucArcTanLookUpTable[(-diff_x * 100)/diff_y];
;;;408    			else
;;;409    				angle = 18000 - sucArcTanLookUpTable[(diff_y * 100)/-diff_x];
;;;410    		}
;;;411    		else if( diff_y < 0 )
;;;412    		{
;;;413    			if( -diff_x >= -diff_y )
;;;414    				angle = 18000 + sucArcTanLookUpTable[(-diff_y * 100)/-diff_x];
;;;415    			else
;;;416    				angle = 27000 - sucArcTanLookUpTable[(-diff_x * 100)/-diff_y];
;;;417    		}
;;;418    		else
;;;419    		{
;;;420    			angle = 18000;
;;;421    		}
;;;422    	}
;;;423    	else
;;;424    	{
;;;425    		if( diff_y > 0 )
;;;426    			angle = 9000;
;;;427    		else if( diff_y < 0 )
;;;428    		{
;;;429    			angle = 27000;
;;;430    		}
;;;431    	}
;;;432    
;;;433    	return angle;
;;;434    }
00003e  e8bd03f0          POPLE    {r4-r9}
000042  4770              BXLE     lr
000044  fb96f0f1          SDIV     r0,r6,r1              ;388
000048  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;388
00004c  1a38              SUBS     r0,r7,r0              ;388
00004e  e8bd03f0          POP      {r4-r9}
000052  4770              BX       lr
                  |L3.84|
000054  bfa4              ITT      GE
000056  e8bd03f0          POPGE    {r4-r9}
00005a  4770              BXGE     lr
00005c  4562              CMP      r2,r12                ;392
00005e  db09              BLT      |L3.116|
000060  fb94f0f2          SDIV     r0,r4,r2              ;393
000064  f64841a0          MOV      r1,#0x8ca0            ;393
000068  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;393
00006c  e8bd03f0          POP      {r4-r9}
000070  1a08              SUBS     r0,r1,r0              ;393
000072  4770              BX       lr
                  |L3.116|
000074  fb96f0fc          SDIV     r0,r6,r12             ;395
000078  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;395
00007c  4440              ADD      r0,r0,r8              ;395
00007e  e8bd03f0          POP      {r4-r9}
000082  4770              BX       lr
                  |L3.132|
000084  da35              BGE      |L3.242|
000086  f06f0063          MVN      r0,#0x63              ;407
00008a  fb02f600          MUL      r6,r2,r0              ;407
00008e  4250              RSBS     r0,r2,#0              ;406
000090  f2446950          MOV      r9,#0x4650            ;409
000094  2900              CMP      r1,#0                 ;404
000096  bf08              IT       EQ                    ;420
000098  f2446050          MOVEQ    r0,#0x4650            ;420
00009c  dd12              BLE      |L3.196|
00009e  4281              CMP      r1,r0                 ;406
0000a0  dd07              BLE      |L3.178|
0000a2  fb96f0f1          SDIV     r0,r6,r1              ;407
0000a6  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;407
0000aa  4438              ADD      r0,r0,r7              ;407
0000ac  e8bd03f0          POP      {r4-r9}
0000b0  4770              BX       lr
                  |L3.178|
0000b2  fb95f0f0          SDIV     r0,r5,r0              ;409
0000b6  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;409
0000ba  eba90000          SUB      r0,r9,r0              ;409
0000be  e8bd03f0          POP      {r4-r9}
0000c2  4770              BX       lr
                  |L3.196|
0000c4  bfa4              ITT      GE
0000c6  e8bd03f0          POPGE    {r4-r9}
0000ca  4770              BXGE     lr
0000cc  4560              CMP      r0,r12                ;413
0000ce  db07              BLT      |L3.224|
0000d0  fb94f0f0          SDIV     r0,r4,r0              ;414
0000d4  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;414
0000d8  4448              ADD      r0,r0,r9              ;414
0000da  e8bd03f0          POP      {r4-r9}
0000de  4770              BX       lr
                  |L3.224|
0000e0  fb96f0fc          SDIV     r0,r6,r12             ;416
0000e4  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;416
0000e8  eba80000          SUB      r0,r8,r0              ;416
0000ec  e8bd03f0          POP      {r4-r9}
0000f0  4770              BX       lr
                  |L3.242|
0000f2  2900              CMP      r1,#0                 ;425
0000f4  bfb8              IT       LT                    ;429
0000f6  f6461078          MOVLT    r0,#0x6978            ;429
0000fa  bfc8              IT       GT                    ;426
0000fc  f2423028          MOVGT    r0,#0x2328            ;426
000100  e8bd03f0          POP      {r4-r9}
000104  4770              BX       lr
;;;435    #if 0
                          ENDP

000106  0000              DCW      0x0000
                  |L3.264|
                          DCD      ||.data||+0x14

                          AREA ||i.algorithm_calc_sqrt||, CODE, READONLY, ALIGN=1

                  algorithm_calc_sqrt PROC
;;;274    
;;;275    int32_t algorithm_calc_sqrt(int32_t d)
000000  2101              MOVS     r1,#1
;;;276    {
;;;277        uint32_t x = 1;
;;;278    
;;;279        x = (x + d/x)>>1;
000002  fbb0f1f1          UDIV     r1,r0,r1
000006  1c49              ADDS     r1,r1,#1
000008  0849              LSRS     r1,r1,#1
;;;280        x = (x + d/x)>>1;
00000a  fbb0f2f1          UDIV     r2,r0,r1
00000e  4411              ADD      r1,r1,r2
000010  0849              LSRS     r1,r1,#1
;;;281        x = (x + d/x)>>1;
000012  fbb0f2f1          UDIV     r2,r0,r1
000016  4411              ADD      r1,r1,r2
000018  0849              LSRS     r1,r1,#1
;;;282        x = (x + d/x)>>1;
00001a  fbb0f2f1          UDIV     r2,r0,r1
00001e  4411              ADD      r1,r1,r2
000020  0849              LSRS     r1,r1,#1
;;;283        x = (x + d/x)>>1;
000022  fbb0f2f1          UDIV     r2,r0,r1
000026  4411              ADD      r1,r1,r2
000028  0849              LSRS     r1,r1,#1
;;;284        x = (x + d/x)>>1;
00002a  fbb0f2f1          UDIV     r2,r0,r1
00002e  4411              ADD      r1,r1,r2
000030  0849              LSRS     r1,r1,#1
;;;285        x = (x + d/x)>>1;
000032  fbb0f2f1          UDIV     r2,r0,r1
000036  4411              ADD      r1,r1,r2
000038  0849              LSRS     r1,r1,#1
;;;286        x = (x + d/x)>>1;
00003a  fbb0f2f1          UDIV     r2,r0,r1
00003e  4411              ADD      r1,r1,r2
000040  0849              LSRS     r1,r1,#1
;;;287        x = (x + d/x)>>1;
000042  fbb0f2f1          UDIV     r2,r0,r1
000046  4411              ADD      r1,r1,r2
000048  0849              LSRS     r1,r1,#1
;;;288        x = (x + d/x)>>1;
00004a  fbb0f2f1          UDIV     r2,r0,r1
00004e  4411              ADD      r1,r1,r2
000050  0849              LSRS     r1,r1,#1
;;;289        x = (x + d/x)>>1;
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  4411              ADD      r1,r1,r2
000058  0849              LSRS     r1,r1,#1
;;;290        x = (x + d/x)>>1;
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  4411              ADD      r1,r1,r2
000060  0849              LSRS     r1,r1,#1
;;;291        x = (x + d/x)>>1;
000062  fbb0f2f1          UDIV     r2,r0,r1
000066  4411              ADD      r1,r1,r2
000068  0849              LSRS     r1,r1,#1
;;;292        x = (x + d/x)>>1;
00006a  fbb0f2f1          UDIV     r2,r0,r1
00006e  4411              ADD      r1,r1,r2
000070  0849              LSRS     r1,r1,#1
;;;293        x = (x + d/x)>>1;
000072  fbb0f0f1          UDIV     r0,r0,r1
000076  4408              ADD      r0,r0,r1
000078  0840              LSRS     r0,r0,#1
;;;294    
;;;295        return x;
;;;296    }
00007a  4770              BX       lr
;;;297    
                          ENDP


                          AREA ||i.algorithm_check_recal_cond||, CODE, READONLY, ALIGN=2

                  algorithm_check_recal_cond PROC
;;;1246   
;;;1247   void algorithm_check_recal_cond(void)
000000  490f              LDR      r1,|L5.64|
;;;1248   {
;;;1249   	thisInfo->bIsRecalCond  = NO;
000002  2200              MOVS     r2,#0
000004  6888              LDR      r0,[r1,#8]  ; thisInfo
000006  7042              STRB     r2,[r0,#1]
;;;1250   	thisInfo->bIsRecalCond2 = NO;
000008  7082              STRB     r2,[r0,#2]
;;;1251   
;;;1252   	thisInfo->bIsRecalCond = (
00000a  6849              LDR      r1,[r1,#4]  ; thisModeConf
00000c  6a42              LDR      r2,[r0,#0x24]
00000e  698b              LDR      r3,[r1,#0x18]
000010  429a              CMP      r2,r3
000012  db06              BLT      |L5.34|
;;;1253   			   (thisInfo->tDelta.iPosSum >= thisModeConf->BaseLine.iRecalCond1_PosSum_Thd)
;;;1254   			&& ((thisInfo->tDelta.iNegSum + thisInfo->tDelta.iPosSum) < thisModeConf->BaseLine.iRecalCond1_AccSum_Thd)
000014  6ac3              LDR      r3,[r0,#0x2c]
000016  441a              ADD      r2,r2,r3
000018  69cb              LDR      r3,[r1,#0x1c]
00001a  429a              CMP      r2,r3
00001c  bfb8              IT       LT
00001e  2201              MOVLT    r2,#1
000020  db00              BLT      |L5.36|
                  |L5.34|
000022  2200              MOVS     r2,#0
                  |L5.36|
000024  7042              STRB     r2,[r0,#1]
;;;1255   	);
;;;1256   	thisInfo->bIsRecalCond2 = (
000026  f641728b          MOV      r2,#0x1f8b
00002a  5c12              LDRB     r2,[r2,r0]
00002c  b92a              CBNZ     r2,|L5.58|
;;;1257   			   (thisInfo->bTouchExpect == NO)
;;;1258   			&& (thisInfo->tDelta.iNegSum < thisModeConf->BaseLine.iRecalCond2_AccSum_Thd)
00002e  6ac2              LDR      r2,[r0,#0x2c]
000030  6a09              LDR      r1,[r1,#0x20]
000032  428a              CMP      r2,r1
000034  bfb8              IT       LT
000036  2101              MOVLT    r1,#1
000038  db00              BLT      |L5.60|
                  |L5.58|
00003a  2100              MOVS     r1,#0
                  |L5.60|
00003c  7081              STRB     r1,[r0,#2]
;;;1259   	);
;;;1260   }
00003e  4770              BX       lr
;;;1261   
                          ENDP

                  |L5.64|
                          DCD      ||.data||

                          AREA ||i.algorithm_init||, CODE, READONLY, ALIGN=2

                  algorithm_init PROC
;;;181    tAlgorithmInfo_t * tTempAlgorithmInfoDebug;
;;;182    void algorithm_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;183    {
;;;184    #if (USED_IDLE_MODE_CONTROL || USED_NOISE_HOPPING_FREQ || USED_FRAME_SKIP_IDLE_MODE_CONTROL)
;;;185    	const tAppCommonConf_t * _ptAppCommonConf = NULL;
;;;186    	_ptAppCommonConf = app_GetCommonConfig();
000002  f7fffffe          BL       app_GetCommonConfig
000006  4605              MOV      r5,r0
000008  f7fffffe          BL       module_GetModeConfig
00000c  4c10              LDR      r4,|L6.80|
00000e  6020              STR      r0,[r4,#0]  ; ptModuleModeConf
000010  f7fffffe          BL       algorithm_GetModeConfig
000014  6060              STR      r0,[r4,#4]  ; thisModeConf
000016  f7fffffe          BL       algorithm_baseline_init_param
00001a  f7fffffe          BL       algorithm_label_init_param
00001e  f7fffffe          BL       algorithm_coord_init_param
;;;187    #endif /* (USED_IDLE_MODE_CONTROL || USED_NOISE_HOPPING_FREQ || USED_FRAME_SKIP_IDLE_MODE_CONTROL) */
;;;188    	
;;;189    	algorithm_init_param();
;;;190    	thisInfo = algorithm_GetInfo();
000022  f7fffffe          BL       algorithm_GetInfo
;;;191    #if USED_NOISE_HOPPING_FREQ
;;;192    	ptAppInfo = app_GetInfo();
;;;193    #endif /* USED_NOISE_HOPPING_FREQ */
;;;194    
;;;195    	DebugAlgorithmInfo = thisInfo;
000026  60a0              STR      r0,[r4,#8]  ; thisInfo
;;;196    	tTempAlgorithmInfoDebug = thisInfo;
000028  60e0              STR      r0,[r4,#0xc]  ; DebugAlgorithmInfo
;;;197    
;;;198    #if (USED_IDLE_MODE_CONTROL || USED_FRAME_SKIP_IDLE_MODE_CONTROL)
;;;199    	#if USED_ENTER_IDLE_REAL_TIME_CHECK
;;;200    		thisInfo->ulIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec;
;;;201    	#else
;;;202    		thisInfo->ulIdleModeEnterFrameCntTHD = _ptAppCommonConf->ucIdleModeEnterSec * _ptAppCommonConf->ucFrameRate;
00002a  6120              STR      r0,[r4,#0x10]  ; tTempAlgorithmInfoDebug
00002c  7ce9              LDRB     r1,[r5,#0x13]
00002e  7c2a              LDRB     r2,[r5,#0x10]
000030  f5005080          ADD      r0,r0,#0x1000
000034  4351              MULS     r1,r2,r1
;;;203    	#endif /* USED_ENTER_IDLE_REAL_TIME_CHECK */
;;;204    	thisInfo->ulIdleModeEnterCheckCount = 0;
000036  f8c01fa0          STR      r1,[r0,#0xfa0]
00003a  2100              MOVS     r1,#0
;;;205    #endif /* (USED_IDLE_MODE_CONTROL || USED_FRAME_SKIP_IDLE_MODE_CONTROL) */
;;;206    
;;;207    #if USED_NOISE_HOPPING_FREQ
;;;208    	thisInfo->ulHopFrqIdleModeFrameCntTHD = thisInfo->ulIdleModeEnterFrameCntTHD;
;;;209    	thisInfo->ulHoppMainRollbackFrameCntTHD = _ptAppCommonConf->HoppMainRollbackSec * _ptAppCommonConf->ucFrameRate;
;;;210    	thisInfo->ulHoppMainRollbackCheckCount = 0;
;;;211    #endif /* USED_NOISE_HOPPING_FREQ */
;;;212    
;;;213    	algorithm_baseline_init();
00003c  f8c01fa4          STR      r1,[r0,#0xfa4]
000040  f7fffffe          BL       algorithm_baseline_init
;;;214    	algorithm_label_init();
000044  f7fffffe          BL       algorithm_label_init
;;;215    	algorithm_coord_init();
000048  e8bd4070          POP      {r4-r6,lr}
00004c  f7ffbffe          B.W      algorithm_coord_init
;;;216    #if USED_NOISE_HOPPING_FREQ
;;;217    	algorithm_noise_init();
;;;218    #endif /* USED_NOISE_HOPPING_FREQ */
;;;219    }
;;;220    
                          ENDP

                  |L6.80|
                          DCD      ||.data||

                          AREA ||i.algorithm_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_init_param PROC
;;;220    
;;;221    void algorithm_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;222    {
;;;223    	ptModuleModeConf = module_GetModeConfig();
000002  f7fffffe          BL       module_GetModeConfig
000006  4c06              LDR      r4,|L7.32|
;;;224    	thisModeConf = algorithm_GetModeConfig();
000008  6020              STR      r0,[r4,#0]  ; ptModuleModeConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;225    	algorithm_baseline_init_param();
00000e  6060              STR      r0,[r4,#4]  ; thisModeConf
000010  f7fffffe          BL       algorithm_baseline_init_param
;;;226    	algorithm_label_init_param();
000014  f7fffffe          BL       algorithm_label_init_param
;;;227    //	algorithm_coord_init();
;;;228    	algorithm_coord_init_param();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      algorithm_coord_init_param
;;;229    }
;;;230    #if (USED_IDLE_MODE_CONTROL || USED_FRAME_SKIP_IDLE_MODE_CONTROL)
                          ENDP

                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.algorithm_is_recalibrate||, CODE, READONLY, ALIGN=2

                  algorithm_is_recalibrate PROC
;;;1261   
;;;1262   bool_t algorithm_is_recalibrate(void)
000000  4911              LDR      r1,|L8.72|
;;;1263   {
;;;1264     
;;;1265       /*
;;;1266        * Debouncing.
;;;1267        */
;;;1268       if (thisInfo->bIsRecalCond)
000002  2200              MOVS     r2,#0
000004  6888              LDR      r0,[r1,#8]  ; thisInfo
000006  7843              LDRB     r3,[r0,#1]
000008  b15b              CBZ      r3,|L8.34|
;;;1269       {
;;;1270           if (thisInfo->iRecalCondCnt <= thisModeConf->BaseLine.ucRecalCond1_WaitCnt)
00000a  6849              LDR      r1,[r1,#4]  ; thisModeConf
00000c  6843              LDR      r3,[r0,#4]
00000e  f8911024          LDRB     r1,[r1,#0x24]
000012  428b              CMP      r3,r1
;;;1271           {
;;;1272               thisInfo->iRecalCondCnt++;
000014  bfda              ITTE     LE
000016  1c59              ADDLE    r1,r3,#1
000018  6041              STRLE    r1,[r0,#4]
;;;1273           }
;;;1274           else
;;;1275           {
;;;1276               thisInfo->iRecalCondCnt = 0;   // added
00001a  6042              STRGT    r2,[r0,#4]
00001c  dd11              BLE      |L8.66|
                  |L8.30|
;;;1277               return YES;
;;;1278           }
;;;1279       }
;;;1280       else if (thisInfo->bIsRecalCond2)
;;;1281       {
;;;1282           if (thisInfo->iRecalCond2Cnt <= thisModeConf->BaseLine.ucRecalCond2_WaitCnt)     // 300 msec
;;;1283           {
;;;1284           	thisInfo->iRecalCond2Cnt++;
;;;1285           }
;;;1286           else
;;;1287           {
;;;1288           	thisInfo->iRecalCond2Cnt = 0;   // added
;;;1289               return YES;
00001e  2001              MOVS     r0,#1
;;;1290           }
;;;1291       }
;;;1292       else
;;;1293       {
;;;1294           thisInfo->iRecalCondCnt = 0;
;;;1295           thisInfo->iRecalCond2Cnt = 0;
;;;1296       }
;;;1297   
;;;1298       return NO;
;;;1299   }
000020  4770              BX       lr
                  |L8.34|
000022  7883              LDRB     r3,[r0,#2]            ;1280
000024  2b00              CMP      r3,#0                 ;1280
000026  bf04              ITT      EQ                    ;1295
000028  6042              STREQ    r2,[r0,#4]            ;1295
00002a  6082              STREQ    r2,[r0,#8]            ;1295
00002c  d009              BEQ      |L8.66|
00002e  6849              LDR      r1,[r1,#4]            ;1282  ; thisModeConf
000030  6883              LDR      r3,[r0,#8]            ;1282
000032  f8911025          LDRB     r1,[r1,#0x25]         ;1282
000036  428b              CMP      r3,r1                 ;1282
000038  bfda              ITTE     LE                    ;1284
00003a  1c59              ADDLE    r1,r3,#1              ;1284
00003c  6081              STRLE    r1,[r0,#8]            ;1284
00003e  6082              STRGT    r2,[r0,#8]            ;1288
000040  dced              BGT      |L8.30|
                  |L8.66|
000042  2000              MOVS     r0,#0                 ;1298
000044  4770              BX       lr
;;;1300   
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      ||.data||

                          AREA ||i.algorithm_process||, CODE, READONLY, ALIGN=2

                  algorithm_process PROC
;;;2133   
;;;2134   bool_t algorithm_process(uint8_t mode)
000000  b530              PUSH     {r4,r5,lr}
;;;2135   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;2136   	bool_t bIsRecalState = NO;
;;;2137   	eSENSING_MODE_t eSensingMode;
;;;2138   	eSensingMode = HAL_GetSensingMode();
000006  f7fffffe          BL       HAL_GetSensingMode
;;;2139   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2140   	uint8_t ucInterpolation_Ver = 0;
;;;2141   #endif
;;;2142   	
;;;2143   #if USED_NOISE_HOPPING_FREQ
;;;2144   	{
;;;2145   #define RAWDATA_STABLE_CNT		(2)
;;;2146   		if (ptAppInfo->eHoppingStatus == FREQ_HOPPING_CHANGED)
;;;2147   		{
;;;2148   			ptAppInfo->ucHoppFrameCnt++;
;;;2149   
;;;2150   			if (ptAppInfo->ucHoppFrameCnt > RAWDATA_STABLE_CNT)
;;;2151   			{
;;;2152   				ptAppInfo->eHoppingStatus = FREQ_HOPPING_NONE;
;;;2153   			}
;;;2154   			else
;;;2155   			{
;;;2156   				return YES;
;;;2157   			}
;;;2158   		}
;;;2159   	}
;;;2160   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2161   	
;;;2162   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2163   	//LBJ_CHECK : ucLocalFingerInterpolation_On
;;;2164   	if( (thisModeConf->Coord.ucFullFingerInterpolation_On > 0 && mode == FULL_MODE)/* || (thisModeConf->Coord.ucLocalFingerInterpolation_On > 0 && mode == LOCAL_FINGER_MODE)*/ )
;;;2165   	{
;;;2166   		if(mode == FULL_MODE)	ucInterpolation_Ver = thisModeConf->Coord.ucFullFingerInterpolation_On;
;;;2167   		//else ucInterpolation_Ver = thisModeConf->Coord.ucLocalFingerInterpolation_On;
;;;2168   	}
;;;2169   	
;;;2170   #if !USED_DO_NOT_FINGER_TOUCH_REPORT
;;;2171   	if(ucInterpolation_Ver > 0)
;;;2172   	{
;;;2173   
;;;2174   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2175   		if(ucInterpolation_Ver == 2 || ucInterpolation_Ver == 3)
;;;2176   		{
;;;2177   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;2178   			algorithm_PendTouchEvent();
;;;2179   	#endif
;;;2180   			algorithm_coord_UpdatePosHistoryInfo();
;;;2181   		}
;;;2182   #endif
;;;2183   		
;;;2184   		thisInfo->tCoord.bInterpolation_On = YES;
;;;2185   		
;;;2186   #if (INTERPOLATION_VER1_En == YES)
;;;2187   		if(ucInterpolation_Ver == 1)
;;;2188   		{
;;;2189   			algorithm_coord_interpolation(ucInterpolation_Ver);
;;;2190   	#if (PEN_FINGER_1TOUCH_REPORT == NO)
;;;2191   			algorithm_PendTouchEvent();
;;;2192   	#endif
;;;2193   			algorithm_coord_UpdatePosHistoryInfo();
;;;2194   		}
;;;2195   #endif
;;;2196   	}
;;;2197   	else
;;;2198   #endif /* !USED_DO_NOT_FINGER_TOUCH_REPORT */
;;;2199   	{
;;;2200   		thisInfo->tCoord.bInterpolation_On = NO;
;;;2201   	}
;;;2202   #endif
;;;2203   	
;;;2204   	algorithm_coord_initialise_pos_buffer();
00000a  f7fffffe          BL       algorithm_coord_initialise_pos_buffer
;;;2205   
;;;2206   	memset(sLFOffsetRow, 0, sizeof(sLFOffsetRow));
00000e  2160              MOVS     r1,#0x60
000010  4823              LDR      r0,|L9.160|
000012  f7fffffe          BL       __aeabi_memclr
;;;2207   	memset(sLFOffsetCol, 0, sizeof(sLFOffsetCol));
000016  21c0              MOVS     r1,#0xc0
000018  4822              LDR      r0,|L9.164|
00001a  f7fffffe          BL       __aeabi_memclr
;;;2208   
;;;2209   	if(!IS_S3_MODE(eSensingMode))
;;;2210   	{
;;;2211   	#if FINGER_LF_VER1_EN
;;;2212   		if(thisModeConf->SensingFilter.ucLineFilter == 1)
;;;2213   		{
;;;2214   			alogorithm_linefilter(eSensingMode);
;;;2215   		}
;;;2216   	#endif
;;;2217   	#if FINGER_LF_VER2_EN
;;;2218   		if(thisModeConf->SensingFilter.ucLineFilter == 2)
;;;2219   		{
;;;2220   			alogorithm_linefilter_2();
;;;2221   		}
;;;2222   	#endif
;;;2223   	#if FINGER_LF_VER4_EN
;;;2224   		if(thisModeConf->SensingFilter.ucLineFilter == 4)
;;;2225   		{
;;;2226   			alogorithm_linefilter_simple(eSensingMode);
;;;2227   			alogorithm_vertical_linefilter_simple(eSensingMode);
;;;2228   		}
;;;2229   	#endif
;;;2230   	}
;;;2231   	// lx98405 check
;;;2232   	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_GET_RAW_IMAGE_PTR(), COL_MAX, ROW_MAX, 84/*Raw Data*/);
00001e  4d22              LDR      r5,|L9.168|
000020  4a22              LDR      r2,|L9.172|
000022  e9d50100          LDRD     r0,r1,[r5,#0]
000026  e9cd0100          STRD     r0,r1,[sp,#0]
00002a  4669              MOV      r1,sp
00002c  2003              MOVS     r0,#3
00002e  f7fffffe          BL       protocol_Log
;;;2233   
;;;2234   	algorithm_baseline_calculate_delta(mode);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       algorithm_baseline_calculate_delta
000038  e9d50102          LDRD     r0,r1,[r5,#8]
00003c  e9cd0102          STRD     r0,r1,[sp,#8]
;;;2235   
;;;2236   	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_DELTA_IMAGE_PTR(), COL_MAX, ROW_MAX, 81/*MAX Intensity*/);  // check
000040  4a1b              LDR      r2,|L9.176|
000042  a902              ADD      r1,sp,#8
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       protocol_Log
;;;2237   
;;;2238   //	algorithm_check_recal_cond();
;;;2239   //	bIsRecalState = algorithm_is_recalibrate();
;;;2240   
;;;2241   #if (USED_FRAME_SKIP_IDLE_MODE_CONTROL == NO)
;;;2242   	if(IS_S3_MODE(eSensingMode) && IS_IDLE_MODE(eSensingMode))
;;;2243   	{
;;;2244   		algorithm_baseline_tracking_continuous(mode);
;;;2245   	}
;;;2246   	else
;;;2247   #endif /* (USED_FRAME_SKIP_IDLE_MODE_CONTROL == NO) */
;;;2248   	{
;;;2249   		if(bIsRecalState == NO)
;;;2250   		{
;;;2251   			// process label image from delta image
;;;2252   			algorithm_label_process(mode);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       algorithm_label_process
;;;2253   			algorithm_coord_process(FULL_MODE);
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       algorithm_coord_process
;;;2254   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2255   			if(ucInterpolation_Ver >= 2)
;;;2256   			{		
;;;2257   				algorithm_coord_interpolation_v02(ucInterpolation_Ver);
;;;2258   			}
;;;2259   #endif
;;;2260   		}
;;;2261   
;;;2262   #if USED_NOISE_HOPPING_FREQ
;;;2263   		algorithm_noise_process(eSensingMode);
;;;2264   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2265   
;;;2266   #if PALM_VER1_EN
;;;2267   		if(thisModeConf->Palm.ucPalmDetectionOn == 1 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 0))
;;;2268   			public_func_PalmTouch_handler();
;;;2269   		
;;;2270   		if(thisInfo->bIsPalm || thisInfo->tCoord.tPos.sFinger_ > 5) thisInfo->bNewVersionPalm = 1;
;;;2271   		if(!thisInfo->bTouchExpect) thisInfo->bNewVersionPalm = 0;
;;;2272   #endif
;;;2273   		if(thisInfo->bIsPalm)
000056  4d17              LDR      r5,|L9.180|
000058  f6417087          MOV      r0,#0x1f87
00005c  68a9              LDR      r1,[r5,#8]  ; thisInfo
00005e  5c40              LDRB     r0,[r0,r1]
000060  b128              CBZ      r0,|L9.110|
;;;2274   		{
;;;2275   			if(thisInfo->tLabel.ucPalmCnt < 100)
000062  f891035d          LDRB     r0,[r1,#0x35d]
000066  2864              CMP      r0,#0x64
000068  bf38              IT       CC
00006a  1c40              ADDCC    r0,r0,#1
00006c  d201              BCS      |L9.114|
                  |L9.110|
;;;2276   				thisInfo->tLabel.ucPalmCnt++;
00006e  f881035d          STRB     r0,[r1,#0x35d]
                  |L9.114|
;;;2277   		}
;;;2278   		else
;;;2279   			thisInfo->tLabel.ucPalmCnt = 0;
;;;2280   	
;;;2281   #if !USED_DO_NOT_FINGER_TOUCH_REPORT
;;;2282   #if (INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES) 
;;;2283   		if(ucInterpolation_Ver < 2)
;;;2284   #endif
;;;2285   		{
;;;2286   	#if (FINGER_Latency_Test_ByFW == YES)
;;;2287   			algorithm_coord_latency_cal_test();
;;;2288   	#endif
;;;2289   			algorithm_PendTouchEvent();
000072  f7fffffe          BL       algorithm_PendTouchEvent
;;;2290   			algorithm_coord_UpdatePosHistoryInfo();
000076  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
;;;2291   		}
;;;2292   #endif /* !USED_DO_NOT_FINGER_TOUCH_REPORT */
;;;2293   		
;;;2294   		if(thisModeConf->BaseLine.bFingerBaseTracking == 1 && ((mode == FULL_MODE && thisModeConf->BaseLine.bFullFingerBaseTracking == 1) || (mode == LOCAL_FINGER_MODE)))
00007a  6868              LDR      r0,[r5,#4]  ; thisModeConf
00007c  f8901026          LDRB     r1,[r0,#0x26]
000080  2901              CMP      r1,#1
000082  d10a              BNE      |L9.154|
000084  b114              CBZ      r4,|L9.140|
000086  2c02              CMP      r4,#2
000088  d004              BEQ      |L9.148|
00008a  e006              B        |L9.154|
                  |L9.140|
00008c  f8900027          LDRB     r0,[r0,#0x27]
000090  2801              CMP      r0,#1
000092  d102              BNE      |L9.154|
                  |L9.148|
;;;2295   			algorithm_baseline_tracking_continuous(mode);
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       algorithm_baseline_tracking_continuous
                  |L9.154|
;;;2296   	}
;;;2297   
;;;2298   	return (bIsRecalState == NO);
;;;2299   }
00009a  b005              ADD      sp,sp,#0x14
00009c  2001              MOVS     r0,#1                 ;2298
00009e  bd30              POP      {r4,r5,pc}
;;;2300   
                          ENDP

                  |L9.160|
                          DCD      ||.bss||
                  |L9.164|
                          DCD      ||.bss||+0xf6
                  |L9.168|
                          DCD      ||.constdata||
                  |L9.172|
                          DCD      FullSharedBuff+0x10294
                  |L9.176|
                          DCD      FullSharedBuff+0xb956
                  |L9.180|
                          DCD      ||.data||

                          AREA ||i.algorithm_process_LocalFinger||, CODE, READONLY, ALIGN=2

                  algorithm_process_LocalFinger PROC
;;;2371   #endif
;;;2372   bool_t algorithm_process_LocalFinger(void)
000000  b510              PUSH     {r4,lr}
;;;2373   {
;;;2374   	bool_t bIsRecalState = NO;
;;;2375   	algorithm_coord_initialise_pos_buffer();	
000002  f7fffffe          BL       algorithm_coord_initialise_pos_buffer
;;;2376   
;;;2377   //	protocol_LogMatrix(LT_RAWDATA, COL_MAX, HAL_GET_LOCAL_RAW_IMAGE_PTR(), COL_MAX, 8, 84/*MAX Intensity*/);
;;;2378   
;;;2379   
;;;2380   //	protocol_LogMatrix(LT_RAWDATA, thisInfo->ucScreenCol, HAL_GET_LOCAL_FINGER_RAW_IMAGE_PTR(), COL_MAX, thisInfo->ucScreenRow, 84/*MAX Intensity*/);
;;;2381   	memset(sLFOffsetRow, 0, sizeof(sLFOffsetRow));
000006  2160              MOVS     r1,#0x60
000008  4834              LDR      r0,|L10.220|
00000a  f7fffffe          BL       __aeabi_memclr
;;;2382   //			alogorithm_linefilter(); // �������� ���� �þ ���߿� �������
;;;2383   
;;;2384   	//	if(thisModeConf->BaseLine.bDSP_A)
;;;2385   	//	algorithm_baseline_calculate_delta_DSP(FULL_MODE);
;;;2386   	//	else
;;;2387   	algorithm_baseline_calculate_delta_localFinger(LOCAL_FINGER_MODE);
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       algorithm_baseline_calculate_delta_localFinger
000014  4a32              LDR      r2,|L10.224|
000016  2100              MOVS     r1,#0
000018  6890              LDR      r0,[r2,#8]  ; thisInfo
00001a  7041              STRB     r1,[r0,#1]
00001c  7081              STRB     r1,[r0,#2]
00001e  6852              LDR      r2,[r2,#4]  ; thisModeConf
000020  6a43              LDR      r3,[r0,#0x24]
000022  f8d2c018          LDR      r12,[r2,#0x18]
000026  4563              CMP      r3,r12
000028  db08              BLT      |L10.60|
00002a  f8d0c02c          LDR      r12,[r0,#0x2c]
00002e  4463              ADD      r3,r3,r12
000030  f8d2c01c          LDR      r12,[r2,#0x1c]
000034  4563              CMP      r3,r12
000036  bfb8              IT       LT
000038  2301              MOVLT    r3,#1
00003a  db00              BLT      |L10.62|
                  |L10.60|
00003c  2300              MOVS     r3,#0
                  |L10.62|
00003e  f6417c8b          MOV      r12,#0x1f8b
000042  7043              STRB     r3,[r0,#1]
000044  f81cc000          LDRB     r12,[r12,r0]
000048  f1bc0f00          CMP      r12,#0
00004c  d107              BNE      |L10.94|
00004e  f8d0c02c          LDR      r12,[r0,#0x2c]
000052  6a14              LDR      r4,[r2,#0x20]
000054  45a4              CMP      r12,r4
000056  bfb8              IT       LT
000058  f04f0c01          MOVLT    r12,#1
00005c  db01              BLT      |L10.98|
                  |L10.94|
00005e  f04f0c00          MOV      r12,#0
                  |L10.98|
000062  f880c002          STRB     r12,[r0,#2]
000066  b18b              CBZ      r3,|L10.140|
000068  f8922024          LDRB     r2,[r2,#0x24]
00006c  6843              LDR      r3,[r0,#4]
00006e  4293              CMP      r3,r2
000070  bfdc              ITT      LE
000072  1c59              ADDLE    r1,r3,#1
000074  6041              STRLE    r1,[r0,#4]
000076  dd21              BLE      |L10.188|
;;;2388   
;;;2389   	algorithm_check_recal_cond();
;;;2390   	
;;;2391   //	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, 8, 81/*MAX Intensity*/);	
;;;2392   //	protocol_LogPaddedMatrix(LT_INTENSITY, thisInfo->ucScreenCol, HAL_GET_LOCAL_FINGER_DELTA_IMAGE_PTR(), COL_MAX, thisInfo->ucScreenRow, 81/*MAX Intensity*/);			
;;;2393   
;;;2394   	bIsRecalState = algorithm_is_recalibrate();
;;;2395   	if(bIsRecalState == NO)
;;;2396   	{
;;;2397   		// process label image from delta image
;;;2398   		algorithm_label_process(LOCAL_FINGER_MODE);
;;;2399   		algorithm_coord_process(FULL_MODE);
;;;2400   	}	
;;;2401   
;;;2402   	public_func_PalmTouch_handler();
000078  6041              STR      r1,[r0,#4]
00007a  f7fffffe          BL       public_func_PalmTouch_handler
;;;2403   	
;;;2404   #ifdef DC_BASE
;;;2405   	if(gDCFullMode == 1)
;;;2406   	{
;;;2407   		int cl, tCheck = 0;
;;;2408   		for(cl=0; cl < ptMemConf->iMaxTouch_; cl++)
;;;2409   		{
;;;2410   			if(thisInfo->tCoord.tPos.vusS[cl] != 0)
;;;2411   			{
;;;2412   				if(thisInfo->tCoord.ucIdMappedCnt[cl] < 3 && tCheck != 0)
;;;2413   				{
;;;2414   					thisInfo->tCoord.tPos.vusR[cl] = 0;
;;;2415   					thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;2416   					thisInfo->tCoord.tPos.sFinger_--;
;;;2417   					thisInfo->tCoord.ucIdMappedCnt[cl] = 0;
;;;2418   					thisInfo->tCoord.tOrgPos.vusR[cl] = 0;
;;;2419   					thisInfo->tCoord.tOrgPos.vusS[cl] = 0;
;;;2420   					thisInfo->tCoord.tOrgPos.sFinger_--;
;;;2421   				}
;;;2422   				else
;;;2423   					thisInfo->tCoord.ucIdMappedCnt[cl] = 1;
;;;2424   				
;;;2425   				tCheck++;
;;;2426   			}
;;;2427   		}
;;;2428   		
;;;2429   		if(tCheck != 0)
;;;2430   		{
;;;2431   			gDCFullMode = 2;
;;;2432   //			inrange_cnt = 0;		// USB �� �ּ� ó�� ������
;;;2433   		}
;;;2434   	}
;;;2435   #endif
;;;2436   	
;;;2437   	algorithm_PendTouchEvent();
00007e  f7fffffe          BL       algorithm_PendTouchEvent
;;;2438   	algorithm_coord_UpdatePosHistoryInfo();
000082  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
;;;2439   	algorithm_baseline_tracking_continuous_local_finger();
000086  f7fffffe          BL       algorithm_baseline_tracking_continuous_local_finger
00008a  e014              B        |L10.182|
                  |L10.140|
00008c  f1bc0f00          CMP      r12,#0
000090  bf08              IT       EQ
000092  6041              STREQ    r1,[r0,#4]
000094  d011              BEQ      |L10.186|
000096  f8922025          LDRB     r2,[r2,#0x25]
00009a  6883              LDR      r3,[r0,#8]
00009c  4293              CMP      r3,r2
00009e  bfd8              IT       LE
0000a0  1c59              ADDLE    r1,r3,#1
0000a2  dd0a              BLE      |L10.186|
0000a4  6081              STR      r1,[r0,#8]            ;2402
0000a6  f7fffffe          BL       public_func_PalmTouch_handler
0000aa  f7fffffe          BL       algorithm_PendTouchEvent
0000ae  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
0000b2  f7fffffe          BL       algorithm_baseline_tracking_continuous_local_finger
                  |L10.182|
;;;2440   
;;;2441   	#ifdef TILT_ON
;;;2442   	protocol_LogMatrix(LT_INTENSITY, COL_MAX, *MatrixS16_Tilt4Delta, COL_MAX, ROW_MAX, 84/*MAX Intensity*/);
;;;2443   	#else
;;;2444   //	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, 8, 81/*MAX Intensity*/);
;;;2445   //	protocol_LogPaddedMatrix(LT_INTENSITY, COL_MAX, HAL_GET_LOCAL_DELTA_IMAGE_PTR(), COL_MAX, 8, 84/*MAX Intensity*/);
;;;2446   	#endif
;;;2447   	return (bIsRecalState == NO);
0000b6  2000              MOVS     r0,#0
;;;2448   }
0000b8  bd10              POP      {r4,pc}
                  |L10.186|
0000ba  6081              STR      r1,[r0,#8]
                  |L10.188|
0000bc  2002              MOVS     r0,#2                 ;2398
0000be  f7fffffe          BL       algorithm_label_process
0000c2  2000              MOVS     r0,#0                 ;2399
0000c4  f7fffffe          BL       algorithm_coord_process
0000c8  f7fffffe          BL       public_func_PalmTouch_handler
0000cc  f7fffffe          BL       algorithm_PendTouchEvent
0000d0  f7fffffe          BL       algorithm_coord_UpdatePosHistoryInfo
0000d4  f7fffffe          BL       algorithm_baseline_tracking_continuous_local_finger
0000d8  2001              MOVS     r0,#1                 ;2447
0000da  bd10              POP      {r4,pc}
                          ENDP

                  |L10.220|
                          DCD      ||.bss||
                  |L10.224|
                          DCD      ||.data||

                          AREA ||i.alogorithm_linefilter_2||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_2 PROC
;;;1561    */
;;;1562   void alogorithm_linefilter_2(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1563   {
;;;1564   	uint32_t r, c;
;;;1565   	uint32_t i, j;
;;;1566   	int16_t d;
;;;1567   	int16_t SortBufCol[COL_MAX], TempBuf;
;;;1568   	uint8_t sort_cnt, sort_range;
;;;1569   	int16_t sub_offset;
;;;1570   	uint16_t * pBaseImage;
;;;1571   	int Max_Val, Min_Val;
;;;1572   	int lDiff, lDiffSum = 0, lDiffSumCnt = 0;
;;;1573   	int min_delta_th = (thisModeConf->SensingFilter.ucMinDeltaTh << ptModuleModeConf->ucOvrShift);
000004  495e              LDR      r1,|L11.384|
000006  b0c1              SUB      sp,sp,#0x104          ;1563
;;;1574   	int lUpperTHD = thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift, lLowTHD = thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1575   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1576   
;;;1577   #if (ROW_MAX == 36)
;;;1578   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
;;;1579   #elif (ROW_MAX == 45)
;;;1580   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44};
;;;1581   #elif (ROW_MAX == 47)
;;;1582   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46};
;;;1583   #elif (ROW_MAX == 48)
;;;1584   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47};
000008  ad30              ADD      r5,sp,#0xc0
00000a  6848              LDR      r0,[r1,#4]            ;1573  ; thisModeConf
00000c  680a              LDR      r2,[r1,#0]            ;1573  ; ptModuleModeConf
00000e  f890302e          LDRB     r3,[r0,#0x2e]         ;1573
000012  7812              LDRB     r2,[r2,#0]            ;1573
000014  4093              LSLS     r3,r3,r2              ;1573
000016  933c              STR      r3,[sp,#0xf0]         ;1574
000018  f9b03029          LDRSH    r3,[r0,#0x29]         ;1574
00001c  f9b0002b          LDRSH    r0,[r0,#0x2b]         ;1574
000020  fa03f602          LSL      r6,r3,r2              ;1574
000024  fa00f702          LSL      r7,r0,r2              ;1574
000028  a056              ADR      r0,|L11.388|
00002a  e8b0101c          LDM      r0!,{r2-r4,r12}
00002e  e885101c          STM      r5,{r2-r4,r12}
000032  e8b0101c          LDM      r0!,{r2-r4,r12}
000036  ad34              ADD      r5,sp,#0xd0
000038  e885101c          STM      r5,{r2-r4,r12}
00003c  e890100d          LDM      r0,{r0,r2,r3,r12}
000040  ac38              ADD      r4,sp,#0xe0
000042  e884100d          STM      r4,{r0,r2,r3,r12}
;;;1585   #elif (ROW_MAX == 50)
;;;1586   	uint8_t do_row[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49};
;;;1587   #endif
;;;1588   	uint8_t row_cnt = sizeof(do_row);
;;;1589   	uint8_t real_row;
;;;1590   	
;;;1591   	sort_cnt = 4;//(uint8_t)(((int)COL_MAX * 5)/100);
;;;1592   	sort_range = COL_MAX/4 + COL_MAX%4;
;;;1593   
;;;1594   #if USED_NOISE_HOPPING_FREQ
;;;1595   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;1596   	{
;;;1597   		pBaseImage = g_pFingerBaseImage;
;;;1598   	}
;;;1599   	else
;;;1600   	{
;;;1601   		pBaseImage = g_pFingerHop1BaseImage;
;;;1602   	}
;;;1603   #else /* USED_NOISE_HOPPING_FREQ */
;;;1604   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
000046  485b              LDR      r0,|L11.436|
;;;1605   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1606   	
;;;1607   	for(r = 0; r < row_cnt; r++)
;;;1608   	{
;;;1609   		real_row = do_row[r];
;;;1610   		lDiffSum = 0, lDiffSumCnt = 0;
;;;1611   		Max_Val = INT16_MIN, Min_Val = INT16_MAX;
;;;1612   		for( c = 0; c < sort_range; c++ )
;;;1613   		{
;;;1614   			SortBufCol[c] = lDiff = (int16_t)HAL_READ_RAW_IMAGE(real_row, (c*4)) - (int16_t)pBaseImage[real_row*COL_MAX + c*4];
;;;1615   			
;;;1616   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;1617   			{
;;;1618   				if(Max_Val < lDiff)Max_Val = lDiff;
;;;1619   				if(Min_Val > lDiff)Min_Val = lDiff;
;;;1620   				lDiffSum += lDiff;
;;;1621   				lDiffSumCnt++;
;;;1622   			}
;;;1623   		}
;;;1624   		
;;;1625   		if(min_delta_th && Min_Val < -min_delta_th && thisInfo->tLabel.ucPalmCnt < 10)
000048  9b3c              LDR      r3,[sp,#0xf0]
00004a  2400              MOVS     r4,#0                 ;1607
00004c  6800              LDR      r0,[r0,#0]            ;1604  ; g_pFingerBaseImage
00004e  903f              STR      r0,[sp,#0xfc]
000050  6888              LDR      r0,[r1,#8]  ; thisInfo
000052  903e              STR      r0,[sp,#0xf8]         ;1573
000054  4258              RSBS     r0,r3,#0
000056  903d              STR      r0,[sp,#0xf4]
                  |L11.88|
000058  a830              ADD      r0,sp,#0xc0           ;1609
00005a  993f              LDR      r1,[sp,#0xfc]         ;1612
00005c  5d05              LDRB     r5,[r0,r4]            ;1609
00005e  4a57              LDR      r2,|L11.444|
000060  eb050045          ADD      r0,r5,r5,LSL #1       ;1612
000064  eb011380          ADD      r3,r1,r0,LSL #6       ;1612
000068  eb021080          ADD      r0,r2,r0,LSL #6       ;1612
00006c  f04f0b00          MOV      r11,#0                ;1610
000070  f8dfa144          LDR      r10,|L11.440|
000074  f5003c80          ADD      r12,r0,#0x10000       ;1612
000078  46d8              MOV      r8,r11                ;1610
00007a  f64779ff          MOV      r9,#0x7fff            ;1611
00007e  4669              MOV      r1,sp                 ;1612
000080  f50c7c25          ADD      r12,r12,#0x294        ;1612
000084  f05f0218          MOVS.W   r2,#0x18              ;1612
                  |L11.136|
000088  f9bc0000          LDRSH    r0,[r12,#0]           ;1614
00008c  f9b3e000          LDRSH    lr,[r3,#0]            ;1614
000090  eba0000e          SUB      r0,r0,lr              ;1614
000094  f8210b02          STRH     r0,[r1],#2            ;1614
000098  42b0              CMP      r0,r6                 ;1616
00009a  bfb8              IT       LT                    ;1616
00009c  4287              CMPLT    r7,r0                 ;1616
00009e  da06              BGE      |L11.174|
0000a0  4582              CMP      r10,r0                ;1618
0000a2  db68              BLT      |L11.374|
                  |L11.164|
0000a4  4581              CMP      r9,r0                 ;1619
0000a6  dc68              BGT      |L11.378|
                  |L11.168|
0000a8  4483              ADD      r11,r11,r0            ;1620
0000aa  f1080801          ADD      r8,r8,#1              ;1620
                  |L11.174|
0000ae  1e52              SUBS     r2,r2,#1              ;1620
0000b0  f1030308          ADD      r3,r3,#8              ;1620
0000b4  f10c0c08          ADD      r12,r12,#8            ;1620
0000b8  d1e6              BNE      |L11.136|
0000ba  983c              LDR      r0,[sp,#0xf0]
0000bc  b198              CBZ      r0,|L11.230|
0000be  983d              LDR      r0,[sp,#0xf4]
0000c0  4581              CMP      r9,r0
0000c2  da0f              BGE      |L11.228|
0000c4  983e              LDR      r0,[sp,#0xf8]
0000c6  f890035d          LDRB     r0,[r0,#0x35d]
0000ca  280a              CMP      r0,#0xa
0000cc  d20a              BCS      |L11.228|
;;;1626   		{
;;;1627   			if(lDiffSumCnt > 3)
0000ce  f1b80f03          CMP      r8,#3
0000d2  dd28              BLE      |L11.294|
;;;1628   			{
;;;1629   				sLFOffsetRow[real_row] = lDiffSum / ((int16_t)lDiffSumCnt);
0000d4  fa0ff088          SXTH     r0,r8
0000d8  fb9bf0f0          SDIV     r0,r11,r0
0000dc  4938              LDR      r1,|L11.448|
0000de  f8210015          STRH     r0,[r1,r5,LSL #1]
0000e2  e020              B        |L11.294|
                  |L11.228|
;;;1630   			}
;;;1631   		}
;;;1632   		else
;;;1633   		{
;;;1634   			for( i=0; i<=(sort_cnt); i++ )
0000e4  2000              MOVS     r0,#0
                  |L11.230|
0000e6  4669              MOV      r1,sp                 ;1567
                  |L11.232|
;;;1635   			{
;;;1636   				for( j=(i+1); j<sort_range; j++ )
0000e8  eb010240          ADD      r2,r1,r0,LSL #1
0000ec  f1c00317          RSB      r3,r0,#0x17
0000f0  f1120202          ADDS.W   r2,r2,#2
                  |L11.244|
;;;1637   				{
;;;1638   					if( SortBufCol[i] > SortBufCol[j] )
0000f4  f9318010          LDRSH    r8,[r1,r0,LSL #1]
0000f8  f9b2c000          LDRSH    r12,[r2,#0]
0000fc  45e0              CMP      r8,r12
;;;1639   					{
;;;1640   						TempBuf = SortBufCol[i];
;;;1641   						SortBufCol[i] = SortBufCol[j];
0000fe  bfc4              ITT      GT
000100  f821c010          STRHGT   r12,[r1,r0,LSL #1]
;;;1642   						SortBufCol[j] = TempBuf;
000104  f8a28000          STRHGT   r8,[r2,#0]
000108  1c92              ADDS     r2,r2,#2
00010a  1e5b              SUBS     r3,r3,#1
00010c  d1f2              BNE      |L11.244|
                  |L11.270|
00010e  1c40              ADDS     r0,r0,#1              ;1638
;;;1643   					}
000110  2805              CMP      r0,#5
000112  d203              BCS      |L11.284|
000114  1c42              ADDS     r2,r0,#1              ;1636
000116  2a18              CMP      r2,#0x18              ;1636
000118  d2f9              BCS      |L11.270|
00011a  e7e5              B        |L11.232|
                  |L11.284|
;;;1644   				}
;;;1645   			}
;;;1646   			TempBuf = SortBufCol[sort_cnt];
;;;1647   			
;;;1648   			sLFOffsetRow[real_row] = TempBuf;
00011c  4928              LDR      r1,|L11.448|
00011e  f8bd0008          LDRH     r0,[sp,#8]            ;1646
000122  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L11.294|
000126  1c64              ADDS     r4,r4,#1
000128  2c30              CMP      r4,#0x30
00012a  d395              BCC      |L11.88|
00012c  4d23              LDR      r5,|L11.444|
00012e  4e24              LDR      r6,|L11.448|
;;;1649   		}
;;;1650   	}
;;;1651   
;;;1652   #if !FAST_LF_EN		
;;;1653   	for(r = 0; r < row_cnt; r++)
000130  f04f0c00          MOV      r12,#0
000134  ac30              ADD      r4,sp,#0xc0           ;1584
;;;1654   	{
;;;1655   		real_row = do_row[r];
000136  bf00              NOP      
                  |L11.312|
000138  f814000c          LDRB     r0,[r4,r12]
;;;1656   		for( c=0; c<COL_MAX; c++ )
00013c  2260              MOVS     r2,#0x60
;;;1657   		{
;;;1658   			d = (int16_t)HAL_READ_RAW_IMAGE(real_row, c);
;;;1659   			sub_offset = sLFOffsetRow[real_row];
00013e  f9363010          LDRSH    r3,[r6,r0,LSL #1]
000142  eb000040          ADD      r0,r0,r0,LSL #1       ;1656
000146  eb051080          ADD      r0,r5,r0,LSL #6       ;1656
00014a  f5003080          ADD      r0,r0,#0x10000        ;1656
00014e  f5007025          ADD      r0,r0,#0x294          ;1656
                  |L11.338|
000152  8801              LDRH     r1,[r0,#0]            ;1658
;;;1660   			d = d - sub_offset;
000154  1ac9              SUBS     r1,r1,r3
000156  b209              SXTH     r1,r1
;;;1661   			if(d < 0)
000158  2900              CMP      r1,#0
;;;1662   			{
;;;1663   				d = 0;
00015a  bfb8              IT       LT
00015c  2100              MOVLT    r1,#0
;;;1664   			}
;;;1665   			HAL_WRITE_RAW_IMAGE(real_row, c, (uint16_t)d);
00015e  f8201b02          STRH     r1,[r0],#2
000162  1e52              SUBS     r2,r2,#1
000164  d1f5              BNE      |L11.338|
000166  f10c0c01          ADD      r12,r12,#1            ;1661
00016a  f1bc0f30          CMP      r12,#0x30
00016e  d3e3              BCC      |L11.312|
;;;1666   		}
;;;1667   	}
;;;1668   #endif
;;;1669   }
000170  b041              ADD      sp,sp,#0x104
000172  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.374|
000176  4682              MOV      r10,r0                ;1618
000178  e794              B        |L11.164|
                  |L11.378|
00017a  4681              MOV      r9,r0                 ;1619
00017c  e794              B        |L11.168|
;;;1670   #if FINGER_LF_VER1_EN
                          ENDP

00017e  0000              DCW      0x0000
                  |L11.384|
                          DCD      ||.data||
                  |L11.388|
000184  00                DCB      0
000185  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,17,18,19,20,21,22,23
000189  05060708
00018d  090a0b0c
000191  0d0e0f10
000195  11121314
000199  151617  
00019c  18191a1b          DCB      24,25,26,27,28,29,30,31," !""#$$%&'()*+,-./"
0001a0  1c1d1e1f
0001a4  20212223
0001a8  24252627
0001ac  28292a2b
0001b0  2c2d2e2f
                  |L11.436|
                          DCD      g_pFingerBaseImage
                  |L11.440|
                          DCD      0xffff8000
                  |L11.444|
                          DCD      FullSharedBuff
                  |L11.448|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_linefilter_simple PROC
;;;1778   #endif
;;;1779   void alogorithm_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1780   {
;;;1781   	uint32_t r, c, pos;
;;;1782   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  492d              LDR      r1,|L12.188|
;;;1783   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1784   	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;1785   	
;;;1786   	int16_t lDiff;
;;;1787   	int16_t lDiffSum = 0;//, lDiffSum2 = 0;
;;;1788   	uint32_t lDiffSumCnt = 0;//, lDiffSumCnt2 = 0;
;;;1789   	int32_t lLowTHD, lUpperTHD;
;;;1790   	uint16_t * pBaseImage;
;;;1791   //	uint16_t rawdata;
;;;1792   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;1793   
;;;1794   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;1795   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;1796   
;;;1797   #if USED_NOISE_HOPPING_FREQ
;;;1798   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;1799   	{
;;;1800   		pBaseImage = g_pFingerBaseImage;
;;;1801   	}
;;;1802   	else
;;;1803   	{
;;;1804   		pBaseImage = g_pFingerHop1BaseImage;
;;;1805   	}
;;;1806   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;1807   #else /* USED_NOISE_HOPPING_FREQ */
;;;1808   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1809   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1810   
;;;1811   	pos = 0;
000006  f04f0900          MOV      r9,#0
00000a  6848              LDR      r0,[r1,#4]            ;1782  ; thisModeConf
00000c  6809              LDR      r1,[r1,#0]            ;1782  ; ptModuleModeConf
00000e  f8b02029          LDRH     r2,[r0,#0x29]         ;1782
000012  7809              LDRB     r1,[r1,#0]            ;1782
000014  f890c02d          LDRB     r12,[r0,#0x2d]        ;1784
000018  408a              LSLS     r2,r2,r1              ;1782
00001a  b216              SXTH     r6,r2                 ;1782
00001c  f8b0202b          LDRH     r2,[r0,#0x2b]         ;1783
000020  4827              LDR      r0,|L12.192|
000022  fa02f101          LSL      r1,r2,r1              ;1783
000026  fa0ff881          SXTH     r8,r1                 ;1783
00002a  6800              LDR      r0,[r0,#0]            ;1808  ; g_pFingerBaseImage
;;;1812   	for(r=0; r< ROW_MAX; r++, pos += COL_MAX)
00002c  4649              MOV      r1,r9
;;;1813   	{
;;;1814   		lDiffSumCnt = 0;
;;;1815   		lDiffSum = 0;
;;;1816   
;;;1817   		for(c = 0; c < COL_MAX; c+=LINE_FILTER_COL_OFFSET)
00002e  f10c0b5f          ADD      r11,r12,#0x5f
000032  9000              STR      r0,[sp,#0]
                  |L12.52|
000034  fbbbf3fc          UDIV     r3,r11,r12
000038  2500              MOVS     r5,#0                 ;1814
00003a  46aa              MOV      r10,r5                ;1815
00003c  2b00              CMP      r3,#0
00003e  d035              BEQ      |L12.172|
000040  9800              LDR      r0,[sp,#0]
000042  eb010241          ADD      r2,r1,r1,LSL #1
000046  eb000449          ADD      r4,r0,r9,LSL #1
00004a  481e              LDR      r0,|L12.196|
00004c  eb001082          ADD      r0,r0,r2,LSL #6
000050  f5003080          ADD      r0,r0,#0x10000
000054  f5007025          ADD      r0,r0,#0x294
000058  4602              MOV      r2,r0
                  |L12.90|
;;;1818   		{
;;;1819   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos+c]);
00005a  f8b4e000          LDRH     lr,[r4,#0]
00005e  8817              LDRH     r7,[r2,#0]
000060  eba7070e          SUB      r7,r7,lr
000064  b23f              SXTH     r7,r7
;;;1820   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
000066  42b7              CMP      r7,r6
000068  bfb8              IT       LT
00006a  45b8              CMPLT    r8,r7
00006c  da03              BGE      |L12.118|
;;;1821   			{
;;;1822   				lDiffSum += lDiff;
00006e  4457              ADD      r7,r7,r10
000070  fa0ffa87          SXTH     r10,r7
000074  1c6d              ADDS     r5,r5,#1
                  |L12.118|
;;;1823   				lDiffSumCnt++;
;;;1824   			}
000076  eb04044c          ADD      r4,r4,r12,LSL #1
00007a  eb02024c          ADD      r2,r2,r12,LSL #1
00007e  1e5b              SUBS     r3,r3,#1
000080  d1eb              BNE      |L12.90|
;;;1825   		}
;;;1826   
;;;1827   		if(lDiffSumCnt > 3)
000082  2d03              CMP      r5,#3
000084  d912              BLS      |L12.172|
;;;1828   		{
;;;1829   			sLFOffsetRow[r] = lDiffSum / ((int16_t)lDiffSumCnt);
000086  b22a              SXTH     r2,r5
000088  fb9af2f2          SDIV     r2,r10,r2
00008c  4c0e              LDR      r4,|L12.200|
;;;1830   #if !FAST_LF_EN		
;;;1831   			for(c = 0; c < COL_MAX; c++)
00008e  2360              MOVS     r3,#0x60
000090  f8242011          STRH     r2,[r4,r1,LSL #1]     ;1829
                  |L12.148|
;;;1832   			{
;;;1833   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetRow[r]);
000094  8802              LDRH     r2,[r0,#0]
000096  f8345011          LDRH     r5,[r4,r1,LSL #1]
00009a  1b52              SUBS     r2,r2,r5
00009c  b212              SXTH     r2,r2
;;;1834   				if(lDiff<0)lDiff=0;
00009e  2a00              CMP      r2,#0
0000a0  bfb8              IT       LT
0000a2  2200              MOVLT    r2,#0
;;;1835   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
0000a4  f8202b02          STRH     r2,[r0],#2
0000a8  1e5b              SUBS     r3,r3,#1
0000aa  d1f3              BNE      |L12.148|
                  |L12.172|
0000ac  1c49              ADDS     r1,r1,#1              ;1834
0000ae  f1090960          ADD      r9,r9,#0x60           ;1834
;;;1836   			}
;;;1837   #endif
;;;1838   		}
;;;1839   	}
0000b2  2930              CMP      r1,#0x30
0000b4  d3be              BCC      |L12.52|
;;;1840   }
0000b6  e8bd8ff8          POP      {r3-r11,pc}
;;;1841   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L12.188|
                          DCD      ||.data||
                  |L12.192|
                          DCD      g_pFingerBaseImage
                  |L12.196|
                          DCD      FullSharedBuff
                  |L12.200|
                          DCD      ||.bss||

                          AREA ||i.alogorithm_vertical_linefilter||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter PROC
;;;1936   int16_t sLFOffsetCol[COL_MAX];
;;;1937   void alogorithm_vertical_linefilter(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1938   {
;;;1939   	uint32_t r, c;
;;;1940   	int16_t LINE_FILTER_UPPER_LIMIT			= ((15)<<ptModuleModeConf->ucOvrShift); //thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  482a              LDR      r0,|L13.176|
;;;1941   	int16_t LINE_FILTER_LOWER_LIMIT			= (-((15)<<ptModuleModeConf->ucOvrShift)); //thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
;;;1942   	uint8_t LINE_FILTER_ROW_OFFSET			= 3;//(thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;1943   
;;;1944   	int16_t lDiff;
;;;1945   	int16_t lDiffSum = 0;
;;;1946   	uint32_t lDiffSumCnt = 0;
;;;1947   	int32_t lLowTHD, lUpperTHD;
;;;1948   	uint16_t * pBaseImage;
;;;1949   
;;;1950   	lUpperTHD = (LINE_FILTER_UPPER_LIMIT>>1);
;;;1951   	lLowTHD = (LINE_FILTER_LOWER_LIMIT>>1);
;;;1952   
;;;1953   #if USED_NOISE_HOPPING_FREQ
;;;1954   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;1955   	{
;;;1956   		pBaseImage = g_pFingerBaseImage;
;;;1957   	}
;;;1958   	else
;;;1959   	{
;;;1960   		pBaseImage = g_pFingerHop1BaseImage;
;;;1961   	}
;;;1962   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;1963   #else /* USED_NOISE_HOPPING_FREQ */
;;;1964   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
;;;1965   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1966   
;;;1967   	for(c=0; c<COL_MAX; c++)
;;;1968   	{
;;;1969   		lDiffSumCnt = 0;
;;;1970   		lDiffSum = 0;
;;;1971   		for(r = 0; r < ROW_MAX; r+=LINE_FILTER_ROW_OFFSET)
000006  f8dfb0b0          LDR      r11,|L13.184|
;;;1972   		{
;;;1973   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[(r*COL_MAX)+c]);
;;;1974   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
;;;1975   			{
;;;1976   				lDiffSum += lDiff;
;;;1977   				lDiffSumCnt++;
;;;1978   			}
;;;1979   			else
;;;1980   			{
;;;1981   				if(lDiff > lUpperTHD)
;;;1982   				{
;;;1983   					lDiff += lUpperTHD;
;;;1984   					lDiffSumCnt++;
;;;1985   				}
;;;1986   				else if(lDiff < lLowTHD)
;;;1987   				{
;;;1988   					lDiff += lLowTHD;
;;;1989   					lDiffSumCnt++;
;;;1990   				}
;;;1991   			}
;;;1992   		}
;;;1993   
;;;1994   		if(lDiffSumCnt > 3)
;;;1995   		{
;;;1996   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
00000a  f8df90b0          LDR      r9,|L13.188|
00000e  6800              LDR      r0,[r0,#0]            ;1940  ; ptModuleModeConf
000010  7801              LDRB     r1,[r0,#0]            ;1940
000012  200f              MOVS     r0,#0xf               ;1940
000014  4088              LSLS     r0,r0,r1              ;1940
000016  b201              SXTH     r1,r0                 ;1940
000018  4240              RSBS     r0,r0,#0              ;1941
00001a  b200              SXTH     r0,r0                 ;1941
00001c  ea4f0860          ASR      r8,r0,#1              ;1951
000020  4824              LDR      r0,|L13.180|
000022  104f              ASRS     r7,r1,#1              ;1950
000024  2100              MOVS     r1,#0                 ;1967
000026  f8d0a000          LDR      r10,[r0,#0]  ; g_pFingerBaseImage
                  |L13.42|
00002a  eb0b0241          ADD      r2,r11,r1,LSL #1      ;1971
00002e  2000              MOVS     r0,#0                 ;1969
000030  f5023280          ADD      r2,r2,#0x10000        ;1971
000034  f5027225          ADD      r2,r2,#0x294          ;1971
000038  4606              MOV      r6,r0                 ;1970
00003a  2410              MOVS     r4,#0x10              ;1971
00003c  eb0a0541          ADD      r5,r10,r1,LSL #1      ;1971
000040  ea4f0302          MOV.W    r3,r2                 ;1971
                  |L13.68|
000044  f8b5e000          LDRH     lr,[r5,#0]            ;1973
000048  f8b3c000          LDRH     r12,[r3,#0]           ;1973
00004c  ebac0c0e          SUB      r12,r12,lr            ;1973
000050  fa0ffc8c          SXTH     r12,r12               ;1973
000054  45bc              CMP      r12,r7                ;1974
000056  bfb8              IT       LT                    ;1974
000058  45e0              CMPLT    r8,r12                ;1974
00005a  da04              BGE      |L13.102|
00005c  44b4              ADD      r12,r12,r6            ;1976
00005e  fa0ff68c          SXTH     r6,r12                ;1976
000062  1c40              ADDS     r0,r0,#1              ;1976
000064  e004              B        |L13.112|
                  |L13.102|
000066  4567              CMP      r7,r12                ;1981
000068  db01              BLT      |L13.110|
00006a  45e0              CMP      r8,r12                ;1986
00006c  dd00              BLE      |L13.112|
                  |L13.110|
00006e  1c40              ADDS     r0,r0,#1              ;1986
                  |L13.112|
000070  f5037310          ADD      r3,r3,#0x240          ;1986
000074  1e64              SUBS     r4,r4,#1              ;1986
000076  f5057510          ADD      r5,r5,#0x240          ;1986
00007a  d1e3              BNE      |L13.68|
00007c  2803              CMP      r0,#3                 ;1994
00007e  d912              BLS      |L13.166|
000080  b200              SXTH     r0,r0
000082  fb96f0f0          SDIV     r0,r6,r0
000086  f8290011          STRH     r0,[r9,r1,LSL #1]
;;;1997   #if !FAST_LF_EN		
;;;1998   			for(r = 0; r < ROW_MAX; r++)
00008a  2330              MOVS     r3,#0x30
                  |L13.140|
;;;1999   			{
;;;2000   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
00008c  8810              LDRH     r0,[r2,#0]
00008e  f839c011          LDRH     r12,[r9,r1,LSL #1]
000092  eba0000c          SUB      r0,r0,r12
000096  b200              SXTH     r0,r0
;;;2001   				if(lDiff<0)
000098  2800              CMP      r0,#0
;;;2002   					lDiff=0;
00009a  bfb8              IT       LT
00009c  2000              MOVLT    r0,#0
;;;2003   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
00009e  f8220bc0          STRH     r0,[r2],#0xc0
0000a2  1e5b              SUBS     r3,r3,#1
0000a4  d1f2              BNE      |L13.140|
                  |L13.166|
0000a6  1c49              ADDS     r1,r1,#1              ;2001
0000a8  2960              CMP      r1,#0x60
0000aa  d3be              BCC      |L13.42|
;;;2004   			}
;;;2005   #endif
;;;2006   		}
;;;2007   	}
;;;2008   }
0000ac  e8bd8ff0          POP      {r4-r11,pc}
;;;2009   
                          ENDP

                  |L13.176|
                          DCD      ||.data||
                  |L13.180|
                          DCD      g_pFingerBaseImage
                  |L13.184|
                          DCD      FullSharedBuff
                  |L13.188|
                          DCD      ||.bss||+0xf6

                          AREA ||i.alogorithm_vertical_linefilter_simple||, CODE, READONLY, ALIGN=2

                  alogorithm_vertical_linefilter_simple PROC
;;;2009   
;;;2010   void alogorithm_vertical_linefilter_simple(eSENSING_MODE_t eSensingMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2011   {
;;;2012   	uint32_t r, c, pos;
;;;2013   	int16_t LINE_FILTER_UPPER_LIMIT			= thisModeConf->SensingFilter.sLineFilterUpLimit<<ptModuleModeConf->ucOvrShift;
000004  4929              LDR      r1,|L14.172|
000006  b0b1              SUB      sp,sp,#0xc4           ;2011
000008  6848              LDR      r0,[r1,#4]  ; thisModeConf
00000a  6809              LDR      r1,[r1,#0]  ; ptModuleModeConf
00000c  f8b02029          LDRH     r2,[r0,#0x29]
000010  7809              LDRB     r1,[r1,#0]
;;;2014   	int16_t LINE_FILTER_LOWER_LIMIT			= thisModeConf->SensingFilter.sLineFilterLowLimit<<ptModuleModeConf->ucOvrShift;
000012  f8b0002b          LDRH     r0,[r0,#0x2b]
000016  408a              LSLS     r2,r2,r1              ;2013
000018  4088              LSLS     r0,r0,r1
00001a  b205              SXTH     r5,r0
00001c  b214              SXTH     r4,r2                 ;2013
;;;2015   //	uint8_t LINE_FILTER_COL_OFFSET			= (thisModeConf->SensingFilter.ucLineFilterColOffset);
;;;2016   	
;;;2017   	int16_t sLFOffsetCol[COL_MAX] = {0};
00001e  21c0              MOVS     r1,#0xc0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memclr4
;;;2018   	int16_t lDiff;
;;;2019   	int16_t lDiffSum = 0;
;;;2020   	uint32_t lDiffSumCnt = 0;
;;;2021   	int32_t lLowTHD, lUpperTHD;
;;;2022   	uint16_t * pBaseImage;
;;;2023   //	uint16_t rawdata;
;;;2024   //	eActivePenType_t eLocalFingerOPType = hal_Info_GetControlLocalFingerOPType();
;;;2025   
;;;2026   	lUpperTHD = LINE_FILTER_UPPER_LIMIT;
;;;2027   	lLowTHD = LINE_FILTER_LOWER_LIMIT;
;;;2028   
;;;2029   #if USED_NOISE_HOPPING_FREQ
;;;2030   	if(ptAppInfo->eSelectFreq == FREQ_MAIN)
;;;2031   	{
;;;2032   		pBaseImage = g_pFingerBaseImage;
;;;2033   	}
;;;2034   	else
;;;2035   	{
;;;2036   		pBaseImage = g_pFingerHop1BaseImage;
;;;2037   	}
;;;2038   //	pBaseImage = HAL_GET_FREQ_BASELINE_PTR(ptAppInfo->eSelectFreq);
;;;2039   #else /* USED_NOISE_HOPPING_FREQ */
;;;2040   	pBaseImage = g_pFingerBaseImage;//HAL_GetBaseImagePointer(HAL_GetSensingMode(), BASELINE_TYPE_FULL);
000026  4822              LDR      r0,|L14.176|
;;;2041   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2042   
;;;2043   	for(c=0; c<COL_MAX; c++)
;;;2044   	{
;;;2045   		lDiffSumCnt = 0;
;;;2046   		lDiffSum = 0;
;;;2047   		
;;;2048   		pos = c;
;;;2049   		for(r = 0; r < ROW_MAX; r+=2,pos += (COL_MAX<<1))
000028  f8dfb088          LDR      r11,|L14.180|
00002c  46e9              MOV      r9,sp                 ;2017
00002e  f8d0a000          LDR      r10,[r0,#0]           ;2043  ; g_pFingerBaseImage
000032  2000              MOVS     r0,#0                 ;2043
                  |L14.52|
000034  eb0b0140          ADD      r1,r11,r0,LSL #1
000038  f5013180          ADD      r1,r1,#0x10000
00003c  2300              MOVS     r3,#0                 ;2045
00003e  f5017125          ADD      r1,r1,#0x294
000042  461f              MOV      r7,r3                 ;2046
000044  eb0a0c40          ADD      r12,r10,r0,LSL #1
000048  460a              MOV      r2,r1
00004a  f04f0818          MOV      r8,#0x18
                  |L14.78|
;;;2050   		{
;;;2051   			lDiff = (int16_t)(HAL_READ_RAW_IMAGE(r, c) - pBaseImage[pos]);
00004e  8816              LDRH     r6,[r2,#0]
000050  f8bce000          LDRH     lr,[r12,#0]
000054  eba6060e          SUB      r6,r6,lr
000058  b236              SXTH     r6,r6
;;;2052   			if(lDiff < lUpperTHD && lDiff > lLowTHD)
00005a  42a6              CMP      r6,r4
00005c  bfb8              IT       LT
00005e  42b5              CMPLT    r5,r6
000060  da02              BGE      |L14.104|
;;;2053   			{
;;;2054   				lDiffSum += lDiff;
000062  443e              ADD      r6,r6,r7
000064  b237              SXTH     r7,r6
000066  1c5b              ADDS     r3,r3,#1
                  |L14.104|
000068  f50272c0          ADD      r2,r2,#0x180
00006c  f1b80801          SUBS     r8,r8,#1
000070  f50c7cc0          ADD      r12,r12,#0x180
;;;2055   				lDiffSumCnt++;
;;;2056   			}
000074  d1eb              BNE      |L14.78|
;;;2057   		}
;;;2058   
;;;2059   		if(lDiffSumCnt > 3)
000076  2b03              CMP      r3,#3
000078  d912              BLS      |L14.160|
;;;2060   		{
;;;2061   			sLFOffsetCol[c] = lDiffSum / ((int16_t)lDiffSumCnt);
00007a  b21a              SXTH     r2,r3
00007c  fb97f2f2          SDIV     r2,r7,r2
000080  f8292010          STRH     r2,[r9,r0,LSL #1]
;;;2062   #if !FAST_LF_EN		
;;;2063   			for(r = 0; r < ROW_MAX; r++)
000084  2330              MOVS     r3,#0x30
                  |L14.134|
;;;2064   			{
;;;2065   				lDiff = (((int16_t)HAL_READ_RAW_IMAGE(r, c)) - sLFOffsetCol[c]);
000086  880a              LDRH     r2,[r1,#0]
000088  f839c010          LDRH     r12,[r9,r0,LSL #1]
00008c  eba2020c          SUB      r2,r2,r12
000090  b212              SXTH     r2,r2
;;;2066   				if(lDiff<0)lDiff=0;
000092  2a00              CMP      r2,#0
000094  bfb8              IT       LT
000096  2200              MOVLT    r2,#0
;;;2067   				HAL_WRITE_RAW_IMAGE(r, c, (uint16_t)lDiff);
000098  f8212bc0          STRH     r2,[r1],#0xc0
00009c  1e5b              SUBS     r3,r3,#1
00009e  d1f2              BNE      |L14.134|
                  |L14.160|
0000a0  1c40              ADDS     r0,r0,#1              ;2066
0000a2  2860              CMP      r0,#0x60
0000a4  d3c6              BCC      |L14.52|
;;;2068   			}
;;;2069   #endif
;;;2070   		}
;;;2071   	}
;;;2072   }
0000a6  b031              ADD      sp,sp,#0xc4
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;2073   
                          ENDP

                  |L14.172|
                          DCD      ||.data||
                  |L14.176|
                          DCD      g_pFingerBaseImage
                  |L14.180|
                          DCD      FullSharedBuff

                          AREA ||i.public_func_PalmTouch_handler||, CODE, READONLY, ALIGN=2

                  public_func_PalmTouch_handler PROC
;;;1302   #define PALM_KEEP_FRM		(10)
;;;1303   void public_func_PalmTouch_handler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1304   {
000004  b099              SUB      sp,sp,#0x64
;;;1305   	static uint8_t ucFrameCnt[POSBUF_]  = {0,};
;;;1306   //	static uint16_t usPrevMaxCellNum[POSBUF_]  = {0,}; // NOTE : Not used!!
;;;1307   	static uint8_t ucPalmContCnt[POSBUF_]  = {0,};
;;;1308   	static uint8_t ucParNum[POSBUF_]  = {0,};
;;;1309   	static tXY_t ucPalmPos[POSBUF_] ;
;;;1310   	static tRect_t ucPalmRect[POSBUF_] ;
;;;1311   	uint8_t ucParCnt[POSBUF_] = {0,};
000006  2000              MOVS     r0,#0
;;;1312   	uint8_t ucParBF[POSBUF_] = {0,};
000008  900d              STR      r0,[sp,#0x34]
00000a  9008              STR      r0,[sp,#0x20]
00000c  9009              STR      r0,[sp,#0x24]
;;;1313   	bool_t bIsPalm[POSBUF_] = {0,};
;;;1314   	uint8_t ucPalmExpect[POSBUF_] = {0,};
;;;1315   	int cl;
;;;1316   	
;;;1317   //    if(!sptPalmTouchConf->bEnable) return;
;;;1318   
;;;1319   //	tMemConf_t       * ptMemConf = (tMemConf_t *)param1;
;;;1320   //	tAlgorithmInfo_t * ptInfo     = (tAlgorithmInfo_t *)param2;
;;;1321   
;;;1322   //	sptPalmTouchConf->bPalmExpect = NO;
;;;1323   
;;;1324   	thisInfo->bIsPalm = NO;
00000e  f8dfa418          LDR      r10,|L15.1064|
000012  900c              STR      r0,[sp,#0x30]         ;1311
000014  900a              STR      r0,[sp,#0x28]         ;1313
000016  9003              STR      r0,[sp,#0xc]          ;1313
000018  9004              STR      r0,[sp,#0x10]         ;1314
00001a  900b              STR      r0,[sp,#0x2c]         ;1311
00001c  9002              STR      r0,[sp,#8]            ;1313
00001e  9012              STR      r0,[sp,#0x48]         ;1314
000020  9013              STR      r0,[sp,#0x4c]         ;1314
000022  9014              STR      r0,[sp,#0x50]
000024  f8da1008          LDR      r1,[r10,#8]  ; thisInfo
;;;1325   	
;;;1326   	for( cl=MAX_TOUCH_; cl--; )
;;;1327   	{
;;;1328   		if(thisInfo->tCoord.tPos.vusR[cl] != 0)
;;;1329   		{
;;;1330   			if(thisInfo->tCoord.tPos.vusR[cl] > thisModeConf->Palm.usPalmLevel)
;;;1331   			{
;;;1332   				bIsPalm[cl] = YES;
;;;1333   				ucParNum[cl] = cl;
;;;1334   				ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1335   			}
;;;1336   //			else if(ucFrameCnt[cl] < 10
;;;1337   //				&& ((thisInfo->tCoord.tPos.vusR[cl] > 10
;;;1338   //				&& (int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > 3 )
;;;1339   //				|| ((int16_t)(thisInfo->tCoord.tPos.vusR[cl] - usPrevMaxCellNum[cl]) > (3*2+1))))
;;;1340   //			{
;;;1341   //				thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1342   //				ucPalmExpect[cl] = 1;
;;;1343   //			}
;;;1344   			else
;;;1345   			{
;;;1346   				int pl, i;
;;;1347   				uint8_t ucOverlap[POSBUF_] = {0,};
;;;1348   				uint8_t ucOverlapCnt = 0;
;;;1349   
;;;1350   				for( pl=MAX_TOUCH_; pl--; )
;;;1351   				{
;;;1352   					if(ucPalmContCnt[pl] != 0)
;;;1353   					{
;;;1354   						if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[cl].re && thisInfo->tCoord.tPos.rect[cl].rs <= ucPalmRect[pl].re)
;;;1355   						{
;;;1356   							if(ucPalmRect[pl].cs <= thisInfo->tCoord.tPos.rect[cl].ce && thisInfo->tCoord.tPos.rect[cl].cs <= ucPalmRect[pl].ce)
;;;1357   								ucOverlap[ucOverlapCnt++] = pl;
;;;1358   						}
;;;1359   					}
;;;1360   				}
;;;1361   
;;;1362   				if(ucOverlapCnt != 0)
;;;1363   				{
;;;1364   					if(ucOverlapCnt > 1)
;;;1365   					{
;;;1366   						int palm_dist;
;;;1367   						int min_dist = INT32_MAX;
;;;1368   
;;;1369   						for(i=0; i<ucOverlapCnt; i++)
;;;1370   						{
;;;1371   							palm_dist = algorithm_coord_calc_distance(ucPalmPos[ucOverlap[i]], thisInfo->tCoord.tPos.tXY[cl]);
;;;1372   							if(min_dist > palm_dist)
;;;1373   								min_dist = palm_dist, pl = ucOverlap[i];
;;;1374   						}
;;;1375   					}
;;;1376   					else
;;;1377   						pl = ucOverlap[0];
;;;1378   
;;;1379   					bIsPalm[cl] = YES;
;;;1380   					ucParCnt[pl]++;
;;;1381   					ucParBF[pl] |= _BV(cl);
;;;1382   					if(ucPalmContCnt[cl] == 0)
;;;1383   						ucParNum[cl] = ucParNum[pl];
;;;1384   
;;;1385   					ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1386   				}
;;;1387   			}
;;;1388   
;;;1389   			if( ucFrameCnt[cl] < 10 )
;;;1390   				ucFrameCnt[cl]++;
;;;1391   		}
;;;1392   		else
;;;1393   			ucFrameCnt[cl] = 0;
;;;1394   	}
;;;1395   
;;;1396   	for( cl=MAX_TOUCH_; cl--;)
;;;1397   	{
;;;1398   		if(ucParCnt[cl] > 1)
;;;1399   		{
;;;1400   			int max_palm_num = -1;
;;;1401   			int max_palm_size = 0;
;;;1402   
;;;1403   			if(bIsPalm[cl] == NO)
;;;1404   			{
;;;1405   				int pl;
;;;1406   
;;;1407   				for( pl=MAX_TOUCH_; pl--;)
;;;1408   				{
;;;1409   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1410   					{
;;;1411   						if(max_palm_size < thisInfo->tCoord.tPos.vusR[pl])
;;;1412   						{
;;;1413   							max_palm_num = pl;
;;;1414   							max_palm_size = thisInfo->tCoord.tPos.vusR[pl];
;;;1415   						}
;;;1416   					}
;;;1417   				}
;;;1418   
;;;1419   				for( pl=MAX_TOUCH_; pl--;)
;;;1420   				{
;;;1421   					if((ucParBF[cl] & _BV(pl)) != 0)
;;;1422   						ucParNum[pl] = max_palm_num;
;;;1423   				}
;;;1424   
;;;1425   				ucPalmContCnt[cl] = 0;
;;;1426   			}
;;;1427   		}
;;;1428   	}
;;;1429   
;;;1430   	for( cl=MAX_TOUCH_; cl--;)
;;;1431   	{
;;;1432   		if(bIsPalm[cl] == YES)
;;;1433   		{
;;;1434   			if(ucParNum[cl] != cl)
;;;1435   			{
;;;1436   				int pl = ucParNum[cl];
;;;1437   				int palm_dist;
;;;1438   
;;;1439   				if(thisInfo->tCoord.tPos.vusR[pl] == 0 && ucPalmContCnt[cl] != 0)
;;;1440   				{
;;;1441   					int pcl;
;;;1442   					int max_palm_num = -1;
;;;1443   					int max_palm_size = 0;
;;;1444   
;;;1445   					for( pcl=MAX_TOUCH_; pcl--;)
;;;1446   					{
;;;1447   						if(pcl != cl && bIsPalm[pcl] == YES)
;;;1448   						{
;;;1449   							if(ucPalmRect[pl].rs <= thisInfo->tCoord.tPos.rect[pcl].re && thisInfo->tCoord.tPos.rect[pcl].rs <= ucPalmRect[pl].re)
;;;1450   							{
;;;1451   								if(max_palm_size < thisInfo->tCoord.tPos.vusR[pcl])
;;;1452   									max_palm_size = thisInfo->tCoord.tPos.vusR[pcl], max_palm_num = pcl;
;;;1453   							}
;;;1454   						}
;;;1455   					}
;;;1456   
;;;1457   					if(max_palm_num != -1)
;;;1458   					{
;;;1459   
;;;1460   						ucParNum[cl] = max_palm_num;
;;;1461   						for( pcl=MAX_TOUCH_; pcl--;)
;;;1462   						{
;;;1463   							if(ucPalmContCnt[pcl] != 0)
;;;1464   							{
;;;1465   								if(ucParNum[pcl] == pl)
;;;1466   									ucParNum[pcl] = max_palm_num;
;;;1467   							}
;;;1468   						}
;;;1469   					}
;;;1470   					else
;;;1471   						ucParNum[cl] = cl;
;;;1472   				}
;;;1473   
;;;1474   				if(ucPalmContCnt[pl] != 0)
;;;1475   				{
;;;1476   					palm_dist = algorithm_coord_calc_distance(ucPalmPos[pl], ucPalmPos[cl]);
;;;1477   					if(PALM_VALID_AREA < palm_dist)
;;;1478   						bIsPalm[cl] = NO;
;;;1479   				}
;;;1480   				else
;;;1481   					bIsPalm[cl] = NO;
;;;1482   			}
;;;1483   		}
;;;1484   
;;;1485   		if(bIsPalm[cl] == YES)
;;;1486   		{
;;;1487   			ucPalmExpect[cl] = 1;
;;;1488   			ucPalmContCnt[cl] = PALM_KEEP_FRM;
;;;1489   			ucPalmRect[cl] = thisInfo->tCoord.tPos.rect[cl];
;;;1490   			ucPalmPos[cl] = thisInfo->tCoord.tPos.tXY[cl];
;;;1491   			thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1492   
;;;1493   			if(ucPalmRect[cl].rs > 0)
;;;1494   				ucPalmRect[cl].rs--;
;;;1495   			if(ucPalmRect[cl].re < (ROW_MAX - 1))
;;;1496   				ucPalmRect[cl].re++;
;;;1497   			if(ucPalmRect[cl].cs > 0)
;;;1498   				ucPalmRect[cl].cs--;
;;;1499   			if(ucPalmRect[cl].ce < (COL_MAX - 1))
;;;1500   				ucPalmRect[cl].ce++;
;;;1501   			
;;;1502   			thisInfo->bIsPalm = YES;
;;;1503   			thisInfo->tCoord.tPos.sFinger_--;
;;;1504   		}
;;;1505   	}
;;;1506   
;;;1507   	for( cl=MAX_TOUCH_; cl--;)
;;;1508   	{
;;;1509   		if(ucPalmExpect[cl] != 0)
;;;1510   		{
;;;1511   			int pl;
;;;1512   //			tRect_t ori_rect, cmp_rect; // NOTE : not used
;;;1513   			tRect_t ori_rect;
;;;1514   
;;;1515   			int offset = 1;
;;;1516   			
;;;1517               if(thisInfo->tCoord.tPos.rect[cl].rs > (offset-1))
;;;1518   				ori_rect.rs = thisInfo->tCoord.tPos.rect[cl].rs - offset;
;;;1519               else
;;;1520                   ori_rect.rs = 0;
;;;1521   			if(thisInfo->tCoord.tPos.rect[cl].re < (ROW_MAX - offset))
;;;1522   				ori_rect.re = thisInfo->tCoord.tPos.rect[cl].re + offset;
;;;1523               else
;;;1524                   ori_rect.re = ROW_MAX - 1;
;;;1525   			if(thisInfo->tCoord.tPos.rect[cl].cs > (offset-1))
;;;1526   				ori_rect.cs = thisInfo->tCoord.tPos.rect[cl].cs - offset;
;;;1527               else
;;;1528                   ori_rect.cs = 0;
;;;1529   			if(thisInfo->tCoord.tPos.rect[cl].ce < (COL_MAX - offset))
;;;1530   				ori_rect.ce = thisInfo->tCoord.tPos.rect[cl].ce + offset;
;;;1531               else
;;;1532                   ori_rect.ce = COL_MAX - 1;
;;;1533               
;;;1534               for( pl=MAX_TOUCH_; pl--;)
;;;1535   			{
;;;1536   				if(thisInfo->tCoord.tPos.vusS[pl])
;;;1537   				{
;;;1538   					if(ori_rect.rs <= thisInfo->tCoord.tPos.rect[pl].re+1 && thisInfo->tCoord.tPos.rect[pl].rs-1 <= ori_rect.re)
;;;1539   					{
;;;1540   						if(ori_rect.cs <= thisInfo->tCoord.tPos.rect[pl].ce+1 && thisInfo->tCoord.tPos.rect[pl].cs-1 <= ori_rect.ce)
;;;1541   						{
;;;1542   							thisInfo->tCoord.tPos.vusS[pl] = 0;
;;;1543   						}
;;;1544   					}
;;;1545   				}
;;;1546   			}
;;;1547   		}
;;;1548   
;;;1549   		if(ucPalmContCnt[cl] != 0)
;;;1550   			ucPalmContCnt[cl]--;
;;;1551   
;;;1552   //		usPrevMaxCellNum[cl] = thisInfo->tCoord.tPos.vusR[cl];  // NOTE : Not used!!		
;;;1553   	}
;;;1554   
;;;1555   //	public_protocol_LogCode(LT_DIAGNOSIS, (220)/*System is Entered!*/);
;;;1556   }
000028  2409              MOVS     r4,#9
00002a  f5015180          ADD      r1,r1,#0x1000         ;1324
00002e  f10d093c          ADD      r9,sp,#0x3c           ;1347
000032  f8810f87          STRB     r0,[r1,#0xf87]        ;1324
000036  bf00              NOP                            ;1328
                  |L15.56|
000038  f8da0008          LDR      r0,[r10,#8]           ;1328  ; thisInfo
00003c  eb000144          ADD      r1,r0,r4,LSL #1       ;1328
000040  f8b114e4          LDRH     r1,[r1,#0x4e4]        ;1328
000044  2900              CMP      r1,#0                 ;1328
000046  bf08              IT       EQ                    ;1393
000048  48f8              LDREQ    r0,|L15.1068|
00004a  d07d              BEQ      |L15.328|
00004c  f8da2004          LDR      r2,[r10,#4]           ;1330  ; thisModeConf
000050  f8b220ee          LDRH     r2,[r2,#0xee]         ;1330
000054  4291              CMP      r1,r2                 ;1330
000056  d910              BLS      |L15.122|
000058  aa02              ADD      r2,sp,#8              ;1332
00005a  2101              MOVS     r1,#1                 ;1332
00005c  5511              STRB     r1,[r2,r4]            ;1332
00005e  49f4              LDR      r1,|L15.1072|
000060  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1334
000064  550c              STRB     r4,[r1,r4]            ;1333
000066  310a              ADDS     r1,r1,#0xa            ;1334
000068  eb0101c4          ADD      r1,r1,r4,LSL #3       ;1334
00006c  f8d02480          LDR      r2,[r0,#0x480]        ;1334
000070  f8d00484          LDR      r0,[r0,#0x484]        ;1334
000074  600a              STR      r2,[r1,#0]            ;1334
000076  6048              STR      r0,[r1,#4]            ;1334
000078  e08a              B        |L15.400|
                  |L15.122|
00007a  2100              MOVS     r1,#0                 ;1347
00007c  910f              STR      r1,[sp,#0x3c]         ;1347
00007e  9110              STR      r1,[sp,#0x40]         ;1347
000080  460d              MOV      r5,r1                 ;1348
000082  9111              STR      r1,[sp,#0x44]         ;1350
000084  49eb              LDR      r1,|L15.1076|
000086  2700              MOVS     r7,#0                 ;1350
000088  f101065b          ADD      r6,r1,#0x5b           ;1350
00008c  f1060224          ADD      r2,r6,#0x24           ;1350
000090  1c53              ADDS     r3,r2,#1              ;1350
000092  f1060c26          ADD      r12,r6,#0x26          ;1350
000096  f04f080a          MOV      r8,#0xa               ;1350
00009a  eb000084          ADD      r0,r0,r4,LSL #2       ;1354
00009e  3627              ADDS     r6,r6,#0x27           ;1354
                  |L15.160|
0000a0  f811b901          LDRB     r11,[r1],#-1          ;1352
0000a4  f1bb0f00          CMP      r11,#0                ;1352
0000a8  d01d              BEQ      |L15.230|
0000aa  f992b000          LDRSB    r11,[r2,#0]           ;1354
0000ae  f990e4f9          LDRSB    lr,[r0,#0x4f9]        ;1354
0000b2  45f3              CMP      r11,lr                ;1354
0000b4  dc17              BGT      |L15.230|
0000b6  f990b4f8          LDRSB    r11,[r0,#0x4f8]       ;1354
0000ba  f993e000          LDRSB    lr,[r3,#0]            ;1354
0000be  45f3              CMP      r11,lr                ;1354
0000c0  dc11              BGT      |L15.230|
0000c2  f99cb000          LDRSB    r11,[r12,#0]          ;1356
0000c6  f990e4fb          LDRSB    lr,[r0,#0x4fb]        ;1356
0000ca  45f3              CMP      r11,lr                ;1356
0000cc  dc0b              BGT      |L15.230|
0000ce  f990b4fa          LDRSB    r11,[r0,#0x4fa]       ;1356
0000d2  f996e000          LDRSB    lr,[r6,#0]            ;1356
0000d6  45f3              CMP      r11,lr                ;1356
0000d8  dc05              BGT      |L15.230|
0000da  f1c70b09          RSB      r11,r7,#9             ;1357
0000de  f809b005          STRB     r11,[r9,r5]           ;1357
0000e2  1c6d              ADDS     r5,r5,#1              ;1357
0000e4  b2ed              UXTB     r5,r5                 ;1357
                  |L15.230|
0000e6  1f12              SUBS     r2,r2,#4              ;1357
0000e8  1f1b              SUBS     r3,r3,#4              ;1357
0000ea  1f36              SUBS     r6,r6,#4              ;1357
0000ec  1c7f              ADDS     r7,r7,#1              ;1357
0000ee  f1b80801          SUBS     r8,r8,#1              ;1357
0000f2  f1ac0c04          SUB      r12,r12,#4            ;1357
0000f6  d1d3              BNE      |L15.160|
0000f8  f04f36ff          MOV      r6,#0xffffffff        ;1350
0000fc  2d00              CMP      r5,#0                 ;1362
0000fe  d047              BEQ      |L15.400|
000100  2d01              CMP      r5,#1                 ;1364
000102  bf98              IT       LS                    ;1377
000104  f89d603c          LDRBLS   r6,[sp,#0x3c]         ;1377
000108  d923              BLS      |L15.338|
00010a  f06f4700          MVN      r7,#0x80000000        ;1367
00010e  f04f0800          MOV      r8,#0                 ;1369
000112  2d00              CMP      r5,#0                 ;1369
000114  bfc8              IT       GT                    ;1334
000116  f8dfb320          LDRGT    r11,|L15.1080|
00011a  dd1a              BLE      |L15.338|
                  |L15.284|
00011c  f8da0008          LDR      r0,[r10,#8]           ;1371  ; thisInfo
000120  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1371
000124  f5006290          ADD      r2,r0,#0x480          ;1371
000128  f8190008          LDRB     r0,[r9,r8]            ;1371
00012c  6853              LDR      r3,[r2,#4]            ;1371
00012e  eb0b01c0          ADD      r1,r11,r0,LSL #3      ;1371
000132  6812              LDR      r2,[r2,#0]            ;1371
000134  6808              LDR      r0,[r1,#0]            ;1371
000136  6849              LDR      r1,[r1,#4]            ;1371
000138  f7fffffe          BL       algorithm_coord_calc_distance
00013c  4287              CMP      r7,r0                 ;1372
00013e  bfc4              ITT      GT                    ;1373
000140  4607              MOVGT    r7,r0                 ;1373
000142  f8196008          LDRBGT   r6,[r9,r8]            ;1373
000146  e000              B        |L15.330|
                  |L15.328|
000148  e028              B        |L15.412|
                  |L15.330|
00014a  f1080801          ADD      r8,r8,#1              ;1373
00014e  45a8              CMP      r8,r5                 ;1373
000150  dbe4              BLT      |L15.284|
                  |L15.338|
000152  a902              ADD      r1,sp,#8              ;1379
000154  2001              MOVS     r0,#1                 ;1379
000156  5508              STRB     r0,[r1,r4]            ;1379
000158  a90b              ADD      r1,sp,#0x2c           ;1380
00015a  5d8a              LDRB     r2,[r1,r6]            ;1380
00015c  1c52              ADDS     r2,r2,#1              ;1380
00015e  558a              STRB     r2,[r1,r6]            ;1380
000160  a908              ADD      r1,sp,#0x20           ;1381
000162  40a0              LSLS     r0,r0,r4              ;1381
000164  5d8a              LDRB     r2,[r1,r6]            ;1381
000166  4310              ORRS     r0,r0,r2              ;1381
000168  5588              STRB     r0,[r1,r6]            ;1381
00016a  48b4              LDR      r0,|L15.1084|
00016c  5d00              LDRB     r0,[r0,r4]            ;1382
00016e  b910              CBNZ     r0,|L15.374|
000170  48af              LDR      r0,|L15.1072|
000172  5d81              LDRB     r1,[r0,r6]            ;1383
000174  5501              STRB     r1,[r0,r4]            ;1383
                  |L15.374|
000176  48b0              LDR      r0,|L15.1080|
000178  eb0001c4          ADD      r1,r0,r4,LSL #3       ;1385
00017c  f8da0008          LDR      r0,[r10,#8]           ;1385  ; thisInfo
000180  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1385
000184  f8d02480          LDR      r2,[r0,#0x480]        ;1385
000188  f8d00484          LDR      r0,[r0,#0x484]        ;1385
00018c  600a              STR      r2,[r1,#0]            ;1385
00018e  6048              STR      r0,[r1,#4]            ;1385
                  |L15.400|
000190  48a6              LDR      r0,|L15.1068|
000192  5d01              LDRB     r1,[r0,r4]            ;1389
000194  290a              CMP      r1,#0xa               ;1389
000196  bf38              IT       CC                    ;1389
000198  1c49              ADDCC    r1,r1,#1              ;1389
00019a  d200              BCS      |L15.414|
                  |L15.412|
00019c  5501              STRB     r1,[r0,r4]            ;1390
                  |L15.414|
00019e  1e64              SUBS     r4,r4,#1              ;1390
0001a0  f4bfaf4a          BCS      |L15.56|
0001a4  48a0              LDR      r0,|L15.1064|
0001a6  f8dfa288          LDR      r10,|L15.1072|
0001aa  2209              MOVS     r2,#9
0001ac  f8d09008          LDR      r9,[r0,#8]            ;1332  ; thisInfo
0001b0  f10d0b2c          ADD      r11,sp,#0x2c          ;1311
0001b4  af02              ADD      r7,sp,#8              ;1313
0001b6  2001              MOVS     r0,#1                 ;1332
0001b8  f04f0e00          MOV      lr,#0                 ;1332
0001bc  f1aa060a          SUB      r6,r10,#0xa           ;1350
                  |L15.448|
0001c0  f81b1002          LDRB     r1,[r11,r2]           ;1398
0001c4  2901              CMP      r1,#1                 ;1398
0001c6  d939              BLS      |L15.572|
0001c8  5cb9              LDRB     r1,[r7,r2]            ;1403
0001ca  f04f35ff          MOV      r5,#0xffffffff        ;1400
0001ce  2300              MOVS     r3,#0                 ;1401
0001d0  bba1              CBNZ     r1,|L15.572|
0001d2  f10d0c20          ADD      r12,sp,#0x20          ;1312
0001d6  210a              MOVS     r1,#0xa               ;1407
0001d8  f81cc002          LDRB     r12,[r12,r2]          ;1409
0001dc  2401              MOVS     r4,#1                 ;1407
                  |L15.478|
0001de  1e49              SUBS     r1,r1,#1              ;1409
0001e0  fa00f801          LSL      r8,r0,r1              ;1409
0001e4  ea1c0f08          TST      r12,r8                ;1409
0001e8  d007              BEQ      |L15.506|
0001ea  eb090841          ADD      r8,r9,r1,LSL #1       ;1411
0001ee  f8b884e4          LDRH     r8,[r8,#0x4e4]        ;1411
0001f2  4598              CMP      r8,r3                 ;1411
0001f4  bfc4              ITT      GT                    ;1413
0001f6  460d              MOVGT    r5,r1                 ;1413
0001f8  4643              MOVGT    r3,r8                 ;1413
                  |L15.506|
0001fa  1c64              ADDS     r4,r4,#1              ;1413
0001fc  2c0a              CMP      r4,#0xa               ;1414
0001fe  ddee              BLE      |L15.478|
000200  2100              MOVS     r1,#0
000202  f10a030a          ADD      r3,r10,#0xa           ;1419
000206  2405              MOVS     r4,#5                 ;1419
000208  fa5ff585          UXTB.W   r5,r5                 ;1422
                  |L15.524|
00020c  f1c10809          RSB      r8,r1,#9              ;1421
000210  fa00f808          LSL      r8,r0,r8              ;1421
000214  ea1c0f08          TST      r12,r8                ;1421
000218  bf18              IT       NE                    ;1422
00021a  f8035c01          STRBNE   r5,[r3,#-1]           ;1422
00021e  f1c10808          RSB      r8,r1,#8              ;1421
000222  fa00f808          LSL      r8,r0,r8              ;1421
000226  ea1c0f08          TST      r12,r8                ;1421
00022a  bf18              IT       NE                    ;1422
00022c  f8035c02          STRBNE   r5,[r3,#-2]           ;1422
000230  1c89              ADDS     r1,r1,#2              ;1422
000232  1e9b              SUBS     r3,r3,#2              ;1422
000234  1e64              SUBS     r4,r4,#1              ;1422
000236  d1e9              BNE      |L15.524|
000238  f806e002          STRB     lr,[r6,r2]            ;1425
                  |L15.572|
00023c  1e52              SUBS     r2,r2,#1              ;1425
00023e  d2bf              BCS      |L15.448|
000240  2409              MOVS     r4,#9
                  |L15.578|
000242  5d38              LDRB     r0,[r7,r4]            ;1432
000244  2801              CMP      r0,#1                 ;1432
000246  d17b              BNE      |L15.832|
000248  f8dfe1e4          LDR      lr,|L15.1072|
00024c  f81e5004          LDRB     r5,[lr,r4]            ;1434
000250  42a5              CMP      r5,r4                 ;1434
000252  d076              BEQ      |L15.834|
000254  4874              LDR      r0,|L15.1064|
000256  6883              LDR      r3,[r0,#8]            ;1439  ; thisInfo
000258  eb030045          ADD      r0,r3,r5,LSL #1       ;1439
00025c  f8b004e4          LDRH     r0,[r0,#0x4e4]        ;1439
000260  bbe8              CBNZ     r0,|L15.734|
000262  5d30              LDRB     r0,[r6,r4]            ;1439
000264  b3d8              CBZ      r0,|L15.734|
000266  200a              MOVS     r0,#0xa               ;1445
000268  f10e025a          ADD      r2,lr,#0x5a           ;1350
00026c  f04f3aff          MOV      r10,#0xffffffff       ;1442
000270  f04f0800          MOV      r8,#0                 ;1443
000274  2101              MOVS     r1,#1                 ;1445
000276  eb020985          ADD      r9,r2,r5,LSL #2       ;1449
                  |L15.634|
00027a  1e40              SUBS     r0,r0,#1              ;1449
00027c  42a0              CMP      r0,r4                 ;1447
00027e  d018              BEQ      |L15.690|
000280  5c3a              LDRB     r2,[r7,r0]            ;1447
000282  2a01              CMP      r2,#1                 ;1447
000284  d115              BNE      |L15.690|
000286  eb030280          ADD      r2,r3,r0,LSL #2       ;1449
00028a  f999c000          LDRSB    r12,[r9,#0]           ;1449
00028e  f992b4f9          LDRSB    r11,[r2,#0x4f9]       ;1449
000292  45dc              CMP      r12,r11               ;1449
000294  dc0d              BGT      |L15.690|
000296  f99224f8          LDRSB    r2,[r2,#0x4f8]        ;1449
00029a  f999c001          LDRSB    r12,[r9,#1]           ;1449
00029e  4562              CMP      r2,r12                ;1449
0002a0  dc07              BGT      |L15.690|
0002a2  eb030240          ADD      r2,r3,r0,LSL #1       ;1451
0002a6  f8b224e4          LDRH     r2,[r2,#0x4e4]        ;1451
0002aa  4590              CMP      r8,r2                 ;1451
0002ac  bfbc              ITT      LT                    ;1452
0002ae  4690              MOVLT    r8,r2                 ;1452
0002b0  4682              MOVLT    r10,r0                ;1452
                  |L15.690|
0002b2  1c49              ADDS     r1,r1,#1              ;1452
0002b4  290a              CMP      r1,#0xa               ;1452
0002b6  dde0              BLE      |L15.634|
0002b8  f1ba3fff          CMP      r10,#0xffffffff       ;1457
0002bc  bf08              IT       EQ                    ;1471
0002be  f80e4004          STRBEQ   r4,[lr,r4]            ;1471
0002c2  d024              BEQ      |L15.782|
0002c4  f00a03ff          AND      r3,r10,#0xff          ;1460
0002c8  f80e3004          STRB     r3,[lr,r4]            ;1460
0002cc  f106010a          ADD      r1,r6,#0xa            ;1461
0002d0  f10e000a          ADD      r0,lr,#0xa            ;1461
0002d4  f05f0205          MOVS.W   r2,#5                 ;1461
                  |L15.728|
0002d8  f811cc01          LDRB     r12,[r1,#-1]          ;1463
0002dc  e000              B        |L15.736|
                  |L15.734|
0002de  e016              B        |L15.782|
                  |L15.736|
0002e0  f1bc0f00          CMP      r12,#0                ;1463
0002e4  d005              BEQ      |L15.754|
0002e6  f810cc01          LDRB     r12,[r0,#-1]          ;1465
0002ea  45ac              CMP      r12,r5                ;1465
0002ec  bf08              IT       EQ                    ;1466
0002ee  f8003c01          STRBEQ   r3,[r0,#-1]           ;1466
                  |L15.754|
0002f2  f811cd02          LDRB     r12,[r1,#-2]!         ;1463
0002f6  f1bc0f00          CMP      r12,#0                ;1463
0002fa  d005              BEQ      |L15.776|
0002fc  f810cc02          LDRB     r12,[r0,#-2]          ;1465
000300  45ac              CMP      r12,r5                ;1465
000302  bf08              IT       EQ                    ;1466
000304  f8003c02          STRBEQ   r3,[r0,#-2]           ;1466
                  |L15.776|
000308  1e80              SUBS     r0,r0,#2              ;1466
00030a  1e52              SUBS     r2,r2,#1              ;1466
00030c  d1e4              BNE      |L15.728|
                  |L15.782|
00030e  5d70              LDRB     r0,[r6,r5]            ;1474
000310  b1a0              CBZ      r0,|L15.828|
000312  f8df8124          LDR      r8,|L15.1080|
000316  a80e              ADD      r0,sp,#0x38           ;1476
000318  eb0801c4          ADD      r1,r8,r4,LSL #3       ;1476
00031c  f7fffffe          BL       __ARM_common_memcpy4_8
000320  eb0801c5          ADD      r1,r8,r5,LSL #3       ;1476
000324  a806              ADD      r0,sp,#0x18           ;1476
000326  f7fffffe          BL       __ARM_common_memcpy4_8
00032a  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1476
00032e  e9dd230e          LDRD     r2,r3,[sp,#0x38]      ;1476
000332  f7fffffe          BL       algorithm_coord_calc_distance
000336  f5b05fb0          CMP      r0,#0x1600            ;1477
00033a  dd03              BLE      |L15.836|
                  |L15.828|
00033c  2000              MOVS     r0,#0                 ;1481
00033e  5538              STRB     r0,[r7,r4]            ;1481
                  |L15.832|
000340  e003              B        |L15.842|
                  |L15.834|
000342  e07d              B        |L15.1088|
                  |L15.836|
000344  5d38              LDRB     r0,[r7,r4]            ;1485
000346  2801              CMP      r0,#1                 ;1485
000348  d07b              BEQ      |L15.1090|
                  |L15.842|
00034a  1e64              SUBS     r4,r4,#1              ;1485
00034c  f4bfaf79          BCS      |L15.578|
000350  4835              LDR      r0,|L15.1064|
000352  2209              MOVS     r2,#9
000354  f10d0e48          ADD      lr,sp,#0x48           ;1314
000358  f8d03008          LDR.W    r3,[r0,#8]            ;1314
00035c  f04f0900          MOV      r9,#0                 ;1314
                  |L15.864|
000360  f81e0002          LDRB     r0,[lr,r2]            ;1509
000364  b3f0              CBZ      r0,|L15.996|
000366  eb030082          ADD      r0,r3,r2,LSL #2       ;1517
00036a  f99014f8          LDRSB    r1,[r0,#0x4f8]        ;1517
00036e  2900              CMP      r1,#0                 ;1517
000370  bfd2              ITEE     LE                    ;1517
000372  f3690c07          BFILE    r12,r9,#0,#8          ;1517
000376  1e49              SUBGT    r1,r1,#1              ;1517
000378  f3610c07          BFIGT    r12,r1,#0,#8          ;1517
00037c  f99044f9          LDRSB    r4,[r0,#0x4f9]        ;1521
000380  212f              MOVS     r1,#0x2f              ;1521
000382  2c2f              CMP      r4,#0x2f              ;1521
000384  bfb8              IT       LT                    ;1522
000386  1c61              ADDLT    r1,r4,#1              ;1522
000388  f3612c0f          BFI      r12,r1,#8,#8          ;1522
00038c  f99014fa          LDRSB    r1,[r0,#0x4fa]        ;1525
000390  2900              CMP      r1,#0                 ;1525
000392  bfc6              ITTE     GT                    ;1525
000394  1e49              SUBGT    r1,r1,#1              ;1525
000396  f3614c17          BFIGT    r12,r1,#16,#8         ;1525
00039a  f3694c17          BFILE    r12,r9,#16,#8         ;1525
00039e  f99014fb          LDRSB    r1,[r0,#0x4fb]        ;1529
0003a2  205f              MOVS     r0,#0x5f              ;1529
0003a4  295f              CMP      r1,#0x5f              ;1529
0003a6  bfb8              IT       LT                    ;1530
0003a8  1c48              ADDLT    r0,r1,#1              ;1530
0003aa  f3606c1f          BFI      r12,r0,#24,#8         ;1530
0003ae  200a              MOVS     r0,#0xa               ;1534
0003b0  2101              MOVS     r1,#1                 ;1534
0003b2  fa4ff78c          SXTB     r7,r12                ;1534
0003b6  f34c2507          SBFX     r5,r12,#8,#8          ;1534
0003ba  f34c4a07          SBFX     r10,r12,#16,#8        ;1534
0003be  ea4f6b2c          ASR      r11,r12,#24           ;1534
                  |L15.962|
0003c2  1e40              SUBS     r0,r0,#1              ;1534
0003c4  eb030440          ADD      r4,r3,r0,LSL #1       ;1536
0003c8  f8b4c4d0          LDRH     r12,[r4,#0x4d0]       ;1536
0003cc  f1bc0f00          CMP      r12,#0                ;1536
0003d0  d01d              BEQ      |L15.1038|
0003d2  eb030c80          ADD      r12,r3,r0,LSL #2      ;1538
0003d6  f99c84f9          LDRSB    r8,[r12,#0x4f9]       ;1538
0003da  f1080801          ADD      r8,r8,#1              ;1538
0003de  4547              CMP      r7,r8                 ;1538
0003e0  dc15              BGT      |L15.1038|
0003e2  e000              B        |L15.998|
                  |L15.996|
0003e4  e016              B        |L15.1044|
                  |L15.998|
0003e6  f99c84f8          LDRSB    r8,[r12,#0x4f8]       ;1538
0003ea  f1a80801          SUB      r8,r8,#1              ;1538
0003ee  45a8              CMP      r8,r5                 ;1538
0003f0  dc0d              BGT      |L15.1038|
0003f2  f99c84fb          LDRSB    r8,[r12,#0x4fb]       ;1540
0003f6  f1080801          ADD      r8,r8,#1              ;1540
0003fa  45c2              CMP      r10,r8                ;1540
0003fc  dc07              BGT      |L15.1038|
0003fe  f99cc4fa          LDRSB    r12,[r12,#0x4fa]      ;1540
000402  f1ac0c01          SUB      r12,r12,#1            ;1540
000406  45dc              CMP      r12,r11               ;1540
000408  bfd8              IT       LE                    ;1542
00040a  f8a494d0          STRHLE   r9,[r4,#0x4d0]        ;1542
                  |L15.1038|
00040e  1c49              ADDS     r1,r1,#1              ;1542
000410  290a              CMP      r1,#0xa               ;1542
000412  ddd6              BLE      |L15.962|
                  |L15.1044|
000414  5cb0              LDRB     r0,[r6,r2]            ;1549
000416  2800              CMP      r0,#0                 ;1549
000418  bf1c              ITT      NE                    ;1549
00041a  1e40              SUBNE    r0,r0,#1              ;1549
00041c  54b0              STRBNE   r0,[r6,r2]            ;1550
00041e  1e52              SUBS     r2,r2,#1              ;1550
000420  d29e              BCS      |L15.864|
000422  b019              ADD      sp,sp,#0x64
000424  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.1064|
                          DCD      ||.data||
                  |L15.1068|
                          DCD      ||.bss||+0x60
                  |L15.1072|
                          DCD      ||.bss||+0x74
                  |L15.1076|
                          DCD      ||.bss||+0x73
                  |L15.1080|
                          DCD      ||.bss||+0x7e
                  |L15.1084|
                          DCD      ||.bss||+0x6a
                  |L15.1088|
000440  e7ff              B        |L15.1090|
                  |L15.1090|
000442  a812              ADD      r0,sp,#0x48           ;1487
000444  f04f0901          MOV      r9,#1                 ;1487
000448  f8009004          STRB     r9,[r0,r4]            ;1487
00044c  200a              MOVS     r0,#0xa               ;1488
00044e  5530              STRB     r0,[r6,r4]            ;1488
000450  481d              LDR      r0,|L15.1224|
000452  eb000584          ADD      r5,r0,r4,LSL #2       ;1489
000456  481d              LDR      r0,|L15.1228|
000458  f8d08008          LDR      r8,[r0,#8]            ;1489  ; thisInfo
00045c  eb080084          ADD      r0,r8,r4,LSL #2       ;1489
000460  f8d004f8          LDR      r0,[r0,#0x4f8]        ;1489
000464  6028              STR      r0,[r5,#0]            ;1489
000466  eb0800c4          ADD      r0,r8,r4,LSL #3       ;1490
00046a  f5006190          ADD      r1,r0,#0x480          ;1490
00046e  4818              LDR      r0,|L15.1232|
000470  eb0000c4          ADD      r0,r0,r4,LSL #3       ;1490
000474  f7fffffe          BL       __ARM_common_memcpy4_8
000478  eb080144          ADD      r1,r8,r4,LSL #1       ;1491
00047c  2000              MOVS     r0,#0                 ;1491
00047e  f8a104d0          STRH     r0,[r1,#0x4d0]        ;1491
000482  f9950000          LDRSB    r0,[r5,#0]            ;1493
000486  2800              CMP      r0,#0                 ;1493
000488  bfc4              ITT      GT                    ;1493
00048a  1e40              SUBGT    r0,r0,#1              ;1493
00048c  7028              STRBGT   r0,[r5,#0]            ;1494
00048e  f9950001          LDRSB    r0,[r5,#1]            ;1495
000492  282f              CMP      r0,#0x2f              ;1495
000494  bfbc              ITT      LT                    ;1495
000496  1c40              ADDLT    r0,r0,#1              ;1495
000498  7068              STRBLT   r0,[r5,#1]            ;1496
00049a  f9950002          LDRSB    r0,[r5,#2]            ;1497
00049e  2800              CMP      r0,#0                 ;1497
0004a0  bfc4              ITT      GT                    ;1497
0004a2  1e40              SUBGT    r0,r0,#1              ;1497
0004a4  70a8              STRBGT   r0,[r5,#2]            ;1498
0004a6  f9950003          LDRSB    r0,[r5,#3]            ;1499
0004aa  285f              CMP      r0,#0x5f              ;1499
0004ac  bfbc              ITT      LT                    ;1499
0004ae  1c40              ADDLT    r0,r0,#1              ;1499
0004b0  70e8              STRBLT   r0,[r5,#3]            ;1500
0004b2  f6417087          MOV      r0,#0x1f87            ;1502
0004b6  f8009008          STRB     r9,[r0,r8]            ;1502
0004ba  f898047f          LDRB     r0,[r8,#0x47f]        ;1503
0004be  1e40              SUBS     r0,r0,#1              ;1503
0004c0  f888047f          STRB     r0,[r8,#0x47f]        ;1503
0004c4  e741              B        |L15.842|
;;;1557   
                          ENDP

0004c6  0000              DCW      0x0000
                  |L15.1224|
                          DCD      ||.bss||+0xce
                  |L15.1228|
                          DCD      ||.data||
                  |L15.1232|
                          DCD      ||.bss||+0x7e

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  sLFOffsetRow
                          %        96
                  ucFrameCnt
                          %        10
                  ucPalmContCnt
                          %        10
                  ucParNum
                          %        10
                  ucPalmPos
                          %        80
                  ucPalmRect
                          %        40
                  sLFOffsetCol
                          %        192

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  30606082          DCB      0x30,0x60,0x60,0x82
000004  54000000          DCB      0x54,0x00,0x00,0x00
000008  30606282          DCB      0x30,0x60,0x62,0x82
00000c  5100              DCB      0x51,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ptModuleModeConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  DebugAlgorithmInfo
                          DCD      0x00000000
                  tTempAlgorithmInfoDebug
                          DCD      0x00000000
                  sucArcTanLookUpTable
000014  00000039          DCW      0x0000,0x0039
000018  007300ac          DCW      0x0073,0x00ac
00001c  00e5011e          DCW      0x00e5,0x011e
000020  01570190          DCW      0x0157,0x0190
000024  01c90202          DCW      0x01c9,0x0202
000028  023b0274          DCW      0x023b,0x0274
00002c  02ac02e5          DCW      0x02ac,0x02e5
000030  031d0355          DCW      0x031d,0x0355
000034  038d03c5          DCW      0x038d,0x03c5
000038  03fc0434          DCW      0x03fc,0x0434
00003c  046b04a2          DCW      0x046b,0x04a2
000040  04d9050f          DCW      0x04d9,0x050f
000044  0546057c          DCW      0x0546,0x057c
000048  05b105e7          DCW      0x05b1,0x05e7
00004c  061c0651          DCW      0x061c,0x0651
000050  068606ba          DCW      0x0686,0x06ba
000054  06ee0722          DCW      0x06ee,0x0722
000058  07560789          DCW      0x0756,0x0789
00005c  07bc07ee          DCW      0x07bc,0x07ee
000060  08210853          DCW      0x0821,0x0853
000064  088408b5          DCW      0x0884,0x08b5
000068  08e60917          DCW      0x08e6,0x0917
00006c  09470977          DCW      0x0947,0x0977
000070  09a609d5          DCW      0x09a6,0x09d5
000074  0a040a32          DCW      0x0a04,0x0a32
000078  0a610a8e          DCW      0x0a61,0x0a8e
00007c  0abb0ae8          DCW      0x0abb,0x0ae8
000080  0b150b41          DCW      0x0b15,0x0b41
000084  0b6d0b98          DCW      0x0b6d,0x0b98
000088  0bc30bee          DCW      0x0bc3,0x0bee
00008c  0c180c42          DCW      0x0c18,0x0c42
000090  0c6c0c95          DCW      0x0c6c,0x0c95
000094  0cbe0ce6          DCW      0x0cbe,0x0ce6
000098  0d0e0d36          DCW      0x0d0e,0x0d36
00009c  0d5e0d85          DCW      0x0d5e,0x0d85
0000a0  0dab0dd1          DCW      0x0dab,0x0dd1
0000a4  0df70e1d          DCW      0x0df7,0x0e1d
0000a8  0e420e67          DCW      0x0e42,0x0e67
0000ac  0e8b0eb0          DCW      0x0e8b,0x0eb0
0000b0  0ed30ef7          DCW      0x0ed3,0x0ef7
0000b4  0f1a0f3d          DCW      0x0f1a,0x0f3d
0000b8  0f5f0f81          DCW      0x0f5f,0x0f81
0000bc  0fa30fc4          DCW      0x0fa3,0x0fc4
0000c0  0fe61006          DCW      0x0fe6,0x1006
0000c4  10271047          DCW      0x1027,0x1047
0000c8  10671086          DCW      0x1067,0x1086
0000cc  10a510c4          DCW      0x10a5,0x10c4
0000d0  10e31101          DCW      0x10e3,0x1101
0000d4  111f113d          DCW      0x111f,0x113d
0000d8  115a1177          DCW      0x115a,0x1177
0000dc  1194              DCW      0x1194

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  DoReportOrgPos
000000  00                DCB      0x00

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  ErrorFrameProcessMode
000000  00                DCB      0x00

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  ArcSinLookUpTable
000000  00010203          DCB      0x00,0x01,0x02,0x03
000004  03040506          DCB      0x03,0x04,0x05,0x06
000008  0708090a          DCB      0x07,0x08,0x09,0x0a
00000c  0b0c0d0e          DCB      0x0b,0x0c,0x0d,0x0e
000010  0f101112          DCB      0x0f,0x10,0x11,0x12
000014  13141516          DCB      0x13,0x14,0x15,0x16
000018  1718191a          DCB      0x17,0x18,0x19,0x1a
00001c  1b1c1d1e          DCB      0x1b,0x1c,0x1d,0x1e
000020  1f202122          DCB      0x1f,0x20,0x21,0x22
000024  23242526          DCB      0x23,0x24,0x25,0x26
000028  28292a2b          DCB      0x28,0x29,0x2a,0x2b
00002c  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
000030  2f303133          DCB      0x2f,0x30,0x31,0x33
000034  34353637          DCB      0x34,0x35,0x36,0x37
000038  38393b3c          DCB      0x38,0x39,0x3b,0x3c
00003c  3d3e4041          DCB      0x3d,0x3e,0x40,0x41
000040  43444648          DCB      0x43,0x44,0x46,0x48
000044  494b4c4e          DCB      0x49,0x4b,0x4c,0x4e
000048  4f515254          DCB      0x4f,0x51,0x52,0x54
00004c  56585a5c          DCB      0x56,0x58,0x5a,0x5c
000050  5d606264          DCB      0x5d,0x60,0x62,0x64
000054  6768696b          DCB      0x67,0x68,0x69,0x6b
000058  6d6f7171          DCB      0x6d,0x6f,0x71,0x71
00005c  71717171          DCB      0x71,0x71,0x71,0x71
000060  71717171          DCB      0x71,0x71,0x71,0x71
000064  71717171          DCB      0x71,0x71,0x71,0x71
000068  71717171          DCB      0x71,0x71,0x71,0x71
00006c  71717171          DCB      0x71,0x71,0x71,0x71
000070  71717171          DCB      0x71,0x71,0x71,0x71
000074  71717171          DCB      0x71,0x71,0x71,0x71
000078  71717171          DCB      0x71,0x71,0x71,0x71
00007c  71717171          DCB      0x71,0x71,0x71,0x71

                          AREA ||area_number.24||, DATA, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.data||
                  CosLookUpTable
000000  64646464          DCB      0x64,0x64,0x64,0x64
000004  64646464          DCB      0x64,0x64,0x64,0x64
000008  64646463          DCB      0x64,0x64,0x64,0x63
00000c  63636363          DCB      0x63,0x63,0x63,0x63
000010  63636262          DCB      0x63,0x63,0x62,0x62
000014  62626261          DCB      0x62,0x62,0x62,0x61
000018  61616160          DCB      0x61,0x61,0x61,0x60
00001c  6060605f          DCB      0x60,0x60,0x60,0x5f
000020  5f5f5e5e          DCB      0x5f,0x5f,0x5e,0x5e
000024  5e5d5d5c          DCB      0x5e,0x5d,0x5d,0x5c
000028  5c5c5b5b          DCB      0x5c,0x5c,0x5b,0x5b
00002c  5a5a5a59          DCB      0x5a,0x5a,0x5a,0x59
000030  59585857          DCB      0x59,0x58,0x58,0x57
000034  57565655          DCB      0x57,0x56,0x56,0x55
000038  55545453          DCB      0x55,0x54,0x54,0x53
00003c  53525151          DCB      0x53,0x52,0x51,0x51
000040  50504f4e          DCB      0x50,0x50,0x4f,0x4e
000044  4e4d4c4c          DCB      0x4e,0x4d,0x4c,0x4c
000048  4b4b4a49          DCB      0x4b,0x4b,0x4a,0x49
00004c  48484746          DCB      0x48,0x48,0x47,0x46
000050  46454443          DCB      0x46,0x45,0x44,0x43
000054  43424140          DCB      0x43,0x42,0x41,0x40
000058  403f3e3d          DCB      0x40,0x3f,0x3e,0x3d
00005c  3d3c3b3a          DCB      0x3d,0x3c,0x3b,0x3a
000060  39393837          DCB      0x39,0x39,0x38,0x37
000064  36353433          DCB      0x36,0x35,0x34,0x33
000068  33323130          DCB      0x33,0x32,0x31,0x30
00006c  2f2e2d2c          DCB      0x2f,0x2e,0x2d,0x2c
000070  2c2b              DCB      0x2c,0x2b

                          AREA ||i.__ARM_common_memcpy4_8||, COMGROUP=__ARM_common_memcpy4_8, CODE, READONLY, ALIGN=1

                  __ARM_common_memcpy4_8 PROC
000000  680a              LDR      r2,[r1,#0]
000002  684b              LDR      r3,[r1,#4]
000004  6002              STR      r2,[r0,#0]
000006  6043              STR      r3,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memclr4_10||, COMGROUP=__ARM_common_memclr4_10, CODE, READONLY, ALIGN=1

                  __ARM_common_memclr4_10 PROC
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  8101              STRH     r1,[r0,#8]
000008  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\algorithm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___11_algorithm_c_e1335427____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____REVSH|
#line 402
|__asm___11_algorithm_c_e1335427____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_algorithm_c_e1335427____RRX|
#line 587
|__asm___11_algorithm_c_e1335427____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
