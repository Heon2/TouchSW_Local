; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\sric.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\sric.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\sric.crf ..\..\Module\SRIC\sric.c]
                          THUMB

                          AREA ||i.SRIC_Init||, CODE, READONLY, ALIGN=1

                  SRIC_Init PROC
;;;802    #define MAX_CHECK_NUM (3)
;;;803    bool_t SRIC_Init(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;804    {
;;;805    	LX98405_RegisterInit(eSensingMode);
000002  f7fffffe          BL       LX98405_RegisterInit
;;;806    
;;;807    	// Open Short test...
;;;808    //	LX98405_OpenShort_SourceGnd_Setting();
;;;809    //
;;;810    //	LX98405_OpenShort_Local_Global_Tune();
;;;811    //
;;;812    //	LX98405_OpenShort_Mux_Low_En(2);
;;;813    
;;;814    	// Even/Odd Short test...
;;;815    //	LX98405_EvenOdd_Short_Setting(1);  // Even Short...
;;;816    //
;;;817    //	LX98405_Short_Local_Global_Tune();
;;;818    
;;;819    
;;;820    
;;;821    	delay_us(1000);
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       delay_us
;;;822    	return TRUE;
00000e  2001              MOVS     r0,#1
;;;823    }
000010  bd10              POP      {r4,pc}
;;;824    #else
                          ENDP


                          AREA ||i.SRIC_Initialize||, CODE, READONLY, ALIGN=1

                  SRIC_Initialize PROC
;;;439    
;;;440    void SRIC_Initialize(void)
000000  4770              BX       lr
;;;441    {
;;;442    //	s_pktmoduleSRICCommonConf = module_SRIC_GetCommonConfig();
;;;443    }
;;;444    
                          ENDP


                          AREA ||i.SRIC_Run||, CODE, READONLY, ALIGN=1

                  SRIC_Run PROC
;;;560    
;;;561    void SRIC_Run(void)
000000  2101              MOVS     r1,#1
;;;562    {
;;;563    	  MSPI_RegisterAllSricWrite((uint32_t)(0x0020),   0x1      );  // tc_start
000002  2020              MOVS     r0,#0x20
000004  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;564    }
;;;565    
                          ENDP


                          AREA ||i.SRIC_Set_OS||, CODE, READONLY, ALIGN=1

                  SRIC_Set_OS PROC
;;;651     */
;;;652    void SRIC_Set_OS(uint16_t regAIP_ADC, uint16_t regTEST_OPT)
000000  4770              BX       lr
;;;653    {
;;;654    #if (CUSTOMER == MODEL_LGD_SW92400)
;;;655    /*	Normal Frame
;;;656     *  0x036A 0x0000
;;;657     *	0x0306 0x357F
;;;658     *
;;;659     *	1 Frame
;;;660     *	0x036A 0x0010
;;;661     *	0x0306 0x35C3
;;;662     *
;;;663     *	2 Frame
;;;664     *	0x036A 0x0010
;;;665     *	0x0306 0x35C5
;;;666     *
;;;667     *	3 Frame
;;;668     *	0x036A 0x0010
;;;669     *	0x0306 0x35C9
;;;670     *
;;;671     *	4 Frame
;;;672     *	0x036A 0x0010
;;;673     *	0x0306 0x35D1
;;;674     *
;;;675     *	5 Frame
;;;676     *	0x036A 0x0010
;;;677     *	0x0306 0x35E1
;;;678     *
;;;679     */
;;;680    //	MSPI_RegisterWrite(R0(0x06), regAIP_ADC);	// CFGR_AIP_ADC
;;;681    //	MSPI_RegisterWrite(R0(0x6A), regTEST_OPT);	// CFGR_TEST_OPT
;;;682    #else /* if(CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405) */
;;;683    //	MSPI_RegisterWrite(R0(0x06), regAIP_ADC);	// CFGR_AIP_ADC
;;;684    //	MSPI_RegisterWrite(R0(0x4A), regTEST_OPT);	// CFGR_TEST_OPT
;;;685    #endif /* (CUSTOMER == MODEL_LGD_SW92400) */
;;;686    }
;;;687    
                          ENDP


                          AREA ||i.SRIC_Set_Register||, CODE, READONLY, ALIGN=1

                  SRIC_Set_Register PROC
;;;959    #else /* (CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405) */
;;;960    void SRIC_Set_Register(uint32_t addr, uint16_t *WriteBuf, eROICSelect_t sel)
000000  4770              BX       lr
;;;961    {
;;;962    	if (sel == ROIC_0)
;;;963    	{
;;;964    	//	MSPI_RegisterWriteBuf(R0(addr), WriteBuf);
;;;965    	}
;;;966    	else if (sel == ROIC_1)
;;;967    	{
;;;968    //		MSPI_RegisterWriteBuf(R1(addr), WriteBuf);
;;;969    	}
;;;970    	else if (sel == ROIC_ALL)
;;;971    	{
;;;972    	//	MSPI_RegisterWriteBuf(R0(addr), WriteBuf);
;;;973    //		MSPI_RegisterWriteBuf(R1(addr), WriteBuf);
;;;974    	}
;;;975    	else if (sel == DEFAULT)
;;;976    	{
;;;977    	}
;;;978    }
;;;979    #endif /* (CUSTOMER == MODEL_LGD_SW92400) */
                          ENDP


                          AREA ||i.SRIC_Stop||, CODE, READONLY, ALIGN=1

                  SRIC_Stop PROC
;;;565    
;;;566    void SRIC_Stop(void)
000000  2100              MOVS     r1,#0
;;;567    {
;;;568    	  MSPI_RegisterAllSricWrite((uint32_t)(0x0020),  0x0       );  //  tc_stop
000002  2020              MOVS     r0,#0x20
000004  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;569    }
;;;570    
                          ENDP


                          AREA ||i.SW92400_Check||, CODE, READONLY, ALIGN=1

                  SW92400_Check PROC
;;;582    
;;;583    bool_t SW92400_Check(uint32_t addr, uint16_t inputval, eROICSelect_t sel)
000000  2000              MOVS     r0,#0
;;;584    {
;;;585    	int i;
;;;586    
;;;587    	uint16_t buf[MSPI_NUM] = {0,};
;;;588    
;;;589    	if (sel == ROIC_0)
;;;590    	{
;;;591    	//	MSPI_RegisterRead(R0(addr), buf);
;;;592    	}
;;;593    	else if (sel == ROIC_1)
;;;594    	{
;;;595    	//	MSPI_RegisterRead(R1(addr), buf);
;;;596    	}
;;;597    	else if (sel == ROIC_ALL)
;;;598    	{
;;;599    	//	MSPI_RegisterRead(R0(addr), buf);
;;;600    	//	MSPI_RegisterRead(R1(addr), buf);
;;;601    	}
;;;602    	else if (sel == DEFAULT)
;;;603    	{
;;;604    	}
;;;605    
;;;606    	for (i = 0; i < MSPI_NUM; ++i)
;;;607    	{
;;;608    		if (inputval != buf[i])
000002  4288              CMP      r0,r1
000004  bf04              ITT      EQ
000006  0c02              LSREQ    r2,r0,#16
000008  428a              CMPEQ    r2,r1
00000a  d105              BNE      |L7.24|
00000c  4288              CMP      r0,r1
00000e  bf01              ITTTT    EQ
000010  0c00              LSREQ    r0,r0,#16
000012  4288              CMPEQ    r0,r1
;;;609    			return FALSE;
;;;610    	}
;;;611    
;;;612    	return TRUE;
000014  2001              MOVEQ    r0,#1
;;;613    }
000016  4770              BXEQ     lr
                  |L7.24|
000018  f04f0000          MOV      r0,#0                 ;609
00001c  4770              BX       lr
;;;614    
                          ENDP


                          AREA ||i.SW92400_Each_Set_Register||, CODE, READONLY, ALIGN=1

                  SW92400_Each_Set_Register PROC
;;;614    
;;;615    void SW92400_Each_Set_Register(uint32_t addr, uint16_t * pval, eROICSelect_t sel)
000000  4770              BX       lr
;;;616    {
;;;617    	if (sel == ROIC_0)
;;;618    	{
;;;619    //		MSPI_EachRegisterWrite(R0(addr), pval);
;;;620    	}
;;;621    	else if (sel == ROIC_1)
;;;622    	{
;;;623    	//	MSPI_EachRegisterWrite(R1(addr), pval);
;;;624    	}
;;;625    	else if (sel == ROIC_ALL)
;;;626    	{
;;;627    //		MSPI_EachRegisterWrite(R0(addr), pval);
;;;628    	//	MSPI_EachRegisterWrite(R1(addr), pval);
;;;629    	}
;;;630    	else if (sel == SM_ROIC_0)
;;;631    	{
;;;632    	//	MSPI_EachRegisterWrite(SM_R0(addr), pval);
;;;633    	}
;;;634    	else if (sel == SM_ROIC_1)
;;;635    	{
;;;636    //		MSPI_EachRegisterWrite(SM_R1(addr), pval);
;;;637    	}
;;;638    	else if (sel == SM_ROIC_ALL)
;;;639    	{
;;;640    //		MSPI_EachRegisterWrite(SM_R0(addr), pval);
;;;641    //		MSPI_EachRegisterWrite(SM_R1(addr), pval);
;;;642    	}
;;;643    	else if (sel == DEFAULT)
;;;644    	{
;;;645    	}
;;;646    }
;;;647    
                          ENDP


                          AREA ||i.SW92400_Get_Register||, CODE, READONLY, ALIGN=1

                  SW92400_Get_Register PROC
;;;574    
;;;575    uint16_t SW92400_Get_Register(uint8_t ch, uint32_t addr)
000000  b083              SUB      sp,sp,#0xc
;;;576    {
;;;577    	uint16_t retbuf[6] = {0,};
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
000006  9101              STR      r1,[sp,#4]
;;;578    
;;;579    //	MSPI_RegisterRead(addr, retbuf);
;;;580    	return (retbuf[ch]);
000008  9102              STR      r1,[sp,#8]
00000a  f83d0010          LDRH     r0,[sp,r0,LSL #1]
;;;581    }
00000e  b003              ADD      sp,sp,#0xc
000010  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.SW92400_Hopp110_Init||, CODE, READONLY, ALIGN=1

                  SW92400_Hopp110_Init PROC
;;;516    
;;;517    bool_t SW92400_Hopp110_Init(void)
000000  2006              MOVS     r0,#6
                  |L10.2|
;;;518    {
;;;519    	int i, k;
;;;520    	uint16_t * pR0_Reg;
;;;521    	uint16_t * pR1_Reg;
;;;522    	int chkcnt = 3;
;;;523    //	pR0_Reg = (uint16_t *) &s_pktmoduleSRICCommonConf->R0_RegVal_Active;
;;;524    //	pR1_Reg = (uint16_t *) &s_pktmoduleSRICCommonConf->R1_RegVal_Active;
;;;525    
;;;526    	for (i = 5; i < 25/*iRegCntMax*/; ++i)
000002  1c40              ADDS     r0,r0,#1
000004  2819              CMP      r0,#0x19
000006  dbfc              BLT      |L10.2|
;;;527    	{
;;;528    		// R0 Register Validate Check (3Cycle)
;;;529    		//for (k = 0; k < chkcnt; ++k)
;;;530    		{
;;;531    //			SW92400_Set_Register(i * 2, pR0_Reg[i], ROIC_0);	//LBJ_CHECK : Need to develop hopping algorithm
;;;532    		}
;;;533    
;;;534    	}
;;;535    	//SW92400_Set_Register(24 * 2, pR0_Reg[i], ROIC_0);
;;;536    	
;;;537    	//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x0);
;;;538    	//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x1);
;;;539    	for (i = 5; i < 25/*iRegCntMax*/; ++i)
000008  2205              MOVS     r2,#5
00000a  2000              MOVS     r0,#0
                  |L10.12|
;;;540    	//for (i = 0; i < 56/*iRegCntMax*/; ++i)
;;;541    	{
;;;542    		// R0 Register Validate Check (3Cycle)
;;;543    		//for (k = 0; k < chkcnt; ++k)
;;;544    		{
;;;545    			if (SW92400_Check(i * 2, pR0_Reg[i], ROIC_ALL) == FALSE)
00000c  f8331012          LDRH     r1,[r3,r2,LSL #1]
000010  4288              CMP      r0,r1
000012  bf04              ITT      EQ
000014  ea4f4c10          LSREQ    r12,r0,#16
000018  458c              CMPEQ    r12,r1
00001a  d10b              BNE      |L10.52|
00001c  4288              CMP      r0,r1
00001e  bf04              ITT      EQ
000020  ea4f4c10          LSREQ    r12,r0,#16
000024  458c              CMPEQ    r12,r1
000026  d105              BNE      |L10.52|
000028  f1020201          ADD      r2,r2,#1
00002c  2a19              CMP      r2,#0x19              ;539
00002e  dbed              BLT      |L10.12|
;;;546    			{
;;;547    		//		if(k == 2)
;;;548    					return FALSE;
;;;549    			}
;;;550    			else
;;;551    			{
;;;552    				//break;
;;;553    			}
;;;554    		}
;;;555    	}
;;;556    	//delay_us(1000);
;;;557    	
;;;558    	return TRUE;
000030  2001              MOVS     r0,#1
;;;559    }
000032  4770              BX       lr
                  |L10.52|
000034  2000              MOVS     r0,#0                 ;548
000036  4770              BX       lr
;;;560    
                          ENDP


                          AREA ||i.SW92400_Reset||, CODE, READONLY, ALIGN=1

                  SW92400_Reset PROC
;;;444    
;;;445    void SW92400_Reset(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;446    {
;;;447    	uint16_t i;
;;;448    
;;;449    	//Init Pins
;;;450    	initGPIO(PIN_MSPI_SSN_0, GPIO_Mode0_GPIO, Output);
000002  2100              MOVS     r1,#0
000004  2201              MOVS     r2,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       initGPIO
;;;451    	initGPIO(PIN_MSPI_SSN_1, GPIO_Mode0_GPIO, Output);
00000c  2201              MOVS     r2,#1
00000e  2100              MOVS     r1,#0
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       initGPIO
;;;452    	initGPIO(PIN_MSPI_SSN_2, GPIO_Mode0_GPIO, Output);
000016  2201              MOVS     r2,#1
000018  2100              MOVS     r1,#0
00001a  2008              MOVS     r0,#8
00001c  f7fffffe          BL       initGPIO
;;;453    	initGPIO(PIN_MSPI_SSN_3, GPIO_Mode0_GPIO, Output);
000020  2201              MOVS     r2,#1
000022  2100              MOVS     r1,#0
000024  200c              MOVS     r0,#0xc
000026  f7fffffe          BL       initGPIO
;;;454    	initGPIO(PIN_MSPI_SSN_4, GPIO_Mode0_GPIO, Output);
00002a  2201              MOVS     r2,#1
00002c  2100              MOVS     r1,#0
00002e  2010              MOVS     r0,#0x10
000030  f7fffffe          BL       initGPIO
;;;455    	initGPIO(PIN_MSPI_SSN_5, GPIO_Mode0_GPIO, Output);
000034  2201              MOVS     r2,#1
000036  2100              MOVS     r1,#0
000038  2014              MOVS     r0,#0x14
00003a  f7fffffe          BL       initGPIO
;;;456    
;;;457    	initGPIO(PIN_MSPI_MOSI_0, GPIO_Mode0_GPIO, Output);
00003e  2201              MOVS     r2,#1
000040  2100              MOVS     r1,#0
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       initGPIO
;;;458    	initGPIO(PIN_MSPI_MOSI_1, GPIO_Mode0_GPIO, Output);
000048  2201              MOVS     r2,#1
00004a  2100              MOVS     r1,#0
00004c  2006              MOVS     r0,#6
00004e  f7fffffe          BL       initGPIO
;;;459    	initGPIO(PIN_MSPI_MOSI_2, GPIO_Mode0_GPIO, Output);
000052  2201              MOVS     r2,#1
000054  2100              MOVS     r1,#0
000056  200a              MOVS     r0,#0xa
000058  f7fffffe          BL       initGPIO
;;;460    	initGPIO(PIN_MSPI_MOSI_3, GPIO_Mode0_GPIO, Output);
00005c  2201              MOVS     r2,#1
00005e  2100              MOVS     r1,#0
000060  200e              MOVS     r0,#0xe
000062  f7fffffe          BL       initGPIO
;;;461    	initGPIO(PIN_MSPI_MOSI_4, GPIO_Mode0_GPIO, Output);
000066  2201              MOVS     r2,#1
000068  2100              MOVS     r1,#0
00006a  2012              MOVS     r0,#0x12
00006c  f7fffffe          BL       initGPIO
;;;462    	initGPIO(PIN_MSPI_MOSI_5, GPIO_Mode0_GPIO, Output);
000070  2201              MOVS     r2,#1
000072  2100              MOVS     r1,#0
000074  2016              MOVS     r0,#0x16
000076  f7fffffe          BL       initGPIO
;;;463    
;;;464    	//Pin State
;;;465    	writeBitToGPIO( PIN_MSPI_SSN_0, LOW);
00007a  2100              MOVS     r1,#0
00007c  4608              MOV      r0,r1
00007e  f7fffffe          BL       writeBitToGPIO
;;;466    	writeBitToGPIO( PIN_MSPI_SSN_1, LOW);
000082  2100              MOVS     r1,#0
000084  2004              MOVS     r0,#4
000086  f7fffffe          BL       writeBitToGPIO
;;;467    	writeBitToGPIO( PIN_MSPI_SSN_2, LOW);
00008a  2100              MOVS     r1,#0
00008c  2008              MOVS     r0,#8
00008e  f7fffffe          BL       writeBitToGPIO
;;;468    	writeBitToGPIO( PIN_MSPI_SSN_3, LOW);
000092  2100              MOVS     r1,#0
000094  200c              MOVS     r0,#0xc
000096  f7fffffe          BL       writeBitToGPIO
;;;469    	writeBitToGPIO( PIN_MSPI_SSN_4, LOW);
00009a  2100              MOVS     r1,#0
00009c  2010              MOVS     r0,#0x10
00009e  f7fffffe          BL       writeBitToGPIO
;;;470    	writeBitToGPIO( PIN_MSPI_SSN_5, LOW);
0000a2  2100              MOVS     r1,#0
0000a4  2014              MOVS     r0,#0x14
0000a6  f7fffffe          BL       writeBitToGPIO
;;;471    
;;;472    	delay_us(100);
0000aa  2064              MOVS     r0,#0x64
0000ac  f7fffffe          BL       delay_us
;;;473    	writeBitToGPIO( PIN_MSPI_SSN_0, HIGH);
0000b0  2101              MOVS     r1,#1
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       writeBitToGPIO
;;;474    	writeBitToGPIO( PIN_MSPI_SSN_1, HIGH);
0000b8  2101              MOVS     r1,#1
0000ba  2004              MOVS     r0,#4
0000bc  f7fffffe          BL       writeBitToGPIO
;;;475    	writeBitToGPIO( PIN_MSPI_SSN_2, HIGH);
0000c0  2101              MOVS     r1,#1
0000c2  2008              MOVS     r0,#8
0000c4  f7fffffe          BL       writeBitToGPIO
;;;476    	writeBitToGPIO( PIN_MSPI_SSN_3, HIGH);
0000c8  2101              MOVS     r1,#1
0000ca  200c              MOVS     r0,#0xc
0000cc  f7fffffe          BL       writeBitToGPIO
;;;477    	writeBitToGPIO( PIN_MSPI_SSN_4, HIGH);
0000d0  2101              MOVS     r1,#1
0000d2  2010              MOVS     r0,#0x10
0000d4  f7fffffe          BL       writeBitToGPIO
;;;478    	writeBitToGPIO( PIN_MSPI_SSN_5, HIGH);
0000d8  2101              MOVS     r1,#1
0000da  2014              MOVS     r0,#0x14
0000dc  f7fffffe          BL       writeBitToGPIO
;;;479    
;;;480    	writeBitToGPIO( PIN_MSPI_MOSI_0, LOW);
0000e0  2100              MOVS     r1,#0
0000e2  2002              MOVS     r0,#2
0000e4  f7fffffe          BL       writeBitToGPIO
;;;481    	writeBitToGPIO( PIN_MSPI_MOSI_1, LOW);
0000e8  2100              MOVS     r1,#0
0000ea  2006              MOVS     r0,#6
0000ec  f7fffffe          BL       writeBitToGPIO
;;;482    	writeBitToGPIO( PIN_MSPI_MOSI_2, LOW);
0000f0  2100              MOVS     r1,#0
0000f2  200a              MOVS     r0,#0xa
0000f4  f7fffffe          BL       writeBitToGPIO
;;;483    	writeBitToGPIO( PIN_MSPI_MOSI_3, LOW);
0000f8  2100              MOVS     r1,#0
0000fa  200e              MOVS     r0,#0xe
0000fc  f7fffffe          BL       writeBitToGPIO
;;;484    	writeBitToGPIO( PIN_MSPI_MOSI_4, LOW);
000100  2100              MOVS     r1,#0
000102  2012              MOVS     r0,#0x12
000104  f7fffffe          BL       writeBitToGPIO
;;;485    	writeBitToGPIO( PIN_MSPI_MOSI_5, LOW);
000108  2100              MOVS     r1,#0
00010a  2016              MOVS     r0,#0x16
00010c  f7fffffe          BL       writeBitToGPIO
;;;486    	delay_us(100);
000110  2064              MOVS     r0,#0x64
000112  f7fffffe          BL       delay_us
;;;487    
;;;488    	for (i = 0; i < SRIC_PROTOCOL_RESET_COUNT; i++)
000116  2400              MOVS     r4,#0
                  |L11.280|
;;;489    	{
;;;490    		writeBitToGPIO( PIN_MSPI_MOSI_0, HIGH);
000118  2101              MOVS     r1,#1
00011a  2002              MOVS     r0,#2
00011c  f7fffffe          BL       writeBitToGPIO
;;;491    		writeBitToGPIO( PIN_MSPI_MOSI_1, HIGH);
000120  2101              MOVS     r1,#1
000122  2006              MOVS     r0,#6
000124  f7fffffe          BL       writeBitToGPIO
;;;492    		writeBitToGPIO( PIN_MSPI_MOSI_2, HIGH);
000128  2101              MOVS     r1,#1
00012a  200a              MOVS     r0,#0xa
00012c  f7fffffe          BL       writeBitToGPIO
;;;493    		writeBitToGPIO( PIN_MSPI_MOSI_3, HIGH);
000130  2101              MOVS     r1,#1
000132  200e              MOVS     r0,#0xe
000134  f7fffffe          BL       writeBitToGPIO
;;;494    		writeBitToGPIO( PIN_MSPI_MOSI_4, HIGH);
000138  2101              MOVS     r1,#1
00013a  2012              MOVS     r0,#0x12
00013c  f7fffffe          BL       writeBitToGPIO
;;;495    		writeBitToGPIO( PIN_MSPI_MOSI_5, HIGH);
000140  2101              MOVS     r1,#1
000142  2016              MOVS     r0,#0x16
000144  f7fffffe          BL       writeBitToGPIO
;;;496    		delay_us(10);
000148  200a              MOVS     r0,#0xa
00014a  f7fffffe          BL       delay_us
;;;497    		writeBitToGPIO( PIN_MSPI_MOSI_0, LOW);
00014e  2100              MOVS     r1,#0
000150  2002              MOVS     r0,#2
000152  f7fffffe          BL       writeBitToGPIO
;;;498    		writeBitToGPIO( PIN_MSPI_MOSI_1, LOW);
000156  2100              MOVS     r1,#0
000158  2006              MOVS     r0,#6
00015a  f7fffffe          BL       writeBitToGPIO
;;;499    		writeBitToGPIO( PIN_MSPI_MOSI_2, LOW);
00015e  2100              MOVS     r1,#0
000160  200a              MOVS     r0,#0xa
000162  f7fffffe          BL       writeBitToGPIO
;;;500    		writeBitToGPIO( PIN_MSPI_MOSI_3, LOW);
000166  2100              MOVS     r1,#0
000168  200e              MOVS     r0,#0xe
00016a  f7fffffe          BL       writeBitToGPIO
;;;501    		writeBitToGPIO( PIN_MSPI_MOSI_4, LOW);
00016e  2100              MOVS     r1,#0
000170  2012              MOVS     r0,#0x12
000172  f7fffffe          BL       writeBitToGPIO
;;;502    		writeBitToGPIO( PIN_MSPI_MOSI_5, LOW);
000176  2100              MOVS     r1,#0
000178  2016              MOVS     r0,#0x16
00017a  f7fffffe          BL       writeBitToGPIO
;;;503    		delay_us(10);
00017e  200a              MOVS     r0,#0xa
000180  f7fffffe          BL       delay_us
000184  1c60              ADDS     r0,r4,#1              ;488
000186  b284              UXTH     r4,r0                 ;488
000188  2c07              CMP      r4,#7                 ;488
00018a  d3c5              BCC      |L11.280|
;;;504    	}
;;;505    	writeBitToGPIO( PIN_MSPI_SSN_0, LOW);
00018c  2100              MOVS     r1,#0
00018e  4608              MOV      r0,r1
000190  f7fffffe          BL       writeBitToGPIO
;;;506    	writeBitToGPIO( PIN_MSPI_SSN_1, LOW);
000194  2100              MOVS     r1,#0
000196  2004              MOVS     r0,#4
000198  f7fffffe          BL       writeBitToGPIO
;;;507    	writeBitToGPIO( PIN_MSPI_SSN_2, LOW);
00019c  2100              MOVS     r1,#0
00019e  2008              MOVS     r0,#8
0001a0  f7fffffe          BL       writeBitToGPIO
;;;508    	writeBitToGPIO( PIN_MSPI_SSN_3, LOW);
0001a4  2100              MOVS     r1,#0
0001a6  200c              MOVS     r0,#0xc
0001a8  f7fffffe          BL       writeBitToGPIO
;;;509    	writeBitToGPIO( PIN_MSPI_SSN_4, LOW);
0001ac  2100              MOVS     r1,#0
0001ae  2010              MOVS     r0,#0x10
0001b0  f7fffffe          BL       writeBitToGPIO
;;;510    	writeBitToGPIO( PIN_MSPI_SSN_5, LOW);
0001b4  2100              MOVS     r1,#0
0001b6  2014              MOVS     r0,#0x14
0001b8  f7fffffe          BL       writeBitToGPIO
;;;511    
;;;512    	delay_us(100);
0001bc  e8bd4010          POP      {r4,lr}
0001c0  2064              MOVS     r0,#0x64
0001c2  f7ffbffe          B.W      delay_us
;;;513    }
;;;514    
                          ENDP


                          AREA ||i.SW92400_SetActiveIdleOperationMode||, CODE, READONLY, ALIGN=1

                  SW92400_SetActiveIdleOperationMode PROC
;;;770    
;;;771    void SW92400_SetActiveIdleOperationMode(eSENSING_MODE_t eSensingMode)
000000  4770              BX       lr
;;;772    {
;;;773    //	MSPI_Set_TLPMODE();
;;;774    //
;;;775    //	SW92400_Set_FreqConfig(eSensingMode);
;;;776    //	if(IS_ACTIVE_MODE(eSensingMode))
;;;777    //	{
;;;778    //#if (!USED_NORMAL_NI_SENSING)
;;;779    //		SW92400_Set_Register(g_ROIC_Reg_Val[02].ROIC_addr, g_ROIC_Reg_Val[02].ROIC0_val, ROIC_0);
;;;780    //#endif /* (!USED_NORMAL_NI_SENSING) */
;;;781    //		SW92400_Set_Register(g_ROIC_Reg_Val[89].ROIC_addr, g_ROIC_Reg_Val[89].ROIC0_val, ROIC_0);
;;;782    //	}
;;;783    //	else
;;;784    //	{
;;;785    //#if (!USED_NORMAL_NI_SENSING)
;;;786    //#if (USED_IDLE_NI_SENSING_MUX_NUM == 3)
;;;787    //		SW92400_Set_Register(g_ROIC_Reg_Val[02].ROIC_addr, 0x4761, ROIC_0);
;;;788    //#elif (USED_IDLE_NI_SENSING_MUX_NUM == 2)
;;;789    //		SW92400_Set_Register(g_ROIC_Reg_Val[02].ROIC_addr, 0x4361, ROIC_0);
;;;790    //#elif (USED_IDLE_NI_SENSING_MUX_NUM == 1)
;;;791    //		SW92400_Set_Register(g_ROIC_Reg_Val[02].ROIC_addr, 0x4161, ROIC_0);
;;;792    //#endif /* (USED_IDLE_NI_SENSING_MUX_NUM == 3) */
;;;793    //#endif /* (!USED_NORMAL_NI_SENSING) */
;;;794    //		SW92400_Set_Register(g_ROIC_Reg_Val[89].ROIC_addr, 0x0900, ROIC_0);
;;;795    //	}
;;;796    //
;;;797    //	MSPI_Set_AITMODE(eSensingMode);
;;;798    //	MSPI->SPISTART = 0x3F;
;;;799    }
;;;800    
                          ENDP


                          AREA ||i.SW92400_Set_CFGR||, CODE, READONLY, ALIGN=1

                  SW92400_Set_CFGR PROC
;;;368    
;;;369    void SW92400_Set_CFGR(eSENSING_MODE_t eSensingMode)
000000  4770              BX       lr
;;;370    {
;;;371    //	SW92400_Set_Register(CFGR_AIP_ADC, s_pktmoduleSRICCommonConf->tParam_AIP_ADC.ulBulk, ROIC_0);
;;;372    //	SW92400_Set_Register(SSU_CTRL, s_pktmoduleSRICCommonConf->tParam_SSU_CTRL.ulBulk, ROIC_ALL);
;;;373    //	SW92400_Set_Register(CMUX_NORM, s_pktmoduleSRICCommonConf->tParam_CMUX_NORM.ulBulk, ROIC_0);
;;;374    //	SW92400_Set_Register(CMUX_NUM_PEN, s_pktmoduleSRICCommonConf->tParam_CMUX_NUM_PEN.ulBulk, ROIC_0);
;;;375    //
;;;376    //	SW92400_Set_Register(CHIP0_LEN, s_pktmoduleSRICCommonConf->tParam_CHIP0_LEN.ulBulk, ROIC_0);
;;;377    //
;;;378    //	SW92400_Set_Register(COL_NUM, s_pktmoduleSRICCommonConf->tParam_COL_NUM.ulBulk, ROIC_ALL);
;;;379    //	SW92400_Set_Register(OUTER, s_pktmoduleSRICCommonConf->tParam_OUTER.ulBulk, ROIC_ALL);
;;;380    
;;;381    //	SW92400_Set_Register(DIG_GAIN0, R_DIG_GAIN0, ROIC_0);
;;;382    //	SW92400_Set_Register(DIG_GAIN1, R_DIG_GAIN1, ROIC_0);
;;;383    //	SW92400_Set_Register(DIG_GAIN2, R_DIG_GAIN2, ROIC_0);
;;;384    //	SW92400_Set_Register(NIH_MIN0, R_NIH_MIN0, ROIC_0);
;;;385    //	SW92400_Set_Register(NIH_MAX0, R_NIH_MAX0, ROIC_0);
;;;386    //	SW92400_Set_Register(NIH_MIN1, R_NIH_MIN1, ROIC_0);
;;;387    //	SW92400_Set_Register(NIH_MAX1, R_NIH_MAX1, ROIC_0);
;;;388    //	SW92400_Set_Register(NIH_MIN2, R_NIH_MIN2, ROIC_0);
;;;389    //	SW92400_Set_Register(NIH_MAX2, R_NIH_MAX2, ROIC_0);
;;;390    //	SW92400_Set_Register(NIH_MIN3, R_NIH_MIN3, ROIC_0);
;;;391    //	SW92400_Set_Register(NIH_MAX3, R_NIH_MAX3, ROIC_0);
;;;392    
;;;393    
;;;394    
;;;395    //	SW92400_Set_Register(NIH_STD, s_pktmoduleSRICCommonConf->tParam_NIH_STD.ulBulk, ROIC_0);
;;;396    //	SW92400_Set_Register(SHA_STR, s_pktmoduleSRICCommonConf->tParam_SHA_STR.ulBulk, ROIC_ALL);
;;;397    //	SW92400_Set_Register(RSTP_WIDTH, s_pktmoduleSRICCommonConf->tParam_RSTP_WIDTH.ulBulk, ROIC_ALL);
;;;398    //	SW92400_Set_Register(VCR_STR, s_pktmoduleSRICCommonConf->tParam_VCR_STR.ulBulk, ROIC_ALL);
;;;399    //	SW92400_Set_Register(VCR2_MD, s_pktmoduleSRICCommonConf->tParam_VCR2_MD.ulBulk, ROIC_ALL);
;;;400    //	SW92400_Set_Register(VCR2_PHTCR, s_pktmoduleSRICCommonConf->tParam_VCR2_PHTCR.ulBulk, ROIC_ALL);
;;;401    //	SW92400_Set_Register(PHTH0_WIDTH, s_pktmoduleSRICCommonConf->tParam_PHTH0_WIDTH.ulBulk, ROIC_ALL);
;;;402    //	SW92400_Set_Register(PHTH1_WIDTH, s_pktmoduleSRICCommonConf->tParam_PHTH1_WIDTH.ulBulk, ROIC_ALL);
;;;403    //	SW92400_Set_Register(SHA_RUN, s_pktmoduleSRICCommonConf->tParam_SHA_RUN.ulBulk, ROIC_ALL);
;;;404    //	SW92400_Set_Register(RSTP_DLY1, s_pktmoduleSRICCommonConf->tParam_RSTP_DLY1.ulBulk, ROIC_ALL);
;;;405    //	SW92400_Set_Register(RSTP_DLY2, s_pktmoduleSRICCommonConf->tParam_RSTP_DLY2.ulBulk, ROIC_ALL);
;;;406    //	SW92400_Set_Register(TEST_OPT, s_pktmoduleSRICCommonConf->tParam_TEST_OPT.ulBulk, ROIC_0);
;;;407    
;;;408    //	SW92400_Set_Register(LV_SSU_ON, s_pktmoduleSRICCommonConf->tParam_LV_SSU_ON.ulBulk, ROIC_ALL);
;;;409    //	SW92400_Set_Register(HV_SSU_ON, s_pktmoduleSRICCommonConf->tParam_HV_SSU_ON.ulBulk, ROIC_ALL);
;;;410    
;;;411    //	SW92400_Set_Register(SSU_PRE_GC, s_pktmoduleSRICCommonConf->tParam_SSU_PRE_GC.ulBulk, ROIC_ALL);
;;;412    //	SW92400_Set_Register(CMUX_REMAP0, s_pktmoduleSRICCommonConf->tParam_CMUX_REMAP0.ulBulk, ROIC_0);
;;;413    //	SW92400_Set_Register(CMUX_REMAP1, s_pktmoduleSRICCommonConf->tParam_CMUX_REMAP1.ulBulk, ROIC_0);
;;;414    //	SW92400_Set_Register(CMUX_REMAP2, s_pktmoduleSRICCommonConf->tParam_CMUX_REMAP2.ulBulk, ROIC_0);
;;;415    //
;;;416    //	SW92400_Set_Register(PWM_NUM_NI, s_pktmoduleSRICCommonConf->tParam_PWM_NUM_NI.ulBulk, ROIC_0);
;;;417    //	SW92400_Set_Register(CMUX_NI1, s_pktmoduleSRICCommonConf->tParam_CMUX_NI1.ulBulk, ROIC_0);
;;;418    //	SW92400_Set_Register(CMUX_NI2, s_pktmoduleSRICCommonConf->tParam_CMUX_NI2.ulBulk, ROIC_0);
;;;419    //	SW92400_Set_Register(CMUX_NI3, s_pktmoduleSRICCommonConf->tParam_CMUX_NI3.ulBulk, ROIC_0);
;;;420    //	SW92400_Set_Register(CMUX_NI4, s_pktmoduleSRICCommonConf->tParam_CMUX_NI4.ulBulk, ROIC_0);
;;;421    //	SW92400_Set_Register(AFE_DUM, s_pktmoduleSRICCommonConf->tParam_AFE_DUM.ulBulk, ROIC_0);
;;;422    
;;;423    //#if !USED_OPERATION_STAND_ALONE
;;;424    //	{
;;;425    //		tSRIC_CFGR_MD_IDLE_t tParam_MD_IDLE;
;;;426    //		tParam_MD_IDLE.ulBulk = s_pktmoduleSRICCommonConf->tParam_MD_IDLE.ulBulk;
;;;427    //		if(IS_S3_MODE(eSensingMode))
;;;428    //		{
;;;429    //			tParam_MD_IDLE.tBit.sdic_lcd_off = 1;
;;;430    //		}
;;;431    ////		SW92400_Set_Register(MD_IDLE, tParam_MD_IDLE.ulBulk, ROIC_0);
;;;432    //	}
;;;433    
;;;434    //#endif /* !USED_OPERATION_STAND_ALONE */
;;;435    //	SW92400_Set_LocalPenSensingStatusCTRL(0, 0);
;;;436    //	SW92400_Set_Register(PEN_CTRL, R_PEN_CTRL, ROIC_0);
;;;437    //	SW92400_Set_Register(HALF_COPY, s_pktmoduleSRICCommonConf->tParam_HALF_COPY.ulBulk, ROIC_0);
;;;438    }
;;;439    
                          ENDP


                          AREA ||i.SW92400_Set_CMUXOFF||, CODE, READONLY, ALIGN=1

                  SW92400_Set_CMUXOFF PROC
;;;690     */
;;;691    void SW92400_Set_CMUXOFF(bool_t bIsEnable)
000000  4770              BX       lr
;;;692    {
;;;693    //	if (bIsEnable)
;;;694    //	{
;;;695    //		SW92400_Set_Register(g_ROIC_Reg_Val[11].ROIC_addr, 0x0138, ROIC_0);
;;;696    //		SW92400_Set_Register(g_ROIC_Reg_Val[32].ROIC_addr, 0x0600, ROIC_0);
;;;697    //		SW92400_Set_Register(g_ROIC_Reg_Val[63].ROIC_addr, 0xABA8, ROIC_0);
;;;698    //	}
;;;699    //	else
;;;700    //	{
;;;701    //		SW92400_Set_Register(g_ROIC_Reg_Val[11].ROIC_addr, g_ROIC_Reg_Val[11].ROIC0_val, ROIC_0);
;;;702    //		SW92400_Set_Register(g_ROIC_Reg_Val[32].ROIC_addr, g_ROIC_Reg_Val[32].ROIC0_val, ROIC_0);
;;;703    //		SW92400_Set_Register(g_ROIC_Reg_Val[63].ROIC_addr, g_ROIC_Reg_Val[63].ROIC0_val, ROIC_0);
;;;704    //	}
;;;705    }
;;;706    //
                          ENDP


                          AREA ||i.SW92400_Set_FreqConfig||, CODE, READONLY, ALIGN=2

                  SW92400_Set_FreqConfig PROC
;;;708    extern volatile uint8_t HOPP_FLAG;
;;;709    bool_t SW92400_Set_FreqConfig(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;710    {
000002  4604              MOV      r4,r0
;;;711    	if(IS_ACTIVE_MODE(eSensingMode))
000004  f0100f01          TST      r0,#1
000008  d036              BEQ      |L15.120|
;;;712    	{
;;;713    		if(IS_ACTIVE_MODE_FRQ_MAIN(eSensingMode))
;;;714    		{
;;;715    			//delay_us(10000);
;;;716    			//SW92400_Reset(eSensingMode);
;;;717    			//delay_ms(100);
;;;718    			//MSPI_Reset();
;;;719    			//MSPI_Initialize();
;;;720    			//MSPI_Set_TLPMODE();
;;;721    			//SRIC_Stop();
;;;722    			if(HOPP_FLAG == TRUE)
00000a  481c              LDR      r0,|L15.124|
00000c  f0140f02          TST      r4,#2                 ;713
000010  f04f0100          MOV      r1,#0                 ;713
000014  d028              BEQ      |L15.104|
000016  7802              LDRB     r2,[r0,#0]  ; HOPP_FLAG
000018  2a01              CMP      r2,#1
;;;723    					HOPP_FLAG = FALSE;
00001a  bf08              IT       EQ
00001c  7001              STRBEQ   r1,[r0,#0]
00001e  2007              MOVS     r0,#7
                  |L15.32|
000020  1c40              ADDS     r0,r0,#1
000022  2819              CMP      r0,#0x19
000024  dbfc              BLT      |L15.32|
000026  2305              MOVS     r3,#5
                  |L15.40|
000028  f83c2013          LDRH     r2,[r12,r3,LSL #1]
00002c  4291              CMP      r1,r2
00002e  bf04              ITT      EQ
000030  0c08              LSREQ    r0,r1,#16
000032  4290              CMPEQ    r0,r2
000034  d116              BNE      |L15.100|
000036  4291              CMP      r1,r2
000038  bf04              ITT      EQ
00003a  0c08              LSREQ    r0,r1,#16
00003c  4290              CMPEQ    r0,r2
00003e  d111              BNE      |L15.100|
000040  f1030301          ADD      r3,r3,#1
000044  2b19              CMP      r3,#0x19
000046  dbef              BLT      |L15.40|
000048  2101              MOVS     r1,#1
00004a  2020              MOVS     r0,#0x20
00004c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;724    			//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x0);
;;;725    			//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x1);
;;;726    			//SRIC_Stop();
;;;727    			if(SW92400_Hopp110_Init()==FALSE)
;;;728    				return FALSE;
;;;729    			//SRIC_Init(eSensingMode);
;;;730    			SRIC_Run();
;;;731    			MSPI_Set_AITMODE(eSensingMode);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       MSPI_Set_AITMODE
;;;732    			MSPI_ITConfig(ENABLE);
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       MSPI_ITConfig
;;;733    			MSPI_Cmd(ENABLE);
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       MSPI_Cmd
000062  e009              B        |L15.120|
                  |L15.100|
000064  2000              MOVS     r0,#0                 ;728
;;;734    
;;;735    		}
;;;736    		else if(IS_ACTIVE_MODE_FRQ_HOP1(eSensingMode))
;;;737    		{
;;;738    			//delay_us(5000);
;;;739    			//delay_ms(10);
;;;740    			//SW92400_Reset(eSensingMode);
;;;741    			//delay_ms(100);
;;;742    			//delay_us(10000);
;;;743    			//MSPI_Reset();
;;;744    			//MSPI_Initialize();
;;;745    			//MSPI_Set_TLPMODE();
;;;746    			if(HOPP_FLAG == TRUE)
;;;747    					HOPP_FLAG = FALSE;
;;;748    			//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x0);
;;;749    			//while(GPIO->tGPIO_DATA_0._GPIO_TSYNC_IN == 0x1);
;;;750    			//SRIC_Stop();
;;;751    			// if(SW92400_Hopp130_Init()==FALSE	//LBJ_CHECK : Need to change SRIC_Init function...
;;;752    				return FALSE;
;;;753    			//SW92400_Hopp1_Init();
;;;754    			SRIC_Run();
;;;755    			MSPI_Set_AITMODE(eSensingMode);
;;;756    			MSPI_ITConfig(ENABLE);
;;;757    			MSPI_Cmd(ENABLE);
;;;758    
;;;759    		}
;;;760    		else if(IS_ACTIVE_MODE_FRQ_HOP2(eSensingMode))
;;;761    		{
;;;762    		}
;;;763    	}
;;;764    //	else
;;;765    //	{
;;;766    //		SW92400_Set_Register(g_ROIC_Reg_Val[63].ROIC_addr, g_ROIC_Reg_Val[63].ROIC0_val, ROIC_0);
;;;767    //	}
;;;768    	return TRUE;
;;;769    }
000066  bd10              POP      {r4,pc}
                  |L15.104|
000068  f0140f04          TST      r4,#4                 ;736
00006c  d004              BEQ      |L15.120|
00006e  7802              LDRB     r2,[r0,#0]            ;746  ; HOPP_FLAG
000070  2a01              CMP      r2,#1                 ;746
000072  bf08              IT       EQ                    ;747
000074  7001              STRBEQ   r1,[r0,#0]            ;747
000076  e7f5              B        |L15.100|
                  |L15.120|
000078  2001              MOVS     r0,#1                 ;768
00007a  bd10              POP      {r4,pc}
;;;770    
                          ENDP

                  |L15.124|
                          DCD      HOPP_FLAG

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  databuf
                          %        12

                          AREA ||.data||, DATA, ALIGN=0

                  g_ROIC_Reg_Val
000000  00001000          DCB      0x00,0x00,0x10,0x00
000004  10000200          DCB      0x10,0x00,0x02,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  040092aa          DCB      0x04,0x00,0x92,0xaa
000010  92aa0600          DCB      0x92,0xaa,0x06,0x00
000014  7f357f35          DCB      0x7f,0x35,0x7f,0x35
000018  08005793          DCB      0x08,0x00,0x57,0x93
00001c  57930a00          DCB      0x57,0x93,0x0a,0x00
000020  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000024  0c000c03          DCB      0x0c,0x00,0x0c,0x03
000028  0c030e00          DCB      0x0c,0x03,0x0e,0x00
00002c  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000030  10000c03          DCB      0x10,0x00,0x0c,0x03
000034  0c031200          DCB      0x0c,0x03,0x12,0x00
000038  0c030c03          DCB      0x0c,0x03,0x0c,0x03
00003c  14000c03          DCB      0x14,0x00,0x0c,0x03
000040  0c031600          DCB      0x0c,0x03,0x16,0x00
000044  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000048  18000c03          DCB      0x18,0x00,0x0c,0x03
00004c  0c031a00          DCB      0x0c,0x03,0x1a,0x00
000050  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000054  1c000c03          DCB      0x1c,0x00,0x0c,0x03
000058  0c031e00          DCB      0x0c,0x03,0x1e,0x00
00005c  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000060  20000c03          DCB      0x20,0x00,0x0c,0x03
000064  0c032200          DCB      0x0c,0x03,0x22,0x00
000068  0c030c03          DCB      0x0c,0x03,0x0c,0x03
00006c  24000c03          DCB      0x24,0x00,0x0c,0x03
000070  0c032600          DCB      0x0c,0x03,0x26,0x00
000074  0c030c03          DCB      0x0c,0x03,0x0c,0x03
000078  28000007          DCB      0x28,0x00,0x00,0x07
00007c  00072a00          DCB      0x00,0x07,0x2a,0x00
000080  00070007          DCB      0x00,0x07,0x00,0x07
000084  2c000000          DCB      0x2c,0x00,0x00,0x00
000088  00002e00          DCB      0x00,0x00,0x2e,0x00
00008c  05010501          DCB      0x05,0x01,0x05,0x01
000090  30000e07          DCB      0x30,0x00,0x0e,0x07
000094  0e073200          DCB      0x0e,0x07,0x32,0x00
000098  00b100b1          DCB      0x00,0xb1,0x00,0xb1
00009c  34004a01          DCB      0x34,0x00,0x4a,0x01
0000a0  4a013600          DCB      0x4a,0x01,0x36,0x00
0000a4  40554055          DCB      0x40,0x55,0x40,0x55
0000a8  38000040          DCB      0x38,0x00,0x00,0x40
0000ac  00403a00          DCB      0x00,0x40,0x3a,0x00
0000b0  40404040          DCB      0x40,0x40,0x40,0x40
0000b4  3c004040          DCB      0x3c,0x00,0x40,0x40
0000b8  40403e00          DCB      0x40,0x40,0x3e,0x00
0000bc  e803e803          DCB      0xe8,0x03,0xe8,0x03
0000c0  40004c04          DCB      0x40,0x00,0x4c,0x04
0000c4  4c044200          DCB      0x4c,0x04,0x42,0x00
0000c8  d007d007          DCB      0xd0,0x07,0xd0,0x07
0000cc  44003408          DCB      0x44,0x00,0x34,0x08
0000d0  34084600          DCB      0x34,0x08,0x46,0x00
0000d4  b80bb80b          DCB      0xb8,0x0b,0xb8,0x0b
0000d8  48001c0c          DCB      0x48,0x00,0x1c,0x0c
0000dc  1c0c4a00          DCB      0x1c,0x0c,0x4a,0x00
0000e0  a00fa00f          DCB      0xa0,0x0f,0xa0,0x0f
0000e4  4c00ff0f          DCB      0x4c,0x00,0xff,0x0f
0000e8  ff0f4e00          DCB      0xff,0x0f,0x4e,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  50000000          DCB      0x50,0x00,0x00,0x00
0000f4  00005200          DCB      0x00,0x00,0x52,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  54000000          DCB      0x54,0x00,0x00,0x00
000100  00005600          DCB      0x00,0x00,0x56,0x00
000104  40204020          DCB      0x40,0x20,0x40,0x20
000108  58001100          DCB      0x58,0x00,0x11,0x00
00010c  11005a00          DCB      0x11,0x00,0x5a,0x00
000110  40404040          DCB      0x40,0x40,0x40,0x40
000114  5c000100          DCB      0x5c,0x00,0x01,0x00
000118  01005e00          DCB      0x01,0x00,0x5e,0x00
00011c  11001100          DCB      0x11,0x00,0x11,0x00
000120  60000200          DCB      0x60,0x00,0x02,0x00
000124  02006200          DCB      0x02,0x00,0x62,0x00
000128  80068006          DCB      0x80,0x06,0x80,0x06
00012c  64002400          DCB      0x64,0x00,0x24,0x00
000130  24006600          DCB      0x24,0x00,0x66,0x00
000134  080f080f          DCB      0x08,0x0f,0x08,0x0f
000138  68003200          DCB      0x68,0x00,0x32,0x00
00013c  32006a00          DCB      0x32,0x00,0x6a,0x00
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  6c000000          DCB      0x6c,0x00,0x00,0x00
000148  00006e00          DCB      0x00,0x00,0x6e,0x00
00014c  90019001          DCB      0x90,0x01,0x90,0x01
000150  70000000          DCB      0x70,0x00,0x00,0x00
000154  00007200          DCB      0x00,0x00,0x72,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  7400ffff          DCB      0x74,0x00,0xff,0xff
000160  ffff7600          DCB      0xff,0xff,0x76,0x00
000164  ffffffff          DCB      0xff,0xff,0xff,0xff

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  pSRIC_REG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Module\\SRIC\\sric.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_sric_c_8ecb925b____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_sric_c_8ecb925b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_sric_c_8ecb925b____REVSH|
#line 402
|__asm___6_sric_c_8ecb925b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_sric_c_8ecb925b____RRX|
#line 587
|__asm___6_sric_c_8ecb925b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
