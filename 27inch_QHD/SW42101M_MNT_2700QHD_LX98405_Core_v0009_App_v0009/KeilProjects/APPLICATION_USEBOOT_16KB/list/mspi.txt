; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\mspi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\mspi.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\mspi.crf ..\..\Hal\spi\mspi.c]
                          THUMB

                          AREA ||i.MSPI_Cmd||, CODE, READONLY, ALIGN=2

                  MSPI_Cmd PROC
;;;612    
;;;613    void MSPI_Cmd(FunctionalState NewState)
000000  4903              LDR      r1,|L1.16|
;;;614    {	
;;;615    	if(NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;616    	{
;;;617    		MSPI->SPISTART = 0x3F;
000004  bf18              IT       NE
000006  203f              MOVNE    r0,#0x3f
000008  f8c100d4          STR      r0,[r1,#0xd4]
;;;618    	}
;;;619    	else
;;;620    	{
;;;621    		MSPI->SPISTART = 0;
;;;622    	}
;;;623    }
00000c  4770              BX       lr
;;;624    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40005000

                          AREA ||i.MSPI_CommandWrite||, CODE, READONLY, ALIGN=2

                  MSPI_CommandWrite PROC
;;;812    
;;;813    void MSPI_CommandWrite( uint32_t write_control, uint32_t pen_mode, uint16_t local_position)
000000  0300              LSLS     r0,r0,#12
;;;814    {
;;;815    	int i;
;;;816    	for (i = 0; i < MSPI_NUM ; i++)
;;;817    	{
;;;818    		MSPI_BUF->ReadCommand[i].Command = ( (write_control<<12) | (pen_mode<<6) | (local_position<<0) | MSPI_READ|MSPI_BURST);
000002  ea401081          ORR      r0,r0,r1,LSL #6
000006  4906              LDR      r1,|L2.32|
000008  4310              ORRS     r0,r0,r2
00000a  f4404000          ORR      r0,r0,#0x8000
00000e  8008              STRH     r0,[r1,#0]
000010  4904              LDR      r1,|L2.36|
000012  8008              STRH     r0,[r1,#0]
000014  4904              LDR      r1,|L2.40|
000016  8008              STRH     r0,[r1,#0]
000018  4904              LDR      r1,|L2.44|
00001a  8008              STRH     r0,[r1,#0]
;;;819    	}
;;;820    
;;;821    }
00001c  4770              BX       lr
;;;822    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x20020864
                  |L2.36|
                          DCD      0x20020a54
                  |L2.40|
                          DCD      0x20020c44
                  |L2.44|
                          DCD      0x20020e34

                          AREA ||i.MSPI_EachRegisterWrite||, CODE, READONLY, ALIGN=2

                  MSPI_EachRegisterWrite PROC
;;;824    
;;;825    void MSPI_EachRegisterWrite( uint32_t Addr, uint32_t * pvalue, eROIC_Read_Option_t eOption)
000000  b430              PUSH     {r4,r5}
;;;826    {
;;;827    	uint32_t *pLengthAddr, *pMisoAddr, *pMosiAddr;
;;;828    	uint8_t iMspi;
;;;829      uint32_t pvalue_sel[4];
;;;830    	
;;;831    	uint32_t ulAddr ;
;;;832    	
;;;833    		ulAddr = Addr;
;;;834    	if(eOption == MSPI_READ_SM1)
000002  f8d1c008          LDR      r12,[r1,#8]
000006  698d              LDR      r5,[r1,#0x18]
000008  690c              LDR      r4,[r1,#0x10]
00000a  680b              LDR      r3,[r1,#0]
00000c  2a02              CMP      r2,#2
00000e  bf08              IT       EQ
000010  f5005080          ADDEQ    r0,r0,#0x1000
;;;835    	{
;;;836    		ulAddr += 0x1 << 12 ;  // Select SM=1
;;;837    		pvalue_sel[0] = pvalue[0]; // SRIC1
;;;838    		pvalue_sel[1] = pvalue[2]; // SRIC3
;;;839    		pvalue_sel[2] = pvalue[4]; // SRIC5
;;;840    		pvalue_sel[3] = pvalue[6]; // SRIC7
;;;841    	}
;;;842    	else{
;;;843    		pvalue_sel[0] = pvalue[0]; // SRIC2
;;;844    		pvalue_sel[1] = pvalue[2]; // SRIC4
;;;845    		pvalue_sel[2] = pvalue[4]; // SRIC6
;;;846    		pvalue_sel[3] = pvalue[6]; // SRIC8
;;;847    	}
;;;848    	
;;;849    	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;850    	{
;;;851    //		MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr ;
;;;852    //		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nBulk = 1;
;;;853    //		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nWrite = 0;
;;;854    //		MSPI_BUF->SricRegWriteBuffer[iMspi].Data = pvalue[iMspi];
;;;855    		
;;;856    		
;;;857    		MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = ulAddr;
000014  4949              LDR      r1,|L3.316|
000016  8008              STRH     r0,[r1,#0]
;;;858    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.Burst_Len = 1;
000018  888a              LDRH     r2,[r1,#4]
00001a  f422727e          BIC      r2,r2,#0x3f8
00001e  3208              ADDS     r2,r2,#8
000020  808a              STRH     r2,[r1,#4]
;;;859    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
000022  888a              LDRH     r2,[r1,#4]
000024  f4226240          BIC      r2,r2,#0xc00
000028  808a              STRH     r2,[r1,#4]
;;;860    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.DualRxEn = 0;
00002a  888a              LDRH     r2,[r1,#4]
00002c  f4225200          BIC      r2,r2,#0x2000
000030  808a              STRH     r2,[r1,#4]
;;;861    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ChkSum = 0;
000032  888a              LDRH     r2,[r1,#4]
000034  f4224280          BIC      r2,r2,#0x4000
000038  808a              STRH     r2,[r1,#4]
;;;862    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
00003a  888a              LDRH     r2,[r1,#4]
00003c  f4224200          BIC      r2,r2,#0x8000
000040  808a              STRH     r2,[r1,#4]
;;;863    		
;;;864    		
;;;865    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_M = pvalue_sel[iMspi] >> 16;
000042  0c1a              LSRS     r2,r3,#16
000044  810a              STRH     r2,[r1,#8]
;;;866    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_L = pvalue_sel[iMspi] & 0xFFFF;
000046  818b              STRH     r3,[r1,#0xc]
000048  8208              STRH     r0,[r1,#0x10]         ;857
00004a  8a8a              LDRH     r2,[r1,#0x14]         ;858
00004c  f422727e          BIC      r2,r2,#0x3f8          ;858
000050  3208              ADDS     r2,r2,#8              ;858
000052  828a              STRH     r2,[r1,#0x14]         ;858
000054  8a8a              LDRH     r2,[r1,#0x14]         ;859
000056  f4226240          BIC      r2,r2,#0xc00          ;859
00005a  828a              STRH     r2,[r1,#0x14]         ;859
00005c  8a8a              LDRH     r2,[r1,#0x14]         ;860
00005e  f4225200          BIC      r2,r2,#0x2000         ;860
000062  828a              STRH     r2,[r1,#0x14]         ;860
000064  8a8a              LDRH     r2,[r1,#0x14]         ;861
000066  f4224280          BIC      r2,r2,#0x4000         ;861
00006a  828a              STRH     r2,[r1,#0x14]         ;861
00006c  8a8a              LDRH     r2,[r1,#0x14]         ;862
00006e  f4224200          BIC      r2,r2,#0x8000         ;862
000072  828a              STRH     r2,[r1,#0x14]         ;862
000074  ea4f421c          LSR      r2,r12,#16            ;865
000078  830a              STRH     r2,[r1,#0x18]         ;865
00007a  f8a1c01c          STRH     r12,[r1,#0x1c]
00007e  8408              STRH     r0,[r1,#0x20]         ;857
000080  8c8a              LDRH     r2,[r1,#0x24]         ;858
000082  f422727e          BIC      r2,r2,#0x3f8          ;858
000086  3208              ADDS     r2,r2,#8              ;858
000088  848a              STRH     r2,[r1,#0x24]         ;858
00008a  8c8a              LDRH     r2,[r1,#0x24]         ;859
00008c  f4226240          BIC      r2,r2,#0xc00          ;859
000090  848a              STRH     r2,[r1,#0x24]         ;859
000092  8c8a              LDRH     r2,[r1,#0x24]         ;860
000094  f4225200          BIC      r2,r2,#0x2000         ;860
000098  848a              STRH     r2,[r1,#0x24]         ;860
00009a  8c8a              LDRH     r2,[r1,#0x24]         ;861
00009c  f4224280          BIC      r2,r2,#0x4000         ;861
0000a0  848a              STRH     r2,[r1,#0x24]         ;861
0000a2  8c8a              LDRH     r2,[r1,#0x24]         ;862
0000a4  f4224200          BIC      r2,r2,#0x8000         ;862
0000a8  848a              STRH     r2,[r1,#0x24]         ;862
0000aa  0c22              LSRS     r2,r4,#16             ;865
0000ac  850a              STRH     r2,[r1,#0x28]         ;865
0000ae  858c              STRH     r4,[r1,#0x2c]
0000b0  8608              STRH     r0,[r1,#0x30]         ;857
0000b2  8e88              LDRH     r0,[r1,#0x34]         ;858
0000b4  f420707e          BIC      r0,r0,#0x3f8          ;858
0000b8  3008              ADDS     r0,r0,#8              ;858
0000ba  8688              STRH     r0,[r1,#0x34]         ;858
0000bc  8e88              LDRH     r0,[r1,#0x34]         ;859
0000be  f4206040          BIC      r0,r0,#0xc00          ;859
0000c2  8688              STRH     r0,[r1,#0x34]         ;859
0000c4  8e88              LDRH     r0,[r1,#0x34]         ;860
0000c6  f4205000          BIC      r0,r0,#0x2000         ;860
0000ca  8688              STRH     r0,[r1,#0x34]         ;860
0000cc  8e88              LDRH     r0,[r1,#0x34]         ;861
0000ce  f4204080          BIC      r0,r0,#0x4000         ;861
0000d2  8688              STRH     r0,[r1,#0x34]         ;861
0000d4  8e88              LDRH     r0,[r1,#0x34]         ;862
0000d6  f4204000          BIC      r0,r0,#0x8000         ;862
0000da  8688              STRH     r0,[r1,#0x34]         ;862
0000dc  0c28              LSRS     r0,r5,#16             ;865
0000de  8708              STRH     r0,[r1,#0x38]         ;865
0000e0  878d              STRH     r5,[r1,#0x3c]
;;;867    		
;;;868    		
;;;869    	}
;;;870    
;;;871    #ifdef _DV_SAMPLE_
;;;872    	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;
0000e2  4817              LDR      r0,|L3.320|
0000e4  2104              MOVS     r1,#4
0000e6  f8c010b0          STR      r1,[r0,#0xb0]
;;;873    	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;
0000ea  f8c010b4          STR      r1,[r0,#0xb4]
;;;874    	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;
0000ee  f8c010b8          STR      r1,[r0,#0xb8]
;;;875    	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;
0000f2  f8c010bc          STR      r1,[r0,#0xbc]
;;;876    	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;
0000f6  f8c010c0          STR      r1,[r0,#0xc0]
;;;877    	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;
0000fa  f8c010c4          STR      r1,[r0,#0xc4]
;;;878    
;;;879    	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[1]));
0000fe  f8c010e4          STR      r1,[r0,#0xe4]
;;;880    	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[0])<<16 | 0x0000);
000102  2100              MOVS     r1,#0
000104  f8c010e8          STR      r1,[r0,#0xe8]
;;;881    	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[3]));
000108  4a0e              LDR      r2,|L3.324|
00010a  f8c020ec          STR      r2,[r0,#0xec]
;;;882    
;;;883    	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[1]));
00010e  2212              MOVS     r2,#0x12
000110  f8c020d8          STR      r2,[r0,#0xd8]
;;;884    	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[0])<<16 | 0x0000);
000114  f44f1280          MOV      r2,#0x100000
000118  f8c020dc          STR      r2,[r0,#0xdc]
;;;885    	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[3]));
00011c  4a0a              LDR      r2,|L3.328|
00011e  f8c020e0          STR      r2,[r0,#0xe0]
;;;886    
;;;887    #endif
;;;888    	MSPI->SINTRMSCR = DISABLE;
000122  6181              STR      r1,[r0,#0x18]
;;;889    
;;;890    	MSPI->SPISTART = BIT5|BIT4|BIT3|BIT2|BIT1|BIT0;
000124  213f              MOVS     r1,#0x3f
000126  f8c010d4          STR      r1,[r0,#0xd4]
                  |L3.298|
00012a  6901              LDR      r1,[r0,#0x10]
00012c  f0110f40          TST      r1,#0x40
000130  d0fb              BEQ      |L3.298|
000132  2101              MOVS     r1,#1
000134  61c1              STR      r1,[r0,#0x1c]
;;;891    	MSPI_IntCLR();
;;;892    }
000136  bc30              POP      {r4,r5}
000138  4770              BX       lr
;;;893    
                          ENDP

00013a  0000              DCW      0x0000
                  |L3.316|
                          DCD      0x20020000
                  |L3.320|
                          DCD      0x40005000
                  |L3.324|
                          DCD      0x0008000c
                  |L3.328|
                          DCD      0x00140016

                          AREA ||i.MSPI_GPIO_Init||, CODE, READONLY, ALIGN=2

                  MSPI_GPIO_Init PROC
;;;1283   
;;;1284   void MSPI_GPIO_Init(void)
000000  48a5              LDR      r0,|L4.664|
;;;1285   {
;;;1286   	/////////////////////////////////////////////////////////////////////////////////
;;;1287   	// MSPI GPIO Initialization                
;;;1288   	/////////////////////////////////////////////////////////////////////////////////
;;;1289   
;;;1290   #if MSPI_GPIO_SRIC0_EN
;;;1291   	/*
;;;1292   	 * 1111 PANNEL SRIC 5 (Pannel SRIC 1踰덈룞�옉)
;;;1293   	 */
;;;1294   	GPIO->tGPIO_AFIO_0.tBit.GPA00 = 0x1; // 0:GPIO, 1:MSPI0_MST_SSN
000002  f8501f60          LDR      r1,[r0,#0x60]!
000006  f0210103          BIC      r1,r1,#3
00000a  1c49              ADDS     r1,r1,#1
00000c  f8401948          STR      r1,[r0],#-0x48
;;;1295   	GPIO->tGPIO_AFIO_0.tBit.GPA01 = 0x1; // 0:GPIO, 1:MSPI0_MST_SCLK
000010  6c81              LDR      r1,[r0,#0x48]
000012  f021010c          BIC      r1,r1,#0xc
000016  1d09              ADDS     r1,r1,#4
000018  6481              STR      r1,[r0,#0x48]
;;;1296   	GPIO->tGPIO_AFIO_0.tBit.GPA02 = 0x1; // 0:GPIO, 1:MSPI0_MST_MOSI
00001a  6c81              LDR      r1,[r0,#0x48]
00001c  f0210130          BIC      r1,r1,#0x30
000020  3110              ADDS     r1,r1,#0x10
000022  6481              STR      r1,[r0,#0x48]
;;;1297   	GPIO->tGPIO_AFIO_0.tBit.GPA03 = 0x1; // 0:GPIO, 1:MSPI0_MST_MISO
000024  6c81              LDR      r1,[r0,#0x48]
000026  f02101c0          BIC      r1,r1,#0xc0
00002a  3140              ADDS     r1,r1,#0x40
00002c  6481              STR      r1,[r0,#0x48]
;;;1298   #else /* MSPI_GPIO_SRIC0_EN */
;;;1299   	GPIO->tGPIO_AFIO_0.tBit.GPA00 = 0x0; // 0:GPIO, 1:MSPI0_MST_SSN
;;;1300   	GPIO->tGPIO_AFIO_0.tBit.GPA01 = 0x0; // 0:GPIO, 1:MSPI0_MST_SCLK
;;;1301   	GPIO->tGPIO_AFIO_0.tBit.GPA02 = 0x0; // 0:GPIO, 1:MSPI0_MST_MOSI
;;;1302   	GPIO->tGPIO_AFIO_0.tBit.GPA03 = 0x0; // 0:GPIO, 1:MSPI0_MST_MISO
;;;1303   
;;;1304   	GPIO->tGPIO_DIR_0.tBit.GPA00 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1305   	GPIO->tGPIO_DIR_0.tBit.GPA01 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1306   	GPIO->tGPIO_DIR_0.tBit.GPA02 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1307   	GPIO->tGPIO_DIR_0.tBit.GPA03 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1308   
;;;1309   	GPIO->tGPIO_DATA_0.tBit.GPA00 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1310   	GPIO->tGPIO_DATA_0.tBit.GPA01 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1311   	GPIO->tGPIO_DATA_0.tBit.GPA02 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1312   	GPIO->tGPIO_DATA_0.tBit.GPA03 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1313   
;;;1314   	GPIO->tGPIO_PD_0.tBit.GPA00 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1315   	GPIO->tGPIO_PD_0.tBit.GPA01 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1316   	GPIO->tGPIO_PD_0.tBit.GPA02 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1317   	GPIO->tGPIO_PD_0.tBit.GPA03 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1318   #endif /* MSPI_GPIO_SRIC0_EN */
;;;1319   
;;;1320   #if MSPI_GPIO_SRIC1_EN
;;;1321   	/*
;;;1322   	 * 2222 PANNEL SRIC 6 (�룞�옉 X)
;;;1323   	 */
;;;1324   	GPIO->tGPIO_AFIO_0.tBit.GPA04 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
00002e  6c81              LDR      r1,[r0,#0x48]
000030  f4217140          BIC      r1,r1,#0x300
000034  f5017180          ADD      r1,r1,#0x100
000038  6481              STR      r1,[r0,#0x48]
;;;1325   	GPIO->tGPIO_AFIO_0.tBit.GPA05 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
00003a  6c81              LDR      r1,[r0,#0x48]
00003c  f4216140          BIC      r1,r1,#0xc00
000040  f5016180          ADD      r1,r1,#0x400
000044  6481              STR      r1,[r0,#0x48]
;;;1326   	GPIO->tGPIO_AFIO_0.tBit.GPA06 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
000046  6c81              LDR      r1,[r0,#0x48]
000048  f4215140          BIC      r1,r1,#0x3000
00004c  f5015180          ADD      r1,r1,#0x1000
000050  6481              STR      r1,[r0,#0x48]
;;;1327   	GPIO->tGPIO_AFIO_0.tBit.GPA07 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
000052  6c81              LDR      r1,[r0,#0x48]
000054  f4214140          BIC      r1,r1,#0xc000
000058  f5014180          ADD      r1,r1,#0x4000
00005c  6481              STR      r1,[r0,#0x48]
;;;1328   #else /* MSPI_GPIO_SRIC1_EN */
;;;1329   	/*
;;;1330   	 * 2222 PANNEL SRIC 6 (�룞�옉 X)
;;;1331   	 */
;;;1332   	GPIO->tGPIO_AFIO_0.tBit.GPA04 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1333   	GPIO->tGPIO_AFIO_0.tBit.GPA05 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1334   	GPIO->tGPIO_AFIO_0.tBit.GPA06 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1335   	GPIO->tGPIO_AFIO_0.tBit.GPA07 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1336   
;;;1337   	GPIO->tGPIO_DIR_0.tBit.GPA04 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1338   	GPIO->tGPIO_DIR_0.tBit.GPA05 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1339   	GPIO->tGPIO_DIR_0.tBit.GPA06 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1340   	GPIO->tGPIO_DIR_0.tBit.GPA07 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1341   
;;;1342   	GPIO->tGPIO_DATA_0.tBit.GPA04 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1343   	GPIO->tGPIO_DATA_0.tBit.GPA05 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1344   	GPIO->tGPIO_DATA_0.tBit.GPA06 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1345   	GPIO->tGPIO_DATA_0.tBit.GPA07 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1346   
;;;1347   	GPIO->tGPIO_PD_0.tBit.GPA04 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1348   	GPIO->tGPIO_PD_0.tBit.GPA05 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1349   	GPIO->tGPIO_PD_0.tBit.GPA06 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1350   	GPIO->tGPIO_PD_0.tBit.GPA07 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1351   #endif /* MSPI_GPIO_SRIC1_EN */
;;;1352   
;;;1353   #if MSPI_GPIO_SRIC2_EN
;;;1354   	/*
;;;1355   	 * 3333 PANNEL SRIC 1 (�룞�옉X)
;;;1356   	 */
;;;1357   	GPIO->tGPIO_AFIO_0.tBit.GPA08 = 0x1; // 0:GPIO, 1:MSPI2_MST_SSN
00005e  6c81              LDR      r1,[r0,#0x48]
000060  f4213140          BIC      r1,r1,#0x30000
000064  f5013180          ADD      r1,r1,#0x10000
000068  6481              STR      r1,[r0,#0x48]
;;;1358   	GPIO->tGPIO_AFIO_0.tBit.GPA09 = 0x1; // 0:GPIO, 1:MSPI2_MST_SCLK
00006a  6c81              LDR      r1,[r0,#0x48]
00006c  f4212140          BIC      r1,r1,#0xc0000
000070  f5012180          ADD      r1,r1,#0x40000
000074  6481              STR      r1,[r0,#0x48]
;;;1359   	GPIO->tGPIO_AFIO_0.tBit.GPA10 = 0x1; // 0:GPIO, 1:MSPI2_MST_MOSI
000076  6c81              LDR      r1,[r0,#0x48]
000078  f4211140          BIC      r1,r1,#0x300000
00007c  f5011180          ADD      r1,r1,#0x100000
000080  6481              STR      r1,[r0,#0x48]
;;;1360   	GPIO->tGPIO_AFIO_0.tBit.GPA11 = 0x1; // 0:GPIO, 1:MSPI2_MST_MISO
000082  6c81              LDR      r1,[r0,#0x48]
000084  f4210140          BIC      r1,r1,#0xc00000
000088  f5010180          ADD      r1,r1,#0x400000
00008c  6481              STR      r1,[r0,#0x48]
;;;1361   #else /* MSPI_GPIO_SRIC2_EN */
;;;1362   	/*
;;;1363   	 * 3333 PANNEL SRIC 1 (�룞�옉X)
;;;1364   	 */
;;;1365   	GPIO->tGPIO_AFIO_0.tBit.GPA08 = 0x0; // 0:GPIO, 1:MSPI2_MST_SSN
;;;1366   	GPIO->tGPIO_AFIO_0.tBit.GPA09 = 0x0; // 0:GPIO, 1:MSPI2_MST_SCLK
;;;1367   	GPIO->tGPIO_AFIO_0.tBit.GPA10 = 0x0; // 0:GPIO, 1:MSPI2_MST_MOSI
;;;1368   	GPIO->tGPIO_AFIO_0.tBit.GPA11 = 0x0; // 0:GPIO, 1:MSPI2_MST_MISO
;;;1369   
;;;1370   	GPIO->tGPIO_DIR_0.tBit.GPA08 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1371   	GPIO->tGPIO_DIR_0.tBit.GPA09 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1372   	GPIO->tGPIO_DIR_0.tBit.GPA10 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1373   	GPIO->tGPIO_DIR_0.tBit.GPA11 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1374   
;;;1375   	GPIO->tGPIO_DATA_0.tBit.GPA08 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1376   	GPIO->tGPIO_DATA_0.tBit.GPA09 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1377   	GPIO->tGPIO_DATA_0.tBit.GPA10 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1378   	GPIO->tGPIO_DATA_0.tBit.GPA11 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1379   
;;;1380   	GPIO->tGPIO_PD_0.tBit.GPA08 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1381   	GPIO->tGPIO_PD_0.tBit.GPA09 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1382   	GPIO->tGPIO_PD_0.tBit.GPA10 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1383   	GPIO->tGPIO_PD_0.tBit.GPA11 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1384   #endif /* MSPI_GPIO_SRIC2_EN */
;;;1385   
;;;1386   #if MSPI_GPIO_SRIC3_EN
;;;1387   	/*
;;;1388   	 * 4444 PANNEL SRIC 4 (�룞�옉X)
;;;1389   	 */
;;;1390   	GPIO->tGPIO_AFIO_0.tBit.GPA12 = 0x1; // 0:GPIO, 1:MSPI3_MST_SSN
00008e  6c81              LDR      r1,[r0,#0x48]
000090  f0217140          BIC      r1,r1,#0x3000000
000094  f1017180          ADD      r1,r1,#0x1000000
000098  6481              STR      r1,[r0,#0x48]
;;;1391   	GPIO->tGPIO_AFIO_0.tBit.GPA13 = 0x1; // 0:GPIO, 1:MSPI3_MST_SCLK
00009a  6c81              LDR      r1,[r0,#0x48]
00009c  f0216140          BIC      r1,r1,#0xc000000
0000a0  f1016180          ADD      r1,r1,#0x4000000
0000a4  6481              STR      r1,[r0,#0x48]
;;;1392   	GPIO->tGPIO_AFIO_0.tBit.GPA14 = 0x1; // 0:GPIO, 1:MSPI3_MST_MOSI
0000a6  6c81              LDR      r1,[r0,#0x48]
0000a8  f0215140          BIC      r1,r1,#0x30000000
0000ac  f1015180          ADD      r1,r1,#0x10000000
0000b0  6481              STR      r1,[r0,#0x48]
;;;1393   	GPIO->tGPIO_AFIO_0.tBit.GPA15 = 0x1; // 0:GPIO, 1:MSPI3_MST_MISO
0000b2  6c81              LDR      r1,[r0,#0x48]
0000b4  f0214140          BIC      r1,r1,#0xc0000000
0000b8  f1014180          ADD      r1,r1,#0x40000000
0000bc  6481              STR      r1,[r0,#0x48]
;;;1394   #else /* MSPI_GPIO_SRIC3_EN */
;;;1395   	/*
;;;1396   	 * 4444 PANNEL SRIC 4
;;;1397   	 */
;;;1398   	GPIO->tGPIO_AFIO_0.tBit.GPA12 = 0x0; // 0:GPIO, 1:MSPI3_MST_SSN
;;;1399   	GPIO->tGPIO_AFIO_0.tBit.GPA13 = 0x0; // 0:GPIO, 1:MSPI3_MST_SCLK
;;;1400   	GPIO->tGPIO_AFIO_0.tBit.GPA14 = 0x0; // 0:GPIO, 1:MSPI3_MST_MOSI
;;;1401   	GPIO->tGPIO_AFIO_0.tBit.GPA15 = 0x0; // 0:GPIO, 1:MSPI3_MST_MISO
;;;1402   
;;;1403   	GPIO->tGPIO_DIR_0.tBit.GPA12 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1404   	GPIO->tGPIO_DIR_0.tBit.GPA13 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1405   	GPIO->tGPIO_DIR_0.tBit.GPA14 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1406   	GPIO->tGPIO_DIR_0.tBit.GPA15 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1407   
;;;1408   	GPIO->tGPIO_DATA_0.tBit.GPA12 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1409   	GPIO->tGPIO_DATA_0.tBit.GPA13 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1410   	GPIO->tGPIO_DATA_0.tBit.GPA14 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1411   	GPIO->tGPIO_DATA_0.tBit.GPA15 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1412   
;;;1413   	GPIO->tGPIO_PD_0.tBit.GPA12 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1414   	GPIO->tGPIO_PD_0.tBit.GPA13 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1415   	GPIO->tGPIO_PD_0.tBit.GPA14 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1416   	GPIO->tGPIO_PD_0.tBit.GPA15 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1417   #endif /* MSPI_GPIO_SRIC3_EN */
;;;1418   
;;;1419   #if MSPI_GPIO_SRIC4_EN
;;;1420   	/*
;;;1421   	 * 55555 PANNEL SRIC 2 (�룞�옉 X)
;;;1422   	 */
;;;1423   	GPIO->tGPIO_AFIO_1.tBit.GPA16 = 0x1; // 0:GPIO, 1:MSPI4_MST_SSN
0000be  6cc1              LDR      r1,[r0,#0x4c]
0000c0  f0210103          BIC      r1,r1,#3
0000c4  1c49              ADDS     r1,r1,#1
0000c6  64c1              STR      r1,[r0,#0x4c]
;;;1424   	GPIO->tGPIO_AFIO_1.tBit.GPA17 = 0x1; // 0:GPIO, 1:MSPI4_MST_SCLK
0000c8  6cc1              LDR      r1,[r0,#0x4c]
0000ca  f021010c          BIC      r1,r1,#0xc
0000ce  1d09              ADDS     r1,r1,#4
0000d0  64c1              STR      r1,[r0,#0x4c]
;;;1425   	GPIO->tGPIO_AFIO_1.tBit.GPA18 = 0x1; // 0:GPIO, 1:MSPI4_MST_MOSI
0000d2  6cc1              LDR      r1,[r0,#0x4c]
0000d4  f0210130          BIC      r1,r1,#0x30
0000d8  3110              ADDS     r1,r1,#0x10
0000da  64c1              STR      r1,[r0,#0x4c]
;;;1426   	GPIO->tGPIO_AFIO_1.tBit.GPA19 = 0x1; // 0:GPIO, 1:MSPI4_MST_MISO
0000dc  6cc1              LDR      r1,[r0,#0x4c]
0000de  f02101c0          BIC      r1,r1,#0xc0
0000e2  3140              ADDS     r1,r1,#0x40
0000e4  64c1              STR      r1,[r0,#0x4c]
;;;1427   #else /* MSPI_GPIO_SRIC4_EN */
;;;1428   	/*
;;;1429   	 * 55555 PANNEL SRIC 2
;;;1430   	 */
;;;1431   	GPIO->tGPIO_AFIO_1.tBit.GPA16 = 0x0; // 0:GPIO, 1:MSPI4_MST_SSN
;;;1432   	GPIO->tGPIO_AFIO_1.tBit.GPA17 = 0x0; // 0:GPIO, 1:MSPI4_MST_SCLK
;;;1433   	GPIO->tGPIO_AFIO_1.tBit.GPA18 = 0x0; // 0:GPIO, 1:MSPI4_MST_MOSI
;;;1434   	GPIO->tGPIO_AFIO_1.tBit.GPA19 = 0x0; // 0:GPIO, 1:MSPI4_MST_MISO
;;;1435   
;;;1436   	GPIO->tGPIO_DIR_0.tBit.GPA16 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1437   	GPIO->tGPIO_DIR_0.tBit.GPA17 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1438   	GPIO->tGPIO_DIR_0.tBit.GPA18 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1439   	GPIO->tGPIO_DIR_0.tBit.GPA19 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1440   
;;;1441   	GPIO->tGPIO_DATA_0.tBit.GPA16 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1442   	GPIO->tGPIO_DATA_0.tBit.GPA17 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1443   	GPIO->tGPIO_DATA_0.tBit.GPA18 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1444   	GPIO->tGPIO_DATA_0.tBit.GPA19 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1445   
;;;1446   	GPIO->tGPIO_PD_0.tBit.GPA16 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1447   	GPIO->tGPIO_PD_0.tBit.GPA17 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1448   	GPIO->tGPIO_PD_0.tBit.GPA18 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1449   	GPIO->tGPIO_PD_0.tBit.GPA19 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1450   #endif /* MSPI_GPIO_SRIC4_EN */
;;;1451   
;;;1452   #if MSPI_GPIO_SRIC5_EN
;;;1453   	/*
;;;1454   	 * 6666 PANNEL SRIC 3
;;;1455   	 */
;;;1456   	GPIO->tGPIO_AFIO_1.tBit.GPA20 = 0x1; // 0:GPIO, 1:MSPI5_MST_SSN
0000e6  6cc1              LDR      r1,[r0,#0x4c]
0000e8  f4217140          BIC      r1,r1,#0x300
0000ec  f5017180          ADD      r1,r1,#0x100
0000f0  64c1              STR      r1,[r0,#0x4c]
;;;1457   	GPIO->tGPIO_AFIO_1.tBit.GPA21 = 0x1; // 0:GPIO, 1:MSPI5_MST_SCLK
0000f2  6cc1              LDR      r1,[r0,#0x4c]
0000f4  f4216140          BIC      r1,r1,#0xc00
0000f8  f5016180          ADD      r1,r1,#0x400
0000fc  64c1              STR      r1,[r0,#0x4c]
;;;1458   	GPIO->tGPIO_AFIO_1.tBit.GPA22 = 0x1; // 0:GPIO, 1:MSPI5_MST_MOSI
0000fe  6cc1              LDR      r1,[r0,#0x4c]
000100  f4215140          BIC      r1,r1,#0x3000
000104  f5015180          ADD      r1,r1,#0x1000
000108  64c1              STR      r1,[r0,#0x4c]
;;;1459   	GPIO->tGPIO_AFIO_1.tBit.GPA23 = 0x1; // 0:GPIO, 1:MSPI5_MST_MISO
00010a  6cc1              LDR      r1,[r0,#0x4c]
00010c  f4214140          BIC      r1,r1,#0xc000
000110  f5014180          ADD      r1,r1,#0x4000
000114  64c1              STR      r1,[r0,#0x4c]
;;;1460   #else /* MSPI_GPIO_SRIC5_EN */
;;;1461   	/*
;;;1462   	 * 6666 PANNEL SRIC 3
;;;1463   	 */
;;;1464   	GPIO->tGPIO_AFIO_1.tBit.GPA20 = 0x0; // 0:GPIO, 1:MSPI5_MST_SSN
;;;1465   	GPIO->tGPIO_AFIO_1.tBit.GPA21 = 0x0; // 0:GPIO, 1:MSPI5_MST_SCLK
;;;1466   	GPIO->tGPIO_AFIO_1.tBit.GPA22 = 0x0; // 0:GPIO, 1:MSPI5_MST_MOSI
;;;1467   	GPIO->tGPIO_AFIO_1.tBit.GPA23 = 0x0; // 0:GPIO, 1:MSPI5_MST_MISO
;;;1468   
;;;1469   	GPIO->tGPIO_DIR_0.tBit.GPA20 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1470   	GPIO->tGPIO_DIR_0.tBit.GPA21 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1471   	GPIO->tGPIO_DIR_0.tBit.GPA22 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1472   	GPIO->tGPIO_DIR_0.tBit.GPA23 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1473   
;;;1474   	GPIO->tGPIO_DATA_0.tBit.GPA20 = 0x0; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1475   	GPIO->tGPIO_DATA_0.tBit.GPA21 = 0x0; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1476   	GPIO->tGPIO_DATA_0.tBit.GPA22 = 0x0; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1477   	GPIO->tGPIO_DATA_0.tBit.GPA23 = 0x0; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1478   
;;;1479   	GPIO->tGPIO_PD_0.tBit.GPA20 = 0x1; // 0:GPIO, 1:MSPI1_MST_SSN
;;;1480   	GPIO->tGPIO_PD_0.tBit.GPA21 = 0x1; // 0:GPIO, 1:MSPI1_MST_SCLK
;;;1481   	GPIO->tGPIO_PD_0.tBit.GPA22 = 0x1; // 0:GPIO, 1:MSPI1_MST_MOSI
;;;1482   	GPIO->tGPIO_PD_0.tBit.GPA23 = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
;;;1483   #endif /* MSPI_GPIO_SRIC5_EN */
;;;1484   
;;;1485   
;;;1486   	GPIO->tGPIO_PU_0._GPIO_MSPI_0_MISO = 0x0;
000116  6801              LDR      r1,[r0,#0]
000118  f0210108          BIC      r1,r1,#8
00011c  6001              STR      r1,[r0,#0]
;;;1487   	GPIO->tGPIO_PU_0._GPIO_MSPI_1_MISO = 0x0;
00011e  6801              LDR      r1,[r0,#0]
000120  f0210180          BIC      r1,r1,#0x80
000124  6001              STR      r1,[r0,#0]
;;;1488   	GPIO->tGPIO_PU_0._GPIO_MSPI_2_MISO = 0x0;
000126  6801              LDR      r1,[r0,#0]
000128  f4216100          BIC      r1,r1,#0x800
00012c  6001              STR      r1,[r0,#0]
;;;1489   	GPIO->tGPIO_PU_0._GPIO_MSPI_3_MISO = 0x0;
00012e  6801              LDR      r1,[r0,#0]
000130  f4214100          BIC      r1,r1,#0x8000
000134  6001              STR      r1,[r0,#0]
;;;1490   	GPIO->tGPIO_PU_0._GPIO_MSPI_4_MISO = 0x0;
000136  6801              LDR      r1,[r0,#0]
000138  f4212100          BIC      r1,r1,#0x80000
00013c  6001              STR      r1,[r0,#0]
;;;1491   	GPIO->tGPIO_PU_0._GPIO_MSPI_5_MISO = 0x0;
00013e  6801              LDR      r1,[r0,#0]
000140  f4210100          BIC      r1,r1,#0x800000
000144  6001              STR      r1,[r0,#0]
;;;1492   //
;;;1493   	GPIO->tGPIO_PD_0._GPIO_MSPI_0_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
000146  6881              LDR      r1,[r0,#8]
000148  f0410108          ORR      r1,r1,#8
00014c  6081              STR      r1,[r0,#8]
;;;1494   	GPIO->tGPIO_PD_0._GPIO_MSPI_1_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
00014e  6881              LDR      r1,[r0,#8]
000150  f0410180          ORR      r1,r1,#0x80
000154  6081              STR      r1,[r0,#8]
;;;1495   	GPIO->tGPIO_PD_0._GPIO_MSPI_2_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
000156  6881              LDR      r1,[r0,#8]
000158  f4416100          ORR      r1,r1,#0x800
00015c  6081              STR      r1,[r0,#8]
;;;1496   	GPIO->tGPIO_PD_0._GPIO_MSPI_3_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
00015e  6881              LDR      r1,[r0,#8]
000160  f4414100          ORR      r1,r1,#0x8000
000164  6081              STR      r1,[r0,#8]
;;;1497   	GPIO->tGPIO_PD_0._GPIO_MSPI_4_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
000166  6881              LDR      r1,[r0,#8]
000168  f4412100          ORR      r1,r1,#0x80000
00016c  6081              STR      r1,[r0,#8]
;;;1498   	GPIO->tGPIO_PD_0._GPIO_MSPI_5_MISO = 0x1; // 0:GPIO, 1:MSPI1_MST_MISO
00016e  6881              LDR      r1,[r0,#8]
000170  f4410100          ORR      r1,r1,#0x800000
000174  6081              STR      r1,[r0,#8]
;;;1499   
;;;1500   // {P2,P1} = Drive Strength
;;;1501   
;;;1502   	GPIO->tGPIO_P1_0._GPIO_MSPI_0_CSN = MSPI_DRIVING_STRANGTH_CSN_0;
000176  6e81              LDR      r1,[r0,#0x68]
000178  f0410101          ORR      r1,r1,#1
00017c  6681              STR      r1,[r0,#0x68]
;;;1503   	GPIO->tGPIO_P1_0._GPIO_MSPI_0_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
00017e  6e81              LDR      r1,[r0,#0x68]
000180  f0410102          ORR      r1,r1,#2
000184  6681              STR      r1,[r0,#0x68]
;;;1504   	GPIO->tGPIO_P1_0._GPIO_MSPI_0_MOSI =MSPI_DRIVING_STRANGTH_MOSI_0;
000186  6e81              LDR      r1,[r0,#0x68]
000188  f0410104          ORR      r1,r1,#4
00018c  6681              STR      r1,[r0,#0x68]
;;;1505   	GPIO->tGPIO_P2_0._GPIO_MSPI_0_CSN =MSPI_DRIVING_STRANGTH_CSN_1;
00018e  6e01              LDR      r1,[r0,#0x60]
000190  f0410101          ORR      r1,r1,#1
000194  6601              STR      r1,[r0,#0x60]
;;;1506   	GPIO->tGPIO_P2_0._GPIO_MSPI_0_SCLK =MSPI_DRIVING_STRANGTH_SCLK_1;
000196  6e01              LDR      r1,[r0,#0x60]
000198  f0410102          ORR      r1,r1,#2
00019c  6601              STR      r1,[r0,#0x60]
;;;1507   	GPIO->tGPIO_P2_0._GPIO_MSPI_0_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
00019e  6e01              LDR      r1,[r0,#0x60]
0001a0  f0410104          ORR      r1,r1,#4
0001a4  6601              STR      r1,[r0,#0x60]
;;;1508   	
;;;1509   
;;;1510   	GPIO->tGPIO_P1_0._GPIO_MSPI_1_CSN = MSPI_DRIVING_STRANGTH_CSN_0;
0001a6  6e81              LDR      r1,[r0,#0x68]
0001a8  f0410110          ORR      r1,r1,#0x10
0001ac  6681              STR      r1,[r0,#0x68]
;;;1511   	GPIO->tGPIO_P1_0._GPIO_MSPI_1_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
0001ae  6e81              LDR      r1,[r0,#0x68]
0001b0  f0410120          ORR      r1,r1,#0x20
0001b4  6681              STR      r1,[r0,#0x68]
;;;1512   	GPIO->tGPIO_P1_0._GPIO_MSPI_1_MOSI = MSPI_DRIVING_STRANGTH_MOSI_0;
0001b6  6e81              LDR      r1,[r0,#0x68]
0001b8  f0410140          ORR      r1,r1,#0x40
0001bc  6681              STR      r1,[r0,#0x68]
;;;1513   	GPIO->tGPIO_P2_0._GPIO_MSPI_1_CSN = MSPI_DRIVING_STRANGTH_CSN_1;
0001be  6e01              LDR      r1,[r0,#0x60]
0001c0  f0410110          ORR      r1,r1,#0x10
0001c4  6601              STR      r1,[r0,#0x60]
;;;1514   	GPIO->tGPIO_P2_0._GPIO_MSPI_1_SCLK = MSPI_DRIVING_STRANGTH_SCLK_1;
0001c6  6e01              LDR      r1,[r0,#0x60]
0001c8  f0410120          ORR      r1,r1,#0x20
0001cc  6601              STR      r1,[r0,#0x60]
;;;1515   	GPIO->tGPIO_P2_0._GPIO_MSPI_1_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
0001ce  6e01              LDR      r1,[r0,#0x60]
0001d0  f0410140          ORR      r1,r1,#0x40
0001d4  6601              STR      r1,[r0,#0x60]
;;;1516   
;;;1517   	GPIO->tGPIO_P1_0._GPIO_MSPI_2_CSN = MSPI_DRIVING_STRANGTH_CSN_0;
0001d6  6e81              LDR      r1,[r0,#0x68]
0001d8  f4417180          ORR      r1,r1,#0x100
0001dc  6681              STR      r1,[r0,#0x68]
;;;1518   	GPIO->tGPIO_P1_0._GPIO_MSPI_2_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
0001de  6e81              LDR      r1,[r0,#0x68]
0001e0  f4417100          ORR      r1,r1,#0x200
0001e4  6681              STR      r1,[r0,#0x68]
;;;1519   	GPIO->tGPIO_P1_0._GPIO_MSPI_2_MOSI = MSPI_DRIVING_STRANGTH_MOSI_0;
0001e6  6e81              LDR      r1,[r0,#0x68]
0001e8  f4416180          ORR      r1,r1,#0x400
0001ec  6681              STR      r1,[r0,#0x68]
;;;1520   	GPIO->tGPIO_P2_0._GPIO_MSPI_2_CSN = MSPI_DRIVING_STRANGTH_CSN_1;
0001ee  6e01              LDR      r1,[r0,#0x60]
0001f0  f4417180          ORR      r1,r1,#0x100
0001f4  6601              STR      r1,[r0,#0x60]
;;;1521   	GPIO->tGPIO_P2_0._GPIO_MSPI_2_SCLK = MSPI_DRIVING_STRANGTH_SCLK_1;
0001f6  6e01              LDR      r1,[r0,#0x60]
0001f8  f4417100          ORR      r1,r1,#0x200
0001fc  6601              STR      r1,[r0,#0x60]
;;;1522   	GPIO->tGPIO_P2_0._GPIO_MSPI_2_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
0001fe  6e01              LDR      r1,[r0,#0x60]
000200  f4416180          ORR      r1,r1,#0x400
000204  6601              STR      r1,[r0,#0x60]
;;;1523   
;;;1524   	/*
;;;1525   	 *
;;;1526   	 */
;;;1527   	GPIO->tGPIO_P1_0._GPIO_MSPI_3_CSN =  MSPI_DRIVING_STRANGTH_CSN_0;
000206  6e81              LDR      r1,[r0,#0x68]
000208  f4415180          ORR      r1,r1,#0x1000
00020c  6681              STR      r1,[r0,#0x68]
;;;1528   	GPIO->tGPIO_P1_0._GPIO_MSPI_3_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
00020e  6e81              LDR      r1,[r0,#0x68]
000210  f4415100          ORR      r1,r1,#0x2000
000214  6681              STR      r1,[r0,#0x68]
;;;1529   	GPIO->tGPIO_P1_0._GPIO_MSPI_3_MOSI = MSPI_DRIVING_STRANGTH_MOSI_0;
000216  6e81              LDR      r1,[r0,#0x68]
000218  f4414180          ORR      r1,r1,#0x4000
00021c  6681              STR      r1,[r0,#0x68]
;;;1530   	GPIO->tGPIO_P2_0._GPIO_MSPI_3_CSN =  MSPI_DRIVING_STRANGTH_CSN_1;
00021e  6e01              LDR      r1,[r0,#0x60]
000220  f4415180          ORR      r1,r1,#0x1000
000224  6601              STR      r1,[r0,#0x60]
;;;1531   	GPIO->tGPIO_P2_0._GPIO_MSPI_3_SCLK = MSPI_DRIVING_STRANGTH_SCLK_1;
000226  6e01              LDR      r1,[r0,#0x60]
000228  f4415100          ORR      r1,r1,#0x2000
00022c  6601              STR      r1,[r0,#0x60]
;;;1532   	GPIO->tGPIO_P2_0._GPIO_MSPI_3_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
00022e  6e01              LDR      r1,[r0,#0x60]
000230  f4414180          ORR      r1,r1,#0x4000
000234  6601              STR      r1,[r0,#0x60]
;;;1533   
;;;1534   	GPIO->tGPIO_P1_0._GPIO_MSPI_4_CSN = MSPI_DRIVING_STRANGTH_CSN_0;
000236  6e81              LDR      r1,[r0,#0x68]
000238  f4413180          ORR      r1,r1,#0x10000
00023c  6681              STR      r1,[r0,#0x68]
;;;1535   	GPIO->tGPIO_P1_0._GPIO_MSPI_4_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
00023e  6e81              LDR      r1,[r0,#0x68]
000240  f4413100          ORR      r1,r1,#0x20000
000244  6681              STR      r1,[r0,#0x68]
;;;1536   	GPIO->tGPIO_P1_0._GPIO_MSPI_4_MOSI = MSPI_DRIVING_STRANGTH_MOSI_0;
000246  6e81              LDR      r1,[r0,#0x68]
000248  f4412180          ORR      r1,r1,#0x40000
00024c  6681              STR      r1,[r0,#0x68]
;;;1537   	GPIO->tGPIO_P2_0._GPIO_MSPI_4_CSN = MSPI_DRIVING_STRANGTH_CSN_1;
00024e  6e01              LDR      r1,[r0,#0x60]
000250  f4413180          ORR      r1,r1,#0x10000
000254  6601              STR      r1,[r0,#0x60]
;;;1538   	GPIO->tGPIO_P2_0._GPIO_MSPI_4_SCLK = MSPI_DRIVING_STRANGTH_SCLK_1;
000256  6e01              LDR      r1,[r0,#0x60]
000258  f4413100          ORR      r1,r1,#0x20000
00025c  6601              STR      r1,[r0,#0x60]
;;;1539   	GPIO->tGPIO_P2_0._GPIO_MSPI_4_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
00025e  6e01              LDR      r1,[r0,#0x60]
000260  f4412180          ORR      r1,r1,#0x40000
000264  6601              STR      r1,[r0,#0x60]
;;;1540   
;;;1541   	GPIO->tGPIO_P1_0._GPIO_MSPI_5_CSN = MSPI_DRIVING_STRANGTH_CSN_0;
000266  6e81              LDR      r1,[r0,#0x68]
000268  f4411180          ORR      r1,r1,#0x100000
00026c  6681              STR      r1,[r0,#0x68]
;;;1542   	GPIO->tGPIO_P1_0._GPIO_MSPI_5_SCLK = MSPI_DRIVING_STRANGTH_SCLK_0;
00026e  6e81              LDR      r1,[r0,#0x68]
000270  f4411100          ORR      r1,r1,#0x200000
000274  6681              STR      r1,[r0,#0x68]
;;;1543   	GPIO->tGPIO_P1_0._GPIO_MSPI_5_MOSI = MSPI_DRIVING_STRANGTH_MOSI_0;
000276  6e81              LDR      r1,[r0,#0x68]
000278  f4410180          ORR      r1,r1,#0x400000
00027c  6681              STR      r1,[r0,#0x68]
;;;1544   	GPIO->tGPIO_P2_0._GPIO_MSPI_5_CSN = MSPI_DRIVING_STRANGTH_CSN_1;
00027e  6e01              LDR      r1,[r0,#0x60]
000280  f4411180          ORR      r1,r1,#0x100000
000284  6601              STR      r1,[r0,#0x60]
;;;1545   	GPIO->tGPIO_P2_0._GPIO_MSPI_5_SCLK = MSPI_DRIVING_STRANGTH_SCLK_1;
000286  6e01              LDR      r1,[r0,#0x60]
000288  f4411100          ORR      r1,r1,#0x200000
00028c  6601              STR      r1,[r0,#0x60]
;;;1546   	GPIO->tGPIO_P2_0._GPIO_MSPI_5_MOSI = MSPI_DRIVING_STRANGTH_MOSI_1;
00028e  6e01              LDR      r1,[r0,#0x60]
000290  f4410180          ORR      r1,r1,#0x400000
000294  6601              STR      r1,[r0,#0x60]
;;;1547   
;;;1548   
;;;1549   //	GPIO->tGPIO_P1_0.tBit.GPA04 = 0x0;
;;;1550   //	GPIO->tGPIO_P1_0.tBit.GPA05 = 0x0;
;;;1551   //	GPIO->tGPIO_P1_0.tBit.GPA06 = 0x0;
;;;1552   //
;;;1553   //	GPIO->tGPIO_P2_0.tBit.GPA04 = 0x0;
;;;1554   //	GPIO->tGPIO_P2_0.tBit.GPA05 = 0x1;
;;;1555   //	GPIO->tGPIO_P2_0.tBit.GPA06 = 0x1;
;;;1556   //
;;;1557   //	GPIO->tGPIO_P1_0.tBit.GPA08 = 0x0;
;;;1558   //	GPIO->tGPIO_P1_0.tBit.GPA09 = 0x0;
;;;1559   //	GPIO->tGPIO_P1_0.tBit.GPA09 = 0x0;
;;;1560   //
;;;1561   //	GPIO->tGPIO_P2_0.tBit.GPA08 = 0x0;
;;;1562   //	GPIO->tGPIO_P2_0.tBit.GPA09 = 0x1;
;;;1563   //	GPIO->tGPIO_P2_0.tBit.GPA10 = 0x1;
;;;1564   //
;;;1565   //	GPIO->tGPIO_P1_0.tBit.GPA12 = 0x0;
;;;1566   //	GPIO->tGPIO_P1_0.tBit.GPA13 = 0x0;
;;;1567   //	GPIO->tGPIO_P1_0.tBit.GPA14 = 0x0;
;;;1568   //
;;;1569   //	GPIO->tGPIO_P2_0.tBit.GPA12 = 0x0;
;;;1570   //	GPIO->tGPIO_P2_0.tBit.GPA13 = 0x1;
;;;1571   //	GPIO->tGPIO_P2_0.tBit.GPA14 = 0x1;
;;;1572   //
;;;1573   //	GPIO->tGPIO_P1_0.tBit.GPA16 = 0x0;
;;;1574   //	GPIO->tGPIO_P1_0.tBit.GPA17 = 0x0;
;;;1575   //	GPIO->tGPIO_P1_0.tBit.GPA18 = 0x0;
;;;1576   //
;;;1577   //	GPIO->tGPIO_P2_0.tBit.GPA16 = 0x0;
;;;1578   //	GPIO->tGPIO_P2_0.tBit.GPA17 = 0x1;
;;;1579   //	GPIO->tGPIO_P2_0.tBit.GPA18 = 0x1;
;;;1580   //
;;;1581   //	GPIO->tGPIO_P1_0.tBit.GPA20 = 0x0;
;;;1582   //	GPIO->tGPIO_P1_0.tBit.GPA21 = 0x0;
;;;1583   //	GPIO->tGPIO_P1_0.tBit.GPA22 = 0x0;
;;;1584   //
;;;1585   //	GPIO->tGPIO_P2_0.tBit.GPA20 = 0x0;
;;;1586   //	GPIO->tGPIO_P2_0.tBit.GPA21 = 0x1;
;;;1587   //	GPIO->tGPIO_P2_0.tBit.GPA22 = 0x1;
;;;1588   }
000296  4770              BX       lr
                          ENDP

                  |L4.664|
                          DCD      0x40007000

                          AREA ||i.MSPI_ITConfig||, CODE, READONLY, ALIGN=2

                  MSPI_ITConfig PROC
;;;597    
;;;598    void MSPI_ITConfig(FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
000004  f44f7180          MOV      r1,#0x100
000008  2300              MOVS     r3,#0
00000a  f8c21280          STR      r1,[r2,#0x280]
00000e  f8dfc014          LDR      r12,|L5.36|
000012  f88c3400          STRB     r3,[r12,#0x400]
;;;599    {	
;;;600    	NVIC_ClearPendingIRQ(MSPI_IRQn);
;;;601    	NVIC_SetPriority(MSPI_IRQn, MSPI_IRQn_Priority);
;;;602    	
;;;603    	if(NewState != DISABLE)
000016  2800              CMP      r0,#0
000018  bf14              ITE      NE
00001a  f8c21100          STRNE    r1,[r2,#0x100]
00001e  f8c21180          STREQ    r1,[r2,#0x180]
;;;604    	{
;;;605    		NVIC_EnableIRQ(MSPI_IRQn);
;;;606    	}
;;;607    	else
;;;608    	{
;;;609    		NVIC_DisableIRQ(MSPI_IRQn);
;;;610    	}
;;;611    }
000022  4770              BX       lr
;;;612    
                          ENDP

                  |L5.36|
                          DCD      0xe000e008

                          AREA ||i.MSPI_Initialize||, CODE, READONLY, ALIGN=2

                  MSPI_Initialize PROC
;;;215    
;;;216    void MSPI_Initialize(void)
000000  490c              LDR      r1,|L6.52|
;;;217    {
000002  b510              PUSH     {r4,lr}
;;;218    	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;219    	Fncp_MSPI_IRQHandler = &MSPI_InterruptHandler;
000004  480a              LDR      r0,|L6.48|
;;;220    	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000006  6008              STR      r0,[r1,#0]  ; Fncp_MSPI_IRQHandler
000008  f7fffffe          BL       hal_mspi_GetCommonConfig
00000c  4604              MOV      r4,r0
;;;221    	
;;;222    	//MSPI PIN Setting
;;;223    	MSPI_GPIO_Init();
00000e  f7fffffe          BL       MSPI_GPIO_Init
000012  4b09              LDR      r3,|L6.56|
000014  2008              MOVS     r0,#8
000016  6458              STR      r0,[r3,#0x44]
000018  2015              MOVS     r0,#0x15
00001a  f8c3011c          STR      r0,[r3,#0x11c]
;;;224    	
;;;225    	// MSPI Clock Set
;;;226    #if USED_PLL_OUT_CLK_CONFIG
;;;227    	#if (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) // MSPI 16M
;;;228    		MSPI_Set_CLK(3);//(3);
;;;229    		MSPI_Set_GLF(3);//(3);
;;;230    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_90MHz) // MSPI 15M - check
;;;231    		MSPI_Set_CLK(3);//(3);
;;;232    		MSPI_Set_GLF(3);//(3);
;;;233    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_45MHz) // MSPI 11.3M
;;;234    		MSPI_Set_CLK(2);//(3);
;;;235    		MSPI_Set_GLF(2);//(3);
;;;236    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_37p5MHz) // MSPI 9.4M
;;;237    		MSPI_Set_CLK(2);//(3);
;;;238    		MSPI_Set_GLF(2);//(3);
;;;239    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_31p5MHz) // MSPI 7.9M
;;;240    		MSPI_Set_CLK();//(3);
;;;241    		MSPI_Set_GLF(2);//(3);
;;;242    	#else /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */ // MSPI 15M
;;;243    		MSPI_Set_CLK(3);//(3);
;;;244    		MSPI_Set_GLF(3);//(3);
;;;245    	#endif /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */
;;;246    #else /* USED_PLL_OUT_CLK_CONFIG */
;;;247    	MSPI_Set_CLK(3); // (6);//(3);	// MSPI 6M choigs
;;;248    	MSPI_Set_GLF(3); // (6);//(3);
00001e  2003              MOVS     r0,#3
000020  f7fffffe          BL       MSPI_Set_GLF
;;;249    #endif /* USED_PLL_OUT_CLK_CONFIG */
;;;250    	
;;;251    	MSPI->SCR = kptHalMspiCommonConf->tParam_SCR.ulBulk;
000024  6820              LDR      r0,[r4,#0]
000026  6018              STR      r0,[r3,#0]
;;;252    	MSPI->SPIENA = kptHalMspiCommonConf->tParam_SPIENA.ulBulk;
000028  6860              LDR      r0,[r4,#4]
00002a  f8c300ac          STR      r0,[r3,#0xac]
;;;253    }
00002e  bd10              POP      {r4,pc}
;;;254    
                          ENDP

                  |L6.48|
                          DCD      MSPI_InterruptHandler
                  |L6.52|
                          DCD      Fncp_MSPI_IRQHandler
                  |L6.56|
                          DCD      0x40005000

                          AREA ||i.MSPI_IntCLR||, CODE, READONLY, ALIGN=2

                  MSPI_IntCLR PROC
;;;625    // choigs // Check
;;;626    void MSPI_IntCLR(void)
000000  4803              LDR      r0,|L7.16|
                  |L7.2|
;;;627    {
;;;628    
;;;629    	while(1)
;;;630    	{
;;;631    		if( MSPI->SINTRSR & INTR_MEM_ENA) 		/*[6] : Memory Interrupt Status*/
000002  6901              LDR      r1,[r0,#0x10]
000004  f0110f40          TST      r1,#0x40
000008  d0fb              BEQ      |L7.2|
;;;632    		{
;;;633    			MSPI->SINTRENCR = 0x1;
00000a  2101              MOVS     r1,#1
00000c  61c1              STR      r1,[r0,#0x1c]
;;;634    			break;
;;;635    		}
;;;636    	}
;;;637    }
00000e  4770              BX       lr
;;;638    
                          ENDP

                  |L7.16|
                          DCD      0x40005000

                          AREA ||i.MSPI_InterruptHandler||, CODE, READONLY, ALIGN=2

                  MSPI_InterruptHandler PROC
;;;55     
;;;56     void MSPI_InterruptHandler(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	__IO static int nextMSPISize;
;;;59     	const tHalPwmdrvCommonConf_t * pktHalPwmdrvCommonConf = hal_pwmdrv_GetCommonConfig();
000002  f7fffffe          BL       hal_pwmdrv_GetCommonConfig
;;;60     
;;;61     #if ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION)
;;;62     //	static uint8_t f_LastLHB;
;;;63     #endif /* ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION) */
;;;64     
;;;65     	if ((MSPI_->SPIMODE & 0x1) != 0)
000006  481e              LDR      r0,|L8.128|
000008  6800              LDR      r0,[r0,#0]  ; pTestMSPI
00000a  f8d010d0          LDR      r1,[r0,#0xd0]
00000e  f0110f01          TST      r1,#1
;;;66     	{
;;;67     		//AIT Mode
;;;68     		if ((MSPI_->SINTRMSSR & 0x40) != 0)
000012  bf1a              ITTE     NE
000014  6941              LDRNE    r1,[r0,#0x14]
000016  f0110f40          TSTNE    r1,#0x40
;;;69     		{
;;;70     			//AIT Mode 1
;;;71     			MSPI_->SINTRMSCR = INTR_MEM_ENA;
;;;72     			MSPI_->SINTRENCR = 0x1;
;;;73     
;;;74     #if USED_ESD_RECOVERY_CODE
;;;75     			if(FSM_ON_FLAG == NO) 
;;;76     			{
;;;77     				MUX_COUNT_ERROR = YES;
;;;78     			}
;;;79     #endif /* USED_ESD_RECOVERY_CODE */			
;;;80     			
;;;81     			switch(HAL_GetSensingMode())
;;;82     			{
;;;83     #if ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION)
;;;84     				case SM_FINGER_PEN_ACTIVE_MODE:
;;;85     				case SM_FINGER_PEN_IDLE_MODE:
;;;86     				case SM_FINGER_PEN_HOVER_ACTIVE_MODE:
;;;87     				case SM_FINGER_PEN_HOVER_IDLE_MODE:
;;;88     				{
;;;89     					gMspiCounterPen = gMspiCounterPen + 1;
;;;90     
;;;91     //					sensingRowStart = 0;
;;;92     
;;;93     					// test
;;;94     					if (gMspiCounterPen > 14)
;;;95     					{
;;;96     						gMspiCounterPen = 0;
;;;97     //						bIsRefInitDone = 1;
;;;98     //						f_LastLHB = 1;
;;;99     					}
;;;100    					nextMSPISize = gMspiCounterPen;
;;;101    //					dbgsensingRowStart = sensingRowStart;
;;;102    					switch (nextMSPISize)
;;;103    					{
;;;104    						// Finger �씪寃쎌슦 LFD瑜� �빐以섏빞�븯湲� �븣臾몄뿉 �븳 LHB�쟾�뿉 Pen DC �꽭�똿�쓣 0�쑝濡� 蹂�寃� (0:LFD on / 1:LFD off)
;;;105    						case 2:		// 3LHB
;;;106    						case 6:		// 7LHB
;;;107    						case 8:		// 9LHB
;;;108    						case 9:		// 10LHB
;;;109    						case 10:	// 11LHB
;;;110    						case 14:	// 15LHB
;;;111    //							HAL_SetLocalIndex(0, 0);
;;;112    							HAL_SetLocalIndex(sensingRowStart, 0);
;;;113    							break;
;;;114    
;;;115    						default:
;;;116    //							HAL_SetLocalIndex(0, 1);
;;;117    							HAL_SetLocalIndex(sensingRowStart, 1);
;;;118    							break;
;;;119    					}
;;;120    					MSPI_Set_BUFSIZE_FingerPenMode(nextMSPISize);
;;;121    
;;;122    					callPendSV();
;;;123    					break;
;;;124    				}
;;;125    #endif /* (!USED_FINGER_ONLY) */
;;;126    #if USED_LPWG_MODE_CONTROL
;;;127    				case SM_FINGER_ONLY_LPWG_MODE:
;;;128    #endif /* USED_LPWG_MODE_CONTROL */
;;;129    				case SM_FINGER_ONLY_ACTIVE_FRQ_MAIN_MODE:
;;;130    				case SM_FINGER_ONLY_ACTIVE_FRQ_HOP1_MODE:
;;;131    				case SM_FINGER_ONLY_ACTIVE_FRQ_HOP2_MODE:
;;;132    				case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_MAIN_MODE:
;;;133    				case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP1_MODE:
;;;134    				case SM_FINGER_PEN_SEARCH_ACTIVE_FRQ_HOP2_MODE:
;;;135    				{
;;;136    #if (!USED_FINGER_ONLY)
;;;137    					MSPI_Set_BUFSIZE_FingerMode(gFrameCnt);
;;;138    #endif /* (!USED_FINGER_ONLY) */
;;;139    //					F_GPB11();
;;;140    //					GPIO->tGPIO_DATA_1._GPIO_TOGGLE = 1;
;;;141    //					GPIO->tGPIO_DATA_1._GPIO_TOGGLE = 0;
;;;142    					
;;;143    					hal_set_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;144    					break;
;;;145    				}
;;;146    				case SM_FINGER_ONLY_IDLE_MODE:
;;;147    				case SM_FINGER_PEN_SEARCH_IDLE_MODE:
;;;148    				{
;;;149    #if USED_FRAME_SKIP_IDLE_MODE_CONTROL
;;;150    					hal_set_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;151    #else /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;152    //					F_GPB11();
;;;153    					hal_set_irq_flag(IRQ_ID_FULL_SAMPLE_NI);
;;;154    #endif /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;155    					break;
;;;156    				}
;;;157    				case SM_S3_ACTIVE_MODE:
;;;158    				case SM_S3_IDLE_MODE:
;;;159    #if (!USED_FINGER_ONLY)
;;;160    					MSPI_Set_BUFSIZE_FingerMode(gFrameCnt);
;;;161    #endif /* (!USED_FINGER_ONLY) */
;;;162    					hal_set_irq_flag(IRQ_ID_FULL_SAMPLE);
;;;163    					break;
;;;164    				default:
;;;165    					break;
;;;166    			}
;;;167    			MSPI->SPISTART = 0x03f/*All SPIs Command*/;
;;;168    		}
;;;169    
;;;170    //#if ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION)
;;;171    //		sensingMode = getSensingMode();
;;;172    //		// FingerPen - > Finger 紐⑤뱶�쟾�솚
;;;173    //		if (gMspiCounterPen == (TSYNC_LHB - 2))
;;;174    //		{
;;;175    //			if ((sensingMode & _SETTING_MODE_MASK_)== SET_SM_FINGER_MODE)
;;;176    //			{
;;;177    ////					MSPI_CommandWrite( MSPI_AUX_WRITE, MSPI_FINGER_MODE, LOCAL_0TH_POSITION);
;;;178    //				setSensingMode(SM_MSPI_SET_MODE);
;;;179    //			}
;;;180    //		}
;;;181    //#endif /* ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION)*/
;;;182    
;;;183    #if ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION)
;;;184    		if ((MSPI->SINTRMSSR & 0x100) != 0)
;;;185    		{
;;;186    			//AIT Mode 2-0
;;;187    			CLEAR_BIT(MSPI->SINTRMSCR,BIT7 ) ;
;;;188    			CLEAR_BIT(MSPI->SPIAITWLVCR,BIT0 ) ;
;;;189    			MSPI->SINTRENCR = 0x1;
;;;190    		}
;;;191    		if ((MSPI->SINTRMSSR & 0x200) != 0)
;;;192    		{
;;;193    			//AIT Mode 2-1
;;;194    			CLEAR_BIT(MSPI->SINTRMSCR,BIT8 );
;;;195    			CLEAR_BIT(MSPI->SPIAITWLVCR,BIT4 );
;;;196    			MSPI->SINTRENCR = 0x1;
;;;197    		}
;;;198    		if ((MSPI->SINTRMSSR & 0x400) != 0)
;;;199    		{
;;;200    			//AIT Mode 2-2
;;;201    			CLEAR_BIT(MSPI->SINTRMSCR,BIT9 ) ;
;;;202    			CLEAR_BIT(MSPI->SPIAITWLVCR,BIT8 ) ;
;;;203    			MSPI->SINTRENCR = 0x1;
;;;204    		}
;;;205    		if ((MSPI->SINTRMSSR & 0x800) != 0)
;;;206    		{
;;;207    			//AIT Mode 2-3
;;;208    			CLEAR_BIT(MSPI->SINTRMSCR,BIT10 ) ;
;;;209    			CLEAR_BIT(MSPI->SPIAITWLVCR,BIT12 ) ;
;;;210    			MSPI->SINTRENCR = 0x1;
;;;211    		}
;;;212    #endif /* ((!USED_FINGER_ONLY) || USED_PEN_MODE_OPERATION) */
;;;213    	}
;;;214    }
00001a  bd10              POPEQ    {r4,pc}
00001c  2140              MOVS     r1,#0x40              ;71
00001e  6181              STR      r1,[r0,#0x18]         ;71
000020  2101              MOVS     r1,#1                 ;72
000022  61c1              STR      r1,[r0,#0x1c]         ;72
000024  f7fffffe          BL       HAL_GetSensingMode
000028  f5b05f88          CMP      r0,#0x1100            ;81
00002c  d01e              BEQ      |L8.108|
00002e  dc12              BGT      |L8.86|
000030  f2410203          MOV      r2,#0x1003            ;81
000034  eba00102          SUB      r1,r0,r2              ;81
000038  4290              CMP      r0,r2                 ;81
00003a  d017              BEQ      |L8.108|
00003c  dc06              BGT      |L8.76|
00003e  f5a06000          SUB      r0,r0,#0x800          ;81
000042  3801              SUBS     r0,#1                 ;81
000044  bf18              IT       NE                    ;81
000046  28ff              CMPNE    r0,#0xff              ;81
000048  d114              BNE      |L8.116|
00004a  e00f              B        |L8.108|
                  |L8.76|
00004c  2902              CMP      r1,#2                 ;81
00004e  bf18              IT       NE                    ;81
000050  2906              CMPNE    r1,#6                 ;81
000052  d10f              BNE      |L8.116|
000054  e00a              B        |L8.108|
                  |L8.86|
000056  f1a00003          SUB      r0,r0,#3              ;81
00005a  f5b05000          SUBS     r0,r0,#0x2000         ;81
00005e  bf18              IT       NE                    ;81
000060  2802              CMPNE    r0,#2                 ;81
000062  d003              BEQ      |L8.108|
000064  2806              CMP      r0,#6                 ;81
000066  bf18              IT       NE                    ;81
000068  28fd              CMPNE    r0,#0xfd              ;81
00006a  d103              BNE      |L8.116|
                  |L8.108|
00006c  f04f0001          MOV      r0,#1                 ;143
000070  f7fffffe          BL       hal_set_irq_flag
                  |L8.116|
000074  4903              LDR      r1,|L8.132|
000076  203f              MOVS     r0,#0x3f              ;167
000078  f8c100d4          STR      r0,[r1,#0xd4]         ;167
00007c  bd10              POP      {r4,pc}
;;;215    
                          ENDP

00007e  0000              DCW      0x0000
                  |L8.128|
                          DCD      ||.data||
                  |L8.132|
                          DCD      0x40005000

                          AREA ||i.MSPI_RegisterAllSricWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterAllSricWrite PROC
;;;972    
;;;973    void MSPI_RegisterAllSricWrite (uint32_t Addr, uint32_t value)
000000  f4405200          ORR      r2,r0,#0x2000
;;;974    {
;;;975    	uint32_t iMspi;
;;;976    
;;;977    	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;978    	{
;;;979    		//MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr ;
;;;980    		//MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nBulk = 1;//MSPI_SINGLE;
;;;981    		//MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nWrite = 0;//MSPI_WRITE;
;;;982    		//		MSPI_BUF->SricRegWriteBuffer[iMspi].Data = value;		
;;;983    		
;;;984    	  MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr | 0x1 << 13;
000004  484e              LDR      r0,|L9.320|
000006  8002              STRH     r2,[r0,#0]
;;;985    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.Burst_Len = 0;
000008  8883              LDRH     r3,[r0,#4]
00000a  f423737e          BIC      r3,r3,#0x3f8
00000e  8083              STRH     r3,[r0,#4]
;;;986    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
000010  8883              LDRH     r3,[r0,#4]
000012  f4236340          BIC      r3,r3,#0xc00
000016  8083              STRH     r3,[r0,#4]
;;;987    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.DualRxEn = 0;
000018  8883              LDRH     r3,[r0,#4]
00001a  f4235300          BIC      r3,r3,#0x2000
00001e  8083              STRH     r3,[r0,#4]
;;;988    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ChkSum = 0;
000020  8883              LDRH     r3,[r0,#4]
000022  f4234380          BIC      r3,r3,#0x4000
000026  8083              STRH     r3,[r0,#4]
;;;989    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.RW = 0; // 0 : write, 1 : Read	
000028  8883              LDRH     r3,[r0,#4]
00002a  f4234300          BIC      r3,r3,#0x8000
00002e  8083              STRH     r3,[r0,#4]
;;;990    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_M = value >> 16;
000030  0c0b              LSRS     r3,r1,#16
000032  8103              STRH     r3,[r0,#8]
;;;991    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_L = value & 0xFFFF;
000034  8181              STRH     r1,[r0,#0xc]
000036  8202              STRH     r2,[r0,#0x10]         ;984
000038  f8b0c014          LDRH     r12,[r0,#0x14]        ;985
00003c  f42c7c7e          BIC      r12,r12,#0x3f8        ;985
000040  f8a0c014          STRH     r12,[r0,#0x14]        ;985
000044  f8b0c014          LDRH     r12,[r0,#0x14]        ;986
000048  f42c6c40          BIC      r12,r12,#0xc00        ;986
00004c  f8a0c014          STRH     r12,[r0,#0x14]        ;986
000050  f8b0c014          LDRH     r12,[r0,#0x14]        ;987
000054  f42c5c00          BIC      r12,r12,#0x2000       ;987
000058  f8a0c014          STRH     r12,[r0,#0x14]        ;987
00005c  f8b0c014          LDRH     r12,[r0,#0x14]        ;988
000060  f42c4c80          BIC      r12,r12,#0x4000       ;988
000064  f8a0c014          STRH     r12,[r0,#0x14]        ;988
000068  f8b0c014          LDRH     r12,[r0,#0x14]        ;989
00006c  f42c4c00          BIC      r12,r12,#0x8000       ;989
000070  f8a0c014          STRH     r12,[r0,#0x14]        ;989
000074  8303              STRH     r3,[r0,#0x18]         ;990
000076  8381              STRH     r1,[r0,#0x1c]
000078  8402              STRH     r2,[r0,#0x20]         ;984
00007a  f8b0c024          LDRH     r12,[r0,#0x24]        ;985
00007e  f42c7c7e          BIC      r12,r12,#0x3f8        ;985
000082  f8a0c024          STRH     r12,[r0,#0x24]        ;985
000086  f8b0c024          LDRH     r12,[r0,#0x24]        ;986
00008a  f42c6c40          BIC      r12,r12,#0xc00        ;986
00008e  f8a0c024          STRH     r12,[r0,#0x24]        ;986
000092  f8b0c024          LDRH     r12,[r0,#0x24]        ;987
000096  f42c5c00          BIC      r12,r12,#0x2000       ;987
00009a  f8a0c024          STRH     r12,[r0,#0x24]        ;987
00009e  f8b0c024          LDRH     r12,[r0,#0x24]        ;988
0000a2  f42c4c80          BIC      r12,r12,#0x4000       ;988
0000a6  f8a0c024          STRH     r12,[r0,#0x24]        ;988
0000aa  f8b0c024          LDRH     r12,[r0,#0x24]        ;989
0000ae  f42c4c00          BIC      r12,r12,#0x8000       ;989
0000b2  f8a0c024          STRH     r12,[r0,#0x24]        ;989
0000b6  8503              STRH     r3,[r0,#0x28]         ;990
0000b8  8581              STRH     r1,[r0,#0x2c]
0000ba  8602              STRH     r2,[r0,#0x30]         ;984
0000bc  8e82              LDRH     r2,[r0,#0x34]         ;985
0000be  f422727e          BIC      r2,r2,#0x3f8          ;985
0000c2  8682              STRH     r2,[r0,#0x34]         ;985
0000c4  8e82              LDRH     r2,[r0,#0x34]         ;986
0000c6  f4226240          BIC      r2,r2,#0xc00          ;986
0000ca  8682              STRH     r2,[r0,#0x34]         ;986
0000cc  8e82              LDRH     r2,[r0,#0x34]         ;987
0000ce  f4225200          BIC      r2,r2,#0x2000         ;987
0000d2  8682              STRH     r2,[r0,#0x34]         ;987
0000d4  8e82              LDRH     r2,[r0,#0x34]         ;988
0000d6  f4224280          BIC      r2,r2,#0x4000         ;988
0000da  8682              STRH     r2,[r0,#0x34]         ;988
0000dc  8e82              LDRH     r2,[r0,#0x34]         ;989
0000de  f4224200          BIC      r2,r2,#0x8000         ;989
0000e2  8682              STRH     r2,[r0,#0x34]         ;989
0000e4  8703              STRH     r3,[r0,#0x38]         ;990
0000e6  8781              STRH     r1,[r0,#0x3c]
;;;992    		
;;;993    		
;;;994    	}
;;;995    
;;;996    #ifdef _DV_SAMPLE_
;;;997    	// TR Size
;;;998    	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;
0000e8  4816              LDR      r0,|L9.324|
0000ea  2104              MOVS     r1,#4
0000ec  f8c010b0          STR      r1,[r0,#0xb0]
;;;999    	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;
0000f0  f8c010b4          STR      r1,[r0,#0xb4]
;;;1000   	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;
0000f4  f8c010b8          STR      r1,[r0,#0xb8]
;;;1001   	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;
0000f8  f8c010bc          STR      r1,[r0,#0xbc]
;;;1002   	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;
0000fc  f8c010c0          STR      r1,[r0,#0xc0]
;;;1003   	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;
000100  f8c010c4          STR      r1,[r0,#0xc4]
;;;1004   
;;;1005   	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[1]));
000104  f8c010e4          STR      r1,[r0,#0xe4]
;;;1006   	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[0])<<16 | 0x0000);
000108  2100              MOVS     r1,#0
00010a  f8c010e8          STR      r1,[r0,#0xe8]
;;;1007   	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[3]));
00010e  4a0e              LDR      r2,|L9.328|
000110  f8c020ec          STR      r2,[r0,#0xec]
;;;1008   
;;;1009   	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[1]));
000114  2212              MOVS     r2,#0x12
000116  f8c020d8          STR      r2,[r0,#0xd8]
;;;1010   	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[0])<<16 | 0x0000);
00011a  f44f1280          MOV      r2,#0x100000
00011e  f8c020dc          STR      r2,[r0,#0xdc]
;;;1011   	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[3]));
000122  4a0a              LDR      r2,|L9.332|
000124  f8c020e0          STR      r2,[r0,#0xe0]
;;;1012   #else
;;;1013   	for (iMspi = 0; iMspi<MSPI_NUM ; iMspi+=2)
;;;1014   	{
;;;1015   		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;1016   		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;1017   
;;;1018   		*pMosiAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi+1]) << 16;
;;;1019   		*pMosiAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi]);
;;;1020   
;;;1021   		*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi+1]) << 16;
;;;1022   		*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi]);
;;;1023   	}
;;;1024   #endif
;;;1025   
;;;1026   	MSPI->SINTRMSCR = DISABLE;
000128  6181              STR      r1,[r0,#0x18]
;;;1027   
;;;1028   	MSPI->SPISTART = BIT5|BIT4|BIT3|BIT2|BIT1|BIT0;
00012a  213f              MOVS     r1,#0x3f
00012c  f8c010d4          STR      r1,[r0,#0xd4]
                  |L9.304|
000130  6901              LDR      r1,[r0,#0x10]
000132  f0110f40          TST      r1,#0x40
000136  d0fb              BEQ      |L9.304|
000138  2101              MOVS     r1,#1
00013a  61c1              STR      r1,[r0,#0x1c]
;;;1029   	MSPI_IntCLR();
;;;1030   }
00013c  4770              BX       lr
;;;1031   
                          ENDP

00013e  0000              DCW      0x0000
                  |L9.320|
                          DCD      0x20020000
                  |L9.324|
                          DCD      0x40005000
                  |L9.328|
                          DCD      0x0008000c
                  |L9.332|
                          DCD      0x00140016

                          AREA ||i.MSPI_RegisterRead||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterRead PROC
;;;642    // LX98405 New - Choigs
;;;643    void MSPI_RegisterRead( uint32_t Addr, volatile uint32_t *ReadBuf, eROIC_Read_Option_t eOption)
000000  2a02              CMP      r2,#2
;;;644    {
;;;645    	uint32_t *pLengthAddr, *pMisoAddr, *pMosiAddr;
;;;646    	//    uint8_t iMspi, i; // NOTE : WarningA|째A
;;;647    	uint8_t iMspi;
;;;648    	
;;;649    	 uint32_t ulAddr ;
;;;650    	
;;;651    		ulAddr = Addr;
;;;652    	if(eOption == MSPI_READ_SM1)
000002  bf08              IT       EQ
000004  f5005080          ADDEQ    r0,r0,#0x1000
;;;653    	{
;;;654    		ulAddr += 0x1 << 12 ;  // Select SM0
;;;655    	}
;;;656    		
;;;657    	/** Protocol setup */ 
;;;658    	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;659    	{
;;;660    //		MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr;
;;;661    //		MSPI_BUF->SricRegWriteBuffer[iMspi].Command = (MSPI_READ | MSPI_SINGLE);
;;;662    		//MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nBulk = 1;//MSPI_SINGLE;
;;;663    	//	MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nWrite = 1;//MSPI_READ;
;;;664    	//	MSPI_BUF->SricRegWriteBuffer[iMspi].Data = 0;
;;;665    		
;;;666    		MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = ulAddr;
000008  4a5e              LDR      r2,|L10.388|
00000a  8010              STRH     r0,[r2,#0]
;;;667    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.Burst_Len = 1;
00000c  8893              LDRH     r3,[r2,#4]
00000e  f423737e          BIC      r3,r3,#0x3f8
000012  3308              ADDS     r3,r3,#8
000014  8093              STRH     r3,[r2,#4]
;;;668    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
000016  8893              LDRH     r3,[r2,#4]
000018  f4236340          BIC      r3,r3,#0xc00
00001c  8093              STRH     r3,[r2,#4]
;;;669    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.DualRxEn = 0;
00001e  8893              LDRH     r3,[r2,#4]
000020  f4235300          BIC      r3,r3,#0x2000
000024  8093              STRH     r3,[r2,#4]
;;;670    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ChkSum = 0;
000026  8893              LDRH     r3,[r2,#4]
000028  f4234380          BIC      r3,r3,#0x4000
00002c  8093              STRH     r3,[r2,#4]
;;;671    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.RW = 1; // 0 : write, 1 : Read
00002e  8893              LDRH     r3,[r2,#4]
000030  f4434300          ORR      r3,r3,#0x8000
000034  8093              STRH     r3,[r2,#4]
;;;672    
;;;673    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_M = 0;
000036  2300              MOVS     r3,#0
000038  8113              STRH     r3,[r2,#8]
;;;674    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_L = 0;
00003a  8193              STRH     r3,[r2,#0xc]
00003c  8210              STRH     r0,[r2,#0x10]         ;666
00003e  f8b2c014          LDRH     r12,[r2,#0x14]        ;667
000042  f42c7c7e          BIC      r12,r12,#0x3f8        ;667
000046  f10c0c08          ADD      r12,r12,#8            ;667
00004a  f8a2c014          STRH     r12,[r2,#0x14]        ;667
00004e  f8b2c014          LDRH     r12,[r2,#0x14]        ;668
000052  f42c6c40          BIC      r12,r12,#0xc00        ;668
000056  f8a2c014          STRH     r12,[r2,#0x14]        ;668
00005a  f8b2c014          LDRH     r12,[r2,#0x14]        ;669
00005e  f42c5c00          BIC      r12,r12,#0x2000       ;669
000062  f8a2c014          STRH     r12,[r2,#0x14]        ;669
000066  f8b2c014          LDRH     r12,[r2,#0x14]        ;670
00006a  f42c4c80          BIC      r12,r12,#0x4000       ;670
00006e  f8a2c014          STRH     r12,[r2,#0x14]        ;670
000072  f8b2c014          LDRH     r12,[r2,#0x14]        ;671
000076  f44c4c00          ORR      r12,r12,#0x8000       ;671
00007a  f8a2c014          STRH     r12,[r2,#0x14]        ;671
00007e  8313              STRH     r3,[r2,#0x18]         ;673
000080  8393              STRH     r3,[r2,#0x1c]
000082  8410              STRH     r0,[r2,#0x20]         ;666
000084  f8b2c024          LDRH     r12,[r2,#0x24]        ;667
000088  f42c7c7e          BIC      r12,r12,#0x3f8        ;667
00008c  f10c0c08          ADD      r12,r12,#8            ;667
000090  f8a2c024          STRH     r12,[r2,#0x24]        ;667
000094  f8b2c024          LDRH     r12,[r2,#0x24]        ;668
000098  f42c6c40          BIC      r12,r12,#0xc00        ;668
00009c  f8a2c024          STRH     r12,[r2,#0x24]        ;668
0000a0  f8b2c024          LDRH     r12,[r2,#0x24]        ;669
0000a4  f42c5c00          BIC      r12,r12,#0x2000       ;669
0000a8  f8a2c024          STRH     r12,[r2,#0x24]        ;669
0000ac  f8b2c024          LDRH     r12,[r2,#0x24]        ;670
0000b0  f42c4c80          BIC      r12,r12,#0x4000       ;670
0000b4  f8a2c024          STRH     r12,[r2,#0x24]        ;670
0000b8  f8b2c024          LDRH     r12,[r2,#0x24]        ;671
0000bc  f44c4c00          ORR      r12,r12,#0x8000       ;671
0000c0  f8a2c024          STRH     r12,[r2,#0x24]        ;671
0000c4  8513              STRH     r3,[r2,#0x28]         ;673
0000c6  8593              STRH     r3,[r2,#0x2c]
0000c8  8610              STRH     r0,[r2,#0x30]         ;666
0000ca  8e90              LDRH     r0,[r2,#0x34]         ;667
0000cc  f420707e          BIC      r0,r0,#0x3f8          ;667
0000d0  3008              ADDS     r0,r0,#8              ;667
0000d2  8690              STRH     r0,[r2,#0x34]         ;667
0000d4  8e90              LDRH     r0,[r2,#0x34]         ;668
0000d6  f4206040          BIC      r0,r0,#0xc00          ;668
0000da  8690              STRH     r0,[r2,#0x34]         ;668
0000dc  8e90              LDRH     r0,[r2,#0x34]         ;669
0000de  f4205000          BIC      r0,r0,#0x2000         ;669
0000e2  8690              STRH     r0,[r2,#0x34]         ;669
0000e4  8e90              LDRH     r0,[r2,#0x34]         ;670
0000e6  f4204080          BIC      r0,r0,#0x4000         ;670
0000ea  8690              STRH     r0,[r2,#0x34]         ;670
0000ec  8e90              LDRH     r0,[r2,#0x34]         ;671
0000ee  f4404000          ORR      r0,r0,#0x8000         ;671
0000f2  8690              STRH     r0,[r2,#0x34]         ;671
0000f4  8713              STRH     r3,[r2,#0x38]         ;673
0000f6  8793              STRH     r3,[r2,#0x3c]
;;;675    		
;;;676    	}
;;;677    	
;;;678    	/** MSPI Control Setup */
;;;679    	pLengthAddr = (uint32_t *)&MSPI->SPITRSZE0;
;;;680    	pMosiAddr = (uint32_t *)&MSPI->SPISTRTRAD01;
;;;681    	pMisoAddr = (uint32_t *)&MSPI->SPISTRTWAD01;
;;;682    
;;;683    #ifdef _DV_SAMPLE_
;;;684    
;;;685    	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;
0000f8  4823              LDR      r0,|L10.392|
0000fa  f04f0c04          MOV      r12,#4
0000fe  f8c0c0b0          STR      r12,[r0,#0xb0]
;;;686    //	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;
;;;687    //	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;
;;;688    	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;
000102  f8c0c0bc          STR      r12,[r0,#0xbc]
;;;689    	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;
000106  f8c0c0c0          STR      r12,[r0,#0xc0]
;;;690    	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;
00010a  f8c0c0c4          STR      r12,[r0,#0xc4]
;;;691    
;;;692    
;;;693    	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[1]));
00010e  f8c0c0e4          STR      r12,[r0,#0xe4]
;;;694    	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[0])<<16 | 0x0000);
000112  f8c030e8          STR      r3,[r0,#0xe8]
;;;695    	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[3]));
000116  f8dfc074          LDR      r12,|L10.396|
00011a  f8c0c0ec          STR      r12,[r0,#0xec]
;;;696    
;;;697    	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[1]));
00011e  f04f0c12          MOV      r12,#0x12
000122  f8c0c0d8          STR      r12,[r0,#0xd8]
;;;698    	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[0])<<16 | 0x0000);
000126  f44f1c80          MOV      r12,#0x100000
00012a  f8c0c0dc          STR      r12,[r0,#0xdc]
;;;699    	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[3]));
00012e  f8dfc060          LDR      r12,|L10.400|
000132  f8c0c0e0          STR      r12,[r0,#0xe0]
;;;700    #else
;;;701    	for(iMspi = 0; iMspi<MSPI_NUM ; iMspi+=2)
;;;702    	{
;;;703    		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;704    		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;705    		
;;;706    		*pMosiAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[IDX_SEND][iMspi+1]) << 16;
;;;707    		*pMosiAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[IDX_SEND][iMspi]);
;;;708    
;;;709    		*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[IDX_READ][iMspi+1]) << 16;
;;;710    		*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[IDX_READ][iMspi]);
;;;711    	}
;;;712    #endif    
;;;713    	
;;;714    	MSPI->SINTRMSCR = DISABLE;
000136  6183              STR      r3,[r0,#0x18]
;;;715    
;;;716    	/** MSPI Start */
;;;717    	MSPI->SPISTART = BIT5|BIT4|BIT3|BIT2|BIT1|BIT0;
000138  233f              MOVS     r3,#0x3f
00013a  f8c030d4          STR      r3,[r0,#0xd4]
                  |L10.318|
00013e  6903              LDR      r3,[r0,#0x10]
000140  f0130f40          TST      r3,#0x40
000144  d0fb              BEQ      |L10.318|
000146  2301              MOVS     r3,#1
000148  61c3              STR      r3,[r0,#0x1c]
;;;718    	
;;;719    	
;;;720    	MSPI_IntCLR();
;;;721    	
;;;722    	for (iMspi = 0; iMspi < MSPI_NUM; iMspi++)
;;;723    	{
;;;724    		*ReadBuf++= MSPI_BUF->SricRegReadBuffer[iMspi].Data1 << 16 |  MSPI_BUF->SricRegReadBuffer[iMspi].Data2;
00014a  f8b20044          LDRH     r0,[r2,#0x44]
00014e  f8b23040          LDRH     r3,[r2,#0x40]
000152  ea404003          ORR      r0,r0,r3,LSL #16
000156  6008              STR      r0,[r1,#0]
000158  f8b2004c          LDRH     r0,[r2,#0x4c]
00015c  f8b23048          LDRH     r3,[r2,#0x48]
000160  ea404003          ORR      r0,r0,r3,LSL #16
000164  6048              STR      r0,[r1,#4]
000166  f8b20054          LDRH     r0,[r2,#0x54]
00016a  f8b23050          LDRH     r3,[r2,#0x50]
00016e  ea404003          ORR      r0,r0,r3,LSL #16
000172  6088              STR      r0,[r1,#8]
000174  f8b2005c          LDRH     r0,[r2,#0x5c]
000178  f8b22058          LDRH     r2,[r2,#0x58]
00017c  ea404002          ORR      r0,r0,r2,LSL #16
000180  60c8              STR      r0,[r1,#0xc]
;;;725    	}
;;;726    }
000182  4770              BX       lr
;;;727    
                          ENDP

                  |L10.388|
                          DCD      0x20020000
                  |L10.392|
                          DCD      0x40005000
                  |L10.396|
                          DCD      0x0008000c
                  |L10.400|
                          DCD      0x00140016

                          AREA ||i.MSPI_RegisterWrite||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterWrite PROC
;;;898    
;;;899    void MSPI_RegisterWrite (uint32_t Addr, uint32_t value, eROIC_Read_Option_t eOption)
000000  2a02              CMP      r2,#2
;;;900    {
;;;901    	uint32_t iMspi;
;;;902    
;;;903    		uint32_t ulAddr ;
;;;904    	
;;;905    		ulAddr = Addr;
;;;906    	if(eOption == MSPI_READ_SM1)
000002  bf08              IT       EQ
000004  f5005080          ADDEQ    r0,r0,#0x1000
;;;907    	{
;;;908    		ulAddr += 0x1 << 12 ;  // Select SM0
;;;909    	}	
;;;910    	
;;;911    	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;912    	{
;;;913    		//MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr ;
;;;914    		//MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nBulk = 1;//MSPI_SINGLE;
;;;915    		//MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nWrite = 0;//MSPI_WRITE;
;;;916    		//		MSPI_BUF->SricRegWriteBuffer[iMspi].Data = value;		
;;;917    		
;;;918    	  MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = ulAddr;
000008  4a4e              LDR      r2,|L11.324|
00000a  8010              STRH     r0,[r2,#0]
;;;919    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.Burst_Len = 0;
00000c  8893              LDRH     r3,[r2,#4]
00000e  f423737e          BIC      r3,r3,#0x3f8
000012  8093              STRH     r3,[r2,#4]
;;;920    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
000014  8893              LDRH     r3,[r2,#4]
000016  f4236340          BIC      r3,r3,#0xc00
00001a  8093              STRH     r3,[r2,#4]
;;;921    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.DualRxEn = 0;
00001c  8893              LDRH     r3,[r2,#4]
00001e  f4235300          BIC      r3,r3,#0x2000
000022  8093              STRH     r3,[r2,#4]
;;;922    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ChkSum = 0;
000024  8893              LDRH     r3,[r2,#4]
000026  f4234380          BIC      r3,r3,#0x4000
00002a  8093              STRH     r3,[r2,#4]
;;;923    		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.RW = 0; // 0 : write, 1 : Read	
00002c  8893              LDRH     r3,[r2,#4]
00002e  f4234300          BIC      r3,r3,#0x8000
000032  8093              STRH     r3,[r2,#4]
;;;924    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_M = value >> 16;
000034  0c0b              LSRS     r3,r1,#16
000036  8113              STRH     r3,[r2,#8]
;;;925    		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_L = value & 0xFFFF;
000038  8191              STRH     r1,[r2,#0xc]
00003a  8210              STRH     r0,[r2,#0x10]         ;918
00003c  f8b2c014          LDRH     r12,[r2,#0x14]        ;919
000040  f42c7c7e          BIC      r12,r12,#0x3f8        ;919
000044  f8a2c014          STRH     r12,[r2,#0x14]        ;919
000048  f8b2c014          LDRH     r12,[r2,#0x14]        ;920
00004c  f42c6c40          BIC      r12,r12,#0xc00        ;920
000050  f8a2c014          STRH     r12,[r2,#0x14]        ;920
000054  f8b2c014          LDRH     r12,[r2,#0x14]        ;921
000058  f42c5c00          BIC      r12,r12,#0x2000       ;921
00005c  f8a2c014          STRH     r12,[r2,#0x14]        ;921
000060  f8b2c014          LDRH     r12,[r2,#0x14]        ;922
000064  f42c4c80          BIC      r12,r12,#0x4000       ;922
000068  f8a2c014          STRH     r12,[r2,#0x14]        ;922
00006c  f8b2c014          LDRH     r12,[r2,#0x14]        ;923
000070  f42c4c00          BIC      r12,r12,#0x8000       ;923
000074  f8a2c014          STRH     r12,[r2,#0x14]        ;923
000078  8313              STRH     r3,[r2,#0x18]         ;924
00007a  8391              STRH     r1,[r2,#0x1c]
00007c  8410              STRH     r0,[r2,#0x20]         ;918
00007e  f8b2c024          LDRH     r12,[r2,#0x24]        ;919
000082  f42c7c7e          BIC      r12,r12,#0x3f8        ;919
000086  f8a2c024          STRH     r12,[r2,#0x24]        ;919
00008a  f8b2c024          LDRH     r12,[r2,#0x24]        ;920
00008e  f42c6c40          BIC      r12,r12,#0xc00        ;920
000092  f8a2c024          STRH     r12,[r2,#0x24]        ;920
000096  f8b2c024          LDRH     r12,[r2,#0x24]        ;921
00009a  f42c5c00          BIC      r12,r12,#0x2000       ;921
00009e  f8a2c024          STRH     r12,[r2,#0x24]        ;921
0000a2  f8b2c024          LDRH     r12,[r2,#0x24]        ;922
0000a6  f42c4c80          BIC      r12,r12,#0x4000       ;922
0000aa  f8a2c024          STRH     r12,[r2,#0x24]        ;922
0000ae  f8b2c024          LDRH     r12,[r2,#0x24]        ;923
0000b2  f42c4c00          BIC      r12,r12,#0x8000       ;923
0000b6  f8a2c024          STRH     r12,[r2,#0x24]        ;923
0000ba  8513              STRH     r3,[r2,#0x28]         ;924
0000bc  8591              STRH     r1,[r2,#0x2c]
0000be  8610              STRH     r0,[r2,#0x30]         ;918
0000c0  8e90              LDRH     r0,[r2,#0x34]         ;919
0000c2  f420707e          BIC      r0,r0,#0x3f8          ;919
0000c6  8690              STRH     r0,[r2,#0x34]         ;919
0000c8  8e90              LDRH     r0,[r2,#0x34]         ;920
0000ca  f4206040          BIC      r0,r0,#0xc00          ;920
0000ce  8690              STRH     r0,[r2,#0x34]         ;920
0000d0  8e90              LDRH     r0,[r2,#0x34]         ;921
0000d2  f4205000          BIC      r0,r0,#0x2000         ;921
0000d6  8690              STRH     r0,[r2,#0x34]         ;921
0000d8  8e90              LDRH     r0,[r2,#0x34]         ;922
0000da  f4204080          BIC      r0,r0,#0x4000         ;922
0000de  8690              STRH     r0,[r2,#0x34]         ;922
0000e0  8e90              LDRH     r0,[r2,#0x34]         ;923
0000e2  f4204000          BIC      r0,r0,#0x8000         ;923
0000e6  8690              STRH     r0,[r2,#0x34]         ;923
0000e8  8713              STRH     r3,[r2,#0x38]         ;924
0000ea  8791              STRH     r1,[r2,#0x3c]
;;;926    		
;;;927    		
;;;928    	}
;;;929    
;;;930    #ifdef _DV_SAMPLE_
;;;931    	// TR Size
;;;932    	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;
0000ec  4816              LDR      r0,|L11.328|
0000ee  2104              MOVS     r1,#4
0000f0  f8c010b0          STR      r1,[r0,#0xb0]
;;;933    	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;
0000f4  f8c010b4          STR      r1,[r0,#0xb4]
;;;934    	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;
0000f8  f8c010b8          STR      r1,[r0,#0xb8]
;;;935    	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;
0000fc  f8c010bc          STR      r1,[r0,#0xbc]
;;;936    	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;
000100  f8c010c0          STR      r1,[r0,#0xc0]
;;;937    	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;
000104  f8c010c4          STR      r1,[r0,#0xc4]
;;;938    
;;;939    	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[1]));
000108  f8c010e4          STR      r1,[r0,#0xe4]
;;;940    	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[0])<<16 | 0x0000);
00010c  2100              MOVS     r1,#0
00010e  f8c010e8          STR      r1,[r0,#0xe8]
;;;941    	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[3]));
000112  4a0e              LDR      r2,|L11.332|
000114  f8c020ec          STR      r2,[r0,#0xec]
;;;942    
;;;943    	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[1]));
000118  2212              MOVS     r2,#0x12
00011a  f8c020d8          STR      r2,[r0,#0xd8]
;;;944    	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[0])<<16 | 0x0000);
00011e  f44f1280          MOV      r2,#0x100000
000122  f8c020dc          STR      r2,[r0,#0xdc]
;;;945    	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[3]));
000126  4a0a              LDR      r2,|L11.336|
000128  f8c020e0          STR      r2,[r0,#0xe0]
;;;946    #else
;;;947    	for (iMspi = 0; iMspi<MSPI_NUM ; iMspi+=2)
;;;948    	{
;;;949    		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;950    		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;951    
;;;952    		*pMosiAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi+1]) << 16;
;;;953    		*pMosiAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi]);
;;;954    
;;;955    		*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi+1]) << 16;
;;;956    		*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi]);
;;;957    	}
;;;958    #endif
;;;959    
;;;960    	MSPI->SINTRMSCR = DISABLE;
00012c  6181              STR      r1,[r0,#0x18]
;;;961    
;;;962    	MSPI->SPISTART = BIT5|BIT4|BIT3|BIT2|BIT1|BIT0;
00012e  213f              MOVS     r1,#0x3f
000130  f8c010d4          STR      r1,[r0,#0xd4]
                  |L11.308|
000134  6901              LDR      r1,[r0,#0x10]
000136  f0110f40          TST      r1,#0x40
00013a  d0fb              BEQ      |L11.308|
00013c  2101              MOVS     r1,#1
00013e  61c1              STR      r1,[r0,#0x1c]
;;;963    	MSPI_IntCLR();
;;;964    }
000140  4770              BX       lr
;;;965    
                          ENDP

000142  0000              DCW      0x0000
                  |L11.324|
                          DCD      0x20020000
                  |L11.328|
                          DCD      0x40005000
                  |L11.332|
                          DCD      0x0008000c
                  |L11.336|
                          DCD      0x00140016

                          AREA ||i.MSPI_RegisterWriteBuf||, CODE, READONLY, ALIGN=2

                  MSPI_RegisterWriteBuf PROC
;;;1032   #if (CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405)
;;;1033   void MSPI_RegisterWriteBuf(uint32_t Addr, uint32_t *WriteBuf,eROIC_Read_Option_t eOption)
000000  4a49              LDR      r2,|L12.296|
;;;1034   {
;;;1035   	uint32_t iMspi;
;;;1036   
;;;1037   	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
;;;1038   	{
;;;1039   //		MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr ;
;;;1040   //		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nBulk = 1;
;;;1041   //		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.nWrite = 0;
;;;1042   //		MSPI_BUF->SricRegWriteBuffer[iMspi].Data = WriteBuf[iMspi];
;;;1043   		
;;;1044    	  MSPI_BUF->SricRegWriteBuffer[iMspi].Addr = Addr;
000002  8010              STRH     r0,[r2,#0]
;;;1045   		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.Burst_Len = 0;
000004  8893              LDRH     r3,[r2,#4]
000006  f423737e          BIC      r3,r3,#0x3f8
00000a  8093              STRH     r3,[r2,#4]
;;;1046   		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ReadFormat = 0; // 0:32bit, 1:24bit
00000c  8893              LDRH     r3,[r2,#4]
00000e  f4236340          BIC      r3,r3,#0xc00
000012  8093              STRH     r3,[r2,#4]
;;;1047   		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.DualRxEn = 0;
000014  8893              LDRH     r3,[r2,#4]
000016  f4235300          BIC      r3,r3,#0x2000
00001a  8093              STRH     r3,[r2,#4]
;;;1048   		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.ChkSum = 0;
00001c  8893              LDRH     r3,[r2,#4]
00001e  f4234380          BIC      r3,r3,#0x4000
000022  8093              STRH     r3,[r2,#4]
;;;1049   		MSPI_BUF->SricRegWriteBuffer[iMspi].tBit.RW = 0; // 0 : write, 1 : Read
000024  8893              LDRH     r3,[r2,#4]
000026  f4234300          BIC      r3,r3,#0x8000
00002a  8093              STRH     r3,[r2,#4]
;;;1050   		
;;;1051   		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_M = WriteBuf[iMspi] >> 16;
00002c  680b              LDR      r3,[r1,#0]
00002e  0c1b              LSRS     r3,r3,#16
000030  8113              STRH     r3,[r2,#8]
;;;1052   		MSPI_BUF->SricRegWriteBuffer[iMspi].Data_L = WriteBuf[iMspi] & 0xFFFF;
000032  880b              LDRH     r3,[r1,#0]
000034  8193              STRH     r3,[r2,#0xc]
000036  8210              STRH     r0,[r2,#0x10]         ;1044
000038  8a93              LDRH     r3,[r2,#0x14]         ;1045
00003a  f423737e          BIC      r3,r3,#0x3f8          ;1045
00003e  8293              STRH     r3,[r2,#0x14]         ;1045
000040  8a93              LDRH     r3,[r2,#0x14]         ;1046
000042  f4236340          BIC      r3,r3,#0xc00          ;1046
000046  8293              STRH     r3,[r2,#0x14]         ;1046
000048  8a93              LDRH     r3,[r2,#0x14]         ;1047
00004a  f4235300          BIC      r3,r3,#0x2000         ;1047
00004e  8293              STRH     r3,[r2,#0x14]         ;1047
000050  8a93              LDRH     r3,[r2,#0x14]         ;1048
000052  f4234380          BIC      r3,r3,#0x4000         ;1048
000056  8293              STRH     r3,[r2,#0x14]         ;1048
000058  8a93              LDRH     r3,[r2,#0x14]         ;1049
00005a  f4234300          BIC      r3,r3,#0x8000         ;1049
00005e  8293              STRH     r3,[r2,#0x14]         ;1049
000060  684b              LDR      r3,[r1,#4]            ;1051
000062  0c1b              LSRS     r3,r3,#16             ;1051
000064  8313              STRH     r3,[r2,#0x18]         ;1051
000066  888b              LDRH     r3,[r1,#4]
000068  8393              STRH     r3,[r2,#0x1c]
00006a  8410              STRH     r0,[r2,#0x20]         ;1044
00006c  8c93              LDRH     r3,[r2,#0x24]         ;1045
00006e  f423737e          BIC      r3,r3,#0x3f8          ;1045
000072  8493              STRH     r3,[r2,#0x24]         ;1045
000074  8c93              LDRH     r3,[r2,#0x24]         ;1046
000076  f4236340          BIC      r3,r3,#0xc00          ;1046
00007a  8493              STRH     r3,[r2,#0x24]         ;1046
00007c  8c93              LDRH     r3,[r2,#0x24]         ;1047
00007e  f4235300          BIC      r3,r3,#0x2000         ;1047
000082  8493              STRH     r3,[r2,#0x24]         ;1047
000084  8c93              LDRH     r3,[r2,#0x24]         ;1048
000086  f4234380          BIC      r3,r3,#0x4000         ;1048
00008a  8493              STRH     r3,[r2,#0x24]         ;1048
00008c  8c93              LDRH     r3,[r2,#0x24]         ;1049
00008e  f4234300          BIC      r3,r3,#0x8000         ;1049
000092  8493              STRH     r3,[r2,#0x24]         ;1049
000094  688b              LDR      r3,[r1,#8]            ;1051
000096  0c1b              LSRS     r3,r3,#16             ;1051
000098  8513              STRH     r3,[r2,#0x28]         ;1051
00009a  890b              LDRH     r3,[r1,#8]
00009c  8593              STRH     r3,[r2,#0x2c]
00009e  8610              STRH     r0,[r2,#0x30]         ;1044
0000a0  8e90              LDRH     r0,[r2,#0x34]         ;1045
0000a2  f420707e          BIC      r0,r0,#0x3f8          ;1045
0000a6  8690              STRH     r0,[r2,#0x34]         ;1045
0000a8  8e90              LDRH     r0,[r2,#0x34]         ;1046
0000aa  f4206040          BIC      r0,r0,#0xc00          ;1046
0000ae  8690              STRH     r0,[r2,#0x34]         ;1046
0000b0  8e90              LDRH     r0,[r2,#0x34]         ;1047
0000b2  f4205000          BIC      r0,r0,#0x2000         ;1047
0000b6  8690              STRH     r0,[r2,#0x34]         ;1047
0000b8  8e90              LDRH     r0,[r2,#0x34]         ;1048
0000ba  f4204080          BIC      r0,r0,#0x4000         ;1048
0000be  8690              STRH     r0,[r2,#0x34]         ;1048
0000c0  8e90              LDRH     r0,[r2,#0x34]         ;1049
0000c2  f4204000          BIC      r0,r0,#0x8000         ;1049
0000c6  8690              STRH     r0,[r2,#0x34]         ;1049
0000c8  68c8              LDR      r0,[r1,#0xc]          ;1051
0000ca  0c00              LSRS     r0,r0,#16             ;1051
0000cc  8710              STRH     r0,[r2,#0x38]         ;1051
0000ce  8988              LDRH     r0,[r1,#0xc]
0000d0  8790              STRH     r0,[r2,#0x3c]
;;;1053   		
;;;1054   		
;;;1055   	}
;;;1056   
;;;1057   #ifdef _DV_SAMPLE_
;;;1058   	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;
0000d2  4816              LDR      r0,|L12.300|
0000d4  2104              MOVS     r1,#4
0000d6  f8c010b0          STR      r1,[r0,#0xb0]
;;;1059   	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;
0000da  f8c010b4          STR      r1,[r0,#0xb4]
;;;1060   	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;
0000de  f8c010b8          STR      r1,[r0,#0xb8]
;;;1061   	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;
0000e2  f8c010bc          STR      r1,[r0,#0xbc]
;;;1062   	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;
0000e6  f8c010c0          STR      r1,[r0,#0xc0]
;;;1063   	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;
0000ea  f8c010c4          STR      r1,[r0,#0xc4]
;;;1064   		
;;;1065   	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[1]));
0000ee  f8c010e4          STR      r1,[r0,#0xe4]
;;;1066   	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[0])<<16 | 0x0000);
0000f2  2100              MOVS     r1,#0
0000f4  f8c010e8          STR      r1,[r0,#0xe8]
;;;1067   	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegWriteBuffer[3]));
0000f8  4a0d              LDR      r2,|L12.304|
0000fa  f8c020ec          STR      r2,[r0,#0xec]
;;;1068   	
;;;1069   	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[1]));
0000fe  2212              MOVS     r2,#0x12
000100  f8c020d8          STR      r2,[r0,#0xd8]
;;;1070   	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[0])<<16 | 0x0000);
000104  f44f1280          MOV      r2,#0x100000
000108  f8c020dc          STR      r2,[r0,#0xdc]
;;;1071   	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->SricRegReadBuffer[3]));
00010c  4a09              LDR      r2,|L12.308|
00010e  f8c020e0          STR      r2,[r0,#0xe0]
;;;1072   #else
;;;1073   	for (iMspi = 0; iMspi<MSPI_NUM ; iMspi+=2)
;;;1074   	{
;;;1075   		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;1076   		*pLengthAddr++ = SZ_MSPIBUF_REGISTER;
;;;1077   
;;;1078   		*pMosiAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi+1]) << 16;
;;;1079   		*pMosiAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[0][iMspi]);
;;;1080   
;;;1081   		*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi+1]) << 16;
;;;1082   		*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->SricBuffer[1][iMspi]);
;;;1083   	}
;;;1084   #endif
;;;1085   
;;;1086   	MSPI->SINTRMSCR = DISABLE;
000112  6181              STR      r1,[r0,#0x18]
;;;1087   
;;;1088   	MSPI->SPISTART = BIT5|BIT4|BIT3|BIT2|BIT1|BIT0;
000114  213f              MOVS     r1,#0x3f
000116  f8c010d4          STR      r1,[r0,#0xd4]
                  |L12.282|
00011a  6901              LDR      r1,[r0,#0x10]
00011c  f0110f40          TST      r1,#0x40
000120  d0fb              BEQ      |L12.282|
000122  2101              MOVS     r1,#1
000124  61c1              STR      r1,[r0,#0x1c]
;;;1089   	MSPI_IntCLR();
;;;1090   }
000126  4770              BX       lr
;;;1091   #endif /* (CUSTOMER == MODEL_LGD_SW97400B || CUSTOMER == MODEL_LGD_LX98405) */
                          ENDP

                  |L12.296|
                          DCD      0x20020000
                  |L12.300|
                          DCD      0x40005000
                  |L12.304|
                          DCD      0x0008000c
                  |L12.308|
                          DCD      0x00140016

                          AREA ||i.MSPI_Reset||, CODE, READONLY, ALIGN=2

                  MSPI_Reset PROC
;;;254    
;;;255    void MSPI_Reset(void)
000000  b508              PUSH     {r3,lr}
;;;256    {
;;;257    	const tHalMspiCommonConf_t * kptHalMspiCommonConf;
;;;258    	tMSPI_SCR_t tMSPI_SCR;
;;;259    
;;;260    	kptHalMspiCommonConf = hal_mspi_GetCommonConfig();
000002  f7fffffe          BL       hal_mspi_GetCommonConfig
;;;261    	/*
;;;262    	 * MSPI Init�떆 APB Clock Domain�쓣 Reset�빐 以��떎.
;;;263    	 */
;;;264    	GPIO->tGPIO_DATA_1.tBit.GPB11 = 1;
000006  4916              LDR      r1,|L13.96|
000008  684a              LDR      r2,[r1,#4]
00000a  f4423200          ORR      r2,r2,#0x20000
00000e  604a              STR      r2,[r1,#4]
;;;265    
;;;266    	tMSPI_SCR.ulBulk = kptHalMspiCommonConf->tParam_SCR.ulBulk;
000010  6800              LDR      r0,[r0,#0]
000012  9000              STR      r0,[sp,#0]
;;;267    	tMSPI_SCR.tBit.SWPRST = 1;
000014  f89d0003          LDRB     r0,[sp,#3]
000018  f0400001          ORR      r0,r0,#1
00001c  f88d0003          STRB     r0,[sp,#3]
;;;268    	tMSPI_SCR.tBit.SWHRST = 1;
000020  f89d0003          LDRB     r0,[sp,#3]
000024  f0400002          ORR      r0,r0,#2
000028  f88d0003          STRB     r0,[sp,#3]
;;;269    	MSPI->SCR = tMSPI_SCR.ulBulk;
00002c  9a00              LDR      r2,[sp,#0]
00002e  480d              LDR      r0,|L13.100|
000030  6002              STR      r2,[r0,#0]
;;;270    	__NOP();
000032  bf00              NOP      
;;;271    	__NOP();
000034  bf00              NOP      
;;;272    	__NOP();
000036  bf00              NOP      
;;;273    	tMSPI_SCR.tBit.SWPRST = 0;
000038  f89d2003          LDRB     r2,[sp,#3]
00003c  f0220201          BIC      r2,r2,#1
000040  f88d2003          STRB     r2,[sp,#3]
;;;274    	tMSPI_SCR.tBit.SWHRST = 0;
000044  f89d2003          LDRB     r2,[sp,#3]
000048  f0220202          BIC      r2,r2,#2
00004c  f88d2003          STRB     r2,[sp,#3]
;;;275    	MSPI->SCR = tMSPI_SCR.ulBulk;
000050  9a00              LDR      r2,[sp,#0]
000052  6002              STR      r2,[r0,#0]
;;;276    
;;;277    	GPIO->tGPIO_DATA_1.tBit.GPB11 = 0;
000054  6848              LDR      r0,[r1,#4]
000056  f4203000          BIC      r0,r0,#0x20000
00005a  6048              STR      r0,[r1,#4]
;;;278    }
00005c  bd08              POP      {r3,pc}
;;;279    
                          ENDP

00005e  0000              DCW      0x0000
                  |L13.96|
                          DCD      0x40007000
                  |L13.100|
                          DCD      0x40005000

                          AREA ||i.MSPI_Set_AITMODE||, CODE, READONLY, ALIGN=2

                  MSPI_Set_AITMODE PROC
;;;305    #if USED_SW92400_OLD_SRIC_PROTOCOL
;;;306    void MSPI_Set_AITMODE(eSENSING_MODE_t eSensingMode)
000000  b570              PUSH     {r4-r6,lr}
;;;307    {
;;;308    //	uint32_t *pLengthAddr, *pMosiAddr, *pMisoAddr, *pSyncLenAddr;
;;;309    	uint8_t iMspi, i;
;;;310    
;;;311    	const tHalPwmdrvCommonConf_t * pktHalPwmdrvCommonConf = hal_pwmdrv_GetCommonConfig();
000002  f7fffffe          BL       hal_pwmdrv_GetCommonConfig
;;;312    
;;;313    	MSPI->SPIMODE_b.AitTlpMode		= spiAitMode;
000006  4c65              LDR      r4,|L14.412|
000008  f8d400d0          LDR      r0,[r4,#0xd0]
00000c  f0400001          ORR      r0,r0,#1
000010  f8c400d0          STR      r0,[r4,#0xd0]
;;;314    	MSPI->SPIMODE_b.SramFifoMode	= spiSramMode;
000014  f8d400d0          LDR      r0,[r4,#0xd0]
000018  f0400002          ORR      r0,r0,#2
00001c  f8c400d0          STR      r0,[r4,#0xd0]
;;;315    	MSPI->SPIMODE_b.HwSwMode		= spiSwMode;
000020  f8d400d0          LDR      r0,[r4,#0xd0]
000024  f0200004          BIC      r0,r0,#4
000028  f8c400d0          STR      r0,[r4,#0xd0]
;;;316    	MSPI->SPIMODE_b.BrstSnglMode	= spiBrstMode;
00002c  f8d400d0          LDR      r0,[r4,#0xd0]
000030  f0400008          ORR      r0,r0,#8
000034  f8c400d0          STR      r0,[r4,#0xd0]
;;;317    	MSPI->SPIMODE_b.SramDebugMode	= spiSramNormMode;
000038  f8d400d0          LDR      r0,[r4,#0xd0]
00003c  f0200010          BIC      r0,r0,#0x10
000040  f8c400d0          STR      r0,[r4,#0xd0]
;;;318    	MSPI->SPIMODE_b.SramWrOpt		= spiSramWrDefault;
000044  f8d400d0          LDR      r0,[r4,#0xd0]
000048  f0200020          BIC      r0,r0,#0x20
00004c  f8c400d0          STR      r0,[r4,#0xd0]
;;;319    	MSPI->SPIMODE_b.TrsPerRd		= spiTrsPerRd1;
000050  f8d400d0          LDR      r0,[r4,#0xd0]
000054  f4207040          BIC      r0,r0,#0x300
000058  f5007080          ADD      r0,r0,#0x100
00005c  f8c400d0          STR      r0,[r4,#0xd0]
;;;320    	MSPI->SPIMODE_b.TrsPerWr		= spiTrsPerWr0;
000060  f8d400d0          LDR      r0,[r4,#0xd0]
000064  f4206040          BIC      r0,r0,#0xc00
000068  f8c400d0          STR      r0,[r4,#0xd0]
;;;321    	MSPI->SPIMODE_b.PwfeSel 		= spiPwfe5Sel;
00006c  f8d400d0          LDR      r0,[r4,#0xd0]
000070  f42040e0          BIC      r0,r0,#0x7000
000074  f50040a0          ADD      r0,r0,#0x5000
000078  f8c400d0          STR      r0,[r4,#0xd0]
;;;322    	MSPI->SPIMODE_b.CommPwfeSel 	= spiCommPwfeSel;
00007c  f8d400d0          LDR      r0,[r4,#0xd0]
000080  f4404000          ORR      r0,r0,#0x8000
000084  f8c400d0          STR      r0,[r4,#0xd0]
;;;323    	MSPI->SPIMODE_b.Protocol		= spiTlpProtocol;
000088  f8d400d0          LDR      r0,[r4,#0xd0]
00008c  f4202070          BIC      r0,r0,#0xf0000
000090  f5003080          ADD      r0,r0,#0x10000
000094  f8c400d0          STR      r0,[r4,#0xd0]
;;;324    	MSPI->SPIMODE_b.RdHlfWrdMsbFrst = spiRdHlfWrdMsbFrst;
000098  f8d400d0          LDR      r0,[r4,#0xd0]
00009c  f4401080          ORR      r0,r0,#0x100000
0000a0  f8c400d0          STR      r0,[r4,#0xd0]
;;;325    	MSPI->SPIMODE_b.WrHlfWrdMsbFrst = spiWrHlfWrdLsbFrst;
0000a4  f8d400d0          LDR      r0,[r4,#0xd0]
0000a8  f4201000          BIC      r0,r0,#0x200000
0000ac  f8c400d0          STR      r0,[r4,#0xd0]
;;;326    
;;;327    	MSPI->SPIAITDMYDEL = AitDmyDelDis;
0000b0  2200              MOVS     r2,#0
0000b2  f8c42174          STR      r2,[r4,#0x174]
;;;328    	MSPI->SINTRMSCR_b.IntrMemMSCR = IntrMemEna;
0000b6  69a0              LDR      r0,[r4,#0x18]
0000b8  f0400040          ORR      r0,r0,#0x40
0000bc  61a0              STR      r0,[r4,#0x18]
;;;329    
;;;330    	for (iMspi = 0; iMspi < MSPI_NUM ; iMspi++)
0000be  4611              MOV      r1,r2
;;;331    	{
;;;332    //		MSPI_BUF->ReadCommand[iMspi].Addr = READ_ALIGNED_BUF ;
;;;333    //		MSPI_BUF->ReadCommand[iMspi].tBit.nBulk = 0;
;;;334    //		MSPI_BUF->ReadCommand[iMspi].tBit.nWrite = 1;
;;;335    // // LX98405 New - Choigs
;;;336    		
;;;337    		MSPI_BUF->ReadCommand[iMspi].Addr = READ_ALIGNED_BUF | 0x1 << 13 ; // share mode
0000c0  f44f5520          MOV      r5,#0x2800
                  |L14.196|
0000c4  ebc11041          RSB      r0,r1,r1,LSL #5
0000c8  0103              LSLS     r3,r0,#4
0000ca  f1035000          ADD      r0,r3,#0x20000000
0000ce  f5003000          ADD      r0,r0,#0x20000
0000d2  f8a05860          STRH     r5,[r0,#0x860]
;;;338    		MSPI_BUF->ReadCommand[iMspi].tBit.Burst_Len = 30;
0000d6  f8b0c864          LDRH     r12,[r0,#0x864]
0000da  f42c7c7e          BIC      r12,r12,#0x3f8
0000de  f10c0cf0          ADD      r12,r12,#0xf0
0000e2  f8a0c864          STRH     r12,[r0,#0x864]
;;;339    		MSPI_BUF->ReadCommand[iMspi].tBit.ReadFormat = 0; // 0:32bit, 3:24bit
0000e6  f8b0c864          LDRH     r12,[r0,#0x864]
0000ea  f42c6c40          BIC      r12,r12,#0xc00
0000ee  f8a0c864          STRH     r12,[r0,#0x864]
;;;340    		MSPI_BUF->ReadCommand[iMspi].tBit.DualRxEn = 0;
0000f2  f8b0c864          LDRH     r12,[r0,#0x864]
0000f6  f42c5c00          BIC      r12,r12,#0x2000
0000fa  f8a0c864          STRH     r12,[r0,#0x864]
;;;341    		MSPI_BUF->ReadCommand[iMspi].tBit.ChkSum = 0;
0000fe  f8b0c864          LDRH     r12,[r0,#0x864]
000102  f42c4c80          BIC      r12,r12,#0x4000
000106  f8a0c864          STRH     r12,[r0,#0x864]
;;;342    		MSPI_BUF->ReadCommand[iMspi].tBit.RW = 1; // 0 : write, 1 : Read		
00010a  f8b0c864          LDRH     r12,[r0,#0x864]
00010e  f44c4c00          ORR      r12,r12,#0x8000
000112  f8a0c864          STRH     r12,[r0,#0x864]
;;;343    		
;;;344    		
;;;345    		for (i = 0; i < SZ_MSPIBUF_MUXDATA*2 ; i++)
000116  2000              MOVS     r0,#0
                  |L14.280|
;;;346    		{
;;;347    			MSPI_BUF->ReadCommand[iMspi].Data[i] = 0;
000118  eb030c40          ADD      r12,r3,r0,LSL #1
00011c  f10c5c00          ADD      r12,r12,#0x20000000
000120  f50c3c00          ADD      r12,r12,#0x20000
000124  f8ac2868          STRH     r2,[r12,#0x868]
000128  1c40              ADDS     r0,r0,#1
00012a  b2c0              UXTB     r0,r0                 ;345
00012c  28f4              CMP      r0,#0xf4              ;345
00012e  d3f3              BCC      |L14.280|
000130  1c48              ADDS     r0,r1,#1              ;330
000132  b2c1              UXTB     r1,r0                 ;330
000134  2904              CMP      r1,#4                 ;330
000136  d3c5              BCC      |L14.196|
;;;348    		}
;;;349    	}
;;;350    /*
;;;351    	if(IS_ACTIVE_MODE(eSensingMode))
;;;352    	{
;;;353    		MSPI->SPITRSZE0 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;354    		MSPI->SPITRSZE1 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;355    		MSPI->SPITRSZE2 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;356    		MSPI->SPITRSZE3 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;357    		MSPI->SPITRSZE4 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;358    		MSPI->SPITRSZE5 = SZ_MSPIBUF_FINGER_FULL_FRAME;
;;;359    	}
;;;360    	else
;;;361    	{
;;;362    		MSPI->SPITRSZE0 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;363    		MSPI->SPITRSZE1 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;364    		MSPI->SPITRSZE2 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;365    		MSPI->SPITRSZE3 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;366    		MSPI->SPITRSZE4 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;367    		MSPI->SPITRSZE5 = SZ_MSPIBUF_FINGER_IDLE_FULL_FRAME;
;;;368    	}
;;;369    */
;;;370    		MSPI->SPITRSZE0 = SZ_MSPIBUF_FINGER_FULL_FRAME;
000138  f24040c4          MOV      r0,#0x4c4
00013c  f8c400b0          STR      r0,[r4,#0xb0]
;;;371    		MSPI->SPITRSZE1 = SZ_MSPIBUF_FINGER_FULL_FRAME;
000140  f8c400b4          STR      r0,[r4,#0xb4]
;;;372    		MSPI->SPITRSZE2 = SZ_MSPIBUF_FINGER_FULL_FRAME;
000144  f8c400b8          STR      r0,[r4,#0xb8]
;;;373    		MSPI->SPITRSZE3 = SZ_MSPIBUF_FINGER_FULL_FRAME;
000148  f8c400bc          STR      r0,[r4,#0xbc]
;;;374    		MSPI->SPITRSZE4 = SZ_MSPIBUF_FINGER_FULL_FRAME;
00014c  f8c400c0          STR      r0,[r4,#0xc0]
;;;375    		MSPI->SPITRSZE5 = SZ_MSPIBUF_FINGER_FULL_FRAME;
000150  f8c400c4          STR      r0,[r4,#0xc4]
;;;376    		
;;;377    	MSPI->SPITSYNCSZE0 = SZ_MSPIBUF_MUXDATA;
000154  207a              MOVS     r0,#0x7a
000156  f8c40104          STR      r0,[r4,#0x104]
;;;378    	MSPI->SPITSYNCSZE1 = SZ_MSPIBUF_MUXDATA;
00015a  f8c40108          STR      r0,[r4,#0x108]
;;;379    	MSPI->SPITSYNCSZE2 = SZ_MSPIBUF_MUXDATA;
00015e  f8c4010c          STR      r0,[r4,#0x10c]
;;;380    	MSPI->SPITSYNCSZE3 = SZ_MSPIBUF_MUXDATA;
000162  f8c40110          STR      r0,[r4,#0x110]
;;;381    	MSPI->SPITSYNCSZE4 = SZ_MSPIBUF_MUXDATA;
000166  f8c40114          STR      r0,[r4,#0x114]
;;;382    	MSPI->SPITSYNCSZE5 = SZ_MSPIBUF_MUXDATA;
00016a  f8c40118          STR      r0,[r4,#0x118]
;;;383    
;;;384    
;;;385    	MSPI->SPISTRTRAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[1]));
00016e  f44f7025          MOV      r0,#0x294
000172  f8c400e4          STR      r0,[r4,#0xe4]
;;;386    	MSPI->SPISTRTRAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[0])<<16 | 0x0000);
000176  f04f7006          MOV      r0,#0x2180000
00017a  f8c400e8          STR      r0,[r4,#0xe8]
;;;387    	MSPI->SPISTRTRAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->ReadCommand[3]));
00017e  4808              LDR      r0,|L14.416|
000180  f8c400ec          STR      r0,[r4,#0xec]
;;;388    
;;;389    	MSPI->SPISTRTWAD01 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1]));
000184  f240606a          MOV      r0,#0x66a
000188  f8c400d8          STR      r0,[r4,#0xd8]
;;;390    	MSPI->SPISTRTWAD23 = (uint32_t)(MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0])<<16 | 0x0000);
00018c  f04f6081          MOV      r0,#0x4080000
000190  f8c400dc          STR      r0,[r4,#0xdc]
;;;391    	MSPI->SPISTRTWAD45 = (uint32_t)((MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2])<<16) | MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3]));
000194  4803              LDR      r0,|L14.420|
000196  f8c400e0          STR      r0,[r4,#0xe0]
;;;392    
;;;393    }
00019a  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP

                  |L14.412|
                          DCD      0x40005000
                  |L14.416|
                          DCD      0x0310038c
                  |L14.420|
                          DCD      0x08cc0b2e

                          AREA ||i.MSPI_Set_BUFAddress_FingerMode||, CODE, READONLY, ALIGN=2

                  MSPI_Set_BUFAddress_FingerMode PROC
;;;795    
;;;796    void MSPI_Set_BUFAddress_FingerMode(int index)
000000  4911              LDR      r1,|L15.72|
;;;797    {
;;;798    	uint32_t * pMisoAddr;
;;;799    	pMisoAddr = (uint32_t *)&MSPI->SPISTRTWAD01;
;;;800    
;;;801    //	*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[4][index]) << 16;//SRIC 1
;;;802    	*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[2][index]);//SRIC 0
000002  eb000340          ADD      r3,r0,r0,LSL #1
000006  ebc31080          RSB      r0,r3,r0,LSL #6
00000a  f2423330          MOV      r3,#0x2330
00000e  680a              LDR      r2,[r1,#0]
000010  eb030380          ADD      r3,r3,r0,LSL #2
000014  ea420293          ORR      r2,r2,r3,LSR #2
000018  600a              STR      r2,[r1,#0]
;;;803    
;;;804    	*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[3][index]) << 16;//SRIC 3
00001a  f64242b8          MOV      r2,#0x2cb8
00001e  eb020280          ADD      r2,r2,r0,LSL #2
000022  1d09              ADDS     r1,r1,#4              ;802
000024  0892              LSRS     r2,r2,#2
000026  0412              LSLS     r2,r2,#16
;;;805    //	*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[5][index]);//SRIC 2
;;;806    	pMisoAddr++;
000028  600a              STR      r2,[r1,#0]
00002a  1d0a              ADDS     r2,r1,#4
;;;807    
;;;808    	*pMisoAddr = MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[1][index]) << 16;//SRIC 5
00002c  f64111a8          MOV      r1,#0x19a8
000030  eb010180          ADD      r1,r1,r0,LSL #2
000034  0889              LSRS     r1,r1,#2
;;;809    	*pMisoAddr++ |= MSPI_MEM_INDEX(&MSPI_BUF->Rawdata[0][index]);//SRIC 4
000036  f44f5381          MOV      r3,#0x1020
00003a  0409              LSLS     r1,r1,#16             ;808
00003c  eb030080          ADD      r0,r3,r0,LSL #2
000040  ea410090          ORR      r0,r1,r0,LSR #2
000044  6010              STR      r0,[r2,#0]
;;;810    }
000046  4770              BX       lr
;;;811    
                          ENDP

                  |L15.72|
                          DCD      0x400050d8

                          AREA ||i.MSPI_Set_BUFSIZE_FingerPenMode||, CODE, READONLY, ALIGN=1

                  MSPI_Set_BUFSIZE_FingerPenMode PROC
;;;760    
;;;761    void MSPI_Set_BUFSIZE_FingerPenMode(int index)
000000  4770              BX       lr
;;;762    {
;;;763    //	uint32_t *pLengthAddr;
;;;764    //	int i;
;;;765    
;;;766    	
;;;767    //	pLengthAddr = (uint32_t *)&MSPI->SPITRSZE0;
;;;768    //
;;;769    //	for (i = 0; i<MSPI_NUM ; i+=2)
;;;770    //	{
;;;771    //		*pLengthAddr++ = SZ_MSPIBUF_MUXDATA[index];
;;;772    //		*pLengthAddr++ = SZ_MSPIBUF_MUXDATA[index];
;;;773    //	}
;;;774    }
;;;775    
                          ENDP


                          AREA ||i.MSPI_Set_CLK||, CODE, READONLY, ALIGN=2

                  MSPI_Set_CLK PROC
;;;568    
;;;569    void MSPI_Set_CLK(int divisor)
000000  1e82              SUBS     r2,r0,#2
;;;570    {
;;;571    	switch (divisor)
;;;572    	{
;;;573    	case 2:
;;;574    		MSPI->SPIPCLKEND = 0X2212;
000002  4814              LDR      r0,|L17.84|
;;;575    		MSPI->SPIHCLKCOMMEND = 0X15;
000004  2115              MOVS     r1,#0x15
000006  2a07              CMP      r2,#7                 ;571
;;;576    		break;
;;;577    	case 3:
;;;578    		MSPI->SMISC      = 0X8;
;;;579    		MSPI->SPIHCLKCOMMEND = 0X15;
;;;580    		break;
;;;581    	case 4:
;;;582    		MSPI->SPIPCLKEND = 0X4434;
;;;583    		MSPI->SPIHCLKCOMMEND = 0X45;
;;;584    		break;
;;;585    	case 6:
;;;586    		MSPI->SPIPCLKEND = 0X4656;
;;;587    		MSPI->SPIHCLKCOMMEND = 0X65;
;;;588    		break;
;;;589    	case 8:
;;;590    		MSPI->SPIPCLKEND = 0X6878;
;;;591    		MSPI->SPIHCLKCOMMEND = 0X85;
;;;592    		break;
;;;593    	default:
;;;594    		break;
;;;595    	}
;;;596    }
000008  bf28              IT       CS
00000a  4770              BXCS     lr
00000c  e8dff002          TBB      [pc,r2]
000010  04090c19          DCB      0x04,0x09,0x0c,0x19
000014  12191a00          DCB      0x12,0x19,0x1a,0x00
000018  f2422212          MOV      r2,#0x2212            ;574
00001c  f8c02100          STR      r2,[r0,#0x100]        ;574
000020  e00d              B        |L17.62|
000022  2208              MOVS     r2,#8                 ;578
000024  6442              STR      r2,[r0,#0x44]         ;578
000026  e00a              B        |L17.62|
000028  f2444134          MOV      r1,#0x4434            ;582
00002c  f8c01100          STR      r1,[r0,#0x100]        ;582
000030  2145              MOVS     r1,#0x45              ;583
000032  e004              B        |L17.62|
000034  f2446156          MOV      r1,#0x4656            ;586
000038  f8c01100          STR      r1,[r0,#0x100]        ;586
00003c  2165              MOVS     r1,#0x65              ;587
                  |L17.62|
00003e  f8c0111c          STR      r1,[r0,#0x11c]        ;583
000042  4770              BX       lr
000044  f6460178          MOV      r1,#0x6878            ;590
000048  f8c01100          STR      r1,[r0,#0x100]        ;590
00004c  2185              MOVS     r1,#0x85              ;591
00004e  f8c0111c          STR      r1,[r0,#0x11c]        ;591
000052  4770              BX       lr
;;;597    
                          ENDP

                  |L17.84|
                          DCD      0x40005000

                          AREA ||i.MSPI_Set_FingerMode||, CODE, READONLY, ALIGN=2

                  MSPI_Set_FingerMode PROC
;;;732    
;;;733    void MSPI_Set_FingerMode(void)
000000  4905              LDR      r1,|L18.24|
;;;734    {
;;;735    	uint32_t *pLengthAddr;
;;;736    	int i;
;;;737    	pLengthAddr = (uint32_t *)&MSPI->SPITRSZE0;
;;;738    	for (i = 0; i<MSPI_NUM ; i+=2)
;;;739    	{
;;;740    		*pLengthAddr++ = SZ_MSPIBUF_FINGER_FULL_FRAME;
000002  f24040c4          MOV      r0,#0x4c4
000006  6008              STR      r0,[r1,#0]
000008  1d09              ADDS     r1,r1,#4
;;;741    		*pLengthAddr++ = SZ_MSPIBUF_FINGER_FULL_FRAME;
00000a  6008              STR      r0,[r1,#0]
00000c  1d09              ADDS     r1,r1,#4
00000e  6008              STR      r0,[r1,#0]            ;740
000010  1d09              ADDS     r1,r1,#4              ;740
000012  6008              STR      r0,[r1,#0]
;;;742    	}
;;;743    }
000014  4770              BX       lr
;;;744    
                          ENDP

000016  0000              DCW      0x0000
                  |L18.24|
                          DCD      0x400050b0

                          AREA ||i.MSPI_Set_FingerPenMode||, CODE, READONLY, ALIGN=2

                  MSPI_Set_FingerPenMode PROC
;;;744    
;;;745    void MSPI_Set_FingerPenMode(void)
000000  4905              LDR      r1,|L19.24|
;;;746    {
;;;747    	
;;;748    	uint32_t *pLengthAddr;
;;;749    	int i;
;;;750    	pLengthAddr = (uint32_t *)&MSPI->SPITRSZE0;
;;;751    	for (i = 0; i<MSPI_NUM ; i+=2)
;;;752    	{
;;;753    		*pLengthAddr++ = SZ_MSPIBUF_FINGERPEN_FRAME;
000002  f44f70f4          MOV      r0,#0x1e8
000006  6008              STR      r0,[r1,#0]
000008  1d09              ADDS     r1,r1,#4
;;;754    		*pLengthAddr++ = SZ_MSPIBUF_FINGERPEN_FRAME;
00000a  6008              STR      r0,[r1,#0]
00000c  1d09              ADDS     r1,r1,#4
00000e  6008              STR      r0,[r1,#0]            ;753
000010  1d09              ADDS     r1,r1,#4              ;753
000012  6008              STR      r0,[r1,#0]
;;;755    		//		*pLengthAddr++ = SZ_MSPIBUF_MUXDATA;
;;;756    		//		*pLengthAddr++ = SZ_MSPIBUF_MUXDATA;
;;;757    	}
;;;758    }
000014  4770              BX       lr
;;;759    
                          ENDP

000016  0000              DCW      0x0000
                  |L19.24|
                          DCD      0x400050b0

                          AREA ||i.MSPI_Set_GLF||, CODE, READONLY, ALIGN=2

                  MSPI_Set_GLF PROC
;;;486    
;;;487    void MSPI_Set_GLF(int divisor)
000000  1e81              SUBS     r1,r0,#2
;;;488    {
;;;489    	//* BEGIN OF MISO Glitch Filter Setting
;;;490    	switch (divisor)
;;;491    	{
;;;492    	case 2:
;;;493    		MSPI->SPIGFCR0   = 0X01010404;
000002  4849              LDR      r0,|L20.296|
000004  2907              CMP      r1,#7                 ;490
;;;494    		MSPI->SPIGFCR1   = 0X01010404;
;;;495    		MSPI->SPIGFCR2   = 0X01010404;
;;;496    		MSPI->SPIGFCR3   = 0X01010404;
;;;497    		MSPI->SPIGFCR4   = 0X01010404;
;;;498    		MSPI->SPIGFCR5   = 0X01010404;
;;;499    		MSPI->SPIGFENA0  = 0X0000000D;
;;;500    		MSPI->SPIGFENA1  = 0X0000000D;
;;;501    		MSPI->SPIGFENA2  = 0X0000000D;
;;;502    		MSPI->SPIGFENA3  = 0X0000000D;
;;;503    		MSPI->SPIGFENA4  = 0X0000000D;
;;;504    		MSPI->SPIGFENA5  = 0X0000000D;
;;;505    		break;
;;;506    	case 3:
;;;507    		MSPI->SPIGFCR0   = 0X01020606;
;;;508    		MSPI->SPIGFCR1   = 0X01020606;
;;;509    		MSPI->SPIGFCR2   = 0X01020606;
;;;510    		MSPI->SPIGFCR3   = 0X01020606;
;;;511    		MSPI->SPIGFCR4   = 0X01020606;
;;;512    		MSPI->SPIGFCR5   = 0X01020606;
;;;513    		MSPI->SPIGFENA0  = 0X0000003B;
;;;514    		MSPI->SPIGFENA1  = 0X0000003B;
;;;515    		MSPI->SPIGFENA2  = 0X0000003B;
;;;516    		MSPI->SPIGFENA3  = 0X0000003B;
;;;517    		MSPI->SPIGFENA4  = 0X0000003B;
;;;518    		MSPI->SPIGFENA5  = 0X0000003B;
;;;519    		break;
;;;520    	case 4:
;;;521    		MSPI->SPIGFCR0   = 0X01020808;
;;;522    		MSPI->SPIGFCR1   = 0X01020808;
;;;523    		MSPI->SPIGFCR2   = 0X01020808;
;;;524    		MSPI->SPIGFCR3   = 0X01020808;
;;;525    		MSPI->SPIGFCR4   = 0X01020808;
;;;526    		MSPI->SPIGFCR5   = 0X01020808;
;;;527    		MSPI->SPIGFENA0  = 0X000000E3;
;;;528    		MSPI->SPIGFENA1  = 0X000000E3;
;;;529    		MSPI->SPIGFENA2  = 0X000000E3;
;;;530    		MSPI->SPIGFENA3  = 0X000000E3;
;;;531    		MSPI->SPIGFENA4  = 0X000000E3;
;;;532    		MSPI->SPIGFENA5  = 0X000000E3;
;;;533    		break;
;;;534    	case 6:
;;;535    		MSPI->SPIGFCR0   = 0X01020C0C;
;;;536    		MSPI->SPIGFCR1   = 0X01020C0C;
;;;537    		MSPI->SPIGFCR2   = 0X01020C0C;
;;;538    		MSPI->SPIGFCR3   = 0X01020C0C;
;;;539    		MSPI->SPIGFCR4   = 0X01020C0C;
;;;540    		MSPI->SPIGFCR5   = 0X01020C0C;
;;;541    		MSPI->SPIGFENA0  = 0X00000E03;
;;;542    		MSPI->SPIGFENA1  = 0X00000E03;
;;;543    		MSPI->SPIGFENA2  = 0X00000E03;
;;;544    		MSPI->SPIGFENA3  = 0X00000E03;
;;;545    		MSPI->SPIGFENA4  = 0X00000E03;
;;;546    		MSPI->SPIGFENA5  = 0X00000E03;
;;;547    		break;
;;;548    	case 8:
;;;549    		MSPI->SPIGFCR0   = 0X01021010;
;;;550    		MSPI->SPIGFCR1   = 0X01021010;
;;;551    		MSPI->SPIGFCR2   = 0X01021010;
;;;552    		MSPI->SPIGFCR3   = 0X01021010;
;;;553    		MSPI->SPIGFCR4   = 0X01021010;
;;;554    		MSPI->SPIGFCR5   = 0X01021010;
;;;555    		MSPI->SPIGFENA0  = 0X0000E003;
;;;556    		MSPI->SPIGFENA1  = 0X0000E003;
;;;557    		MSPI->SPIGFENA2  = 0X0000E003;
;;;558    		MSPI->SPIGFENA3  = 0X0000E003;
;;;559    		MSPI->SPIGFENA4  = 0X0000E003;
;;;560    		MSPI->SPIGFENA5  = 0X0000E003;
;;;561    		break;
;;;562    	default:
;;;563    		break;
;;;564    	}
;;;565    	//* END  OF MISO Glitch Filter Setting
;;;566    
;;;567    }
000006  bf28              IT       CS
000008  4770              BXCS     lr
00000a  e8dff001          TBB      [pc,r1]
00000e  041f              DCB      0x04,0x1f
000010  3a1e551e          DCB      0x3a,0x1e,0x55,0x1e
000014  7100              DCB      0x71,0x00
000016  4945              LDR      r1,|L20.300|
000018  f8c01178          STR      r1,[r0,#0x178]        ;493
00001c  f8c01180          STR      r1,[r0,#0x180]        ;494
000020  f8c01188          STR      r1,[r0,#0x188]        ;495
000024  f8c01190          STR      r1,[r0,#0x190]        ;496
000028  f8c01198          STR      r1,[r0,#0x198]        ;497
00002c  f8c011a0          STR      r1,[r0,#0x1a0]        ;498
000030  210d              MOVS     r1,#0xd               ;499
000032  f8c0117c          STR      r1,[r0,#0x17c]        ;499
000036  f8c01184          STR      r1,[r0,#0x184]        ;500
00003a  f8c0118c          STR      r1,[r0,#0x18c]        ;501
00003e  f8c01194          STR      r1,[r0,#0x194]        ;502
000042  f8c0119c          STR      r1,[r0,#0x19c]        ;503
000046  f8c011a4          STR      r1,[r0,#0x1a4]        ;504
00004a  4770              BX       lr
00004c  4938              LDR      r1,|L20.304|
00004e  f8c01178          STR      r1,[r0,#0x178]        ;507
000052  f8c01180          STR      r1,[r0,#0x180]        ;508
000056  f8c01188          STR      r1,[r0,#0x188]        ;509
00005a  f8c01190          STR      r1,[r0,#0x190]        ;510
00005e  f8c01198          STR      r1,[r0,#0x198]        ;511
000062  f8c011a0          STR      r1,[r0,#0x1a0]        ;512
000066  213b              MOVS     r1,#0x3b              ;513
000068  f8c0117c          STR      r1,[r0,#0x17c]        ;513
00006c  f8c01184          STR      r1,[r0,#0x184]        ;514
000070  f8c0118c          STR      r1,[r0,#0x18c]        ;515
000074  f8c01194          STR      r1,[r0,#0x194]        ;516
000078  f8c0119c          STR      r1,[r0,#0x19c]        ;517
00007c  f8c011a4          STR      r1,[r0,#0x1a4]        ;518
000080  4770              BX       lr
000082  492c              LDR      r1,|L20.308|
000084  f8c01178          STR      r1,[r0,#0x178]        ;521
000088  f8c01180          STR      r1,[r0,#0x180]        ;522
00008c  f8c01188          STR      r1,[r0,#0x188]        ;523
000090  f8c01190          STR      r1,[r0,#0x190]        ;524
000094  f8c01198          STR      r1,[r0,#0x198]        ;525
000098  f8c011a0          STR      r1,[r0,#0x1a0]        ;526
00009c  21e3              MOVS     r1,#0xe3              ;527
00009e  f8c0117c          STR      r1,[r0,#0x17c]        ;527
0000a2  f8c01184          STR      r1,[r0,#0x184]        ;528
0000a6  f8c0118c          STR      r1,[r0,#0x18c]        ;529
0000aa  f8c01194          STR      r1,[r0,#0x194]        ;530
0000ae  f8c0119c          STR      r1,[r0,#0x19c]        ;531
0000b2  f8c011a4          STR      r1,[r0,#0x1a4]        ;532
0000b6  4770              BX       lr
0000b8  491f              LDR      r1,|L20.312|
0000ba  f8c01178          STR      r1,[r0,#0x178]        ;535
0000be  f8c01180          STR      r1,[r0,#0x180]        ;536
0000c2  f8c01188          STR      r1,[r0,#0x188]        ;537
0000c6  f8c01190          STR      r1,[r0,#0x190]        ;538
0000ca  f8c01198          STR      r1,[r0,#0x198]        ;539
0000ce  f8c011a0          STR      r1,[r0,#0x1a0]        ;540
0000d2  f6406103          MOV      r1,#0xe03             ;541
0000d6  f8c0117c          STR      r1,[r0,#0x17c]        ;541
0000da  f8c01184          STR      r1,[r0,#0x184]        ;542
0000de  f8c0118c          STR      r1,[r0,#0x18c]        ;543
0000e2  f8c01194          STR      r1,[r0,#0x194]        ;544
0000e6  f8c0119c          STR      r1,[r0,#0x19c]        ;545
0000ea  f8c011a4          STR      r1,[r0,#0x1a4]        ;546
0000ee  4770              BX       lr
0000f0  4912              LDR      r1,|L20.316|
0000f2  f8c01178          STR      r1,[r0,#0x178]        ;549
0000f6  f8c01180          STR      r1,[r0,#0x180]        ;550
0000fa  f8c01188          STR      r1,[r0,#0x188]        ;551
0000fe  f8c01190          STR      r1,[r0,#0x190]        ;552
000102  f8c01198          STR      r1,[r0,#0x198]        ;553
000106  f8c011a0          STR      r1,[r0,#0x1a0]        ;554
00010a  f24e0103          MOV      r1,#0xe003            ;555
00010e  f8c0117c          STR      r1,[r0,#0x17c]        ;555
000112  f8c01184          STR      r1,[r0,#0x184]        ;556
000116  f8c0118c          STR      r1,[r0,#0x18c]        ;557
00011a  f8c01194          STR      r1,[r0,#0x194]        ;558
00011e  f8c0119c          STR      r1,[r0,#0x19c]        ;559
000122  f8c011a4          STR      r1,[r0,#0x1a4]        ;560
000126  4770              BX       lr
;;;568    
                          ENDP

                  |L20.296|
                          DCD      0x40005000
                  |L20.300|
                          DCD      0x01010404
                  |L20.304|
                          DCD      0x01020606
                  |L20.308|
                          DCD      0x01020808
                  |L20.312|
                          DCD      0x01020c0c
                  |L20.316|
                          DCD      0x01021010

                          AREA ||i.MSPI_Set_TLPMODE||, CODE, READONLY, ALIGN=2

                  MSPI_Set_TLPMODE PROC
;;;279    
;;;280    void MSPI_Set_TLPMODE(void)
000000  4831              LDR      r0,|L21.200|
;;;281    {
;;;282    	MSPI->SPIMODE_b.AitTlpMode 		= spiTlpMode;
000002  f8501fd0          LDR      r1,[r0,#0xd0]!
000006  f0210101          BIC      r1,r1,#1
00000a  f840197c          STR      r1,[r0],#-0x7c
;;;283    	MSPI->SPIMODE_b.SramFifoMode 	= spiSramMode;
00000e  6fc1              LDR      r1,[r0,#0x7c]
000010  f0410102          ORR      r1,r1,#2
000014  67c1              STR      r1,[r0,#0x7c]
;;;284    	MSPI->SPIMODE_b.HwSwMode 		= spiSwMode;
000016  6fc1              LDR      r1,[r0,#0x7c]
000018  f0210104          BIC      r1,r1,#4
00001c  67c1              STR      r1,[r0,#0x7c]
;;;285    	MSPI->SPIMODE_b.BrstSnglMode 	= spiSnglMode;
00001e  6fc1              LDR      r1,[r0,#0x7c]
000020  f0410108          ORR      r1,r1,#8
000024  67c1              STR      r1,[r0,#0x7c]
;;;286    	MSPI->SPIMODE_b.SramDebugMode 	= spiSramNormMode;
000026  6fc1              LDR      r1,[r0,#0x7c]
000028  f0210110          BIC      r1,r1,#0x10
00002c  67c1              STR      r1,[r0,#0x7c]
;;;287    	MSPI->SPIMODE_b.SramWrOpt 		= spiSramWrOpt;
00002e  6fc1              LDR      r1,[r0,#0x7c]
000030  f0410120          ORR      r1,r1,#0x20
000034  67c1              STR      r1,[r0,#0x7c]
;;;288    	MSPI->SPIMODE_b.TrsPerRd 		= spiTrsPerRd1;
000036  6fc1              LDR      r1,[r0,#0x7c]
000038  f4217140          BIC      r1,r1,#0x300
00003c  f5017180          ADD      r1,r1,#0x100
000040  67c1              STR      r1,[r0,#0x7c]
;;;289    	MSPI->SPIMODE_b.TrsPerWr 		= spiTrsPerWr1;
000042  6fc1              LDR      r1,[r0,#0x7c]
000044  f4216140          BIC      r1,r1,#0xc00
000048  f5016180          ADD      r1,r1,#0x400
00004c  67c1              STR      r1,[r0,#0x7c]
;;;290    	MSPI->SPIMODE_b.PwfeSel 		= spiPwfe5Sel;
00004e  6fc1              LDR      r1,[r0,#0x7c]
000050  f42141e0          BIC      r1,r1,#0x7000
000054  f50141a0          ADD      r1,r1,#0x5000
000058  67c1              STR      r1,[r0,#0x7c]
;;;291    	MSPI->SPIMODE_b.CommPwfeSel 	= spiCommPwfeSel;
00005a  6fc1              LDR      r1,[r0,#0x7c]
00005c  f4414100          ORR      r1,r1,#0x8000
000060  67c1              STR      r1,[r0,#0x7c]
;;;292    	MSPI->SPIMODE_b.Protocol 		= spiTlpProtocol;
000062  6fc1              LDR      r1,[r0,#0x7c]
000064  f4212170          BIC      r1,r1,#0xf0000
000068  f5013180          ADD      r1,r1,#0x10000
00006c  67c1              STR      r1,[r0,#0x7c]
;;;293    	MSPI->SPIMODE_b.RdHlfWrdMsbFrst = spiRdHlfWrdLsbFrst;
00006e  6fc1              LDR      r1,[r0,#0x7c]
000070  f4211180          BIC      r1,r1,#0x100000
000074  67c1              STR      r1,[r0,#0x7c]
;;;294    	MSPI->SPIMODE_b.WrHlfWrdMsbFrst = spiWrHlfWrdLsbFrst;
000076  6fc1              LDR      r1,[r0,#0x7c]
000078  f4211100          BIC      r1,r1,#0x200000
00007c  67c1              STR      r1,[r0,#0x7c]
;;;295    
;;;296    	MSPI->SPISTATELEN_b.PreShftLen	 = 2;//16;
00007e  6f81              LDR      r1,[r0,#0x78]
000080  f02101ff          BIC      r1,r1,#0xff
000084  1c89              ADDS     r1,r1,#2
000086  6781              STR      r1,[r0,#0x78]
;;;297    	MSPI->SPISTATELEN_b.TmpIdleLen 	 = 2;
000088  6f81              LDR      r1,[r0,#0x78]
00008a  f421417f          BIC      r1,r1,#0xff00
00008e  f5017100          ADD      r1,r1,#0x200
000092  6781              STR      r1,[r0,#0x78]
;;;298    	MSPI->SPISTATELEN_b.PostShftLen  = 15;
000094  6f81              LDR      r1,[r0,#0x78]
000096  f421017f          BIC      r1,r1,#0xff0000
00009a  f5012170          ADD      r1,r1,#0xf0000
00009e  6781              STR      r1,[r0,#0x78]
;;;299    	MSPI->SPISTATELEN_b.SnglIdleLen  = 2;
0000a0  6f81              LDR      r1,[r0,#0x78]
0000a2  f0216170          BIC      r1,r1,#0xf000000
0000a6  f1017100          ADD      r1,r1,#0x2000000
0000aa  6781              STR      r1,[r0,#0x78]
;;;300    	MSPI->SPISTATELEN_b.AitIdleLen 	 = 10;
0000ac  6f81              LDR      r1,[r0,#0x78]
0000ae  f0214170          BIC      r1,r1,#0xf0000000
0000b2  f1a141c0          SUB      r1,r1,#0x60000000
0000b6  6781              STR      r1,[r0,#0x78]
;;;301    
;;;302    	MSPI->SINTRMSCR_b.IntrMemMSCR = IntrMemDis;
0000b8  f8501c3c          LDR      r1,[r0,#-0x3c]
0000bc  f0210140          BIC      r1,r1,#0x40
0000c0  f8401c3c          STR      r1,[r0,#-0x3c]
;;;303    }
0000c4  4770              BX       lr
;;;304    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L21.200|
                          DCD      0x40005000

                          AREA ||i.MSPI_Single_Read||, CODE, READONLY, ALIGN=1

                  MSPI_Single_Read PROC
;;;1140   
;;;1141   uint16_t MSPI_Single_Read(uint8_t ch, uint16_t Addr)
000000  4770              BX       lr
;;;1142   {
;;;1143   	uint16_t usData;
;;;1144   	return usData;
;;;1145   //	MSPI_BUF->SricBuffer[IDX_SEND][ch].Addr = Addr;
;;;1146   //	MSPI_BUF->SricBuffer[IDX_SEND][ch].Command = (MSPI_READ | MSPI_SINGLE);
;;;1147   //
;;;1148   //	// SPIENA Enable �릺�뼱�엳�뒗 梨꾨꼸�뿉 ���빐�꽌�뒗 諛섎뱶�떆 W/R Size �꽕�젙
;;;1149   //	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1150   //	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1151   //	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1152   //	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1153   //	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1154   //	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1155   //
;;;1156   //	// Read Buffer Start Address Setting
;;;1157   //	switch (ch)
;;;1158   //	{
;;;1159   //		case MSPI0:
;;;1160   //			MSPI->SPISTRTWAD01 |= MSPI_MEM_LSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1161   //			break;
;;;1162   //		case MSPI1:
;;;1163   //			MSPI->SPISTRTWAD01 |= MSPI_MEM_MSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1164   //			break;
;;;1165   //		case MSPI2:
;;;1166   //			MSPI->SPISTRTWAD23 |= MSPI_MEM_LSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1167   //			break;
;;;1168   //		case MSPI3:
;;;1169   //			MSPI->SPISTRTWAD23 |= MSPI_MEM_MSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1170   //			break;
;;;1171   //		case MSPI4:
;;;1172   //			MSPI->SPISTRTWAD45 |= MSPI_MEM_LSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1173   //			break;
;;;1174   //		case MSPI5:
;;;1175   //			MSPI->SPISTRTWAD45 |= MSPI_MEM_MSB(&MSPI_BUF->SricBuffer[IDX_READ][ch]);
;;;1176   //			break;
;;;1177   //		default:
;;;1178   //			break;
;;;1179   //	}
;;;1180   //
;;;1181   //	MSPI->SINTRMSCR = DISABLE;
;;;1182   //
;;;1183   //	// SPIENA Enable �릺�뼱�엳�뒗 梨꾨꼸�뿉 ���빐�꽌�뒗 諛섎뱶�떆 Bit �꽕�젙
;;;1184   //	MSPI->SPISTART = BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0;
;;;1185   //	MSPI_IntCLR();
;;;1186   //
;;;1187   //	return (MSPI_BUF->SricBuffer[IDX_READ][ch].Addr);
;;;1188   }
;;;1189   #else /* USED_SW92400_OLD_SRIC_PROTOCOL */
                          ENDP


                          AREA ||i.MSPI_Single_Write||, CODE, READONLY, ALIGN=1

                  MSPI_Single_Write PROC
;;;1093   #if USED_SW92400_OLD_SRIC_PROTOCOL
;;;1094   void MSPI_Single_Write(uint8_t ch, uint16_t Addr, uint16_t value)
000000  4770              BX       lr
;;;1095   {
;;;1096   //	MSPI_BUF->SricRegWriteBuffer[ch].Addr = Addr;
;;;1097   //	MSPI_BUF->SricRegWriteBuffer[ch].tBit.nBulk = 1;
;;;1098   //	MSPI_BUF->SricRegWriteBuffer[ch].tBit.nWrite = 0;
;;;1099   //	MSPI_BUF->SricRegWriteBuffer[ch].Data = value;
;;;1100   //
;;;1101   //	// SPIENA Enable �릺�뼱�엳�뒗 梨꾨꼸�뿉 ���빐�꽌�뒗 諛섎뱶�떆 W/R Size �꽕�젙
;;;1102   //	MSPI->SPITRSZE0 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1103   //	MSPI->SPITRSZE1 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1104   //	MSPI->SPITRSZE2 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1105   //	MSPI->SPITRSZE3 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1106   //	MSPI->SPITRSZE4 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1107   //	MSPI->SPITRSZE5 = SZ_MSPIBUF_REGISTER;	// Tx/Rx buffer Size (Dummy 2 + 1)
;;;1108   //
;;;1109   //	// Write Buffer Start Address Setting
;;;1110   //	switch (ch)
;;;1111   //	{
;;;1112   //		case MSPI0:
;;;1113   //			MSPI->SPISTRTRAD01 |= MSPI_MEM_LSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1114   //			break;
;;;1115   //		case MSPI1:
;;;1116   //			MSPI->SPISTRTRAD01 |= MSPI_MEM_MSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1117   //			break;
;;;1118   //		case MSPI2:
;;;1119   //			MSPI->SPISTRTRAD23 |= MSPI_MEM_LSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1120   //			break;
;;;1121   //		case MSPI3:
;;;1122   //			MSPI->SPISTRTRAD23 |= MSPI_MEM_MSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1123   //			break;
;;;1124   //		case MSPI4:
;;;1125   //			MSPI->SPISTRTRAD45 |= MSPI_MEM_LSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1126   //			break;
;;;1127   //		case MSPI5:
;;;1128   //			MSPI->SPISTRTRAD45 |= MSPI_MEM_MSB(&MSPI_BUF->SricRegWriteBuffer[ch]);
;;;1129   //			break;
;;;1130   //		default:
;;;1131   //			break;
;;;1132   //	}
;;;1133   //
;;;1134   //	MSPI->SINTRMSCR = DISABLE;
;;;1135   //
;;;1136   //	// SPIENA Enable �릺�뼱�엳�뒗 梨꾨꼸�뿉 ���빐�꽌�뒗 諛섎뱶�떆 Bit �꽕�젙
;;;1137   //	MSPI->SPISTART = BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0;
;;;1138   //	MSPI_IntCLR();
;;;1139   }
;;;1140   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  pTestMSPI
                          DCD      0x40005000

                          AREA ||area_number.27||, DATA, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.data||
                  HOPP_FLAG
000000  00                DCB      0x00

                          AREA ||area_number.28||, DATA, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.data||
                  gFrameCnt
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\spi\\mspi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2d93c40c____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_mspi_c_2d93c40c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2d93c40c____REVSH|
#line 402
|__asm___6_mspi_c_2d93c40c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_mspi_c_2d93c40c____RRX|
#line 587
|__asm___6_mspi_c_2d93c40c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
