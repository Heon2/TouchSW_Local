; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\flitf.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\flitf.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\flitf.crf ..\..\Hal\flitf\flitf.c]
                          THUMB

                          AREA ||i.FCR_UnLock||, CODE, READONLY, ALIGN=2

                  FCR_UnLock PROC
;;;60     #define FSR_WFIC_EN			0x00020000
;;;61     void FCR_UnLock(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63       FLITF->FKEYR=0x76543210;
000002  4c05              LDR      r4,|L1.24|
000004  4803              LDR      r0,|L1.20|
;;;64     	udelay(10);
000006  6060              STR      r0,[r4,#4]
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       udelay
;;;65       FLITF->FKEYR=0xFEDCBA98;
00000e  4803              LDR      r0,|L1.28|
000010  6060              STR      r0,[r4,#4]
;;;66     //  printf("> FCR_LockRelease\n");
;;;67     }
000012  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  |L1.20|
                          DCD      0x76543210
                  |L1.24|
                          DCD      0x40001000
                  |L1.28|
                          DCD      0xfedcba98

                          AREA ||i.FLASH_PER||, CODE, READONLY, ALIGN=2

                  FLASH_PER PROC
;;;109    }
;;;110    void FLASH_PER(uint8_t TM, uint8_t INF, uint32_t adr)
000000  ea412000          ORR      r0,r1,r0,LSL #8
;;;111    {
;;;112    //  printf("Page Erase = %x @ Address = %x\n", adr, adr);
;;;113    
;;;114      FLITF->FCR1=0x00000000l
000004  f0400110          ORR      r1,r0,#0x10
000008  4803              LDR      r0,|L2.24|
00000a  e9c02105          STRD     r2,r1,[r0,#0x14]
;;;115              | TM<<8   // `FCR1_TM          
;;;116              | 1<<4    // `FCR1_PERASE          
;;;117              | INF<<0; // `FCR1_INF          
;;;118      FLITF->FAR=adr;
;;;119      FLITF->FCR=0x00000000 
00000e  f2412142          MOV      r1,#0x1242
;;;120              | 0<<31   //`FCR_NVSSEL 
;;;121              | 1<<12   //`FCR_EOPIE 
;;;122              | 1<<9    //`FCR_WFIETEN 
;;;123              | 1<<6    //`FCR_STRT 
;;;124              | 1<<1;   //`FCR_PER;
;;;125      __WFI();
000012  6101              STR      r1,[r0,#0x10]
000014  bf30              WFI      
;;;126      //__WFI_DEEP();   // not operation with FLITF interrupt
;;;127    }
000016  4770              BX       lr
;;;128    
                          ENDP

                  |L2.24|
                          DCD      0x40001000

                          AREA ||i.FLASH_RD||, CODE, READONLY, ALIGN=1

                  FLASH_RD PROC
;;;192    
;;;193    uint32_t FLASH_RD(uint32_t adr)
000000  4770              BX       lr
;;;194    {
;;;195      uint32_t dat;
;;;196    
;;;197    //  FLITF->FAR=adr; // (64th page)
;;;198    //  FLITF->FCR=0x00000000 
;;;199    //          | 1<<31 //`FCR_NVSSEL 
;;;200    //          | 1<<12 //`FCR_EOPIE 
;;;201    //          | 1<<9  //`FCR_WFIETEN 
;;;202    //          | 1<<6  //`FCR_STRT 
;;;203    //          | 1<<3; //`FCR_READ;
;;;204    //  __WFI();
;;;205    //  dat = HW_REG(adr);
;;;206    //  printf("Read Word = %x @ Address = %x\n", dat, adr);
;;;207    
;;;208      return dat;
;;;209    }
;;;210    
                          ENDP


                          AREA ||i.FLASH_Read||, CODE, READONLY, ALIGN=1

                  FLASH_Read PROC
;;;238    
;;;239    uint32_t FLASH_Read(uint32_t addr)
000000  6800              LDR      r0,[r0,#0]
;;;240    {	
;;;241    	return (*(volatile uint32_t *)addr);
;;;242    }
000002  4770              BX       lr
;;;243    
                          ENDP


                          AREA ||i.FLASH_WR||, CODE, READONLY, ALIGN=2

                  FLASH_WR PROC
;;;129    
;;;130    void FLASH_WR(uint8_t TM, uint8_t INF, uint8_t PROG, uint8_t WRONLY, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;131                  uint32_t str_adr, uint32_t end_adr, 
;;;132                  uint32_t d0, uint32_t d1, uint32_t d2, uint32_t d3, uint32_t d4, 
;;;133                  uint32_t d5, uint32_t d6, uint32_t d7, uint32_t d8, uint32_t d9, 
;;;134                  uint32_t d10, uint32_t d11, uint32_t d12, uint32_t d13, uint32_t d14, 
;;;135                  uint32_t d15, uint32_t d16, uint32_t d17, uint32_t d18, uint32_t d19, 
;;;136                  uint32_t d20, uint32_t d21, uint32_t d22, uint32_t d23, uint32_t d24, 
;;;137                  uint32_t d25, uint32_t d26, uint32_t d27, uint32_t d28, uint32_t d29, 
;;;138                  uint32_t d30, uint32_t d31                                            )
;;;139    {
;;;140    //  printf("Program Word @ Address = %x\n", str_adr);
;;;141      
;;;142      FLITF->FCR1=0x00000000
000004  ea4f2e00          LSL      lr,r0,#8
000008  9802              LDR      r0,[sp,#8]
00000a  e9dd1b0d          LDRD     r1,r11,[sp,#0x34]     ;139
00000e  ea4e0ec0          ORR      lr,lr,r0,LSL #3
000012  9803              LDR      r0,[sp,#0xc]
000014  e9ddc323          LDRD     r12,r3,[sp,#0x8c]     ;139
000018  ea4e0e80          ORR      lr,lr,r0,LSL #2
00001c  9801              LDR      r0,[sp,#4]
00001e  e9dd541d          LDRD     r5,r4,[sp,#0x74]      ;139
000022  ea4e0e00          ORR      lr,lr,r0
000026  e9dd7615          LDRD     r7,r6,[sp,#0x54]      ;139
00002a  4830              LDR      r0,|L5.236|
;;;143              | TM<<8     // `FCR1_TM          
;;;144              | PROG<<3   // `FCR1_PROG          
;;;145              | WRONLY<<2 // `FCR1_WRONLY
;;;146              | INF<<0;   // `FCR1_INF          
;;;147    
;;;148      FLITF->FCR2     = (end_adr - str_adr)/4  ; 
00002c  ebab0b01          SUB      r11,r11,r1
000030  ea4f0b9b          LSR      r11,r11,#2
000034  f8dda03c          LDR      r10,[sp,#0x3c]
000038  f8dd9044          LDR      r9,[sp,#0x44]
00003c  f8dd804c          LDR      r8,[sp,#0x4c]
000040  9a2e              LDR      r2,[sp,#0xb8]
;;;149      FLITF->FAR      = str_adr;
;;;150      
;;;151      FLITF->FWDRLW   = d0;
000042  f8c0b01c          STR      r11,[r0,#0x1c]
000046  f8c0a028          STR      r10,[r0,#0x28]
00004a  e9c01e05          STRD     r1,lr,[r0,#0x14]
;;;152      FLITF->FWDRLW01 = d1;               
00004e  9910              LDR      r1,[sp,#0x40]
000050  e9c01940          STRD     r1,r9,[r0,#0x100]
;;;153      FLITF->FWDRLW02 = d2;               
;;;154      FLITF->FWDRLW03 = d3;               
000054  9912              LDR      r1,[sp,#0x48]
000056  e9c01842          STRD     r1,r8,[r0,#0x108]
;;;155      FLITF->FWDRLW04 = d4;               
;;;156      FLITF->FWDRLW05 = d5;               
;;;157      FLITF->FWDRLW06 = d6;               
;;;158      FLITF->FWDRLW07 = d7;               
00005a  9914              LDR      r1,[sp,#0x50]
00005c  f8c06118          STR      r6,[r0,#0x118]
000060  e9c01744          STRD     r1,r7,[r0,#0x110]
;;;159      FLITF->FWDRLW08 = d8;               
000064  9917              LDR      r1,[sp,#0x5c]
;;;160      FLITF->FWDRLW09 = d9;               
000066  f8c0111c          STR      r1,[r0,#0x11c]
00006a  9918              LDR      r1,[sp,#0x60]
;;;161      FLITF->FWDRLW10 = d10;               
00006c  f8c01120          STR      r1,[r0,#0x120]
000070  9919              LDR      r1,[sp,#0x64]
;;;162      FLITF->FWDRLW11 = d11;               
000072  f8c01124          STR      r1,[r0,#0x124]
000076  991a              LDR      r1,[sp,#0x68]
;;;163      FLITF->FWDRLW12 = d12;               
000078  f8c01128          STR      r1,[r0,#0x128]
00007c  991b              LDR      r1,[sp,#0x6c]
;;;164      FLITF->FWDRLW13 = d13;               
00007e  f8c0112c          STR      r1,[r0,#0x12c]
;;;165      FLITF->FWDRLW14 = d14;               
;;;166      FLITF->FWDRLW15 = d15;               
000082  991c              LDR      r1,[sp,#0x70]
000084  f8c04138          STR      r4,[r0,#0x138]
000088  e9c0154c          STRD     r1,r5,[r0,#0x130]
;;;167      FLITF->FWDRLW16 = d16;               
00008c  991f              LDR      r1,[sp,#0x7c]
;;;168      FLITF->FWDRLW17 = d17;               
00008e  f8c0113c          STR      r1,[r0,#0x13c]
000092  9920              LDR      r1,[sp,#0x80]
;;;169      FLITF->FWDRLW18 = d18;               
000094  f8c01140          STR      r1,[r0,#0x140]
000098  9921              LDR      r1,[sp,#0x84]
;;;170      FLITF->FWDRLW19 = d19;               
00009a  f8c01144          STR      r1,[r0,#0x144]
;;;171      FLITF->FWDRLW20 = d20;               
;;;172      FLITF->FWDRLW21 = d21;               
00009e  9922              LDR      r1,[sp,#0x88]
0000a0  f8c03150          STR      r3,[r0,#0x150]
0000a4  e9c01c52          STRD     r1,r12,[r0,#0x148]
;;;173      FLITF->FWDRLW22 = d22;               
0000a8  9925              LDR      r1,[sp,#0x94]
;;;174      FLITF->FWDRLW23 = d23;               
0000aa  f8c01154          STR      r1,[r0,#0x154]
0000ae  9926              LDR      r1,[sp,#0x98]
;;;175      FLITF->FWDRLW24 = d24;               
0000b0  f8c01158          STR      r1,[r0,#0x158]
0000b4  9927              LDR      r1,[sp,#0x9c]
;;;176      FLITF->FWDRLW25 = d25;               
0000b6  f8c0115c          STR      r1,[r0,#0x15c]
0000ba  9928              LDR      r1,[sp,#0xa0]
;;;177      FLITF->FWDRLW26 = d26;               
0000bc  f8c01160          STR      r1,[r0,#0x160]
0000c0  9929              LDR      r1,[sp,#0xa4]
;;;178      FLITF->FWDRLW27 = d27;               
0000c2  f8c01164          STR      r1,[r0,#0x164]
0000c6  992a              LDR      r1,[sp,#0xa8]
;;;179      FLITF->FWDRLW28 = d28;               
0000c8  f8c01168          STR      r1,[r0,#0x168]
0000cc  992b              LDR      r1,[sp,#0xac]
;;;180      FLITF->FWDRLW29 = d29;               
0000ce  f8c0116c          STR      r1,[r0,#0x16c]
0000d2  992c              LDR      r1,[sp,#0xb0]
;;;181      FLITF->FWDRLW30 = d30;               
0000d4  f8c01170          STR      r1,[r0,#0x170]
0000d8  992d              LDR      r1,[sp,#0xb4]
0000da  e9c0125d          STRD     r1,r2,[r0,#0x174]
;;;182      FLITF->FWDRLW31 = d31;               
;;;183    
;;;184      FLITF->FCR=0x00000000 
0000de  f2412141          MOV      r1,#0x1241
;;;185              | 0<<31 //`FCR_NVSSEL 
;;;186              | 1<<12 //`FCR_EOPIE 
;;;187              | 1<<9  //`FCR_WFIETEN 
;;;188              | 1<<6  //`FCR_STRT 
;;;189              | 1<<0; //`FCR_PG;
;;;190      __WFI();
0000e2  6101              STR      r1,[r0,#0x10]
0000e4  bf30              WFI      
;;;191    }
0000e6  b004              ADD      sp,sp,#0x10
0000e8  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP

                  |L5.236|
                          DCD      0x40001000

                          AREA ||i.FLASH_Write||, CODE, READONLY, ALIGN=2

                  FLASH_Write PROC
;;;210    
;;;211    void FLASH_Write(uint32_t addr, uint32_t val)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
;;;213    
;;;214    	FLITF->ISPMSCR = SCB_VECTKEY | 0x00000001;
000002  4c1b              LDR      r4,|L6.112|
000004  4606              MOV      r6,r0                 ;212
000006  4819              LDR      r0,|L6.108|
000008  64e0              STR      r0,[r4,#0x4c]
00000a  481a              LDR      r0,|L6.116|
00000c  6060              STR      r0,[r4,#4]
00000e  460d              MOV      r5,r1                 ;212
000010  200a              MOVS     r0,#0xa               ;212
000012  f7fffffe          BL       udelay
000016  4818              LDR      r0,|L6.120|
;;;215    	while( (FLITF->ISPMSCR) == 0x00000000 );
;;;216    	FCR_UnLock();
;;;217    	while(FLITF->FCR_b.LOCK!=0) ;	
000018  6060              STR      r0,[r4,#4]
00001a  6922              LDR      r2,[r4,#0x10]
                  |L6.28|
00001c  f0120f80          TST      r2,#0x80
000020  d1fc              BNE      |L6.28|
;;;218    	Protection_UnLock();
000022  f7fffffe          BL       Protection_UnLock
;;;219    	FLITF->FCR1 = 0x0;
000026  2000              MOVS     r0,#0
;;;220    	FLITF->FCR1_b.FCR1_PROG = 1;
000028  2108              MOVS     r1,#8
;;;221    	FLITF->FCR2 = 0;
;;;222    
;;;223    	FLITF->FAR = addr;
;;;224    	FLITF->FWDRLW = val;	
00002a  62a5              STR      r5,[r4,#0x28]
00002c  e9c41006          STRD     r1,r0,[r4,#0x18]
;;;225    
;;;226    	FLITF->FCR=0x41;
000030  2041              MOVS     r0,#0x41
000032  e9c40604          STRD     r0,r6,[r4,#0x10]
;;;227    	while(FLITF->FSR_b.EOP==0)
000036  7b20              LDRB     r0,[r4,#0xc]
000038  f0100f20          TST      r0,#0x20
00003c  d106              BNE      |L6.76|
                  |L6.62|
;;;228    	{
;;;229    		 udelay(10);
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       udelay
000044  7b20              LDRB     r0,[r4,#0xc]          ;227
000046  f0100f20          TST      r0,#0x20              ;227
00004a  d0f8              BEQ      |L6.62|
                  |L6.76|
;;;230    	}
;;;231    	FLITF->FSR_b.EOP =1;
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  f0400020          ORR      r0,r0,#0x20
;;;232    	udelay(10);			
000052  60e0              STR      r0,[r4,#0xc]
000054  200a              MOVS     r0,#0xa
000056  f7fffffe          BL       udelay
;;;233    
;;;234    	FLITF->ISPMSCR = SCB_VECTKEY | 0x00000000;
00005a  4808              LDR      r0,|L6.124|
;;;235    	udelay(5);
00005c  64e0              STR      r0,[r4,#0x4c]
00005e  2005              MOVS     r0,#5
000060  f7fffffe          BL       udelay
000064  6ce0              LDR      r0,[r4,#0x4c]         ;214
                  |L6.102|
;;;236    	while( (FLITF->ISPMSCR) != 0x00000000 );	
000066  2800              CMP      r0,#0
000068  d1fd              BNE      |L6.102|
;;;237    }
00006a  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

                  |L6.108|
                          DCD      0x05fa0001
                  |L6.112|
                          DCD      0x40001000
                  |L6.116|
                          DCD      0x76543210
                  |L6.120|
                          DCD      0xfedcba98
                  |L6.124|
                          DCD      0x05fa0000

                          AREA ||i.Protection_UnLock||, CODE, READONLY, ALIGN=2

                  Protection_UnLock PROC
;;;68     
;;;69     void Protection_UnLock(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71     			FLITF->FCR2=0;	
000002  4c12              LDR      r4,|L7.76|
;;;72     			FLITF->FCR2_b.FCR2_SFR_WREN=1;
000004  2080              MOVS     r0,#0x80
;;;73     			FLITF->FCR1=0;
;;;74     			FLITF->FCR1_b.FCR1_TM=1;
000006  61e0              STR      r0,[r4,#0x1c]
000008  0040              LSLS     r0,r0,#1
;;;75     			udelay(70);
00000a  61a0              STR      r0,[r4,#0x18]
00000c  2046              MOVS     r0,#0x46
00000e  f7fffffe          BL       udelay
;;;76     			FLITF->NVSTR_WRMD_LTH=10;
000012  200a              MOVS     r0,#0xa
;;;77     			FLITF->FAR=12;
000014  f8c400d0          STR      r0,[r4,#0xd0]
000018  200c              MOVS     r0,#0xc
;;;78     			FLITF->FWDRLW=0x0030027B;
00001a  6160              STR      r0,[r4,#0x14]
00001c  480c              LDR      r0,|L7.80|
;;;79     
;;;80     			FLITF->FCR=0;
;;;81     			FLITF->FCR_b.NVSSEL = 1;
;;;82     			FLITF->FCR_b.PG=1;
;;;83     			FLITF->FCR_b.STRT=1;
00001e  62a0              STR      r0,[r4,#0x28]
000020  480c              LDR      r0,|L7.84|
;;;84     			while(FLITF->FSR_b.EOP==0)
000022  6120              STR      r0,[r4,#0x10]
000024  7b20              LDRB     r0,[r4,#0xc]
000026  f0100f20          TST      r0,#0x20
00002a  d106              BNE      |L7.58|
                  |L7.44|
;;;85     			{
;;;86     				udelay(10);
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       udelay
000032  7b20              LDRB     r0,[r4,#0xc]          ;84
000034  f0100f20          TST      r0,#0x20              ;84
000038  d0f8              BEQ      |L7.44|
                  |L7.58|
;;;87     			}
;;;88     			FLITF->FSR_b.EOP =1;
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  f0400020          ORR      r0,r0,#0x20
;;;89     			udelay(50);
000040  60e0              STR      r0,[r4,#0xc]
000042  e8bd4010          POP      {r4,lr}
000046  2032              MOVS     r0,#0x32
000048  f7ffbffe          B.W      udelay
;;;90     }
;;;91     void Protection_UnLock_read(void)
                          ENDP

                  |L7.76|
                          DCD      0x40001000
                  |L7.80|
                          DCD      0x0030027b
                  |L7.84|
                          DCD      0x80000041

                          AREA ||i.Protection_UnLock_read||, CODE, READONLY, ALIGN=2

                  Protection_UnLock_read PROC
;;;90     }
;;;91     void Protection_UnLock_read(void)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
;;;93     			FLITF->DOUTVALID_RDMD =15;
000002  4c13              LDR      r4,|L8.80|
000004  200f              MOVS     r0,#0xf
;;;94     			FLITF->RDMD_TCNT_END = 25;
;;;95     			FLITF->FCR1=0;
000006  2500              MOVS     r5,#0
000008  f8c400d8          STR      r0,[r4,#0xd8]         ;94
00000c  2019              MOVS     r0,#0x19              ;94
;;;96     			FLITF->FCR1_b.FCR1_TM=2;
00000e  f8c40090          STR      r0,[r4,#0x90]
000012  1560              ASRS     r0,r4,#21
;;;97     			udelay(70);
000014  61a0              STR      r0,[r4,#0x18]
000016  2046              MOVS     r0,#0x46
000018  f7fffffe          BL       udelay
;;;98     			FLITF->FCR2 = 0;
;;;99     			FLITF->FAR=12;
00001c  200c              MOVS     r0,#0xc
;;;100    			FLITF->FCR=0;
;;;101    			FLITF->FCR_b.READ_ = 1;
;;;102    			FLITF->FCR_b.STRT=1;
00001e  61e5              STR      r5,[r4,#0x1c]
000020  6160              STR      r0,[r4,#0x14]
000022  2048              MOVS     r0,#0x48
;;;103    			while(FLITF->FSR_b.EOP==0)
000024  6120              STR      r0,[r4,#0x10]
000026  7b20              LDRB     r0,[r4,#0xc]
000028  f0100f20          TST      r0,#0x20
00002c  d106              BNE      |L8.60|
                  |L8.46|
;;;104    			{
;;;105    				udelay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       udelay
000034  7b20              LDRB     r0,[r4,#0xc]          ;103
000036  f0100f20          TST      r0,#0x20              ;103
00003a  d0f8              BEQ      |L8.46|
                  |L8.60|
;;;106    			}
;;;107    			FLITF->FSR_b.EOP =1;
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  f0400020          ORR      r0,r0,#0x20
;;;108    			udelay(50);
000042  60e0              STR      r0,[r4,#0xc]
000044  e8bd4070          POP      {r4-r6,lr}
000048  2032              MOVS     r0,#0x32
00004a  f7ffbffe          B.W      udelay
;;;109    }
;;;110    void FLASH_PER(uint8_t TM, uint8_t INF, uint32_t adr)
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      0x40001000

                          AREA ||i.hal_flitf_FlashWrite||, CODE, READONLY, ALIGN=2

                  hal_flitf_FlashWrite PROC
;;;276    
;;;277    uint32_t hal_flitf_FlashWrite(uint32_t addr, uint32_t *buf)
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279    	FLITF->FAR = addr;
000002  4c3b              LDR      r4,|L9.240|
;;;280    	FLITF->FWDRLW 	= buf[0];
000004  6160              STR      r0,[r4,#0x14]
000006  6808              LDR      r0,[r1,#0]
;;;281    	FLITF->FWDRLW01 = buf[1];        
000008  62a0              STR      r0,[r4,#0x28]
00000a  6848              LDR      r0,[r1,#4]
;;;282    	FLITF->FWDRLW02 = buf[2];         
00000c  f8c40100          STR      r0,[r4,#0x100]
000010  6888              LDR      r0,[r1,#8]
;;;283    	FLITF->FWDRLW03 = buf[3]; 
000012  f8c40104          STR      r0,[r4,#0x104]
000016  68c8              LDR      r0,[r1,#0xc]
;;;284    	FLITF->FWDRLW04 = buf[4]; 
000018  f8c40108          STR      r0,[r4,#0x108]
00001c  6908              LDR      r0,[r1,#0x10]
;;;285    	FLITF->FWDRLW05 = buf[5]; 
00001e  f8c4010c          STR      r0,[r4,#0x10c]
000022  6948              LDR      r0,[r1,#0x14]
;;;286    	FLITF->FWDRLW06 = buf[6]; 
000024  f8c40110          STR      r0,[r4,#0x110]
000028  6988              LDR      r0,[r1,#0x18]
;;;287    	FLITF->FWDRLW07 = buf[7];  
00002a  f8c40114          STR      r0,[r4,#0x114]
00002e  69c8              LDR      r0,[r1,#0x1c]
;;;288    	FLITF->FWDRLW08 = buf[8]; 
000030  f8c40118          STR      r0,[r4,#0x118]
000034  6a08              LDR      r0,[r1,#0x20]
;;;289    	FLITF->FWDRLW09 = buf[9]; 
000036  f8c4011c          STR      r0,[r4,#0x11c]
00003a  6a48              LDR      r0,[r1,#0x24]
;;;290    	FLITF->FWDRLW10 = buf[10];               
00003c  f8c40120          STR      r0,[r4,#0x120]
000040  6a88              LDR      r0,[r1,#0x28]
;;;291    	FLITF->FWDRLW11 = buf[11];                
000042  f8c40124          STR      r0,[r4,#0x124]
000046  6ac8              LDR      r0,[r1,#0x2c]
;;;292    	FLITF->FWDRLW12 = buf[12];                
000048  f8c40128          STR      r0,[r4,#0x128]
00004c  6b08              LDR      r0,[r1,#0x30]
;;;293    	FLITF->FWDRLW13 = buf[13];                
00004e  f8c4012c          STR      r0,[r4,#0x12c]
000052  6b48              LDR      r0,[r1,#0x34]
;;;294    	FLITF->FWDRLW14 = buf[14];                
000054  f8c40130          STR      r0,[r4,#0x130]
000058  6b88              LDR      r0,[r1,#0x38]
;;;295    	FLITF->FWDRLW15 = buf[15]; 
00005a  f8c40134          STR      r0,[r4,#0x134]
00005e  6bc8              LDR      r0,[r1,#0x3c]
;;;296    	FLITF->FWDRLW16 = buf[16];                
000060  f8c40138          STR      r0,[r4,#0x138]
000064  6c08              LDR      r0,[r1,#0x40]
;;;297    	FLITF->FWDRLW17 = buf[17];                
000066  f8c4013c          STR      r0,[r4,#0x13c]
00006a  6c48              LDR      r0,[r1,#0x44]
;;;298    	FLITF->FWDRLW18 = buf[18];                
00006c  f8c40140          STR      r0,[r4,#0x140]
000070  6c88              LDR      r0,[r1,#0x48]
;;;299    	FLITF->FWDRLW19 = buf[19];                
000072  f8c40144          STR      r0,[r4,#0x144]
000076  6cc8              LDR      r0,[r1,#0x4c]
;;;300    	FLITF->FWDRLW20 = buf[20];                
000078  f8c40148          STR      r0,[r4,#0x148]
00007c  6d08              LDR      r0,[r1,#0x50]
;;;301    	FLITF->FWDRLW21 = buf[21];                
00007e  f8c4014c          STR      r0,[r4,#0x14c]
000082  6d48              LDR      r0,[r1,#0x54]
;;;302    	FLITF->FWDRLW22 = buf[22];               
000084  f8c40150          STR      r0,[r4,#0x150]
000088  6d88              LDR      r0,[r1,#0x58]
;;;303    	FLITF->FWDRLW23 = buf[23] ;               
00008a  f8c40154          STR      r0,[r4,#0x154]
00008e  6dc8              LDR      r0,[r1,#0x5c]
;;;304    	FLITF->FWDRLW24 = buf[24] ;               
000090  f8c40158          STR      r0,[r4,#0x158]
000094  6e08              LDR      r0,[r1,#0x60]
;;;305    	FLITF->FWDRLW25 = buf[25] ;               
000096  f8c4015c          STR      r0,[r4,#0x15c]
00009a  6e48              LDR      r0,[r1,#0x64]
;;;306    	FLITF->FWDRLW26 = buf[26] ;               
00009c  f8c40160          STR      r0,[r4,#0x160]
0000a0  6e88              LDR      r0,[r1,#0x68]
;;;307    	FLITF->FWDRLW27 = buf[27] ;               
0000a2  f8c40164          STR      r0,[r4,#0x164]
0000a6  6ec8              LDR      r0,[r1,#0x6c]
;;;308    	FLITF->FWDRLW28 = buf[28] ;               
0000a8  f8c40168          STR      r0,[r4,#0x168]
0000ac  6f08              LDR      r0,[r1,#0x70]
;;;309    	FLITF->FWDRLW29 = buf[29] ;               
0000ae  f8c4016c          STR      r0,[r4,#0x16c]
0000b2  6f48              LDR      r0,[r1,#0x74]
;;;310    	FLITF->FWDRLW30 = buf[30] ;               
0000b4  f8c40170          STR      r0,[r4,#0x170]
0000b8  6f88              LDR      r0,[r1,#0x78]
;;;311    	FLITF->FWDRLW31 = buf[31];        
0000ba  f8c40174          STR      r0,[r4,#0x174]
0000be  6fc8              LDR      r0,[r1,#0x7c]
;;;312    	FLITF->FCR=0x41;
0000c0  f8c40178          STR      r0,[r4,#0x178]
0000c4  2041              MOVS     r0,#0x41
;;;313    	while(FLITF->FSR_b.EOP==0)
0000c6  6120              STR      r0,[r4,#0x10]
0000c8  7b20              LDRB     r0,[r4,#0xc]
0000ca  f0100f20          TST      r0,#0x20
0000ce  d106              BNE      |L9.222|
                  |L9.208|
;;;314    	{
;;;315    		udelay(10);
0000d0  200a              MOVS     r0,#0xa
0000d2  f7fffffe          BL       udelay
0000d6  7b20              LDRB     r0,[r4,#0xc]          ;313
0000d8  f0100f20          TST      r0,#0x20              ;313
0000dc  d0f8              BEQ      |L9.208|
                  |L9.222|
;;;316    	}
;;;317    	FLITF->FSR_b.EOP =1;
0000de  68e0              LDR      r0,[r4,#0xc]
0000e0  f0400020          ORR      r0,r0,#0x20
;;;318    	udelay(10);		
0000e4  60e0              STR      r0,[r4,#0xc]
0000e6  200a              MOVS     r0,#0xa
0000e8  f7fffffe          BL       udelay
;;;319    
;;;320        return 0;
0000ec  2000              MOVS     r0,#0
;;;321    }
0000ee  bd10              POP      {r4,pc}
;;;322    
                          ENDP

                  |L9.240|
                          DCD      0x40001000

                          AREA ||i.hal_flitf_FlashWriteWord||, CODE, READONLY, ALIGN=2

                  hal_flitf_FlashWriteWord PROC
;;;262    int count_flitf;
;;;263    uint32_t hal_flitf_FlashWriteWord(uint32_t addr, uint32_t data)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265    	FLITF->FAR = addr;
000002  4c0c              LDR      r4,|L10.52|
;;;266    	FLITF->FWDRLW = data;
;;;267    FLITF->FCR=0x41;
000004  62a1              STR      r1,[r4,#0x28]
000006  6160              STR      r0,[r4,#0x14]
000008  2041              MOVS     r0,#0x41
;;;268    	 while(FLITF->FSR_b.EOP==0)
00000a  6120              STR      r0,[r4,#0x10]
00000c  7b20              LDRB     r0,[r4,#0xc]
00000e  f0100f20          TST      r0,#0x20
000012  d106              BNE      |L10.34|
                  |L10.20|
;;;269    	 {
;;;270    		 udelay(10);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       udelay
00001a  7b20              LDRB     r0,[r4,#0xc]          ;268
00001c  f0100f20          TST      r0,#0x20              ;268
000020  d0f8              BEQ      |L10.20|
                  |L10.34|
;;;271    	 }
;;;272    	FLITF->FSR_b.EOP =1;
000022  68e0              LDR      r0,[r4,#0xc]
000024  f0400020          ORR      r0,r0,#0x20
;;;273    	 udelay(10);
000028  60e0              STR      r0,[r4,#0xc]
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       udelay
;;;274    	return 0;
000030  2000              MOVS     r0,#0
;;;275    }
000032  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  |L10.52|
                          DCD      0x40001000

                          AREA ||i.hal_flitf_FlashWrite_Verify||, CODE, READONLY, ALIGN=1

                  hal_flitf_FlashWrite_Verify PROC
;;;322    
;;;323    uint32_t hal_flitf_FlashWrite_Verify(uint32_t addr, uint16_t sz, uint32_t *buf)
000000  b410              PUSH     {r4}
;;;324    {
000002  4603              MOV      r3,r0
;;;325    	uint32_t nRet = FLASHCTRL_STATUS_SUCCESS;
000004  317f              ADDS     r1,r1,#0x7f
000006  2001              MOVS     r0,#1
;;;326    	int i;
;;;327    	for( i=0; i<sz; i+=128 )
000008  09c9              LSRS     r1,r1,#7
00000a  f8d2c000          LDR      r12,[r2,#0]
00000e  2900              CMP      r1,#0
000010  bfce              ITEE     GT
000012  2200              MOVGT    r2,#0
;;;328    	{
;;;329    		if( *(uint32_t *)(addr+i) != *(buf) )
;;;330    		{
;;;331    			nRet = FLASHCTRL_STATUS_PAGE_WRITE_FAILED;
;;;332    		}
;;;333    	}
;;;334        return nRet;
;;;335    }
000014  bc10              POPLE    {r4}
000016  4770              BXLE     lr
                  |L11.24|
000018  eb0314c2          ADD      r4,r3,r2,LSL #7       ;329
00001c  6824              LDR      r4,[r4,#0]            ;329
00001e  4564              CMP      r4,r12                ;329
000020  bf18              IT       NE                    ;331
000022  2003              MOVNE    r0,#3                 ;331
000024  1e49              SUBS     r1,r1,#1              ;331
000026  f1020201          ADD      r2,r2,#1              ;331
00002a  d1f5              BNE      |L11.24|
00002c  bc10              POP      {r4}
00002e  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.hal_flitf_ProgramPage||, CODE, READONLY, ALIGN=1

                  hal_flitf_ProgramPage PROC
;;;257    }
;;;258     uint32_t hal_flitf_ProgramPage (uint32_t addr, uint16_t sz, uint8_t *buf)
000000  2000              MOVS     r0,#0
;;;259    {
;;;260        return 0;
;;;261    }
000002  4770              BX       lr
;;;262    int count_flitf;
                          ENDP


                          AREA ||i.hal_flitf_another_process||, CODE, READONLY, ALIGN=2

                  hal_flitf_another_process PROC
;;;336    
;;;337     void hal_flitf_another_process(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;338    {
;;;339    	uint32_t nRet = FLASHCTRL_STATUS_NONE;
;;;340    	int i;
;;;341    	eProtocolMode_t currMode;
;;;342    	
;;;343    	if(tFlashIAPPacket.Ctrl->cmd != FLITFCTRL_COMMAND_FLASH_NONE)
000004  f8df81f8          LDR      r8,|L13.512|
000008  b083              SUB      sp,sp,#0xc            ;338
00000a  2600              MOVS     r6,#0                 ;339
00000c  f8d80000          LDR      r0,[r8,#0]  ; tFlashIAPPacket
000010  79c1              LDRB     r1,[r0,#7]
000012  2900              CMP      r1,#0
000014  f00080ea          BEQ.W    |L13.492|
;;;344    	{
;;;345    		tFlashIAPCmd_t Curr;
;;;346    		Curr = *tFlashIAPPacket.Ctrl;
000018  6801              LDR      r1,[r0,#0]
00001a  9100              STR      r1,[sp,#0]
00001c  8881              LDRH     r1,[r0,#4]
00001e  f8ad1004          STRH     r1,[sp,#4]
000022  7981              LDRB     r1,[r0,#6]
000024  f88d1006          STRB     r1,[sp,#6]
000028  79c0              LDRB     r0,[r0,#7]
00002a  f88d0007          STRB     r0,[sp,#7]
;;;347    		switch( Curr.cmd )
00002e  f89d0007          LDRB     r0,[sp,#7]
;;;348    		{
;;;349    			case FLITFCTRL_COMMAND_FLASH_PAGE_ERASE:
;;;350    			{
;;;351    				break;
;;;352    			}
;;;353    			case FLITFCTRL_COMMAND_FLASH_MASS_ERASE:
;;;354    			{
;;;355    				break;
;;;356    			}
;;;357    			case FLITFCTRL_COMMAND_FLASH_WRITE:
;;;358    			{
;;;359    				FLITF->ISPMSCR = SCB_VECTKEY | 0x00000001;
;;;360    				while( (FLITF->ISPMSCR) == 0x00000000 );
;;;361    				FCR_UnLock();
;;;362    				while(FLITF->FCR_b.LOCK!=0)	;	
;;;363    				Protection_UnLock();
;;;364    				FLITF->FCR1 = 0x0;
;;;365    				FLITF->FCR1_b.FCR1_PROG=1;
;;;366    				FLITF->FCR2 = 31;
;;;367    				for(i=0; i<Curr.size ;i+=FLASH_WRITE_SIZE) 
;;;368    				{
;;;369    					hal_flitf_FlashWrite(Curr.addr+i, (uint32_t*)&DFUP_BUFFER[i]);
000032  f8df91d0          LDR      r9,|L13.516|
000036  46b3              MOV      r11,r6                ;347
000038  2809              CMP      r0,#9                 ;347
00003a  f08080cf          BCS.W    |L13.476|
00003e  e8dff000          TBB      [pc,r0]               ;347
000042  cdcd              DCB      0xcd,0xcd
000044  cd05c6a6          DCB      0xcd,0x05,0xc6,0xa6
000048  c4c4c400          DCB      0xc4,0xc4,0xc4,0x00
00004c  4c6f              LDR      r4,|L13.524|
00004e  486e              LDR      r0,|L13.520|
000050  64e0              STR      r0,[r4,#0x4c]         ;359
000052  486f              LDR      r0,|L13.528|
000054  6060              STR      r0,[r4,#4]            ;359
000056  200a              MOVS     r0,#0xa               ;359
000058  f7fffffe          BL       udelay
00005c  486d              LDR      r0,|L13.532|
00005e  6060              STR      r0,[r4,#4]            ;362
000060  f8d40010          LDR.W    r0,[r4,#0x10]         ;362
                  |L13.100|
000064  f0100f80          TST      r0,#0x80              ;362
000068  d1fc              BNE      |L13.100|
00006a  f7fffffe          BL       Protection_UnLock
00006e  2008              MOVS     r0,#8                 ;365
000070  61a0              STR      r0,[r4,#0x18]         ;366
000072  201f              MOVS     r0,#0x1f              ;366
000074  61e0              STR      r0,[r4,#0x1c]         ;367
000076  f8bd7004          LDRH     r7,[sp,#4]            ;367
00007a  2500              MOVS     r5,#0                 ;367
00007c  2f00              CMP      r7,#0                 ;367
00007e  bfc8              IT       GT                    ;367
000080  f04f0a41          MOVGT    r10,#0x41             ;367
000084  dd7a              BLE      |L13.380|
                  |L13.134|
000086  9800              LDR      r0,[sp,#0]
000088  1941              ADDS     r1,r0,r5
00008a  eb090005          ADD      r0,r9,r5
00008e  6161              STR      r1,[r4,#0x14]
000090  6801              LDR      r1,[r0,#0]
000092  62a1              STR      r1,[r4,#0x28]
000094  6841              LDR      r1,[r0,#4]
000096  f8c41100          STR      r1,[r4,#0x100]
00009a  6881              LDR      r1,[r0,#8]
00009c  f8c41104          STR      r1,[r4,#0x104]
0000a0  68c1              LDR      r1,[r0,#0xc]
0000a2  f8c41108          STR      r1,[r4,#0x108]
0000a6  6901              LDR      r1,[r0,#0x10]
0000a8  f8c4110c          STR      r1,[r4,#0x10c]
0000ac  6941              LDR      r1,[r0,#0x14]
0000ae  f8c41110          STR      r1,[r4,#0x110]
0000b2  6981              LDR      r1,[r0,#0x18]
0000b4  f8c41114          STR      r1,[r4,#0x114]
0000b8  69c1              LDR      r1,[r0,#0x1c]
0000ba  f8c41118          STR      r1,[r4,#0x118]
0000be  6a01              LDR      r1,[r0,#0x20]
0000c0  f8c4111c          STR      r1,[r4,#0x11c]
0000c4  6a41              LDR      r1,[r0,#0x24]
0000c6  f8c41120          STR      r1,[r4,#0x120]
0000ca  6a81              LDR      r1,[r0,#0x28]
0000cc  f8c41124          STR      r1,[r4,#0x124]
0000d0  6ac1              LDR      r1,[r0,#0x2c]
0000d2  f8c41128          STR      r1,[r4,#0x128]
0000d6  6b01              LDR      r1,[r0,#0x30]
0000d8  f8c4112c          STR      r1,[r4,#0x12c]
0000dc  6b41              LDR      r1,[r0,#0x34]
0000de  f8c41130          STR      r1,[r4,#0x130]
0000e2  6b81              LDR      r1,[r0,#0x38]
0000e4  f8c41134          STR      r1,[r4,#0x134]
0000e8  6bc1              LDR      r1,[r0,#0x3c]
0000ea  f8c41138          STR      r1,[r4,#0x138]
0000ee  6c01              LDR      r1,[r0,#0x40]
0000f0  f8c4113c          STR      r1,[r4,#0x13c]
0000f4  6c41              LDR      r1,[r0,#0x44]
0000f6  f8c41140          STR      r1,[r4,#0x140]
0000fa  6c81              LDR      r1,[r0,#0x48]
0000fc  f8c41144          STR      r1,[r4,#0x144]
000100  6cc1              LDR      r1,[r0,#0x4c]
000102  f8c41148          STR      r1,[r4,#0x148]
000106  6d01              LDR      r1,[r0,#0x50]
000108  f8c4114c          STR      r1,[r4,#0x14c]
00010c  6d41              LDR      r1,[r0,#0x54]
00010e  f8c41150          STR      r1,[r4,#0x150]
000112  6d81              LDR      r1,[r0,#0x58]
000114  f8c41154          STR      r1,[r4,#0x154]
000118  6dc1              LDR      r1,[r0,#0x5c]
00011a  f8c41158          STR      r1,[r4,#0x158]
00011e  6e01              LDR      r1,[r0,#0x60]
000120  f8c4115c          STR      r1,[r4,#0x15c]
000124  6e41              LDR      r1,[r0,#0x64]
000126  f8c41160          STR      r1,[r4,#0x160]
00012a  6e81              LDR      r1,[r0,#0x68]
00012c  f8c41164          STR      r1,[r4,#0x164]
000130  6ec1              LDR      r1,[r0,#0x6c]
000132  f8c41168          STR      r1,[r4,#0x168]
000136  6f01              LDR      r1,[r0,#0x70]
000138  f8c4116c          STR      r1,[r4,#0x16c]
00013c  6f41              LDR      r1,[r0,#0x74]
00013e  f8c41170          STR      r1,[r4,#0x170]
000142  6f81              LDR      r1,[r0,#0x78]
000144  f8c41174          STR      r1,[r4,#0x174]
000148  6fc0              LDR      r0,[r0,#0x7c]
00014a  f8c4a010          STR      r10,[r4,#0x10]
00014e  f8c40178          STR      r0,[r4,#0x178]
000152  7b20              LDRB     r0,[r4,#0xc]
000154  f0100f20          TST      r0,#0x20
000158  d106              BNE      |L13.360|
                  |L13.346|
00015a  200a              MOVS     r0,#0xa
00015c  f7fffffe          BL       udelay
000160  7b20              LDRB     r0,[r4,#0xc]
000162  f0100f20          TST      r0,#0x20
000166  d0f8              BEQ      |L13.346|
                  |L13.360|
000168  68e0              LDR      r0,[r4,#0xc]
00016a  f0400020          ORR      r0,r0,#0x20
00016e  60e0              STR      r0,[r4,#0xc]
000170  200a              MOVS     r0,#0xa
000172  f7fffffe          BL       udelay
000176  3580              ADDS     r5,r5,#0x80
000178  42af              CMP      r7,r5                 ;367
00017a  dc84              BGT      |L13.134|
                  |L13.380|
;;;370    				}
;;;371    				FLITF->ISPMSCR = SCB_VECTKEY | 0x00000000;
00017c  4826              LDR      r0,|L13.536|
;;;372    				udelay(5);
00017e  64e0              STR      r0,[r4,#0x4c]
000180  2005              MOVS     r0,#5
000182  f7fffffe          BL       udelay
000186  6ce0              LDR      r0,[r4,#0x4c]         ;359
                  |L13.392|
;;;373    				while( (FLITF->ISPMSCR) != 0x00000000 );
000188  2800              CMP      r0,#0
00018a  d1fd              BNE      |L13.392|
00018c  e026              B        |L13.476|
;;;374    				break;
;;;375    			}
;;;376    			case FLITFCTRL_COMMAND_FLASH_GET_VERIFY:
;;;377    			{
;;;378    				memcpy(VERI_BUFFER, (void *)Curr.addr, Curr.size);
00018e  f8bd4004          LDRH     r4,[sp,#4]
000192  4822              LDR      r0,|L13.540|
000194  4622              MOV      r2,r4
000196  9900              LDR      r1,[sp,#0]
000198  f7fffffe          BL       __aeabi_memcpy
;;;379    				
;;;380    				static uint32_t crc_value_tool;
;;;381    				static uint32_t crc_value_flash;
;;;382    				
;;;383    				crc_value_tool = *((uint32_t *)DFUP_BUFFER);
00019c  4d18              LDR      r5,|L13.512|
00019e  f8d90000          LDR      r0,[r9,#0]  ; DFUP_BUFFER
;;;384    				
;;;385    				crc_value_flash = (uint32_t)Crc16WordCalc((const uint16_t*)&VERI_BUFFER[0], Curr.size / 2, 0) | (Crc16WordCalc((const uint16_t*)&VERI_BUFFER[2], Curr.size / 2, 0) << 16);
0001a2  0864              LSRS     r4,r4,#1
0001a4  6068              STR      r0,[r5,#4]  ; crc_value_tool
0001a6  2200              MOVS     r2,#0
0001a8  4621              MOV      r1,r4
0001aa  481c              LDR      r0,|L13.540|
0001ac  f7fffffe          BL       Crc16WordCalc
0001b0  4607              MOV      r7,r0
0001b2  2200              MOVS     r2,#0
0001b4  4621              MOV      r1,r4
0001b6  481a              LDR      r0,|L13.544|
0001b8  f7fffffe          BL       Crc16WordCalc
0001bc  ea474000          ORR      r0,r7,r0,LSL #16
;;;386    				crc_value_flash = crc_value_flash ^ 0xFFFFFFFF;
0001c0  43c0              MVNS     r0,r0
;;;387    				
;;;388    				if(crc_value_tool == crc_value_flash)
0001c2  60a8              STR      r0,[r5,#8]  ; crc_value_flash
0001c4  6869              LDR      r1,[r5,#4]  ; crc_value_tool
0001c6  4281              CMP      r1,r0
0001c8  d108              BNE      |L13.476|
;;;389    					nRet = FLASHCTRL_STATUS_SUCCESS;
0001ca  2601              MOVS     r6,#1
0001cc  e006              B        |L13.476|
;;;390    				else
;;;391    					nRet = FLASHCTRL_STATUS_NONE;
;;;392    				
;;;393    				break;
;;;394    			}
;;;395    			case FLITFCTRL_COMMAND_FLASH_READ:
;;;396    			{
;;;397    				memcpy(DFUP_BUFFER, (void *)Curr.addr, Curr.size);
0001ce  f8bd2004          LDRH     r2,[sp,#4]
0001d2  480c              LDR      r0,|L13.516|
0001d4  9900              LDR      r1,[sp,#0]
0001d6  f7fffffe          BL       __aeabi_memcpy
;;;398    				nRet = FLASHCTRL_STATUS_SUCCESS;
0001da  2601              MOVS     r6,#1
                  |L13.476|
;;;399    				break;
;;;400    			}
;;;401    			case FLITFCTRL_COMMAND_FLASH_ENTER_IAP_MODE:
;;;402    			{
;;;403    				nRet = FLASHCTRL_STATUS_SUCCESS;
;;;404    				break;
;;;405    			}
;;;406    			case FLITFCTRL_COMMAND_FLASH_EXIT_IAP_MODE:
;;;407    			{
;;;408    				nRet = FLASHCTRL_STATUS_SUCCESS;
;;;409    				break;
;;;410    			}
;;;411    			case FLITFCTRL_COMMAND_FLASH_4KB_UPDATE_MODE:
;;;412    			{
;;;413    				nRet = FLASHCTRL_STATUS_SUCCESS;
;;;414    				break;
;;;415    			}
;;;416    			default:
;;;417    				break;
;;;418    		}
;;;419    		tFlashIAPPacket.Ctrl->cmd = FLITFCTRL_COMMAND_FLASH_NONE;
0001dc  f8d80000          LDR      r0,[r8,#0]  ; tFlashIAPPacket
0001e0  f880b007          STRB     r11,[r0,#7]
;;;420    		tFlashIAPPacket.Ctrl->status = nRet;
0001e4  7186              STRB     r6,[r0,#6]
;;;421    		protocol_dfup_PendReadyStatus();
0001e6  f7fffffe          BL       protocol_dfup_PendReadyStatus
;;;422    	}
;;;423    
;;;424    	currMode = protocol_swip_GetMode();
0001ea  bf00              NOP      
                  |L13.492|
0001ec  f7fffffe          BL       protocol_swip_GetMode
;;;425    	if( currMode == M_WATCH_DOG_RESET )
0001f0  2811              CMP      r0,#0x11
;;;426    	{
;;;427    //#ifdef MODE_WDT
;;;428    		module_Watch_Enable();
;;;429    		while(1);
;;;430    //#endif
;;;431    	}
;;;432    }
0001f2  bf1c              ITT      NE
0001f4  b003              ADDNE    sp,sp,#0xc
0001f6  e8bd8ff0          POPNE    {r4-r11,pc}
0001fa  f7fffffe          BL       module_Watch_Enable
                  |L13.510|
0001fe  e7fe              B        |L13.510|
;;;433    
                          ENDP

                  |L13.512|
                          DCD      ||area_number.19||
                  |L13.516|
                          DCD      ||.bss||
                  |L13.520|
                          DCD      0x05fa0001
                  |L13.524|
                          DCD      0x40001000
                  |L13.528|
                          DCD      0x76543210
                  |L13.532|
                          DCD      0xfedcba98
                  |L13.536|
                          DCD      0x05fa0000
                  |L13.540|
                          DCD      ||.bss||+0x1000
                  |L13.544|
                          DCD      ||.bss||+0x1002

                          AREA ||i.hal_flitf_init||, CODE, READONLY, ALIGN=2

                  hal_flitf_init PROC
;;;253    uint32_t hal_flitf_FlashRead(uint32_t addr, uint16_t sz, uint32_t *buf);
;;;254    void hal_flitf_init(void)
000000  4902              LDR      r1,|L14.12|
;;;255    {
;;;256    	vtProtocolBufferPointers.pParameterBuffer = (void *)DFUP_BUFFER;
000002  4801              LDR      r0,|L14.8|
000004  6048              STR      r0,[r1,#4]  ; vtProtocolBufferPointers
;;;257    }
000006  4770              BX       lr
;;;258     uint32_t hal_flitf_ProgramPage (uint32_t addr, uint16_t sz, uint8_t *buf)
                          ENDP

                  |L14.8|
                          DCD      ||.bss||
                  |L14.12|
                          DCD      vtProtocolBufferPointers

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  DFUP_BUFFER
                          %        4096
                  VERI_BUFFER
                          %        4096

                          AREA ||.data||, DATA, ALIGN=0

                  ||<Data1>||
                          DCDU     0x00000000
000004  0000              DCWU     0x0000
000006  0000              DCB      0x00,0x00

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  tFlashIAPPacket
                          DCD      ||<Data1>||
                  crc_value_tool
                          DCD      0x00000000
                  crc_value_flash
                          DCD      0x00000000

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  count_flitf
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\flitf\\flitf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_2917f6f2____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___7_flitf_c_2917f6f2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_2917f6f2____REVSH|
#line 402
|__asm___7_flitf_c_2917f6f2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_flitf_c_2917f6f2____RRX|
#line 587
|__asm___7_flitf_c_2917f6f2____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
