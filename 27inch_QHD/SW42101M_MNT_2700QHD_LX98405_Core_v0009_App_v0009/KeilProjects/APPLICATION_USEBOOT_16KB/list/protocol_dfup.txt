; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\protocol_dfup.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\protocol_dfup.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\protocol_dfup.crf ..\..\Protocol\protocol_dfup.c]
                          THUMB

                          AREA ||i.protocol_dfup_ClearEventInterrupt||, CODE, READONLY, ALIGN=2

                  protocol_dfup_ClearEventInterrupt PROC
;;;242    
;;;243    void protocol_dfup_ClearEventInterrupt(void)
000000  4806              LDR      r0,|L1.28|
;;;244    {
;;;245        switch( eEventTriggerType )
000002  7800              LDRB     r0,[r0,#0]  ; eEventTriggerType
000004  2801              CMP      r0,#1
;;;246        {
;;;247        case ETT_INTERRUPT:
;;;248           // Hal_ClearIntr();
;;;249            break;
;;;250        case ETT_REGISTER:
;;;251        	tProtocolCtrl.getter->bEventReady = NO;
;;;252            break;
;;;253        }
;;;254    }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  2802              CMP      r0,#2                 ;245
00000c  bf18              IT       NE
00000e  4770              BXNE     lr
000010  2000              MOVS     r0,#0                 ;251
000012  4903              LDR      r1,|L1.32|
000014  6809              LDR      r1,[r1,#0]            ;251  ; tProtocolCtrl
000016  7048              STRB     r0,[r1,#1]            ;251
000018  4770              BX       lr
;;;255    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      ||area_number.22||
                  |L1.32|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_dfup_ClearInterrupt||, CODE, READONLY, ALIGN=2

                  protocol_dfup_ClearInterrupt PROC
;;;255    
;;;256    void protocol_dfup_ClearInterrupt(uint16_t _addr)
000000  490f              LDR      r1,|L2.64|
;;;257    {
;;;258    	if( _addr == SWIP_REG_ADDR_CTRL_GETTER + offsetof(tProtocolGetter_t, eReadyStatus) )
000002  f5b06fc0          CMP      r0,#0x600
;;;259    	{
;;;260    		if( tProtocolCtrl.getter->eReadyStatus != RS_NONE )
000006  6809              LDR      r1,[r1,#0]
000008  d013              BEQ      |L2.50|
;;;261    			tProtocolCtrl.getter->eReadyStatus = RS_NONE;
;;;262    	}
;;;263    	//Touch packet의 마지막 data를 읽어갈 때,
;;;264    	else if( _addr == SWIP_REG_ADDR_EVENT_PACKET_CONTENT + tDFUPEvent.ptPacketInfo->b7Length - 1)
00000a  4a0e              LDR      r2,|L2.68|
00000c  6852              LDR      r2,[r2,#4]  ; tDFUPEvent
00000e  7812              LDRB     r2,[r2,#0]
000010  f002027f          AND      r2,r2,#0x7f
000014  f5027204          ADD      r2,r2,#0x210
000018  4282              CMP      r2,r0
;;;265    	{
;;;266    		protocol_dfup_ClearEventInterrupt();
;;;267    	}
;;;268    }
00001a  bf18              IT       NE
00001c  4770              BXNE     lr
00001e  480a              LDR      r0,|L2.72|
000020  7800              LDRB     r0,[r0,#0]  ; eEventTriggerType
000022  2801              CMP      r0,#1
000024  bf08              IT       EQ
000026  4770              BXEQ     lr
000028  2802              CMP      r0,#2
00002a  bf04              ITT      EQ
00002c  2000              MOVEQ    r0,#0
00002e  7048              STRBEQ   r0,[r1,#1]
000030  4770              BX       lr
                  |L2.50|
000032  7808              LDRB     r0,[r1,#0]            ;260
000034  2805              CMP      r0,#5                 ;260
000036  bf1c              ITT      NE                    ;261
000038  2005              MOVNE    r0,#5                 ;261
00003a  7008              STRBNE   r0,[r1,#0]            ;261
00003c  4770              BX       lr
;;;269    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      tProtocolCtrl
                  |L2.68|
                          DCD      ||area_number.22||+0x15
                  |L2.72|
                          DCD      ||area_number.22||

                          AREA ||i.protocol_dfup_GetMappedPointer||, CODE, READONLY, ALIGN=2

                  protocol_dfup_GetMappedPointer PROC
;;;148    
;;;149    uint8_t* protocol_dfup_GetMappedPointer(uint16_t _addr)
000000  ea4f2c10          LSR      r12,r0,#8
;;;150    {
;;;151        int i;
;;;152        uint8_t maddr = MSB(_addr), laddr = LSB(_addr);
000004  b2c1              UXTB     r1,r0
;;;153        //TODO: remove it! 임시로 기존 프로토콜 사용하기 위해서 작업해 두었습니다.
;;;154        if( _addr >= SWIP_REG_ADDR_RESERVED )
000006  f5b04f70          CMP      r0,#0xf000
;;;155            return (uint8_t*)NULL;
00000a  bf24              ITT      CS
00000c  2000              MOVCS    r0,#0
;;;156    	
;;;157    	if(_addr == 0x0150)
;;;158    	{
;;;159    		    if( maddr < GET_ARRAY_(vtMRmiMap) )
;;;160        {
;;;161        	if(maddr == 0x01)
;;;162        	{
;;;163                const tDFUPSubsetInfo_t* info = vtMRmiMap[maddr];
;;;164                if(info)
;;;165                {
;;;166                    for( i=info->iSize; i--; )
;;;167                    {
;;;168                        int start_addr = info->vucStartLAddr[i];
;;;169                        if( laddr >= start_addr )
;;;170                            return info->ppucData[i] + laddr - start_addr;
;;;171                    }
;;;172                }
;;;173        	}
;;;174        	else
;;;175        	{
;;;176                const tDFUPSubsetInfo_t* info = vtMRmiMap[maddr];
;;;177                if(info)
;;;178                {
;;;179                    for( i=info->iSize; i--; )
;;;180                    {
;;;181                        int start_addr = info->vucStartLAddr[i];
;;;182                        if( laddr >= start_addr )
;;;183                            return info->ppucData[i] + laddr - start_addr;
;;;184                    }
;;;185                }
;;;186        	}
;;;187        }
;;;188        else //16K buffers.
;;;189        {
;;;190            for( i=tDFUPBufferInfo.iSize; i--; )
;;;191            {
;;;192                int start_addr = tDFUPBufferInfo.vusStartAddr[i];
;;;193                if( _addr >= start_addr)
;;;194                    return tDFUPBufferInfo.ppucBuffer[i] + _addr - start_addr;
;;;195            }
;;;196        }
;;;197    	}
;;;198    	else
;;;199    	{
;;;200    		    if( maddr < GET_ARRAY_(vtMRmiMap) )
;;;201        {
;;;202        	if(maddr == 0x01)
;;;203        	{
;;;204                const tDFUPSubsetInfo_t* info = vtMRmiMap[maddr];
;;;205                if(info)
;;;206                {
;;;207                    for( i=info->iSize; i--; )
;;;208                    {
;;;209                        int start_addr = info->vucStartLAddr[i];
;;;210                        if( laddr >= start_addr )
;;;211                            return info->ppucData[i] + laddr - start_addr;
;;;212                    }
;;;213                }
;;;214        	}
;;;215        	else
;;;216        	{
;;;217                const tDFUPSubsetInfo_t* info = vtMRmiMap[maddr];
;;;218                if(info)
;;;219                {
;;;220                    for( i=info->iSize; i--; )
;;;221                    {
;;;222                        int start_addr = info->vucStartLAddr[i];
;;;223                        if( laddr >= start_addr )
;;;224                            return info->ppucData[i] + laddr - start_addr;
;;;225                    }
;;;226                }
;;;227        	}
;;;228        }
;;;229        else //16K buffers.
;;;230        {
;;;231            for( i=tDFUPBufferInfo.iSize; i--; )
;;;232            {
;;;233                int start_addr = tDFUPBufferInfo.vusStartAddr[i];
;;;234                if( _addr >= start_addr)
;;;235                    return tDFUPBufferInfo.ppucBuffer[i] + _addr - start_addr;
;;;236            }
;;;237        }
;;;238    	}
;;;239    
;;;240        return (uint8_t*)NULL;
;;;241    }
00000e  4770              BXCS     lr
000010  b470              PUSH     {r4-r6}               ;150
000012  4e3f              LDR      r6,|L3.272|
000014  f5b07fa8          CMP      r0,#0x150             ;157
000018  f1a6030f          SUB      r3,r6,#0xf            ;190
00001c  6872              LDR      r2,[r6,#4]            ;194
00001e  681d              LDR      r5,[r3,#0]            ;194
000020  685c              LDR      r4,[r3,#4]            ;192
000022  689b              LDR      r3,[r3,#8]            ;190
000024  d01b              BEQ      |L3.94|
000026  f1bc0f15          CMP      r12,#0x15             ;200
00002a  d25e              BCS      |L3.234|
00002c  f1bc0f01          CMP      r12,#1                ;202
000030  d043              BEQ      |L3.186|
000032  f856002c          LDR      r0,[r6,r12,LSL #2]    ;217
000036  2800              CMP      r0,#0                 ;218
000038  d066              BEQ      |L3.264|
00003a  6883              LDR      r3,[r0,#8]            ;220
00003c  1e5a              SUBS     r2,r3,#1              ;220
00003e  bf28              IT       CS                    ;222
000040  f8d0c004          LDRCS    r12,[r0,#4]           ;222
000044  d360              BCC      |L3.264|
000046  bf00              NOP                            ;222
                  |L3.72|
000048  f81c3002          LDRB     r3,[r12,r2]           ;222
00004c  4299              CMP      r1,r3                 ;223
00004e  db49              BLT      |L3.228|
                  |L3.80|
000050  6800              LDR      r0,[r0,#0]            ;224
000052  f8500022          LDR      r0,[r0,r2,LSL #2]     ;224
000056  bc70              POP      {r4-r6}
000058  4408              ADD      r0,r0,r1              ;224
00005a  1ac0              SUBS     r0,r0,r3              ;224
00005c  4770              BX       lr
                  |L3.94|
00005e  f1bc0f15          CMP      r12,#0x15             ;159
000062  d220              BCS      |L3.166|
000064  f1bc0f01          CMP      r12,#1                ;161
000068  d00f              BEQ      |L3.138|
00006a  f856002c          LDR      r0,[r6,r12,LSL #2]    ;176
00006e  b318              CBZ      r0,|L3.184|
000070  6883              LDR      r3,[r0,#8]            ;179
000072  1e5a              SUBS     r2,r3,#1              ;179
000074  bf28              IT       CS                    ;181
000076  f8d0c004          LDRCS    r12,[r0,#4]           ;181
00007a  d345              BCC      |L3.264|
                  |L3.124|
00007c  f81c3002          LDRB     r3,[r12,r2]           ;181
000080  4299              CMP      r1,r3                 ;182
000082  dae5              BGE      |L3.80|
000084  1e52              SUBS     r2,r2,#1              ;182
000086  d2f9              BCS      |L3.124|
000088  e03e              B        |L3.264|
                  |L3.138|
00008a  b1aa              CBZ      r2,|L3.184|
00008c  6893              LDR      r3,[r2,#8]            ;166
00008e  1e58              SUBS     r0,r3,#1              ;166
000090  bf28              IT       CS                    ;168
000092  f8d2c004          LDRCS    r12,[r2,#4]           ;168
000096  d337              BCC      |L3.264|
                  |L3.152|
000098  f81c3000          LDRB     r3,[r12,r0]           ;168
00009c  4299              CMP      r1,r3                 ;169
00009e  da17              BGE      |L3.208|
0000a0  1e40              SUBS     r0,r0,#1              ;169
0000a2  d2f9              BCS      |L3.152|
0000a4  e030              B        |L3.264|
                  |L3.166|
0000a6  1e59              SUBS     r1,r3,#1              ;190
0000a8  d32e              BCC      |L3.264|
0000aa  bf00              NOP                            ;192
                  |L3.172|
0000ac  f8342011          LDRH     r2,[r4,r1,LSL #1]     ;192
0000b0  4290              CMP      r0,r2                 ;193
0000b2  da21              BGE      |L3.248|
0000b4  1e49              SUBS     r1,r1,#1              ;193
0000b6  d2f9              BCS      |L3.172|
                  |L3.184|
0000b8  e026              B        |L3.264|
                  |L3.186|
0000ba  b32a              CBZ      r2,|L3.264|
0000bc  6893              LDR      r3,[r2,#8]            ;207
0000be  1e58              SUBS     r0,r3,#1              ;207
0000c0  bf28              IT       CS                    ;209
0000c2  f8d2c004          LDRCS    r12,[r2,#4]           ;209
0000c6  d31f              BCC      |L3.264|
                  |L3.200|
0000c8  f81c3000          LDRB     r3,[r12,r0]           ;209
0000cc  4299              CMP      r1,r3                 ;210
0000ce  db06              BLT      |L3.222|
                  |L3.208|
0000d0  6812              LDR      r2,[r2,#0]            ;211
0000d2  f8520020          LDR      r0,[r2,r0,LSL #2]     ;211
0000d6  bc70              POP      {r4-r6}
0000d8  4408              ADD      r0,r0,r1              ;211
0000da  1ac0              SUBS     r0,r0,r3              ;211
0000dc  4770              BX       lr
                  |L3.222|
0000de  1e40              SUBS     r0,r0,#1
0000e0  d2f2              BCS      |L3.200|
0000e2  e011              B        |L3.264|
                  |L3.228|
0000e4  1e52              SUBS     r2,r2,#1              ;207
0000e6  d2af              BCS      |L3.72|
0000e8  e00e              B        |L3.264|
                  |L3.234|
0000ea  1e59              SUBS     r1,r3,#1              ;231
0000ec  d30c              BCC      |L3.264|
0000ee  bf00              NOP                            ;233
                  |L3.240|
0000f0  f8342011          LDRH     r2,[r4,r1,LSL #1]     ;233
0000f4  4290              CMP      r0,r2                 ;234
0000f6  db05              BLT      |L3.260|
                  |L3.248|
0000f8  f8551021          LDR      r1,[r5,r1,LSL #2]     ;235
0000fc  bc70              POP      {r4-r6}
0000fe  4408              ADD      r0,r0,r1              ;235
000100  1a80              SUBS     r0,r0,r2              ;235
000102  4770              BX       lr
                  |L3.260|
000104  1e49              SUBS     r1,r1,#1
000106  d2f3              BCS      |L3.240|
                  |L3.264|
000108  bc70              POP      {r4-r6}
00010a  2000              MOVS     r0,#0                 ;240
00010c  4770              BX       lr
;;;242    
                          ENDP

00010e  0000              DCW      0x0000
                  |L3.272|
                          DCD      ||area_number.22||+0x30

                          AREA ||i.protocol_dfup_GetMode||, CODE, READONLY, ALIGN=2

                  protocol_dfup_GetMode PROC
;;;281    
;;;282    eProtocolMode_t protocol_dfup_GetMode(void)
000000  4801              LDR      r0,|L4.8|
;;;283    {
;;;284        return tProtocolCtrl.setter->eMode;
000002  6840              LDR      r0,[r0,#4]  ; tProtocolCtrl
000004  7800              LDRB     r0,[r0,#0]
;;;285    }
000006  4770              BX       lr
                          ENDP

                  |L4.8|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_dfup_Init||, CODE, READONLY, ALIGN=2

                  protocol_dfup_Init PROC
;;;136    
;;;137    void protocol_dfup_Init(void)
000000  480a              LDR      r0,|L5.44|
;;;138    {
;;;139    	tDFUPInfo.ptVersion->bcdBootVer = BOOT_VER;
000002  f2403103          MOV      r1,#0x303
000006  6802              LDR      r2,[r0,#0]  ; tDFUPInfo
000008  8011              STRH     r1,[r2,#0]
;;;140    	tDFUPInfo.ptVersion->bcdCoreVer = 0xFFFF;
00000a  6802              LDR      r2,[r0,#0]  ; tDFUPInfo
00000c  f64f71ff          MOV      r1,#0xffff
000010  8051              STRH     r1,[r2,#2]
;;;141    	tDFUPInfo.ptVersion->bcdAppVer  = 0xFFFF;
000012  6802              LDR      r2,[r0,#0]  ; tDFUPInfo
000014  8091              STRH     r1,[r2,#4]
;;;142    	tDFUPInfo.ptVersion->bcdParaVer = 0xFFFF;
000016  6802              LDR      r2,[r0,#0]  ; tDFUPInfo
000018  80d1              STRH     r1,[r2,#6]
;;;143    
;;;144    	tDFUPInfo.ptIntegrity->ulBootCRC = 0x0;//SYSCFG_SPI_BOOT_crc_code_read();
00001a  6882              LDR      r2,[r0,#8]  ; tDFUPInfo
00001c  2100              MOVS     r1,#0
00001e  6011              STR      r1,[r2,#0]
;;;145    	tDFUPInfo.ptIntegrity->ulAppCRC = 0x0;
000020  6882              LDR      r2,[r0,#8]  ; tDFUPInfo
000022  6051              STR      r1,[r2,#4]
;;;146    	tDFUPInfo.ptIntegrity->ulParamCRC = 0x0;
000024  6880              LDR      r0,[r0,#8]  ; tDFUPInfo
000026  6081              STR      r1,[r0,#8]
;;;147    }
000028  4770              BX       lr
;;;148    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      ||area_number.22||+0x1

                          AREA ||i.protocol_dfup_PendReadyStatus||, CODE, READONLY, ALIGN=2

                  protocol_dfup_PendReadyStatus PROC
;;;269    
;;;270    void protocol_dfup_PendReadyStatus(void)
000000  b510              PUSH     {r4,lr}
;;;271    {
;;;272        tProtocolCtrl.getter->eReadyStatus = RS_READY;
000002  4c08              LDR      r4,|L6.36|
000004  20a0              MOVS     r0,#0xa0
000006  6821              LDR      r1,[r4,#0]  ; tProtocolCtrl
000008  7008              STRB     r0,[r1,#0]
;;;273        while( tProtocolCtrl.getter->eReadyStatus == RS_READY ){
00000a  6820              LDR      r0,[r4,#0]  ; tProtocolCtrl
00000c  7800              LDRB     r0,[r0,#0]
00000e  28a0              CMP      r0,#0xa0
;;;274    #ifdef MODE_I2C
;;;275    		QueueCommonData_I2C();
;;;276    #else
;;;277    		QueueCommonData_USB();
;;;278    #endif
;;;279    	};
;;;280    }
000010  bf18              IT       NE
000012  bd10              POPNE    {r4,pc}
                  |L6.20|
000014  f7fffffe          BL       QueueCommonData_USB
000018  6820              LDR      r0,[r4,#0]            ;273  ; tProtocolCtrl
00001a  7800              LDRB     r0,[r0,#0]            ;273
00001c  28a0              CMP      r0,#0xa0              ;273
00001e  d0f9              BEQ      |L6.20|
000020  bd10              POP      {r4,pc}
;;;281    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      tProtocolCtrl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ktDFUPInfoFirmwareIntegrity
                          %        12

                          AREA ||area_number.9||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.bss||
                  ktSWIPInfoTrimCode
                          %        64

                          AREA ||.data||, DATA, ALIGN=0

                  ||<Data1>||
                          DCDU     0x00000000
000004  0000              DCWU     0x0000
000006  00                DCB      0x00

                          AREA ||area_number.12||, DATA, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.data||
                  ||<Data2>||
000000  20006000          DCW      0x2000,0x6000

                          AREA ||area_number.13||, DATA, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.data||
                  ||<Data3>||
000000  20304050          DCB      0x20,0x30,0x40,0x50
000004  a0c0              DCB      0xa0,0xc0

                          AREA ||area_number.14||, DATA, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.data||
                  ||<Data4>||
                          DCDU     tDFUPInfo
                          DCDU     ||<Data3>||
                          DCDU     0x00000005

                          AREA ||area_number.15||, DATA, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.data||
                  ||<Data5>||
000000  0010              DCB      0x00,0x10

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  ||<Data6>||
                          DCDU     tProtocolCtrl
                          DCDU     ||<Data5>||
                          DCDU     0x00000002

                          AREA ||area_number.17||, DATA, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.data||
                  ||<Data7>||
000000  001020            DCB      0x00,0x10,0x20

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  ||<Data8>||
                          DCDU     tProtocolLog
                          DCDU     ||<Data7>||
                          DCDU     0x00000003

                          AREA ||area_number.19||, DATA, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.data||
                  ||<Data9>||
000000  00                DCB      0x00

                          AREA ||area_number.20||, DATA, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.data||
                  ||<Data10>||
                          DCDU     tFlashIAPPacket
                          DCDU     ||<Data9>||
                          DCDU     0x00000001

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  ktDFUPInfoInterface
000000  44465550          DCB      0x44,0x46,0x55,0x50
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  05001fd2          DCWU     0x0500,0x1fd2
00000c  d101              DCWU     0xd101

                          AREA ||area_number.22||, DATA, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.data||
                  eEventTriggerType
000000  00                DCB      0x00
                  tDFUPInfo
                          DCDU     ktDFUPInfoFirmwareSectionVersion
                          DCDU     ktDFUPInfoFirmwareSectionAddress
                          DCDU     ktDFUPInfoFirmwareIntegrity
                          DCDU     ktDFUPInfoInterface
                          DCDU     ktSWIPInfoTrimCode
                  tDFUPEvent
                          DCDU     ||<Data1>||
000019  000000            DCB      0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00                DCB      0x00
                  tDFUPBufferInfo
                          DCDU     vtProtocolBufferPointers
                          DCDU     ||<Data2>||
                          DCDU     0x00000002
00002d  000000            DCB      0x00,0x00,0x00
                  vtMRmiMap
                          DCD      0x00000000
                          DCD      ||<Data4>||
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      ||<Data6>||
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      ||<Data8>||
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      ||<Data10>||

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  ktDFUPInfoFirmwareSectionVersion
                          %        8

                          AREA ||area_number.24||, DATA, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.data||
                  ktDFUPInfoFirmwareSectionAddress
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Protocol\\protocol_dfup.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_protocol_dfup_c_5b2fb05a____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___15_protocol_dfup_c_5b2fb05a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_protocol_dfup_c_5b2fb05a____REVSH|
#line 402
|__asm___15_protocol_dfup_c_5b2fb05a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_protocol_dfup_c_5b2fb05a____RRX|
#line 587
|__asm___15_protocol_dfup_c_5b2fb05a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
