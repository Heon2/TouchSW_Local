; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\gpio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\gpio.crf ..\..\Hal\gpio\gpio.c]
                          THUMB

                          AREA ||i.EXTI0_InterruptHandler||, CODE, READONLY, ALIGN=2

                  EXTI0_InterruptHandler PROC
;;;39     
;;;40     void EXTI0_InterruptHandler(void)
000000  4813              LDR      r0,|L1.80|
;;;41     {
;;;42     #if USED_TSYNC2_INPUT_CONTROL
;;;43     	if(GPIO->tGPIO_EXTI0_MIS._GPIO_TSYNC2_IN == 1)
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  f0117f00          TST      r1,#0x2000000
;;;44     	{
;;;45     		GPIO->tGPIO_EXTI0_INTC._GPIO_TSYNC2_IN = 1;
;;;46     
;;;47     		if(GPIO->tGPIO_DATA_1._GPIO_TSYNC2_IN == 1)
;;;48     		{
;;;49     #if 0//USED_ECLK_ON_OFF_CONTROL
;;;50     			if(HAL_GetECLKOnOffControl())
;;;51     			{
;;;52     				HAL_ECLK_Off();
;;;53     			}
;;;54     #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;55     
;;;56     #if USED_MCU_IDLE_LOW_PWR_CONTROL
;;;57     			// Touch Time
;;;58     			if(IS_IDLE_MODE(HAL_GetSensingMode()))
;;;59     			{
;;;60     				Hal_Exit_MCU_Sleep();
;;;61     			}
;;;62     #endif /* USED_MCU_IDLE_LOW_PWR_CONTROL */
;;;63     		}
;;;64     		else
;;;65     		{
;;;66     #if USED_FRAME_SKIP_IDLE_MODE_CONTROL
;;;67     			if (IS_IDLE_MODE(HAL_GetSensingMode()))
;;;68     			{
;;;69     				if(SkipFrameCnt == 0)
;;;70     				{
;;;71     #if USED_ECLK_ON_OFF_CONTROL
;;;72     					if(HAL_GetECLKOnOffControl())
;;;73     					{
;;;74     						HAL_ECLK_On();
;;;75     					}
;;;76     #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;77     				}
;;;78     				else
;;;79     				{
;;;80     #if 0//USED_ECLK_ON_OFF_CONTROL
;;;81     					if(HAL_GetECLKOnOffControl())
;;;82     					{
;;;83     						HAL_ECLK_On();
;;;84     					}
;;;85     #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;86     				}
;;;87     			}
;;;88     			else
;;;89     			{
;;;90     //				if(SkipFrameCnt != 0)
;;;91     				{
;;;92     #if USED_ECLK_ON_OFF_CONTROL
;;;93     					if(HAL_GetECLKOnOffControl())
;;;94     					{
;;;95     						HAL_ECLK_On();
;;;96     					}
;;;97     #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;98     				}
;;;99     			}
;;;100    #else
;;;101    #if USED_ECLK_ON_OFF_CONTROL
;;;102    			if(HAL_GetECLKOnOffControl())
;;;103    			{
;;;104    				HAL_ECLK_On();
;;;105    			}
;;;106    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;107    #endif /* USED_FRAME_SKIP_IDLE_MODE_CONTROL */
;;;108    
;;;109    #if USED_MCU_IDLE_LOW_PWR_CONTROL
;;;110    			// Display Time
;;;111    			if(IS_IDLE_MODE(HAL_GetSensingMode()))
;;;112    			{
;;;113    				Hal_Enter_MCU_Sleep();
;;;114    			}
;;;115    #endif /* USED_MCU_IDLE_LOW_PWR_CONTROL */
;;;116    		}
;;;117    	}
;;;118    #endif /* USED_TSYNC2_INPUT_CONTROL */
;;;119    }
000008  bf08              IT       EQ
00000a  4770              BXEQ     lr
00000c  6c01              LDR      r1,[r0,#0x40]         ;45
00000e  f0417100          ORR      r1,r1,#0x2000000      ;45
000012  6401              STR      r1,[r0,#0x40]         ;45
000014  6840              LDR      r0,[r0,#4]            ;47
000016  f0100f20          TST      r0,#0x20              ;47
00001a  bf18              IT       NE
00001c  4770              BXNE     lr
00001e  b510              PUSH     {r4,lr}               ;41
000020  f7fffffe          BL       HAL_GetSensingMode
000024  f4107f80          TST      r0,#0x100             ;67
000028  d008              BEQ      |L1.60|
00002a  480a              LDR      r0,|L1.84|
00002c  7800              LDRB     r0,[r0,#0]            ;69  ; SkipFrameCnt
00002e  2800              CMP      r0,#0                 ;69
000030  bf18              IT       NE
000032  bd10              POPNE    {r4,pc}
000034  f7fffffe          BL       HAL_GetECLKOnOffControl
000038  b928              CBNZ     r0,|L1.70|
00003a  bd10              POP      {r4,pc}
                  |L1.60|
00003c  f7fffffe          BL       HAL_GetECLKOnOffControl
000040  2800              CMP      r0,#0                 ;93
000042  bf08              IT       EQ
000044  bd10              POPEQ    {r4,pc}
                  |L1.70|
000046  e8bd4010          POP      {r4,lr}               ;95
00004a  f7ffbffe          B.W      HAL_ECLK_On
;;;120    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40007000
                  |L1.84|
                          DCD      SkipFrameCnt

                          AREA ||i.EXTI1_InterruptHandler||, CODE, READONLY, ALIGN=1

                  EXTI1_InterruptHandler PROC
;;;120    
;;;121    void EXTI1_InterruptHandler(void)
000000  4770              BX       lr
;;;122    {
;;;123    }
;;;124    
                          ENDP


                          AREA ||i.GPIO_Initialize||, CODE, READONLY, ALIGN=2

                  GPIO_Initialize PROC
;;;125    tGPIO_CtrlReg_t * _DebugGPIO;
;;;126    void GPIO_Initialize(void)
000000  4905              LDR      r1,|L3.24|
;;;127    {
;;;128    	_DebugGPIO = GPIO;
000002  4804              LDR      r0,|L3.20|
;;;129    	Fncp_EXTI0_IRQHandler = &EXTI0_InterruptHandler;
000004  6008              STR      r0,[r1,#0]  ; _DebugGPIO
000006  4906              LDR      r1,|L3.32|
000008  4804              LDR      r0,|L3.28|
;;;130    	Fncp_EXTI1_IRQHandler = &EXTI1_InterruptHandler;
00000a  6008              STR      r0,[r1,#0]  ; Fncp_EXTI0_IRQHandler
00000c  4906              LDR      r1,|L3.40|
00000e  4805              LDR      r0,|L3.36|
000010  6008              STR      r0,[r1,#0]  ; Fncp_EXTI1_IRQHandler
;;;131    }
000012  4770              BX       lr
;;;132    
                          ENDP

                  |L3.20|
                          DCD      0x40007000
                  |L3.24|
                          DCD      ||.data||
                  |L3.28|
                          DCD      EXTI0_InterruptHandler
                  |L3.32|
                          DCD      Fncp_EXTI0_IRQHandler
                  |L3.36|
                          DCD      EXTI1_InterruptHandler
                  |L3.40|
                          DCD      Fncp_EXTI1_IRQHandler

                          AREA ||i.initGPIO||, CODE, READONLY, ALIGN=2

                  initGPIO PROC
;;;371    
;;;372    void initGPIO(EnumGPIO pin, GpModeValue_TypeDef GPIO_Mode, GpIoconValue_TypeDef GPIO_Config)
000000  b430              PUSH     {r4,r5}
;;;373    {
;;;374    	// AFIO_SEL [GPIO_SELx]
;;;375    	if (pin < 16)
;;;376    	{
;;;377    		CLEAR_BIT(GPIO->tGPIO_AFIO_0.ulBulk, (BIT1|BIT0) << pin*2);
000002  2403              MOVS     r4,#3
000004  4b44              LDR      r3,|L4.280|
000006  ea4f0c40          LSL      r12,r0,#1
00000a  2810              CMP      r0,#0x10              ;375
00000c  d20d              BCS      |L4.42|
00000e  6e1d              LDR      r5,[r3,#0x60]
000010  fa04f40c          LSL      r4,r4,r12
000014  ea250404          BIC      r4,r5,r4
000018  661c              STR      r4,[r3,#0x60]
;;;378    		SET_BIT(GPIO->tGPIO_AFIO_0.ulBulk , GPIO_Mode << pin*2);
00001a  6e1c              LDR      r4,[r3,#0x60]
00001c  fa01fc0c          LSL      r12,r1,r12
000020  ea440c0c          ORR      r12,r4,r12
000024  f8c3c060          STR      r12,[r3,#0x60]
000028  e032              B        |L4.144|
                  |L4.42|
;;;379    	}
;;;380    	else if(pin < 32)
00002a  2820              CMP      r0,#0x20
00002c  d20f              BCS      |L4.78|
00002e  f1ac0c20          SUB      r12,r12,#0x20
;;;381    	{
;;;382    		CLEAR_BIT(GPIO->tGPIO_AFIO_1.ulBulk, (BIT1|BIT0) << (pin-16)*2);
000032  6e5d              LDR      r5,[r3,#0x64]
000034  fa04f40c          LSL      r4,r4,r12
000038  ea250404          BIC      r4,r5,r4
00003c  665c              STR      r4,[r3,#0x64]
;;;383    		SET_BIT(GPIO->tGPIO_AFIO_1.ulBulk , GPIO_Mode << (pin-16)*2);
00003e  6e5c              LDR      r4,[r3,#0x64]
000040  fa01fc0c          LSL      r12,r1,r12
000044  ea4c0c04          ORR      r12,r12,r4
000048  f8c3c064          STR      r12,[r3,#0x64]
00004c  e020              B        |L4.144|
                  |L4.78|
;;;384    	}else if(pin < 48){
00004e  2830              CMP      r0,#0x30
000050  d20f              BCS      |L4.114|
000052  f1ac0c40          SUB      r12,r12,#0x40
;;;385    		CLEAR_BIT(GPIO->tGPIO_AFIO_2.ulBulk, (BIT1|BIT0) << (pin-32)*2);
000056  6e9d              LDR      r5,[r3,#0x68]
000058  fa04f40c          LSL      r4,r4,r12
00005c  ea250404          BIC      r4,r5,r4
000060  669c              STR      r4,[r3,#0x68]
;;;386    		SET_BIT(GPIO->tGPIO_AFIO_2.ulBulk , GPIO_Mode << (pin-32)*2);
000062  6e9c              LDR      r4,[r3,#0x68]
000064  fa01fc0c          LSL      r12,r1,r12
000068  ea4c0c04          ORR      r12,r12,r4
00006c  f8c3c068          STR      r12,[r3,#0x68]
000070  e00e              B        |L4.144|
                  |L4.114|
000072  f1ac0c60          SUB      r12,r12,#0x60
;;;387    	}else{
;;;388    		CLEAR_BIT(GPIO->tGPIO_AFIO_3.ulBulk, (BIT1|BIT0) << (pin-48)*2);
000076  6edd              LDR      r5,[r3,#0x6c]
000078  fa04f40c          LSL      r4,r4,r12
00007c  ea250404          BIC      r4,r5,r4
000080  66dc              STR      r4,[r3,#0x6c]
;;;389    		SET_BIT(GPIO->tGPIO_AFIO_3.ulBulk , GPIO_Mode << (pin-48)*2);
000082  6edc              LDR      r4,[r3,#0x6c]
000084  fa01fc0c          LSL      r12,r1,r12
000088  ea4c0c04          ORR      r12,r12,r4
00008c  f8c3c06c          STR      r12,[r3,#0x6c]
                  |L4.144|
;;;390    	}
;;;391    	// IO Direction, Input Output [GPIO_DIRx]
;;;392    	if (GPIO_Mode == GPIO_Mode0_GPIO)
000090  2900              CMP      r1,#0
;;;393    	{
;;;394    		if ((GPIO_Config == Input)|(GPIO_Config == PullupIn)){
;;;395    			if (pin < 32){
;;;396    				CLEAR_BIT(GPIO->tGPIO_DIR_0.ulBulk, BIT0 << pin);
;;;397    			}else{
;;;398    				CLEAR_BIT(GPIO->tGPIO_DIR_1.ulBulk, BIT0 << (pin-32));
;;;399    			}
;;;400    		}else {
;;;401    			if (pin < 32){
;;;402    				SET_BIT(GPIO->tGPIO_DIR_0.ulBulk, BIT0 << pin);
;;;403    			}else{
;;;404    				SET_BIT(GPIO->tGPIO_DIR_1.ulBulk, BIT0 << (pin-32));
;;;405    			}
;;;406    		}
;;;407    	}
;;;408    	// Pull-Up Control [GPIO_PUPx]            
;;;409    	if (GPIO_Mode == GPIO_Mode0_GPIO)
;;;410    	{
;;;411    		if (GPIO_Config == PullupIn){
;;;412    			if (pin < 32){
;;;413    				SET_BIT(GPIO->tGPIO_PU_0.ulBulk, BIT0 << pin);
;;;414    			}else{
;;;415    				SET_BIT(GPIO->tGPIO_PU_1.ulBulk, BIT0 << (pin-32));
;;;416    			}
;;;417    		}else{
;;;418    			if (pin < 32){
;;;419    				CLEAR_BIT(GPIO->tGPIO_PU_0.ulBulk, BIT0 << pin);
;;;420    			}else{
;;;421    				CLEAR_BIT(GPIO->tGPIO_PU_1.ulBulk, BIT0 << (pin-32));
;;;422    			}
;;;423    		}
;;;424    	}
;;;425    }
000092  bf1c              ITT      NE
000094  bc30              POPNE    {r4,r5}
000096  4770              BXNE     lr
000098  2101              MOVS     r1,#1                 ;394
00009a  b12a              CBZ      r2,|L4.168|
00009c  2100              MOVS     r1,#0                 ;394
00009e  2a02              CMP      r2,#2                 ;394
0000a0  bf08              IT       EQ                    ;394
0000a2  f04f0c01          MOVEQ    r12,#1                ;394
0000a6  d001              BEQ      |L4.172|
                  |L4.168|
0000a8  f04f0c00          MOV      r12,#0                ;394
                  |L4.172|
0000ac  ea51050c          ORRS     r5,r1,r12             ;394
0000b0  f04f0401          MOV      r4,#1                 ;394
0000b4  f1a00120          SUB      r1,r0,#0x20           ;398
0000b8  fa04fc00          LSL      r12,r4,r0             ;396
0000bc  fa04f101          LSL      r1,r4,r1              ;398
0000c0  d009              BEQ      |L4.214|
0000c2  2820              CMP      r0,#0x20              ;395
0000c4  bf39              ITTEE    CC                    ;396
0000c6  689c              LDRCC    r4,[r3,#8]            ;396
0000c8  ea24040c          BICCC    r4,r4,r12             ;396
0000cc  68dc              LDRCS    r4,[r3,#0xc]          ;398
0000ce  438c              BICCS    r4,r4,r1              ;398
0000d0  d209              BCS      |L4.230|
                  |L4.210|
0000d2  609c              STR      r4,[r3,#8]            ;396
0000d4  e008              B        |L4.232|
                  |L4.214|
0000d6  2820              CMP      r0,#0x20              ;401
0000d8  bf39              ITTEE    CC                    ;402
0000da  689c              LDRCC    r4,[r3,#8]            ;402
0000dc  ea44040c          ORRCC    r4,r4,r12             ;402
0000e0  68dc              LDRCS    r4,[r3,#0xc]          ;404
0000e2  430c              ORRCS    r4,r4,r1              ;404
0000e4  d3f5              BCC      |L4.210|
                  |L4.230|
0000e6  60dc              STR      r4,[r3,#0xc]          ;398
                  |L4.232|
0000e8  2a02              CMP      r2,#2                 ;411
0000ea  d00a              BEQ      |L4.258|
0000ec  2820              CMP      r0,#0x20              ;418
0000ee  bf27              ITTEE    CS                    ;421
0000f0  69d8              LDRCS    r0,[r3,#0x1c]         ;421
0000f2  4388              BICCS    r0,r0,r1              ;421
0000f4  6998              LDRCC    r0,[r3,#0x18]         ;419
0000f6  ea20000c          BICCC    r0,r0,r12             ;419
0000fa  d20a              BCS      |L4.274|
                  |L4.252|
0000fc  6198              STR      r0,[r3,#0x18]         ;413
0000fe  bc30              POP      {r4,r5}
000100  4770              BX       lr
                  |L4.258|
000102  2820              CMP      r0,#0x20              ;412
000104  bf39              ITTEE    CC                    ;413
000106  6998              LDRCC    r0,[r3,#0x18]         ;413
000108  ea40000c          ORRCC    r0,r0,r12             ;413
00010c  69d8              LDRCS    r0,[r3,#0x1c]         ;415
00010e  4308              ORRCS    r0,r0,r1              ;415
000110  d3f4              BCC      |L4.252|
                  |L4.274|
000112  61d8              STR      r0,[r3,#0x1c]         ;415
000114  bc30              POP      {r4,r5}
000116  4770              BX       lr
;;;426    
                          ENDP

                  |L4.280|
                          DCD      0x40007000

                          AREA ||i.initGPIOs||, CODE, READONLY, ALIGN=2

                  initGPIOs PROC
;;;307    
;;;308    void initGPIOs(GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;309    {
000004  4605              MOV      r5,r0
;;;310        uint64_t currentPin = GPIO_InitStruct->GPIO_Pin;
;;;311        uint32_t iPos;
;;;312    
;;;313    	for ( iPos = 0 ; iPos < 50 ; iPos++)
;;;314    	{
;;;315    		if ( ( (currentPin>>iPos) & BIT0 ) != 0 ) 
;;;316    		{
;;;317    			// AFIO_SEL [GPIO_SELx]
;;;318    			if (iPos < 16)
;;;319    			{
;;;320    				CLEAR_BIT(GPIO->tGPIO_AFIO_0.ulBulk, (BIT1|BIT0) << iPos*2);
000006  4e4c              LDR      r6,|L5.312|
;;;321    				SET_BIT(GPIO->tGPIO_AFIO_0.ulBulk , GPIO_InitStruct->GPIO_Mode << iPos*2);
;;;322    			}
;;;323    			else if(iPos < 32)
;;;324    			{
;;;325    				CLEAR_BIT(GPIO->tGPIO_AFIO_1.ulBulk, (BIT1|BIT0) << (iPos-16)*2);
;;;326    				SET_BIT(GPIO->tGPIO_AFIO_1.ulBulk , GPIO_InitStruct->GPIO_Mode << (iPos-16)*2);
;;;327    			}else if(iPos < 48){
;;;328    				CLEAR_BIT(GPIO->tGPIO_AFIO_2.ulBulk, (BIT1|BIT0) << (iPos-32)*2);
;;;329    				SET_BIT(GPIO->tGPIO_AFIO_2.ulBulk , GPIO_InitStruct->GPIO_Mode << (iPos-32)*2);
;;;330    			}else{
;;;331    				CLEAR_BIT(GPIO->tGPIO_AFIO_3.ulBulk, (BIT1|BIT0) << (iPos-48)*2);
;;;332    				SET_BIT(GPIO->tGPIO_AFIO_3.ulBulk , GPIO_InitStruct->GPIO_Mode << (iPos-48)*2);
;;;333    			}
;;;334    			// IO Direction, Input Output [GPIO_DIRx]
;;;335    			if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode0_GPIO)
;;;336    			{
;;;337    				if (GPIO_InitStruct->GPIO_Config == Input){
;;;338    					if (iPos < 32){
;;;339    						CLEAR_BIT(GPIO->tGPIO_DIR_0.ulBulk, BIT0 << iPos);
000008  e9d57800          LDRD     r7,r8,[r5,#0]
00000c  2400              MOVS     r4,#0                 ;313
00000e  f04f0a03          MOV      r10,#3                ;320
000012  f04f0901          MOV      r9,#1
                  |L5.22|
000016  4622              MOV      r2,r4                 ;315
000018  4638              MOV      r0,r7                 ;315
00001a  4641              MOV      r1,r8                 ;315
00001c  f7fffffe          BL       __aeabi_llsr
000020  f0100f01          TST      r0,#1                 ;315
000024  d072              BEQ      |L5.268|
000026  2c10              CMP      r4,#0x10              ;318
000028  d20c              BCS      |L5.68|
00002a  6e31              LDR      r1,[r6,#0x60]         ;320
00002c  0060              LSLS     r0,r4,#1              ;320
00002e  fa0af200          LSL      r2,r10,r0             ;320
000032  4391              BICS     r1,r1,r2              ;320
000034  6631              STR      r1,[r6,#0x60]         ;320
000036  7a29              LDRB     r1,[r5,#8]            ;321
000038  fa01f000          LSL      r0,r1,r0              ;321
00003c  6e31              LDR      r1,[r6,#0x60]         ;321
00003e  4308              ORRS     r0,r0,r1              ;321
000040  6630              STR      r0,[r6,#0x60]         ;321
000042  e02e              B        |L5.162|
                  |L5.68|
000044  2c20              CMP      r4,#0x20              ;323
000046  d20e              BCS      |L5.102|
000048  0060              LSLS     r0,r4,#1              ;325
00004a  3820              SUBS     r0,r0,#0x20           ;325
00004c  6e72              LDR      r2,[r6,#0x64]         ;325
00004e  fa0af100          LSL      r1,r10,r0             ;325
000052  ea220101          BIC      r1,r2,r1              ;325
000056  6671              STR      r1,[r6,#0x64]         ;325
000058  7a29              LDRB     r1,[r5,#8]            ;326
00005a  fa01f000          LSL      r0,r1,r0              ;326
00005e  6e71              LDR      r1,[r6,#0x64]         ;326
000060  4308              ORRS     r0,r0,r1              ;326
000062  6670              STR      r0,[r6,#0x64]         ;326
000064  e01d              B        |L5.162|
                  |L5.102|
000066  2c30              CMP      r4,#0x30              ;327
000068  ea4f0044          LSL      r0,r4,#1              ;331
00006c  d20c              BCS      |L5.136|
00006e  3840              SUBS     r0,r0,#0x40           ;327
000070  6eb2              LDR      r2,[r6,#0x68]         ;328
000072  fa0af100          LSL      r1,r10,r0             ;328
000076  ea220101          BIC      r1,r2,r1              ;328
00007a  66b1              STR      r1,[r6,#0x68]         ;328
00007c  7a29              LDRB     r1,[r5,#8]            ;329
00007e  4081              LSLS     r1,r1,r0              ;329
000080  6eb0              LDR      r0,[r6,#0x68]         ;329
000082  4308              ORRS     r0,r0,r1              ;329
000084  66b0              STR      r0,[r6,#0x68]         ;329
000086  e00c              B        |L5.162|
                  |L5.136|
000088  3860              SUBS     r0,r0,#0x60           ;329
00008a  6ef2              LDR      r2,[r6,#0x6c]         ;331
00008c  fa0af100          LSL      r1,r10,r0             ;331
000090  ea220101          BIC      r1,r2,r1              ;331
000094  66f1              STR      r1,[r6,#0x6c]         ;331
000096  7a29              LDRB     r1,[r5,#8]            ;332
000098  fa01f000          LSL      r0,r1,r0              ;332
00009c  6ef1              LDR      r1,[r6,#0x6c]         ;332
00009e  4308              ORRS     r0,r0,r1              ;332
0000a0  66f0              STR      r0,[r6,#0x6c]         ;332
                  |L5.162|
0000a2  7a28              LDRB     r0,[r5,#8]            ;335
0000a4  2800              CMP      r0,#0                 ;335
0000a6  d140              BNE      |L5.298|
0000a8  7a68              LDRB     r0,[r5,#9]            ;337
0000aa  b170              CBZ      r0,|L5.202|
;;;340    					}else{
;;;341    						CLEAR_BIT(GPIO->tGPIO_DIR_1.ulBulk, BIT0 << (iPos-32));
;;;342    					}
;;;343    				}else {
;;;344    					if (iPos < 32){
0000ac  2c20              CMP      r4,#0x20
;;;345    						SET_BIT(GPIO->tGPIO_DIR_0.ulBulk, BIT0 << iPos);
;;;346    					}else{
;;;347    						SET_BIT(GPIO->tGPIO_DIR_1.ulBulk, BIT0 << (iPos-32));
0000ae  bf23              ITTTE    CS
0000b0  68f0              LDRCS    r0,[r6,#0xc]
0000b2  f1a40120          SUBCS    r1,r4,#0x20
0000b6  fa09f101          LSLCS    r1,r9,r1
0000ba  68b0              LDRCC    r0,[r6,#8]            ;345
0000bc  bf38              IT       CC                    ;345
0000be  fa09f104          LSLCC    r1,r9,r4              ;345
0000c2  4308              ORRS     r0,r0,r1              ;345
0000c4  d20e              BCS      |L5.228|
                  |L5.198|
0000c6  60b0              STR      r0,[r6,#8]            ;345
0000c8  e00d              B        |L5.230|
                  |L5.202|
0000ca  2c20              CMP      r4,#0x20              ;338
0000cc  bf39              ITTEE    CC                    ;339
0000ce  68b0              LDRCC    r0,[r6,#8]            ;339
0000d0  fa09f104          LSLCC    r1,r9,r4              ;339
0000d4  68f0              LDRCS    r0,[r6,#0xc]          ;341
0000d6  f1a40120          SUBCS    r1,r4,#0x20           ;341
0000da  bf28              IT       CS                    ;341
0000dc  fa09f101          LSLCS    r1,r9,r1              ;341
0000e0  4388              BICS     r0,r0,r1              ;341
0000e2  d3f0              BCC      |L5.198|
                  |L5.228|
0000e4  60f0              STR      r0,[r6,#0xc]
                  |L5.230|
;;;348    					}
;;;349    				}
;;;350    			}
;;;351    			// Pull-Up Control [GPIO_PUPx]            
;;;352    			if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode0_GPIO)
0000e6  7a28              LDRB     r0,[r5,#8]
0000e8  b980              CBNZ     r0,|L5.268|
;;;353    			{
;;;354    				if (GPIO_InitStruct->GPIO_Config == PullupIn){
0000ea  7a68              LDRB     r0,[r5,#9]
0000ec  2802              CMP      r0,#2
0000ee  d00e              BEQ      |L5.270|
;;;355    					if (iPos < 32){
;;;356    						SET_BIT(GPIO->tGPIO_PU_0.ulBulk, BIT0 << iPos);
;;;357    					}else{
;;;358    						SET_BIT(GPIO->tGPIO_PU_1.ulBulk, BIT0 << (iPos-32));
;;;359    					}
;;;360    				}else{
;;;361    					if (iPos < 32){
0000f0  2c20              CMP      r4,#0x20
;;;362    						CLEAR_BIT(GPIO->tGPIO_PU_0.ulBulk, BIT0 << iPos);
;;;363    					}else{
;;;364    						CLEAR_BIT(GPIO->tGPIO_PU_1.ulBulk, BIT0 << (iPos-32));
0000f2  bf23              ITTTE    CS
0000f4  69f0              LDRCS    r0,[r6,#0x1c]
0000f6  f1a40120          SUBCS    r1,r4,#0x20
0000fa  fa09f101          LSLCS    r1,r9,r1
0000fe  69b0              LDRCC    r0,[r6,#0x18]         ;362
000100  bf38              IT       CC                    ;362
000102  fa09f104          LSLCC    r1,r9,r4              ;362
000106  4388              BICS     r0,r0,r1              ;362
000108  d20e              BCS      |L5.296|
                  |L5.266|
00010a  61b0              STR      r0,[r6,#0x18]         ;362
                  |L5.268|
00010c  e00d              B        |L5.298|
                  |L5.270|
00010e  2c20              CMP      r4,#0x20              ;355
000110  bf39              ITTEE    CC                    ;356
000112  69b0              LDRCC    r0,[r6,#0x18]         ;356
000114  fa09f104          LSLCC    r1,r9,r4              ;356
000118  69f0              LDRCS    r0,[r6,#0x1c]         ;358
00011a  f1a40120          SUBCS    r1,r4,#0x20           ;358
00011e  bf28              IT       CS                    ;358
000120  fa09f101          LSLCS    r1,r9,r1              ;358
000124  4308              ORRS     r0,r0,r1              ;358
000126  d3f0              BCC      |L5.266|
                  |L5.296|
000128  61f0              STR      r0,[r6,#0x1c]
                  |L5.298|
00012a  1c64              ADDS     r4,r4,#1
00012c  2c32              CMP      r4,#0x32              ;313
00012e  f4ffaf72          BCC      |L5.22|
;;;365    					}
;;;366    				}
;;;367    			}
;;;368    		}
;;;369    	}
;;;370    }
000132  e8bd87f0          POP      {r4-r10,pc}
;;;371    
                          ENDP

000136  0000              DCW      0x0000
                  |L5.312|
                          DCD      0x40007000

                          AREA ||i.init_EXIT||, CODE, READONLY, ALIGN=2

                  init_EXIT PROC
;;;192    
;;;193    void init_EXIT(EnumGPIO pin, uint8_t LevelDetection, uint8_t BothEdge, uint8_t PositivePolarity, uint8_t EnableInterrupt)
000000  b470              PUSH     {r4-r6}
;;;194    {
000002  f04f0c01          MOV      r12,#1
;;;195    	if (pin < 12){
;;;196    		if (LevelDetection == LEVEL_DETECTION_GPIO){
;;;197    			SET_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << pin));
000006  fa0cf400          LSL      r4,r12,r0
00000a  f8dfc12c          LDR      r12,|L6.312|
00000e  9d03              LDR      r5,[sp,#0xc]          ;195
000010  280c              CMP      r0,#0xc               ;195
000012  d21d              BCS      |L6.80|
;;;198    		}else{
;;;199    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << pin));
000014  f8dc0028          LDR      r0,[r12,#0x28]
000018  2901              CMP      r1,#1                 ;196
00001a  bf0c              ITE      EQ                    ;197
00001c  4320              ORREQ    r0,r0,r4              ;197
00001e  43a0              BICNE    r0,r0,r4
000020  f8cc0028          STR      r0,[r12,#0x28]
;;;200    		}
;;;201    		
;;;202    		if (BothEdge == BOTH_EDGE_GPIO){
;;;203    			SET_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << pin));
;;;204    		}else{
;;;205    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << pin));
000024  f8dc002c          LDR      r0,[r12,#0x2c]
000028  2a01              CMP      r2,#1                 ;202
00002a  bf0c              ITE      EQ                    ;203
00002c  4320              ORREQ    r0,r0,r4              ;203
00002e  43a0              BICNE    r0,r0,r4
000030  f8cc002c          STR      r0,[r12,#0x2c]
;;;206    		}
;;;207    		
;;;208    		if (PositivePolarity == POSITIVE_HIGH_GPIO){
;;;209    			SET_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << pin));
;;;210    		}else{
;;;211    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << pin));
000034  f8dc0030          LDR      r0,[r12,#0x30]
000038  2b01              CMP      r3,#1                 ;208
00003a  bf0c              ITE      EQ                    ;209
00003c  4320              ORREQ    r0,r0,r4              ;209
00003e  43a0              BICNE    r0,r0,r4
000040  f8cc0030          STR      r0,[r12,#0x30]
;;;212    		}
;;;213    		if (EnableInterrupt == ENABLE_GPIO){
000044  2d01              CMP      r5,#1
000046  d048              BEQ      |L6.218|
                  |L6.72|
;;;214    			SET_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT0 << pin));
;;;215    		}else{
;;;216    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT0 << pin));
;;;217    		}
;;;218    	}else if (pin < 24){
;;;219    		if (LevelDetection == LEVEL_DETECTION_GPIO){
;;;220    			SET_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << pin));
;;;221    		}else{
;;;222    			CLEAR_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << pin));
;;;223    		}
;;;224    		
;;;225    		if (BothEdge == BOTH_EDGE_GPIO){
;;;226    			SET_BIT( GPIO->tGPIO_EXTI1_IBE.ulBulk, (BIT0 << pin));
;;;227    		}else{
;;;228    			CLEAR_BIT( GPIO->tGPIO_EXTI1_IBE.ulBulk, (BIT0 << pin));
;;;229    		}
;;;230    		
;;;231    		if (PositivePolarity == POSITIVE_HIGH_GPIO){
;;;232    			SET_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << pin));
;;;233    		}else{
;;;234    			CLEAR_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << pin));
;;;235    		}
;;;236    		if (EnableInterrupt == ENABLE_GPIO){
;;;237    			SET_BIT( GPIO->tGPIO_EXTI1_IE.ulBulk, (BIT0 << pin));
;;;238    		}else{
;;;239    			CLEAR_BIT( GPIO->tGPIO_EXTI1_IE.ulBulk, (BIT0 << pin));
;;;240    		}
;;;241    	}else if (pin < 38){
;;;242    		if (LevelDetection == LEVEL_DETECTION_GPIO){
;;;243    			SET_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << (pin-12)));
;;;244    		}else{
;;;245    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << (pin-12)));
;;;246    		}
;;;247    		
;;;248    		if (BothEdge == BOTH_EDGE_GPIO){
;;;249    			SET_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << (pin-12)));
;;;250    		}else{
;;;251    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << (pin-12)));
;;;252    		}
;;;253    		
;;;254    		if (PositivePolarity == POSITIVE_HIGH_GPIO){
;;;255    			SET_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << (pin-12)));
;;;256    		}else{
;;;257    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << (pin-12)));
;;;258    		}
;;;259    		if (EnableInterrupt == ENABLE_GPIO){
;;;260    			SET_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT0 << (pin-12)));
;;;261    		}else{
;;;262    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT0 << (pin-12)));
000048  f8dc0034          LDR      r0,[r12,#0x34]
00004c  43a0              BICS     r0,r0,r4
00004e  e047              B        |L6.224|
                  |L6.80|
000050  2818              CMP      r0,#0x18              ;218
000052  d221              BCS      |L6.152|
000054  f8dc0044          LDR      r0,[r12,#0x44]        ;222
000058  2901              CMP      r1,#1                 ;219
00005a  bf0c              ITE      EQ                    ;220
00005c  4320              ORREQ    r0,r0,r4              ;220
00005e  43a0              BICNE    r0,r0,r4              ;222
000060  f8cc0044          STR      r0,[r12,#0x44]        ;222
000064  f8dc0048          LDR      r0,[r12,#0x48]        ;228
000068  2a01              CMP      r2,#1                 ;225
00006a  bf0c              ITE      EQ                    ;226
00006c  4320              ORREQ    r0,r0,r4              ;226
00006e  43a0              BICNE    r0,r0,r4              ;228
000070  f8cc0048          STR      r0,[r12,#0x48]        ;228
000074  f8dc004c          LDR      r0,[r12,#0x4c]        ;234
000078  2b01              CMP      r3,#1                 ;231
00007a  bf0c              ITE      EQ                    ;232
00007c  4320              ORREQ    r0,r0,r4              ;232
00007e  43a0              BICNE    r0,r0,r4              ;234
000080  f8cc004c          STR      r0,[r12,#0x4c]        ;234
000084  f8dc0050          LDR      r0,[r12,#0x50]        ;239
000088  2d01              CMP      r5,#1                 ;236
00008a  bf0c              ITE      EQ                    ;237
00008c  4320              ORREQ    r0,r0,r4              ;237
00008e  43a0              BICNE    r0,r0,r4              ;239
000090  f8cc0050          STR      r0,[r12,#0x50]        ;237
;;;263    		}
;;;264    	}else if (pin < 50){
;;;265    		if (LevelDetection == LEVEL_DETECTION_GPIO){
;;;266    			SET_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << (pin-12)));
;;;267    		}else{
;;;268    			CLEAR_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << (pin-12)));
;;;269    		}
;;;270    		
;;;271    		if (BothEdge == BOTH_EDGE_GPIO){
;;;272    			SET_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT1 << (pin-12)));
;;;273    		}else{
;;;274    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT1 << (pin-12)));
;;;275    		}
;;;276    		
;;;277    		if (PositivePolarity == POSITIVE_HIGH_GPIO){
;;;278    			SET_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT1 << (pin-12)));
;;;279    		}else{
;;;280    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT1 << (pin-12)));
;;;281    		}
;;;282    		if (EnableInterrupt == ENABLE_GPIO){
;;;283    			SET_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT1 << (pin-12)));
;;;284    		}else{
;;;285    			CLEAR_BIT( GPIO->tGPIO_EXTI0_IE.ulBulk, (BIT1 << (pin-12)));
;;;286    		}
;;;287    	}
;;;288    }
000094  bc70              POP      {r4-r6}
000096  4770              BX       lr
                  |L6.152|
000098  f1a0040c          SUB      r4,r0,#0xc            ;243
00009c  2601              MOVS     r6,#1                 ;194
00009e  fa06f404          LSL      r4,r6,r4              ;243
0000a2  2826              CMP      r0,#0x26              ;241
0000a4  d220              BCS      |L6.232|
0000a6  f8dc0028          LDR      r0,[r12,#0x28]        ;245
0000aa  2901              CMP      r1,#1                 ;242
0000ac  bf0c              ITE      EQ                    ;243
0000ae  4320              ORREQ    r0,r0,r4              ;243
0000b0  43a0              BICNE    r0,r0,r4              ;245
0000b2  f8cc0028          STR      r0,[r12,#0x28]        ;245
0000b6  f8dc002c          LDR      r0,[r12,#0x2c]        ;251
0000ba  2a01              CMP      r2,#1                 ;248
0000bc  bf0c              ITE      EQ                    ;249
0000be  4320              ORREQ    r0,r0,r4              ;249
0000c0  43a0              BICNE    r0,r0,r4              ;251
0000c2  f8cc002c          STR      r0,[r12,#0x2c]        ;251
0000c6  f8dc0030          LDR      r0,[r12,#0x30]        ;257
0000ca  2b01              CMP      r3,#1                 ;254
0000cc  bf0c              ITE      EQ                    ;255
0000ce  4320              ORREQ    r0,r0,r4              ;255
0000d0  43a0              BICNE    r0,r0,r4              ;257
0000d2  f8cc0030          STR      r0,[r12,#0x30]        ;257
0000d6  2d01              CMP      r5,#1                 ;259
0000d8  d1b6              BNE      |L6.72|
                  |L6.218|
0000da  f8dc0034          LDR      r0,[r12,#0x34]        ;260
0000de  4320              ORRS     r0,r0,r4              ;260
                  |L6.224|
0000e0  f8cc0034          STR      r0,[r12,#0x34]        ;285
0000e4  bc70              POP      {r4-r6}
0000e6  4770              BX       lr
                  |L6.232|
0000e8  2832              CMP      r0,#0x32              ;264
0000ea  bf24              ITT      CS
0000ec  bc70              POPCS    {r4-r6}
0000ee  4770              BXCS     lr
0000f0  2901              CMP      r1,#1                 ;265
0000f2  f8dc1044          LDR      r1,[r12,#0x44]        ;268
0000f6  bf0c              ITE      EQ                    ;266
0000f8  4321              ORREQ    r1,r1,r4              ;266
0000fa  43a1              BICNE    r1,r1,r4              ;268
0000fc  f8cc1044          STR      r1,[r12,#0x44]        ;268
000100  2102              MOVS     r1,#2                 ;272
000102  380c              SUBS     r0,r0,#0xc            ;272
000104  fa01f000          LSL      r0,r1,r0              ;272
000108  f8dc102c          LDR      r1,[r12,#0x2c]        ;274
00010c  2a01              CMP      r2,#1                 ;271
00010e  bf0c              ITE      EQ                    ;272
000110  4301              ORREQ    r1,r1,r0              ;272
000112  4381              BICNE    r1,r1,r0              ;274
000114  f8cc102c          STR      r1,[r12,#0x2c]        ;274
000118  f8dc1030          LDR      r1,[r12,#0x30]        ;280
00011c  2b01              CMP      r3,#1                 ;277
00011e  bf0c              ITE      EQ                    ;278
000120  4301              ORREQ    r1,r1,r0              ;278
000122  4381              BICNE    r1,r1,r0              ;280
000124  f8cc1030          STR      r1,[r12,#0x30]        ;280
000128  f8dc1034          LDR      r1,[r12,#0x34]        ;285
00012c  2d01              CMP      r5,#1                 ;282
00012e  bf0c              ITE      EQ                    ;283
000130  4308              ORREQ    r0,r0,r1              ;283
000132  ea210000          BICNE    r0,r1,r0              ;285
000136  e7d3              B        |L6.224|
;;;289    
                          ENDP

                  |L6.312|
                          DCD      0x40007000

                          AREA ||i.init_EXITs||, CODE, READONLY, ALIGN=2

                  init_EXITs PROC
;;;132    
;;;133    void init_EXITs(EXIT_Typedef* EXIT_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;134    {
000004  4607              MOV      r7,r0
;;;135        uint64_t currentPin = EXIT_InitStruct->GPIO_Pin;
;;;136        uint32_t iPos;
;;;137        
;;;138        for ( iPos = 0 ; iPos < 50 ; iPos++)
000006  2400              MOVS     r4,#0
;;;139        {
;;;140            if ( ( (currentPin>>iPos) & BIT0 ) != 0 ) 
;;;141            {
;;;142                if (iPos < 26){
;;;143    				if (EXIT_InitStruct->LevelDetection == TRUE){
;;;144    					SET_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << iPos));
000008  e9d78900          LDRD     r8,r9,[r7,#0]
00000c  4d30              LDR      r5,|L7.208|
00000e  2601              MOVS     r6,#1                 ;143
                  |L7.16|
000010  4622              MOV      r2,r4                 ;140
000012  4640              MOV      r0,r8                 ;140
000014  4649              MOV      r1,r9                 ;140
000016  f7fffffe          BL       __aeabi_llsr
00001a  f0100f01          TST      r0,#1                 ;140
00001e  d025              BEQ      |L7.108|
;;;145    				}else{
;;;146    					CLEAR_BIT( GPIO->tGPIO_EXTI0_IS.ulBulk, (BIT0 << iPos));
;;;147    				}
;;;148    				
;;;149    				if (EXIT_InitStruct->BothEdge == TRUE){
;;;150    					SET_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << iPos));
;;;151    				}else{
;;;152    					CLEAR_BIT( GPIO->tGPIO_EXTI0_IBE.ulBulk, (BIT0 << iPos));
;;;153    				}
;;;154    				
;;;155    				if (EXIT_InitStruct->PositivePolarity == TRUE){
;;;156    					SET_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << iPos));
;;;157    				}else{
;;;158    					CLEAR_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << iPos));
;;;159    				}
;;;160    				if (EXIT_InitStruct->EnableInterrupt == TRUE){
;;;161    					SET_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << iPos));
;;;162    				}else{
;;;163    					CLEAR_BIT( GPIO->tGPIO_EXTI0_IEV.ulBulk, (BIT0 << iPos));
;;;164    				}
;;;165    			}else{
;;;166    				if (EXIT_InitStruct->LevelDetection == TRUE){
000020  7a38              LDRB     r0,[r7,#8]
000022  2c1a              CMP      r4,#0x1a              ;142
000024  d227              BCS      |L7.118|
000026  2801              CMP      r0,#1                 ;143
000028  6aa8              LDR      r0,[r5,#0x28]         ;146
00002a  fa06f104          LSL      r1,r6,r4              ;146
00002e  bf0c              ITE      EQ                    ;144
000030  4308              ORREQ    r0,r0,r1              ;144
000032  4388              BICNE    r0,r0,r1              ;146
000034  62a8              STR      r0,[r5,#0x28]         ;146
000036  7a78              LDRB     r0,[r7,#9]            ;149
000038  2801              CMP      r0,#1                 ;149
00003a  6ae8              LDR      r0,[r5,#0x2c]         ;152
00003c  fa06f104          LSL      r1,r6,r4              ;152
000040  bf0c              ITE      EQ                    ;150
000042  4308              ORREQ    r0,r0,r1              ;150
000044  4388              BICNE    r0,r0,r1              ;152
000046  62e8              STR      r0,[r5,#0x2c]         ;152
000048  7ab8              LDRB     r0,[r7,#0xa]          ;155
00004a  2801              CMP      r0,#1                 ;155
00004c  6b28              LDR      r0,[r5,#0x30]         ;158
00004e  fa06f104          LSL      r1,r6,r4              ;158
000052  bf0c              ITE      EQ                    ;156
000054  4308              ORREQ    r0,r0,r1              ;156
000056  4388              BICNE    r0,r0,r1              ;158
000058  6328              STR      r0,[r5,#0x30]         ;158
00005a  7af8              LDRB     r0,[r7,#0xb]          ;160
00005c  2801              CMP      r0,#1                 ;160
00005e  6b28              LDR      r0,[r5,#0x30]         ;163
000060  fa06f104          LSL      r1,r6,r4              ;163
000064  bf0c              ITE      EQ                    ;161
000066  4308              ORREQ    r0,r0,r1              ;161
000068  4388              BICNE    r0,r0,r1              ;163
00006a  6328              STR      r0,[r5,#0x30]         ;163
                  |L7.108|
00006c  1c64              ADDS     r4,r4,#1              ;163
00006e  2c32              CMP      r4,#0x32              ;138
000070  d3ce              BCC      |L7.16|
;;;167    					SET_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << (iPos-26)));
;;;168    				}else{
;;;169    					CLEAR_BIT( GPIO->tGPIO_EXTI1_IS.ulBulk, (BIT0 << (iPos-26)));
;;;170    				}
;;;171    				
;;;172    				if (EXIT_InitStruct->BothEdge == TRUE){
;;;173    					SET_BIT( GPIO->tGPIO_EXTI1_IBE.ulBulk, (BIT0 << (iPos-26)));
;;;174    				}else{
;;;175    					CLEAR_BIT( GPIO->tGPIO_EXTI1_IBE.ulBulk, (BIT0 << (iPos-26)));
;;;176    				}
;;;177    				
;;;178    				if (EXIT_InitStruct->PositivePolarity == TRUE){
;;;179    					SET_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << (iPos-26)));
;;;180    				}else{
;;;181    					CLEAR_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << (iPos-26)));
;;;182    				}
;;;183    				if (EXIT_InitStruct->EnableInterrupt == TRUE){
;;;184    					SET_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << (iPos-26)));
;;;185    				}else{
;;;186    					CLEAR_BIT( GPIO->tGPIO_EXTI1_IEV.ulBulk, (BIT0 << (iPos-26)));
;;;187    				}
;;;188    			}
;;;189            }
;;;190        }
;;;191    }
000072  e8bd87f0          POP      {r4-r10,pc}
                  |L7.118|
000076  2801              CMP      r0,#1                 ;166
000078  6c68              LDR      r0,[r5,#0x44]         ;169
00007a  f1a4011a          SUB      r1,r4,#0x1a           ;169
00007e  fa06f101          LSL      r1,r6,r1              ;169
000082  bf14              ITE      NE                    ;169
000084  4388              BICNE    r0,r0,r1              ;169
000086  4308              ORREQ    r0,r0,r1              ;167
000088  6468              STR      r0,[r5,#0x44]         ;169
00008a  7a78              LDRB     r0,[r7,#9]            ;172
00008c  2801              CMP      r0,#1                 ;172
00008e  6ca8              LDR      r0,[r5,#0x48]         ;175
000090  f1a4011a          SUB      r1,r4,#0x1a           ;175
000094  fa06f101          LSL      r1,r6,r1              ;175
000098  bf0c              ITE      EQ                    ;173
00009a  4308              ORREQ    r0,r0,r1              ;173
00009c  4388              BICNE    r0,r0,r1              ;175
00009e  64a8              STR      r0,[r5,#0x48]         ;175
0000a0  7ab8              LDRB     r0,[r7,#0xa]          ;178
0000a2  2801              CMP      r0,#1                 ;178
0000a4  6ce8              LDR      r0,[r5,#0x4c]         ;181
0000a6  f1a4011a          SUB      r1,r4,#0x1a           ;181
0000aa  fa06f101          LSL      r1,r6,r1              ;181
0000ae  bf0c              ITE      EQ                    ;179
0000b0  4308              ORREQ    r0,r0,r1              ;179
0000b2  4388              BICNE    r0,r0,r1              ;181
0000b4  64e8              STR      r0,[r5,#0x4c]         ;181
0000b6  7af8              LDRB     r0,[r7,#0xb]          ;183
0000b8  2801              CMP      r0,#1                 ;183
0000ba  6ce8              LDR      r0,[r5,#0x4c]         ;186
0000bc  f1a4011a          SUB      r1,r4,#0x1a           ;186
0000c0  fa06f101          LSL      r1,r6,r1              ;186
0000c4  bf0c              ITE      EQ                    ;184
0000c6  4308              ORREQ    r0,r0,r1              ;184
0000c8  4388              BICNE    r0,r0,r1              ;186
0000ca  64e8              STR      r0,[r5,#0x4c]         ;184
0000cc  e7ce              B        |L7.108|
;;;192    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L7.208|
                          DCD      0x40007000

                          AREA ||i.writeBitToGPIO||, CODE, READONLY, ALIGN=2

                  writeBitToGPIO PROC
;;;289    
;;;290    void writeBitToGPIO(EnumGPIO pin, EnumBit val)
000000  4a0c              LDR      r2,|L8.52|
;;;291    {
;;;292     	if(pin  < 32)
000002  2820              CMP      r0,#0x20
000004  f04f0301          MOV      r3,#1                 ;291
000008  d209              BCS      |L8.30|
;;;293     	{
;;;294     	   if (val == HIGH)
;;;295                SET_BIT(GPIO->tGPIO_DATA_0.ulBulk, BIT0 << pin);
00000a  fa03f000          LSL      r0,r3,r0
00000e  2901              CMP      r1,#1                 ;294
;;;296            else
;;;297                CLEAR_BIT(GPIO->tGPIO_DATA_0.ulBulk, BIT0 << pin);
000010  6811              LDR      r1,[r2,#0]
000012  bf0c              ITE      EQ                    ;295
000014  4308              ORREQ    r0,r0,r1              ;295
000016  ea210000          BICNE    r0,r1,r0
00001a  6010              STR      r0,[r2,#0]
;;;298     	}
;;;299     	else
;;;300     	{
;;;301     		if (val == HIGH)
;;;302                SET_BIT(GPIO->tGPIO_DATA_1.ulBulk, BIT0 << (pin-32));
;;;303            else
;;;304                CLEAR_BIT(GPIO->tGPIO_DATA_1.ulBulk, BIT0 << (pin-32));
;;;305     	}
;;;306    }
00001c  4770              BX       lr
                  |L8.30|
00001e  3820              SUBS     r0,r0,#0x20
000020  fa03f000          LSL      r0,r3,r0              ;302
000024  2901              CMP      r1,#1                 ;301
000026  6851              LDR      r1,[r2,#4]            ;304
000028  bf14              ITE      NE                    ;304
00002a  ea210000          BICNE    r0,r1,r0              ;304
00002e  4308              ORREQ    r0,r0,r1              ;302
000030  6050              STR      r0,[r2,#4]            ;304
000032  4770              BX       lr
;;;307    
                          ENDP

                  |L8.52|
                          DCD      0x40007000

                          AREA ||.data||, DATA, ALIGN=2

                  _DebugGPIO
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\gpio\\gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_9f066cd3____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_gpio_c_9f066cd3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_9f066cd3____REVSH|
#line 402
|__asm___6_gpio_c_9f066cd3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_9f066cd3____RRX|
#line 587
|__asm___6_gpio_c_9f066cd3____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
