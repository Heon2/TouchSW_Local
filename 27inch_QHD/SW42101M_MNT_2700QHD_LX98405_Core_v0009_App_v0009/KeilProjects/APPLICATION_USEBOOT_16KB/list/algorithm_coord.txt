; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_coord.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_coord.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\algorithm_coord.crf ..\..\App\Algorithm\Coord\algorithm_coord.c]
                          THUMB

                          AREA ||i.algorithm_coord_EdgeAreaDist||, CODE, READONLY, ALIGN=2

                  algorithm_coord_EdgeAreaDist PROC
;;;1283   
;;;1284   int8_t algorithm_coord_EdgeAreaDist(tXY_t * pos)
000000  4912              LDR      r1,|L1.76|
;;;1285   {
000002  b410              PUSH     {r4}
;;;1286   	int8_t cRet = 0;
;;;1287   
;;;1288   //	if( (pos->x < thisInfo->tCoord.iXEdgeStart) || ((thisInfo->tCoord.iInternalXRes - pos->x) < thisInfo->tCoord.iXEdgeStart) )
;;;1289   //	{
;;;1290   ////		if( ( pos->y < thisInfo->tCoord.iYEdgeStart ) || ((thisInfo->tCoord.iInternalYRes - pos->y) < thisInfo->tCoord.iYEdgeStart) )
;;;1291   ////		{
;;;1292   //			cRet = 1;//2;
;;;1293   ////		}
;;;1294   ////		else
;;;1295   ////		{
;;;1296   ////			cRet = 1;
;;;1297   ////		}
;;;1298   //	}
;;;1299   //	else if( (pos->y < thisInfo->tCoord.iYEdgeStart) || ((thisInfo->tCoord.iInternalYRes - pos->y) < thisInfo->tCoord.iYEdgeStart) )
;;;1300   //	{
;;;1301   //		cRet = 1;
;;;1302   //	}
;;;1303   	
;;;1304   	if(pos->x < thisInfo->tCoord.iXEdgeStart)
000004  6909              LDR      r1,[r1,#0x10]  ; thisInfo
000006  4684              MOV      r12,r0                ;1285
000008  2000              MOVS     r0,#0                 ;1286
00000a  f8dc3000          LDR      r3,[r12,#0]
00000e  f8d12e27          LDR      r2,[r1,#0xe27]
000012  4293              CMP      r3,r2
000014  db0a              BLT      |L1.44|
;;;1305   	{
;;;1306   		cRet = (thisInfo->tCoord.iXEdgeStart - pos->x)>>2;
;;;1307   	}
;;;1308   	else if((thisInfo->tCoord.iInternalXRes - pos->x) < thisInfo->tCoord.iXEdgeStart)
000016  f8d14e17          LDR      r4,[r1,#0xe17]
00001a  1ae3              SUBS     r3,r4,r3
00001c  4293              CMP      r3,r2
00001e  db05              BLT      |L1.44|
;;;1309   	{
;;;1310   		cRet = (thisInfo->tCoord.iXEdgeStart - (thisInfo->tCoord.iInternalXRes - pos->x))>>2;
;;;1311   	}
;;;1312   	else if(pos->y < thisInfo->tCoord.iYEdgeStart)
000020  f8dc3004          LDR      r3,[r12,#4]
000024  f8d12e2b          LDR      r2,[r1,#0xe2b]
000028  4293              CMP      r3,r2
00002a  da05              BGE      |L1.56|
                  |L1.44|
00002c  ebb20003          SUBS.W   r0,r2,r3              ;1306
                  |L1.48|
;;;1313   	{
;;;1314   		cRet = (thisInfo->tCoord.iYEdgeStart - pos->y)>>2;
;;;1315   	}
;;;1316   	else if((thisInfo->tCoord.iInternalYRes - pos->y) < thisInfo->tCoord.iYEdgeStart)
;;;1317   	{
;;;1318   		cRet = (thisInfo->tCoord.iYEdgeStart - (thisInfo->tCoord.iInternalYRes - pos->y))>>2;
;;;1319   	}
;;;1320   	
;;;1321   
;;;1322   	return cRet;
;;;1323   }
000030  bc10              POP      {r4}
000032  f3400087          SBFX     r0,r0,#2,#8           ;1306
000036  4770              BX       lr
                  |L1.56|
000038  f8d11e1b          LDR      r1,[r1,#0xe1b]        ;1316
00003c  1ac9              SUBS     r1,r1,r3              ;1316
00003e  428a              CMP      r2,r1                 ;1316
000040  bfc8              IT       GT                    ;1318
000042  1a50              SUBGT    r0,r2,r1              ;1318
000044  dcf4              BGT      |L1.48|
000046  bc10              POP      {r4}
000048  4770              BX       lr
;;;1324   
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_IsEdgeArea||, CODE, READONLY, ALIGN=2

                  algorithm_coord_IsEdgeArea PROC
;;;1260   
;;;1261   int8_t algorithm_coord_IsEdgeArea(tXY_t * pos, int offset)
000000  4b14              LDR      r3,|L2.84|
;;;1262   {
000002  b430              PUSH     {r4,r5}
;;;1263   	int8_t cRet = 0;
;;;1264   
;;;1265   	if( (pos->x < thisInfo->tCoord.iXEdgeStart + offset) || ((thisInfo->tCoord.iInternalXRes - pos->x) < thisInfo->tCoord.iXEdgeStart + offset) )
000004  691b              LDR      r3,[r3,#0x10]  ; thisInfo
000006  4602              MOV      r2,r0                 ;1262
000008  2000              MOVS     r0,#0                 ;1263
00000a  f8d3ce27          LDR      r12,[r3,#0xe27]
00000e  6814              LDR      r4,[r2,#0]
000010  448c              ADD      r12,r12,r1
;;;1266   	{
;;;1267   		if( ( pos->y < thisInfo->tCoord.iYEdgeStart + offset ) || ((thisInfo->tCoord.iInternalYRes - pos->y) < thisInfo->tCoord.iYEdgeStart + offset) )
000012  f8d35e2b          LDR      r5,[r3,#0xe2b]
000016  6852              LDR      r2,[r2,#4]
000018  4429              ADD      r1,r1,r5
00001a  4564              CMP      r4,r12                ;1265
00001c  db04              BLT      |L2.40|
00001e  f8d35e17          LDR      r5,[r3,#0xe17]        ;1265
000022  1b2c              SUBS     r4,r5,r4              ;1265
000024  4564              CMP      r4,r12                ;1265
000026  da0c              BGE      |L2.66|
                  |L2.40|
000028  428a              CMP      r2,r1
00002a  db04              BLT      |L2.54|
00002c  f8d30e1b          LDR      r0,[r3,#0xe1b]
000030  1a80              SUBS     r0,r0,r2
000032  4288              CMP      r0,r1
000034  da02              BGE      |L2.60|
                  |L2.54|
;;;1268   		{
;;;1269   			cRet = 2;
;;;1270   		}
;;;1271   		else
;;;1272   		{
;;;1273   			cRet = 1;
;;;1274   		}
;;;1275   	}
;;;1276   	else if( (pos->y < thisInfo->tCoord.iYEdgeStart + offset) || ((thisInfo->tCoord.iInternalYRes - pos->y) < thisInfo->tCoord.iYEdgeStart + offset) )
;;;1277   	{
;;;1278   		cRet = 1;
;;;1279   	}
;;;1280   
;;;1281   	return cRet;
;;;1282   }
000036  bc30              POP      {r4,r5}
000038  2002              MOVS     r0,#2                 ;1269
00003a  4770              BX       lr
                  |L2.60|
00003c  bc30              POP      {r4,r5}
00003e  2001              MOVS     r0,#1                 ;1273
000040  4770              BX       lr
                  |L2.66|
000042  428a              CMP      r2,r1                 ;1276
000044  dbfa              BLT      |L2.60|
000046  f8d33e1b          LDR      r3,[r3,#0xe1b]        ;1276
00004a  1a9a              SUBS     r2,r3,r2              ;1276
00004c  4291              CMP      r1,r2                 ;1276
00004e  dcf5              BGT      |L2.60|
000050  bc30              POP      {r4,r5}
000052  4770              BX       lr
;;;1283   
                          ENDP

                  |L2.84|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_IsEdgeArea_Cell||, CODE, READONLY, ALIGN=1

                  algorithm_coord_IsEdgeArea_Cell PROC
;;;1324   
;;;1325   uint8_t algorithm_coord_IsEdgeArea_Cell(int8_t r, int8_t c, int8_t offset)
000000  4684              MOV      r12,r0
;;;1326   {
000002  b410              PUSH     {r4}
;;;1327   	uint8_t bRet = 0;
000004  2000              MOVS     r0,#0
;;;1328   
;;;1329   	if( (r <= 0 + offset) || (r >= ROW_MAX-1-offset) )
;;;1330   	{
;;;1331   		if((c <= 0 + offset) || (c >= COL_MAX-1-offset))bRet = 2;
000006  f1c2035f          RSB      r3,r2,#0x5f
00000a  4594              CMP      r12,r2                ;1329
00000c  bfc4              ITT      GT                    ;1329
00000e  f1c2042f          RSBGT    r4,r2,#0x2f           ;1329
000012  4564              CMPGT    r4,r12                ;1329
000014  dc08              BGT      |L3.40|
000016  4291              CMP      r1,r2
000018  bfcf              ITEEE    GT
00001a  428b              CMPGT    r3,r1
00001c  2002              MOVLE    r0,#2
;;;1332   		else bRet = 1;
;;;1333   	}
;;;1334   	else if((c <= 0 + offset) || (c >= COL_MAX-1-offset))bRet = 1;
;;;1335   	
;;;1336   	return bRet;
;;;1337   }
00001e  bc10              POPLE    {r4}
000020  4770              BXLE     lr
                  |L3.34|
000022  2001              MOVS     r0,#1                 ;1332
000024  bc10              POP      {r4}
000026  4770              BX       lr
                  |L3.40|
000028  4291              CMP      r1,r2                 ;1334
00002a  bfc8              IT       GT                    ;1334
00002c  428b              CMPGT    r3,r1                 ;1334
00002e  ddf8              BLE      |L3.34|
000030  bc10              POP      {r4}
000032  4770              BX       lr
;;;1338   
                          ENDP


                          AREA ||i.algorithm_coord_OutInDrawing||, CODE, READONLY, ALIGN=2

                  algorithm_coord_OutInDrawing PROC
;;;2899   
;;;2900   void algorithm_coord_OutInDrawing(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2901   {
;;;2902   	int i;
;;;2903   	tXY_t	temp_pos, temp_pos2;
;;;2904   	int bound_th = thisModeConf->CoordEdge.usOutInDrawEdgeTh;
000004  488e              LDR      r0,|L4.576|
000006  b08b              SUB      sp,sp,#0x2c           ;2901
;;;2905   	int dis_th = thisModeConf->CoordEdge.ucOutInDrawDisTh;
;;;2906   	int PostProcess[MAX_TOUCH_] = {0, };
000008  f04f0a00          MOV      r10,#0
00000c  f8d0800c          LDR      r8,[r0,#0xc]          ;2904  ; thisModeConf
;;;2907   	
;;;2908   	tCoordInfo_t 	*temp_coord;
;;;2909   
;;;2910   	temp_coord = &thisInfo->tCoord;
;;;2911   
;;;2912   	for( i=MAX_TOUCH_; i--; )
;;;2913   	{
;;;2914   		if( temp_coord->tPos.vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] == 0 )
;;;2915   		{
;;;2916   			if( (temp_coord->tFirstPos.tXY[i].x < thisModeConf->CoordEdge.usOutInDrawEdgeTh) || ((thisInfo->tCoord.iInternalXRes - temp_coord->tFirstPos.tXY[i].x) < thisModeConf->CoordEdge.usOutInDrawEdgeTh)
;;;2917   			|| (temp_coord->tFirstPos.tXY[i].y < thisModeConf->CoordEdge.usOutInDrawEdgeTh) || ((thisInfo->tCoord.iInternalYRes - temp_coord->tFirstPos.tXY[i].y) < thisModeConf->CoordEdge.usOutInDrawEdgeTh) )
;;;2918   			{
;;;2919   				if(temp_coord->tFirstPos.tXY[i].x == temp_coord->tOrgPos.tXY[i].x && temp_coord->tFirstPos.tXY[i].y == temp_coord->tOrgPos.tXY[i].y)
;;;2920   				{
;;;2921   					temp_coord->tPos.vusS[i] = 0;
;;;2922   					break;
;;;2923   				}
;;;2924   			}
;;;2925   			
;;;2926   			if(temp_coord->tFirstPos.tXY[i].x < bound_th)
;;;2927   			{
;;;2928   				temp_pos2.x = temp_coord->tOrgPos.tXY[i].x-temp_coord->tFirstPos.tXY[i].x;
;;;2929   				if(temp_pos2.x > dis_th)
;;;2930   				{
;;;2931   					PostProcess[i] = 1;
;;;2932   					temp_pos2.y = temp_coord->tOrgPos.tXY[i].y - temp_coord->tFirstPos.tXY[i].y;
;;;2933   					temp_pos.x = temp_coord->tFirstPos.tXY[i].x;
;;;2934   					temp_pos.y = (temp_pos.x*temp_pos2.y)/temp_pos2.x;
;;;2935   					temp_coord->tPos.tXY[i].x = -UNIT_DIST;
;;;2936   					temp_coord->tPos.tXY[i].y = temp_coord->tFirstPos.tXY[i].y - temp_pos.y;
;;;2937   				}
;;;2938   			}
;;;2939   			else if(temp_coord->tFirstPos.tXY[i].x > thisInfo->tCoord.iInternalXRes - bound_th)
;;;2940   			{
;;;2941   				temp_pos2.x = temp_coord->tFirstPos.tXY[i].x-temp_coord->tOrgPos.tXY[i].x;
;;;2942   				if(temp_pos2.x > dis_th)
;;;2943   				{
;;;2944   					PostProcess[i] = 1;
;;;2945   					temp_pos2.y = temp_coord->tOrgPos.tXY[i].y - temp_coord->tFirstPos.tXY[i].y;
;;;2946   					temp_pos.x = thisInfo->tCoord.iInternalXRes - temp_coord->tFirstPos.tXY[i].x;
;;;2947   					temp_pos.y = (temp_pos.x*temp_pos2.y)/temp_pos2.x;
;;;2948   					temp_coord->tPos.tXY[i].x = thisInfo->tCoord.iInternalXRes + UNIT_DIST;
;;;2949   					temp_coord->tPos.tXY[i].y = temp_coord->tFirstPos.tXY[i].y - temp_pos.y;
;;;2950   				}
;;;2951   			}	
;;;2952   			
;;;2953   			if(temp_coord->tFirstPos.tXY[i].y > thisInfo->tCoord.iInternalYRes - bound_th)
;;;2954   			{
;;;2955   				if(PostProcess[i] == 0 || ((temp_coord->tPos.tXY[i].x == -UNIT_DIST || temp_coord->tPos.tXY[i].x == (thisInfo->tCoord.iInternalXRes + UNIT_DIST)) && temp_coord->tPos.tXY[i].y > (thisInfo->tCoord.iInternalYRes + UNIT_DIST)))
;;;2956   				{
;;;2957   					temp_pos2.x = temp_coord->tOrgPos.tXY[i].x-temp_coord->tFirstPos.tXY[i].x;
;;;2958   					temp_pos2.y = temp_coord->tFirstPos.tXY[i].y-temp_coord->tOrgPos.tXY[i].y;
;;;2959   					if(temp_pos2.y > dis_th)
;;;2960   					{
;;;2961   						PostProcess[i] = 1;
;;;2962   						temp_pos.y = thisInfo->tCoord.iInternalYRes - temp_coord->tFirstPos.tXY[i].y;
;;;2963   						temp_pos.x = (temp_pos2.x*temp_pos.y)/temp_pos2.y;
;;;2964   						temp_coord->tPos.tXY[i].x = temp_coord->tFirstPos.tXY[i].x - temp_pos.x;
;;;2965   						temp_coord->tPos.tXY[i].y = thisInfo->tCoord.iInternalYRes + UNIT_DIST;
;;;2966   					}
;;;2967   				}
;;;2968   			}	
;;;2969   
;;;2970   			else if(temp_coord->tFirstPos.tXY[i].y < bound_th)
;;;2971   			{
;;;2972   				if(PostProcess[i] == 0 || ((temp_coord->tPos.tXY[i].x == -UNIT_DIST || temp_coord->tPos.tXY[i].x == (thisInfo->tCoord.iInternalXRes + UNIT_DIST)) && temp_coord->tPos.tXY[i].y < -UNIT_DIST))
;;;2973   				{
;;;2974   					PostProcess[i] = 1;
;;;2975   					temp_pos2.x = temp_coord->tOrgPos.tXY[i].x - temp_coord->tFirstPos.tXY[i].x;
;;;2976   					temp_pos2.y = temp_coord->tOrgPos.tXY[i].y - temp_coord->tFirstPos.tXY[i].y;
;;;2977   					if(temp_pos2.y > dis_th)
;;;2978   					{
;;;2979   						temp_pos.y = temp_coord->tFirstPos.tXY[i].y;
;;;2980   						temp_pos.x = (temp_pos2.x*temp_pos.y)/temp_pos2.y;
;;;2981   						temp_coord->tPos.tXY[i].x = temp_coord->tFirstPos.tXY[i].x - temp_pos.x;
;;;2982   						temp_coord->tPos.tXY[i].y = -UNIT_DIST;
;;;2983   					}
;;;2984   				}
;;;2985   			}
;;;2986   			
;;;2987   			if(PostProcess[i] == 1)
;;;2988   			{
;;;2989   				temp_coord->tFirstPos.tXY[i] = temp_coord->tOrgPos.tXY[i];
;;;2990   			}
;;;2991   		}
;;;2992   	}
;;;2993   }
000010  2109              MOVS     r1,#9
000012  466b              MOV      r3,sp                 ;2906
000014  f8b850a4          LDRH     r5,[r8,#0xa4]         ;2904
000018  f89870a6          LDRB     r7,[r8,#0xa6]         ;2905
00001c  f8cda000          STR      r10,[sp,#0]           ;2906
000020  f8cda004          STR      r10,[sp,#4]           ;2906
000024  f8cda008          STR      r10,[sp,#8]           ;2906
000028  f8cda00c          STR      r10,[sp,#0xc]         ;2906
00002c  f8cda010          STR      r10,[sp,#0x10]        ;2906
000030  f8cda014          STR      r10,[sp,#0x14]        ;2906
000034  f8cda018          STR      r10,[sp,#0x18]        ;2906
000038  f8cda01c          STR      r10,[sp,#0x1c]        ;2906
00003c  f8cda020          STR      r10,[sp,#0x20]        ;2906
000040  f8cda024          STR      r10,[sp,#0x24]        ;2910
000044  f8d0c010          LDR      r12,[r0,#0x10]        ;2910  ; thisInfo
000048  f20c365e          ADD      r6,r12,#0x35e         ;2910
                  |L4.76|
00004c  eb060041          ADD      r0,r6,r1,LSL #1       ;2914
000050  f8b02172          LDRH     r2,[r0,#0x172]        ;2914
000054  2a00              CMP      r2,#0                 ;2914
000056  d07d              BEQ      |L4.340|
000058  f8b0036a          LDRH     r0,[r0,#0x36a]        ;2914
00005c  2800              CMP      r0,#0                 ;2914
00005e  d179              BNE      |L4.340|
000060  eb0600c1          ADD      r0,r6,r1,LSL #3       ;2916
000064  f8b840a4          LDRH     r4,[r8,#0xa4]         ;2916
000068  f8d02227          LDR      r2,[r0,#0x227]        ;2916
00006c  42a2              CMP      r2,r4                 ;2916
00006e  db0f              BLT      |L4.144|
000070  f8dc9e17          LDR      r9,[r12,#0xe17]       ;2916
000074  eba90902          SUB      r9,r9,r2              ;2916
000078  45a1              CMP      r9,r4                 ;2916
00007a  bfa4              ITT      GE                    ;2917
00007c  f8d0922b          LDRGE    r9,[r0,#0x22b]        ;2917
000080  45a1              CMPGE    r9,r4                 ;2917
000082  db05              BLT      |L4.144|
000084  f8dcbe1b          LDR      r11,[r12,#0xe1b]      ;2917
000088  ebab0909          SUB      r9,r11,r9             ;2917
00008c  454c              CMP      r4,r9                 ;2917
00008e  dd10              BLE      |L4.178|
                  |L4.144|
000090  f8d04577          LDR      r4,[r0,#0x577]        ;2919
000094  42a2              CMP      r2,r4                 ;2919
000096  d10c              BNE      |L4.178|
000098  f8d0422b          LDR      r4,[r0,#0x22b]        ;2919
00009c  f8d0957b          LDR      r9,[r0,#0x57b]        ;2919
0000a0  454c              CMP      r4,r9                 ;2919
0000a2  d106              BNE      |L4.178|
0000a4  eb060041          ADD      r0,r6,r1,LSL #1       ;2921
0000a8  f8a0a172          STRH     r10,[r0,#0x172]       ;2921
0000ac  b00b              ADD      sp,sp,#0x2c
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.178|
0000b2  42aa              CMP      r2,r5                 ;2926
0000b4  da19              BGE      |L4.234|
0000b6  f8d04577          LDR      r4,[r0,#0x577]        ;2928
0000ba  1aa4              SUBS     r4,r4,r2              ;2928
0000bc  42a7              CMP      r7,r4                 ;2929
0000be  da3b              BGE      |L4.312|
0000c0  f04f0901          MOV      r9,#1                 ;2931
0000c4  f8439021          STR      r9,[r3,r1,LSL #2]     ;2931
0000c8  f8d0b57b          LDR      r11,[r0,#0x57b]       ;2932
0000cc  f8d0922b          LDR      r9,[r0,#0x22b]        ;2932
0000d0  ebab0b09          SUB      r11,r11,r9            ;2932
0000d4  fb02fb0b          MUL      r11,r2,r11            ;2934
0000d8  fb9bf4f4          SDIV     r4,r11,r4             ;2934
0000dc  f06f0bff          MVN      r11,#0xff             ;2935
0000e0  f8c0b122          STR      r11,[r0,#0x122]       ;2935
0000e4  eba90404          SUB      r4,r9,r4              ;2936
0000e8  e024              B        |L4.308|
                  |L4.234|
0000ea  f8dc4e17          LDR      r4,[r12,#0xe17]       ;2939
0000ee  940a              STR      r4,[sp,#0x28]         ;2939
0000f0  1b64              SUBS     r4,r4,r5              ;2939
0000f2  42a2              CMP      r2,r4                 ;2939
0000f4  dd20              BLE      |L4.312|
0000f6  f8d04577          LDR      r4,[r0,#0x577]        ;2941
0000fa  eba20904          SUB      r9,r2,r4              ;2941
0000fe  45b9              CMP      r9,r7                 ;2942
000100  dd1a              BLE      |L4.312|
000102  2401              MOVS     r4,#1                 ;2944
000104  f8434021          STR      r4,[r3,r1,LSL #2]     ;2944
000108  f8d0457b          LDR      r4,[r0,#0x57b]        ;2945
00010c  f8d0b22b          LDR      r11,[r0,#0x22b]       ;2945
000110  f8dde028          LDR      lr,[sp,#0x28]         ;2946
000114  eba4040b          SUB      r4,r4,r11             ;2945
000118  ebae0e02          SUB      lr,lr,r2              ;2946
00011c  fb0ef404          MUL      r4,lr,r4              ;2947
000120  fb94f4f9          SDIV     r4,r4,r9              ;2947
000124  f8dd9028          LDR      r9,[sp,#0x28]         ;2947
000128  ebab0404          SUB      r4,r11,r4             ;2949
00012c  f5097980          ADD      r9,r9,#0x100          ;2947
000130  f8c09122          STR      r9,[r0,#0x122]        ;2948
                  |L4.308|
000134  f8c04126          STR      r4,[r0,#0x126]        ;2949
                  |L4.312|
000138  f8dc9e1b          LDR      r9,[r12,#0xe1b]       ;2953
00013c  f8d0422b          LDR      r4,[r0,#0x22b]        ;2953
000140  eba90b05          SUB      r11,r9,r5             ;2953
000144  455c              CMP      r4,r11                ;2953
000146  dd37              BLE      |L4.440|
000148  f853b021          LDR      r11,[r3,r1,LSL #2]    ;2955
00014c  f1bb0f00          CMP      r11,#0                ;2955
000150  d012              BEQ      |L4.376|
000152  e000              B        |L4.342|
                  |L4.340|
000154  e06d              B        |L4.562|
                  |L4.342|
000156  f8d0b122          LDR      r11,[r0,#0x122]       ;2955
00015a  f51b7f80          CMN      r11,#0x100            ;2955
00015e  d005              BEQ      |L4.364|
000160  f8dcee17          LDR      lr,[r12,#0xe17]       ;2955
000164  f50e7e80          ADD      lr,lr,#0x100          ;2955
000168  45f3              CMP      r11,lr                ;2955
00016a  d156              BNE      |L4.538|
                  |L4.364|
00016c  f8d0b126          LDR      r11,[r0,#0x126]       ;2955
000170  f5097e80          ADD      lr,r9,#0x100          ;2955
000174  45f3              CMP      r11,lr                ;2955
000176  dd50              BLE      |L4.538|
                  |L4.376|
000178  f8d0b577          LDR      r11,[r0,#0x577]       ;2957
00017c  ebab0b02          SUB      r11,r11,r2            ;2957
000180  f8cdb028          STR      r11,[sp,#0x28]        ;2958
000184  f8d0b57b          LDR      r11,[r0,#0x57b]       ;2958
000188  eba40e0b          SUB      lr,r4,r11             ;2958
00018c  45be              CMP      lr,r7                 ;2959
00018e  dd44              BLE      |L4.538|
000190  f04f0b01          MOV      r11,#1                ;2961
000194  f843b021          STR      r11,[r3,r1,LSL #2]    ;2961
000198  eba90404          SUB      r4,r9,r4              ;2962
00019c  f8dd9028          LDR      r9,[sp,#0x28]         ;2963
0001a0  fb09f904          MUL      r9,r9,r4              ;2963
0001a4  fb99f4fe          SDIV     r4,r9,lr              ;2963
0001a8  1b12              SUBS     r2,r2,r4              ;2964
0001aa  f8c02122          STR      r2,[r0,#0x122]        ;2964
0001ae  f8dc2e1b          LDR      r2,[r12,#0xe1b]       ;2965
0001b2  f5027280          ADD      r2,r2,#0x100          ;2965
0001b6  e02d              B        |L4.532|
                  |L4.440|
0001b8  42a5              CMP      r5,r4                 ;2970
0001ba  dd2e              BLE      |L4.538|
0001bc  f8539021          LDR      r9,[r3,r1,LSL #2]     ;2972
0001c0  f1b90f00          CMP      r9,#0                 ;2972
0001c4  d00f              BEQ      |L4.486|
0001c6  f8d09122          LDR      r9,[r0,#0x122]        ;2972
0001ca  f5197f80          CMN      r9,#0x100             ;2972
0001ce  d005              BEQ      |L4.476|
0001d0  f8dcbe17          LDR      r11,[r12,#0xe17]      ;2972
0001d4  f50b7b80          ADD      r11,r11,#0x100        ;2972
0001d8  45d9              CMP      r9,r11                ;2972
0001da  d11e              BNE      |L4.538|
                  |L4.476|
0001dc  f8d09126          LDR      r9,[r0,#0x126]        ;2972
0001e0  f5197f80          CMN      r9,#0x100             ;2972
0001e4  da19              BGE      |L4.538|
                  |L4.486|
0001e6  f04f0901          MOV      r9,#1                 ;2974
0001ea  f8439021          STR      r9,[r3,r1,LSL #2]     ;2974
0001ee  f8d09577          LDR      r9,[r0,#0x577]        ;2975
0001f2  eba90b02          SUB      r11,r9,r2             ;2975
0001f6  f8d0957b          LDR      r9,[r0,#0x57b]        ;2976
0001fa  eba90904          SUB      r9,r9,r4              ;2976
0001fe  45b9              CMP      r9,r7                 ;2977
000200  dd0f              BLE      |L4.546|
000202  fb0bf404          MUL      r4,r11,r4             ;2980
000206  fb94f4f9          SDIV     r4,r4,r9              ;2980
00020a  1b12              SUBS     r2,r2,r4              ;2981
00020c  f8c02122          STR      r2,[r0,#0x122]        ;2981
000210  f06f02ff          MVN      r2,#0xff              ;2982
                  |L4.532|
000214  f8c02126          STR      r2,[r0,#0x126]        ;2965
000218  e003              B        |L4.546|
                  |L4.538|
00021a  f8532021          LDR      r2,[r3,r1,LSL #2]     ;2987
00021e  2a01              CMP      r2,#1                 ;2987
000220  d107              BNE      |L4.562|
                  |L4.546|
000222  f8d02577          LDR      r2,[r0,#0x577]        ;2989
000226  f8c02227          STR      r2,[r0,#0x227]        ;2989
00022a  f8d0257b          LDR      r2,[r0,#0x57b]        ;2989
00022e  f8c0222b          STR      r2,[r0,#0x22b]        ;2989
                  |L4.562|
000232  1e49              SUBS     r1,r1,#1              ;2989
000234  f4bfaf0a          BCS      |L4.76|
000238  b00b              ADD      sp,sp,#0x2c
00023a  e8bd8ff0          POP      {r4-r11,pc}
;;;2994   void algorithm_coord_PostProcess(int mode)
                          ENDP

00023e  0000              DCW      0x0000
                  |L4.576|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_coord_PostProcess PROC
;;;2993   }
;;;2994   void algorithm_coord_PostProcess(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2995   {
;;;2996   	int i;
;;;2997   	tXY_t	temp_pos;
;;;2998   
;;;2999   	tCoordInfo_t 	*temp_coord;
;;;3000   
;;;3001   	if(mode != FULL_MODE)
;;;3002   		temp_coord = &thisInfo->tCoord_local;
000004  4ffe              LDR      r7,|L5.1024|
000006  b093              SUB      sp,sp,#0x4c           ;2995
000008  2800              CMP      r0,#0                 ;3001
00000a  6939              LDR      r1,[r7,#0x10]         ;3001
00000c  bf1a              ITTE     NE
00000e  f24130d4          MOVNE    r0,#0x13d4
000012  180e              ADDNE    r6,r1,r0
;;;3003   	else
;;;3004   		temp_coord = &thisInfo->tCoord;
000014  f201365e          ADDEQ    r6,r1,#0x35e
;;;3005   
;;;3006   	for( i=MAX_TOUCH_; i--; )
;;;3007   	{
;;;3008   		if( temp_coord->tPos.vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] == 0 )
;;;3009   		{
;;;3010   			if( temp_coord->cScreenDebCnt[i] > 2 )
;;;3011   			{
;;;3012   				if( algorithm_coord_IsEdgeArea(&temp_coord->tFirstPos.tXY[i], 0) > 0 )
;;;3013   				{
;;;3014   					int dist;
;;;3015   
;;;3016   					dist = algorithm_coord_calc_distance(temp_coord->tFirstPos.tXY[i], temp_coord->tOrgPos.tXY[i]);
;;;3017   
;;;3018   					if( dist > _BV(6) )
;;;3019   					{
;;;3020   						temp_coord->ucPostProcessRun[i] = 1;
;;;3021   						temp_pos = temp_coord->tPos.tXY[i];
;;;3022   						temp_coord->tPos.tXY[i] = temp_coord->tFirstPos.tXY[i];
;;;3023   						temp_coord->tFirstPos.tXY[i] = temp_pos;
;;;3024   					}
;;;3025   				}
;;;3026   			}
;;;3027   		}
;;;3028   
;;;3029   		if(thisModeConf->CoordEdge.usPostProcessEdgeTH > 0)
;;;3030   		{
;;;3031   			if(temp_coord->tOrgPos.vusS[i] == 0 && temp_coord->tOrgPastPos[1].vusS[i] > 0 && temp_coord->tOrgPastPos[0].vusS[i] > 0 && temp_coord->tOrgPastPos[2].vusS[i] > 0) 
;;;3032   			{
;;;3033   				int ExpandTH = thisModeConf->CoordEdge.usPostProcessEdgeTH;
;;;3034   				uint8_t x_edge_f = 0;
;;;3035   				uint8_t y_edge_f = 0;
;;;3036   				
;;;3037   				if(temp_coord->tOrgPastPos[0].tXY[i].x < ExpandTH)x_edge_f = 1;
;;;3038   				else if(thisInfo->tCoord.iInternalXRes - temp_coord->tOrgPastPos[0].tXY[i].x < ExpandTH)x_edge_f = 2;
;;;3039   				
;;;3040   				if(temp_coord->tOrgPastPos[0].tXY[i].y < ExpandTH)y_edge_f = 1;
;;;3041   				else if(thisInfo->tCoord.iInternalYRes - temp_coord->tOrgPastPos[0].tXY[i].y < ExpandTH)y_edge_f = 2;
;;;3042   				
;;;3043   				if(x_edge_f || y_edge_f)
;;;3044   				{
;;;3045   					int dist_y[3] = {0,};			
;;;3046   					int dist_x[3] = {0,};      
;;;3047   				
;;;3048   					dist_y[0] = temp_coord->tPastPos[0].tXY[i].y - temp_coord->tPastPos[1].tXY[i].y;			
;;;3049   					dist_x[0] = temp_coord->tPastPos[0].tXY[i].x - temp_coord->tPastPos[1].tXY[i].x;				
;;;3050   
;;;3051   					dist_y[1] = temp_coord->tPastPos[0].tXY[i].y - temp_coord->tPastPos[2].tXY[i].y;
;;;3052   					dist_x[1] = temp_coord->tPastPos[0].tXY[i].x - temp_coord->tPastPos[2].tXY[i].x;		
;;;3053   				
;;;3054   					dist_y[2] = temp_coord->tPastPos[1].tXY[i].y - temp_coord->tPastPos[2].tXY[i].y;
;;;3055   					dist_x[2] = temp_coord->tPastPos[1].tXY[i].x - temp_coord->tPastPos[2].tXY[i].x;	
;;;3056   					
;;;3057   					if( (dist_x[0] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[1] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[2] < -thisModeConf->CoordEdge.ucPostProcessDisTH && x_edge_f == 1)
;;;3058   					|| (dist_x[0] > thisModeConf->CoordEdge.ucPostProcessDisTH   && dist_x[1] > thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[2] > thisModeConf->CoordEdge.ucPostProcessDisTH &&x_edge_f == 2)
;;;3059   					|| (dist_y[0] < -thisModeConf->CoordEdge.ucPostProcessDisTH  && dist_y[1] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_y[2] < -thisModeConf->CoordEdge.ucPostProcessDisTH && y_edge_f == 1)
;;;3060   					|| (dist_y[0] > thisModeConf->CoordEdge.ucPostProcessDisTH   && dist_y[2] > thisModeConf->CoordEdge.ucPostProcessDisTH && dist_y[2] > thisModeConf->CoordEdge.ucPostProcessDisTH && y_edge_f == 2) )
;;;3061   					{
;;;3062   						temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + dist_x[0]/thisModeConf->CoordEdge.ucPostProcessExpendDiv;
;;;3063   						temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + dist_y[0]/thisModeConf->CoordEdge.ucPostProcessExpendDiv;
;;;3064   						
;;;3065   						uint8_t max_idx = 0;
;;;3066   						if(x_edge_f == 1 && temp_coord->tPos.tXY[i].x > -thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3067   						{
;;;3068   							temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + MIN(dist_x[0],MIN(dist_x[1], dist_x[2]));
;;;3069   							
;;;3070   							if(abs(dist_y[0]) >= abs(dist_y[1]) && abs(dist_y[0]) >= abs(dist_y[2]))max_idx = 0;
;;;3071   							else if(abs(dist_y[1]) >= abs(dist_y[0]) && abs(dist_y[1]) >= abs(dist_y[2]))max_idx = 1;
;;;3072   							else if(abs(dist_y[2]) >= abs(dist_y[0]) && abs(dist_y[2]) >= abs(dist_y[1]))max_idx = 2;
;;;3073   							
;;;3074   							temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + dist_y[max_idx];
;;;3075   						}
;;;3076   						else if(x_edge_f == 2 && temp_coord->tPos.tXY[i].x < thisInfo->tCoord.iInternalXRes + thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3077   						{
;;;3078   							temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + MAX(dist_x[0],MAX(dist_x[1], dist_x[2]));
;;;3079   																	
;;;3080   							if(abs(dist_y[0]) >= abs(dist_y[1]) && abs(dist_y[0]) >= abs(dist_y[2]))max_idx = 0;
;;;3081   							else if(abs(dist_y[1]) >= abs(dist_y[0]) && abs(dist_y[1]) >= abs(dist_y[2]))max_idx = 1;
;;;3082   							else if(abs(dist_y[2]) >= abs(dist_y[0]) && abs(dist_y[2]) >= abs(dist_y[1]))max_idx = 2;
;;;3083   							
;;;3084   							temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + dist_y[max_idx];
;;;3085   						}
;;;3086   						
;;;3087   						max_idx = 0;
;;;3088   						if(y_edge_f == 1 && temp_coord->tPos.tXY[i].y > -thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3089   						{
;;;3090   							temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + MIN(dist_y[0],MIN(dist_y[1], dist_y[2]));
;;;3091   																	
;;;3092   							if(abs(dist_x[0]) >= abs(dist_x[1]) && abs(dist_x[0]) >= abs(dist_x[2]))max_idx = 0;
;;;3093   							else if(abs(dist_x[1]) >= abs(dist_x[0]) && abs(dist_x[1]) >= abs(dist_x[2]))max_idx = 1;
;;;3094   							else if(abs(dist_x[2]) >= abs(dist_x[0]) && abs(dist_x[2]) >= abs(dist_x[1]))max_idx = 2;
;;;3095   							
;;;3096   							temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + dist_x[max_idx];
;;;3097   						}
;;;3098   						else if(y_edge_f == 2 && temp_coord->tPos.tXY[i].y < thisInfo->tCoord.iInternalYRes + thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3099   						{
;;;3100   							temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + MAX(dist_y[0],MAX(dist_y[1], dist_y[2]));
;;;3101   							
;;;3102   							if(abs(dist_x[0]) >= abs(dist_x[1]) && abs(dist_x[0]) >= abs(dist_x[2]))max_idx = 0;
;;;3103   							else if(abs(dist_x[1]) >= abs(dist_x[0]) && abs(dist_x[1]) >= abs(dist_x[2]))max_idx = 1;
;;;3104   							else if(abs(dist_x[2]) >= abs(dist_x[0]) && abs(dist_x[2]) >= abs(dist_x[1]))max_idx = 2;
;;;3105   							
;;;3106   							temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + dist_x[max_idx];
;;;3107   						}
;;;3108   							
;;;3109   						temp_coord->tPos.vusS[i]  =  temp_coord->tOrgPastPos[0].vusS[i];
;;;3110   						temp_coord->tPos.vusR[i]  =  temp_coord->tOrgPastPos[0].vusR[i];						
;;;3111   					}
;;;3112   				}
;;;3113   			}
;;;3114   		}
;;;3115   	}
;;;3116   }
000018  2509              MOVS     r5,#9
00001a  f04f0901          MOV      r9,#1                 ;3020
00001e  46e8              MOV      r8,sp                 ;3045
                  |L5.32|
000020  eb060445          ADD      r4,r6,r5,LSL #1       ;3008
000024  f8b40172          LDRH     r0,[r4,#0x172]        ;3008
000028  b3a0              CBZ      r0,|L5.148|
00002a  f8b4036a          LDRH     r0,[r4,#0x36a]        ;3008
00002e  bb88              CBNZ     r0,|L5.148|
000030  eb060b05          ADD      r11,r6,r5             ;3010
000034  f99b0a51          LDRSB    r0,[r11,#0xa51]       ;3010
000038  2802              CMP      r0,#2                 ;3010
00003a  dd2b              BLE      |L5.148|
00003c  eb060ac5          ADD      r10,r6,r5,LSL #3      ;3012
000040  f20a2027          ADD      r0,r10,#0x227         ;3012
000044  2100              MOVS     r1,#0                 ;3012
000046  f7fffffe          BL       algorithm_coord_IsEdgeArea
00004a  2800              CMP      r0,#0                 ;3012
00004c  dd22              BLE      |L5.148|
00004e  f8da1227          LDR      r1,[r10,#0x227]       ;3016
000052  f8da3577          LDR      r3,[r10,#0x577]       ;3016
000056  f8da022b          LDR      r0,[r10,#0x22b]       ;3016
00005a  f8da257b          LDR      r2,[r10,#0x57b]       ;3016
00005e  1ac9              SUBS     r1,r1,r3              ;3016
000060  4349              MULS     r1,r1,r1              ;3016
000062  1a80              SUBS     r0,r0,r2              ;3016
000064  fb001000          MLA      r0,r0,r0,r1           ;3016
000068  f7fffffe          BL       algorithm_calc_sqrt
00006c  2840              CMP      r0,#0x40              ;3018
00006e  dd11              BLE      |L5.148|
000070  f88b9a65          STRB     r9,[r11,#0xa65]       ;3020
000074  f8da0122          LDR      r0,[r10,#0x122]       ;3021
000078  f8da1126          LDR      r1,[r10,#0x126]       ;3021
00007c  f8da2227          LDR      r2,[r10,#0x227]       ;3022
000080  f8ca2122          STR      r2,[r10,#0x122]       ;3022
000084  f8da222b          LDR      r2,[r10,#0x22b]       ;3022
000088  f8ca2126          STR      r2,[r10,#0x126]       ;3022
00008c  f8ca0227          STR      r0,[r10,#0x227]       ;3023
000090  f8ca122b          STR      r1,[r10,#0x22b]       ;3023
                  |L5.148|
000094  68f9              LDR      r1,[r7,#0xc]          ;3029  ; thisModeConf
000096  f8b1a09e          LDRH     r10,[r1,#0x9e]        ;3029
00009a  f1ba0f00          CMP      r10,#0                ;3029
00009e  f0008261          BEQ.W    |L5.1380|
0000a2  f8b405c7          LDRH     r0,[r4,#0x5c7]        ;3031
0000a6  2800              CMP      r0,#0                 ;3031
0000a8  f040825c          BNE.W    |L5.1380|
0000ac  f8b40745          LDRH     r0,[r4,#0x745]        ;3031
0000b0  2800              CMP      r0,#0                 ;3031
0000b2  bf1f              ITTTT    NE                    ;3031
0000b4  f8b406cc          LDRHNE   r0,[r4,#0x6cc]        ;3031
0000b8  2800              CMPNE    r0,#0                 ;3031
0000ba  f8b407be          LDRHNE   r0,[r4,#0x7be]        ;3031
0000be  2800              CMPNE    r0,#0                 ;3031
0000c0  f0008250          BEQ.W    |L5.1380|
0000c4  eb0600c5          ADD      r0,r6,r5,LSL #3       ;3037
0000c8  f04f0300          MOV      r3,#0                 ;3034
0000cc  f8d0c67c          LDR      r12,[r0,#0x67c]       ;3037
0000d0  461a              MOV      r2,r3                 ;3035
0000d2  f8cdc048          STR      r12,[sp,#0x48]        ;3037
0000d6  45d4              CMP      r12,r10               ;3037
0000d8  bfb8              IT       LT                    ;3037
0000da  2301              MOVLT    r3,#1                 ;3037
0000dc  db0a              BLT      |L5.244|
0000de  f8d7c010          LDR      r12,[r7,#0x10]        ;3038  ; thisInfo
0000e2  f8dcbe17          LDR      r11,[r12,#0xe17]      ;3038
0000e6  f8ddc048          LDR      r12,[sp,#0x48]        ;3038
0000ea  ebab0c0c          SUB      r12,r11,r12           ;3038
0000ee  45d4              CMP      r12,r10               ;3038
0000f0  bfb8              IT       LT                    ;3038
0000f2  2302              MOVLT    r3,#2                 ;3038
                  |L5.244|
0000f4  f8d0c680          LDR      r12,[r0,#0x680]       ;3040
0000f8  45d4              CMP      r12,r10               ;3040
0000fa  bfb8              IT       LT                    ;3040
0000fc  2201              MOVLT    r2,#1                 ;3040
0000fe  db08              BLT      |L5.274|
000100  f8d7b010          LDR      r11,[r7,#0x10]        ;3041  ; thisInfo
000104  f8dbbe1b          LDR      r11,[r11,#0xe1b]      ;3041
000108  ebab0b0c          SUB      r11,r11,r12           ;3041
00010c  45d3              CMP      r11,r10               ;3041
00010e  bfb8              IT       LT                    ;3041
000110  2202              MOVLT    r2,#2                 ;3041
                  |L5.274|
000112  ea530a02          ORRS     r10,r3,r2             ;3043
000116  f0008225          BEQ.W    |L5.1380|
00011a  f8d0a31e          LDR      r10,[r0,#0x31e]       ;3048
00011e  f8d0e397          LDR      lr,[r0,#0x397]        ;3048
000122  f8cde02c          STR      lr,[sp,#0x2c]         ;3049
000126  ebaa0b0e          SUB      r11,r10,lr            ;3048
00012a  f8cdb000          STR      r11,[sp,#0]           ;3049
00012e  f8d0e31a          LDR      lr,[r0,#0x31a]        ;3049
000132  f8d0b393          LDR      r11,[r0,#0x393]       ;3049
000136  f8cdb024          STR      r11,[sp,#0x24]        ;3049
00013a  ebae0b0b          SUB      r11,lr,r11            ;3049
00013e  f8cdb00c          STR      r11,[sp,#0xc]         ;3051
000142  f8d0b410          LDR      r11,[r0,#0x410]       ;3051
000146  ebaa0a0b          SUB      r10,r10,r11           ;3051
00014a  f8cda004          STR      r10,[sp,#4]           ;3052
00014e  f8d0a40c          LDR      r10,[r0,#0x40c]       ;3052
000152  f8cda018          STR      r10,[sp,#0x18]        ;3052
000156  ebae0a0a          SUB      r10,lr,r10            ;3052
00015a  f8dde02c          LDR      lr,[sp,#0x2c]         ;3054
00015e  f8cda010          STR      r10,[sp,#0x10]        ;3052
000162  ebae0a0b          SUB      r10,lr,r11            ;3054
000166  f8cda008          STR      r10,[sp,#8]           ;3054
00016a  f8ddb024          LDR      r11,[sp,#0x24]        ;3055
00016e  f8dda018          LDR      r10,[sp,#0x18]        ;3055
000172  ebab0a0a          SUB      r10,r11,r10           ;3055
000176  f8cda014          STR      r10,[sp,#0x14]        ;3057
00017a  f891a0a0          LDRB     r10,[r1,#0xa0]        ;3057
00017e  f8ddb00c          LDR      r11,[sp,#0xc]         ;3057
000182  f1ca0e00          RSB      lr,r10,#0             ;3057
000186  45de              CMP      lr,r11                ;3057
000188  bfc1              ITTTT    GT                    ;3057
00018a  f8ddb010          LDRGT    r11,[sp,#0x10]        ;3057
00018e  45de              CMPGT    lr,r11                ;3057
000190  f8ddb014          LDRGT    r11,[sp,#0x14]        ;3057
000194  45de              CMPGT    lr,r11                ;3057
000196  dd01              BLE      |L5.412|
000198  2b01              CMP      r3,#1                 ;3057
00019a  d025              BEQ      |L5.488|
                  |L5.412|
00019c  f8ddb00c          LDR      r11,[sp,#0xc]         ;3058
0001a0  45d3              CMP      r11,r10               ;3058
0001a2  bfc1              ITTTT    GT                    ;3058
0001a4  f8ddb010          LDRGT    r11,[sp,#0x10]        ;3058
0001a8  45d3              CMPGT    r11,r10               ;3058
0001aa  f8ddb014          LDRGT    r11,[sp,#0x14]        ;3058
0001ae  45d3              CMPGT    r11,r10               ;3058
0001b0  dd01              BLE      |L5.438|
0001b2  2b02              CMP      r3,#2                 ;3058
0001b4  d018              BEQ      |L5.488|
                  |L5.438|
0001b6  f8ddb000          LDR      r11,[sp,#0]           ;3059
0001ba  45f3              CMP      r11,lr                ;3059
0001bc  bfbf              ITTTT    LT                    ;3059
0001be  f8ddb004          LDRLT    r11,[sp,#4]           ;3059
0001c2  45f3              CMPLT    r11,lr                ;3059
0001c4  f8ddb008          LDRLT    r11,[sp,#8]           ;3059
0001c8  45f3              CMPLT    r11,lr                ;3059
0001ca  da01              BGE      |L5.464|
0001cc  2a01              CMP      r2,#1                 ;3059
0001ce  d00b              BEQ      |L5.488|
                  |L5.464|
0001d0  f8ddb000          LDR      r11,[sp,#0]           ;3060
0001d4  45d3              CMP      r11,r10               ;3060
0001d6  bfc4              ITT      GT                    ;3060
0001d8  f8ddb008          LDRGT    r11,[sp,#8]           ;3060
0001dc  45d3              CMPGT    r11,r10               ;3060
0001de  f34081c1          BLE.W    |L5.1380|
0001e2  2a02              CMP      r2,#2                 ;3060
0001e4  f04081be          BNE.W    |L5.1380|
                  |L5.488|
0001e8  f891b0a1          LDRB     r11,[r1,#0xa1]        ;3062
0001ec  f8dda00c          LDR      r10,[sp,#0xc]         ;3062
0001f0  2b01              CMP      r3,#1                 ;3066
0001f2  fb9afbfb          SDIV     r11,r10,r11           ;3062
0001f6  f8dda048          LDR      r10,[sp,#0x48]        ;3062
0001fa  44da              ADD      r10,r10,r11           ;3062
0001fc  f8c0a122          STR      r10,[r0,#0x122]       ;3062
000200  f891e0a1          LDRB     lr,[r1,#0xa1]         ;3063
000204  f8ddb000          LDR      r11,[sp,#0]           ;3063
000208  fb9bfbfe          SDIV     r11,r11,lr            ;3063
00020c  44e3              ADD      r11,r11,r12           ;3063
00020e  f8c0b126          STR      r11,[r0,#0x126]       ;3063
000212  f04f0b00          MOV      r11,#0                ;3065
000216  d002              BEQ      |L5.542|
000218  2b02              CMP      r3,#2                 ;3076
00021a  d075              BEQ      |L5.776|
00021c  e06b              B        |L5.758|
                  |L5.542|
00021e  f99130a2          LDRSB    r3,[r1,#0xa2]         ;3066
000222  425b              RSBS     r3,r3,#0              ;3066
000224  459a              CMP      r10,r3                ;3066
000226  dd66              BLE      |L5.758|
000228  e9dd3a04          LDRD     r3,r10,[sp,#0x10]     ;3066
00022c  459a              CMP      r10,r3                ;3068
00022e  bfd8              IT       LE                    ;3068
000230  4653              MOVLE    r3,r10                ;3068
000232  f8dda00c          LDR      r10,[sp,#0xc]         ;3068
000236  4553              CMP      r3,r10                ;3068
000238  dc03              BGT      |L5.578|
00023a  e9dd3a04          LDRD     r3,r10,[sp,#0x10]     ;3068
00023e  459a              CMP      r10,r3                ;3068
000240  dc00              BGT      |L5.580|
                  |L5.578|
000242  4653              MOV      r3,r10                ;3068
                  |L5.580|
000244  f8dda048          LDR      r10,[sp,#0x48]        ;3068
000248  4453              ADD      r3,r3,r10             ;3068
00024a  f8c03122          STR      r3,[r0,#0x122]        ;3068
00024e  e9dd3a00          LDRD     r3,r10,[sp,#0]        ;3068
000252  2b00              CMP      r3,#0                 ;3070
000254  bfb8              IT       LT                    ;3070
000256  425b              RSBLT    r3,r3,#0              ;3070
000258  f1ba0f00          CMP      r10,#0                ;3070
00025c  bfb8              IT       LT                    ;3070
00025e  f1ca0a00          RSBLT    r10,r10,#0            ;3070
000262  459a              CMP      r10,r3                ;3070
000264  dc0c              BGT      |L5.640|
000266  f8dda000          LDR      r10,[sp,#0]           ;3070
00026a  9b02              LDR      r3,[sp,#8]            ;3070
00026c  f1ba0f00          CMP      r10,#0                ;3070
000270  bfb8              IT       LT                    ;3070
000272  f1ca0a00          RSBLT    r10,r10,#0            ;3070
000276  2b00              CMP      r3,#0                 ;3070
000278  bfb8              IT       LT                    ;3070
00027a  425b              RSBLT    r3,r3,#0              ;3070
00027c  459a              CMP      r10,r3                ;3070
00027e  da35              BGE      |L5.748|
                  |L5.640|
000280  e9dda300          LDRD     r10,r3,[sp,#0]        ;3070
000284  2b00              CMP      r3,#0                 ;3071
000286  bfb8              IT       LT                    ;3071
000288  425b              RSBLT    r3,r3,#0              ;3071
00028a  f1ba0f00          CMP      r10,#0                ;3071
00028e  bfb8              IT       LT                    ;3071
000290  f1ca0a00          RSBLT    r10,r10,#0            ;3071
000294  459a              CMP      r10,r3                ;3071
000296  dc0e              BGT      |L5.694|
000298  e9dda301          LDRD     r10,r3,[sp,#4]        ;3071
00029c  f1ba0f00          CMP      r10,#0                ;3071
0002a0  bfb8              IT       LT                    ;3071
0002a2  f1ca0a00          RSBLT    r10,r10,#0            ;3071
0002a6  2b00              CMP      r3,#0                 ;3071
0002a8  bfb8              IT       LT                    ;3071
0002aa  425b              RSBLT    r3,r3,#0              ;3071
0002ac  459a              CMP      r10,r3                ;3071
0002ae  db02              BLT      |L5.694|
                  |L5.688|
0002b0  f04f0b01          MOV      r11,#1                ;3071
0002b4  e01a              B        |L5.748|
                  |L5.694|
0002b6  f8dda008          LDR      r10,[sp,#8]           ;3072
0002ba  9b00              LDR      r3,[sp,#0]            ;3072
0002bc  f1ba0f00          CMP      r10,#0                ;3072
0002c0  bfb8              IT       LT                    ;3072
0002c2  f1ca0a00          RSBLT    r10,r10,#0            ;3072
0002c6  2b00              CMP      r3,#0                 ;3072
0002c8  bfb8              IT       LT                    ;3072
0002ca  425b              RSBLT    r3,r3,#0              ;3072
0002cc  4553              CMP      r3,r10                ;3072
0002ce  dc0d              BGT      |L5.748|
0002d0  e9dd3a01          LDRD     r3,r10,[sp,#4]        ;3072
0002d4  f1ba0f00          CMP      r10,#0                ;3072
0002d8  bfb8              IT       LT                    ;3072
0002da  f1ca0a00          RSBLT    r10,r10,#0            ;3072
0002de  2b00              CMP      r3,#0                 ;3072
0002e0  bfb8              IT       LT                    ;3072
0002e2  425b              RSBLT    r3,r3,#0              ;3072
0002e4  459a              CMP      r10,r3                ;3072
0002e6  db01              BLT      |L5.748|
                  |L5.744|
0002e8  f04f0b02          MOV      r11,#2                ;3072
                  |L5.748|
0002ec  f858302b          LDR      r3,[r8,r11,LSL #2]    ;3084
0002f0  4463              ADD      r3,r3,r12             ;3084
0002f2  f8c03126          STR      r3,[r0,#0x126]        ;3084
                  |L5.758|
0002f6  2300              MOVS     r3,#0                 ;3087
0002f8  2a01              CMP      r2,#1                 ;3088
0002fa  d06b              BEQ      |L5.980|
0002fc  2a02              CMP      r2,#2                 ;3098
0002fe  f00080c9          BEQ.W    |L5.1172|
000302  f000b927          B.W      |L5.1364|
000306  e7ff              B        |L5.776|
                  |L5.776|
000308  693b              LDR      r3,[r7,#0x10]         ;3076  ; thisInfo
00030a  f991e0a2          LDRSB    lr,[r1,#0xa2]         ;3076
00030e  f8d33e17          LDR      r3,[r3,#0xe17]        ;3076
000312  4473              ADD      r3,r3,lr              ;3076
000314  4553              CMP      r3,r10                ;3076
000316  ddee              BLE      |L5.758|
000318  e9dd3a04          LDRD     r3,r10,[sp,#0x10]     ;3076
00031c  4553              CMP      r3,r10                ;3078
00031e  bfd8              IT       LE                    ;3078
000320  4653              MOVLE    r3,r10                ;3078
000322  f8dda00c          LDR      r10,[sp,#0xc]         ;3078
000326  4553              CMP      r3,r10                ;3078
000328  db03              BLT      |L5.818|
00032a  e9dd3a04          LDRD     r3,r10,[sp,#0x10]     ;3078
00032e  459a              CMP      r10,r3                ;3078
000330  db00              BLT      |L5.820|
                  |L5.818|
000332  4653              MOV      r3,r10                ;3078
                  |L5.820|
000334  f8dda048          LDR      r10,[sp,#0x48]        ;3078
000338  4453              ADD      r3,r3,r10             ;3078
00033a  f8c03122          STR      r3,[r0,#0x122]        ;3078
00033e  e9dda300          LDRD     r10,r3,[sp,#0]        ;3078
000342  f1ba0f00          CMP      r10,#0                ;3080
000346  bfb8              IT       LT                    ;3080
000348  f1ca0a00          RSBLT    r10,r10,#0            ;3080
00034c  2b00              CMP      r3,#0                 ;3080
00034e  bfb8              IT       LT                    ;3080
000350  425b              RSBLT    r3,r3,#0              ;3080
000352  4553              CMP      r3,r10                ;3080
000354  dc0c              BGT      |L5.880|
000356  9b00              LDR      r3,[sp,#0]            ;3080
000358  f8dda008          LDR      r10,[sp,#8]           ;3080
00035c  2b00              CMP      r3,#0                 ;3080
00035e  bfb8              IT       LT                    ;3080
000360  425b              RSBLT    r3,r3,#0              ;3080
000362  f1ba0f00          CMP      r10,#0                ;3080
000366  bfb8              IT       LT                    ;3080
000368  f1ca0a00          RSBLT    r10,r10,#0            ;3080
00036c  4553              CMP      r3,r10                ;3080
00036e  dabd              BGE      |L5.748|
                  |L5.880|
000370  e9dd3a00          LDRD     r3,r10,[sp,#0]        ;3080
000374  f1ba0f00          CMP      r10,#0                ;3081
000378  bfb8              IT       LT                    ;3081
00037a  f1ca0a00          RSBLT    r10,r10,#0            ;3081
00037e  2b00              CMP      r3,#0                 ;3081
000380  bfb8              IT       LT                    ;3081
000382  425b              RSBLT    r3,r3,#0              ;3081
000384  4553              CMP      r3,r10                ;3081
000386  dc0b              BGT      |L5.928|
000388  e9dda301          LDRD     r10,r3,[sp,#4]        ;3081
00038c  f1ba0f00          CMP      r10,#0                ;3081
000390  bfb8              IT       LT                    ;3081
000392  f1ca0a00          RSBLT    r10,r10,#0            ;3081
000396  2b00              CMP      r3,#0                 ;3081
000398  bfb8              IT       LT                    ;3081
00039a  425b              RSBLT    r3,r3,#0              ;3081
00039c  459a              CMP      r10,r3                ;3081
00039e  da87              BGE      |L5.688|
                  |L5.928|
0003a0  f8dda008          LDR      r10,[sp,#8]           ;3082
0003a4  9b00              LDR      r3,[sp,#0]            ;3082
0003a6  f1ba0f00          CMP      r10,#0                ;3082
0003aa  bfb8              IT       LT                    ;3082
0003ac  f1ca0a00          RSBLT    r10,r10,#0            ;3082
0003b0  2b00              CMP      r3,#0                 ;3082
0003b2  bfb8              IT       LT                    ;3082
0003b4  425b              RSBLT    r3,r3,#0              ;3082
0003b6  4553              CMP      r3,r10                ;3082
0003b8  dc98              BGT      |L5.748|
0003ba  e9dda301          LDRD     r10,r3,[sp,#4]        ;3082
0003be  2b00              CMP      r3,#0                 ;3082
0003c0  bfb8              IT       LT                    ;3082
0003c2  425b              RSBLT    r3,r3,#0              ;3082
0003c4  f1ba0f00          CMP      r10,#0                ;3082
0003c8  bfb8              IT       LT                    ;3082
0003ca  f1ca0a00          RSBLT    r10,r10,#0            ;3082
0003ce  4553              CMP      r3,r10                ;3082
0003d0  db8c              BLT      |L5.748|
0003d2  e789              B        |L5.744|
                  |L5.980|
0003d4  f99110a2          LDRSB    r1,[r1,#0xa2]         ;3088
0003d8  f8d02126          LDR      r2,[r0,#0x126]        ;3088
0003dc  4249              RSBS     r1,r1,#0              ;3088
0003de  428a              CMP      r2,r1                 ;3088
0003e0  f34080b8          BLE.W    |L5.1364|
0003e4  e9dd1201          LDRD     r1,r2,[sp,#4]         ;3088
0003e8  428a              CMP      r2,r1                 ;3090
0003ea  bfd8              IT       LE                    ;3090
0003ec  4611              MOVLE    r1,r2                 ;3090
0003ee  9a00              LDR      r2,[sp,#0]            ;3090
0003f0  4291              CMP      r1,r2                 ;3090
0003f2  dc03              BGT      |L5.1020|
0003f4  e9dd1201          LDRD     r1,r2,[sp,#4]         ;3090
0003f8  428a              CMP      r2,r1                 ;3090
0003fa  dc00              BGT      |L5.1022|
                  |L5.1020|
0003fc  4611              MOV      r1,r2                 ;3090
                  |L5.1022|
0003fe  e001              B        |L5.1028|
                  |L5.1024|
                          DCD      ||.data||
                  |L5.1028|
000404  4461              ADD      r1,r1,r12             ;3090
000406  f8c01126          STR      r1,[r0,#0x126]        ;3090
00040a  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;3090
00040e  2900              CMP      r1,#0                 ;3092
000410  bfb8              IT       LT                    ;3092
000412  4249              RSBLT    r1,r1,#0              ;3092
000414  2a00              CMP      r2,#0                 ;3092
000416  bfb8              IT       LT                    ;3092
000418  4252              RSBLT    r2,r2,#0              ;3092
00041a  428a              CMP      r2,r1                 ;3092
00041c  dc09              BGT      |L5.1074|
00041e  9903              LDR      r1,[sp,#0xc]          ;3092
000420  9a05              LDR      r2,[sp,#0x14]         ;3092
000422  2900              CMP      r1,#0                 ;3092
000424  bfb8              IT       LT                    ;3092
000426  4249              RSBLT    r1,r1,#0              ;3092
000428  2a00              CMP      r2,#0                 ;3092
00042a  bfb8              IT       LT                    ;3092
00042c  4252              RSBLT    r2,r2,#0              ;3092
00042e  4291              CMP      r1,r2                 ;3092
000430  da2a              BGE      |L5.1160|
                  |L5.1074|
000432  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;3092
000436  2a00              CMP      r2,#0                 ;3093
000438  bfb8              IT       LT                    ;3093
00043a  4252              RSBLT    r2,r2,#0              ;3093
00043c  2900              CMP      r1,#0                 ;3093
00043e  bfb8              IT       LT                    ;3093
000440  4249              RSBLT    r1,r1,#0              ;3093
000442  4291              CMP      r1,r2                 ;3093
000444  dc0b              BGT      |L5.1118|
000446  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;3093
00044a  2900              CMP      r1,#0                 ;3093
00044c  bfb8              IT       LT                    ;3093
00044e  4249              RSBLT    r1,r1,#0              ;3093
000450  2a00              CMP      r2,#0                 ;3093
000452  bfb8              IT       LT                    ;3093
000454  4252              RSBLT    r2,r2,#0              ;3093
000456  4291              CMP      r1,r2                 ;3093
000458  bfa8              IT       GE                    ;3093
00045a  2301              MOVGE    r3,#1                 ;3093
00045c  da14              BGE      |L5.1160|
                  |L5.1118|
00045e  9905              LDR      r1,[sp,#0x14]         ;3094
000460  9a03              LDR      r2,[sp,#0xc]          ;3094
000462  2900              CMP      r1,#0                 ;3094
000464  bfb8              IT       LT                    ;3094
000466  4249              RSBLT    r1,r1,#0              ;3094
000468  2a00              CMP      r2,#0                 ;3094
00046a  bfb8              IT       LT                    ;3094
00046c  4252              RSBLT    r2,r2,#0              ;3094
00046e  428a              CMP      r2,r1                 ;3094
000470  dc0a              BGT      |L5.1160|
000472  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;3094
000476  2a00              CMP      r2,#0                 ;3094
000478  bfb8              IT       LT                    ;3094
00047a  4252              RSBLT    r2,r2,#0              ;3094
00047c  2900              CMP      r1,#0                 ;3094
00047e  bfb8              IT       LT                    ;3094
000480  4249              RSBLT    r1,r1,#0              ;3094
000482  428a              CMP      r2,r1                 ;3094
000484  bfa8              IT       GE                    ;3094
000486  2302              MOVGE    r3,#2                 ;3094
                  |L5.1160|
000488  aa03              ADD      r2,sp,#0xc            ;3096
00048a  9912              LDR      r1,[sp,#0x48]         ;3096
00048c  f8522023          LDR      r2,[r2,r3,LSL #2]     ;3096
000490  4411              ADD      r1,r1,r2              ;3096
000492  e05d              B        |L5.1360|
                  |L5.1172|
000494  693a              LDR      r2,[r7,#0x10]         ;3098  ; thisInfo
000496  f99110a2          LDRSB    r1,[r1,#0xa2]         ;3098
00049a  f8d22e1b          LDR      r2,[r2,#0xe1b]        ;3098
00049e  4411              ADD      r1,r1,r2              ;3098
0004a0  f8d02126          LDR      r2,[r0,#0x126]        ;3098
0004a4  4291              CMP      r1,r2                 ;3098
0004a6  dd55              BLE      |L5.1364|
0004a8  e9dd1201          LDRD     r1,r2,[sp,#4]         ;3098
0004ac  4291              CMP      r1,r2                 ;3100
0004ae  bfd8              IT       LE                    ;3100
0004b0  4611              MOVLE    r1,r2                 ;3100
0004b2  9a00              LDR      r2,[sp,#0]            ;3100
0004b4  4291              CMP      r1,r2                 ;3100
0004b6  db03              BLT      |L5.1216|
0004b8  e9dd1201          LDRD     r1,r2,[sp,#4]         ;3100
0004bc  428a              CMP      r2,r1                 ;3100
0004be  db00              BLT      |L5.1218|
                  |L5.1216|
0004c0  4611              MOV      r1,r2                 ;3100
                  |L5.1218|
0004c2  4461              ADD      r1,r1,r12             ;3100
0004c4  f8c01126          STR      r1,[r0,#0x126]        ;3100
0004c8  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;3100
0004cc  2900              CMP      r1,#0                 ;3102
0004ce  bfb8              IT       LT                    ;3102
0004d0  4249              RSBLT    r1,r1,#0              ;3102
0004d2  2a00              CMP      r2,#0                 ;3102
0004d4  bfb8              IT       LT                    ;3102
0004d6  4252              RSBLT    r2,r2,#0              ;3102
0004d8  428a              CMP      r2,r1                 ;3102
0004da  dc09              BGT      |L5.1264|
0004dc  9a03              LDR      r2,[sp,#0xc]          ;3102
0004de  9905              LDR      r1,[sp,#0x14]         ;3102
0004e0  2a00              CMP      r2,#0                 ;3102
0004e2  bfb8              IT       LT                    ;3102
0004e4  4252              RSBLT    r2,r2,#0              ;3102
0004e6  2900              CMP      r1,#0                 ;3102
0004e8  bfb8              IT       LT                    ;3102
0004ea  4249              RSBLT    r1,r1,#0              ;3102
0004ec  428a              CMP      r2,r1                 ;3102
0004ee  da2a              BGE      |L5.1350|
                  |L5.1264|
0004f0  e9dd2103          LDRD     r2,r1,[sp,#0xc]       ;3102
0004f4  2900              CMP      r1,#0                 ;3103
0004f6  bfb8              IT       LT                    ;3103
0004f8  4249              RSBLT    r1,r1,#0              ;3103
0004fa  2a00              CMP      r2,#0                 ;3103
0004fc  bfb8              IT       LT                    ;3103
0004fe  4252              RSBLT    r2,r2,#0              ;3103
000500  428a              CMP      r2,r1                 ;3103
000502  dc0b              BGT      |L5.1308|
000504  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;3103
000508  2900              CMP      r1,#0                 ;3103
00050a  bfb8              IT       LT                    ;3103
00050c  4249              RSBLT    r1,r1,#0              ;3103
00050e  2a00              CMP      r2,#0                 ;3103
000510  bfb8              IT       LT                    ;3103
000512  4252              RSBLT    r2,r2,#0              ;3103
000514  4291              CMP      r1,r2                 ;3103
000516  bfa8              IT       GE                    ;3103
000518  2301              MOVGE    r3,#1                 ;3103
00051a  da14              BGE      |L5.1350|
                  |L5.1308|
00051c  9905              LDR      r1,[sp,#0x14]         ;3104
00051e  9a03              LDR      r2,[sp,#0xc]          ;3104
000520  2900              CMP      r1,#0                 ;3104
000522  bfb8              IT       LT                    ;3104
000524  4249              RSBLT    r1,r1,#0              ;3104
000526  2a00              CMP      r2,#0                 ;3104
000528  bfb8              IT       LT                    ;3104
00052a  4252              RSBLT    r2,r2,#0              ;3104
00052c  428a              CMP      r2,r1                 ;3104
00052e  dc0a              BGT      |L5.1350|
000530  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;3104
000534  2a00              CMP      r2,#0                 ;3104
000536  bfb8              IT       LT                    ;3104
000538  4252              RSBLT    r2,r2,#0              ;3104
00053a  2900              CMP      r1,#0                 ;3104
00053c  bfb8              IT       LT                    ;3104
00053e  4249              RSBLT    r1,r1,#0              ;3104
000540  428a              CMP      r2,r1                 ;3104
000542  bfa8              IT       GE                    ;3104
000544  2302              MOVGE    r3,#2                 ;3104
                  |L5.1350|
000546  a903              ADD      r1,sp,#0xc            ;3106
000548  9a12              LDR      r2,[sp,#0x48]         ;3106
00054a  f8511023          LDR      r1,[r1,r3,LSL #2]     ;3106
00054e  4411              ADD      r1,r1,r2              ;3106
                  |L5.1360|
000550  f8c01122          STR      r1,[r0,#0x122]        ;3106
                  |L5.1364|
000554  f8b406cc          LDRH     r0,[r4,#0x6cc]        ;3109
000558  f8a40172          STRH     r0,[r4,#0x172]        ;3109
00055c  f8b406e0          LDRH     r0,[r4,#0x6e0]        ;3110
000560  f8a40186          STRH     r0,[r4,#0x186]        ;3110
                  |L5.1380|
000564  1e6d              SUBS     r5,r5,#1              ;3110
000566  f4bfad5b          BCS      |L5.32|
00056a  b013              ADD      sp,sp,#0x4c
00056c  e8bd8ff0          POP      {r4-r11,pc}
;;;3117   
                          ENDP


                          AREA ||i.algorithm_coord_PostProcess_1||, CODE, READONLY, ALIGN=2

                  algorithm_coord_PostProcess_1 PROC
;;;3117   
;;;3118   void algorithm_coord_PostProcess_1(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;3119   {
;;;3120   	int i;
;;;3121   	tXY_t	temp_pos;
;;;3122   
;;;3123   	tCoordInfo_t 	*temp_coord;
;;;3124   
;;;3125   	temp_coord = &thisInfo->tCoord;
000004  4cfe              LDR      r4,|L6.1024|
000006  b097              SUB      sp,sp,#0x5c           ;3119
;;;3126   
;;;3127   	for( i=MAX_TOUCH_; i--; )
;;;3128   	{
;;;3129   		if(!thisModeConf->CoordEdge.bPostProcessInterpolationMode)
;;;3130   		{
;;;3131   			if( temp_coord->tPos.vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] == 0 )
;;;3132   			{
;;;3133   				if( temp_coord->cScreenDebCnt[i] > 2 )
;;;3134   				{
;;;3135   					if( algorithm_coord_IsEdgeArea(&temp_coord->tFirstPos.tXY[i], 0) > 0 )
;;;3136   					{
;;;3137   						int dist;
;;;3138   
;;;3139   						dist = algorithm_coord_calc_distance(temp_coord->tFirstPos.tXY[i], temp_coord->tOrgPos.tXY[i]);
;;;3140   
;;;3141   						if( dist > _BV(6) )
;;;3142   						{
;;;3143   							temp_coord->ucPostProcessRun[i] = 1;
;;;3144   							temp_pos = temp_coord->tPos.tXY[i];
;;;3145   							temp_coord->tPos.tXY[i] = temp_coord->tFirstPos.tXY[i];
;;;3146   							temp_coord->tFirstPos.tXY[i] = temp_pos;
;;;3147   						}
;;;3148   					}
;;;3149   				}
;;;3150   			}
;;;3151   		}
;;;3152   
;;;3153   		if(thisModeConf->CoordEdge.usPostProcessEdgeTH > 0)
;;;3154   		{
;;;3155   			if( ((temp_coord->tOrgPos.vusS[i] == 0 && temp_coord->tPastPos[2].vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] > 0 && temp_coord->tPastPos[4].vusS[i] > 0) && thisModeConf->CoordEdge.bPostProcessInterpolationMode)
;;;3156   			|| ((temp_coord->tOrgPos.vusS[i] == 0 && temp_coord->tPastPos[1].vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] > 0 && temp_coord->tPastPos[2].vusS[i] > 0) && !thisModeConf->CoordEdge.bPostProcessInterpolationMode) )
;;;3157   			{
;;;3158   				tXY_t pos;
;;;3159   				pos = temp_coord->tPastPos[0].tXY[i];				
;;;3160   				pos.x = ( (pos.x + thisInfo->tCoord.iXOffset ) * (thisCommonConf->iXResolution+thisModeConf->Coord.sFingerGlobalCoordiXResolutionOffset) ) / (thisInfo->tCoord.iInternalXRes + 2*thisInfo->tCoord.iXOffset);
;;;3161   				pos.y = ( (pos.y + thisInfo->tCoord.iYOffset ) * (thisCommonConf->iYResolution+thisModeConf->Coord.sFingerGlobalCoordiYResolutionOffset) ) / (thisInfo->tCoord.iInternalYRes + 2*thisInfo->tCoord.iYOffset);
;;;3162   				pos.x += thisModeConf->Coord.sFingerGlobalCoordiOffsetX;
;;;3163   				pos.y += thisModeConf->Coord.sFingerGlobalCoordiOffsetY;	
;;;3164   				
;;;3165   				if( (pos.x < 5 || pos.x > 32762 || pos.y < 5 || pos.y > 32762) && thisModeConf->CoordEdge.cPostProcessEndMargin == 0)
;;;3166   				{
;;;3167   				}
;;;3168   				else
;;;3169   				{				
;;;3170   					int ExpandTH = thisModeConf->CoordEdge.usPostProcessEdgeTH;
;;;3171   					uint8_t x_edge_f = 0;
;;;3172   					uint8_t y_edge_f = 0;
;;;3173   					
;;;3174   					if(temp_coord->tOrgPastPos[0].tXY[i].x < ExpandTH)x_edge_f = 1;
;;;3175   					else if(thisInfo->tCoord.iInternalXRes - temp_coord->tOrgPastPos[0].tXY[i].x < ExpandTH)x_edge_f = 2;
;;;3176   					
;;;3177   					if(temp_coord->tOrgPastPos[0].tXY[i].y < ExpandTH)y_edge_f = 1;
;;;3178   					else if(thisInfo->tCoord.iInternalYRes - temp_coord->tOrgPastPos[0].tXY[i].y < ExpandTH)y_edge_f = 2;
;;;3179   					
;;;3180   					if(x_edge_f || y_edge_f)
;;;3181   					{
;;;3182   						int dist_y[3] = {0,};			
;;;3183   						int dist_x[3] = {0,};      
;;;3184   						
;;;3185   						tXY_t temp_dist1 = temp_coord->tPastPos[0].tXY[i], temp_dist2, temp_dist3;
;;;3186   						if(thisModeConf->CoordEdge.bPostProcessInterpolationMode)
;;;3187   						{
;;;3188   							temp_dist2 = temp_coord->tPastPos[2].tXY[i];
;;;3189   							temp_dist3 = temp_coord->tPastPos[4].tXY[i];
;;;3190   						}
;;;3191   						else
;;;3192   						{
;;;3193   							temp_dist2 = temp_coord->tPastPos[1].tXY[i];
;;;3194   							temp_dist3 = temp_coord->tPastPos[2].tXY[i];
;;;3195   						}
;;;3196   					
;;;3197   						dist_y[0] = temp_dist1.y - temp_dist2.y;
;;;3198   						dist_x[0] = temp_dist1.x - temp_dist2.x;
;;;3199   
;;;3200   						dist_y[1] = temp_dist1.y - temp_dist3.y;
;;;3201   						dist_x[1] = temp_dist1.x - temp_dist3.x;
;;;3202   					
;;;3203   						dist_y[2] = temp_dist2.y - temp_dist3.y;
;;;3204   						dist_x[2] = temp_dist2.x - temp_dist3.x;
;;;3205   						
;;;3206   						if( (dist_x[0] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[1] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[2] < -thisModeConf->CoordEdge.ucPostProcessDisTH && x_edge_f == 1)
;;;3207   						|| (dist_x[0] > thisModeConf->CoordEdge.ucPostProcessDisTH   && dist_x[1] > thisModeConf->CoordEdge.ucPostProcessDisTH && dist_x[2] > thisModeConf->CoordEdge.ucPostProcessDisTH &&x_edge_f == 2)
;;;3208   						|| (dist_y[0] < -thisModeConf->CoordEdge.ucPostProcessDisTH  && dist_y[1] < -thisModeConf->CoordEdge.ucPostProcessDisTH && dist_y[2] < -thisModeConf->CoordEdge.ucPostProcessDisTH && y_edge_f == 1)
;;;3209   						|| (dist_y[0] > thisModeConf->CoordEdge.ucPostProcessDisTH   && dist_y[2] > thisModeConf->CoordEdge.ucPostProcessDisTH && dist_y[2] > thisModeConf->CoordEdge.ucPostProcessDisTH && y_edge_f == 2) )
;;;3210   						{
;;;3211   							temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + dist_x[0]/thisModeConf->CoordEdge.ucPostProcessExpendDiv;
;;;3212   							temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + dist_y[0]/thisModeConf->CoordEdge.ucPostProcessExpendDiv;
;;;3213   							
;;;3214   							uint8_t max_idx = 0;
;;;3215   							if(x_edge_f == 1 && temp_coord->tPos.tXY[i].x > -thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3216   							{
;;;3217   								temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + MIN(dist_x[0],MIN(dist_x[1], dist_x[2]));
;;;3218   							}
;;;3219   							else if(x_edge_f == 2 && temp_coord->tPos.tXY[i].x < thisInfo->tCoord.iInternalXRes + thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3220   							{
;;;3221   								temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + MAX(dist_x[0],MAX(dist_x[1], dist_x[2]));																		
;;;3222   							}
;;;3223   							
;;;3224   							if((x_edge_f == 1 || x_edge_f == 2) && y_edge_f == 0)
;;;3225   							{
;;;3226   								if(abs(dist_y[0]) >= abs(dist_y[1]) && abs(dist_y[0]) >= abs(dist_y[2]))max_idx = 0;
;;;3227   								else if(abs(dist_y[1]) >= abs(dist_y[0]) && abs(dist_y[1]) >= abs(dist_y[2]))max_idx = 1;
;;;3228   								else if(abs(dist_y[2]) >= abs(dist_y[0]) && abs(dist_y[2]) >= abs(dist_y[1]))max_idx = 2;
;;;3229   								
;;;3230   								temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + dist_y[max_idx];								
;;;3231   							}
;;;3232   							
;;;3233   							max_idx = 0;
;;;3234   							if(y_edge_f == 1 && temp_coord->tPos.tXY[i].y > -thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3235   							{
;;;3236   								temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + MIN(dist_y[0],MIN(dist_y[1], dist_y[2]));
;;;3237   							}
;;;3238   							else if(y_edge_f == 2 && temp_coord->tPos.tXY[i].y < thisInfo->tCoord.iInternalYRes + thisModeConf->CoordEdge.cPostProcessEndMargin)
;;;3239   							{
;;;3240   								temp_coord->tPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + MAX(dist_y[0],MAX(dist_y[1], dist_y[2]));
;;;3241   							}
;;;3242   
;;;3243   							if((y_edge_f == 1 || y_edge_f == 2) && x_edge_f == 0)
;;;3244   							{		
;;;3245   								if(abs(dist_x[0]) >= abs(dist_x[1]) && abs(dist_x[0]) >= abs(dist_x[2]))max_idx = 0;
;;;3246   								else if(abs(dist_x[1]) >= abs(dist_x[0]) && abs(dist_x[1]) >= abs(dist_x[2]))max_idx = 1;
;;;3247   								else if(abs(dist_x[2]) >= abs(dist_x[0]) && abs(dist_x[2]) >= abs(dist_x[1]))max_idx = 2;
;;;3248   								
;;;3249   								temp_coord->tPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + dist_x[max_idx];								
;;;3250   							}
;;;3251   								
;;;3252   							temp_coord->tPos.vusS[i]  =  temp_coord->tOrgPastPos[0].vusS[i];
;;;3253   							temp_coord->tPos.vusR[i]  =  temp_coord->tOrgPastPos[0].vusR[i];	
;;;3254   							
;;;3255   						}   
;;;3256   					}
;;;3257   				}
;;;3258   			}
;;;3259   		}
;;;3260   	}
;;;3261   }
000008  2509              MOVS     r5,#9
00000a  6920              LDR      r0,[r4,#0x10]         ;3125  ; thisInfo
00000c  f04f0b01          MOV      r11,#1                ;3143
000010  f200365e          ADD      r6,r0,#0x35e          ;3125
000014  f6477af6          MOV      r10,#0x7ff6           ;3165
000018  f04f0800          MOV      r8,#0                 ;3165
                  |L6.28|
00001c  68e0              LDR      r0,[r4,#0xc]          ;3129  ; thisModeConf
00001e  f89000a3          LDRB     r0,[r0,#0xa3]         ;3129
000022  bbd0              CBNZ     r0,|L6.154|
000024  eb060045          ADD      r0,r6,r5,LSL #1       ;3131
000028  f8b01172          LDRH     r1,[r0,#0x172]        ;3131
00002c  b3a9              CBZ      r1,|L6.154|
00002e  f8b0036a          LDRH     r0,[r0,#0x36a]        ;3131
000032  bb90              CBNZ     r0,|L6.154|
000034  eb060905          ADD      r9,r6,r5              ;3133
000038  f9990a51          LDRSB    r0,[r9,#0xa51]        ;3133
00003c  2802              CMP      r0,#2                 ;3133
00003e  dd2c              BLE      |L6.154|
000040  eb0607c5          ADD      r7,r6,r5,LSL #3       ;3135
000044  f2072027          ADD      r0,r7,#0x227          ;3135
000048  2100              MOVS     r1,#0                 ;3135
00004a  f7fffffe          BL       algorithm_coord_IsEdgeArea
00004e  2800              CMP      r0,#0                 ;3135
000050  dd23              BLE      |L6.154|
000052  f8d70227          LDR      r0,[r7,#0x227]        ;3139
000056  f8d73577          LDR      r3,[r7,#0x577]        ;3139
00005a  f8d7222b          LDR      r2,[r7,#0x22b]        ;3139
00005e  f8d7157b          LDR      r1,[r7,#0x57b]        ;3139
000062  1ac0              SUBS     r0,r0,r3              ;3139
000064  fb00f300          MUL      r3,r0,r0              ;3139
000068  1a50              SUBS     r0,r2,r1              ;3139
00006a  fb003000          MLA      r0,r0,r0,r3           ;3139
00006e  f7fffffe          BL       algorithm_calc_sqrt
000072  2840              CMP      r0,#0x40              ;3141
000074  dd11              BLE      |L6.154|
000076  f889ba65          STRB     r11,[r9,#0xa65]       ;3143
00007a  f8d71122          LDR      r1,[r7,#0x122]        ;3144
00007e  f8d70126          LDR      r0,[r7,#0x126]        ;3144
000082  f8d72227          LDR      r2,[r7,#0x227]        ;3145
000086  f8c72122          STR      r2,[r7,#0x122]        ;3145
00008a  f8d7222b          LDR      r2,[r7,#0x22b]        ;3145
00008e  f8c72126          STR      r2,[r7,#0x126]        ;3145
000092  f8c71227          STR      r1,[r7,#0x227]        ;3146
000096  f8c7022b          STR      r0,[r7,#0x22b]        ;3146
                  |L6.154|
00009a  68e0              LDR      r0,[r4,#0xc]          ;3153  ; thisModeConf
00009c  f8b0209e          LDRH     r2,[r0,#0x9e]         ;3153
0000a0  2a00              CMP      r2,#0                 ;3153
0000a2  f000826f          BEQ.W    |L6.1412|
0000a6  eb060145          ADD      r1,r6,r5,LSL #1       ;3155
0000aa  f8b135c7          LDRH     r3,[r1,#0x5c7]        ;3155
0000ae  2b00              CMP      r3,#0                 ;3155
0000b0  f0408268          BNE.W    |L6.1412|
0000b4  f8b1345c          LDRH     r3,[r1,#0x45c]        ;3155
0000b8  2b00              CMP      r3,#0                 ;3155
0000ba  bf1c              ITT      NE                    ;3155
0000bc  f8b1c36a          LDRHNE   r12,[r1,#0x36a]       ;3155
0000c0  f1bc0f00          CMPNE    r12,#0                ;3155
0000c4  d009              BEQ      |L6.218|
0000c6  f8b1c54e          LDRH     r12,[r1,#0x54e]       ;3155
0000ca  f1bc0f00          CMP      r12,#0                ;3155
0000ce  bf1c              ITT      NE                    ;3155
0000d0  f890c0a3          LDRBNE   r12,[r0,#0xa3]        ;3155
0000d4  f1bc0f00          CMPNE    r12,#0                ;3155
0000d8  d110              BNE      |L6.252|
                  |L6.218|
0000da  f8b1c3e3          LDRH     r12,[r1,#0x3e3]       ;3156
0000de  f1bc0f00          CMP      r12,#0                ;3156
0000e2  bf1e              ITTT     NE                    ;3156
0000e4  f8b1c36a          LDRHNE   r12,[r1,#0x36a]       ;3156
0000e8  f1bc0f00          CMPNE    r12,#0                ;3156
0000ec  2b00              CMPNE    r3,#0                 ;3156
0000ee  f0008249          BEQ.W    |L6.1412|
0000f2  f89030a3          LDRB     r3,[r0,#0xa3]         ;3156
0000f6  2b00              CMP      r3,#0                 ;3156
0000f8  f0408244          BNE.W    |L6.1412|
                  |L6.252|
0000fc  eb0603c5          ADD      r3,r6,r5,LSL #3       ;3159
000100  f8d3731a          LDR      r7,[r3,#0x31a]        ;3159
000104  9709              STR      r7,[sp,#0x24]         ;3159
000106  f8d3931e          LDR      r9,[r3,#0x31e]        ;3159
00010a  f8cd9020          STR      r9,[sp,#0x20]         ;3159
00010e  f8cd901c          STR      r9,[sp,#0x1c]         ;3160
000112  f8d4c010          LDR      r12,[r4,#0x10]        ;3160  ; thisInfo
000116  f8cdc03c          STR      r12,[sp,#0x3c]        ;3160
00011a  46e6              MOV      lr,r12                ;3160
00011c  f8dcce0f          LDR      r12,[r12,#0xe0f]      ;3160
000120  f8cdc008          STR      r12,[sp,#8]           ;3160
000124  4467              ADD      r7,r7,r12             ;3160
000126  f8d4c008          LDR      r12,[r4,#8]           ;3160  ; thisCommonConf
00012a  f8cdc014          STR      r12,[sp,#0x14]        ;3160
00012e  f9b0905a          LDRSH    r9,[r0,#0x5a]         ;3160
000132  f8dcc002          LDR      r12,[r12,#2]          ;3160
000136  44cc              ADD      r12,r12,r9            ;3160
000138  fb07f90c          MUL      r9,r7,r12             ;3160
00013c  f8de7e17          LDR      r7,[lr,#0xe17]        ;3160
000140  f8ddc008          LDR      r12,[sp,#8]           ;3160
000144  9703              STR      r7,[sp,#0xc]          ;3160
000146  eb070c4c          ADD      r12,r7,r12,LSL #1     ;3160
00014a  fb99f9fc          SDIV     r9,r9,r12             ;3160
00014e  f8cd9008          STR      r9,[sp,#8]            ;3161
000152  f8dd901c          LDR      r9,[sp,#0x1c]         ;3161
000156  f8dece13          LDR      r12,[lr,#0xe13]       ;3161
00015a  f8cdc018          STR      r12,[sp,#0x18]        ;3161
00015e  eb09070c          ADD      r7,r9,r12             ;3161
000162  f8ddc014          LDR      r12,[sp,#0x14]        ;3161
000166  f9b0905c          LDRSH    r9,[r0,#0x5c]         ;3161
00016a  f8dcc006          LDR      r12,[r12,#6]          ;3161
00016e  44cc              ADD      r12,r12,r9            ;3161
000170  fb07f90c          MUL      r9,r7,r12             ;3161
000174  f8de7e1b          LDR      r7,[lr,#0xe1b]        ;3161
000178  f8ddc018          LDR      r12,[sp,#0x18]        ;3161
00017c  f9b0e05e          LDRSH    lr,[r0,#0x5e]         ;3162
000180  eb070c4c          ADD      r12,r7,r12,LSL #1     ;3161
000184  fb99fcfc          SDIV     r12,r9,r12            ;3161
000188  f8dd9008          LDR      r9,[sp,#8]            ;3162
00018c  44f1              ADD      r9,r9,lr              ;3162
00018e  f9b0e060          LDRSH    lr,[r0,#0x60]         ;3163
000192  f1a90905          SUB      r9,r9,#5              ;3163
000196  44f4              ADD      r12,r12,lr            ;3163
000198  45d1              CMP      r9,r10                ;3165
00019a  d206              BCS      |L6.426|
00019c  f1bc0f05          CMP      r12,#5                ;3165
0001a0  db03              BLT      |L6.426|
0001a2  f64779fa          MOV      r9,#0x7ffa            ;3165
0001a6  45cc              CMP      r12,r9                ;3165
0001a8  dd05              BLE      |L6.438|
                  |L6.426|
0001aa  f890c0a2          LDRB     r12,[r0,#0xa2]        ;3165
0001ae  f1bc0f00          CMP      r12,#0                ;3165
0001b2  f00081e7          BEQ.W    |L6.1412|
                  |L6.438|
0001b6  f04f0c00          MOV      r12,#0                ;3171
0001ba  f8cdc048          STR      r12,[sp,#0x48]        ;3172
0001be  f8cdc044          STR      r12,[sp,#0x44]        ;3174
0001c2  f8d3c67c          LDR      r12,[r3,#0x67c]       ;3174
0001c6  f8cdc040          STR      r12,[sp,#0x40]        ;3174
0001ca  4594              CMP      r12,r2                ;3174
0001cc  bfb8              IT       LT                    ;3174
0001ce  f04f0c01          MOVLT    r12,#1                ;3174
0001d2  db0a              BLT      |L6.490|
0001d4  f8ddc00c          LDR      r12,[sp,#0xc]         ;3175
0001d8  f8dd9040          LDR      r9,[sp,#0x40]         ;3175
0001dc  ebac0c09          SUB      r12,r12,r9            ;3175
0001e0  4562              CMP      r2,r12                ;3175
0001e2  bfc8              IT       GT                    ;3175
0001e4  f04f0c02          MOVGT    r12,#2                ;3175
0001e8  dd01              BLE      |L6.494|
                  |L6.490|
0001ea  f8cdc048          STR      r12,[sp,#0x48]        ;3175
                  |L6.494|
0001ee  f8d3c680          LDR      r12,[r3,#0x680]       ;3177
0001f2  f8cdc04c          STR      r12,[sp,#0x4c]        ;3177
0001f6  4594              CMP      r12,r2                ;3177
0001f8  bfb8              IT       LT                    ;3177
0001fa  2201              MOVLT    r2,#1                 ;3177
0001fc  db05              BLT      |L6.522|
0001fe  eba70c0c          SUB      r12,r7,r12            ;3178
000202  4562              CMP      r2,r12                ;3178
000204  bfc8              IT       GT                    ;3178
000206  2202              MOVGT    r2,#2                 ;3178
000208  dd00              BLE      |L6.524|
                  |L6.522|
00020a  9211              STR      r2,[sp,#0x44]         ;3178
                  |L6.524|
00020c  e9ddc211          LDRD     r12,r2,[sp,#0x44]     ;3178
000210  ea52020c          ORRS     r2,r2,r12             ;3180
000214  f00081b6          BEQ.W    |L6.1412|
000218  f8cd8010          STR      r8,[sp,#0x10]         ;3183
00021c  f8cd8008          STR      r8,[sp,#8]            ;3182
000220  9a09              LDR      r2,[sp,#0x24]         ;3185
000222  f8cd8004          STR      r8,[sp,#4]            ;3182
000226  f8cd800c          STR      r8,[sp,#0xc]          ;3183
00022a  920c              STR      r2,[sp,#0x30]         ;3185
00022c  f8cd8018          STR      r8,[sp,#0x18]         ;3183
000230  9a08              LDR      r2,[sp,#0x20]         ;3185
000232  f8cd8014          STR      r8,[sp,#0x14]         ;3183
000236  920b              STR      r2,[sp,#0x2c]         ;3186
000238  f89020a3          LDRB     r2,[r0,#0xa3]         ;3186
00023c  b142              CBZ      r2,|L6.592|
00023e  f8d3e40c          LDR      lr,[r3,#0x40c]        ;3188
000242  f8d37410          LDR      r7,[r3,#0x410]        ;3188
000246  f8d324fe          LDR      r2,[r3,#0x4fe]        ;3189
00024a  f8d3c502          LDR      r12,[r3,#0x502]       ;3189
00024e  e007              B        |L6.608|
                  |L6.592|
000250  f8d3e393          LDR      lr,[r3,#0x393]        ;3193
000254  f8d37397          LDR      r7,[r3,#0x397]        ;3193
000258  f8d3240c          LDR      r2,[r3,#0x40c]        ;3194
00025c  f8d3c410          LDR      r12,[r3,#0x410]       ;3194
                  |L6.608|
000260  f8dd902c          LDR      r9,[sp,#0x2c]         ;3197
000264  eba90907          SUB      r9,r9,r7              ;3197
000268  f8cd9004          STR      r9,[sp,#4]            ;3198
00026c  f8dd9030          LDR      r9,[sp,#0x30]         ;3198
000270  eba9090e          SUB      r9,r9,lr              ;3198
000274  f8cd9010          STR      r9,[sp,#0x10]         ;3200
000278  f8dd902c          LDR      r9,[sp,#0x2c]         ;3200
00027c  eba9090c          SUB      r9,r9,r12             ;3200
000280  f8cd9008          STR      r9,[sp,#8]            ;3201
000284  f8dd9030          LDR      r9,[sp,#0x30]         ;3201
000288  eba70c0c          SUB      r12,r7,r12            ;3203
00028c  eba90902          SUB      r9,r9,r2              ;3201
000290  ebae0202          SUB      r2,lr,r2              ;3204
000294  f8cdc00c          STR      r12,[sp,#0xc]         ;3204
000298  e9cd9205          STRD     r9,r2,[sp,#0x14]      ;3204
00029c  f890c0a0          LDRB     r12,[r0,#0xa0]        ;3206
0002a0  9f04              LDR      r7,[sp,#0x10]         ;3206
0002a2  f1cc0200          RSB      r2,r12,#0             ;3206
0002a6  4297              CMP      r7,r2                 ;3206
0002a8  bfbe              ITTT     LT                    ;3206
0002aa  4591              CMPLT    r9,r2                 ;3206
0002ac  9f06              LDRLT    r7,[sp,#0x18]         ;3206
0002ae  4297              CMPLT    r7,r2                 ;3206
0002b0  da02              BGE      |L6.696|
0002b2  9f12              LDR      r7,[sp,#0x48]         ;3206
0002b4  2f01              CMP      r7,#1                 ;3206
0002b6  d01f              BEQ      |L6.760|
                  |L6.696|
0002b8  9f04              LDR      r7,[sp,#0x10]         ;3207
0002ba  4567              CMP      r7,r12                ;3207
0002bc  bfc2              ITTT     GT                    ;3207
0002be  45e1              CMPGT    r9,r12                ;3207
0002c0  9f06              LDRGT    r7,[sp,#0x18]         ;3207
0002c2  4567              CMPGT    r7,r12                ;3207
0002c4  dd02              BLE      |L6.716|
0002c6  9f12              LDR      r7,[sp,#0x48]         ;3207
0002c8  2f02              CMP      r7,#2                 ;3207
0002ca  d015              BEQ      |L6.760|
                  |L6.716|
0002cc  9f01              LDR      r7,[sp,#4]            ;3208
0002ce  4297              CMP      r7,r2                 ;3208
0002d0  bfbf              ITTTT    LT                    ;3208
0002d2  9f02              LDRLT    r7,[sp,#8]            ;3208
0002d4  4297              CMPLT    r7,r2                 ;3208
0002d6  9f03              LDRLT    r7,[sp,#0xc]          ;3208
0002d8  4297              CMPLT    r7,r2                 ;3208
0002da  da02              BGE      |L6.738|
0002dc  9a11              LDR      r2,[sp,#0x44]         ;3208
0002de  2a01              CMP      r2,#1                 ;3208
0002e0  d00a              BEQ      |L6.760|
                  |L6.738|
0002e2  9a01              LDR      r2,[sp,#4]            ;3209
0002e4  4562              CMP      r2,r12                ;3209
0002e6  bfc4              ITT      GT                    ;3209
0002e8  9a03              LDRGT    r2,[sp,#0xc]          ;3209
0002ea  4562              CMPGT    r2,r12                ;3209
0002ec  f340814a          BLE.W    |L6.1412|
0002f0  9a11              LDR      r2,[sp,#0x44]         ;3209
0002f2  2a02              CMP      r2,#2                 ;3209
0002f4  f0408146          BNE.W    |L6.1412|
                  |L6.760|
0002f8  f890c0a1          LDRB     r12,[r0,#0xa1]        ;3211
0002fc  9a04              LDR      r2,[sp,#0x10]         ;3211
0002fe  fb92fcfc          SDIV     r12,r2,r12            ;3211
000302  9a10              LDR      r2,[sp,#0x40]         ;3211
000304  4494              ADD      r12,r12,r2            ;3211
000306  f8c3c122          STR      r12,[r3,#0x122]       ;3211
00030a  f89070a1          LDRB     r7,[r0,#0xa1]         ;3212
00030e  9a01              LDR      r2,[sp,#4]            ;3212
000310  fb92f7f7          SDIV     r7,r2,r7              ;3212
000314  9a13              LDR      r2,[sp,#0x4c]         ;3212
000316  4417              ADD      r7,r7,r2              ;3212
000318  f8c37126          STR      r7,[r3,#0x126]        ;3212
00031c  f8dd9048          LDR      r9,[sp,#0x48]         ;3215
000320  2200              MOVS     r2,#0                 ;3214
000322  f1b90f01          CMP      r9,#1                 ;3215
000326  d003              BEQ      |L6.816|
000328  f1b90f02          CMP      r9,#2                 ;3219
00032c  d015              BEQ      |L6.858|
00032e  e034              B        |L6.922|
                  |L6.816|
000330  f99090a2          LDRSB    r9,[r0,#0xa2]         ;3215
000334  f1c90900          RSB      r9,r9,#0              ;3215
000338  45cc              CMP      r12,r9                ;3215
00033a  dd29              BLE      |L6.912|
00033c  e9ddc905          LDRD     r12,r9,[sp,#0x14]     ;3215
000340  45e1              CMP      r9,r12                ;3217
000342  bfd8              IT       LE                    ;3217
000344  46cc              MOVLE    r12,r9                ;3217
000346  f8dd9010          LDR      r9,[sp,#0x10]         ;3217
00034a  45cc              CMP      r12,r9                ;3217
00034c  dc03              BGT      |L6.854|
00034e  e9ddc905          LDRD     r12,r9,[sp,#0x14]     ;3217
000352  45e1              CMP      r9,r12                ;3217
000354  dc17              BGT      |L6.902|
                  |L6.854|
000356  46cc              MOV      r12,r9                ;3217
000358  e015              B        |L6.902|
                  |L6.858|
00035a  f8dd903c          LDR      r9,[sp,#0x3c]         ;3219
00035e  f990e0a2          LDRSB    lr,[r0,#0xa2]         ;3219
000362  f8d99e17          LDR      r9,[r9,#0xe17]        ;3219
000366  44f1              ADD      r9,r9,lr              ;3219
000368  45e1              CMP      r9,r12                ;3219
00036a  dd11              BLE      |L6.912|
00036c  e9ddc905          LDRD     r12,r9,[sp,#0x14]     ;3219
000370  45cc              CMP      r12,r9                ;3221
000372  bfd8              IT       LE                    ;3221
000374  46cc              MOVLE    r12,r9                ;3221
000376  f8dd9010          LDR      r9,[sp,#0x10]         ;3221
00037a  45cc              CMP      r12,r9                ;3221
00037c  dbeb              BLT      |L6.854|
00037e  e9ddc905          LDRD     r12,r9,[sp,#0x14]     ;3221
000382  45e1              CMP      r9,r12                ;3221
000384  dae7              BGE      |L6.854|
                  |L6.902|
000386  f8dd9040          LDR      r9,[sp,#0x40]         ;3221
00038a  44cc              ADD      r12,r12,r9            ;3221
00038c  f8c3c122          STR      r12,[r3,#0x122]       ;3221
                  |L6.912|
000390  f8ddc044          LDR      r12,[sp,#0x44]        ;3224
000394  f1bc0f00          CMP      r12,#0                ;3224
000398  d009              BEQ      |L6.942|
                  |L6.922|
00039a  f8ddc044          LDR      r12,[sp,#0x44]        ;3234
00039e  f1bc0f01          CMP      r12,#1                ;3234
0003a2  d05e              BEQ      |L6.1122|
0003a4  f1bc0f02          CMP      r12,#2                ;3238
0003a8  d070              BEQ      |L6.1164|
0003aa  f000b8e3          B.W      |L6.1396|
                  |L6.942|
0003ae  e9ddc001          LDRD     r12,r0,[sp,#4]        ;3238
0003b2  f1bc0f00          CMP      r12,#0                ;3226
0003b6  bfb8              IT       LT                    ;3226
0003b8  f1cc0c00          RSBLT    r12,r12,#0            ;3226
0003bc  2800              CMP      r0,#0                 ;3226
0003be  bfb8              IT       LT                    ;3226
0003c0  4240              RSBLT    r0,r0,#0              ;3226
0003c2  4560              CMP      r0,r12                ;3226
0003c4  dc0c              BGT      |L6.992|
0003c6  f8ddc004          LDR      r12,[sp,#4]           ;3226
0003ca  9803              LDR      r0,[sp,#0xc]          ;3226
0003cc  f1bc0f00          CMP      r12,#0                ;3226
0003d0  bfb8              IT       LT                    ;3226
0003d2  f1cc0c00          RSBLT    r12,r12,#0            ;3226
0003d6  2800              CMP      r0,#0                 ;3226
0003d8  bfb8              IT       LT                    ;3226
0003da  4240              RSBLT    r0,r0,#0              ;3226
0003dc  4584              CMP      r12,r0                ;3226
0003de  da37              BGE      |L6.1104|
                  |L6.992|
0003e0  e9dd0c01          LDRD     r0,r12,[sp,#4]        ;3226
0003e4  f1bc0f00          CMP      r12,#0                ;3227
0003e8  bfb8              IT       LT                    ;3227
0003ea  f1cc0c00          RSBLT    r12,r12,#0            ;3227
0003ee  2800              CMP      r0,#0                 ;3227
0003f0  bfb8              IT       LT                    ;3227
0003f2  4240              RSBLT    r0,r0,#0              ;3227
0003f4  4560              CMP      r0,r12                ;3227
0003f6  dc11              BGT      |L6.1052|
0003f8  e9ddc002          LDRD     r12,r0,[sp,#8]        ;3227
0003fc  e002              B        |L6.1028|
0003fe  0000              DCW      0x0000
                  |L6.1024|
                          DCD      ||.data||
                  |L6.1028|
000404  f1bc0f00          CMP      r12,#0                ;3227
000408  bfb8              IT       LT                    ;3227
00040a  f1cc0c00          RSBLT    r12,r12,#0            ;3227
00040e  2800              CMP      r0,#0                 ;3227
000410  bfb8              IT       LT                    ;3227
000412  4240              RSBLT    r0,r0,#0              ;3227
000414  4584              CMP      r12,r0                ;3227
000416  bfa8              IT       GE                    ;3227
000418  2201              MOVGE    r2,#1                 ;3227
00041a  da19              BGE      |L6.1104|
                  |L6.1052|
00041c  9803              LDR      r0,[sp,#0xc]          ;3228
00041e  f8ddc004          LDR      r12,[sp,#4]           ;3228
000422  2800              CMP      r0,#0                 ;3228
000424  bfb8              IT       LT                    ;3228
000426  4240              RSBLT    r0,r0,#0              ;3228
000428  f1bc0f00          CMP      r12,#0                ;3228
00042c  bfb8              IT       LT                    ;3228
00042e  f1cc0c00          RSBLT    r12,r12,#0            ;3228
000432  4584              CMP      r12,r0                ;3228
000434  dc0c              BGT      |L6.1104|
000436  e9dd0c02          LDRD     r0,r12,[sp,#8]        ;3228
00043a  f1bc0f00          CMP      r12,#0                ;3228
00043e  bfb8              IT       LT                    ;3228
000440  f1cc0c00          RSBLT    r12,r12,#0            ;3228
000444  2800              CMP      r0,#0                 ;3228
000446  bfb8              IT       LT                    ;3228
000448  4240              RSBLT    r0,r0,#0              ;3228
00044a  4584              CMP      r12,r0                ;3228
00044c  bfa8              IT       GE                    ;3228
00044e  2202              MOVGE    r2,#2                 ;3228
                  |L6.1104|
000450  a801              ADD      r0,sp,#4              ;3230
000452  f8ddc04c          LDR      r12,[sp,#0x4c]        ;3230
000456  f8500022          LDR      r0,[r0,r2,LSL #2]     ;3230
00045a  4460              ADD      r0,r0,r12             ;3230
00045c  f8c30126          STR      r0,[r3,#0x126]        ;3230
000460  e088              B        |L6.1396|
                  |L6.1122|
000462  f99000a2          LDRSB    r0,[r0,#0xa2]         ;3234
000466  4240              RSBS     r0,r0,#0              ;3234
000468  4287              CMP      r7,r0                 ;3234
00046a  dd2a              BLE      |L6.1218|
00046c  e9dd0c02          LDRD     r0,r12,[sp,#8]        ;3234
000470  4584              CMP      r12,r0                ;3236
000472  bfd8              IT       LE                    ;3236
000474  4660              MOVLE    r0,r12                ;3236
000476  f8ddc004          LDR      r12,[sp,#4]           ;3236
00047a  4560              CMP      r0,r12                ;3236
00047c  dc03              BGT      |L6.1158|
00047e  e9dd0c02          LDRD     r0,r12,[sp,#8]        ;3236
000482  4584              CMP      r12,r0                ;3236
000484  dc18              BGT      |L6.1208|
                  |L6.1158|
000486  4660              MOV      r0,r12                ;3236
000488  e016              B        |L6.1208|
00048a  e7ff              B        |L6.1164|
                  |L6.1164|
00048c  f8ddc03c          LDR      r12,[sp,#0x3c]        ;3238
000490  f99000a2          LDRSB    r0,[r0,#0xa2]         ;3238
000494  f8dcce1b          LDR      r12,[r12,#0xe1b]      ;3238
000498  4460              ADD      r0,r0,r12             ;3238
00049a  42b8              CMP      r0,r7                 ;3238
00049c  dd11              BLE      |L6.1218|
00049e  e9dd0c02          LDRD     r0,r12,[sp,#8]        ;3238
0004a2  4560              CMP      r0,r12                ;3240
0004a4  bfd8              IT       LE                    ;3240
0004a6  4660              MOVLE    r0,r12                ;3240
0004a8  f8ddc004          LDR      r12,[sp,#4]           ;3240
0004ac  4560              CMP      r0,r12                ;3240
0004ae  dbea              BLT      |L6.1158|
0004b0  e9dd0c02          LDRD     r0,r12,[sp,#8]        ;3240
0004b4  4584              CMP      r12,r0                ;3240
0004b6  dae6              BGE      |L6.1158|
                  |L6.1208|
0004b8  f8ddc04c          LDR      r12,[sp,#0x4c]        ;3240
0004bc  4460              ADD      r0,r0,r12             ;3240
0004be  f8c30126          STR      r0,[r3,#0x126]        ;3240
                  |L6.1218|
0004c2  9812              LDR      r0,[sp,#0x48]         ;3243
0004c4  bbd8              CBNZ     r0,|L6.1342|
0004c6  e9ddc004          LDRD     r12,r0,[sp,#0x10]     ;3243
0004ca  f1bc0f00          CMP      r12,#0                ;3245
0004ce  bfb8              IT       LT                    ;3245
0004d0  f1cc0c00          RSBLT    r12,r12,#0            ;3245
0004d4  2800              CMP      r0,#0                 ;3245
0004d6  bfb8              IT       LT                    ;3245
0004d8  4240              RSBLT    r0,r0,#0              ;3245
0004da  4560              CMP      r0,r12                ;3245
0004dc  dc0c              BGT      |L6.1272|
0004de  9804              LDR      r0,[sp,#0x10]         ;3245
0004e0  f8ddc018          LDR      r12,[sp,#0x18]        ;3245
0004e4  2800              CMP      r0,#0                 ;3245
0004e6  bfb8              IT       LT                    ;3245
0004e8  4240              RSBLT    r0,r0,#0              ;3245
0004ea  f1bc0f00          CMP      r12,#0                ;3245
0004ee  bfb8              IT       LT                    ;3245
0004f0  f1cc0c00          RSBLT    r12,r12,#0            ;3245
0004f4  4560              CMP      r0,r12                ;3245
0004f6  da35              BGE      |L6.1380|
                  |L6.1272|
0004f8  e9dd0c04          LDRD     r0,r12,[sp,#0x10]     ;3245
0004fc  f1bc0f00          CMP      r12,#0                ;3246
000500  bfb8              IT       LT                    ;3246
000502  f1cc0c00          RSBLT    r12,r12,#0            ;3246
000506  2800              CMP      r0,#0                 ;3246
000508  bfb8              IT       LT                    ;3246
00050a  4240              RSBLT    r0,r0,#0              ;3246
00050c  4560              CMP      r0,r12                ;3246
00050e  dc0d              BGT      |L6.1324|
000510  e9ddc005          LDRD     r12,r0,[sp,#0x14]     ;3246
000514  f1bc0f00          CMP      r12,#0                ;3246
000518  bfb8              IT       LT                    ;3246
00051a  f1cc0c00          RSBLT    r12,r12,#0            ;3246
00051e  2800              CMP      r0,#0                 ;3246
000520  bfb8              IT       LT                    ;3246
000522  4240              RSBLT    r0,r0,#0              ;3246
000524  4584              CMP      r12,r0                ;3246
000526  bfa8              IT       GE                    ;3246
000528  2201              MOVGE    r2,#1                 ;3246
00052a  da1b              BGE      |L6.1380|
                  |L6.1324|
00052c  9806              LDR      r0,[sp,#0x18]         ;3247
00052e  f8ddc010          LDR      r12,[sp,#0x10]        ;3247
000532  2800              CMP      r0,#0                 ;3247
000534  bfb8              IT       LT                    ;3247
000536  4240              RSBLT    r0,r0,#0              ;3247
000538  f1bc0f00          CMP      r12,#0                ;3247
00053c  e000              B        |L6.1344|
                  |L6.1342|
00053e  e019              B        |L6.1396|
                  |L6.1344|
000540  bfb8              IT       LT                    ;3247
000542  f1cc0c00          RSBLT    r12,r12,#0            ;3247
000546  4584              CMP      r12,r0                ;3247
000548  dc0c              BGT      |L6.1380|
00054a  e9dd0c05          LDRD     r0,r12,[sp,#0x14]     ;3247
00054e  f1bc0f00          CMP      r12,#0                ;3247
000552  bfb8              IT       LT                    ;3247
000554  f1cc0c00          RSBLT    r12,r12,#0            ;3247
000558  2800              CMP      r0,#0                 ;3247
00055a  bfb8              IT       LT                    ;3247
00055c  4240              RSBLT    r0,r0,#0              ;3247
00055e  4584              CMP      r12,r0                ;3247
000560  bfa8              IT       GE                    ;3247
000562  2202              MOVGE    r2,#2                 ;3247
                  |L6.1380|
000564  a804              ADD      r0,sp,#0x10           ;3249
000566  f8ddc040          LDR      r12,[sp,#0x40]        ;3249
00056a  f8500022          LDR      r0,[r0,r2,LSL #2]     ;3249
00056e  4460              ADD      r0,r0,r12             ;3249
000570  f8c30122          STR      r0,[r3,#0x122]        ;3249
                  |L6.1396|
000574  f8b106cc          LDRH     r0,[r1,#0x6cc]        ;3252
000578  f8a10172          STRH     r0,[r1,#0x172]        ;3252
00057c  f8b106e0          LDRH     r0,[r1,#0x6e0]        ;3253
000580  f8a10186          STRH     r0,[r1,#0x186]        ;3253
                  |L6.1412|
000584  1e6d              SUBS     r5,r5,#1              ;3253
000586  f4bfad49          BCS      |L6.28|
00058a  b017              ADD      sp,sp,#0x5c
00058c  e8bd8ff0          POP      {r4-r11,pc}
;;;3262   
                          ENDP


                          AREA ||i.algorithm_coord_UpdatePosHistoryInfo||, CODE, READONLY, ALIGN=2

                  algorithm_coord_UpdatePosHistoryInfo PROC
;;;3262   
;;;3263   void algorithm_coord_UpdatePosHistoryInfo(void)
000000  484f              LDR      r0,|L7.320|
;;;3264   {
000002  b410              PUSH     {r4}
;;;3265   	int i;
;;;3266   
;;;3267   	tCoordInfo_t 	*temp_coord;
;;;3268   
;;;3269   	temp_coord = &thisInfo->tCoord;
000004  6900              LDR      r0,[r0,#0x10]  ; thisInfo
;;;3270   	
;;;3271   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)	
;;;3272   	if(temp_coord->bInterpolation_On)
;;;3273   	{
;;;3274   		temp_coord->tPastPos[4].sFinger_ 	    = temp_coord->tPastPos[3].sFinger_;
;;;3275   		temp_coord->tPastPos[3].sFinger_ 	    = temp_coord->tPastPos[2].sFinger_;
;;;3276   		
;;;3277   		temp_coord->tOrgPastPos[4].sFinger_ 	= temp_coord->tOrgPastPos[3].sFinger_;
;;;3278   		temp_coord->tOrgPastPos[3].sFinger_ 	= temp_coord->tOrgPastPos[2].sFinger_;
;;;3279   	}
;;;3280   #endif
;;;3281   
;;;3282   	temp_coord->tPastPos[2].sFinger_ 	    = temp_coord->tPastPos[1].sFinger_;
;;;3283   	temp_coord->tPastPos[1].sFinger_ 	    = temp_coord->tPastPos[0].sFinger_;
;;;3284   	temp_coord->tPastPos[0].sFinger_ 	    = temp_coord->tPos.sFinger_;
;;;3285   
;;;3286   	temp_coord->tOrgPastPos[2].sFinger_ 	= temp_coord->tOrgPastPos[1].sFinger_;
;;;3287   	temp_coord->tOrgPastPos[1].sFinger_ 	= temp_coord->tOrgPastPos[0].sFinger_;
;;;3288   	temp_coord->tOrgPastPos[0].sFinger_ 	= temp_coord->tOrgPos.sFinger_;
;;;3289   
;;;3290   	for( i=MAX_TOUCH_; i--; )
;;;3291   	{
;;;3292   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;3293   		if(temp_coord->bInterpolation_On)
;;;3294   		{
;;;3295   			temp_coord->tPastPos[4].tXY[i]         = temp_coord->tPastPos[3].tXY[i];
;;;3296   			temp_coord->tPastPos[4].vusR[i]        = temp_coord->tPastPos[3].vusR[i];
;;;3297   			temp_coord->tPastPos[4].vusS[i]        = temp_coord->tPastPos[3].vusS[i];
;;;3298   			
;;;3299   			temp_coord->tPastPos[3].tXY[i]         = temp_coord->tPastPos[2].tXY[i];
;;;3300   			temp_coord->tPastPos[3].vusR[i]        = temp_coord->tPastPos[2].vusR[i];
;;;3301   			temp_coord->tPastPos[3].vusS[i]        = temp_coord->tPastPos[2].vusS[i];
;;;3302   			
;;;3303   			temp_coord->tOrgPastPos[4].tXY[i]      = temp_coord->tOrgPastPos[3].tXY[i];
;;;3304   			temp_coord->tOrgPastPos[4].vusR[i]     = temp_coord->tOrgPastPos[3].vusR[i];
;;;3305   			temp_coord->tOrgPastPos[4].vusS[i]     = temp_coord->tOrgPastPos[3].vusS[i];
;;;3306   			
;;;3307   			temp_coord->tOrgPastPos[3].tXY[i]      = temp_coord->tOrgPastPos[2].tXY[i];
;;;3308   			temp_coord->tOrgPastPos[3].vusR[i]     = temp_coord->tOrgPastPos[2].vusR[i];
;;;3309   			temp_coord->tOrgPastPos[3].vusS[i]     = temp_coord->tOrgPastPos[2].vusS[i];
;;;3310   		}
;;;3311   #endif
;;;3312   		temp_coord->tPastPos[2].tXY[i]         = temp_coord->tPastPos[1].tXY[i];
;;;3313   		temp_coord->tPastPos[2].vusR[i]        = temp_coord->tPastPos[1].vusR[i];
;;;3314   		temp_coord->tPastPos[2].vusS[i]        = temp_coord->tPastPos[1].vusS[i];
;;;3315   		
;;;3316   		temp_coord->tPastPos[1].tXY[i]         = temp_coord->tPastPos[0].tXY[i];
;;;3317   		temp_coord->tPastPos[1].vusR[i]        = temp_coord->tPastPos[0].vusR[i];
;;;3318   		temp_coord->tPastPos[1].vusS[i]        = temp_coord->tPastPos[0].vusS[i];
;;;3319   
;;;3320   		if(temp_coord->ucPostProcessRun[i] == 1)
;;;3321   		{
;;;3322   			temp_coord->tPastPos[0].tXY[i] 	    = temp_coord->tFirstPos.tXY[i];
;;;3323   			temp_coord->tPastPos[0].vusR[i] 	    = temp_coord->tPos.vusR[i];
;;;3324   			temp_coord->tPastPos[0].vusS[i] 	    = temp_coord->tPos.vusS[i];
;;;3325   		}
;;;3326   		else
;;;3327   		{
;;;3328   			temp_coord->tPastPos[0].tXY[i] 	    = temp_coord->tPos.tXY[i];
;;;3329   			temp_coord->tPastPos[0].vusR[i] 	    = temp_coord->tPos.vusR[i];
;;;3330   			temp_coord->tPastPos[0].vusS[i] 	    = temp_coord->tPos.vusS[i];
;;;3331   		}
;;;3332   		
;;;3333   		temp_coord->tOrgPastPos[2].tXY[i]      = temp_coord->tOrgPastPos[1].tXY[i];
;;;3334   		temp_coord->tOrgPastPos[2].vusR[i]     = temp_coord->tOrgPastPos[1].vusR[i];
;;;3335   		temp_coord->tOrgPastPos[2].vusS[i]     = temp_coord->tOrgPastPos[1].vusS[i];
;;;3336   
;;;3337   		temp_coord->tOrgPastPos[1].tXY[i]      = temp_coord->tOrgPastPos[0].tXY[i];
;;;3338   		temp_coord->tOrgPastPos[1].vusR[i]     = temp_coord->tOrgPastPos[0].vusR[i];
;;;3339   		temp_coord->tOrgPastPos[1].vusS[i]     = temp_coord->tOrgPastPos[0].vusS[i];
;;;3340   
;;;3341   		temp_coord->tOrgPastPos[0].tXY[i] 	    = temp_coord->tOrgPos.tXY[i];
;;;3342   		temp_coord->tOrgPastPos[0].vusR[i] 	= temp_coord->tOrgPos.vusR[i];
;;;3343   		temp_coord->tOrgPastPos[0].vusS[i] 	= temp_coord->tOrgPos.vusS[i];
;;;3344   	}
;;;3345   }
000006  2309              MOVS     r3,#9
000008  f200315e          ADD      r1,r0,#0x35e          ;3269
00000c  f89006f0          LDRB     r0,[r0,#0x6f0]        ;3282
000010  f881040b          STRB     r0,[r1,#0x40b]        ;3282
000014  f8910319          LDRB     r0,[r1,#0x319]        ;3283
000018  f8810392          STRB     r0,[r1,#0x392]        ;3283
00001c  f8910121          LDRB     r0,[r1,#0x121]        ;3284
000020  f8810319          STRB     r0,[r1,#0x319]        ;3284
000024  f89106f4          LDRB     r0,[r1,#0x6f4]        ;3286
000028  f881076d          STRB     r0,[r1,#0x76d]        ;3286
00002c  f891067b          LDRB     r0,[r1,#0x67b]        ;3287
000030  f88106f4          STRB     r0,[r1,#0x6f4]        ;3287
000034  f8910576          LDRB     r0,[r1,#0x576]        ;3288
000038  f881067b          STRB     r0,[r1,#0x67b]        ;3288
                  |L7.60|
00003c  eb0102c3          ADD      r2,r1,r3,LSL #3       ;3312
000040  f5026c80          ADD      r12,r2,#0x400         ;3312
000044  f8d20393          LDR      r0,[r2,#0x393]        ;3312
000048  f8c2040c          STR      r0,[r2,#0x40c]        ;3312
00004c  f8d20397          LDR      r0,[r2,#0x397]        ;3312
000050  f8c20410          STR      r0,[r2,#0x410]        ;3312
000054  eb010043          ADD      r0,r1,r3,LSL #1       ;3313
000058  f8b043f7          LDRH     r4,[r0,#0x3f7]        ;3313
00005c  f8a04470          STRH     r4,[r0,#0x470]        ;3313
000060  f8b043e3          LDRH     r4,[r0,#0x3e3]        ;3314
000064  f8a0445c          STRH     r4,[r0,#0x45c]        ;3314
000068  f8d2431a          LDR      r4,[r2,#0x31a]        ;3316
00006c  f8c24393          STR      r4,[r2,#0x393]        ;3316
000070  f8d2431e          LDR      r4,[r2,#0x31e]        ;3316
000074  f8c24397          STR      r4,[r2,#0x397]        ;3316
000078  f8b0437e          LDRH     r4,[r0,#0x37e]        ;3317
00007c  f8a043f7          STRH     r4,[r0,#0x3f7]        ;3317
000080  f8b0436a          LDRH     r4,[r0,#0x36a]        ;3318
000084  f8a043e3          STRH     r4,[r0,#0x3e3]        ;3318
000088  18cc              ADDS     r4,r1,r3              ;3320
00008a  f8944a65          LDRB     r4,[r4,#0xa65]        ;3320
00008e  2c01              CMP      r4,#1                 ;3320
000090  d044              BEQ      |L7.284|
000092  f8d24122          LDR      r4,[r2,#0x122]        ;3328
000096  f8c2431a          STR      r4,[r2,#0x31a]        ;3328
00009a  f8d24126          LDR      r4,[r2,#0x126]        ;3328
00009e  f8c2431e          STR      r4,[r2,#0x31e]        ;3328
0000a2  f8b04186          LDRH     r4,[r0,#0x186]        ;3329
0000a6  f8a0437e          STRH     r4,[r0,#0x37e]        ;3329
0000aa  f8b04172          LDRH     r4,[r0,#0x172]        ;3330
0000ae  f8a0436a          STRH     r4,[r0,#0x36a]        ;3330
0000b2  bf00              NOP                            ;3333
                  |L7.180|
0000b4  f8dc42f5          LDR      r4,[r12,#0x2f5]       ;3333
0000b8  f8c2476e          STR      r4,[r2,#0x76e]        ;3333
0000bc  f8dc42f9          LDR      r4,[r12,#0x2f9]       ;3333
0000c0  f8c24772          STR      r4,[r2,#0x772]        ;3333
0000c4  f8b02759          LDRH     r2,[r0,#0x759]        ;3334
0000c8  f8a027d2          STRH     r2,[r0,#0x7d2]        ;3334
0000cc  f8b02745          LDRH     r2,[r0,#0x745]        ;3335
0000d0  f8a027be          STRH     r2,[r0,#0x7be]        ;3335
0000d4  f8dc227c          LDR      r2,[r12,#0x27c]       ;3337
0000d8  f8cc22f5          STR      r2,[r12,#0x2f5]       ;3337
0000dc  f8dc2280          LDR      r2,[r12,#0x280]       ;3337
0000e0  f8cc22f9          STR      r2,[r12,#0x2f9]       ;3337
0000e4  f8b026e0          LDRH     r2,[r0,#0x6e0]        ;3338
0000e8  f8a02759          STRH     r2,[r0,#0x759]        ;3338
0000ec  f8b026cc          LDRH     r2,[r0,#0x6cc]        ;3339
0000f0  f8a02745          STRH     r2,[r0,#0x745]        ;3339
0000f4  f8dc2177          LDR      r2,[r12,#0x177]       ;3341
0000f8  f8cc227c          STR      r2,[r12,#0x27c]       ;3341
0000fc  f8dc217b          LDR      r2,[r12,#0x17b]       ;3341
000100  f8cc2280          STR      r2,[r12,#0x280]       ;3341
000104  f8b025db          LDRH     r2,[r0,#0x5db]        ;3342
000108  f8a026e0          STRH     r2,[r0,#0x6e0]        ;3342
00010c  f8b025c7          LDRH     r2,[r0,#0x5c7]        ;3343
000110  f8a026cc          STRH     r2,[r0,#0x6cc]        ;3343
000114  1e5b              SUBS     r3,r3,#1              ;3343
000116  d291              BCS      |L7.60|
000118  bc10              POP      {r4}
00011a  4770              BX       lr
                  |L7.284|
00011c  f8d24227          LDR      r4,[r2,#0x227]        ;3322
000120  f8c2431a          STR      r4,[r2,#0x31a]        ;3322
000124  f8d2422b          LDR      r4,[r2,#0x22b]        ;3322
000128  f8c2431e          STR      r4,[r2,#0x31e]        ;3322
00012c  f8b04186          LDRH     r4,[r0,#0x186]        ;3323
000130  f8a0437e          STRH     r4,[r0,#0x37e]        ;3323
000134  f8b04172          LDRH     r4,[r0,#0x172]        ;3324
000138  f8a0436a          STRH     r4,[r0,#0x36a]        ;3324
00013c  e7ba              B        |L7.180|
;;;3346   
                          ENDP

00013e  0000              DCW      0x0000
                  |L7.320|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_calc_comp_distance||, CODE, READONLY, ALIGN=1

                  algorithm_coord_calc_comp_distance PROC
;;;3357   
;;;3358   int32_t algorithm_coord_calc_comp_distance(tXY_t pos1, tXY_t pos2, tXY_t comp)
000000  b430              PUSH     {r4,r5}
;;;3359   {
;;;3360   	int32_t dist;
;;;3361   
;;;3362   	dist = (pos1.x - pos2.x - comp.x)*(pos1.x - pos2.x - comp.x) + (pos1.y - pos2.y - comp.y)*(pos1.y - pos2.y - comp.y);
000002  1a80              SUBS     r0,r0,r2
000004  e9dd4c02          LDRD     r4,r12,[sp,#8]        ;3359
000008  1b00              SUBS     r0,r0,r4
00000a  fb00f200          MUL      r2,r0,r0
00000e  1ac8              SUBS     r0,r1,r3
000010  eba0000c          SUB      r0,r0,r12
000014  fb002000          MLA      r0,r0,r0,r2
;;;3363   
;;;3364       dist = algorithm_calc_sqrt(dist);
000018  bc30              POP      {r4,r5}
00001a  f7ffbffe          B.W      algorithm_calc_sqrt
;;;3365   
;;;3366   	return dist;
;;;3367   }
;;;3368   
                          ENDP


                          AREA ||i.algorithm_coord_calc_distance||, CODE, READONLY, ALIGN=1

                  algorithm_coord_calc_distance PROC
;;;3346   
;;;3347   int32_t algorithm_coord_calc_distance(tXY_t pos1, tXY_t pos2)
000000  1a80              SUBS     r0,r0,r2
;;;3348   {
;;;3349   	int32_t dist;
;;;3350   
;;;3351   	dist = (pos1.x - pos2.x)*(pos1.x - pos2.x) + (pos1.y - pos2.y)*(pos1.y - pos2.y);
000002  fb00f200          MUL      r2,r0,r0
000006  1ac8              SUBS     r0,r1,r3
000008  fb002000          MLA      r0,r0,r0,r2
;;;3352   
;;;3353       dist = algorithm_calc_sqrt(dist);
00000c  f7ffbffe          B.W      algorithm_calc_sqrt
;;;3354   
;;;3355   	return dist;
;;;3356   }
;;;3357   
                          ENDP


                          AREA ||i.algorithm_coord_calc_pos||, CODE, READONLY, ALIGN=2

                  algorithm_coord_calc_pos PROC
;;;273    uint8_t gReleaseCnt[POSBUF_] = {0,}; //for win cert4
;;;274    void algorithm_coord_calc_pos(int mode)
000000  b4f0              PUSH     {r4-r7}
;;;275    {
;;;276    	int l,i,cl,pl,match_cl,match_pl;
;;;277    	int r,c,_d;
;;;278    	uint32_t ulStrength = 0;
;;;279    	uint8_t PrevFinger_ = 0;
;;;280    	int MaxDist = 0, dist = 0, MinDist = 0;
;;;281    	
;;;282    	uint8_t MaxTouchNum = 0;
;;;283    
;;;284    	tLabelInfo_t	*temp_label;
;;;285    	tCoordInfo_t 	*temp_coord;
;;;286    
;;;287    	if(mode != FULL_MODE)
;;;288    	{
;;;289    		temp_coord = &thisInfo->tCoord_local;
000002  493f              LDR      r1,|L10.256|
000004  2800              CMP      r0,#0                 ;287
000006  6909              LDR      r1,[r1,#0x10]
;;;290    		temp_label = &thisInfo->tLabel_local;
;;;291    	}
;;;292    	else
;;;293    	{
;;;294    		temp_coord = &thisInfo->tCoord;
000008  bf04              ITT      EQ
00000a  f201305e          ADDEQ    r0,r1,#0x35e
;;;295    		temp_label = &thisInfo->tLabel;
00000e  f101043a          ADDEQ    r4,r1,#0x3a
000012  d005              BEQ      |L10.32|
000014  f24130d4          MOV      r0,#0x13d4            ;289
000018  f24102b0          MOV      r2,#0x10b0            ;290
00001c  4408              ADD      r0,r0,r1              ;289
00001e  188c              ADDS     r4,r1,r2              ;290
                  |L10.32|
;;;296    	}
;;;297    
;;;298    	for(l=temp_label->ucNum;l--;)
000020  7821              LDRB     r1,[r4,#0]
000022  f1b10c01          SUBS     r12,r1,#1
;;;299    	{
;;;300    		if( temp_label->tTable[l].ulStrength )
;;;301    		{
;;;302    			temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].x  = (temp_label->tTable[l].tCoord.x << POS_BOOST_SHIFT_)/(signed)temp_label->tTable[l].ulExtStrength;
;;;303    			temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].y  = (temp_label->tTable[l].tCoord.y << POS_BOOST_SHIFT_)/(signed)temp_label->tTable[l].ulExtStrength;
;;;304    		
;;;305    			//MaxDelta Compensation
;;;306    			{
;;;307    				int16_t coef_x=0,coef_y=0;
;;;308    				
;;;309    				coef_x = (temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].x%UNIT_DIST);
;;;310    				coef_y = (temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].y%UNIT_DIST);
;;;311    				if(coef_x > (UNIT_DIST>>1) )
;;;312    					coef_x = UNIT_DIST - coef_x;
;;;313    				if(coef_y > (UNIT_DIST>>1) )
;;;314    					coef_y = UNIT_DIST - coef_y;
;;;315    				
;;;316    				temp_coord->RealMaxDelta[temp_coord->tTempPos.sFinger_] = (uint16_t)(temp_label->tTable[l].sMaxCellVal 
;;;317    																			+ (((int)(temp_label->tTable[l].sMaxCellVal) * (coef_x+coef_y) )>>(POS_BOOST_SHIFT_+1)) );
;;;318    			}
;;;319    			
;;;320    			temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_]   = temp_label->tTable[l].usCellNum;
;;;321    			temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_]   = temp_label->tTable[l].ulStrength;
;;;322    			temp_coord->tTempPos.rect[temp_coord->tTempPos.sFinger_]   = temp_label->tTable[l].tRect;
;;;323    			temp_coord->tTempPos.MaxDelta[temp_coord->tTempPos.sFinger_] = temp_label->tTable[l].sMaxCellVal;
;;;324    #if (PalmCandidateTouchCut_EN == YES)
;;;325    			temp_coord->tTempPos.MaxPos[temp_coord->tTempPos.sFinger_].c = temp_label->tTable[l].tMaxCell.c;
;;;326    			temp_coord->tTempPos.MaxPos[temp_coord->tTempPos.sFinger_].r = temp_label->tTable[l].tMaxCell.r;
;;;327    #endif /* (PalmCandidateTouchCut_EN == YES) */
;;;328    
;;;329    			temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
000026  bf2e              ITEE     CS
000028  f600266f          ADDCS    r6,r0,#0xa6f
;;;330    
;;;331    			temp_coord->tTempPos.sFinger_++;
;;;332    		}
;;;333    	}
;;;334    	
;;;335    #if (PalmDrawingOn_En == YES)
;;;336    	if(thisModeConf->Palm.ucPalmDrawingOn && thisInfo->bIsPalm){
;;;337    		int pl;
;;;338    		int r,c;
;;;339    		for(pl=0;pl<PalmRegionNum;pl++)
;;;340    		{
;;;341    			if(PalmRectEnable[pl])
;;;342    			{
;;;343    				int X=0,Y=0,delta = 0, MaxDelta = 0;
;;;344    				int32_t StrengthSum = 0;
;;;345    				for(r=PalmRect[pl].rs;r<=PalmRect[pl].re;r++)
;;;346    				for(c=PalmRect[pl].cs;c<=PalmRect[pl].ce;c++)
;;;347    				{
;;;348    					delta = (HAL_READ_DELTA_IMAGE(r,c)>>3);
;;;349    					if(delta > 1)
;;;350    					{
;;;351    						X += delta * c;
;;;352    						Y += delta * r;
;;;353    						StrengthSum += delta;
;;;354    						if(MaxDelta < delta)	MaxDelta = delta;
;;;355    					}
;;;356    				}
;;;357    				X = (X << POS_BOOST_SHIFT_)/StrengthSum;
;;;358    				Y = (Y << POS_BOOST_SHIFT_)/StrengthSum;
;;;359    		
;;;360    				temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].x = X;//((X + (((PalmRect[pl].cs + PalmRect[pl].ce)<<POS_BOOST_SHIFT_)>>1))>>1);
;;;361    				temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].y = Y;//((Y + (((PalmRect[pl].rs + PalmRect[pl].re)<<POS_BOOST_SHIFT_)>>1))>>1);
;;;362    				
;;;363    				temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_]   = thisInfo->tDelta.iPosCnt;
;;;364    				temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_]   = StrengthSum;//thisInfo->tDelta.iPosSum;
;;;365    				temp_coord->tTempPos.rect[temp_coord->tTempPos.sFinger_]   = PalmRect[pl];
;;;366    				temp_coord->tTempPos.MaxDelta[temp_coord->tTempPos.sFinger_] = MaxDelta;//thisInfo->tDelta.iMaxStrength;
;;;367    				
;;;368    
;;;369    
;;;370    				temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;371    				
;;;372    				temp_coord->tTempPos.sFinger_++;
;;;373    			}
;;;374    		}
;;;375    		return;
;;;376    	}
;;;377    #endif
;;;378    #if WinCertAssistance_En	
;;;379    	
;;;380    	if(thisModeConf->Coord.ucWinCertAssistance == 1)
;;;381    	{
;;;382    		if(temp_coord->tTempPos.sFinger_ == 0 || temp_coord->tTempPos.sFinger_ > 5){
;;;383    			WrongSeparationCnt = 0;
;;;384    			memset(TouchNumHisto,0,sizeof(TouchNumHisto));
;;;385    			FixTouchNum = 0;
;;;386    		}
;;;387    		else{
;;;388    			int i,MaxNumCnt = 0;
;;;389    			//Counting touchnum
;;;390    			if(FixTouchNum == 0){
;;;391    				for(i=0;i<POSBUF_;i++)
;;;392    				{
;;;393    					if(i == temp_coord->tTempPos.sFinger_-1){
;;;394    							TouchNumHisto[i]++;
;;;395    					}
;;;396    					else if(TouchNumHisto[i]>0)
;;;397    						TouchNumHisto[i]--;
;;;398    
;;;399    					if(TouchNumHisto[i] >thisModeConf->Coord.ucTouchCountMax){
;;;400    						TouchNumHisto[i] = thisModeConf->Coord.ucTouchCountMax;
;;;401    						FixTouchNum = i+1;
;;;402    					}
;;;403    					if(TouchNumHisto[i] > MaxNumCnt)
;;;404    					{
;;;405    						MaxNumCnt = TouchNumHisto[i];
;;;406    						MaxTouchNum = i+1;
;;;407    					}
;;;408    				}
;;;409    			}
;;;410    			else{
;;;411    				MaxTouchNum = FixTouchNum;
;;;412    			}
;;;413    		}
;;;414    		
;;;415    		if(temp_coord->tTempPos.sFinger_ > 1)
;;;416    		{
;;;417    			int cl,pl;
;;;418    			uint8_t connected = 0;
;;;419    			MinDist = (thisModeConf->CoordTracking.usCenterMatchDistanceThd<<POS_BOOST_SHIFT_);
;;;420    			for(cl=0;cl<temp_coord->tTempPos.sFinger_;cl++){
;;;421    				connected = NO;
;;;422    				for(pl=0;pl<temp_coord->tTempPos.sFinger_;pl++){
;;;423    					if(cl == pl)	continue;
;;;424    					if(MinDist > algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[cl],temp_coord->tTempPos.tXY[pl])){
;;;425    						connected = YES;
;;;426    						break;
;;;427    					}
;;;428    				}
;;;429    				if(connected == NO)
;;;430    				{
;;;431    					WrongSeparationCnt = 0;
;;;432    					memset(TouchNumHisto,0,sizeof(TouchNumHisto));
;;;433    					FixTouchNum = 0;
;;;434    					break;
;;;435    				}
;;;436    			}
;;;437    		}
;;;438    		
;;;439    		if(FixTouchNum && temp_coord->tTempPos.sFinger_ > 0 && FixTouchNum != temp_coord->tTempPos.sFinger_)
;;;440    		{
;;;441    			tXY_t Vector;
;;;442    //			uint8_t VectorCnt = 0;
;;;443    			
;;;444    			if(WrongSeparationCnt++ < thisModeConf->Coord.ucMaxExtendFrameNum)
;;;445    			{
;;;446    				//search vector
;;;447    				Vector.x = 0, Vector.y = 0;
;;;448    				match_cl = -1, match_pl = -1;
;;;449    				MinDist = (7<<POS_BOOST_SHIFT_);
;;;450    				for(cl=0;cl<temp_coord->tTempPos.sFinger_;cl++){
;;;451    					if(temp_coord->tTempPos.vusR[cl]!=0){
;;;452    		//				if(algorithm_nearby_rect_point(BigLabelRect[i], temp_coord->tTempPos.tXY[cl], 3))	//Margin 3
;;;453    						{
;;;454    	//						MinDist = (10<<POS_BOOST_SHIFT_);
;;;455    	//						match_pl = -1;
;;;456    							for(pl=0;pl<MAX_TOUCH_;pl++){
;;;457    								if(temp_coord->tOrgPastPos[0].vusR[pl]!=0){
;;;458    									
;;;459    									tXY_t Pred;
;;;460    									if(temp_coord->tPastPos[2].vusR[pl]>0){
;;;461    			//							Pred.x = (temp_coord->tPastPos[0].tXY[pl].x<<1) - temp_coord->tPastPos[2].tXY[pl].x;
;;;462    			//							Pred.y = (temp_coord->tPastPos[0].tXY[pl].y<<1) - temp_coord->tPastPos[2].tXY[pl].y;
;;;463    										Pred.x = temp_coord->tOrgPastPos[0].tXY[pl].x + (temp_coord->tPastPos[0].tXY[pl].x - temp_coord->tPastPos[2].tXY[pl].x);
;;;464    										Pred.y = temp_coord->tOrgPastPos[0].tXY[pl].y + (temp_coord->tPastPos[0].tXY[pl].y - temp_coord->tPastPos[2].tXY[pl].y);
;;;465    									}
;;;466    									else{
;;;467    										Pred = temp_coord->tOrgPastPos[0].tXY[pl];
;;;468    									}
;;;469    									dist = algorithm_coord_calc_distance(Pred,temp_coord->tTempPos.tXY[cl]);
;;;470    									if(dist < MinDist)
;;;471    									{
;;;472    										MinDist = dist;
;;;473    										match_pl = pl;
;;;474    										match_cl = cl;
;;;475    									}
;;;476    								}
;;;477    							}
;;;478    						}
;;;479    					}
;;;480    				}
;;;481    				if(match_pl != -1 && match_cl != -1)
;;;482    				{
;;;483    //					Vector.x += temp_coord->tTempPos.tXY[match_cl].x - temp_coord->tOrgPastPos[0].tXY[match_pl].x;
;;;484    //					Vector.y += temp_coord->tTempPos.tXY[match_cl].y - temp_coord->tOrgPastPos[0].tXY[match_pl].y;
;;;485    					
;;;486    					Vector.x = 0, Vector.y = 0;
;;;487    					if(temp_coord->tPastPos[0].vusR[match_pl]>0 && temp_coord->tPastPos[2].vusR[match_pl]>0){
;;;488    						Vector.x = ((temp_coord->tPastPos[0].tXY[match_pl].x - temp_coord->tPastPos[2].tXY[match_pl].x)>>1);
;;;489    						Vector.y = ((temp_coord->tPastPos[0].tXY[match_pl].y - temp_coord->tPastPos[2].tXY[match_pl].y)>>1);
;;;490    					}
;;;491    					
;;;492    					for(i=0;i<POSBUF_;i++){
;;;493    						temp_coord->tTempPos.vusR[i]   = 0;
;;;494    						temp_coord->tTempPos.vusS[i]   = 0;
;;;495    					}
;;;496    					temp_coord->tTempPos.sFinger_ = 0;
;;;497    					for(pl=0;pl<MAX_TOUCH_;pl++){
;;;498    						if(temp_coord->tOrgPastPos[0].vusR[pl]!=0 ){	//&& temp_coord->DrawingFlag[pl] == YES){
;;;499    							
;;;500    							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[pl];
;;;501    							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].x += Vector.x;
;;;502    							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].y += Vector.y;
;;;503    
;;;504    							temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_]   = temp_coord->tOrgPastPos[0].vusR[pl];
;;;505    							temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_]   = temp_coord->tOrgPastPos[0].vusS[pl];
;;;506    			//				temp_coord->tTempPos.rect[temp_coord->tTempPos.sFinger_]   = 
;;;507    							temp_coord->RealMaxDelta[temp_coord->tTempPos.sFinger_] = 0; 
;;;508    							temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;509    							temp_coord->tTempPos.sFinger_++;
;;;510    						}
;;;511    					}
;;;512    				}
;;;513    				
;;;514    			}
;;;515    			else{
;;;516    				WrongSeparationCnt = 0;
;;;517    				memset(TouchNumHisto,0,sizeof(TouchNumHisto));
;;;518    		//		PrevMaxTouchNum = 0;
;;;519    				FixTouchNum = 0;
;;;520    			}
;;;521    		}
;;;522    		else{
;;;523    			WrongSeparationCnt = 0;
;;;524    		}
;;;525    		
;;;526    //		if(temp_coord->tTempPos.sFinger_ > 1)
;;;527    //		{
;;;528    //			int cl,pl;
;;;529    //			for(cl=0;cl<temp_coord->tTempPos.sFinger_;cl++){
;;;530    //				for(pl=0;pl<temp_coord->tTempPos.sFinger_;pl++){
;;;531    //					if(cl == pl)	continue;
;;;532    //					if(abs(temp_coord->tTempPos.tXY[cl].x - temp_coord->tTempPos.tXY[pl].x)+abs(temp_coord->tTempPos.tXY[cl].y - temp_coord->tTempPos.tXY[pl].y) < (3<<POS_BOOST_SHIFT_) ){
;;;533    //						temp_label->LabelSplitCnt++;
;;;534    //						break;
;;;535    //					}
;;;536    //					
;;;537    //				}
;;;538    //			}
;;;539    //		}
;;;540    
;;;541    //		if(temp_label->LabelSplitCnt)
;;;542    //			temp_label->LabelSplitFrmCnt++;
;;;543    //		else if(temp_label->LabelSplitFrmCnt)
;;;544    //			temp_label->LabelSplitFrmCnt--;
;;;545    	}
;;;546    	else if(thisModeConf->Coord.ucWinCertAssistance == 2)
;;;547    	{
;;;548    		if(temp_coord->tTempPos.sFinger_ == 0){
;;;549    			WrongSeparationCnt = 0;
;;;550    			memset(TouchNumHisto,0,sizeof(TouchNumHisto));
;;;551    			PrevMaxTouchNum = 0;
;;;552    	//		temp_label->LabelNearbyFrmCnt = 0;
;;;553    		}
;;;554    		else{
;;;555    			int i,MaxNumCnt = 0;
;;;556    			//Counting touchnum
;;;557    			for(i=0;i<POSBUF_;i++)
;;;558    			{
;;;559    				if(i == temp_coord->tTempPos.sFinger_-1)
;;;560    					TouchNumHisto[i]++;
;;;561    				else if(TouchNumHisto[i]>0)
;;;562    					TouchNumHisto[i]--;
;;;563    				if(TouchNumHisto[i] >thisModeConf->Coord.ucTouchCountMax){
;;;564    					TouchNumHisto[i] = thisModeConf->Coord.ucTouchCountMax;
;;;565    				}
;;;566    				if(TouchNumHisto[i] > MaxNumCnt)
;;;567    				{
;;;568    					MaxNumCnt = TouchNumHisto[i];
;;;569    					MaxTouchNum = i+1;
;;;570    				}
;;;571    			}
;;;572    		}
;;;573    		
;;;574    //		temp_label->LabelNearbyCnt = 0;
;;;575    		if(temp_coord->tTempPos.sFinger_ > 1)
;;;576    		{
;;;577    			int cl,pl;
;;;578    //			uint8_t SplitFlag = 0;
;;;579    			for(cl=0;cl<temp_coord->tTempPos.sFinger_;cl++){
;;;580    				for(pl=0;pl<temp_coord->tTempPos.sFinger_;pl++){
;;;581    					if(cl == pl)	continue;
;;;582    	//				dist = abs(temp_coord->tTempPos.tXY[cl].x - temp_coord->tTempPos.tXY[pl].x)+abs(temp_coord->tTempPos.tXY[cl].y - temp_coord->tTempPos.tXY[pl].y);
;;;583    					dist = algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[cl], temp_coord->tTempPos.tXY[pl]);
;;;584    					if(dist < (4<<POS_BOOST_SHIFT_) ){
;;;585    //						SplitFlag = YES;
;;;586    					}
;;;587    					if(MaxDist < dist)
;;;588    						MaxDist = dist;
;;;589    				}
;;;590    			}
;;;591    //			if(SplitFlag)	temp_label->LabelNearbyCnt++;
;;;592    		}
;;;593    		
;;;594    		if( temp_coord->tPastPos[0].sFinger_ > 1 && temp_coord->tTempPos.sFinger_ && MaxDist < (6<<POS_BOOST_SHIFT_) && temp_label->LabelSplitFrmCnt)
;;;595    		{
;;;596    			if(MaxTouchNum == PrevMaxTouchNum && TouchNumHisto[MaxTouchNum-1] > (thisModeConf->Coord.ucTouchCountMax>>1)){
;;;597    				if(temp_coord->tPastPos[0].sFinger_ !=  temp_coord->tTempPos.sFinger_)
;;;598    				{
;;;599    					tXY_t Vector[2];
;;;600    					uint16_t cnt[2];
;;;601    					
;;;602    					if(temp_label->LabelSplitCnt)
;;;603    					{
;;;604    						Vector[1].x = 0, Vector[1].y = 0, cnt[1] = 0;
;;;605    						for(i=0;i<temp_coord->tPastPos[0].sFinger_;i++){
;;;606    							if(temp_coord->tPastPos[0].vusR[i]!=0){
;;;607    								Vector[1].x += temp_coord->tOrgPastPos[0].tXY[i].x;
;;;608    								Vector[1].y += temp_coord->tOrgPastPos[0].tXY[i].y;
;;;609    								cnt[1]++;
;;;610    							}
;;;611    						}
;;;612    						if(cnt[1]){
;;;613    							Vector[1].x /= cnt[1];
;;;614    							Vector[1].y /= cnt[1];
;;;615    						}
;;;616    						
;;;617    						Vector[0].x = 0, Vector[0].y = 0, cnt[0] = 0;
;;;618    						for(i=0;i<temp_coord->tTempPos.sFinger_;i++){
;;;619    							Vector[0].x += temp_coord->tTempPos.tXY[i].x;
;;;620    							Vector[0].y += temp_coord->tTempPos.tXY[i].y;
;;;621    							cnt[0]++;
;;;622    						}
;;;623    						if(cnt[0]){
;;;624    							Vector[0].x /= cnt[0];
;;;625    							Vector[0].y /= cnt[0];
;;;626    						}
;;;627    						if(cnt[0] && cnt[1])
;;;628    						{
;;;629    							Vector[0].x -= Vector[1].x;
;;;630    							Vector[0].y -= Vector[1].y;
;;;631    						}
;;;632    						else{
;;;633    							Vector[0].x = 0;
;;;634    							Vector[0].y = 0;
;;;635    						}
;;;636    					}
;;;637    					else{
;;;638    						Vector[0].x = 0;
;;;639    						Vector[0].y = 0;
;;;640    					}
;;;641    					
;;;642    					
;;;643    					if(WrongSeparationCnt++ < thisModeConf->Coord.ucMaxExtendFrameNum)
;;;644    					{
;;;645    						for(i=0;i<POSBUF_;i++){
;;;646    							temp_coord->tTempPos.vusR[i]   = 0;
;;;647    							temp_coord->tTempPos.vusS[i]   = 0;
;;;648    						}
;;;649    						for(i=0;i<temp_coord->tPastPos[0].sFinger_;i++){
;;;650    							if(temp_coord->tPastPos[0].vusR[i]!=0){
;;;651    				//				temp_coord->tTempPos.tXY[i] = temp_coord->tOrgPastPos[0].tXY[i];
;;;652    	//							temp_coord->tTempPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x;
;;;653    	//							temp_coord->tTempPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y;
;;;654    	//							temp_coord->tTempPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + (temp_coord->tTempPos.tXY[0].x - temp_coord->tOrgPastPos[0].tXY[i].x);
;;;655    	//							temp_coord->tTempPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + (temp_coord->tTempPos.tXY[0].y - temp_coord->tOrgPastPos[0].tXY[i].y);
;;;656    								temp_coord->tTempPos.tXY[i].x = temp_coord->tOrgPastPos[0].tXY[i].x + Vector[0].x;
;;;657    								temp_coord->tTempPos.tXY[i].y = temp_coord->tOrgPastPos[0].tXY[i].y + Vector[0].y;
;;;658    
;;;659    								
;;;660    				//				temp_coord->tTempPos.tXY[i].x = (temp_coord->tOrgPastPos[0].tXY[i].x<<1) - temp_coord->tOrgPastPos[1].tXY[i].x;
;;;661    				//				temp_coord->tTempPos.tXY[i].y = (temp_coord->tOrgPastPos[0].tXY[i].y<<1) - temp_coord->tOrgPastPos[1].tXY[i].y;
;;;662    								
;;;663    								temp_coord->tTempPos.vusR[i]   = 1;//temp_coord->tPastPos[0].vusR[0];
;;;664    								temp_coord->tTempPos.vusS[i]   = 1;//temp_coord->tPastPos[0].vusS[0];
;;;665    								temp_coord->cRemap[i] = i;
;;;666    							}
;;;667    						}
;;;668    						temp_coord->tTempPos.sFinger_ = temp_coord->tPastPos[0].sFinger_;
;;;669    					}
;;;670    					else
;;;671    						WrongSeparationCnt = 0;
;;;672    				}
;;;673    				else
;;;674    				{
;;;675    					if(WrongSeparationCnt)	WrongSeparationCnt--;
;;;676    					
;;;677    				}
;;;678    			}
;;;679    		}
;;;680    		PrevMaxTouchNum = MaxTouchNum;
;;;681    		
;;;682    	}
;;;683    	else if(thisModeConf->Coord.ucWinCertAssistance == 3)
;;;684    	{
;;;685    		int curr_touch_num = 0, prev_touch_num = 0;
;;;686    		static uint32_t maintain_touchnum_cnt = 0;
;;;687    		static uint8_t fixed_touchnum = 0;
;;;688    //		static tPredictPos_t prev_org_pos;
;;;689    //		int i,j;
;;;690    		//                   tCoordInfo_t *temp_coord;
;;;691    		#define TOUCH_FIX_FRM_NUM 10
;;;692    
;;;693    		curr_touch_num = temp_coord->tTempPos.sFinger_;
;;;694    		prev_touch_num = temp_coord->tPastPos[0].sFinger_;
;;;695    
;;;696    		if(curr_touch_num > 1 && curr_touch_num == prev_touch_num && fixed_touchnum==0){     //multi touch && maintain touch num
;;;697    			maintain_touchnum_cnt++;
;;;698    			if(maintain_touchnum_cnt > thisModeConf->Coord.ucTouchCountMax)//TOUCH_FIX_FRM_NUM)
;;;699    				fixed_touchnum = prev_touch_num;
;;;700    		}
;;;701    		else if(curr_touch_num == 0){
;;;702    			maintain_touchnum_cnt = 0;
;;;703    			fixed_touchnum = 0;
;;;704    		}
;;;705    
;;;706    		if(fixed_touchnum == 0 && curr_touch_num != prev_touch_num)     //fixe??ei¿½i¿½i¿½i¿½ i??i?? i?i¿½i¿½ii¿½i¿½? ei¿½Æⓒi¿½i??ei¿½Æ￠i¿½ ei¿½i¿½i¿½i¿½i??ei¿½I￠i¿½ ii¿½i¿½?ei¿½i¿½i¿½i¿½ii¿½a¡±
;;;707    			maintain_touchnum_cnt = 0;
;;;708    
;;;709    		if(fixed_touchnum > 1 && curr_touch_num < prev_touch_num)
;;;710    		{
;;;711    			int i,j,pre_x,pre_y;
;;;712    			uint8_t flag = 0;
;;;713    			for(i=0;i<temp_coord->tPastPos[0].sFinger_;i++){
;;;714    				flag = NO;
;;;715    				pre_x = temp_coord->tPastPos[0].tXY[i].x;
;;;716    				pre_y = temp_coord->tPastPos[0].tXY[i].y;
;;;717    				for(j=0;j<temp_coord->tTempPos.sFinger_;j++){
;;;718    					if(abs(pre_x - temp_coord->tTempPos.tXY[j].x) + abs(pre_y - temp_coord->tTempPos.tXY[j].y) < ((4+((TOUCH_FIX_FRM_NUM-maintain_touchnum_cnt)>>1))<<POS_BOOST_SHIFT_) ){
;;;719    						flag = YES;	//i??i?i¿½i¿½ ii¿½i¿½?e??i??i?? i?i¿½i¿½i?i¿½i¿½i?i¿½i¿½ e?i¿½i¿½ei¿½i¿½i¿½i¿½i?i¿½i¿½ i??i?i¿½i¿½
;;;720    						break;
;;;721    					}
;;;722    				}
;;;723    				if(flag == NO)	break;	//i??i?i¿½i¿½ ii¿½i¿½?e??i??i?? i?i¿½i¿½i?i¿½i¿½i?i¿½i¿½ e?i¿½i¿½ei¿½i¿½i¿½i¿½i?i¿½i¿½ i?i¿½i¿½e?i¿½i¿½ i?i¿½i¿½i?? ii¿½i¿½?e??i?? e?i¿½i¿½ei¿½i¿½i¿½i¿½
;;;724    			}
;;;725    			
;;;726    			if(flag == YES)
;;;727    			{
;;;728    				
;;;729    
;;;730    				////////////////////////////////////////////
;;;731    				
;;;732    				for(i=0;i<temp_coord->tPastPos[0].sFinger_;i++)
;;;733    				{
;;;734    					temp_coord->tTempPos.tXY[i] = temp_coord->tPastPos[0].tXY[i];
;;;735    //					temp_coord->tTempPos.tXY[i].x = temp_coord->tPastPos[0].tXY[i].x + ((curr_x - pre_x)>>1);		//TEST_CODE_190410
;;;736    //					temp_coord->tTempPos.tXY[i].y = temp_coord->tPastPos[0].tXY[i].y + ((curr_y - pre_y)>>1);
;;;737    
;;;738    					temp_coord->tTempPos.vusR[i]   = temp_coord->tPastPos[0].vusR[i];
;;;739    					temp_coord->tTempPos.vusS[i]   = temp_coord->tPastPos[0].vusS[i];
;;;740    				//  temp_coord->tTempPos.rect[i]   = temp_label->tTable[l].tRect;
;;;741    				//  temp_coord->tTempPos.MaxDelta[i] = temp_label->tTable[l].sMaxCellVal;
;;;742    				//  temp_coord->cRemap[i] = temp_coord->tTempPos.sFinger_;
;;;743    				}
;;;744    				temp_coord->tTempPos.sFinger_ = temp_coord->tPastPos[0].sFinger_;
;;;745    
;;;746    				maintain_touchnum_cnt--;
;;;747    				if(maintain_touchnum_cnt == 0)   fixed_touchnum = 0;
;;;748    			}
;;;749    		}
;;;750    				 
;;;751    	}
;;;752    	else if(thisModeConf->Coord.ucWinCertAssistance == 4)
;;;753    	{
;;;754    		int i,j,dist;
;;;755    		tCoordInfo_t 	*temp_coord = &thisInfo->tCoord;
;;;756    		uint8_t match_flag[POSBUF_] = {0,};
;;;757    
;;;758    		int PreFingerNum = 0;
;;;759    		for(i = 0; i < POSBUF_; i++)if(temp_coord->tPastPos[0].vusS[i] > 0)PreFingerNum++;
;;;760    
;;;761    		if(temp_coord->tTempPos.sFinger_ + 1 == PreFingerNum && temp_coord->tTempPos.sFinger_ > 0)
;;;762    		{
;;;763    			bool_t match_skip = 0;
;;;764    			for(i = 0; i < temp_coord->tTempPos.sFinger_; i++)
;;;765    			{
;;;766    				int min_dist = 32767;
;;;767    				int min_idx = -1;
;;;768    				//for(j = 0; j < temp_coord->tOrgPastPos[0].sFinger_; j++)
;;;769    				for (j = 0; j < POSBUF_; j++)
;;;770    				{
;;;771    					#if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;772    					if( (temp_coord->tPastPos[0].vusS[j] && temp_coord->tOrgPastPos[1].vusS[j] && !thisInfo->tCoord.bInterpolation_On)
;;;773    					|| (temp_coord->tPastPos[0].vusS[j] && temp_coord->tOrgPastPos[2].vusS[j] && thisInfo->tCoord.bInterpolation_On) )
;;;774    					#else
;;;775    					if(temp_coord->tPastPos[0].vusS[j] && temp_coord->tOrgPastPos[1].vusS[j])
;;;776    					#endif
;;;777    					{
;;;778    						tXY_t pred_pos;
;;;779    					#if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;780    						if(thisInfo->tCoord.bInterpolation_On)
;;;781    						{
;;;782    							pred_pos.x = (temp_coord->tOrgPastPos[0].tXY[j].x << 1) - temp_coord->tOrgPastPos[2].tXY[j].x;
;;;783    							pred_pos.y = (temp_coord->tOrgPastPos[0].tXY[j].y << 1) - temp_coord->tOrgPastPos[2].tXY[j].y;							
;;;784    						}
;;;785    						else
;;;786    					#endif
;;;787    						{
;;;788    							pred_pos.x = (temp_coord->tOrgPastPos[0].tXY[j].x << 1) - temp_coord->tOrgPastPos[1].tXY[j].x;
;;;789    							pred_pos.y = (temp_coord->tOrgPastPos[0].tXY[j].y << 1) - temp_coord->tOrgPastPos[1].tXY[j].y;
;;;790    						}
;;;791    						dist = algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[i], pred_pos);
;;;792    						if(min_dist > dist)
;;;793    						{
;;;794    							min_dist = dist;
;;;795    							min_idx = j;
;;;796    						}
;;;797    					}
;;;798    				}
;;;799    
;;;800    				if(min_idx != -1 && min_dist < (UNIT_DIST<<1))
;;;801    					match_flag[min_idx] = 1;
;;;802    				else
;;;803    				{
;;;804    					match_skip = 1;
;;;805    					break;
;;;806    				}
;;;807    			}
;;;808    
;;;809    			if(match_skip==0)
;;;810    			{
;;;811    				//for(j = 0; j < temp_coord->tOrgPastPos[0].sFinger_; j++)
;;;812    				for (j = 0; j < POSBUF_; j++)
;;;813    				{
;;;814    					if(temp_coord->tPastPos[0].vusS[j] && match_flag[j] == 0 && gReleaseCnt[j] < thisModeConf->Coord.ucMaxExtendFrameNum)
;;;815    					{
;;;816    						gReleaseCnt[j]++;
;;;817    						temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[j];
;;;818    						temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusR[j];
;;;819    						temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusS[j];
;;;820    						temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;821    						temp_coord->tTempPos.sFinger_++;
;;;822    					}
;;;823    					else gReleaseCnt[j] = 0;
;;;824    				}
;;;825    			}
;;;826    //			else memset(gReleaseCnt,0,sizeof(gReleaseCnt));
;;;827    		}
;;;828    		else memset(gReleaseCnt,0,sizeof(gReleaseCnt));
;;;829    	}
;;;830    #endif
;;;831    }
00002c  bcf0              POPCC    {r4-r7}
00002e  4770              BXCC     lr
                  |L10.48|
000030  ebcc01cc          RSB      r1,r12,r12,LSL #3     ;300
000034  eb01114c          ADD      r1,r1,r12,LSL #5      ;300
000038  4421              ADD      r1,r1,r4              ;300
00003a  694a              LDR      r2,[r1,#0x14]         ;300
00003c  2a00              CMP      r2,#0                 ;300
00003e  d059              BEQ      |L10.244|
000040  68ca              LDR      r2,[r1,#0xc]          ;302
000042  698b              LDR      r3,[r1,#0x18]         ;302
000044  0212              LSLS     r2,r2,#8              ;302
000046  fb92f2f3          SDIV     r2,r2,r3              ;302
00004a  7803              LDRB     r3,[r0,#0]            ;302
00004c  eb0003c3          ADD      r3,r0,r3,LSL #3       ;302
000050  f8c32001          STR      r2,[r3,#1]            ;302
000054  690a              LDR      r2,[r1,#0x10]         ;303
000056  698b              LDR      r3,[r1,#0x18]         ;303
000058  0212              LSLS     r2,r2,#8              ;303
00005a  fb92f2f3          SDIV     r2,r2,r3              ;303
00005e  7803              LDRB     r3,[r0,#0]            ;303
000060  eb0003c3          ADD      r3,r0,r3,LSL #3       ;303
000064  f8c32005          STR      r2,[r3,#5]            ;303
000068  7807              LDRB     r7,[r0,#0]            ;309
00006a  eb0003c7          ADD      r3,r0,r7,LSL #3       ;309
00006e  f8d33001          LDR      r3,[r3,#1]            ;309
000072  17dd              ASRS     r5,r3,#31             ;309
000074  eb036515          ADD      r5,r3,r5,LSR #24      ;309
000078  f02505ff          BIC      r5,r5,#0xff           ;309
00007c  1b5b              SUBS     r3,r3,r5              ;309
00007e  17d5              ASRS     r5,r2,#31             ;310
000080  eb026515          ADD      r5,r2,r5,LSR #24      ;310
000084  f02505ff          BIC      r5,r5,#0xff           ;310
000088  1b52              SUBS     r2,r2,r5              ;310
00008a  b21b              SXTH     r3,r3                 ;309
00008c  b212              SXTH     r2,r2                 ;310
00008e  2b80              CMP      r3,#0x80              ;311
000090  bfc4              ITT      GT                    ;312
000092  f5c37380          RSBGT    r3,r3,#0x100          ;312
000096  b21b              SXTHGT   r3,r3                 ;312
000098  2a80              CMP      r2,#0x80              ;313
00009a  bfc4              ITT      GT                    ;314
00009c  f5c27280          RSBGT    r2,r2,#0x100          ;314
0000a0  b212              SXTHGT   r2,r2                 ;314
0000a2  f9b15008          LDRSH    r5,[r1,#8]            ;316
0000a6  441a              ADD      r2,r2,r3              ;316
0000a8  436a              MULS     r2,r5,r2              ;316
0000aa  eb000347          ADD      r3,r0,r7,LSL #1       ;316
0000ae  eb052262          ADD      r2,r5,r2,ASR #9       ;316
0000b2  f8a32b49          STRH     r2,[r3,#0xb49]        ;316
0000b6  7802              LDRB     r2,[r0,#0]            ;320
0000b8  88cb              LDRH     r3,[r1,#6]            ;320
0000ba  eb000242          ADD      r2,r0,r2,LSL #1       ;320
0000be  f8a230a1          STRH     r3,[r2,#0xa1]         ;320
0000c2  7803              LDRB     r3,[r0,#0]            ;321
0000c4  8a8a              LDRH     r2,[r1,#0x14]         ;321
0000c6  eb000343          ADD      r3,r0,r3,LSL #1       ;321
0000ca  f8a32081          STRH     r2,[r3,#0x81]         ;321
0000ce  7802              LDRB     r2,[r0,#0]            ;322
0000d0  f8d13002          LDR      r3,[r1,#2]            ;322
0000d4  eb000282          ADD      r2,r0,r2,LSL #2       ;322
0000d8  f8c230c1          STR      r3,[r2,#0xc1]         ;322
0000dc  7802              LDRB     r2,[r0,#0]            ;323
0000de  8909              LDRH     r1,[r1,#8]            ;323
0000e0  eb000242          ADD      r2,r0,r2,LSL #1       ;323
0000e4  f8a21101          STRH     r1,[r2,#0x101]        ;323
0000e8  7801              LDRB     r1,[r0,#0]            ;329
0000ea  b2ca              UXTB     r2,r1                 ;329
0000ec  5591              STRB     r1,[r2,r6]            ;329
0000ee  7801              LDRB     r1,[r0,#0]            ;331
0000f0  1c49              ADDS     r1,r1,#1              ;331
0000f2  7001              STRB     r1,[r0,#0]            ;331
                  |L10.244|
0000f4  f1bc0c01          SUBS     r12,r12,#1            ;331
0000f8  d29a              BCS      |L10.48|
0000fa  bcf0              POP      {r4-r7}
0000fc  4770              BX       lr
;;;832    uint8_t PrevFinger = 0;
                          ENDP

0000fe  0000              DCW      0x0000
                  |L10.256|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_drawing_assistance||, CODE, READONLY, ALIGN=2

                  algorithm_coord_drawing_assistance PROC
;;;838    #define TESTMODEDELTAMAX	110
;;;839    void algorithm_coord_drawing_assistance(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;840    {
;;;841    	int l,i,j,pl;
;;;842    //	int r,c,_d;
;;;843    //	uint32_t ulStrength = 0;
;;;844    	tXY_t CoordAry[5], CoordTmp, PrevVector, CurrVector, ProjectionPoint;
;;;845    	uint8_t ColMinLabelIdx=0,  ColMaxLabelIdx=0,  RowMinLabelIdx=0,  RowMaxLabelIdx=0;
000004  f04f0b00          MOV      r11,#0
000008  b09f              SUB      sp,sp,#0x7c           ;840
;;;846    	int ColMin=INT32_MAX, ColMax=0, RowMin=INT32_MAX, RowMax=0, Width=0, Height=0;
00000a  f06f4900          MVN      r9,#0x80000000
00000e  f8cdb00c          STR      r11,[sp,#0xc]         ;845
000012  46da              MOV      r10,r11               ;845
000014  46d8              MOV      r8,r11
000016  464f              MOV      r7,r9
000018  465e              MOV      r6,r11
;;;847    	int idx,JitterSum=0;
;;;848    	uint8_t ModifyFlag = 0;
;;;849    	tRect_t DeltaRect;
;;;850    
;;;851    //	tLabelInfo_t	*temp_label;
;;;852    	tCoordInfo_t 	*temp_coord;
;;;853    
;;;854    	{
;;;855    		temp_coord = &thisInfo->tCoord;
00001a  48fe              LDR      r0,|L11.1044|
00001c  f8cdb014          STR      r11,[sp,#0x14]
000020  6901              LDR      r1,[r0,#0x10]  ; thisInfo
000022  f201345e          ADD      r4,r1,#0x35e
;;;856    //		temp_label = &thisInfo->tLabel;
;;;857    	}
;;;858    	DeltaRect = thisInfo->tDelta.tValidRect;
000026  68ca              LDR      r2,[r1,#0xc]
;;;859    	
;;;860    	if(PrevFinger > 0 && temp_coord->tTempPos.sFinger_ == 0){
000028  9215              STR      r2,[sp,#0x54]
00002a  7800              LDRB     r0,[r0,#0]  ; PrevFinger
;;;861    		if(thisInfo->WinCertMode >= 1)
00002c  f5015580          ADD      r5,r1,#0x1000
000030  b110              CBZ      r0,|L11.56|
000032  7820              LDRB     r0,[r4,#0]            ;860
000034  2800              CMP      r0,#0                 ;860
000036  d06a              BEQ      |L11.270|
                  |L11.56|
;;;862    			thisInfo->WinCertMode = 1;
;;;863    		else
;;;864    			thisInfo->WinCertMode = 0;	//0 : ready, 1 : detecting, -1 : normal touch, 2 : test mode
;;;865    		thisInfo->DrawingDirection = 0;
;;;866    		thisInfo->WinCertTrackingDist = 0;
;;;867    //		thisInfo->TouchNumCnt = 0;
;;;868    		thisInfo->TouchFrmCnt = 0;
;;;869    		TestModeCnt = 0;
;;;870    		PanningTestModeCnt = 0;
;;;871    	}
;;;872    
;;;873    	//detect win cert state
;;;874    	if(temp_coord->tTempPos.sFinger_ > 2 && temp_coord->tTempPos.sFinger_ <= 5 && thisInfo->TouchFrmCnt < TESTMODETIMELIMIT )
000038  7820              LDRB     r0,[r4,#0]
00003a  9012              STR      r0,[sp,#0x48]
00003c  1ec0              SUBS     r0,r0,#3
00003e  2802              CMP      r0,#2
000040  f200813d          BHI.W    |L11.702|
000044  f9b50fb4          LDRSH    r0,[r5,#0xfb4]
000048  2828              CMP      r0,#0x28
00004a  f2808138          BGE.W    |L11.702|
;;;875    	{	
;;;876    		memcpy(CoordAry, temp_coord->tTempPos.tXY, sizeof(CoordAry));
00004e  2228              MOVS     r2,#0x28
000050  1c61              ADDS     r1,r4,#1
000052  a806              ADD      r0,sp,#0x18
000054  f7fffffe          BL       __aeabi_memcpy
000058  9812              LDR      r0,[sp,#0x48]
00005a  1e01              SUBS     r1,r0,#0
00005c  f1a00001          SUB      r0,r0,#1
;;;877    		for(l = temp_coord->tTempPos.sFinger_; l--;)
000060  d01c              BEQ      |L11.156|
;;;878    		{
;;;879    			if(temp_coord->tTempPos.tXY[l].x < ColMin)	ColMin = temp_coord->tTempPos.tXY[l].x, ColMinLabelIdx = l;
000062  bf00              NOP      
                  |L11.100|
000064  eb0402c0          ADD      r2,r4,r0,LSL #3
000068  f8d21001          LDR      r1,[r2,#1]
00006c  4549              CMP      r1,r9
00006e  bfbc              ITT      LT
000070  4689              MOVLT    r9,r1
000072  f0000bff          ANDLT    r11,r0,#0xff
;;;880    			if(temp_coord->tTempPos.tXY[l].x > ColMax)	ColMax = temp_coord->tTempPos.tXY[l].x, ColMaxLabelIdx = l;
000076  4541              CMP      r1,r8
000078  dd02              BLE      |L11.128|
00007a  4688              MOV      r8,r1
00007c  b2c1              UXTB     r1,r0
00007e  9103              STR      r1,[sp,#0xc]
                  |L11.128|
;;;881    			if(temp_coord->tTempPos.tXY[l].y < RowMin)	RowMin = temp_coord->tTempPos.tXY[l].y, RowMinLabelIdx = l;
000080  f8d21005          LDR      r1,[r2,#5]
000084  42b9              CMP      r1,r7
000086  da02              BGE      |L11.142|
000088  b2c2              UXTB     r2,r0
00008a  460f              MOV      r7,r1
00008c  9205              STR      r2,[sp,#0x14]
                  |L11.142|
;;;882    			if(temp_coord->tTempPos.tXY[l].y > RowMax)	RowMax = temp_coord->tTempPos.tXY[l].y, RowMaxLabelIdx = l;
00008e  42b1              CMP      r1,r6
000090  bfc4              ITT      GT
000092  460e              MOVGT    r6,r1
000094  f0000aff          ANDGT    r10,r0,#0xff
000098  1e40              SUBS     r0,r0,#1
00009a  d2e3              BCS      |L11.100|
                  |L11.156|
;;;883    			
;;;884    		}
;;;885    		if(thisInfo->WinCertMode >= 0)
00009c  f9950fa8          LDRSB    r0,[r5,#0xfa8]
0000a0  2800              CMP      r0,#0
0000a2  f2c0810c          BLT.W    |L11.702|
;;;886    		{
;;;887    			Width = abs(temp_coord->tTempPos.tXY[ColMaxLabelIdx].x - temp_coord->tTempPos.tXY[ColMinLabelIdx].x);
0000a6  9803              LDR      r0,[sp,#0xc]
0000a8  eb0401cb          ADD      r1,r4,r11,LSL #3
0000ac  eb0400c0          ADD      r0,r4,r0,LSL #3
0000b0  f8d11001          LDR      r1,[r1,#1]
0000b4  f8d00001          LDR      r0,[r0,#1]
0000b8  1a40              SUBS     r0,r0,r1
0000ba  bf48              IT       MI
0000bc  4240              RSBMI    r0,r0,#0
;;;888    			Height = abs(temp_coord->tTempPos.tXY[RowMaxLabelIdx].y - temp_coord->tTempPos.tXY[RowMinLabelIdx].y);
0000be  9012              STR      r0,[sp,#0x48]
0000c0  eb0400ca          ADD      r0,r4,r10,LSL #3
0000c4  f8d01005          LDR      r1,[r0,#5]
0000c8  9805              LDR      r0,[sp,#0x14]
0000ca  eb0400c0          ADD      r0,r4,r0,LSL #3
0000ce  f8d00005          LDR      r0,[r0,#5]
0000d2  1a08              SUBS     r0,r1,r0
0000d4  bf48              IT       MI
0000d6  4240              RSBMI    r0,r0,#0
;;;889    			
;;;890    			if(Width > Height){
0000d8  9013              STR      r0,[sp,#0x4c]
0000da  9912              LDR      r1,[sp,#0x48]
0000dc  4281              CMP      r1,r0
0000de  dd29              BLE      |L11.308|
;;;891    				CoordTmp = CoordAry[ColMinLabelIdx];
0000e0  ab06              ADD      r3,sp,#0x18
0000e2  eb0300cb          ADD      r0,r3,r11,LSL #3
0000e6  e9dd5c06          LDRD     r5,r12,[sp,#0x18]
0000ea  e9d01200          LDRD     r1,r2,[r0,#0]
0000ee  e9c05c00          STRD     r5,r12,[r0,#0]
0000f2  e9cd1206          STRD     r1,r2,[sp,#0x18]
;;;892    				CoordAry[ColMinLabelIdx] = CoordAry[0];
;;;893    				CoordAry[0] = CoordTmp;
;;;894    				
;;;895    				CoordTmp = CoordAry[ColMaxLabelIdx];
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  eb0302c0          ADD      r2,r3,r0,LSL #3
0000fc  e9d20100          LDRD     r0,r1,[r2,#0]
000100  e9dd3c08          LDRD     r3,r12,[sp,#0x20]
000104  e9c23c00          STRD     r3,r12,[r2,#0]
000108  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;896    				CoordAry[ColMaxLabelIdx] = CoordAry[1];
;;;897    				CoordAry[1] = CoordTmp;
00010c  e028              B        |L11.352|
                  |L11.270|
00010e  f9951fa8          LDRSB    r1,[r5,#0xfa8]        ;861
000112  48c0              LDR      r0,|L11.1044|
000114  2901              CMP      r1,#1                 ;861
000116  bfac              ITE      GE                    ;862
000118  2101              MOVGE    r1,#1                 ;862
00011a  2100              MOVLT    r1,#0                 ;864
00011c  f8851fa8          STRB     r1,[r5,#0xfa8]        ;864
000120  2100              MOVS     r1,#0                 ;865
000122  f8851fa9          STRB     r1,[r5,#0xfa9]        ;865
000126  f8a51fb2          STRH     r1,[r5,#0xfb2]        ;866
00012a  f8a51fb4          STRH     r1,[r5,#0xfb4]        ;868
00012e  6181              STR      r1,[r0,#0x18]         ;870  ; TestModeCnt
000130  6041              STR      r1,[r0,#4]            ;861  ; PanningTestModeCnt
000132  e781              B        |L11.56|
                  |L11.308|
;;;898    				
;;;899    	//			for(idx=1; idx<temp_coord->tTempPos.sFinger_;idx++){
;;;900    	//				if(CoordAry[idx].x == CoordAry[0].x)
;;;901    	//					JitterSum += CoordAry[idx].y - CoordAry[0].y;
;;;902    	//				else
;;;903    	//					JitterSum += abs(Height - (abs(CoordAry[idx].y - CoordAry[0].y) * Width / abs(CoordAry[idx].x - CoordAry[0].x)));
;;;904    	//			}
;;;905    	//			TotalRect = algorithm_merge_rect(temp_coord->tTempPos.rect[ColMinLabelIdx], temp_coord->tTempPos.rect[ColMaxLabelIdx]);
;;;906    			}
;;;907    			else{
;;;908    				CoordTmp = CoordAry[RowMinLabelIdx];
000134  9905              LDR      r1,[sp,#0x14]
000136  a806              ADD      r0,sp,#0x18
000138  eb0002c1          ADD      r2,r0,r1,LSL #3
00013c  e9dd5c06          LDRD     r5,r12,[sp,#0x18]
000140  e9d21300          LDRD     r1,r3,[r2,#0]
000144  e9c25c00          STRD     r5,r12,[r2,#0]
;;;909    				CoordAry[RowMinLabelIdx] = CoordAry[0];
;;;910    				CoordAry[0] = CoordTmp;
;;;911    				
;;;912    				CoordTmp = CoordAry[RowMaxLabelIdx];
000148  e9cd1306          STRD     r1,r3,[sp,#0x18]
00014c  eb0000ca          ADD      r0,r0,r10,LSL #3
000150  e9dd3c08          LDRD     r3,r12,[sp,#0x20]
000154  e9d01200          LDRD     r1,r2,[r0,#0]
000158  e9c03c00          STRD     r3,r12,[r0,#0]
00015c  e9cd1208          STRD     r1,r2,[sp,#0x20]
                  |L11.352|
;;;913    				CoordAry[RowMaxLabelIdx] = CoordAry[1];
;;;914    				CoordAry[1] = CoordTmp;
;;;915    				
;;;916    	//			for(idx=1; idx<temp_coord->tTempPos.sFinger_;idx++){
;;;917    	//				if(CoordAry[idx].y == CoordAry[0].y)
;;;918    	//					JitterSum += abs(CoordAry[idx].x - CoordAry[0].x);
;;;919    	//				else
;;;920    	//					JitterSum += abs(Width - (abs(CoordAry[idx].x - CoordAry[0].x) * Height / abs(CoordAry[idx].y - CoordAry[0].y)));
;;;921    	//			}
;;;922    	//			TotalRect = algorithm_merge_rect(temp_coord->tTempPos.rect[RowMinLabelIdx], temp_coord->tTempPos.rect[RowMaxLabelIdx]);
;;;923    			}
;;;924    			JitterSum = 0;
;;;925    			PrevVector.x = CoordAry[1].x - CoordAry[0].x;
000160  9906              LDR      r1,[sp,#0x18]
000162  9808              LDR      r0,[sp,#0x20]
;;;926    			PrevVector.y = CoordAry[1].y - CoordAry[0].y;
;;;927    			for(idx = 2 ; idx < temp_coord->tTempPos.sFinger_; idx++)
000164  2502              MOVS     r5,#2
000166  1a46              SUBS     r6,r0,r1              ;925
000168  9907              LDR      r1,[sp,#0x1c]         ;926
00016a  9809              LDR      r0,[sp,#0x24]         ;926
00016c  f04f0800          MOV      r8,#0                 ;924
000170  1a47              SUBS     r7,r0,r1              ;926
000172  7820              LDRB     r0,[r4,#0]
000174  2802              CMP      r0,#2
000176  dd3f              BLE      |L11.504|
;;;928    			{
;;;929    				CurrVector.x = CoordAry[idx].x - CoordAry[0].x;
;;;930    				CurrVector.y = CoordAry[idx].y - CoordAry[0].y;
;;;931    				
;;;932    				ProjectionPoint.x = CoordAry[0].x + (int)(PrevVector.x * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
000178  fb06f006          MUL      r0,r6,r6
00017c  fb070007          MLA      r0,r7,r7,r0
000180  9011              STR      r0,[sp,#0x44]
000182  17c0              ASRS     r0,r0,#31
000184  9014              STR      r0,[sp,#0x50]
                  |L11.390|
000186  a806              ADD      r0,sp,#0x18           ;929
000188  9906              LDR      r1,[sp,#0x18]         ;929
00018a  f850a035          LDR      r10,[r0,r5,LSL #3]    ;929
00018e  eb0000c5          ADD      r0,r0,r5,LSL #3       ;930
000192  ebaa0101          SUB      r1,r10,r1             ;929
000196  f8d09004          LDR      r9,[r0,#4]            ;930
00019a  9807              LDR      r0,[sp,#0x1c]         ;930
00019c  eba90200          SUB      r2,r9,r0              ;930
0001a0  9811              LDR      r0,[sp,#0x44]         ;930
0001a2  9017              STR      r0,[sp,#0x5c]         ;930
0001a4  9814              LDR      r0,[sp,#0x50]         ;930
0001a6  9005              STR      r0,[sp,#0x14]
0001a8  fb06f001          MUL      r0,r6,r1
0001ac  fb070002          MLA      r0,r7,r2,r0
0001b0  9019              STR      r0,[sp,#0x64]
0001b2  fb860100          SMULL    r0,r1,r6,r0
0001b6  9b14              LDR      r3,[sp,#0x50]
0001b8  9a11              LDR      r2,[sp,#0x44]
0001ba  f7fffffe          BL       __aeabi_ldivmod
0001be  9906              LDR      r1,[sp,#0x18]
;;;933    				ProjectionPoint.y = CoordAry[0].y + (int)(PrevVector.y * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
0001c0  9b05              LDR      r3,[sp,#0x14]
0001c2  eb000b01          ADD      r11,r0,r1             ;932
0001c6  9819              LDR      r0,[sp,#0x64]
0001c8  9a17              LDR      r2,[sp,#0x5c]
0001ca  fb870100          SMULL    r0,r1,r7,r0
0001ce  f7fffffe          BL       __aeabi_ldivmod
0001d2  9907              LDR      r1,[sp,#0x1c]
0001d4  4408              ADD      r0,r0,r1
0001d6  ebab010a          SUB      r1,r11,r10
0001da  4349              MULS     r1,r1,r1
0001dc  eba00009          SUB      r0,r0,r9
0001e0  fb001000          MLA      r0,r0,r0,r1
0001e4  f7fffffe          BL       algorithm_calc_sqrt
;;;934    
;;;935    				JitterSum += algorithm_coord_calc_distance(ProjectionPoint, CoordAry[idx]);
0001e8  4480              ADD      r8,r8,r0
0001ea  7820              LDRB     r0,[r4,#0]
0001ec  1c6d              ADDS     r5,r5,#1
0001ee  4285              CMP      r5,r0
0001f0  dbc9              BLT      |L11.390|
;;;936    			}
;;;937    
;;;938    			if(JitterSum < 200)
0001f2  f1b80fc8          CMP      r8,#0xc8
0001f6  da37              BGE      |L11.616|
                  |L11.504|
;;;939    			{
;;;940    				if(thisInfo->DrawingDirection == 0)
0001f8  4886              LDR      r0,|L11.1044|
0001fa  6900              LDR      r0,[r0,#0x10]  ; thisInfo
0001fc  f5005080          ADD      r0,r0,#0x1000
000200  f8901fa9          LDRB     r1,[r0,#0xfa9]
000204  b921              CBNZ     r1,|L11.528|
;;;941    				{
;;;942    					thisInfo->DrawingVector.x = 0;
000206  2100              MOVS     r1,#0
000208  f8c01faa          STR      r1,[r0,#0xfaa]
;;;943    					thisInfo->DrawingVector.y = 0;
00020c  f8c01fae          STR      r1,[r0,#0xfae]
                  |L11.528|
000210  e9dd1212          LDRD     r1,r2,[sp,#0x48]
;;;944    				}
;;;945    				if(Width > (Height<<4))				//Horizontal
000214  ebb11f02          CMP      r1,r2,LSL #4
;;;946    					thisInfo->DrawingDirection = 1;
000218  bfc4              ITT      GT
00021a  2101              MOVGT    r1,#1
00021c  f8801fa9          STRBGT   r1,[r0,#0xfa9]
000220  dc08              BGT      |L11.564|
;;;947    				else if(Height > (Width<<4))		//Vertical
000222  4611              MOV      r1,r2
000224  9a12              LDR      r2,[sp,#0x48]
000226  ebb11f02          CMP      r1,r2,LSL #4
;;;948    					thisInfo->DrawingDirection = 2;
00022a  bfcc              ITE      GT
00022c  2102              MOVGT    r1,#2
;;;949    				else
;;;950    					thisInfo->DrawingDirection = 3;		//Diagonal
00022e  2103              MOVLE    r1,#3
000230  f8801fa9          STRB     r1,[r0,#0xfa9]        ;948
                  |L11.564|
;;;951    				
;;;952    				if(thisInfo->WinCertMode == 0)
000234  f8901fa8          LDRB     r1,[r0,#0xfa8]
000238  2900              CMP      r1,#0
;;;953    					thisInfo->WinCertMode = 1;
00023a  bf04              ITT      EQ
00023c  2101              MOVEQ    r1,#1
00023e  f8801fa8          STRBEQ   r1,[r0,#0xfa8]
;;;954    				
;;;955    				if(thisInfo->TouchFrmCnt < TESTMODETIMELIMIT)
000242  f9b01fb4          LDRSH    r1,[r0,#0xfb4]
000246  2928              CMP      r1,#0x28
000248  bfbc              ITT      LT
00024a  1c49              ADDLT    r1,r1,#1
;;;956    					thisInfo->TouchFrmCnt++;
00024c  f8a01fb4          STRHLT   r1,[r0,#0xfb4]
;;;957    				
;;;958    				if(thisInfo->TouchFrmCnt == TESTMODETIMELIMIT && thisInfo->WinCertMode < 2)
000250  f8b01fb4          LDRH     r1,[r0,#0xfb4]
000254  2928              CMP      r1,#0x28
000256  d11c              BNE      |L11.658|
000258  f9901fa8          LDRSB    r1,[r0,#0xfa8]
00025c  2902              CMP      r1,#2
;;;959    					thisInfo->WinCertMode  = 2;
00025e  bfbc              ITT      LT
000260  2102              MOVLT    r1,#2
000262  f8801fa8          STRBLT   r1,[r0,#0xfa8]
000266  e014              B        |L11.658|
                  |L11.616|
;;;960    			}
;;;961    			else{
;;;962    				if(JitterSum > 400)
000268  f5b87fc8          CMP      r8,#0x190
00026c  dd08              BLE      |L11.640|
;;;963    					thisInfo->TouchFrmCnt = -1;
00026e  4869              LDR      r0,|L11.1044|
000270  f04f31ff          MOV      r1,#0xffffffff
000274  6900              LDR      r0,[r0,#0x10]  ; thisInfo
000276  f5005080          ADD      r0,r0,#0x1000
00027a  f8a01fb4          STRH     r1,[r0,#0xfb4]
00027e  e008              B        |L11.658|
                  |L11.640|
;;;964    				else
;;;965    					thisInfo->TouchFrmCnt--;
000280  4864              LDR      r0,|L11.1044|
000282  6900              LDR      r0,[r0,#0x10]  ; thisInfo
000284  f5005180          ADD      r1,r0,#0x1000
000288  f8b10fb4          LDRH     r0,[r1,#0xfb4]
00028c  1e40              SUBS     r0,r0,#1
00028e  f8a10fb4          STRH     r0,[r1,#0xfb4]
                  |L11.658|
;;;966    			}
;;;967    
;;;968    			if(thisInfo->DrawingDirection == 2 && (Width > 90 || DeltaRect.ce - DeltaRect.cs > 1)){
000292  4860              LDR      r0,|L11.1044|
000294  6900              LDR      r0,[r0,#0x10]  ; thisInfo
000296  f5005080          ADD      r0,r0,#0x1000
00029a  f8901fa9          LDRB     r1,[r0,#0xfa9]
00029e  2902              CMP      r1,#2
0002a0  d10d              BNE      |L11.702|
0002a2  9912              LDR      r1,[sp,#0x48]
0002a4  295a              CMP      r1,#0x5a
0002a6  dc06              BGT      |L11.694|
0002a8  9915              LDR      r1,[sp,#0x54]
0002aa  160a              ASRS     r2,r1,#24
0002ac  f3414107          SBFX     r1,r1,#16,#8
0002b0  1a51              SUBS     r1,r2,r1
0002b2  2901              CMP      r1,#1
0002b4  dd03              BLE      |L11.702|
                  |L11.694|
;;;969    				thisInfo->TouchFrmCnt = -1;
0002b6  f04f31ff          MOV      r1,#0xffffffff
0002ba  f8a01fb4          STRH     r1,[r0,#0xfb4]
                  |L11.702|
;;;970    			}
;;;971    		}
;;;972    	}
;;;973    	if(temp_coord->tTempPos.sFinger_ > 5 && thisInfo->TouchFrmCnt < TESTMODETIMELIMIT )
0002be  7820              LDRB     r0,[r4,#0]
0002c0  2805              CMP      r0,#5
0002c2  d90a              BLS      |L11.730|
0002c4  4853              LDR      r0,|L11.1044|
0002c6  6900              LDR      r0,[r0,#0x10]  ; thisInfo
0002c8  f5005180          ADD      r1,r0,#0x1000
0002cc  f9b10fb4          LDRSH    r0,[r1,#0xfb4]
0002d0  2828              CMP      r0,#0x28
0002d2  bfbc              ITT      LT
0002d4  1e40              SUBLT    r0,r0,#1
;;;974    	{
;;;975    		thisInfo->TouchFrmCnt--;
0002d6  f8a10fb4          STRHLT   r0,[r1,#0xfb4]
                  |L11.730|
;;;976    	}
;;;977    	if(thisInfo->TouchFrmCnt < 0){
0002da  4d4e              LDR      r5,|L11.1044|
;;;978    		thisInfo->TouchFrmCnt = TESTMODETIMELIMIT;
;;;979    		thisInfo->DrawingDirection = 0;
;;;980    		thisInfo->WinCertMode = -1;
;;;981    	}
;;;982    	
;;;983    #if 1	
;;;984    	if(thisInfo->DrawingDirection == 2 && temp_coord->tTempPos.sFinger_ != 5)
;;;985    	{
;;;986    		tXY_t Center;
;;;987    		
;;;988    		int Dist = 0, MaxDist = 0, MinDist = 0, BetDist = 480;
;;;989    		int8_t ThumbIdx = 0,TempIdx = 0;
;;;990    		uint16_t BitFlag = 0;
;;;991    		
;;;992    		if(DeltaRect.re - DeltaRect.rs + 1 >= 9 && DeltaRect.re - DeltaRect.rs + 1 <= WINCERTMAXDISTANCE &&temp_coord->tTempPos.sFinger_>2)
;;;993    		{
;;;994    			
;;;995    			Center.y = 0;
;;;996    			for(i=0;i<temp_coord->tTempPos.sFinger_;i++){
;;;997    				if(Center.y < temp_coord->tTempPos.tXY[i].y){
;;;998    					Center.y = temp_coord->tTempPos.tXY[i].y;
;;;999    					ThumbIdx = i;
;;;1000   				}
;;;1001   			}
;;;1002   
;;;1003   			Center.x = 0, Center.y = 0;
;;;1004   			for(i=0;i<temp_coord->tTempPos.sFinger_;i++){
;;;1005   				if(i != ThumbIdx){
;;;1006   					Center.x += temp_coord->tTempPos.tXY[i].x;
;;;1007   					Center.y += temp_coord->tTempPos.tXY[i].y;
;;;1008   				}
;;;1009   			}
;;;1010   			Center.x /= (temp_coord->tTempPos.sFinger_-1);
;;;1011   			Center.y /= (temp_coord->tTempPos.sFinger_-1);
;;;1012   
;;;1013   			if(PrevFinger == 5)
;;;1014   			{
;;;1015   //				if(temp_coord->tTempPos.sFinger_ != 5)
;;;1016   				{
;;;1017   					//Delete other coordinate
;;;1018   					for(i=1;i<POSBUF_;i++){
;;;1019   						temp_coord->tTempPos.vusR[i]   = 0;
;;;1020   						temp_coord->tTempPos.vusS[i]   = 0;
;;;1021   					}
;;;1022   					//Virtual Coordinate
;;;1023   					temp_coord->tTempPos.sFinger_ = 0;
;;;1024   					for(i=0;i<POSBUF_;i++)
;;;1025   					{
;;;1026   						if(temp_coord->tOrgPastPos[0].vusR[i] > 0)
;;;1027   						{
;;;1028   							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[i];
;;;1029   							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_].x = Center.x;
;;;1030   							temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusR[i];
;;;1031   							temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusS[i];
;;;1032   							temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;1033   							temp_coord->tTempPos.sFinger_++;
;;;1034   						}
;;;1035   					}
;;;1036   				}
;;;1037   			}
;;;1038   			else
;;;1039   			{
;;;1040   				if(thisInfo->TouchFrmCnt < TESTMODETIMELIMIT)
;;;1041   				{
;;;1042   					for(i=0;i<POSBUF_;i++){
;;;1043   						temp_coord->tTempPos.vusR[i]   = 0;
;;;1044   						temp_coord->tTempPos.vusS[i]   = 0;
;;;1045   					}
;;;1046   					temp_coord->tTempPos.sFinger_ = 0;
;;;1047   					for(pl=0;pl<POSBUF_;pl++)
;;;1048   					{
;;;1049   						if(temp_coord->tOrgPastPos[0].vusS[pl] > 0)
;;;1050   						{
;;;1051   							temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[pl];
;;;1052   							temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusR[pl];
;;;1053   							temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusS[pl];
;;;1054   							temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;1055   							temp_coord->tTempPos.sFinger_++;				
;;;1056   						}
;;;1057   					}
;;;1058   				}
;;;1059   				else{
;;;1060   					//Thumb coordinate
;;;1061   					temp_coord->tTempPos.tXY[0] = temp_coord->tTempPos.tXY[ThumbIdx];
;;;1062   					temp_coord->tTempPos.vusR[0] = temp_coord->tTempPos.vusR[ThumbIdx];
;;;1063   					temp_coord->tTempPos.vusS[0] = temp_coord->tTempPos.vusS[ThumbIdx];
;;;1064   					temp_coord->cRemap[0] = 0;
;;;1065   					
;;;1066   					//Delete other coordinate
;;;1067   					for(i=1;i<POSBUF_;i++){
;;;1068   						temp_coord->tTempPos.vusR[i]   = 0;
;;;1069   						temp_coord->tTempPos.vusS[i]   = 0;
;;;1070   					}
;;;1071   					
;;;1072   					//Virtual Coordinate
;;;1073   					for(i=1;i<5;i++)
;;;1074   					{
;;;1075   						temp_coord->tTempPos.tXY[i].x = Center.x;
;;;1076   	//					temp_coord->tTempPos.tXY[i].y = Center.y - (BetDist + (BetDist>>1)) + (BetDist*(i-1));
;;;1077   						temp_coord->tTempPos.vusR[i] = temp_coord->tTempPos.vusR[0];
;;;1078   						temp_coord->tTempPos.vusS[i] = temp_coord->tTempPos.vusS[0];
;;;1079   						temp_coord->cRemap[i] = i;
0002dc  2704              MOVS     r7,#4
0002de  6928              LDR      r0,[r5,#0x10]         ;977  ; thisInfo
0002e0  f5005680          ADD      r6,r0,#0x1000         ;977
0002e4  f9b6afb4          LDRSH    r10,[r6,#0xfb4]       ;977
0002e8  f1ba0f00          CMP      r10,#0                ;977
0002ec  da0a              BGE      |L11.772|
0002ee  2028              MOVS     r0,#0x28              ;978
0002f0  f8a60fb4          STRH     r0,[r6,#0xfb4]        ;978
0002f4  2000              MOVS     r0,#0                 ;979
0002f6  f8860fa9          STRB     r0,[r6,#0xfa9]        ;979
0002fa  20ff              MOVS     r0,#0xff              ;980
0002fc  f8860fa8          STRB     r0,[r6,#0xfa8]        ;980
000300  f000b9e3          B.W      |L11.1738|
                  |L11.772|
000304  f8960fa9          LDRB     r0,[r6,#0xfa9]        ;984
000308  2802              CMP      r0,#2                 ;984
00030a  d004              BEQ      |L11.790|
;;;1080   					}
;;;1081   					temp_coord->tTempPos.tXY[1].y = temp_coord->tTempPos.tXY[0].y - 936;
;;;1082   					temp_coord->tTempPos.tXY[2].y = temp_coord->tTempPos.tXY[0].y - 1447;
;;;1083   					temp_coord->tTempPos.tXY[3].y = temp_coord->tTempPos.tXY[0].y - 1958;
;;;1084   					temp_coord->tTempPos.tXY[4].y = temp_coord->tTempPos.tXY[0].y - 2469;
;;;1085   					temp_coord->tTempPos.sFinger_ = 5;
;;;1086   					
;;;1087   					thisInfo->WinCertMode = 3;
;;;1088   				}
;;;1089   			}
;;;1090   		}
;;;1091   		else{
;;;1092   			for(i=0;i<POSBUF_;i++){
;;;1093   				temp_coord->tTempPos.vusR[i]   = 0;
;;;1094   				temp_coord->tTempPos.vusS[i]   = 0;
;;;1095   			}
;;;1096   			temp_coord->tTempPos.sFinger_ = 0;
;;;1097   			for(pl=0;pl<POSBUF_;pl++)
;;;1098   			{
;;;1099   				if(temp_coord->tOrgPastPos[0].vusS[pl] > 0)
;;;1100   				{
;;;1101   					temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[pl];
;;;1102   					temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusR[pl];
;;;1103   					temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusS[pl];
;;;1104   					temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
;;;1105   					temp_coord->tTempPos.sFinger_++;				
;;;1106   				}
;;;1107   			}
;;;1108   		}
;;;1109   	}	
;;;1110   	else if(thisInfo->DrawingDirection == 3)
00030c  2803              CMP      r0,#3
00030e  f0008184          BEQ.W    |L11.1562|
000312  f000b9da          B.W      |L11.1738|
                  |L11.790|
000316  f894c000          LDRB     r12,[r4,#0]           ;984
00031a  f1bc0f05          CMP      r12,#5                ;984
00031e  f00081d4          BEQ.W    |L11.1738|
000322  9815              LDR      r0,[sp,#0x54]         ;992
000324  f04f0900          MOV      r9,#0                 ;989
000328  f3402107          SBFX     r1,r0,#8,#8           ;992
00032c  b240              SXTB     r0,r0                 ;992
00032e  1a08              SUBS     r0,r1,r0              ;992
000330  3808              SUBS     r0,r0,#8              ;992
000332  2804              CMP      r0,#4                 ;992
000334  f2008131          BHI.W    |L11.1434|
000338  f1bc0f02          CMP      r12,#2                ;992
00033c  f240812d          BLS.W    |L11.1434|
000340  2100              MOVS     r1,#0                 ;995
000342  4608              MOV      r0,r1                 ;995
000344  460a              MOV      r2,r1                 ;996
000346  f1bc0f00          CMP      r12,#0                ;996
00034a  dd0b              BLE      |L11.868|
                  |L11.844|
00034c  eb0403c2          ADD      r3,r4,r2,LSL #3       ;997
000350  f8d33005          LDR      r3,[r3,#5]            ;997
000354  4298              CMP      r0,r3                 ;997
000356  bfbc              ITT      LT                    ;997
000358  4618              MOVLT    r0,r3                 ;997
00035a  fa4ff982          SXTBLT   r9,r2                 ;999
00035e  1c52              ADDS     r2,r2,#1              ;999
000360  4594              CMP      r12,r2                ;999
000362  dcf3              BGT      |L11.844|
                  |L11.868|
000364  460a              MOV      r2,r1                 ;1003
000366  460b              MOV      r3,r1                 ;1003
000368  f04f0800          MOV      r8,#0                 ;1004
00036c  f1bc0f00          CMP      r12,#0                ;1004
000370  dd0d              BLE      |L11.910|
                  |L11.882|
000372  45c8              CMP      r8,r9                 ;1005
000374  d007              BEQ      |L11.902|
000376  eb0400c8          ADD      r0,r4,r8,LSL #3       ;1006
00037a  f8d0b001          LDR      r11,[r0,#1]           ;1006
00037e  f8d00005          LDR      r0,[r0,#5]            ;1007
000382  445a              ADD      r2,r2,r11             ;1006
000384  4403              ADD      r3,r3,r0              ;1007
                  |L11.902|
000386  f1080801          ADD      r8,r8,#1              ;1007
00038a  45c4              CMP      r12,r8                ;1007
00038c  dcf1              BGT      |L11.882|
                  |L11.910|
00038e  f1ac0c01          SUB      r12,r12,#1            ;1007
000392  fb92f0fc          SDIV     r0,r2,r12             ;1010
000396  fb93f2fc          SDIV     r2,r3,r12             ;1011
00039a  782a              LDRB     r2,[r5,#0]            ;1013  ; PrevFinger
00039c  2a05              CMP      r2,#5                 ;1013
00039e  d045              BEQ      |L11.1068|
0003a0  f1ba0f28          CMP      r10,#0x28             ;1040
0003a4  bfb8              IT       LT                    ;1042
0003a6  2200              MOVLT    r2,#0                 ;1042
0003a8  da7e              BGE      |L11.1192|
0003aa  bf00              NOP                            ;1043
                  |L11.940|
0003ac  eb040042          ADD      r0,r4,r2,LSL #1       ;1043
0003b0  1c92              ADDS     r2,r2,#2              ;1044
0003b2  f8a010a1          STRH     r1,[r0,#0xa1]         ;1043
0003b6  f8a01081          STRH     r1,[r0,#0x81]         ;1044
0003ba  f8a010a3          STRH     r1,[r0,#0xa3]         ;1043
0003be  f8a01083          STRH     r1,[r0,#0x83]         ;1044
0003c2  2a0a              CMP      r2,#0xa               ;1044
0003c4  dbf2              BLT      |L11.940|
0003c6  7021              STRB     r1,[r4,#0]            ;1046
0003c8  2000              MOVS     r0,#0                 ;1047
0003ca  f604226f          ADD      r2,r4,#0xa6f          ;1032
0003ce  bf00              NOP                            ;1049
                  |L11.976|
0003d0  eb040140          ADD      r1,r4,r0,LSL #1       ;1049
0003d4  f8b136cc          LDRH     r3,[r1,#0x6cc]        ;1049
0003d8  b31b              CBZ      r3,|L11.1058|
0003da  7823              LDRB     r3,[r4,#0]            ;1051
0003dc  eb040cc0          ADD      r12,r4,r0,LSL #3      ;1051
0003e0  eb0403c3          ADD      r3,r4,r3,LSL #3       ;1051
0003e4  f8dc867c          LDR      r8,[r12,#0x67c]       ;1051
0003e8  f8c38001          STR      r8,[r3,#1]            ;1051
0003ec  f8dcc680          LDR      r12,[r12,#0x680]      ;1051
0003f0  f8c3c005          STR      r12,[r3,#5]           ;1051
0003f4  7823              LDRB     r3,[r4,#0]            ;1052
0003f6  f8b1c6e0          LDRH     r12,[r1,#0x6e0]       ;1052
0003fa  eb040343          ADD      r3,r4,r3,LSL #1       ;1052
0003fe  f8a3c0a1          STRH     r12,[r3,#0xa1]        ;1052
000402  f8b136cc          LDRH     r3,[r1,#0x6cc]        ;1053
000406  7821              LDRB     r1,[r4,#0]            ;1053
000408  eb040141          ADD      r1,r4,r1,LSL #1       ;1053
00040c  f8a13081          STRH     r3,[r1,#0x81]         ;1053
000410  7821              LDRB     r1,[r4,#0]            ;1054
000412  e001              B        |L11.1048|
                  |L11.1044|
                          DCD      ||.data||
                  |L11.1048|
000418  b2cb              UXTB     r3,r1                 ;1054
00041a  5499              STRB     r1,[r3,r2]            ;1054
00041c  7821              LDRB     r1,[r4,#0]            ;1055
00041e  1c49              ADDS     r1,r1,#1              ;1055
000420  7021              STRB     r1,[r4,#0]            ;1055
                  |L11.1058|
000422  1c40              ADDS     r0,r0,#1              ;1055
000424  280a              CMP      r0,#0xa               ;1055
000426  dbd3              BLT      |L11.976|
000428  f000b944          B.W      |L11.1716|
                  |L11.1068|
00042c  f8a410a3          STRH     r1,[r4,#0xa3]         ;1019
000430  f8a41083          STRH     r1,[r4,#0x83]         ;1020
000434  f05f0202          MOVS.W   r2,#2                 ;1018
                  |L11.1080|
000438  eb040342          ADD      r3,r4,r2,LSL #1       ;1019
00043c  1c92              ADDS     r2,r2,#2              ;1020
00043e  f8a310a1          STRH     r1,[r3,#0xa1]         ;1019
000442  f8a31081          STRH     r1,[r3,#0x81]         ;1020
000446  f8a310a3          STRH     r1,[r3,#0xa3]         ;1019
00044a  f8a31083          STRH     r1,[r3,#0x83]         ;1020
00044e  2a0a              CMP      r2,#0xa               ;1020
000450  dbf2              BLT      |L11.1080|
000452  7021              STRB     r1,[r4,#0]            ;1023
000454  2100              MOVS     r1,#0                 ;1024
000456  f604236f          ADD      r3,r4,#0xa6f          ;1032
00045a  bf00              NOP                            ;1026
                  |L11.1116|
00045c  eb040241          ADD      r2,r4,r1,LSL #1       ;1026
000460  f8b2c6e0          LDRH     r12,[r2,#0x6e0]       ;1026
000464  f1bc0f00          CMP      r12,#0                ;1026
000468  d02d              BEQ      |L11.1222|
00046a  f894c000          LDRB     r12,[r4,#0]           ;1028
00046e  eb0408c1          ADD      r8,r4,r1,LSL #3       ;1028
000472  eb040ccc          ADD      r12,r4,r12,LSL #3     ;1028
000476  f8d8967c          LDR      r9,[r8,#0x67c]        ;1028
00047a  f8cc9001          STR      r9,[r12,#1]           ;1028
00047e  f8d88680          LDR      r8,[r8,#0x680]        ;1028
000482  f8cc8005          STR      r8,[r12,#5]           ;1028
000486  f894c000          LDRB     r12,[r4,#0]           ;1029
00048a  eb040ccc          ADD      r12,r4,r12,LSL #3     ;1029
00048e  f8cc0001          STR      r0,[r12,#1]           ;1029
000492  f8948000          LDRB     r8,[r4,#0]            ;1030
000496  f8b2c6e0          LDRH     r12,[r2,#0x6e0]       ;1030
00049a  eb040848          ADD      r8,r4,r8,LSL #1       ;1030
00049e  f8a8c0a1          STRH     r12,[r8,#0xa1]        ;1030
0004a2  f8b226cc          LDRH     r2,[r2,#0x6cc]        ;1031
0004a6  e000              B        |L11.1194|
                  |L11.1192|
0004a8  e011              B        |L11.1230|
                  |L11.1194|
0004aa  f894c000          LDRB     r12,[r4,#0]           ;1031
0004ae  eb040c4c          ADD      r12,r4,r12,LSL #1     ;1031
0004b2  f8ac2081          STRH     r2,[r12,#0x81]        ;1031
0004b6  7822              LDRB     r2,[r4,#0]            ;1032
0004b8  f0020cff          AND      r12,r2,#0xff          ;1032
0004bc  f80c2003          STRB     r2,[r12,r3]           ;1032
0004c0  7822              LDRB     r2,[r4,#0]            ;1033
0004c2  1c52              ADDS     r2,r2,#1              ;1033
0004c4  7022              STRB     r2,[r4,#0]            ;1033
                  |L11.1222|
0004c6  1c49              ADDS     r1,r1,#1              ;1033
0004c8  290a              CMP      r1,#0xa               ;1033
0004ca  dbc7              BLT      |L11.1116|
0004cc  e0f2              B        |L11.1716|
                  |L11.1230|
0004ce  eb0402c9          ADD      r2,r4,r9,LSL #3       ;1061
0004d2  f8d23001          LDR      r3,[r2,#1]            ;1061
0004d6  f8c43001          STR      r3,[r4,#1]            ;1061
0004da  f8d22005          LDR      r2,[r2,#5]            ;1061
0004de  f8c42005          STR      r2,[r4,#5]            ;1061
0004e2  eb040249          ADD      r2,r4,r9,LSL #1       ;1062
0004e6  f8b230a1          LDRH     r3,[r2,#0xa1]         ;1062
0004ea  f8a430a1          STRH     r3,[r4,#0xa1]         ;1062
0004ee  f8b22081          LDRH     r2,[r2,#0x81]         ;1063
0004f2  f8a42081          STRH     r2,[r4,#0x81]         ;1063
0004f6  f8841a6f          STRB     r1,[r4,#0xa6f]        ;1064
0004fa  f8a410a3          STRH     r1,[r4,#0xa3]         ;1068
0004fe  f8a41083          STRH     r1,[r4,#0x83]         ;1069
000502  2202              MOVS     r2,#2                 ;1067
                  |L11.1284|
000504  eb040342          ADD      r3,r4,r2,LSL #1       ;1068
000508  1c92              ADDS     r2,r2,#2              ;1069
00050a  f8a310a1          STRH     r1,[r3,#0xa1]         ;1068
00050e  f8a31081          STRH     r1,[r3,#0x81]         ;1069
000512  f8a310a3          STRH     r1,[r3,#0xa3]         ;1068
000516  f8a31083          STRH     r1,[r3,#0x83]         ;1069
00051a  2a0a              CMP      r2,#0xa               ;1069
00051c  dbf2              BLT      |L11.1284|
00051e  f8c40009          STR      r0,[r4,#9]            ;1075
000522  f8b420a1          LDRH     r2,[r4,#0xa1]         ;1077
000526  f8a420a3          STRH     r2,[r4,#0xa3]         ;1077
00052a  f8b41081          LDRH     r1,[r4,#0x81]         ;1078
00052e  f8a41083          STRH     r1,[r4,#0x83]         ;1078
000532  2301              MOVS     r3,#1                 ;1079
000534  f8843a70          STRB     r3,[r4,#0xa70]        ;1079
000538  f8c40011          STR      r0,[r4,#0x11]         ;1075
00053c  f8a420a5          STRH     r2,[r4,#0xa5]         ;1077
000540  f8a41085          STRH     r1,[r4,#0x85]         ;1078
000544  2302              MOVS     r3,#2                 ;1079
000546  f8843a71          STRB     r3,[r4,#0xa71]        ;1079
00054a  f8c40019          STR      r0,[r4,#0x19]         ;1075
00054e  f8a420a7          STRH     r2,[r4,#0xa7]         ;1077
000552  f8a41087          STRH     r1,[r4,#0x87]         ;1078
000556  2303              MOVS     r3,#3                 ;1079
000558  f8843a72          STRB     r3,[r4,#0xa72]        ;1079
00055c  f8c40021          STR      r0,[r4,#0x21]         ;1075
000560  f8a420a9          STRH     r2,[r4,#0xa9]         ;1077
000564  f8a41089          STRH     r1,[r4,#0x89]         ;1078
000568  f8847a73          STRB     r7,[r4,#0xa73]        ;1079
00056c  f8d40005          LDR      r0,[r4,#5]            ;1081
000570  f5a0716a          SUB      r1,r0,#0x3a8          ;1081
000574  f8c4100d          STR      r1,[r4,#0xd]          ;1081
000578  f2a051a7          SUB      r1,r0,#0x5a7          ;1082
00057c  f8c41015          STR      r1,[r4,#0x15]         ;1082
000580  f2a071a6          SUB      r1,r0,#0x7a6          ;1083
000584  f8c4101d          STR      r1,[r4,#0x1d]         ;1083
000588  f6a010a5          SUB      r0,r0,#0x9a5          ;1083
00058c  f8c40025          STR      r0,[r4,#0x25]         ;1084
000590  2005              MOVS     r0,#5                 ;1085
000592  7020              STRB     r0,[r4,#0]            ;1085
000594  f8863fa8          STRB     r3,[r6,#0xfa8]        ;1087
000598  e08c              B        |L11.1716|
                  |L11.1434|
00059a  2100              MOVS     r1,#0                 ;1092
00059c  ea4f0001          MOV.W    r0,r1                 ;1092
                  |L11.1440|
0005a0  eb040241          ADD      r2,r4,r1,LSL #1       ;1093
0005a4  1c89              ADDS     r1,r1,#2              ;1094
0005a6  f8a200a1          STRH     r0,[r2,#0xa1]         ;1093
0005aa  f8a20081          STRH     r0,[r2,#0x81]         ;1094
0005ae  f8a200a3          STRH     r0,[r2,#0xa3]         ;1093
0005b2  f8a20083          STRH     r0,[r2,#0x83]         ;1094
0005b6  290a              CMP      r1,#0xa               ;1094
0005b8  dbf2              BLT      |L11.1440|
0005ba  7020              STRB     r0,[r4,#0]            ;1096
0005bc  2000              MOVS     r0,#0                 ;1097
0005be  f604226f          ADD      r2,r4,#0xa6f          ;1032
0005c2  bf00              NOP                            ;1099
                  |L11.1476|
0005c4  eb040140          ADD      r1,r4,r0,LSL #1       ;1099
0005c8  f8b136cc          LDRH     r3,[r1,#0x6cc]        ;1099
0005cc  b30b              CBZ      r3,|L11.1554|
0005ce  7823              LDRB     r3,[r4,#0]            ;1101
0005d0  eb040cc0          ADD      r12,r4,r0,LSL #3      ;1101
0005d4  eb0403c3          ADD      r3,r4,r3,LSL #3       ;1101
0005d8  f8dc867c          LDR      r8,[r12,#0x67c]       ;1101
0005dc  f8c38001          STR      r8,[r3,#1]            ;1101
0005e0  f8dcc680          LDR      r12,[r12,#0x680]      ;1101
0005e4  f8c3c005          STR      r12,[r3,#5]           ;1101
0005e8  f894c000          LDRB     r12,[r4,#0]           ;1102
0005ec  f8b136e0          LDRH     r3,[r1,#0x6e0]        ;1102
0005f0  eb040c4c          ADD      r12,r4,r12,LSL #1     ;1102
0005f4  f8ac30a1          STRH     r3,[r12,#0xa1]        ;1102
0005f8  7823              LDRB     r3,[r4,#0]            ;1103
0005fa  f8b116cc          LDRH     r1,[r1,#0x6cc]        ;1103
0005fe  eb040343          ADD      r3,r4,r3,LSL #1       ;1103
000602  f8a31081          STRH     r1,[r3,#0x81]         ;1103
000606  7821              LDRB     r1,[r4,#0]            ;1104
000608  b2cb              UXTB     r3,r1                 ;1104
00060a  5499              STRB     r1,[r3,r2]            ;1104
00060c  7821              LDRB     r1,[r4,#0]            ;1105
00060e  1c49              ADDS     r1,r1,#1              ;1105
000610  7021              STRB     r1,[r4,#0]            ;1105
                  |L11.1554|
000612  1c40              ADDS     r0,r0,#1              ;1105
000614  280a              CMP      r0,#0xa               ;1105
000616  dbd5              BLT      |L11.1476|
000618  e04c              B        |L11.1716|
                  |L11.1562|
;;;1111   	{
;;;1112   		if(PrevFinger == 5 && temp_coord->tTempPos.sFinger_ > 1 && temp_coord->tTempPos.sFinger_ < 5 && VirtualCoordFrmCnt < VIRTUALCOORDFRMMAX)
00061a  7828              LDRB     r0,[r5,#0]  ; PrevFinger
00061c  2805              CMP      r0,#5
00061e  d151              BNE      |L11.1732|
000620  7820              LDRB     r0,[r4,#0]
000622  2801              CMP      r0,#1
000624  d94e              BLS      |L11.1732|
000626  2805              CMP      r0,#5
000628  d24c              BCS      |L11.1732|
00062a  6968              LDR      r0,[r5,#0x14]  ; VirtualCoordFrmCnt
00062c  2832              CMP      r0,#0x32
;;;1113   		{
;;;1114   			for(i=0;i<POSBUF_;i++){
00062e  bfbc              ITT      LT
000630  2100              MOVLT    r1,#0
000632  4608              MOVLT    r0,r1
000634  da46              BGE      |L11.1732|
;;;1115   				temp_coord->tTempPos.vusR[i]   = 0;
000636  bf00              NOP      
                  |L11.1592|
000638  eb040241          ADD      r2,r4,r1,LSL #1
;;;1116   				temp_coord->tTempPos.vusS[i]   = 0;
00063c  1c89              ADDS     r1,r1,#2
00063e  f8a200a1          STRH     r0,[r2,#0xa1]         ;1115
000642  f8a20081          STRH     r0,[r2,#0x81]
000646  f8a200a3          STRH     r0,[r2,#0xa3]         ;1115
00064a  f8a20083          STRH     r0,[r2,#0x83]
00064e  290a              CMP      r1,#0xa
000650  dbf2              BLT      |L11.1592|
;;;1117   			}
;;;1118   			temp_coord->tTempPos.sFinger_ = 0;
000652  7020              STRB     r0,[r4,#0]
;;;1119   			for(pl=0;pl<POSBUF_;pl++)
000654  2000              MOVS     r0,#0
000656  f604226f          ADD      r2,r4,#0xa6f          ;1032
;;;1120   			{
;;;1121   				if(temp_coord->tOrgPastPos[0].vusS[pl] > 0)
00065a  bf00              NOP      
                  |L11.1628|
00065c  eb040140          ADD      r1,r4,r0,LSL #1
000660  f8b136cc          LDRH     r3,[r1,#0x6cc]
000664  b303              CBZ      r3,|L11.1704|
;;;1122   				{
;;;1123   					temp_coord->tTempPos.tXY[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].tXY[pl];
000666  7823              LDRB     r3,[r4,#0]
000668  eb0408c0          ADD      r8,r4,r0,LSL #3
00066c  eb0403c3          ADD      r3,r4,r3,LSL #3
000670  f8d8c67c          LDR      r12,[r8,#0x67c]
000674  f8c3c001          STR      r12,[r3,#1]
000678  f8d8c680          LDR      r12,[r8,#0x680]
00067c  f8c3c005          STR      r12,[r3,#5]
;;;1124   					temp_coord->tTempPos.vusR[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusR[pl];
000680  7823              LDRB     r3,[r4,#0]
000682  f8b1c6e0          LDRH     r12,[r1,#0x6e0]
000686  eb040343          ADD      r3,r4,r3,LSL #1
00068a  f8a3c0a1          STRH     r12,[r3,#0xa1]
;;;1125   					temp_coord->tTempPos.vusS[temp_coord->tTempPos.sFinger_] = temp_coord->tOrgPastPos[0].vusS[pl];
00068e  f8b136cc          LDRH     r3,[r1,#0x6cc]
000692  7821              LDRB     r1,[r4,#0]
000694  eb040141          ADD      r1,r4,r1,LSL #1
000698  f8a13081          STRH     r3,[r1,#0x81]
;;;1126   					temp_coord->cRemap[temp_coord->tTempPos.sFinger_] = temp_coord->tTempPos.sFinger_;
00069c  7821              LDRB     r1,[r4,#0]
00069e  b2cb              UXTB     r3,r1
0006a0  5499              STRB     r1,[r3,r2]
;;;1127   					temp_coord->tTempPos.sFinger_++;
0006a2  7821              LDRB     r1,[r4,#0]
0006a4  1c49              ADDS     r1,r1,#1
0006a6  7021              STRB     r1,[r4,#0]
                  |L11.1704|
0006a8  1c40              ADDS     r0,r0,#1
0006aa  280a              CMP      r0,#0xa
0006ac  dbd6              BLT      |L11.1628|
;;;1128   				}					
;;;1129   			}
;;;1130   			VirtualCoordFrmCnt++;
0006ae  6968              LDR      r0,[r5,#0x14]  ; VirtualCoordFrmCnt
0006b0  1c40              ADDS     r0,r0,#1
                  |L11.1714|
;;;1131   		}
;;;1132   		else{
;;;1133   			VirtualCoordFrmCnt = 0;
;;;1134   		}
;;;1135   		
;;;1136   	}
;;;1137   	else{
;;;1138   		VirtualCoordFrmCnt = 0;
0006b2  6168              STR      r0,[r5,#0x14]  ; VirtualCoordFrmCnt
                  |L11.1716|
;;;1139   	}
;;;1140   	
;;;1141   	if(thisInfo->DrawingDirection >= 2 && temp_coord->tTempPos.sFinger_ == 5)
0006b4  f8960fa9          LDRB     r0,[r6,#0xfa9]
0006b8  2802              CMP      r0,#2
0006ba  d37c              BCC      |L11.1974|
                  |L11.1724|
0006bc  7820              LDRB     r0,[r4,#0]
0006be  2805              CMP      r0,#5
0006c0  d179              BNE      |L11.1974|
0006c2  e004              B        |L11.1742|
                  |L11.1732|
0006c4  2000              MOVS     r0,#0                 ;1133
0006c6  6168              STR      r0,[r5,#0x14]         ;1133  ; VirtualCoordFrmCnt
0006c8  e7f8              B        |L11.1724|
                  |L11.1738|
0006ca  2000              MOVS     r0,#0                 ;1138
0006cc  e7f1              B        |L11.1714|
                  |L11.1742|
;;;1142   	{
;;;1143   		tXY_t WinCert5Pos[5];
;;;1144   		
;;;1145   		uint8_t IdxMap[5], tmp;
;;;1146   		
;;;1147   		memcpy(CoordAry, temp_coord->tTempPos.tXY, sizeof(CoordAry));
0006ce  2228              MOVS     r2,#0x28
0006d0  1c61              ADDS     r1,r4,#1
0006d2  a806              ADD      r0,sp,#0x18
0006d4  f7fffffe          BL       __aeabi_memcpy
;;;1148   		
;;;1149   		for(i=0;i<5;i++)
;;;1150   			IdxMap[i] = i;
0006d8  2000              MOVS     r0,#0
0006da  f88d0004          STRB     r0,[sp,#4]
0006de  2001              MOVS     r0,#1
0006e0  f88d0005          STRB     r0,[sp,#5]
0006e4  2002              MOVS     r0,#2
0006e6  f88d0006          STRB     r0,[sp,#6]
0006ea  2003              MOVS     r0,#3
0006ec  f88d0007          STRB     r0,[sp,#7]
0006f0  f88d7008          STRB     r7,[sp,#8]
;;;1151   		
;;;1152   		for(i=0;i<4;i++)
0006f4  2000              MOVS     r0,#0
;;;1153   		for(j=i+1;j<5;j++)
0006f6  2101              MOVS     r1,#1
0006f8  aa01              ADD      r2,sp,#4              ;1145
0006fa  af06              ADD      r7,sp,#0x18           ;844
0006fc  e002              B        |L11.1796|
                  |L11.1790|
0006fe  1c41              ADDS     r1,r0,#1
000700  2905              CMP      r1,#5
000702  da1a              BGE      |L11.1850|
                  |L11.1796|
;;;1154   		{
;;;1155   			if(CoordAry[i].y > CoordAry[j].y)
000704  eb0708c0          ADD      r8,r7,r0,LSL #3
000708  eb070cc1          ADD      r12,r7,r1,LSL #3
00070c  f8d89004          LDR      r9,[r8,#4]
000710  f8dc3004          LDR      r3,[r12,#4]
000714  454b              CMP      r3,r9
000716  da0d              BGE      |L11.1844|
;;;1156   			{
;;;1157   				CoordTmp = CoordAry[j];
;;;1158   				CoordAry[j] = CoordAry[i];
000718  f8dca000          LDR      r10,[r12,#0]
00071c  f8d8b000          LDR      r11,[r8,#0]
000720  e9ccb900          STRD     r11,r9,[r12,#0]
000724  e9c8a300          STRD     r10,r3,[r8,#0]
;;;1159   				CoordAry[i] = CoordTmp;
;;;1160   				
;;;1161   				tmp = IdxMap[j];
000728  5c53              LDRB     r3,[r2,r1]
;;;1162   				IdxMap[j] = IdxMap[i];
00072a  f812c000          LDRB     r12,[r2,r0]
00072e  f802c001          STRB     r12,[r2,r1]
;;;1163   				IdxMap[i] = tmp;
000732  5413              STRB     r3,[r2,r0]
                  |L11.1844|
000734  1c49              ADDS     r1,r1,#1
000736  2905              CMP      r1,#5
000738  dbe4              BLT      |L11.1796|
                  |L11.1850|
00073a  1c40              ADDS     r0,r0,#1
00073c  2804              CMP      r0,#4
00073e  dbde              BLT      |L11.1790|
;;;1164   			}
;;;1165   		}
;;;1166   		if(thisInfo->DrawingDirection == 2)
000740  f8960fa9          LDRB     r0,[r6,#0xfa9]
000744  2802              CMP      r0,#2
000746  d07d              BEQ      |L11.2116|
000748  e9dd010e          LDRD     r0,r1,[sp,#0x38]
00074c  e9cd011a          STRD     r0,r1,[sp,#0x68]
000750  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000754  e9cd0112          STRD     r0,r1,[sp,#0x48]
;;;1167   		{
;;;1168   			WinCert5Pos[4].y = CoordAry[4].y;
;;;1169   			WinCert5Pos[3].y = CoordAry[4].y - 936 - 40;
;;;1170   			WinCert5Pos[2].y = CoordAry[4].y - 1447 - 30;
;;;1171   			WinCert5Pos[1].y = CoordAry[4].y - 1958 + 10;
;;;1172   			WinCert5Pos[0].y = CoordAry[4].y - 2469;
;;;1173   			ModifyFlag = YES;
;;;1174   			for(i=0;i<4;i++){
;;;1175   				if(abs(WinCert5Pos[i].y - CoordAry[i].y) > 150)
;;;1176   					ModifyFlag = NO;
;;;1177   			}
;;;1178   			if(ModifyFlag)
;;;1179   			{
;;;1180   				for(i=0;i<4;i++)
;;;1181   				{
;;;1182   	//				temp_coord->tTempPos.tXY[IdxMap[i]].y = ((temp_coord->tTempPos.tXY[IdxMap[i]].y + WinCert5Pos[i])>>1);
;;;1183   					temp_coord->tTempPos.tXY[IdxMap[i]].y = WinCert5Pos[i].y;
;;;1184   				}
;;;1185   				
;;;1186   			}
;;;1187   			else
;;;1188   			{
;;;1189   				WinCert5Pos[4].y = CoordAry[4].y;
;;;1190   				WinCert5Pos[3].y = WinCert5Pos[4].y - 621;
;;;1191   				WinCert5Pos[2].y = WinCert5Pos[3].y - 621;
;;;1192   				WinCert5Pos[1].y = WinCert5Pos[2].y - 621;
;;;1193   				WinCert5Pos[0].y = WinCert5Pos[1].y - 621;
;;;1194   				
;;;1195   				ModifyFlag = YES;
;;;1196   				for(i=0;i<4;i++){
;;;1197   					if(abs(WinCert5Pos[i].y - CoordAry[i].y) > 150)
;;;1198   						ModifyFlag = NO;
;;;1199   				}
;;;1200   				if(ModifyFlag)
;;;1201   				{
;;;1202   					for(i=0;i<4;i++)
;;;1203   					{
;;;1204   		//				temp_coord->tTempPos.tXY[IdxMap[i]].y = ((temp_coord->tTempPos.tXY[IdxMap[i]].y + WinCert5Pos[i])>>1);
;;;1205   						temp_coord->tTempPos.tXY[IdxMap[i]].y = WinCert5Pos[i].y;
;;;1206   					}
;;;1207   				}
;;;1208   			
;;;1209   			}
;;;1210   		}
;;;1211   		else
;;;1212   		{
;;;1213   			WinCert5Pos[4] = CoordAry[4];
;;;1214   			WinCert5Pos[0] = CoordAry[0];
;;;1215   			WinCert5Pos[2].x = ((WinCert5Pos[4].x + WinCert5Pos[0].x+1)>>1);
000758  9912              LDR      r1,[sp,#0x48]
00075a  981a              LDR      r0,[sp,#0x68]
;;;1216   			WinCert5Pos[2].y = ((WinCert5Pos[4].y + WinCert5Pos[0].y+1)>>1);
;;;1217   			WinCert5Pos[1].x = ((WinCert5Pos[2].x + WinCert5Pos[0].x+1)>>1);
;;;1218   			WinCert5Pos[1].y = ((WinCert5Pos[2].y + WinCert5Pos[0].y+1)>>1);
;;;1219   			WinCert5Pos[3].x = ((WinCert5Pos[4].x + WinCert5Pos[2].x+1)>>1);
;;;1220   			WinCert5Pos[3].y = ((WinCert5Pos[4].y + WinCert5Pos[2].y+1)>>1);
;;;1221   			
;;;1222   			ModifyFlag = YES;
00075c  f04f0801          MOV      r8,#1
000760  4408              ADD      r0,r0,r1              ;1215
000762  1c40              ADDS     r0,r0,#1              ;1215
000764  1040              ASRS     r0,r0,#1              ;1215
000766  9016              STR      r0,[sp,#0x58]         ;1216
000768  9913              LDR      r1,[sp,#0x4c]         ;1216
00076a  981b              LDR      r0,[sp,#0x6c]         ;1216
;;;1223   			for(i=1;i<4;i++){
00076c  4646              MOV      r6,r8
00076e  4408              ADD      r0,r0,r1              ;1216
000770  1c40              ADDS     r0,r0,#1              ;1216
000772  1040              ASRS     r0,r0,#1              ;1216
000774  9017              STR      r0,[sp,#0x5c]         ;1217
000776  9912              LDR      r1,[sp,#0x48]         ;1217
000778  9816              LDR      r0,[sp,#0x58]         ;1217
00077a  f10d0948          ADD      r9,sp,#0x48           ;1143
00077e  4408              ADD      r0,r0,r1              ;1217
000780  1c40              ADDS     r0,r0,#1              ;1217
000782  1040              ASRS     r0,r0,#1              ;1217
000784  9014              STR      r0,[sp,#0x50]         ;1218
000786  9913              LDR      r1,[sp,#0x4c]         ;1218
000788  9817              LDR      r0,[sp,#0x5c]         ;1218
00078a  4408              ADD      r0,r0,r1              ;1218
00078c  1c40              ADDS     r0,r0,#1              ;1218
00078e  1040              ASRS     r0,r0,#1              ;1218
000790  9015              STR      r0,[sp,#0x54]         ;1219
000792  9916              LDR      r1,[sp,#0x58]         ;1219
000794  981a              LDR      r0,[sp,#0x68]         ;1219
000796  4408              ADD      r0,r0,r1              ;1219
000798  1c40              ADDS     r0,r0,#1              ;1219
00079a  1040              ASRS     r0,r0,#1              ;1219
00079c  9018              STR      r0,[sp,#0x60]         ;1220
00079e  9917              LDR      r1,[sp,#0x5c]         ;1220
0007a0  981b              LDR      r0,[sp,#0x6c]         ;1220
0007a2  4408              ADD      r0,r0,r1              ;1220
0007a4  1c40              ADDS     r0,r0,#1              ;1220
0007a6  1040              ASRS     r0,r0,#1              ;1220
0007a8  f8cd0064          STR.W    r0,[sp,#0x64]         ;1143
                  |L11.1964|
;;;1224   				if(algorithm_coord_calc_distance(WinCert5Pos[i],CoordAry[i]) > 150)
0007ac  eb0900c6          ADD      r0,r9,r6,LSL #3
0007b0  e9d02000          LDRD     r2,r0,[r0,#0]
0007b4  e000              B        |L11.1976|
                  |L11.1974|
0007b6  e052              B        |L11.2142|
                  |L11.1976|
0007b8  eb0701c6          ADD      r1,r7,r6,LSL #3
0007bc  e9d13100          LDRD     r3,r1,[r1,#0]
0007c0  1ad2              SUBS     r2,r2,r3
0007c2  4352              MULS     r2,r2,r2
0007c4  1a40              SUBS     r0,r0,r1
0007c6  fb002000          MLA      r0,r0,r0,r2
0007ca  f7fffffe          BL       algorithm_calc_sqrt
0007ce  2896              CMP      r0,#0x96
;;;1225   					ModifyFlag = NO;
0007d0  bfc8              IT       GT
0007d2  f04f0800          MOVGT    r8,#0
0007d6  1c76              ADDS     r6,r6,#1
0007d8  2e04              CMP      r6,#4
0007da  dbe7              BLT      |L11.1964|
;;;1226   			}
;;;1227   
;;;1228   			if(ModifyFlag)
0007dc  f1b80f00          CMP      r8,#0
0007e0  d03d              BEQ      |L11.2142|
;;;1229   			{
;;;1230   				for(i=1;i<4;i++)
;;;1231   				{
;;;1232   					temp_coord->tTempPos.tXY[IdxMap[i]].x = ((temp_coord->tTempPos.tXY[IdxMap[i]].x + WinCert5Pos[i].x+1)>>1);
0007e2  f89d0005          LDRB     r0,[sp,#5]
0007e6  9a14              LDR      r2,[sp,#0x50]
0007e8  eb0400c0          ADD      r0,r4,r0,LSL #3
0007ec  f8d01001          LDR      r1,[r0,#1]
0007f0  4411              ADD      r1,r1,r2
0007f2  1c49              ADDS     r1,r1,#1
0007f4  1049              ASRS     r1,r1,#1
0007f6  f8c01001          STR      r1,[r0,#1]
;;;1233   					temp_coord->tTempPos.tXY[IdxMap[i]].y = ((temp_coord->tTempPos.tXY[IdxMap[i]].y + WinCert5Pos[i].y+1)>>1);
0007fa  f8d01005          LDR      r1,[r0,#5]
0007fe  9a15              LDR      r2,[sp,#0x54]
000800  4411              ADD      r1,r1,r2
000802  1c49              ADDS     r1,r1,#1
000804  1049              ASRS     r1,r1,#1
000806  f8c01005          STR      r1,[r0,#5]
00080a  f89d0006          LDRB     r0,[sp,#6]            ;1232
00080e  9a16              LDR      r2,[sp,#0x58]         ;1232
000810  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1232
000814  f8d01001          LDR      r1,[r0,#1]            ;1232
000818  4411              ADD      r1,r1,r2              ;1232
00081a  1c49              ADDS     r1,r1,#1              ;1232
00081c  1049              ASRS     r1,r1,#1              ;1232
00081e  f8c01001          STR      r1,[r0,#1]            ;1232
000822  f8d01005          LDR      r1,[r0,#5]
000826  9a17              LDR      r2,[sp,#0x5c]
000828  4411              ADD      r1,r1,r2
00082a  1c49              ADDS     r1,r1,#1
00082c  1049              ASRS     r1,r1,#1
00082e  f8c01005          STR      r1,[r0,#5]
000832  f89d0007          LDRB     r0,[sp,#7]            ;1232
000836  9a18              LDR      r2,[sp,#0x60]         ;1232
000838  eb0400c0          ADD      r0,r4,r0,LSL #3       ;1232
00083c  f8d01001          LDR      r1,[r0,#1]            ;1232
000840  4411              ADD      r1,r1,r2              ;1232
000842  e000              B        |L11.2118|
                  |L11.2116|
000844  e010              B        |L11.2152|
                  |L11.2118|
000846  1c49              ADDS     r1,r1,#1              ;1232
000848  1049              ASRS     r1,r1,#1              ;1232
00084a  f8c01001          STR      r1,[r0,#1]            ;1232
00084e  f8d01005          LDR      r1,[r0,#5]
000852  9a19              LDR      r2,[sp,#0x64]
000854  4411              ADD      r1,r1,r2
000856  1c49              ADDS     r1,r1,#1
000858  1049              ASRS     r1,r1,#1
00085a  f8c01005          STR      r1,[r0,#5]
                  |L11.2142|
;;;1234   				//	temp_coord->tTempPos.tXY[IdxMap[i]] = WinCert5Pos[i];
;;;1235   				}
;;;1236   				
;;;1237   			}
;;;1238   		}
;;;1239   	}
;;;1240   	
;;;1241   #endif	
;;;1242   
;;;1243   	PrevFinger = temp_coord->tTempPos.sFinger_;
00085e  7820              LDRB     r0,[r4,#0]
000860  7028              STRB     r0,[r5,#0]
;;;1244   }
000862  b01f              ADD      sp,sp,#0x7c
000864  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.2152|
000868  980f              LDR      r0,[sp,#0x3c]         ;1168
00086a  901b              STR      r0,[sp,#0x6c]         ;1168
00086c  f5a07074          SUB      r0,r0,#0x3d0          ;1168
000870  9019              STR      r0,[sp,#0x64]         ;1170
000872  980f              LDR      r0,[sp,#0x3c]         ;1170
000874  9a07              LDR      r2,[sp,#0x1c]         ;1175
000876  f2a050c5          SUB      r0,r0,#0x5c5          ;1170
00087a  9017              STR      r0,[sp,#0x5c]         ;1171
00087c  980f              LDR      r0,[sp,#0x3c]         ;1171
00087e  f2a0709c          SUB      r0,r0,#0x79c          ;1171
000882  9015              STR      r0,[sp,#0x54]         ;1172
000884  980f              LDR      r0,[sp,#0x3c]         ;1172
000886  f6a010a5          SUB      r0,r0,#0x9a5          ;1172
00088a  9013              STR      r0,[sp,#0x4c]         ;1173
00088c  9913              LDR      r1,[sp,#0x4c]         ;1175
00088e  2001              MOVS     r0,#1                 ;1173
000890  1a89              SUBS     r1,r1,r2              ;1175
000892  bf48              IT       MI                    ;1175
000894  4249              RSBMI    r1,r1,#0              ;1175
000896  2996              CMP      r1,#0x96              ;1175
000898  bfc8              IT       GT                    ;1176
00089a  2000              MOVGT    r0,#0                 ;1176
00089c  9a09              LDR      r2,[sp,#0x24]         ;1175
00089e  9915              LDR      r1,[sp,#0x54]         ;1175
0008a0  1a89              SUBS     r1,r1,r2              ;1175
0008a2  bf48              IT       MI                    ;1175
0008a4  4249              RSBMI    r1,r1,#0              ;1175
0008a6  2996              CMP      r1,#0x96              ;1175
0008a8  bfc8              IT       GT                    ;1176
0008aa  2000              MOVGT    r0,#0                 ;1176
0008ac  9a0b              LDR      r2,[sp,#0x2c]         ;1175
0008ae  9917              LDR      r1,[sp,#0x5c]         ;1175
0008b0  1a89              SUBS     r1,r1,r2              ;1175
0008b2  bf48              IT       MI                    ;1175
0008b4  4249              RSBMI    r1,r1,#0              ;1175
0008b6  2996              CMP      r1,#0x96              ;1175
0008b8  bfc8              IT       GT                    ;1176
0008ba  2000              MOVGT    r0,#0                 ;1176
0008bc  9a0d              LDR      r2,[sp,#0x34]         ;1175
0008be  9919              LDR      r1,[sp,#0x64]         ;1175
0008c0  1a89              SUBS     r1,r1,r2              ;1175
0008c2  bf48              IT       MI                    ;1175
0008c4  4249              RSBMI    r1,r1,#0              ;1175
0008c6  2996              CMP      r1,#0x96              ;1175
0008c8  dc1d              BGT      |L11.2310|
0008ca  b1e0              CBZ      r0,|L11.2310|
                  |L11.2252|
0008cc  f89d1004          LDRB     r1,[sp,#4]            ;1183
0008d0  9813              LDR      r0,[sp,#0x4c]         ;1183
0008d2  eb0401c1          ADD      r1,r4,r1,LSL #3       ;1183
0008d6  f8c10005          STR      r0,[r1,#5]            ;1183
0008da  f89d1005          LDRB     r1,[sp,#5]            ;1183
0008de  9815              LDR      r0,[sp,#0x54]         ;1183
0008e0  eb0401c1          ADD      r1,r4,r1,LSL #3       ;1183
0008e4  f8c10005          STR      r0,[r1,#5]            ;1183
0008e8  f89d1006          LDRB     r1,[sp,#6]            ;1183
0008ec  9817              LDR      r0,[sp,#0x5c]         ;1183
0008ee  eb0401c1          ADD      r1,r4,r1,LSL #3       ;1183
0008f2  f8c10005          STR      r0,[r1,#5]            ;1183
0008f6  f89d1007          LDRB     r1,[sp,#7]            ;1183
0008fa  9819              LDR      r0,[sp,#0x64]         ;1183
0008fc  eb0401c1          ADD      r1,r4,r1,LSL #3       ;1183
000900  f8c10005          STR      r0,[r1,#5]            ;1183
000904  e7ab              B        |L11.2142|
                  |L11.2310|
000906  981b              LDR      r0,[sp,#0x6c]         ;1190
000908  9a07              LDR      r2,[sp,#0x1c]         ;1197
00090a  f2a0206d          SUB      r0,r0,#0x26d          ;1190
00090e  9019              STR      r0,[sp,#0x64]         ;1190
000910  f2a0206d          SUB      r0,r0,#0x26d          ;1190
000914  9017              STR      r0,[sp,#0x5c]         ;1191
000916  f2a0206d          SUB      r0,r0,#0x26d          ;1191
00091a  9015              STR      r0,[sp,#0x54]         ;1192
00091c  f2a0206d          SUB      r0,r0,#0x26d          ;1192
000920  9013              STR      r0,[sp,#0x4c]         ;1195
000922  9913              LDR      r1,[sp,#0x4c]         ;1197
000924  2001              MOVS     r0,#1                 ;1195
000926  1a89              SUBS     r1,r1,r2              ;1197
000928  bf48              IT       MI                    ;1197
00092a  4249              RSBMI    r1,r1,#0              ;1197
00092c  2996              CMP      r1,#0x96              ;1197
00092e  bfc8              IT       GT                    ;1198
000930  2000              MOVGT    r0,#0                 ;1198
000932  9a09              LDR      r2,[sp,#0x24]         ;1197
000934  9915              LDR      r1,[sp,#0x54]         ;1197
000936  1a89              SUBS     r1,r1,r2              ;1197
000938  bf48              IT       MI                    ;1197
00093a  4249              RSBMI    r1,r1,#0              ;1197
00093c  2996              CMP      r1,#0x96              ;1197
00093e  bfc8              IT       GT                    ;1198
000940  2000              MOVGT    r0,#0                 ;1198
000942  9a0b              LDR      r2,[sp,#0x2c]         ;1197
000944  9917              LDR      r1,[sp,#0x5c]         ;1197
000946  1a89              SUBS     r1,r1,r2              ;1197
000948  bf48              IT       MI                    ;1197
00094a  4249              RSBMI    r1,r1,#0              ;1197
00094c  2996              CMP      r1,#0x96              ;1197
00094e  bfc8              IT       GT                    ;1198
000950  2000              MOVGT    r0,#0                 ;1198
000952  9a0d              LDR      r2,[sp,#0x34]         ;1197
000954  9919              LDR      r1,[sp,#0x64]         ;1197
000956  1a89              SUBS     r1,r1,r2              ;1197
000958  bf48              IT       MI                    ;1197
00095a  4249              RSBMI    r1,r1,#0              ;1197
00095c  2996              CMP      r1,#0x96              ;1197
00095e  f73faf7e          BGT      |L11.2142|
000962  2800              CMP      r0,#0                 ;1200
000964  d1b2              BNE      |L11.2252|
000966  e77a              B        |L11.2142|
;;;1245   
                          ENDP


                          AREA ||i.algorithm_coord_init||, CODE, READONLY, ALIGN=2

                  algorithm_coord_init PROC
;;;73     
;;;74     void algorithm_coord_init(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	int l;
;;;77     
;;;78     	thisCommonConf = algorithm_GetCommonConfig();
000002  f7fffffe          BL       algorithm_GetCommonConfig
000006  4c54              LDR      r4,|L12.344|
;;;79     	thisModeConf   = algorithm_GetModeConfig();
000008  60a0              STR      r0,[r4,#8]  ; thisCommonConf
00000a  f7fffffe          BL       algorithm_GetModeConfig
;;;80     	thisInfo       = algorithm_GetInfo();
00000e  60e0              STR      r0,[r4,#0xc]  ; thisModeConf
000010  f7fffffe          BL       algorithm_GetInfo
;;;81     #if USED_NOISE_HOPPING_FREQ
;;;82     	ptAppInfo      = app_GetInfo();
;;;83     #endif /* USED_NOISE_HOPPING_FREQ */
;;;84     //	_ptModuleCommonConf = module_GetCommonConfig();
;;;85     
;;;86     	thisInfo->tCoord.tPastPos[0].sFinger_    = 0;
000014  2100              MOVS     r1,#0
000016  6120              STR      r0,[r4,#0x10]  ; thisInfo
000018  f8801677          STRB     r1,[r0,#0x677]
;;;87     	thisInfo->tCoord.tOrgPastPos[0].sFinger_ = 0;
00001c  f88019d9          STRB     r1,[r0,#0x9d9]
;;;88     
;;;89     	for(l=MAX_TOUCH_; l--; )
;;;90     	{
;;;91     		thisInfo->tCoord.tPastPos[0].tXY[l].x    = 0;
;;;92     		thisInfo->tCoord.tPastPos[0].tXY[l].y    = 0;
;;;93     		thisInfo->tCoord.tPastPos[0].vusR[l]     = 0;
;;;94     		thisInfo->tCoord.tPastPos[0].vusS[l]     = 0;
;;;95     
;;;96     		thisInfo->tCoord.tPastPos[1].tXY[l].x    = 0;
;;;97     		thisInfo->tCoord.tPastPos[1].tXY[l].y    = 0;
;;;98     		thisInfo->tCoord.tPastPos[1].vusR[l]     = 0;
;;;99     		thisInfo->tCoord.tPastPos[1].vusS[l]     = 0;
;;;100    		
;;;101    		thisInfo->tCoord.tPastPos[2].tXY[l].x    = 0;
;;;102    		thisInfo->tCoord.tPastPos[2].tXY[l].y    = 0;
;;;103    		thisInfo->tCoord.tPastPos[2].vusR[l]     = 0;
;;;104    		thisInfo->tCoord.tPastPos[2].vusS[l]     = 0;
;;;105    
;;;106    		thisInfo->tCoord.tPastPos[3].tXY[l].x    = 0;
;;;107    		thisInfo->tCoord.tPastPos[3].tXY[l].y    = 0;
;;;108    		thisInfo->tCoord.tPastPos[3].vusR[l]     = 0;
;;;109    		thisInfo->tCoord.tPastPos[3].vusS[l]     = 0;
;;;110    		
;;;111    		thisInfo->tCoord.tPastPos[4].tXY[l].x    = 0;
;;;112    		thisInfo->tCoord.tPastPos[4].tXY[l].y    = 0;
;;;113    		thisInfo->tCoord.tPastPos[4].vusR[l]     = 0;
;;;114    		thisInfo->tCoord.tPastPos[4].vusS[l]     = 0;
;;;115    		
;;;116    		thisInfo->tCoord.tOrgPastPos[0].tXY[l].x = 0;
;;;117    		thisInfo->tCoord.tOrgPastPos[0].tXY[l].y = 0;
;;;118    		thisInfo->tCoord.tOrgPastPos[0].vusR[l]  = 0;
;;;119    		thisInfo->tCoord.tOrgPastPos[0].vusS[l]  = 0;
;;;120    
;;;121    		thisInfo->tCoord.tOrgPastPos[1].tXY[l].x = 0;
;;;122    		thisInfo->tCoord.tOrgPastPos[1].tXY[l].y = 0;
;;;123    		thisInfo->tCoord.tOrgPastPos[1].vusR[l]  = 0;
;;;124    		thisInfo->tCoord.tOrgPastPos[1].vusS[l]  = 0;
;;;125    		
;;;126    		thisInfo->tCoord.tOrgPastPos[2].tXY[l].x = 0;
;;;127    		thisInfo->tCoord.tOrgPastPos[2].tXY[l].y = 0;
;;;128    		thisInfo->tCoord.tOrgPastPos[2].vusR[l]  = 0;
;;;129    		thisInfo->tCoord.tOrgPastPos[2].vusS[l]  = 0;
;;;130    
;;;131    		thisInfo->tCoord.tOrgPastPos[3].tXY[l].x = 0;
;;;132    		thisInfo->tCoord.tOrgPastPos[3].tXY[l].y = 0;
;;;133    		thisInfo->tCoord.tOrgPastPos[3].vusR[l]  = 0;
;;;134    		thisInfo->tCoord.tOrgPastPos[3].vusS[l]  = 0;
;;;135    		
;;;136    		thisInfo->tCoord.tOrgPastPos[4].tXY[l].x = 0;
;;;137    		thisInfo->tCoord.tOrgPastPos[4].tXY[l].y = 0;
;;;138    		thisInfo->tCoord.tOrgPastPos[4].vusR[l]  = 0;
;;;139    		thisInfo->tCoord.tOrgPastPos[4].vusS[l]  = 0;
;;;140    		
;;;141    		thisInfo->tCoord.ucIdMappedCnt[l] = 0;
;;;142    		thisInfo->tCoord.cScreenDebCnt[l] = 0;
;;;143    		
;;;144    		thisInfo->tCoord.cIsbefor[l] = 0;
;;;145    	}
;;;146    
;;;147        thisInfo->tCoord.iXOffset = ( UNIT_DIST * (2*thisCommonConf->iXEdgeNum - thisCommonConf->iXEdgeDen) ) / (2*thisCommonConf->iXEdgeDen);
;;;148        thisInfo->tCoord.iYOffset = ( UNIT_DIST * (2*thisCommonConf->iYEdgeNum - thisCommonConf->iYEdgeDen) ) / (2*thisCommonConf->iYEdgeDen);
;;;149    	
;;;150    #if USED_WINDOW_10_QE_BOE
;;;151        thisInfo->tCoord.iXExpandStart = 1200;
;;;152    #if USED_ONLY_BOE_TEST_EQU
;;;153        /*
;;;154         * TODO : 중대형에서 UNIT_DIST사용에 대한 문제점 수정해야함.
;;;155         * UNIT DIST가 맞지 않음 (1<<8) 256은 내부 Scale이 한 블럭당 256으로 할 경우 이지만
;;;156         * 중대형의 경우 고정된 32768의 내부 Resolution을 사용 하고 있기 때문에 UNIT_DIST를 고정해서 사용하는 Concept은 맞지 않다.
;;;157         */
;;;158    
;;;159        /*
;;;160         * BOE의 경우 Y노드 개수가 40개 이기 때문에 한 Unit Dist는 819가 된다. Expand Start지점을 1400으로 한건 대략 (1Unit+2/3Unit)을 확장 시키기 위함이다.
;;;161         */
;;;162        thisInfo->tCoord.iYExpandStart = 1400;//1*UNIT_DIST;
;;;163    #else /* USED_ONLY_BOE_TEST_EQU */
;;;164        thisInfo->tCoord.iYExpandStart = 1*UNIT_DIST;
;;;165    #endif /* USED_ONLY_BOE_TEST_EQU */
;;;166    #else /* USED_WINDOW_10_QE_BOE */
;;;167        thisInfo->tCoord.iXExpandStart = 1*UNIT_DIST;//(1<<(POS_BOOST_SHIFT_-3));		//1*UNIT_DIST;
;;;168    #if USED_ONLY_BOE_TEST_EQU
;;;169        /*
;;;170         * TODO : 중대형에서 UNIT_DIST사용에 대한 문제점 수정해야함.
;;;171         * UNIT DIST가 맞지 않음 (1<<8) 256은 내부 Scale이 한 블럭당 256으로 할 경우 이지만
;;;172         * 중대형의 경우 고정된 32768의 내부 Resolution을 사용 하고 있기 때문에 UNIT_DIST를 고정해서 사용하는 Concept은 맞지 않다.
;;;173         */
;;;174    
;;;175        /*
;;;176         * BOE의 경우 Y노드 개수가 40개 이기 때문에 한 Unit Dist는 819가 된다. Expand Start지점을 1400으로 한건 대략 (1Unit+2/3Unit)을 확장 시키기 위함이다.
;;;177         */
;;;178        thisInfo->tCoord.iYExpandStart = 1400;//1*UNIT_DIST;
;;;179    #else /* USED_ONLY_BOE_TEST_EQU */
;;;180        thisInfo->tCoord.iYExpandStart = 1*UNIT_DIST; //(1<<(POS_BOOST_SHIFT_));
;;;181    #endif /* USED_ONLY_BOE_TEST_EQU */
;;;182    #endif /* USED_WINDOW_10_QE_BOE */
;;;183    
;;;184        thisInfo->tCoord.iXEdgeStart = 1*UNIT_DIST;
;;;185    	thisInfo->tCoord.iYEdgeStart = 1*UNIT_DIST;
;;;186    
;;;187        if( thisModeConf->Coord.bSwapXY )
;;;188    	{
;;;189        	thisInfo->tCoord.iInternalXRes = (ROW_MAX - 1) << POS_BOOST_SHIFT_;
;;;190        	thisInfo->tCoord.iInternalYRes = (COL_MAX - 1) << POS_BOOST_SHIFT_;
;;;191    	}
;;;192    	else
;;;193    	{
;;;194    		thisInfo->tCoord.iInternalXRes = (COL_MAX - 1) << POS_BOOST_SHIFT_;
;;;195    		thisInfo->tCoord.iInternalYRes = (ROW_MAX - 1) << POS_BOOST_SHIFT_;
;;;196    	}
;;;197    
;;;198    	thisInfo->tCoord.slScaledMoveDistThd = (thisModeConf->CoordTracking.usMoveDistanceThd << POS_BOOST_SHIFT_);
;;;199    
;;;200    }
000020  f04f0c09          MOV      r12,#9
                  |L12.36|
000024  eb0002cc          ADD      r2,r0,r12,LSL #3      ;91
000028  eb00034c          ADD      r3,r0,r12,LSL #1      ;93
00002c  f8c21678          STR      r1,[r2,#0x678]        ;92
000030  f8c2167c          STR      r1,[r2,#0x67c]        ;93
000034  f8a316dc          STRH     r1,[r3,#0x6dc]        ;93
000038  f8a316c8          STRH     r1,[r3,#0x6c8]        ;94
00003c  f8c216f1          STR      r1,[r2,#0x6f1]        ;96
000040  f8c216f5          STR      r1,[r2,#0x6f5]        ;97
000044  f8a31755          STRH     r1,[r3,#0x755]        ;98
000048  f8a31741          STRH     r1,[r3,#0x741]        ;99
00004c  f8c2176a          STR      r1,[r2,#0x76a]        ;101
000050  f8c2176e          STR      r1,[r2,#0x76e]        ;102
000054  f8a317ce          STRH     r1,[r3,#0x7ce]        ;103
000058  f8a317ba          STRH     r1,[r3,#0x7ba]        ;104
00005c  f8c217e3          STR      r1,[r2,#0x7e3]        ;106
000060  f8c217e7          STR      r1,[r2,#0x7e7]        ;107
000064  f8a31847          STRH     r1,[r3,#0x847]        ;108
000068  f8a31833          STRH     r1,[r3,#0x833]        ;109
00006c  f8c2185c          STR      r1,[r2,#0x85c]        ;112
000070  f8c21860          STR      r1,[r2,#0x860]        ;113
000074  f8a318c0          STRH     r1,[r3,#0x8c0]        ;113
000078  f8a318ac          STRH     r1,[r3,#0x8ac]        ;114
00007c  f8c219da          STR      r1,[r2,#0x9da]        ;116
000080  f8c219de          STR      r1,[r2,#0x9de]        ;117
000084  f8a31a3e          STRH     r1,[r3,#0xa3e]        ;118
000088  f8a31a2a          STRH     r1,[r3,#0xa2a]        ;119
00008c  f8c21a53          STR      r1,[r2,#0xa53]        ;121
000090  f8c21a57          STR      r1,[r2,#0xa57]        ;122
000094  f8a31ab7          STRH     r1,[r3,#0xab7]        ;123
000098  f8a31aa3          STRH     r1,[r3,#0xaa3]        ;124
00009c  f8c21acc          STR      r1,[r2,#0xacc]        ;127
0000a0  f8c21ad0          STR      r1,[r2,#0xad0]        ;128
0000a4  f8a31b30          STRH     r1,[r3,#0xb30]        ;128
0000a8  f8a31b1c          STRH     r1,[r3,#0xb1c]        ;129
0000ac  f8c21b45          STR      r1,[r2,#0xb45]        ;131
0000b0  f8c21b49          STR      r1,[r2,#0xb49]        ;132
0000b4  f8a31ba9          STRH     r1,[r3,#0xba9]        ;133
0000b8  f8a31b95          STRH     r1,[r3,#0xb95]        ;134
0000bc  f8c21bbe          STR      r1,[r2,#0xbbe]        ;136
0000c0  f8c21bc2          STR      r1,[r2,#0xbc2]        ;137
0000c4  f8a31c22          STRH     r1,[r3,#0xc22]        ;138
0000c8  eb00020c          ADD      r2,r0,r12             ;141
0000cc  f8a31c0e          STRH     r1,[r3,#0xc0e]        ;139
0000d0  f8821da5          STRB     r1,[r2,#0xda5]        ;141
0000d4  f8821daf          STRB     r1,[r2,#0xdaf]        ;142
0000d8  f8821e4d          STRB     r1,[r2,#0xe4d]        ;144
0000dc  f1bc0c01          SUBS     r12,r12,#1            ;144
0000e0  d2a0              BCS      |L12.36|
0000e2  68a1              LDR      r1,[r4,#8]            ;147  ; thisCommonConf
0000e4  f8d1200e          LDR      r2,[r1,#0xe]          ;147
0000e8  f8d1300a          LDR      r3,[r1,#0xa]          ;147
0000ec  ebc20343          RSB      r3,r2,r3,LSL #1       ;147
0000f0  021b              LSLS     r3,r3,#8              ;147
0000f2  0052              LSLS     r2,r2,#1              ;147
0000f4  fb93f2f2          SDIV     r2,r3,r2              ;147
0000f8  f8c02e0f          STR      r2,[r0,#0xe0f]        ;147
0000fc  f8d12016          LDR      r2,[r1,#0x16]         ;148
000100  f8d11012          LDR      r1,[r1,#0x12]         ;148
000104  f44f43be          MOV      r3,#0x5f00            ;190
000108  ebc20141          RSB      r1,r2,r1,LSL #1       ;148
00010c  0209              LSLS     r1,r1,#8              ;148
00010e  0052              LSLS     r2,r2,#1              ;148
000110  fb91f1f2          SDIV     r1,r1,r2              ;148
000114  f8c01e13          STR      r1,[r0,#0xe13]        ;148
000118  f44f7180          MOV      r1,#0x100             ;167
00011c  f8c01e1f          STR      r1,[r0,#0xe1f]        ;167
000120  f8c01e23          STR      r1,[r0,#0xe23]        ;180
000124  f8c01e27          STR      r1,[r0,#0xe27]        ;184
000128  f8c01e2b          STR      r1,[r0,#0xe2b]        ;185
00012c  68e1              LDR      r1,[r4,#0xc]          ;187  ; thisModeConf
00012e  f44f523c          MOV      r2,#0x2f00            ;189
000132  f891c06d          LDRB     r12,[r1,#0x6d]        ;187
000136  f1bc0f00          CMP      r12,#0                ;187
00013a  bf19              ITTEE    NE                    ;189
00013c  f8c02e17          STRNE    r2,[r0,#0xe17]        ;189
000140  f8c03e1b          STRNE    r3,[r0,#0xe1b]        ;190
000144  f8c03e17          STREQ    r3,[r0,#0xe17]        ;194
000148  f8c02e1b          STREQ    r2,[r0,#0xe1b]        ;195
00014c  f8b11071          LDRH     r1,[r1,#0x71]         ;198
000150  0209              LSLS     r1,r1,#8              ;198
000152  f8c01da1          STR      r1,[r0,#0xda1]        ;198
000156  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  |L12.344|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_coord_init_param PROC
;;;201    
;;;202    void algorithm_coord_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	thisModeConf   = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4901              LDR      r1,|L13.12|
000008  60c8              STR      r0,[r1,#0xc]  ; thisModeConf
;;;205    //	thisInfo->tCoord.slScaledMoveDistThd = (thisModeConf->CoordTracking.usMoveDistanceThd << POS_BOOST_SHIFT_);
;;;206    }
00000a  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L13.12|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_initialise_pos_buffer||, CODE, READONLY, ALIGN=2

                  algorithm_coord_initialise_pos_buffer PROC
;;;207    
;;;208    void algorithm_coord_initialise_pos_buffer(void)
000000  4833              LDR      r0,|L14.208|
;;;209    {
000002  b430              PUSH     {r4,r5}
;;;210    	int l;
;;;211    	tCoordInfo_t *temp_coord;
;;;212    	
;;;213    //	memset((void *)&(thisInfo->tCoord.tOrgPosHist[0]), 0x00, sizeof(tPastPos_t) );
;;;214    
;;;215    	temp_coord = &thisInfo->tCoord;		
000004  6902              LDR      r2,[r0,#0x10]  ; thisInfo
;;;216    	thisInfo->tDelta.iMaxStrength = 0;
000006  2000              MOVS     r0,#0
000008  f202315e          ADD      r1,r2,#0x35e          ;215
;;;217    
;;;218    	temp_coord->tTempPos.sFinger_ = 0;
00000c  6150              STR      r0,[r2,#0x14]
00000e  f882035e          STRB     r0,[r2,#0x35e]
;;;219    	for( l=LOOSE_POSBUF_; l--; )
000012  2210              MOVS     r2,#0x10
000014  2301              MOVS     r3,#1
;;;220    	{
;;;221    		temp_coord->tTempPos.tXY[l].x = 0;
;;;222    		temp_coord->tTempPos.tXY[l].y = 0;
;;;223    		temp_coord->tTempPos.rect[l].cs = 0;
;;;224    		temp_coord->tTempPos.rect[l].ce = 0;
;;;225    		temp_coord->tTempPos.rect[l].rs = 0;
;;;226    		temp_coord->tTempPos.rect[l].re = 0;
;;;227    		temp_coord->tTempPos.vusR[l] = 0;
;;;228    		temp_coord->tTempPos.vusS[l] = 0;
;;;229    		temp_coord->tTempPos.MaxDelta[l] = (uint16_t)INT16_MIN; // NOTE : warning제거 초기값을 -로 설정해야 하는 이유가 있나????
;;;230    
;;;231    		temp_coord->cRemap[l] = -1;
000016  1e45              SUBS     r5,r0,#1
000018  02d4              LSLS     r4,r2,#11             ;229
                  |L14.26|
00001a  1e52              SUBS     r2,r2,#1              ;229
00001c  eb010cc2          ADD      r12,r1,r2,LSL #3      ;221
000020  1c5b              ADDS     r3,r3,#1
000022  f8cc0001          STR      r0,[r12,#1]           ;221
000026  f8cc0005          STR      r0,[r12,#5]           ;222
00002a  eb010c82          ADD      r12,r1,r2,LSL #2      ;223
00002e  2b10              CMP      r3,#0x10
000030  f88c00c3          STRB     r0,[r12,#0xc3]        ;223
000034  f88c00c4          STRB     r0,[r12,#0xc4]        ;224
000038  f88c00c1          STRB     r0,[r12,#0xc1]        ;225
00003c  f88c00c2          STRB     r0,[r12,#0xc2]        ;226
000040  eb010c42          ADD      r12,r1,r2,LSL #1      ;227
000044  f8ac00a1          STRH     r0,[r12,#0xa1]        ;227
000048  f8ac0081          STRH     r0,[r12,#0x81]        ;228
00004c  f8ac4101          STRH     r4,[r12,#0x101]       ;229
000050  eb010c02          ADD      r12,r1,r2
000054  f88c5a6f          STRB     r5,[r12,#0xa6f]
000058  dddf              BLE      |L14.26|
;;;232    	}
;;;233    
;;;234    	temp_coord->tPos.sFinger_ = 0;
00005a  f8810121          STRB     r0,[r1,#0x121]
;;;235    	temp_coord->tOrgPos.sFinger_ = 0;
00005e  f8810576          STRB     r0,[r1,#0x576]
;;;236    	for( l=POSBUF_; l--; )
;;;237    	{
;;;238    		if(temp_coord->tPos.vusR[l] == 0)
;;;239    		{
;;;240    			temp_coord->ucEdgeExpandCoef[l] = 0;
;;;241    #if (REMOVE_EDGE_EN == YES)
;;;242    			temp_coord->bRemoveEdge[l] = 0;
;;;243    #endif
;;;244    		}
;;;245    		
;;;246    		temp_coord->tPos.tXY[l].x = 0;
;;;247    		temp_coord->tPos.tXY[l].y = 0;
;;;248    		temp_coord->tPos.rect[l].cs = 0;
;;;249    		temp_coord->tPos.rect[l].ce = 0;
;;;250    		temp_coord->tPos.rect[l].rs = 0;
;;;251    		temp_coord->tPos.rect[l].re = 0;
;;;252    		temp_coord->tPos.vusR[l] = 0;
;;;253    		temp_coord->tPos.vusS[l] = 0;
;;;254    		temp_coord->tPos.MaxDelta[l] = (uint16_t)INT16_MIN; // NOTE : warning제거 초기값을 -로 설정해야 하는 이유가 있나????
;;;255    
;;;256    		temp_coord->tOrgPos.tXY[l].x = 0;
;;;257    		temp_coord->tOrgPos.tXY[l].y = 0;
;;;258    		temp_coord->tOrgPos.rect[l].cs = 0;
;;;259    		temp_coord->tOrgPos.rect[l].ce = 0;
;;;260    		temp_coord->tOrgPos.rect[l].rs = 0;
;;;261    		temp_coord->tOrgPos.rect[l].re = 0;
;;;262    		temp_coord->tOrgPos.vusR[l] = 0;
;;;263    		temp_coord->tOrgPos.vusS[l] = 0;
;;;264    
;;;265    		temp_coord->ucPostProcessRun[l] = 0;
;;;266    	}
;;;267    }
000062  2209              MOVS     r2,#9
                  |L14.100|
000064  eb010c42          ADD      r12,r1,r2,LSL #1      ;238
000068  f8bc3186          LDRH     r3,[r12,#0x186]       ;238
00006c  2b00              CMP      r3,#0                 ;238
00006e  bf04              ITT      EQ                    ;240
000070  188b              ADDEQ    r3,r1,r2              ;240
000072  f8830ba3          STRBEQ   r0,[r3,#0xba3]        ;240
000076  eb0105c2          ADD      r5,r1,r2,LSL #3       ;246
00007a  eb010382          ADD      r3,r1,r2,LSL #2       ;248
00007e  f8c50122          STR      r0,[r5,#0x122]        ;246
000082  f8c50126          STR      r0,[r5,#0x126]        ;247
000086  f883019c          STRB     r0,[r3,#0x19c]        ;248
00008a  f883019d          STRB     r0,[r3,#0x19d]        ;249
00008e  f883019a          STRB     r0,[r3,#0x19a]        ;250
000092  f883019b          STRB     r0,[r3,#0x19b]        ;251
000096  f8ac0186          STRH     r0,[r12,#0x186]       ;252
00009a  f8ac0172          STRH     r0,[r12,#0x172]       ;253
00009e  f8ac41c2          STRH     r4,[r12,#0x1c2]       ;254
0000a2  f8c50577          STR      r0,[r5,#0x577]        ;256
0000a6  f8c5057b          STR      r0,[r5,#0x57b]        ;257
0000aa  f88305f1          STRB     r0,[r3,#0x5f1]        ;258
0000ae  f88305f2          STRB     r0,[r3,#0x5f2]        ;259
0000b2  f88305ef          STRB     r0,[r3,#0x5ef]        ;260
0000b6  f88305f0          STRB     r0,[r3,#0x5f0]        ;261
0000ba  f8ac05db          STRH     r0,[r12,#0x5db]       ;262
0000be  188b              ADDS     r3,r1,r2              ;265
0000c0  f8ac05c7          STRH     r0,[r12,#0x5c7]       ;263
0000c4  f8830a65          STRB     r0,[r3,#0xa65]        ;265
0000c8  1e52              SUBS     r2,r2,#1              ;265
0000ca  d2cb              BCS      |L14.100|
0000cc  bc30              POP      {r4,r5}
0000ce  4770              BX       lr
;;;268    
                          ENDP

                  |L14.208|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_process||, CODE, READONLY, ALIGN=2

                  algorithm_coord_process PROC
;;;4429   
;;;4430   void algorithm_coord_process(int mode)
000000  b510              PUSH     {r4,lr}
;;;4431   {
000002  4604              MOV      r4,r0
;;;4432   	//Edge_Expand_Finger LYB_190109
;;;4433   	algorithm_label_EdgeExpand_Finger(mode);
000004  f7fffffe          BL       algorithm_label_EdgeExpand_Finger
;;;4434   
;;;4435   #if BIG_FINGER_EDGE_EXPAND_ALGO_EN
;;;4436   	algorithm_coord_EdgeExpand_BigFinger(); 
;;;4437   #endif
;;;4438   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4439   	// Algorithm Coord. Calculation
;;;4440   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4441   	algorithm_coord_calc_pos(mode);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       algorithm_coord_calc_pos
;;;4442   
;;;4443   #if WinCertAssistance_En	
;;;4444   	if(thisModeConf->Coord.ucWinCertAssistance == 5)
;;;4445   		algorithm_coord_drawing_assistance(mode);
;;;4446   #endif
;;;4447   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4448   	// Algorithm Coord. Tracking
;;;4449   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4450       algorithm_coord_tracking_pos(mode);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       algorithm_coord_tracking_pos
;;;4451   	
;;;4452       algorithm_coord_smoothing_pos(mode);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       algorithm_coord_smoothing_pos
;;;4453   	
;;;4454   	if(thisModeConf->CoordEdge.usOutInDrawEdgeTh)
00001a  4806              LDR      r0,|L15.52|
00001c  68c0              LDR      r0,[r0,#0xc]  ; thisModeConf
00001e  f8b000a4          LDRH     r0,[r0,#0xa4]
000022  2800              CMP      r0,#0
;;;4455   		algorithm_coord_OutInDrawing();
000024  bf18              IT       NE
000026  f7fffffe          BLNE     algorithm_coord_OutInDrawing
;;;4456   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4457   	// Algorithm Coord. Post-Procssing
;;;4458   	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;;;4459   //	if(thisModeConf->CoordEdge.cPostProcessEndMargin == 0)
;;;4460   //		algorithm_coord_PostProcess(mode);
;;;4461   //	else
;;;4462   		algorithm_coord_PostProcess_1();
00002a  e8bd4010          POP      {r4,lr}
00002e  f7ffbffe          B.W      algorithm_coord_PostProcess_1
;;;4463   }
                          ENDP

000032  0000              DCW      0x0000
                  |L15.52|
                          DCD      ||.data||

                          AREA ||i.algorithm_coord_smoothing_pos||, CODE, READONLY, ALIGN=2

                  algorithm_coord_smoothing_pos PROC
;;;2430   
;;;2431   void algorithm_coord_smoothing_pos(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2432   {
;;;2433   	int i;
;;;2434   	int prev_curr_dist;
;;;2435   //	tXY_t curr_pos;  // NOTE : not used
;;;2436   //	tXY_t prev_pos;
;;;2437   //	tXY_t avg_pos, pred_pos;
;;;2438   
;;;2439   	tCoordInfo_t 	*temp_coord;
;;;2440   
;;;2441   	temp_coord = &thisInfo->tCoord;
000004  4dfe              LDR      r5,|L16.1024|
000006  b08f              SUB      sp,sp,#0x3c           ;2432
;;;2442   
;;;2443   	for( i=MAX_TOUCH_; i--; )
;;;2444   	{
;;;2445   		if( temp_coord->tPos.vusR[i] > 0 )
;;;2446   		{
;;;2447   			tXY_t coord_array[7];
;;;2448   
;;;2449   			if(thisModeConf->Coord.bFingerMeanSmoothing)
;;;2450   			{
;;;2451   #if (SMOOTH_PASTORG_INTER_EN == YES)
;;;2452   				if(thisModeConf->Coord.ucSmoothPastOrgInter > 0 && thisModeConf->Coord.ucSmoothPastOrgInter <= 4 && temp_coord->tOrgPastPos[0].vusS[i]>0 && temp_coord->tOrgPastPos[1].vusS[i]>0 && temp_coord->tOrgPastPos[2].vusS[i]>0 && temp_coord->cScreenDebCnt[i] >= 5)
;;;2453   				{
;;;2454   					coord_array[0] = temp_coord->tOrgPos.tXY[i];
;;;2455   					coord_array[1] = temp_coord->tPastPos[0].tXY[i];
;;;2456   					coord_array[2] = temp_coord->tPastPos[1].tXY[i];
;;;2457   					coord_array[3] = temp_coord->tPastPos[2].tXY[i];
;;;2458   					coord_array[4] = temp_coord->tOrgPastPos[0].tXY[i];	
;;;2459   					coord_array[5] = temp_coord->tOrgPastPos[1].tXY[i];	
;;;2460   					coord_array[6] = temp_coord->tOrgPastPos[2].tXY[i];	
;;;2461   				
;;;2462   					temp_coord->tPos.tXY[i] = meanInterpolate(coord_array, 0,thisModeConf->Coord.ucSmoothPastOrgInter+3);
;;;2463   				}
;;;2464   				else if( temp_coord->tPastPos[2].vusS[i] > 0 && temp_coord->tPastPos[1].vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] > 0 && temp_coord->tPos.vusS[i] > 0 )
;;;2465   				{					
;;;2466   					coord_array[0].x = (temp_coord->tOrgPastPos[2].tXY[i].x + temp_coord->tOrgPastPos[1].tXY[i].x) / 2;
;;;2467   					coord_array[1].x = (temp_coord->tOrgPastPos[2].tXY[i].x + temp_coord->tOrgPastPos[1].tXY[i].x + temp_coord->tOrgPastPos[0].tXY[i].x) / 3;
;;;2468   					coord_array[2].x = (temp_coord->tOrgPastPos[2].tXY[i].x + temp_coord->tOrgPastPos[1].tXY[i].x + temp_coord->tOrgPastPos[0].tXY[i].x + temp_coord->tOrgPos.tXY[i].x) / 4;
;;;2469   					coord_array[3].x = (temp_coord->tOrgPastPos[1].tXY[i].x + temp_coord->tOrgPastPos[0].tXY[i].x + temp_coord->tOrgPos.tXY[i].x) / 3;
;;;2470   					coord_array[4].x = (temp_coord->tOrgPastPos[0].tXY[i].x + temp_coord->tOrgPos.tXY[i].x) / 2;
;;;2471   
;;;2472   					coord_array[0].y = (temp_coord->tOrgPastPos[2].tXY[i].y + temp_coord->tOrgPastPos[1].tXY[i].y) / 2;
;;;2473   					coord_array[1].y = (temp_coord->tOrgPastPos[2].tXY[i].y + temp_coord->tOrgPastPos[1].tXY[i].y + temp_coord->tOrgPastPos[0].tXY[i].y) / 3;
;;;2474   					coord_array[2].y = (temp_coord->tOrgPastPos[2].tXY[i].y + temp_coord->tOrgPastPos[1].tXY[i].y + temp_coord->tOrgPastPos[0].tXY[i].y + temp_coord->tOrgPos.tXY[i].y) / 4;
;;;2475   					coord_array[3].y = (temp_coord->tOrgPastPos[1].tXY[i].y + temp_coord->tOrgPastPos[0].tXY[i].y + temp_coord->tOrgPos.tXY[i].y) / 3;
;;;2476   					coord_array[4].y = (temp_coord->tOrgPastPos[0].tXY[i].y + temp_coord->tOrgPos.tXY[i].y) / 2 ;
;;;2477   
;;;2478   					temp_coord->tPos.tXY[i] = meanInterpolate(coord_array, 0,5);	
;;;2479   				}
;;;2480   				else if(temp_coord->tPastPos[1].vusS[i] > 0 && temp_coord->tPastPos[0].vusS[i] > 0 && temp_coord->tPos.vusS[i] > 0)
;;;2481   				{
;;;2482   					temp_coord->tPos.tXY[i].x = (temp_coord->tOrgPastPos[1].tXY[i].x + temp_coord->tOrgPastPos[0].tXY[i].x + temp_coord->tOrgPos.tXY[i].x)/3;
;;;2483   					temp_coord->tPos.tXY[i].y = (temp_coord->tOrgPastPos[1].tXY[i].y + temp_coord->tOrgPastPos[0].tXY[i].y + temp_coord->tOrgPos.tXY[i].y)/3;
;;;2484   				}
;;;2485   				else
;;;2486   #endif					
;;;2487   				if(temp_coord->tPastPos[0].vusS[i] > 0 && temp_coord->tPos.vusS[i] > 0)
;;;2488   				{
;;;2489   					temp_coord->tPos.tXY[i].x = (temp_coord->tOrgPastPos[0].tXY[i].x + temp_coord->tOrgPos.tXY[i].x)/2;
;;;2490   					temp_coord->tPos.tXY[i].y = (temp_coord->tOrgPastPos[0].tXY[i].y + temp_coord->tOrgPos.tXY[i].y)/2;
;;;2491   				}
;;;2492   //				temp_coord->tPos.tXY[i] = temp_coord->tOrgPos.tXY[i];
;;;2493   
;;;2494   			}
;;;2495   
;;;2496   			if( temp_coord->tPastPos[0].vusS[i] > 0 )
;;;2497   			{
;;;2498   				if(thisModeConf->Coord.cDisSmoothOffset != 0)
;;;2499   				{
;;;2500   					prev_curr_dist = algorithm_coord_calc_distance(temp_coord->tPastPos[0].tXY[i], temp_coord->tPos.tXY[i]);
;;;2501   
;;;2502   					prev_curr_dist += thisModeConf->Coord.cDisSmoothOffset;
;;;2503   					
;;;2504   					if(prev_curr_dist < 10)
;;;2505   						prev_curr_dist = 10;
;;;2506   					
;;;2507   					if(prev_curr_dist > _BV(thisModeConf->Coord.lMoveSmoothingLevel))
;;;2508   						prev_curr_dist = _BV(thisModeConf->Coord.lMoveSmoothingLevel);
;;;2509   					
;;;2510   #if (VECTOR_PREDICTION_EN == YES)
;;;2511   					if(thisModeConf->Coord.ucVectorPredictionCoef > 0)
;;;2512   					{
;;;2513   						uint16_t dist_th1 = 0, dist_th2 = 0, dist = 0;
;;;2514   						tXY_t ProjectionVector, PrevVector, CurrVector, PredPos;
;;;2515   						int InnerProduct,PrevScalar,CurrScalar,CosSeta;
;;;2516   						tXY_t OriginPoint,VectorA,VectorB;
;;;2517   						tXY_t tPastPos = {0, 0};
;;;2518   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2519   						if(temp_coord->bInterpolation_On)
;;;2520   						{
;;;2521   							tPastPos.x = temp_coord->tPastPos[4].tXY[i].x;
;;;2522   							tPastPos.y = temp_coord->tPastPos[4].tXY[i].y;
;;;2523   						}
;;;2524   						else
;;;2525   #endif
;;;2526   						{
;;;2527   							tPastPos.x = temp_coord->tPastPos[2].tXY[i].x;
;;;2528   							tPastPos.y = temp_coord->tPastPos[2].tXY[i].y;
;;;2529   						}
;;;2530   
;;;2531   						ProjectionVector.x = 0, ProjectionVector.y = 0;
;;;2532   						PredPos = temp_coord->tPastPos[0].tXY[i];
;;;2533   						
;;;2534   						//Prediction based on projection
;;;2535   						if(
;;;2536   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;2537   							(temp_coord->bInterpolation_On && temp_coord->tPastPos[4].vusR[i] > 0) || (!temp_coord->bInterpolation_On && temp_coord->tPastPos[2].vusR[i] > 0)
;;;2538   #else
;;;2539   							(temp_coord->tPastPos[2].vusR[i] > 0)
;;;2540   #endif
;;;2541   						)
;;;2542   						{
;;;2543   							if(ProjectionEnable[i] == NO && algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],tPastPos) > thisModeConf->Coord.usDistThdStationaryToMoving
;;;2544   								&& algorithm_coord_calc_distance(temp_coord->iStopPos[i],temp_coord->tPastPos[0].tXY[i]) > (thisModeConf->Coord.usDistThdStationaryToMoving<<1))
;;;2545   								ProjectionEnable[i] = YES;
;;;2546   							else if(ProjectionEnable[i] == YES && algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],tPastPos) < thisModeConf->Coord.usDistThdMovingToStationary)
;;;2547   								ProjectionEnable[i] = NO;
;;;2548   						}
;;;2549   //						if(temp_coord->tPastPos[4].vusR[i] > 0 && algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],temp_coord->tPastPos[4].tXY[i]) > thisModeConf->Coord.usDistThdStationaryToMoving)
;;;2550   //							ProjectionEnable[i] = YES;
;;;2551   //						else
;;;2552   //							ProjectionEnable[i] = NO;
;;;2553   //						if( temp_coord->tPastPos[4].vusS[i] > 0 && temp_coord->DrawingFlag[i] )	//&& prev_curr_dist < (2<<POS_BOOST_SHIFT_))
;;;2554   						if(ProjectionEnable[i] == YES)
;;;2555   						{
;;;2556   							uint8_t Coef;
;;;2557   //							tXY_t AccelPred;
;;;2558   //							PrevVector.x = (temp_coord->tPastPos[0].tXY[i].x - temp_coord->tPastPos[2].tXY[i].x)*3;
;;;2559   //							PrevVector.y = (temp_coord->tPastPos[0].tXY[i].y - temp_coord->tPastPos[2].tXY[i].y)*3;
;;;2560   							
;;;2561   							PrevVector.x = temp_coord->tPastPos[0].tXY[i].x - tPastPos.x;
;;;2562   							PrevVector.y = temp_coord->tPastPos[0].tXY[i].y - tPastPos.y;
;;;2563   							CurrVector.x = temp_coord->tPos.tXY[i].x - tPastPos.x;
;;;2564   							CurrVector.y = temp_coord->tPos.tXY[i].y - tPastPos.y;
;;;2565   
;;;2566   							ProjectionVector.x = (int)(PrevVector.x * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
;;;2567   							ProjectionVector.y = (int)(PrevVector.y * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
;;;2568   						
;;;2569   							PredPos.x = tPastPos.x + ProjectionVector.x;
;;;2570   							PredPos.y = tPastPos.y + ProjectionVector.y;
;;;2571   							
;;;2572   
;;;2573   							//////calculate inner product
;;;2574   //							OriginPoint.x = OriginPoint.y = 0;
;;;2575   //							VectorA.x = PredPos.x - temp_coord->tPastPos[0].tXY[i].x;
;;;2576   //							VectorA.y = PredPos.y - temp_coord->tPastPos[0].tXY[i].y;
;;;2577   //							VectorB.x = temp_coord->tPos.tXY[i].x - temp_coord->tPastPos[0].tXY[i].x;
;;;2578   //							VectorB.y = temp_coord->tPos.tXY[i].y - temp_coord->tPastPos[0].tXY[i].y;
;;;2579   //							
;;;2580   //							InnerProduct = ((VectorA.x * VectorB.x + VectorA.y * VectorB.y)<<7);
;;;2581   //							CosSeta = InnerProduct / (algorithm_coord_calc_distance(OriginPoint,VectorA) * algorithm_coord_calc_distance(OriginPoint,VectorB));
;;;2582   
;;;2583   							dist = algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],PredPos);
;;;2584   
;;;2585   							if(thisModeConf->Coord.ucWinCertAssistance == 5 &&  thisInfo->DrawingDirection > 0)
;;;2586   								Coef = thisModeConf->Coord.ucWinCertModeVectorPredictionCoef;
;;;2587   							else
;;;2588   								Coef = thisModeConf->Coord.ucVectorPredictionCoef;
;;;2589   							if(dist < 10)	dist = 0;
;;;2590   							else if(dist > Coef)	dist = Coef;
;;;2591   							
;;;2592   							
;;;2593   							
;;;2594   							//TEST_CODE
;;;2595   //							if(thisInfo->DrawingDirection ){
;;;2596   //								temp_coord->tPos.tXY[i] = PredPos;
;;;2597   //							}
;;;2598   //							else
;;;2599   							{
;;;2600   								temp_coord->tPos.tXY[i].x = ((Coef - dist) * PredPos.x + dist * temp_coord->tPos.tXY[i].x + (Coef>>1)) / Coef;
;;;2601   								temp_coord->tPos.tXY[i].y = ((Coef - dist) * PredPos.y + dist * temp_coord->tPos.tXY[i].y + (Coef>>1)) / Coef;			
;;;2602   //							temp_coord->tPos.tXY[i].x = ((PredPos.x + temp_coord->tPos.tXY[i].x + 1)>>1);
;;;2603   //							temp_coord->tPos.tXY[i].y = ((PredPos.y + temp_coord->tPos.tXY[i].y + 1)>>1);
;;;2604   							}
;;;2605   							
;;;2606   							
;;;2607   							if(temp_coord->DrawingFlag[i] && algorithm_coord_IsEdgeArea(&temp_coord->tPos.tXY[i], 0)){
;;;2608   								temp_coord->tPos.tXY[i].x = ((PredPos.x + temp_coord->tPos.tXY[i].x + 1)>>1);
;;;2609   								temp_coord->tPos.tXY[i].y = ((PredPos.y + temp_coord->tPos.tXY[i].y + 1)>>1);
;;;2610   							}
;;;2611   
;;;2612   						}
;;;2613   //						if(prev_curr_dist > (1<<POS_BOOST_SHIFT_)){
;;;2614   //							temp_coord->tPos.tXY[i].x = ((temp_coord->tPos.tXY[i].x + temp_coord->tOrgPos.tXY[i].x)>>1);
;;;2615   //							temp_coord->tPos.tXY[i].y = ((temp_coord->tPos.tXY[i].y + temp_coord->tOrgPos.tXY[i].y)>>1);
;;;2616   //						}
;;;2617   						//Win11 panning latency
;;;2618   //						if(temp_coord->tPos.sFinger_ == 1 && prev_curr_dist > (1<<(POS_BOOST_SHIFT_-1)))
;;;2619   //						{
;;;2620   //							PrevVector.x = temp_coord->tPos.tXY[i].x - temp_coord->tPastPos[0].tXY[i].x;
;;;2621   //							PrevVector.y = temp_coord->tPos.tXY[i].y - temp_coord->tPastPos[0].tXY[i].y;
;;;2622   //							CurrVector.x = temp_coord->tOrgPos.tXY[i].x - temp_coord->tPastPos[0].tXY[i].x;
;;;2623   //							CurrVector.y = temp_coord->tOrgPos.tXY[i].y - temp_coord->tPastPos[0].tXY[i].y;
;;;2624   //							
;;;2625   //							ProjectionVector.x = (int)(PrevVector.x * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
;;;2626   //							ProjectionVector.y = (int)(PrevVector.y * (int64_t)(PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / (PrevVector.x*PrevVector.x+PrevVector.y*PrevVector.y));
;;;2627   //						
;;;2628   //							temp_coord->tPos.tXY[i].x = temp_coord->tPastPos[0].tXY[i].x + ProjectionVector.x;
;;;2629   //							temp_coord->tPos.tXY[i].y = temp_coord->tPastPos[0].tXY[i].y + ProjectionVector.y;
;;;2630   //							
;;;2631   //						}
;;;2632   					}
;;;2633   #endif
;;;2634   
;;;2635   					temp_coord->tPos.tXY[i].x = ((_BV(thisModeConf->Coord.lMoveSmoothingLevel) - prev_curr_dist) * temp_coord->tPastPos[0].tXY[i].x + prev_curr_dist * temp_coord->tPos.tXY[i].x + _BV(thisModeConf->Coord.lMoveSmoothingLevel-1)) >> thisModeConf->Coord.lMoveSmoothingLevel;
;;;2636   					temp_coord->tPos.tXY[i].y = ((_BV(thisModeConf->Coord.lMoveSmoothingLevel) - prev_curr_dist) * temp_coord->tPastPos[0].tXY[i].y + prev_curr_dist * temp_coord->tPos.tXY[i].y + _BV(thisModeConf->Coord.lMoveSmoothingLevel-1)) >> thisModeConf->Coord.lMoveSmoothingLevel;
;;;2637   				
;;;2638   					if(thisModeConf->Coord.ucWinCertAssistance == 5 )
;;;2639   					{
;;;2640   						if(temp_coord->tPos.sFinger_ == 1 && temp_coord->tPastPos[2].vusS[i])
;;;2641   						{
;;;2642   							int InnerProduct,S1,S2;
;;;2643   							tXY_t ProjectionVector, PrevVector, CurrVector, PredPos, P[3],V1,V2;
;;;2644   
;;;2645   							P[0] = temp_coord->tPos.tXY[i];
;;;2646   							P[1] = temp_coord->tPastPos[0].tXY[i];
;;;2647   							P[2] = temp_coord->tPastPos[2].tXY[i];
;;;2648   							
;;;2649   							V1.x = P[0].x - P[1].x;
;;;2650   							V1.y = P[0].y - P[1].y;
;;;2651   							V2.x = P[1].x - P[2].x;
;;;2652   							V2.y = P[1].y - P[2].y;
;;;2653   							S1 = algorithm_coord_calc_distance(P[0], P[1]);
;;;2654   							S2 = algorithm_coord_calc_distance(P[1], P[2]);
;;;2655   							InnerProduct = ((V1.x*V2.x + V1.y*V2.y)<<POS_BOOST_SHIFT_) / (S1*S2);
;;;2656   							
;;;2657   							S1 = algorithm_coord_calc_distance(temp_coord->tOrgPos.tXY[i],temp_coord->tOrgPastPos[0].tXY[i]);
;;;2658   							
;;;2659   							if(30 < S1 && S1 < 900 && abs(InnerProduct - (1<<POS_BOOST_SHIFT_)) < 80)
;;;2660   							{
;;;2661   								if(PanningTestModeCnt < PANNING_TEST_MODE_CNT_MAX)
;;;2662   									PanningTestModeCnt++;
;;;2663   							}
;;;2664   							else
;;;2665   								PanningTestModeCnt = 0;
;;;2666   							if(PanningTestModeCnt >= PANNING_TEST_MODE_CNT_MAX && PanningTestModeCnt < (PANNING_TEST_MODE_CNT_MAX<<1)){
;;;2667   								if(algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],temp_coord->iStopPos[i]) < (1<<POS_BOOST_SHIFT_))
;;;2668   									PanningTestModeCnt++;
;;;2669   							}
;;;2670   							if(PanningTestModeCnt > PANNING_TEST_MODE_CNT_MAX+3)
;;;2671   							{
;;;2672   								temp_coord->tPos.tXY[i] = temp_coord->tOrgPos.tXY[i];
;;;2673   //								temp_coord->tPos.tXY[i].x =( (temp_coord->tPos.tXY[i].x + temp_coord->tOrgPos.tXY[i].x + 1)>>1 );
;;;2674   //								temp_coord->tPos.tXY[i].y =( (temp_coord->tPos.tXY[i].y + temp_coord->tOrgPos.tXY[i].y + 1)>>1 );
;;;2675   							}
;;;2676   						}
;;;2677   					}
;;;2678   					
;;;2679   					if(thisModeConf->Coord.ucWinCertAssistance == 5 && temp_coord->tTempPos.sFinger_ == 5)
;;;2680   					{
;;;2681   						if(thisInfo->DrawingDirection == 2){
;;;2682   							temp_coord->tPos.tXY[i].y = (((temp_coord->tPastPos[0].tXY[i].y * 7) + temp_coord->tPos.tXY[i].y + 4)>>3);
;;;2683   						}
;;;2684   						else if(thisInfo->DrawingDirection == 3){
;;;2685   							temp_coord->tPos.tXY[i].x = (((temp_coord->tPastPos[0].tXY[i].x * 7) + temp_coord->tPos.tXY[i].x + 4)>>3);
;;;2686   							temp_coord->tPos.tXY[i].y = (((temp_coord->tPastPos[0].tXY[i].y * 7) + temp_coord->tPos.tXY[i].y + 4)>>3);
;;;2687   						}
;;;2688   					}
;;;2689   					
;;;2690   					if(thisModeConf->Coord.ucWinCertAssistance == 1 && temp_coord->tPos.sFinger_ <= 2)
;;;2691   					{
;;;2692   						int dist_th1 = 0;
;;;2693   						if(algorithm_coord_IsEdgeArea(&temp_coord->tPastPos[0].tXY[i],0)){
;;;2694   							dist_th1 = (1<<(POS_BOOST_SHIFT_));
;;;2695   						}
;;;2696   						else{
;;;2697   							dist_th1 = (1<<(POS_BOOST_SHIFT_-2));
;;;2698   						}
;;;2699   						
;;;2700   						if(prev_curr_dist > dist_th1){
;;;2701   							temp_coord->tPos.tXY[i].x = ((temp_coord->tPos.tXY[i].x + temp_coord->tOrgPos.tXY[i].x*3)>>2);
;;;2702   							temp_coord->tPos.tXY[i].y = ((temp_coord->tPos.tXY[i].y + temp_coord->tOrgPos.tXY[i].y*3)>>2);
;;;2703   						}
;;;2704   						
;;;2705   						if( temp_coord->tPastPos[2].vusS[i] > 0 && temp_coord->RealMaxDelta[i] > 0)
;;;2706   						{
;;;2707   							temp_coord->tPos.tXY[i].x = ((temp_coord->tPos.tXY[i].x*3 + ((temp_coord->tPastPos[0].tXY[i].x<<1) - temp_coord->tPastPos[2].tXY[i].x))>>2);
;;;2708   							temp_coord->tPos.tXY[i].y = ((temp_coord->tPos.tXY[i].y*3 + ((temp_coord->tPastPos[0].tXY[i].y<<1) - temp_coord->tPastPos[2].tXY[i].y))>>2);
;;;2709   						}
;;;2710   					}
;;;2711   				}
;;;2712   			}
;;;2713   			else{
;;;2714   				temp_coord->bIsMoving[i] = NO;
;;;2715   			}
;;;2716   			
;;;2717   			//Remove point touch jitter
;;;2718   			if(temp_coord->tPos.vusS[i] > 0)
;;;2719   			{
;;;2720   				int dist_th = 0;
;;;2721   				if(thisModeConf->Coord.usFirstDrawingThd > 0 && temp_coord->tPos.vusR[i] > thisModeConf->Coord.ucFirstDrawingCellCnt)
;;;2722   				{
;;;2723   #if (USED_DRUM_ALGO == YES)
;;;2724   					if(thisModeConf->Coord.usDrumTestDist != 0)
;;;2725   					{
;;;2726   						if(DrumStep[i] == 0)
;;;2727   						{
;;;2728   							if(temp_coord->tOrgPos.vusR[i] > 0 && temp_coord->tOrgPastPos[0].vusR[i] > 0)
;;;2729   							{
;;;2730   								if(thisModeConf->Coord.usDrumTestDist < algorithm_coord_calc_distance(temp_coord->tOrgPos.tXY[i],temp_coord->tOrgPastPos[0].tXY[i]))
;;;2731   								{
;;;2732   									DrumStep[i] = 1;
;;;2733   									temp_coord->tPos.tXY[i] = temp_coord->tPastPos[0].tXY[i];
;;;2734   //								VirtualBufferEnable[i] = YES;
;;;2735   //								VirtualTouch[i] = temp_coord->tOrgPos.tXY[i];
;;;2736   //								temp_coord->tOrgPos.tXY[i] = temp_coord->tOrgPastPos[0].tXY[i];
;;;2737   								}
;;;2738   								else if((thisModeConf->Coord.usDrumTestDist<<3) < algorithm_coord_calc_distance(temp_coord->tPos.tXY[i],temp_coord->iStopPos[i]))
;;;2739   								{
;;;2740   									DrumStep[i] = 2;
;;;2741   								}
;;;2742   							}
;;;2743   						}
;;;2744   					}
;;;2745   #endif /*USED_DRUM_ALGO*/
;;;2746   
;;;2747   					if(temp_coord->tPastPos[0].vusS[i] > 0)
;;;2748   					{
;;;2749   						int dist;
;;;2750   						if(temp_coord->DrawingFlag[i] == NO)
;;;2751   						{
;;;2752   							if(thisModeConf->Coord.ucWinCertAssistance == 5 && thisInfo->DrawingDirection > 0)
;;;2753   							{
;;;2754   								if(thisInfo->DrawingVector.x == 0 && thisInfo->DrawingVector.y == 0)
;;;2755   								{
;;;2756   									if(thisInfo->DrawingDirection == 1){
;;;2757   										dist =  ((abs(temp_coord->iStopPos[i].y - temp_coord->tOrgPos.tXY[i].y))<<2);
;;;2758   										dist += ((abs(temp_coord->iStopPos[i].x - temp_coord->tOrgPos.tXY[i].x))>>4);
;;;2759   									}
;;;2760   									else if(thisInfo->DrawingDirection == 2){
;;;2761   										dist =  ((abs(temp_coord->iStopPos[i].x - temp_coord->tOrgPos.tXY[i].x))<<2);
;;;2762   										dist += ((abs(temp_coord->iStopPos[i].y - temp_coord->tOrgPos.tXY[i].y))>>4);
;;;2763   									}
;;;2764   									else
;;;2765   										dist = algorithm_coord_calc_distance(temp_coord->iStopPos[i],temp_coord->tOrgPos.tXY[i]);
;;;2766   								}
;;;2767   								else
;;;2768   								{
;;;2769   									tXY_t PrevVector, CurrVector,ZeroPoint;
;;;2770   									int InnerProduct;
;;;2771   								
;;;2772   									ZeroPoint.x = 0, ZeroPoint.y = 0;
;;;2773   									PrevVector = thisInfo->DrawingVector;
;;;2774   									CurrVector.x = temp_coord->tOrgPos.tXY[i].x - temp_coord->iStopPos[i].x;
;;;2775   									CurrVector.y = temp_coord->tOrgPos.tXY[i].y - temp_coord->iStopPos[i].y;
;;;2776   									
;;;2777   									dist = (PrevVector.x*CurrVector.x + PrevVector.y*CurrVector.y) / algorithm_coord_calc_distance(ZeroPoint,PrevVector);
;;;2778   									if(dist > 0)
;;;2779   										dist <<= 2;
;;;2780   									else
;;;2781   										dist = -dist;
;;;2782   								}
;;;2783   							}
;;;2784   							else
;;;2785   								dist = algorithm_coord_calc_distance(temp_coord->iStopPos[i],temp_coord->tOrgPos.tXY[i]);
;;;2786   							
;;;2787   							
;;;2788   	//						if(algorithm_coord_IsEdgeArea(&temp_coord->iStopPos[i])>0)
;;;2789   	//							dist_th = (1<<POS_BOOST_SHIFT_);
;;;2790   	//						else
;;;2791   								dist_th = thisModeConf->Coord.usFirstDrawingThd;
;;;2792   							
;;;2793   							if(algorithm_coord_IsEdgeArea(&temp_coord->tPastPos[0].tXY[i],0)>0)
;;;2794   								dist_th <<= 1;
;;;2795   	//						dist_th += AddDistTh;
;;;2796   							
;;;2797   							if( dist < dist_th )
;;;2798   							{
;;;2799   								temp_coord->tPos.tXY[i] =temp_coord->iStopPos[i];
;;;2800   	//							temp_coord->tPos.tXY[i].x = ((temp_coord->tFirstPos.tXY[i].x*7 + temp_coord->tPos.tXY[i].x)>>3);
;;;2801   	//							temp_coord->tPos.tXY[i].y = ((temp_coord->tFirstPos.tXY[i].y*7 + temp_coord->tPos.tXY[i].y)>>3);
;;;2802   							}
;;;2803   							else{
;;;2804   								temp_coord->DrawingFlag[i] = 5;
;;;2805   								temp_coord->tPos.tXY[i].x = ((temp_coord->tPastPos[0].tXY[i].x + temp_coord->tPos.tXY[i].x)>>1);
;;;2806   								temp_coord->tPos.tXY[i].y = ((temp_coord->tPastPos[0].tXY[i].y + temp_coord->tPos.tXY[i].y)>>1);
;;;2807   							}
;;;2808   						}
;;;2809   						else if(thisModeConf->Coord.ucWinCertAssistance == 5 && temp_coord->tPastPos[4].vusS[i] > 0 && thisInfo->DrawingDirection > 0)
;;;2810   						{
;;;2811   							dist_th = (thisModeConf->Coord.usFirstDrawingThd>>2);
;;;2812   							if( algorithm_coord_calc_distance(temp_coord->tPastPos[4].tXY[i],temp_coord->tPos.tXY[i]) < dist_th )
;;;2813   								temp_coord->DrawingFlag[i]--;
;;;2814   							else{	//Save test mode vector
;;;2815   								tXY_t ZeroPoint;
;;;2816   								ZeroPoint.x = 0, ZeroPoint.y = 0;
;;;2817   								if( algorithm_coord_calc_distance(ZeroPoint,thisInfo->DrawingVector) < 
;;;2818   									algorithm_coord_calc_distance(temp_coord->tPastPos[4].tXY[i],temp_coord->tPos.tXY[i]) ){
;;;2819   									thisInfo->DrawingVector.x = temp_coord->tPos.tXY[i].x - temp_coord->tPastPos[4].tXY[i].x;
;;;2820   									thisInfo->DrawingVector.y = temp_coord->tPos.tXY[i].y - temp_coord->tPastPos[4].tXY[i].y;
;;;2821   								}
;;;2822   								
;;;2823   							}
;;;2824   							if(temp_coord->DrawingFlag[i] == 0)
;;;2825   							{
;;;2826   								temp_coord->iStopPos[i] = temp_coord->tPos.tXY[i];
;;;2827   							}
;;;2828   						}
;;;2829   						if(thisInfo->WinCertMode == 1)
;;;2830   						{
;;;2831   							if(temp_coord->DrawingFlag[i] && algorithm_coord_calc_distance(temp_coord->iStopPos[i],temp_coord->tOrgPos.tXY[i]) > (dist_th<<2)){
;;;2832   								thisInfo->DrawingDirection = 0;
;;;2833   								thisInfo->WinCertMode = 0;
;;;2834   							}
;;;2835   							
;;;2836   						}
;;;2837   					}
;;;2838   					else{		//temp_coord->tPastPos[0].vusS[i] == 0
;;;2839   						if(thisInfo->WinCertMode == 1 && temp_coord->tTempPos.sFinger_ == 1 && algorithm_coord_IsEdgeArea(&temp_coord->tPos.tXY[i],0))
;;;2840   						{
;;;2841   							thisInfo->DrawingDirection = 0;
;;;2842   							thisInfo->WinCertMode = 0;
;;;2843   						}
;;;2844   						
;;;2845   					}
;;;2846   				}
;;;2847   				else
;;;2848   				{
;;;2849   					temp_coord->DrawingFlag[i] = YES;
;;;2850   				}
;;;2851   			}
;;;2852   			
;;;2853   			// Finger Edge Smoothing
;;;2854   			if(thisModeConf->CoordEdge.cEdgeSmoothing_Finger_On > 0)
;;;2855   			{
;;;2856   				int MoveSmoothingLevel = thisModeConf->Coord.lMoveSmoothingLevel;
;;;2857   				if(temp_coord->tPos.tXY[i].x < (1<<(POS_BOOST_SHIFT_)) || temp_coord->tPos.tXY[i].y > thisInfo->tCoord.iInternalYRes-(1<<(POS_BOOST_SHIFT_))
;;;2858   					|| temp_coord->tPos.tXY[i].x > thisInfo->tCoord.iInternalXRes-(1<<(POS_BOOST_SHIFT_)) || temp_coord->tPos.tXY[i].y < (1<<(POS_BOOST_SHIFT_)))
;;;2859   				{
;;;2860   					prev_curr_dist = abs(temp_coord->tPastPos[0].tXY[i].x - temp_coord->tPos.tXY[i].x);
;;;2861   					prev_curr_dist += thisModeConf->CoordEdge.cEdgeSmoothing_Finger_On;					
;;;2862   					if(prev_curr_dist < 10) prev_curr_dist = 10;					
;;;2863   					if(prev_curr_dist > _BV(MoveSmoothingLevel)) prev_curr_dist = _BV(MoveSmoothingLevel);
;;;2864   
;;;2865   					temp_coord->tPos.tXY[i].x = ((_BV(MoveSmoothingLevel) - prev_curr_dist) * temp_coord->tPastPos[0].tXY[i].x + prev_curr_dist * temp_coord->tPos.tXY[i].x + _BV(MoveSmoothingLevel-1)) >> MoveSmoothingLevel;
;;;2866   					
;;;2867   					prev_curr_dist = abs(temp_coord->tPastPos[0].tXY[i].y - temp_coord->tPos.tXY[i].y);
;;;2868   					prev_curr_dist += thisModeConf->CoordEdge.cEdgeSmoothing_Finger_On;					
;;;2869   					if(prev_curr_dist < 10) prev_curr_dist = 10;					
;;;2870   					if(prev_curr_dist > _BV(MoveSmoothingLevel)) prev_curr_dist = _BV(MoveSmoothingLevel);
;;;2871   
;;;2872   
;;;2873   					temp_coord->tPos.tXY[i].y = ((_BV(MoveSmoothingLevel) - prev_curr_dist) * temp_coord->tPastPos[0].tXY[i].y + prev_curr_dist * temp_coord->tPos.tXY[i].y + _BV(MoveSmoothingLevel-1)) >> MoveSmoothingLevel;				
;;;2874   				}
;;;2875   			}				
;;;2876   		}
;;;2877   		else{
;;;2878   			if(thisModeConf->Coord.usFirstDrawingThd > 0 && temp_coord->tPastPos[0].vusR[i] > 0)
;;;2879   			{
;;;2880   				if(temp_coord->DrawingFlag[i]){
;;;2881   						AddDistTh-=10;
;;;2882   					if( AddDistTh < -32 )
;;;2883   						AddDistTh = -32;
;;;2884   				}
;;;2885   				else{
;;;2886   						AddDistTh+=10;
;;;2887   					if( AddDistTh > (1<<(POS_BOOST_SHIFT_-1)) )
;;;2888   						AddDistTh = (1<<(POS_BOOST_SHIFT_-1));
;;;2889   				}
;;;2890   				
;;;2891   			}
;;;2892   			
;;;2893   			temp_coord->bIsMoving[i] = NO;
;;;2894   			temp_coord->DrawingFlag[i] = NO;
;;;2895   		}
;;;2896   		
;;;2897   	}
;;;2898   }
000008  2409              MOVS     r4,#9
00000a  6928              LDR      r0,[r5,#0x10]         ;2441  ; thisInfo
00000c  f04f0a01          MOV      r10,#1                ;2508
000010  f200375e          ADD      r7,r0,#0x35e          ;2441
000014  f04f0b00          MOV      r11,#0                ;2508
                  |L16.24|
000018  eb070944          ADD      r9,r7,r4,LSL #1       ;2445
00001c  f8b90186          LDRH     r0,[r9,#0x186]        ;2445
000020  2800              CMP      r0,#0                 ;2445
000022  f000834d          BEQ.W    |L16.1728|
000026  68ea              LDR      r2,[r5,#0xc]          ;2449  ; thisModeConf
000028  f8920064          LDRB     r0,[r2,#0x64]         ;2449
00002c  b1e8              CBZ      r0,|L16.106|
00002e  f8b9036a          LDRH     r0,[r9,#0x36a]        ;2487
000032  2800              CMP      r0,#0                 ;2487
000034  f000816e          BEQ.W    |L16.788|
000038  f8b90172          LDRH     r0,[r9,#0x172]        ;2487
00003c  b1d0              CBZ      r0,|L16.116|
00003e  eb0700c4          ADD      r0,r7,r4,LSL #3       ;2489
000042  f8d0167c          LDR      r1,[r0,#0x67c]        ;2489
000046  f8d03577          LDR      r3,[r0,#0x577]        ;2489
00004a  4419              ADD      r1,r1,r3              ;2489
00004c  eb0171d1          ADD      r1,r1,r1,LSR #31      ;2489
000050  1049              ASRS     r1,r1,#1              ;2489
000052  f8c01122          STR      r1,[r0,#0x122]        ;2489
000056  f8d01680          LDR      r1,[r0,#0x680]        ;2490
00005a  f8d0357b          LDR      r3,[r0,#0x57b]        ;2490
00005e  4419              ADD      r1,r1,r3              ;2490
000060  eb0171d1          ADD      r1,r1,r1,LSR #31      ;2490
000064  1049              ASRS     r1,r1,#1              ;2490
000066  f8c01126          STR      r1,[r0,#0x126]        ;2490
                  |L16.106|
00006a  f8b9036a          LDRH     r0,[r9,#0x36a]        ;2496
00006e  2800              CMP      r0,#0                 ;2496
000070  f0008150          BEQ.W    |L16.788|
                  |L16.116|
000074  f8b20062          LDRH     r0,[r2,#0x62]         ;2498
000078  2800              CMP      r0,#0                 ;2498
00007a  f000814f          BEQ.W    |L16.796|
00007e  eb0706c4          ADD      r6,r7,r4,LSL #3       ;2500
000082  f8d6031a          LDR      r0,[r6,#0x31a]        ;2500
000086  f8d63122          LDR      r3,[r6,#0x122]        ;2500
00008a  f8d6131e          LDR      r1,[r6,#0x31e]        ;2500
00008e  f8d62126          LDR      r2,[r6,#0x126]        ;2500
000092  1ac0              SUBS     r0,r0,r3              ;2500
000094  4340              MULS     r0,r0,r0              ;2500
000096  1a89              SUBS     r1,r1,r2              ;2500
000098  fb010001          MLA      r0,r1,r1,r0           ;2500
00009c  f7fffffe          BL       algorithm_calc_sqrt
0000a0  68e9              LDR      r1,[r5,#0xc]          ;2502  ; thisModeConf
0000a2  f9b12062          LDRSH    r2,[r1,#0x62]         ;2502
0000a6  eb020800          ADD      r8,r2,r0              ;2502
0000aa  f1b80f0a          CMP      r8,#0xa               ;2505
0000ae  f2c08335          BLT.W    |L16.1820|
                  |L16.178|
0000b2  6d48              LDR      r0,[r1,#0x54]         ;2508
0000b4  fa0af200          LSL      r2,r10,r0             ;2508
0000b8  4542              CMP      r2,r8                 ;2508
0000ba  f2c08332          BLT.W    |L16.1826|
0000be  bf00              NOP                            ;2635
                  |L16.192|
0000c0  eba20308          SUB      r3,r2,r8              ;2635
0000c4  f8d6231a          LDR      r2,[r6,#0x31a]        ;2635
0000c8  9206              STR      r2,[sp,#0x18]         ;2635
0000ca  435a              MULS     r2,r3,r2              ;2635
0000cc  f8d63122          LDR      r3,[r6,#0x122]        ;2635
0000d0  fb082203          MLA      r2,r8,r3,r2           ;2635
0000d4  1e43              SUBS     r3,r0,#1              ;2635
0000d6  fa0af303          LSL      r3,r10,r3             ;2635
0000da  441a              ADD      r2,r2,r3              ;2635
0000dc  fa42fe00          ASR      lr,r2,r0              ;2635
0000e0  f8c6e122          STR      lr,[r6,#0x122]        ;2635
0000e4  f8912054          LDRB     r2,[r1,#0x54]         ;2636
0000e8  f8d6c126          LDR      r12,[r6,#0x126]       ;2636
0000ec  fa0af002          LSL      r0,r10,r2             ;2636
0000f0  eba00308          SUB      r3,r0,r8              ;2636
0000f4  f8d6031e          LDR      r0,[r6,#0x31e]        ;2636
0000f8  4343              MULS     r3,r0,r3              ;2636
0000fa  fb08330c          MLA      r3,r8,r12,r3          ;2636
0000fe  f1a20c01          SUB      r12,r2,#1             ;2636
000102  fa0afc0c          LSL      r12,r10,r12           ;2636
000106  4463              ADD      r3,r3,r12             ;2636
000108  fa43f202          ASR      r2,r3,r2              ;2636
00010c  f8c62126          STR      r2,[r6,#0x126]        ;2636
000110  f8911065          LDRB     r1,[r1,#0x65]         ;2638
000114  2905              CMP      r1,#5                 ;2638
000116  d17c              BNE      |L16.530|
000118  f8971121          LDRB     r1,[r7,#0x121]        ;2640
00011c  2901              CMP      r1,#1                 ;2640
00011e  d179              BNE      |L16.532|
000120  f8b9145c          LDRH     r1,[r9,#0x45c]        ;2640
000124  2900              CMP      r1,#0                 ;2640
000126  d07f              BEQ      |L16.552|
000128  f5066180          ADD      r1,r6,#0x400          ;2647
00012c  910e              STR      r1,[sp,#0x38]         ;2647
00012e  9906              LDR      r1,[sp,#0x18]         ;2649
000130  f8d6340c          LDR      r3,[r6,#0x40c]        ;2647
000134  f8d6c410          LDR      r12,[r6,#0x410]       ;2647
000138  1acb              SUBS     r3,r1,r3              ;2651
00013a  ebae0e01          SUB      lr,lr,r1              ;2649
00013e  eba0010c          SUB      r1,r0,r12             ;2652
000142  1a12              SUBS     r2,r2,r0              ;2650
000144  fb0ef00e          MUL      r0,lr,lr              ;2650
000148  9106              STR      r1,[sp,#0x18]         ;2652
00014a  fb020002          MLA      r0,r2,r2,r0           ;2652
00014e  930a              STR      r3,[sp,#0x28]         ;2652
000150  9309              STR      r3,[sp,#0x24]         ;2651
000152  f8cde020          STR      lr,[sp,#0x20]         ;2651
000156  920b              STR      r2,[sp,#0x2c]         ;2651
000158  9105              STR      r1,[sp,#0x14]         ;2651
00015a  f7fffffe          BL       algorithm_calc_sqrt
00015e  9004              STR      r0,[sp,#0x10]         ;2653
000160  9b09              LDR      r3,[sp,#0x24]         ;2653
000162  9906              LDR      r1,[sp,#0x18]         ;2653
000164  fb03f003          MUL      r0,r3,r3              ;2653
000168  fb010001          MLA      r0,r1,r1,r0           ;2653
00016c  f7fffffe          BL       algorithm_calc_sqrt
000170  9b0a              LDR      r3,[sp,#0x28]         ;2655
000172  9908              LDR      r1,[sp,#0x20]         ;2655
000174  9a0b              LDR      r2,[sp,#0x2c]         ;2655
000176  434b              MULS     r3,r1,r3              ;2655
000178  9905              LDR      r1,[sp,#0x14]         ;2655
00017a  fb023101          MLA      r1,r2,r1,r3           ;2655
00017e  020a              LSLS     r2,r1,#8              ;2655
000180  9904              LDR      r1,[sp,#0x10]         ;2655
000182  4348              MULS     r0,r1,r0              ;2655
000184  fb92f0f0          SDIV     r0,r2,r0              ;2655
000188  990e              LDR      r1,[sp,#0x38]         ;2657
00018a  9008              STR      r0,[sp,#0x20]         ;2655
00018c  f8d10177          LDR      r0,[r1,#0x177]        ;2657
000190  f8d1227c          LDR      r2,[r1,#0x27c]        ;2657
000194  f8d1317b          LDR      r3,[r1,#0x17b]        ;2657
000198  f8d11280          LDR      r1,[r1,#0x280]        ;2657
00019c  1a80              SUBS     r0,r0,r2              ;2657
00019e  4340              MULS     r0,r0,r0              ;2657
0001a0  1a59              SUBS     r1,r3,r1              ;2657
0001a2  fb010001          MLA      r0,r1,r1,r0           ;2657
0001a6  f7fffffe          BL       algorithm_calc_sqrt
0001aa  381f              SUBS     r0,r0,#0x1f           ;2657
0001ac  f5b07f59          CMP      r0,#0x364             ;2659
0001b0  d80c              BHI      |L16.460|
0001b2  9808              LDR      r0,[sp,#0x20]         ;2659
0001b4  f5b07080          SUBS     r0,r0,#0x100          ;2659
0001b8  bf48              IT       MI                    ;2659
0001ba  4240              RSBMI    r0,r0,#0              ;2659
0001bc  2850              CMP      r0,#0x50              ;2659
0001be  da05              BGE      |L16.460|
0001c0  6868              LDR      r0,[r5,#4]            ;2661  ; PanningTestModeCnt
0001c2  2864              CMP      r0,#0x64              ;2661
0001c4  bfbc              ITT      LT                    ;2661
0001c6  1c40              ADDLT    r0,r0,#1              ;2661
0001c8  6068              STRLT    r0,[r5,#4]            ;2662  ; PanningTestModeCnt
0001ca  e001              B        |L16.464|
                  |L16.460|
0001cc  f8c5b004          STR      r11,[r5,#4]           ;2665  ; PanningTestModeCnt
                  |L16.464|
0001d0  6868              LDR      r0,[r5,#4]            ;2666  ; PanningTestModeCnt
0001d2  3864              SUBS     r0,r0,#0x64           ;2666
0001d4  2864              CMP      r0,#0x64              ;2666
0001d6  d214              BCS      |L16.514|
0001d8  f8d62122          LDR      r2,[r6,#0x122]        ;2667
0001dc  f8d60af9          LDR      r0,[r6,#0xaf9]        ;2667
0001e0  f8d63126          LDR      r3,[r6,#0x126]        ;2667
0001e4  f8d61afd          LDR      r1,[r6,#0xafd]        ;2667
0001e8  1a10              SUBS     r0,r2,r0              ;2667
0001ea  4340              MULS     r0,r0,r0              ;2667
0001ec  1a59              SUBS     r1,r3,r1              ;2667
0001ee  fb010001          MLA      r0,r1,r1,r0           ;2667
0001f2  f7fffffe          BL       algorithm_calc_sqrt
0001f6  f5b07f80          CMP      r0,#0x100             ;2667
0001fa  da02              BGE      |L16.514|
0001fc  6868              LDR      r0,[r5,#4]            ;2668  ; PanningTestModeCnt
0001fe  1c40              ADDS     r0,r0,#1              ;2668
000200  6068              STR      r0,[r5,#4]            ;2668  ; PanningTestModeCnt
                  |L16.514|
000202  6868              LDR      r0,[r5,#4]            ;2670  ; PanningTestModeCnt
000204  2867              CMP      r0,#0x67              ;2670
000206  dd0a              BLE      |L16.542|
000208  f8d60577          LDR      r0,[r6,#0x577]        ;2672
00020c  f8c60122          STR      r0,[r6,#0x122]        ;2672
000210  e001              B        |L16.534|
                  |L16.530|
000212  e021              B        |L16.600|
                  |L16.532|
000214  e008              B        |L16.552|
                  |L16.534|
000216  f8d6057b          LDR      r0,[r6,#0x57b]        ;2672
00021a  f8c60126          STR      r0,[r6,#0x126]        ;2672
                  |L16.542|
00021e  68e8              LDR      r0,[r5,#0xc]          ;2679  ; thisModeConf
000220  f8900065          LDRB     r0,[r0,#0x65]         ;2679
000224  2805              CMP      r0,#5                 ;2679
000226  d117              BNE      |L16.600|
                  |L16.552|
000228  7838              LDRB     r0,[r7,#0]            ;2679
00022a  2805              CMP      r0,#5                 ;2679
00022c  d176              BNE      |L16.796|
00022e  6928              LDR      r0,[r5,#0x10]         ;2681  ; thisInfo
000230  f5005080          ADD      r0,r0,#0x1000         ;2681
000234  f8900fa9          LDRB     r0,[r0,#0xfa9]        ;2681
000238  2802              CMP      r0,#2                 ;2681
00023a  d002              BEQ      |L16.578|
00023c  2803              CMP      r0,#3                 ;2684
00023e  d011              BEQ      |L16.612|
000240  e06c              B        |L16.796|
                  |L16.578|
000242  f8d6131e          LDR      r1,[r6,#0x31e]        ;2682
000246  f8d60126          LDR      r0,[r6,#0x126]        ;2682
00024a  ebc101c1          RSB      r1,r1,r1,LSL #3       ;2682
00024e  1d09              ADDS     r1,r1,#4              ;2682
000250  4408              ADD      r0,r0,r1              ;2682
000252  10c0              ASRS     r0,r0,#3              ;2682
000254  f8c60126          STR      r0,[r6,#0x126]        ;2682
                  |L16.600|
000258  68e8              LDR      r0,[r5,#0xc]          ;2690  ; thisModeConf
00025a  f8900065          LDRB     r0,[r0,#0x65]         ;2690
00025e  2801              CMP      r0,#1                 ;2690
000260  d15c              BNE      |L16.796|
000262  e00b              B        |L16.636|
                  |L16.612|
000264  f8d6131a          LDR      r1,[r6,#0x31a]        ;2685
000268  f8d60122          LDR      r0,[r6,#0x122]        ;2685
00026c  ebc101c1          RSB      r1,r1,r1,LSL #3       ;2685
000270  1d09              ADDS     r1,r1,#4              ;2685
000272  4408              ADD      r0,r0,r1              ;2685
000274  10c0              ASRS     r0,r0,#3              ;2685
000276  f8c60122          STR      r0,[r6,#0x122]        ;2685
00027a  e7e2              B        |L16.578|
                  |L16.636|
00027c  f8970121          LDRB     r0,[r7,#0x121]        ;2690
000280  2802              CMP      r0,#2                 ;2690
000282  d84b              BHI      |L16.796|
000284  f206301a          ADD      r0,r6,#0x31a          ;2693
000288  2100              MOVS     r1,#0                 ;2693
00028a  f7fffffe          BL       algorithm_coord_IsEdgeArea
00028e  2800              CMP      r0,#0                 ;2693
000290  bf14              ITE      NE                    ;2694
000292  f44f7080          MOVNE    r0,#0x100             ;2694
000296  2040              MOVEQ    r0,#0x40              ;2697
000298  4580              CMP      r8,r0                 ;2700
00029a  dd13              BLE      |L16.708|
00029c  f8d61577          LDR      r1,[r6,#0x577]        ;2701
0002a0  f8d60122          LDR      r0,[r6,#0x122]        ;2701
0002a4  eb010141          ADD      r1,r1,r1,LSL #1       ;2701
0002a8  4408              ADD      r0,r0,r1              ;2701
0002aa  1080              ASRS     r0,r0,#2              ;2701
0002ac  f8c60122          STR      r0,[r6,#0x122]        ;2701
0002b0  f8d6157b          LDR      r1,[r6,#0x57b]        ;2702
0002b4  f8d60126          LDR      r0,[r6,#0x126]        ;2702
0002b8  eb010141          ADD      r1,r1,r1,LSL #1       ;2702
0002bc  4408              ADD      r0,r0,r1              ;2702
0002be  1080              ASRS     r0,r0,#2              ;2702
0002c0  f8c60126          STR      r0,[r6,#0x126]        ;2702
                  |L16.708|
0002c4  f8b9045c          LDRH     r0,[r9,#0x45c]        ;2705
0002c8  2800              CMP      r0,#0                 ;2705
0002ca  bf1c              ITT      NE                    ;2705
0002cc  f8b90b49          LDRHNE   r0,[r9,#0xb49]        ;2705
0002d0  2800              CMPNE    r0,#0                 ;2705
0002d2  d023              BEQ      |L16.796|
0002d4  f8d6040c          LDR      r0,[r6,#0x40c]        ;2707
0002d8  f8d6131a          LDR      r1,[r6,#0x31a]        ;2707
0002dc  ebc00041          RSB      r0,r0,r1,LSL #1       ;2707
0002e0  f8d61122          LDR      r1,[r6,#0x122]        ;2707
0002e4  eb010141          ADD      r1,r1,r1,LSL #1       ;2707
0002e8  4408              ADD      r0,r0,r1              ;2707
0002ea  ea4f00a0          ASR      r0,r0,#2              ;2707
0002ee  f8c60122          STR      r0,[r6,#0x122]        ;2707
0002f2  f8d60410          LDR      r0,[r6,#0x410]        ;2708
0002f6  f8d6131e          LDR      r1,[r6,#0x31e]        ;2708
0002fa  ebc00041          RSB      r0,r0,r1,LSL #1       ;2708
0002fe  f8d61126          LDR      r1,[r6,#0x126]        ;2708
000302  eb010141          ADD      r1,r1,r1,LSL #1       ;2708
000306  4408              ADD      r0,r0,r1              ;2708
000308  ea4f00a0          ASR      r0,r0,#2              ;2708
00030c  f8c60126          STR      r0,[r6,#0x126]        ;2708
000310  e004              B        |L16.796|
000312  bf00              NOP                            ;2714
                  |L16.788|
000314  eb070004          ADD      r0,r7,r4              ;2714
000318  f880bae5          STRB     r11,[r0,#0xae5]       ;2714
                  |L16.796|
00031c  f8b90172          LDRH     r0,[r9,#0x172]        ;2718
000320  2800              CMP      r0,#0                 ;2718
000322  f0008179          BEQ.W    |L16.1560|
000326  68e8              LDR      r0,[r5,#0xc]          ;2721  ; thisModeConf
000328  2600              MOVS     r6,#0                 ;2720
00032a  f8b0106a          LDRH     r1,[r0,#0x6a]         ;2721
00032e  2900              CMP      r1,#0                 ;2721
000330  f000816f          BEQ.W    |L16.1554|
000334  f8b92186          LDRH     r2,[r9,#0x186]        ;2721
000338  f890306c          LDRB     r3,[r0,#0x6c]         ;2721
00033c  429a              CMP      r2,r3                 ;2721
00033e  f2408168          BLS.W    |L16.1554|
000342  f8b9236a          LDRH     r2,[r9,#0x36a]        ;2747
000346  2a00              CMP      r2,#0                 ;2747
000348  f000814e          BEQ.W    |L16.1512|
00034c  193a              ADDS     r2,r7,r4              ;2750
00034e  9208              STR      r2,[sp,#0x20]         ;2750
000350  f8922b93          LDRB     r2,[r2,#0xb93]        ;2750
000354  f8900065          LDRB     r0,[r0,#0x65]         ;2809
000358  b11a              CBZ      r2,|L16.866|
00035a  2805              CMP      r0,#5                 ;2809
00035c  d079              BEQ      |L16.1106|
00035e  f000b91b          B.W      |L16.1432|
                  |L16.866|
000362  2805              CMP      r0,#5                 ;2752
000364  d176              BNE      |L16.1108|
000366  692a              LDR      r2,[r5,#0x10]         ;2752  ; thisInfo
000368  f5025180          ADD      r1,r2,#0x1000         ;2752
00036c  f8910fa9          LDRB     r0,[r1,#0xfa9]        ;2752
000370  b388              CBZ      r0,|L16.982|
000372  f8d16faa          LDR      r6,[r1,#0xfaa]        ;2754
000376  2e00              CMP      r6,#0                 ;2754
000378  bf04              ITT      EQ                    ;2754
00037a  f8d11fae          LDREQ    r1,[r1,#0xfae]        ;2754
00037e  2900              CMPEQ    r1,#0                 ;2754
000380  d02a              BEQ      |L16.984|
000382  f50250e0          ADD      r0,r2,#0x1c00         ;2773
000386  f8d083ae          LDR      r8,[r0,#0x3ae]        ;2773
00038a  eb0700c4          ADD      r0,r7,r4,LSL #3       ;2774
00038e  f8d01577          LDR      r1,[r0,#0x577]        ;2774
000392  f8d02af9          LDR      r2,[r0,#0xaf9]        ;2774
000396  eba10102          SUB      r1,r1,r2              ;2774
00039a  9106              STR      r1,[sp,#0x18]         ;2775
00039c  f8d0157b          LDR      r1,[r0,#0x57b]        ;2775
0003a0  f8d00afd          LDR      r0,[r0,#0xafd]        ;2775
0003a4  eba10900          SUB      r9,r1,r0              ;2775
0003a8  f1c60000          RSB      r0,r6,#0              ;2775
0003ac  fb00f000          MUL      r0,r0,r0              ;2775
0003b0  f1c80100          RSB      r1,r8,#0              ;2775
0003b4  fb010001          MLA      r0,r1,r1,r0           ;2775
0003b8  f7fffffe          BL       algorithm_calc_sqrt
0003bc  9906              LDR      r1,[sp,#0x18]         ;2777
0003be  4371              MULS     r1,r6,r1              ;2777
0003c0  fb081109          MLA      r1,r8,r9,r1           ;2777
0003c4  fb91f0f0          SDIV     r0,r1,r0              ;2777
0003c8  2800              CMP      r0,#0                 ;2778
0003ca  bfcc              ITE      GT                    ;2779
0003cc  ea4f0980          LSLGT    r9,r0,#2              ;2779
0003d0  f1c00900          RSBLE    r9,r0,#0              ;2781
0003d4  e050              B        |L16.1144|
                  |L16.982|
0003d6  e03d              B        |L16.1108|
                  |L16.984|
0003d8  2801              CMP      r0,#1                 ;2756
0003da  d019              BEQ      |L16.1040|
0003dc  eb0701c4          ADD      r1,r7,r4,LSL #3       ;2765
0003e0  2802              CMP      r0,#2                 ;2760
0003e2  f8d10af9          LDR      r0,[r1,#0xaf9]        ;2765
0003e6  d027              BEQ      |L16.1080|
0003e8  f8d12577          LDR      r2,[r1,#0x577]        ;2765
0003ec  f8d13afd          LDR      r3,[r1,#0xafd]        ;2765
0003f0  f8d1157b          LDR      r1,[r1,#0x57b]        ;2765
0003f4  1a80              SUBS     r0,r0,r2              ;2765
0003f6  fb00f200          MUL      r2,r0,r0              ;2765
0003fa  1a58              SUBS     r0,r3,r1              ;2765
0003fc  e002              B        |L16.1028|
0003fe  0000              DCW      0x0000
                  |L16.1024|
                          DCD      ||.data||
                  |L16.1028|
000404  fb002000          MLA      r0,r0,r0,r2           ;2765
000408  f7fffffe          BL       algorithm_calc_sqrt
00040c  4681              MOV      r9,r0                 ;2765
00040e  e033              B        |L16.1144|
                  |L16.1040|
000410  eb0701c4          ADD      r1,r7,r4,LSL #3       ;2757
000414  f8d10afd          LDR      r0,[r1,#0xafd]        ;2757
000418  f8d1257b          LDR      r2,[r1,#0x57b]        ;2757
00041c  1a80              SUBS     r0,r0,r2              ;2757
00041e  bf48              IT       MI                    ;2757
000420  4240              RSBMI    r0,r0,#0              ;2757
000422  0082              LSLS     r2,r0,#2              ;2757
000424  f8d10af9          LDR      r0,[r1,#0xaf9]        ;2758
000428  f8d11577          LDR      r1,[r1,#0x577]        ;2758
00042c  1a40              SUBS     r0,r0,r1              ;2758
00042e  d500              BPL      |L16.1074|
                  |L16.1072|
000430  4240              RSBS     r0,r0,#0              ;2762
                  |L16.1074|
000432  eb021920          ADD      r9,r2,r0,ASR #4       ;2758
000436  e01f              B        |L16.1144|
                  |L16.1080|
000438  f8d12577          LDR      r2,[r1,#0x577]        ;2761
00043c  1a80              SUBS     r0,r0,r2              ;2761
00043e  bf48              IT       MI                    ;2761
000440  4240              RSBMI    r0,r0,#0              ;2761
000442  0082              LSLS     r2,r0,#2              ;2761
000444  f8d10afd          LDR      r0,[r1,#0xafd]        ;2762
000448  f8d1157b          LDR      r1,[r1,#0x57b]        ;2762
00044c  1a40              SUBS     r0,r0,r1              ;2762
00044e  d5f0              BPL      |L16.1074|
000450  e7ee              B        |L16.1072|
                  |L16.1106|
000452  e03c              B        |L16.1230|
                  |L16.1108|
000454  eb0700c4          ADD      r0,r7,r4,LSL #3       ;2785
000458  f8d03af9          LDR      r3,[r0,#0xaf9]        ;2785
00045c  f8d02577          LDR      r2,[r0,#0x577]        ;2785
000460  f8d01afd          LDR      r1,[r0,#0xafd]        ;2785
000464  f8d0057b          LDR      r0,[r0,#0x57b]        ;2785
000468  1a9a              SUBS     r2,r3,r2              ;2785
00046a  4352              MULS     r2,r2,r2              ;2785
00046c  1a08              SUBS     r0,r1,r0              ;2785
00046e  fb002000          MLA      r0,r0,r0,r2           ;2785
000472  f7fffffe          BL       algorithm_calc_sqrt
000476  4681              MOV      r9,r0                 ;2785
                  |L16.1144|
000478  68e8              LDR      r0,[r5,#0xc]          ;2791  ; thisModeConf
00047a  eb0708c4          ADD      r8,r7,r4,LSL #3       ;2793
00047e  2100              MOVS     r1,#0                 ;2793
000480  f8b0606a          LDRH     r6,[r0,#0x6a]         ;2791
000484  f208301a          ADD      r0,r8,#0x31a          ;2793
000488  f7fffffe          BL       algorithm_coord_IsEdgeArea
00048c  2800              CMP      r0,#0                 ;2793
00048e  bfc8              IT       GT                    ;2794
000490  0076              LSLGT    r6,r6,#1              ;2794
000492  45b1              CMP      r9,r6                 ;2797
000494  da06              BGE      |L16.1188|
000496  f8d80af9          LDR      r0,[r8,#0xaf9]        ;2799
00049a  f8c80122          STR      r0,[r8,#0x122]        ;2799
00049e  f8d80afd          LDR      r0,[r8,#0xafd]        ;2799
0004a2  e011              B        |L16.1224|
                  |L16.1188|
0004a4  9908              LDR      r1,[sp,#0x20]         ;2804
0004a6  2005              MOVS     r0,#5                 ;2804
0004a8  f8810b93          STRB     r0,[r1,#0xb93]        ;2804
0004ac  f8d8031a          LDR      r0,[r8,#0x31a]        ;2805
0004b0  f8d81122          LDR      r1,[r8,#0x122]        ;2805
0004b4  4408              ADD      r0,r0,r1              ;2805
0004b6  1040              ASRS     r0,r0,#1              ;2805
0004b8  f8c80122          STR      r0,[r8,#0x122]        ;2805
0004bc  f8d8031e          LDR      r0,[r8,#0x31e]        ;2806
0004c0  f8d81126          LDR      r1,[r8,#0x126]        ;2806
0004c4  4408              ADD      r0,r0,r1              ;2806
0004c6  1040              ASRS     r0,r0,#1              ;2806
                  |L16.1224|
0004c8  f8c80126          STR      r0,[r8,#0x126]        ;2799
0004cc  e064              B        |L16.1432|
                  |L16.1230|
0004ce  f8b9054e          LDRH     r0,[r9,#0x54e]        ;2809
0004d2  b3e8              CBZ      r0,|L16.1360|
0004d4  6928              LDR      r0,[r5,#0x10]         ;2809  ; thisInfo
0004d6  f5005080          ADD      r0,r0,#0x1000         ;2809
0004da  f8900fa9          LDRB     r0,[r0,#0xfa9]        ;2809
0004de  b3b8              CBZ      r0,|L16.1360|
0004e0  eb0709c4          ADD      r9,r7,r4,LSL #3       ;2812
0004e4  088e              LSRS     r6,r1,#2              ;2811
0004e6  f8d924fe          LDR      r2,[r9,#0x4fe]        ;2812
0004ea  f8d90122          LDR      r0,[r9,#0x122]        ;2812
0004ee  f8d93502          LDR      r3,[r9,#0x502]        ;2812
0004f2  f8d91126          LDR      r1,[r9,#0x126]        ;2812
0004f6  1a10              SUBS     r0,r2,r0              ;2812
0004f8  4340              MULS     r0,r0,r0              ;2812
0004fa  1a59              SUBS     r1,r3,r1              ;2812
0004fc  fb010001          MLA      r0,r1,r1,r0           ;2812
000500  f7fffffe          BL       algorithm_calc_sqrt
000504  42b0              CMP      r0,r6                 ;2812
000506  da07              BGE      |L16.1304|
000508  9808              LDR      r0,[sp,#0x20]         ;2813
00050a  9908              LDR      r1,[sp,#0x20]         ;2813
00050c  f8900b93          LDRB     r0,[r0,#0xb93]        ;2813
000510  1e40              SUBS     r0,r0,#1              ;2813
000512  f8810b93          STRB     r0,[r1,#0xb93]        ;2813
000516  e033              B        |L16.1408|
                  |L16.1304|
000518  6928              LDR      r0,[r5,#0x10]         ;2817  ; thisInfo
00051a  f50051e0          ADD      r1,r0,#0x1c00         ;2817
00051e  f8d103aa          LDR      r0,[r1,#0x3aa]        ;2817
000522  f8d113ae          LDR      r1,[r1,#0x3ae]        ;2817
000526  4240              RSBS     r0,r0,#0              ;2817
000528  fb00f200          MUL      r2,r0,r0              ;2817
00052c  4248              RSBS     r0,r1,#0              ;2817
00052e  fb002000          MLA      r0,r0,r0,r2           ;2817
000532  f7fffffe          BL       algorithm_calc_sqrt
000536  4680              MOV      r8,r0                 ;2817
000538  f8d924fe          LDR      r2,[r9,#0x4fe]        ;2817
00053c  f8d90122          LDR      r0,[r9,#0x122]        ;2817
000540  f8d93502          LDR      r3,[r9,#0x502]        ;2817
000544  f8d91126          LDR      r1,[r9,#0x126]        ;2817
000548  1a10              SUBS     r0,r2,r0              ;2817
00054a  4340              MULS     r0,r0,r0              ;2817
00054c  1a59              SUBS     r1,r3,r1              ;2817
00054e  e000              B        |L16.1362|
                  |L16.1360|
000550  e022              B        |L16.1432|
                  |L16.1362|
000552  fb010001          MLA      r0,r1,r1,r0           ;2817
000556  f7fffffe          BL       algorithm_calc_sqrt
00055a  4540              CMP      r0,r8                 ;2817
00055c  dd10              BLE      |L16.1408|
00055e  f8d90122          LDR      r0,[r9,#0x122]        ;2819
000562  f8d914fe          LDR      r1,[r9,#0x4fe]        ;2819
000566  1a41              SUBS     r1,r0,r1              ;2819
000568  6928              LDR      r0,[r5,#0x10]         ;2819  ; thisInfo
00056a  f5005080          ADD      r0,r0,#0x1000         ;2819
00056e  f8c01faa          STR      r1,[r0,#0xfaa]        ;2819
000572  f8d91126          LDR      r1,[r9,#0x126]        ;2820
000576  f8d92502          LDR      r2,[r9,#0x502]        ;2820
00057a  1a89              SUBS     r1,r1,r2              ;2820
00057c  f8c01fae          STR      r1,[r0,#0xfae]        ;2820
                  |L16.1408|
000580  9808              LDR      r0,[sp,#0x20]         ;2824
000582  f8900b93          LDRB     r0,[r0,#0xb93]        ;2824
000586  b938              CBNZ     r0,|L16.1432|
000588  f8d90122          LDR      r0,[r9,#0x122]        ;2826
00058c  f8c90af9          STR      r0,[r9,#0xaf9]        ;2826
000590  f8d90126          LDR      r0,[r9,#0x126]        ;2826
000594  f8c90afd          STR      r0,[r9,#0xafd]        ;2826
                  |L16.1432|
000598  6928              LDR      r0,[r5,#0x10]         ;2829  ; thisInfo
00059a  f5005080          ADD      r0,r0,#0x1000         ;2829
00059e  f8900fa8          LDRB     r0,[r0,#0xfa8]        ;2829
0005a2  2801              CMP      r0,#1                 ;2829
0005a4  d138              BNE      |L16.1560|
0005a6  9808              LDR      r0,[sp,#0x20]         ;2831
0005a8  f8900b93          LDRB     r0,[r0,#0xb93]        ;2831
0005ac  b380              CBZ      r0,|L16.1552|
0005ae  eb0703c4          ADD      r3,r7,r4,LSL #3       ;2831
0005b2  f8d30af9          LDR      r0,[r3,#0xaf9]        ;2831
0005b6  f8d31577          LDR      r1,[r3,#0x577]        ;2831
0005ba  f8d32afd          LDR      r2,[r3,#0xafd]        ;2831
0005be  f8d3357b          LDR      r3,[r3,#0x57b]        ;2831
0005c2  1a40              SUBS     r0,r0,r1              ;2831
0005c4  fb00f100          MUL      r1,r0,r0              ;2831
0005c8  1ad0              SUBS     r0,r2,r3              ;2831
0005ca  fb001000          MLA      r0,r0,r0,r1           ;2831
0005ce  f7fffffe          BL       algorithm_calc_sqrt
0005d2  ebb00f86          CMP      r0,r6,LSL #2          ;2831
0005d6  dd1f              BLE      |L16.1560|
                  |L16.1496|
0005d8  6928              LDR      r0,[r5,#0x10]         ;2832  ; thisInfo
0005da  f5005080          ADD      r0,r0,#0x1000         ;2832
0005de  f880bfa9          STRB     r11,[r0,#0xfa9]       ;2832
0005e2  f880bfa8          STRB     r11,[r0,#0xfa8]       ;2833
0005e6  e017              B        |L16.1560|
                  |L16.1512|
0005e8  6928              LDR      r0,[r5,#0x10]         ;2839  ; thisInfo
0005ea  f5005080          ADD      r0,r0,#0x1000         ;2839
0005ee  f8900fa8          LDRB     r0,[r0,#0xfa8]        ;2839
0005f2  2801              CMP      r0,#1                 ;2839
0005f4  bf04              ITT      EQ                    ;2839
0005f6  7838              LDRBEQ   r0,[r7,#0]            ;2839
0005f8  2801              CMPEQ    r0,#1                 ;2839
0005fa  d10d              BNE      |L16.1560|
0005fc  eb0700c4          ADD      r0,r7,r4,LSL #3       ;2839
000600  f04f0100          MOV      r1,#0                 ;2839
000604  f5007091          ADD      r0,r0,#0x122          ;2839
000608  f7fffffe          BL       algorithm_coord_IsEdgeArea
00060c  2800              CMP      r0,#0                 ;2839
00060e  d1e3              BNE      |L16.1496|
                  |L16.1552|
000610  e002              B        |L16.1560|
                  |L16.1554|
000612  1938              ADDS     r0,r7,r4              ;2849
000614  f880ab93          STRB     r10,[r0,#0xb93]       ;2849
                  |L16.1560|
000618  f8d5c00c          LDR      r12,[r5,#0xc]         ;2854  ; thisModeConf
00061c  f99c009d          LDRSB    r0,[r12,#0x9d]        ;2854
000620  2800              CMP      r0,#0                 ;2854
000622  dd6c              BLE      |L16.1790|
000624  eb0702c4          ADD      r2,r7,r4,LSL #3       ;2857
000628  f8dc3054          LDR      r3,[r12,#0x54]        ;2856
00062c  f8d26122          LDR      r6,[r2,#0x122]        ;2857
000630  f5b67f80          CMP      r6,#0x100             ;2857
000634  db11              BLT      |L16.1626|
000636  6929              LDR      r1,[r5,#0x10]         ;2857  ; thisInfo
000638  f8d28126          LDR      r8,[r2,#0x126]        ;2857
00063c  f8d19e1b          LDR      r9,[r1,#0xe1b]        ;2857
000640  f5a97980          SUB      r9,r9,#0x100          ;2857
000644  45c1              CMP      r9,r8                 ;2857
000646  db08              BLT      |L16.1626|
000648  f8d11e17          LDR      r1,[r1,#0xe17]        ;2857
00064c  f5a17180          SUB      r1,r1,#0x100          ;2857
000650  42b1              CMP      r1,r6                 ;2857
000652  bfa8              IT       GE                    ;2857
000654  f5b87f80          CMPGE    r8,#0x100             ;2857
000658  da51              BGE      |L16.1790|
                  |L16.1626|
00065a  f8d2831a          LDR      r8,[r2,#0x31a]        ;2860
00065e  ebb80106          SUBS     r1,r8,r6              ;2860
000662  bf48              IT       MI                    ;2860
000664  4249              RSBMI    r1,r1,#0              ;2860
000666  4401              ADD      r1,r1,r0              ;2861
000668  290a              CMP      r1,#0xa               ;2862
00066a  db5c              BLT      |L16.1830|
                  |L16.1644|
00066c  fa0af003          LSL      r0,r10,r3             ;2863
000670  4288              CMP      r0,r1                 ;2863
000672  db5a              BLT      |L16.1834|
                  |L16.1652|
000674  eba00901          SUB      r9,r0,r1              ;2865
000678  fb09f808          MUL      r8,r9,r8              ;2865
00067c  fb018106          MLA      r1,r1,r6,r8           ;2865
000680  1e5e              SUBS     r6,r3,#1              ;2865
000682  fa0af806          LSL      r8,r10,r6             ;2865
000686  4441              ADD      r1,r1,r8              ;2865
000688  4119              ASRS     r1,r1,r3              ;2865
00068a  f8c21122          STR      r1,[r2,#0x122]        ;2865
00068e  f8d2931e          LDR      r9,[r2,#0x31e]        ;2867
000692  f8d26126          LDR      r6,[r2,#0x126]        ;2867
000696  ebb90106          SUBS     r1,r9,r6              ;2867
00069a  bf48              IT       MI                    ;2867
00069c  4249              RSBMI    r1,r1,#0              ;2867
00069e  f99cc09d          LDRSB    r12,[r12,#0x9d]       ;2868
0006a2  4461              ADD      r1,r1,r12             ;2868
0006a4  290a              CMP      r1,#0xa               ;2869
0006a6  db42              BLT      |L16.1838|
                  |L16.1704|
0006a8  4288              CMP      r0,r1                 ;2870
0006aa  db42              BLT      |L16.1842|
                  |L16.1708|
0006ac  1a40              SUBS     r0,r0,r1              ;2873
0006ae  fb00f009          MUL      r0,r0,r9              ;2873
0006b2  fb010006          MLA      r0,r1,r6,r0           ;2873
0006b6  4440              ADD      r0,r0,r8              ;2873
0006b8  4118              ASRS     r0,r0,r3              ;2873
0006ba  f8c20126          STR      r0,[r2,#0x126]        ;2873
0006be  e01e              B        |L16.1790|
                  |L16.1728|
0006c0  68e8              LDR      r0,[r5,#0xc]          ;2878  ; thisModeConf
0006c2  f8b0006a          LDRH     r0,[r0,#0x6a]         ;2878
0006c6  2800              CMP      r0,#0                 ;2878
0006c8  bf1c              ITT      NE                    ;2878
0006ca  f8b9037e          LDRHNE   r0,[r9,#0x37e]        ;2878
0006ce  2800              CMPNE    r0,#0                 ;2878
0006d0  d010              BEQ      |L16.1780|
0006d2  eb070004          ADD      r0,r7,r4              ;2880
0006d6  f8900b93          LDRB     r0,[r0,#0xb93]        ;2880
0006da  2800              CMP      r0,#0                 ;2880
0006dc  8868              LDRH     r0,[r5,#2]            ;2886  ; AddDistTh
0006de  d014              BEQ      |L16.1802|
0006e0  380a              SUBS     r0,r0,#0xa            ;2880
0006e2  b200              SXTH     r0,r0                 ;2881
0006e4  8068              STRH     r0,[r5,#2]            ;2881
0006e6  f1100f20          CMN      r0,#0x20              ;2882
0006ea  bfb8              IT       LT                    ;2883
0006ec  f06f001f          MVNLT    r0,#0x1f              ;2883
0006f0  da00              BGE      |L16.1780|
                  |L16.1778|
0006f2  8068              STRH     r0,[r5,#2]            ;2888
                  |L16.1780|
0006f4  1938              ADDS     r0,r7,r4              ;2893
0006f6  f880bae5          STRB     r11,[r0,#0xae5]       ;2893
0006fa  f880bb93          STRB     r11,[r0,#0xb93]       ;2894
                  |L16.1790|
0006fe  1e64              SUBS     r4,r4,#1              ;2894
000700  f4bfac8a          BCS      |L16.24|
000704  b00f              ADD      sp,sp,#0x3c
000706  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.1802|
00070a  300a              ADDS     r0,r0,#0xa
00070c  b200              SXTH     r0,r0                 ;2886
00070e  8068              STRH     r0,[r5,#2]            ;2886
000710  2880              CMP      r0,#0x80              ;2887
000712  bfc8              IT       GT                    ;2888
000714  2080              MOVGT    r0,#0x80              ;2888
000716  dded              BLE      |L16.1780|
000718  e7eb              B        |L16.1778|
00071a  bf00              NOP                            ;2505
                  |L16.1820|
00071c  f04f080a          MOV      r8,#0xa               ;2505
000720  e4c7              B        |L16.178|
                  |L16.1826|
000722  4690              MOV      r8,r2                 ;2508
000724  e4cc              B        |L16.192|
                  |L16.1830|
000726  210a              MOVS     r1,#0xa               ;2862
000728  e7a0              B        |L16.1644|
                  |L16.1834|
00072a  4601              MOV      r1,r0                 ;2863
00072c  e7a2              B        |L16.1652|
                  |L16.1838|
00072e  210a              MOVS     r1,#0xa               ;2869
000730  e7ba              B        |L16.1704|
                  |L16.1842|
000732  4601              MOV      r1,r0                 ;2870
000734  e7ba              B        |L16.1708|
;;;2899   
                          ENDP


                          AREA ||i.algorithm_coord_tracking_pos||, CODE, READONLY, ALIGN=2

                  algorithm_coord_tracking_pos PROC
;;;1339   extern ePartialSensing_t g_RetVal;
;;;1340   void algorithm_coord_tracking_pos(int mode)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;1341   {
;;;1342       uint8_t pl, cl; // Index of Previous Label, Current Label
;;;1343   //    int32_t iDist, iDist2, iMinDist; // NOTE : not used
;;;1344       int32_t iDist, iMinDist;
;;;1345   //    int match; // NOTE : not used
;;;1346       int8_t cReorderRemap[LOOSE_POSBUF_];
;;;1347       uint32_t ulPrematchedDist[LOOSE_POSBUF_];
;;;1348       int32_t lDistanceMap[LOOSE_POSBUF_][LOOSE_POSBUF_];
;;;1349   //    tXY_t pred_pos, avg_pos, curr_pos; // NOTE : not used
;;;1350       tXY_t pred_pos;
;;;1351       tXY_t curr_pos_sum;
;;;1352       tXY_t prev_pos_sum;
;;;1353       tXY_t comp_pos;
;;;1354       int match_cl, match_pl;
;;;1355       int iDistanceThd;
;;;1356       tXY_t pos_max, pos_min;
;;;1357       bool_t bCompFlag;
;;;1358   #if (PalmCandidateTouchCut_EN == YES)
;;;1359   	static uint16_t usPalmCandiShapeMatchingLearningCnt = 0;
;;;1360   #endif
;;;1361   	
;;;1362   	tCoordInfo_t 	*temp_coord;
;;;1363   	
;;;1364   #if !defined(FINGER_ONLY)
;;;1365   	static int sPMode = 0;
;;;1366   
;;;1367   	if(mode != FULL_MODE)
;;;1368   	{
;;;1369   		temp_coord = &thisInfo->tCoord_local;
;;;1370   		if(sPMode != mode){
;;;1371   			algorithm_coord_init_local();
;;;1372   			memset(tPastPosHist,-1,sizeof(tPastPosHist));
;;;1373   		}
;;;1374   	}
;;;1375   	else
;;;1376   		temp_coord = &thisInfo->tCoord;
;;;1377   	
;;;1378   	sPMode = mode;
;;;1379   #else /* !defined(FINGER_ONLY) */
;;;1380   	temp_coord = &thisInfo->tCoord;
000004  48fd              LDR      r0,|L17.1020|
000006  f5ad6d93          SUB      sp,sp,#0x498          ;1341
;;;1381   #endif /* !defined(FINGER_ONLY) */
;;;1382   
;;;1383       temp_coord->tPos.sFinger_ = MIN(temp_coord->tTempPos.sFinger_, MAX_TOUCH_);
00000a  6904              LDR      r4,[r0,#0x10]  ; thisInfo
00000c  f894535e          LDRB     r5,[r4,#0x35e]
000010  f204345e          ADD      r4,r4,#0x35e
000014  2d0a              CMP      r5,#0xa
000016  bf28              IT       CS
000018  250a              MOVCS    r5,#0xa
00001a  f8845121          STRB     r5,[r4,#0x121]
;;;1384   
;;;1385       memset(&cReorderRemap, -1, sizeof(cReorderRemap));
00001e  f04f32ff          MOV      r2,#0xffffffff
000022  2110              MOVS     r1,#0x10
000024  f50d6084          ADD      r0,sp,#0x420
000028  f8cd540c          STR      r5,[sp,#0x40c]
00002c  f7fffffe          BL       __aeabi_memset
;;;1386       memset(&ulPrematchedDist, UINT8_MAX, sizeof(ulPrematchedDist));
000030  22ff              MOVS     r2,#0xff
000032  2140              MOVS     r1,#0x40
000034  f50d6086          ADD      r0,sp,#0x430
000038  f7fffffe          BL       __aeabi_memset
;;;1387   
;;;1388   #if 1
;;;1389   	if( temp_coord->tPos.sFinger_ > 1 && temp_coord->tPastPos[0].sFinger_ == temp_coord->tPos.sFinger_ )
;;;1390   	{
;;;1391   		curr_pos_sum.x = 0;
;;;1392   		curr_pos_sum.y = 0;
;;;1393   		prev_pos_sum.x = 0;
;;;1394   		prev_pos_sum.y = 0;
;;;1395   		pos_min.x = INT32_MAX;
00003c  f06f4e00          MVN      lr,#0x80000000
000040  2d01              CMP      r5,#1                 ;1389
000042  d968              BLS      |L17.278|
000044  f8941319          LDRB     r1,[r4,#0x319]        ;1389
000048  f8dd040c          LDR      r0,[sp,#0x40c]        ;1389
00004c  4281              CMP      r1,r0                 ;1389
00004e  d162              BNE      |L17.278|
000050  2100              MOVS     r1,#0                 ;1391
000052  460e              MOV      r6,r1                 ;1391
000054  4637              MOV      r7,r6                 ;1392
000056  46bc              MOV      r12,r7                ;1393
;;;1396   		pos_max.x = 0;
;;;1397   		pos_min.y = INT32_MAX;
;;;1398   		pos_max.y = 0;
;;;1399   
;;;1400   		for( cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++ )
000058  f894b000          LDRB     r11,[r4,#0]
00005c  4665              MOV      r5,r12                ;1394
00005e  4672              MOV      r2,lr                 ;1395
000060  4673              MOV      r3,lr                 ;1397
000062  4628              MOV      r0,r5                 ;1398
000064  468a              MOV      r10,r1
000066  f1bb0f00          CMP      r11,#0
00006a  d920              BLS      |L17.174|
                  |L17.108|
;;;1401   		{
;;;1402   			if( temp_coord->tTempPos.vusR[cl] != 0 )
00006c  eb04084a          ADD      r8,r4,r10,LSL #1
000070  f8b880a1          LDRH     r8,[r8,#0xa1]
000074  f1b80f00          CMP      r8,#0
000078  d013              BEQ      |L17.162|
;;;1403   			{
;;;1404   				curr_pos_sum.x += temp_coord->tTempPos.tXY[cl].x;
00007a  eb0409ca          ADD      r9,r4,r10,LSL #3
00007e  f8d98001          LDR      r8,[r9,#1]
;;;1405   				curr_pos_sum.y += temp_coord->tTempPos.tXY[cl].y;
000082  f8d99005          LDR      r9,[r9,#5]
000086  4446              ADD      r6,r6,r8              ;1404
000088  444f              ADD      r7,r7,r9
;;;1406   
;;;1407   				if( pos_min.x > temp_coord->tTempPos.tXY[cl].x )
;;;1408   					pos_min.x = temp_coord->tTempPos.tXY[cl].x;
00008a  4542              CMP      r2,r8
00008c  bfc8              IT       GT
00008e  4642              MOVGT    r2,r8
;;;1409   				if( pos_max.x < temp_coord->tTempPos.tXY[cl].x )
;;;1410   					pos_max.x = temp_coord->tTempPos.tXY[cl].x;
000090  4541              CMP      r1,r8
000092  bfd8              IT       LE
000094  4641              MOVLE    r1,r8
;;;1411   				if( pos_min.y > temp_coord->tTempPos.tXY[cl].y )
;;;1412   					pos_min.y = temp_coord->tTempPos.tXY[cl].y;
000096  454b              CMP      r3,r9
000098  bfc8              IT       GT
00009a  464b              MOVGT    r3,r9
;;;1413   				if( pos_max.y < temp_coord->tTempPos.tXY[cl].y )
;;;1414   					pos_max.y = temp_coord->tTempPos.tXY[cl].y;
00009c  4548              CMP      r0,r9
00009e  bfd8              IT       LE
0000a0  4648              MOVLE    r0,r9
                  |L17.162|
0000a2  f10a0801          ADD      r8,r10,#1
0000a6  f0080aff          AND      r10,r8,#0xff
0000aa  45d3              CMP      r11,r10
0000ac  d8de              BHI      |L17.108|
                  |L17.174|
;;;1415   			}
;;;1416   		}
;;;1417   
;;;1418   		for( pl = 0; pl < MAX_TOUCH_; pl++ )
0000ae  f04f0800          MOV      r8,#0
;;;1419   		{
;;;1420   			if( temp_coord->tPastPos[0].vusR[pl] != 0 )
0000b2  bf00              NOP      
                  |L17.180|
0000b4  eb040948          ADD      r9,r4,r8,LSL #1
0000b8  f8b9937e          LDRH     r9,[r9,#0x37e]
0000bc  f1b90f00          CMP      r9,#0
0000c0  d007              BEQ      |L17.210|
;;;1421   			{
;;;1422   				prev_pos_sum.x += temp_coord->tOrgPastPos[0].tXY[pl].x;
0000c2  eb0409c8          ADD      r9,r4,r8,LSL #3
0000c6  f8d9a67c          LDR      r10,[r9,#0x67c]
;;;1423   				prev_pos_sum.y += temp_coord->tOrgPastPos[0].tXY[pl].y;
0000ca  f8d99680          LDR      r9,[r9,#0x680]
0000ce  44d4              ADD      r12,r12,r10           ;1422
0000d0  444d              ADD      r5,r5,r9
                  |L17.210|
0000d2  f1080801          ADD      r8,r8,#1
0000d6  f00808ff          AND      r8,r8,#0xff
0000da  f1b80f0a          CMP      r8,#0xa
0000de  d3e9              BCC      |L17.180|
;;;1424   			}
;;;1425   		}
;;;1426   		comp_pos.x = curr_pos_sum.x - prev_pos_sum.x;
0000e0  eba60c0c          SUB      r12,r6,r12
;;;1427   		comp_pos.y = curr_pos_sum.y - prev_pos_sum.y;
;;;1428   		comp_pos.x = comp_pos.x / temp_coord->tPos.sFinger_;
0000e4  f8dd640c          LDR      r6,[sp,#0x40c]
0000e8  1b7d              SUBS     r5,r7,r5              ;1427
0000ea  fb9cfcf6          SDIV     r12,r12,r6
;;;1429   		comp_pos.y = comp_pos.y / temp_coord->tPos.sFinger_;
0000ee  f8cdc470          STR      r12,[sp,#0x470]
0000f2  fb95fcf6          SDIV     r12,r5,r6
;;;1430   
;;;1431   		if( (pos_max.x - pos_min.x) < (thisModeConf->CoordTracking.usCenterMatchDistanceThd << POS_BOOST_SHIFT_)
0000f6  1a8a              SUBS     r2,r1,r2
0000f8  49c0              LDR      r1,|L17.1020|
0000fa  f8cdc414          STR      r12,[sp,#0x414]
0000fe  68c9              LDR      r1,[r1,#0xc]  ; thisModeConf
000100  f8d1108c          LDR      r1,[r1,#0x8c]
000104  ebb22f01          CMP      r2,r1,LSL #8
000108  bf3e              ITTT     CC
00010a  1ac0              SUBCC    r0,r0,r3
00010c  ebb02f01          CMPCC    r0,r1,LSL #8
;;;1432     		 && (pos_max.y - pos_min.y) < (thisModeConf->CoordTracking.usCenterMatchDistanceThd << POS_BOOST_SHIFT_) )
;;;1433   		{
;;;1434   			bCompFlag = 1;
000110  f04f0801          MOVCC    r8,#1
000114  d301              BCC      |L17.282|
                  |L17.278|
;;;1435   		}
;;;1436   		else
;;;1437   		{
;;;1438   			bCompFlag = 0;
000116  f04f0800          MOV      r8,#0
                  |L17.282|
;;;1439   		}
;;;1440   	}
;;;1441   	else
;;;1442   	{
;;;1443   		bCompFlag = 0;
;;;1444   	}
;;;1445   
;;;1446   	for (pl = 0; pl < LOOSE_POSBUF_; pl++)
00011a  2200              MOVS     r2,#0
00011c  ea4f030d          MOV.W    r3,sp                 ;1348
                  |L17.288|
;;;1447   		for (cl = 0; cl < LOOSE_POSBUF_; cl++)
000120  eb031082          ADD      r0,r3,r2,LSL #6
000124  2108              MOVS     r1,#8
000126  1f00              SUBS     r0,r0,#4
                  |L17.296|
;;;1448   			lDistanceMap[pl][cl] = INT32_MAX;
000128  1e49              SUBS     r1,r1,#1
00012a  f8c0e004          STR      lr,[r0,#4]
00012e  f840ef08          STR      lr,[r0,#8]!
000132  d1f9              BNE      |L17.296|
000134  1c50              ADDS     r0,r2,#1
000136  b2c2              UXTB     r2,r0
000138  2a10              CMP      r2,#0x10
00013a  d3f1              BCC      |L17.288|
;;;1449   
;;;1450       for (pl = 0; pl < MAX_TOUCH_; pl++)
00013c  f05f0700          MOVS.W   r7,#0
                  |L17.320|
;;;1451   	{
;;;1452   		if (temp_coord->tPastPos[0].vusR[pl] != 0)
000140  eb040947          ADD      r9,r4,r7,LSL #1
000144  f8b9037e          LDRH     r0,[r9,#0x37e]
000148  2800              CMP      r0,#0
00014a  d07d              BEQ      |L17.584|
;;;1453   		{
;;;1454   			for (cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
00014c  7820              LDRB     r0,[r4,#0]
00014e  2600              MOVS     r6,#0
000150  2800              CMP      r0,#0
000152  d979              BLS      |L17.584|
000154  4668              MOV      r0,sp                 ;1348
000156  eb001087          ADD      r0,r0,r7,LSL #6       ;1447
00015a  eb0405c7          ADD      r5,r4,r7,LSL #3       ;1422
00015e  f8cd0488          STR      r0,[sp,#0x488]        ;1447
;;;1455   			{
;;;1456   				if (temp_coord->tTempPos.vusR[cl]) //For unmatched fingers,
000162  bf00              NOP      
                  |L17.356|
000164  eb040046          ADD      r0,r4,r6,LSL #1
000168  f8b000a1          LDRH     r0,[r0,#0xa1]
00016c  2800              CMP      r0,#0
00016e  d06c              BEQ      |L17.586|
;;;1457   				{
;;;1458   					uint16_t Check_vusR = 0;
;;;1459   					tXY_t UsePastPos;
;;;1460   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1461   					if(temp_coord->bInterpolation_On)
;;;1462   					{
;;;1463   						Check_vusR = temp_coord->tPastPos[2].vusR[pl];
;;;1464   						UsePastPos = temp_coord->tOrgPastPos[2].tXY[pl];
;;;1465   					}
;;;1466   					else
;;;1467   #endif
;;;1468   					{
;;;1469   						Check_vusR = temp_coord->tPastPos[1].vusR[pl];
000170  f8b903f7          LDRH     r0,[r9,#0x3f7]
;;;1470   						UsePastPos = temp_coord->tOrgPastPos[1].tXY[pl];
000174  f8d536f5          LDR      r3,[r5,#0x6f5]
000178  f8d526f9          LDR      r2,[r5,#0x6f9]
;;;1471   					}
;;;1472   					
;;;1473   					if( Check_vusR )
00017c  2800              CMP      r0,#0
;;;1474   					{
;;;1475   						pred_pos.x = (temp_coord->tOrgPastPos[0].tXY[pl].x << 1) - UsePastPos.x;
;;;1476   						pred_pos.y = (temp_coord->tOrgPastPos[0].tXY[pl].y << 1) - UsePastPos.y;
;;;1477   					}
;;;1478   					else
;;;1479   					{
;;;1480   						pred_pos.x = temp_coord->tOrgPastPos[0].tXY[pl].x;
00017e  bf04              ITT      EQ
000180  f8d5067c          LDREQ    r0,[r5,#0x67c]
;;;1481   						pred_pos.y = temp_coord->tOrgPastPos[0].tXY[pl].y;
000184  f8d51680          LDREQ    r1,[r5,#0x680]
000188  d007              BEQ      |L17.410|
00018a  f8d5167c          LDR      r1,[r5,#0x67c]        ;1475
00018e  f8d5c680          LDR      r12,[r5,#0x680]       ;1476
000192  ebc30041          RSB      r0,r3,r1,LSL #1       ;1475
000196  ebc2014c          RSB      r1,r2,r12,LSL #1      ;1476
                  |L17.410|
;;;1482   					}
;;;1483   					
;;;1484   					Check_vusR = 0;
;;;1485   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1486   					if(temp_coord->bInterpolation_On)
;;;1487   						Check_vusR = temp_coord->tPastPos[4].vusR[pl];
;;;1488   					else
;;;1489   #endif
;;;1490   						Check_vusR = temp_coord->tPastPos[2].vusR[pl];
00019a  f8b9c470          LDRH     r12,[r9,#0x470]
;;;1491   					
;;;1492   					if( Check_vusR )
00019e  f1bc0f00          CMP      r12,#0
0001a2  d038              BEQ      |L17.534|
;;;1493   					{
;;;1494   						int sPred_x, sPred_y;
;;;1495   						int fPred_x, fPred_y;
;;;1496   						int sub_x1, sub_y1, sub_x2, sub_y2;
;;;1497   						tXY_t pred_pos2;
;;;1498   					
;;;1499   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1500   						if(temp_coord->bInterpolation_On)
;;;1501   						{
;;;1502   							fPred_x = temp_coord->tOrgPastPos[4].tXY[pl].x - temp_coord->tOrgPastPos[2].tXY[pl].x;
;;;1503   							fPred_y = temp_coord->tOrgPastPos[4].tXY[pl].y - temp_coord->tOrgPastPos[2].tXY[pl].y;
;;;1504   							sPred_x = temp_coord->tOrgPastPos[2].tXY[pl].x - temp_coord->tOrgPastPos[0].tXY[pl].x;
;;;1505   							sPred_y = temp_coord->tOrgPastPos[2].tXY[pl].y - temp_coord->tOrgPastPos[0].tXY[pl].y;
;;;1506   						}
;;;1507   						else
;;;1508   #endif
;;;1509   						{
;;;1510   							fPred_x = temp_coord->tOrgPastPos[2].tXY[pl].x - temp_coord->tOrgPastPos[1].tXY[pl].x;
0001a4  f8d5c76e          LDR      r12,[r5,#0x76e]
;;;1511   							fPred_y = temp_coord->tOrgPastPos[2].tXY[pl].y - temp_coord->tOrgPastPos[1].tXY[pl].y;
;;;1512   							sPred_x = temp_coord->tOrgPastPos[1].tXY[pl].x - temp_coord->tOrgPastPos[0].tXY[pl].x;
0001a8  f8d5b67c          LDR      r11,[r5,#0x67c]
0001ac  ebac0e03          SUB      lr,r12,r3             ;1510
0001b0  f8d5c772          LDR      r12,[r5,#0x772]       ;1511
0001b4  ebac0a02          SUB      r10,r12,r2            ;1511
0001b8  eba30c0b          SUB      r12,r3,r11
;;;1513   							sPred_y = temp_coord->tOrgPastPos[1].tXY[pl].y - temp_coord->tOrgPastPos[0].tXY[pl].y;
0001bc  f8d53680          LDR      r3,[r5,#0x680]
;;;1514   						}
;;;1515   						
;;;1516   						pred_pos2.x = temp_coord->tOrgPastPos[0].tXY[pl].x - (sPred_x + sPred_x - fPred_x);
0001c0  ebce0c4c          RSB      r12,lr,r12,LSL #1
0001c4  1ad2              SUBS     r2,r2,r3              ;1513
;;;1517   						pred_pos2.y = temp_coord->tOrgPastPos[0].tXY[pl].y - (sPred_y + sPred_y - fPred_y);
0001c6  ebca0242          RSB      r2,r10,r2,LSL #1
0001ca  eba30a02          SUB      r10,r3,r2
;;;1518   						
;;;1519   						sub_x1 = pred_pos.x - temp_coord->tTempPos.tXY[cl].x;
0001ce  eb0402c6          ADD      r2,r4,r6,LSL #3
0001d2  ebab0c0c          SUB      r12,r11,r12           ;1516
0001d6  f8d2b001          LDR      r11,[r2,#1]
;;;1520   						sub_y1 = pred_pos.y - temp_coord->tTempPos.tXY[cl].y;
0001da  f8d2e005          LDR      lr,[r2,#5]
0001de  ebb0030b          SUBS     r3,r0,r11             ;1519
0001e2  eba1020e          SUB      r2,r1,lr
;;;1521   						if(sub_x1 < 0)	sub_x1 = -sub_x1;
0001e6  bf48              IT       MI
0001e8  425b              RSBMI    r3,r3,#0
;;;1522   						if(sub_y1 < 0)	sub_y1 = -sub_y1;
0001ea  2a00              CMP      r2,#0
0001ec  bfb8              IT       LT
0001ee  4252              RSBLT    r2,r2,#0
;;;1523   						
;;;1524   						sub_x2 = pred_pos2.x - temp_coord->tTempPos.tXY[cl].x;
0001f0  ebbc0b0b          SUBS     r11,r12,r11
;;;1525   						sub_y2 = pred_pos2.y - temp_coord->tTempPos.tXY[cl].y;
0001f4  ebaa0e0e          SUB      lr,r10,lr
;;;1526   						if(sub_x2 < 0)	sub_x2 = -sub_x2;
0001f8  bf48              IT       MI
0001fa  f1cb0b00          RSBMI    r11,r11,#0
;;;1527   						if(sub_y2 < 0)	sub_y2 = -sub_y2;
0001fe  f1be0f00          CMP      lr,#0
000202  bfb8              IT       LT
000204  f1ce0e00          RSBLT    lr,lr,#0
;;;1528   						
;;;1529   						sub_x1 += sub_y1;
000208  441a              ADD      r2,r2,r3
;;;1530   						sub_x2 += sub_y2;
00020a  eb0b030e          ADD      r3,r11,lr
;;;1531   						
;;;1532   						if(sub_x2 < sub_x1)
00020e  4293              CMP      r3,r2
;;;1533   							pred_pos = pred_pos2;
000210  bfbc              ITT      LT
000212  4660              MOVLT    r0,r12
000214  4651              MOVLT    r1,r10
                  |L17.534|
;;;1534   					}
;;;1535   
;;;1536   					if( bCompFlag )
000216  f1b80f00          CMP      r8,#0
00021a  d01a              BEQ      |L17.594|
;;;1537   					{
;;;1538   						iDist = algorithm_coord_calc_comp_distance(temp_coord->tTempPos.tXY[cl], temp_coord->tOrgPastPos[0].tXY[pl], comp_pos);
00021c  eb0400c6          ADD      r0,r4,r6,LSL #3
000220  f8d5267c          LDR      r2,[r5,#0x67c]
000224  f8d0c001          LDR      r12,[r0,#1]
000228  f8dd1470          LDR      r1,[sp,#0x470]
00022c  ebac0202          SUB      r2,r12,r2
000230  f8d0a005          LDR      r10,[r0,#5]
000234  f8d53680          LDR      r3,[r5,#0x680]
000238  1a51              SUBS     r1,r2,r1
00023a  f8dd0414          LDR      r0,[sp,#0x414]
00023e  4349              MULS     r1,r1,r1
000240  ebaa0203          SUB      r2,r10,r3
000244  1a10              SUBS     r0,r2,r0
000246  e001              B        |L17.588|
                  |L17.584|
000248  e01b              B        |L17.642|
                  |L17.586|
00024a  e014              B        |L17.630|
                  |L17.588|
00024c  fb001000          MLA      r0,r0,r0,r1
000250  e00b              B        |L17.618|
                  |L17.594|
;;;1539   					}
;;;1540   					else
;;;1541   					{
;;;1542   						iDist = algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[cl], pred_pos);
000252  eb0402c6          ADD      r2,r4,r6,LSL #3
000256  f8d23001          LDR      r3,[r2,#1]
00025a  f8d22005          LDR      r2,[r2,#5]
00025e  1a18              SUBS     r0,r3,r0
000260  fb00f300          MUL      r3,r0,r0
000264  1a50              SUBS     r0,r2,r1
000266  fb003000          MLA      r0,r0,r0,r3
                  |L17.618|
00026a  f7fffffe          BL       algorithm_calc_sqrt
;;;1543   					}
;;;1544   					lDistanceMap[pl][cl] = iDist;
00026e  f8dd1488          LDR      r1,[sp,#0x488]
000272  f8410026          STR      r0,[r1,r6,LSL #2]
                  |L17.630|
;;;1545   				}
000276  1c70              ADDS     r0,r6,#1
000278  b2c6              UXTB     r6,r0
00027a  7820              LDRB     r0,[r4,#0]
00027c  42b0              CMP      r0,r6
00027e  f63faf71          BHI      |L17.356|
                  |L17.642|
000282  1c78              ADDS     r0,r7,#1
000284  b2c7              UXTB     r7,r0
000286  2f0a              CMP      r7,#0xa
000288  f4ffaf5a          BCC      |L17.320|
00028c  ea4f070d          MOV.W    r7,sp                 ;1348
                  |L17.656|
;;;1546   			}
;;;1547   		}
;;;1548   	}
;;;1549   
;;;1550       do
;;;1551   	{
;;;1552       	match_cl = -1;
000290  f04f36ff          MOV      r6,#0xffffffff
;;;1553       	match_pl = -1;
000294  4635              MOV      r5,r6
;;;1554   
;;;1555   		iMinDist = INT32_MAX;
000296  f06f4900          MVN      r9,#0x80000000
;;;1556   
;;;1557   		for(pl = 0; pl < MAX_TOUCH_; pl++)
00029a  2000              MOVS     r0,#0
                  |L17.668|
;;;1558   		{
;;;1559   			if (temp_coord->tPastPos[0].vusR[pl] != 0)
00029c  eb040140          ADD      r1,r4,r0,LSL #1
0002a0  f8b1137e          LDRH     r1,[r1,#0x37e]
0002a4  b1d1              CBZ      r1,|L17.732|
;;;1560   			{
;;;1561   				for(cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
0002a6  7822              LDRB     r2,[r4,#0]
0002a8  2100              MOVS     r1,#0
0002aa  2a00              CMP      r2,#0
0002ac  bf88              IT       HI                    ;1447
0002ae  eb071380          ADDHI    r3,r7,r0,LSL #6       ;1447
0002b2  d913              BLS      |L17.732|
                  |L17.692|
;;;1562   				{
;;;1563   					if (temp_coord->tTempPos.vusR[cl]) //For unmatched fingers,
0002b4  eb040c41          ADD      r12,r4,r1,LSL #1
0002b8  f8bcc0a1          LDRH     r12,[r12,#0xa1]
0002bc  f1bc0f00          CMP      r12,#0
;;;1564   					{
;;;1565   						iDist = lDistanceMap[pl][cl];
0002c0  bf1e              ITTT     NE
0002c2  f853c021          LDRNE    r12,[r3,r1,LSL #2]
;;;1566   						if(iDist == -1) continue;
0002c6  f1bc3fff          CMPNE    r12,#0xffffffff
;;;1567   
;;;1568   						if(iDist < iMinDist)
0002ca  45cc              CMPNE    r12,r9
0002cc  da02              BGE      |L17.724|
;;;1569   						{
;;;1570   							iMinDist = iDist;
0002ce  46e1              MOV      r9,r12
;;;1571   							match_cl = cl;
0002d0  460e              MOV      r6,r1
;;;1572   							match_pl = pl;
0002d2  4605              MOV      r5,r0
                  |L17.724|
0002d4  1c49              ADDS     r1,r1,#1
0002d6  b2c9              UXTB     r1,r1
0002d8  428a              CMP      r2,r1
0002da  d8eb              BHI      |L17.692|
                  |L17.732|
0002dc  1c40              ADDS     r0,r0,#1
0002de  b2c0              UXTB     r0,r0
0002e0  280a              CMP      r0,#0xa
0002e2  d3db              BCC      |L17.668|
;;;1573   						}
;;;1574   					}
;;;1575   				}
;;;1576   			}
;;;1577   		}
;;;1578   
;;;1579   		if( bCompFlag )
0002e4  f1b80f00          CMP      r8,#0
0002e8  d061              BEQ      |L17.942|
;;;1580   		{
;;;1581   			uint16_t Check_vusR = 0;
;;;1582   			tXY_t UsePastPos;
;;;1583   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1584   			if(temp_coord->bInterpolation_On)
;;;1585   			{
;;;1586   				Check_vusR = temp_coord->tPastPos[2].vusR[match_pl];
;;;1587   				UsePastPos = temp_coord->tOrgPastPos[2].tXY[match_pl];
;;;1588   			}
;;;1589   			else
;;;1590   #endif
;;;1591   			{
;;;1592   				Check_vusR = temp_coord->tPastPos[1].vusR[match_pl];
0002ea  eb040c45          ADD      r12,r4,r5,LSL #1
;;;1593   				UsePastPos = temp_coord->tOrgPastPos[1].tXY[match_pl];
0002ee  eb0403c5          ADD      r3,r4,r5,LSL #3
0002f2  f8bc03f7          LDRH     r0,[r12,#0x3f7]       ;1592
0002f6  f8d396f5          LDR      r9,[r3,#0x6f5]
;;;1594   			}
;;;1595   
;;;1596   			if( Check_vusR )
0002fa  2800              CMP      r0,#0
0002fc  f8d326f9          LDR      r2,[r3,#0x6f9]        ;1593
;;;1597   			{
;;;1598   				pred_pos.x = (temp_coord->tOrgPastPos[0].tXY[match_pl].x << 1) - UsePastPos.x;
;;;1599   				pred_pos.y = (temp_coord->tOrgPastPos[0].tXY[match_pl].y << 1) - UsePastPos.y;
;;;1600   			}
;;;1601   			else
;;;1602   			{
;;;1603   				pred_pos.x = temp_coord->tOrgPastPos[0].tXY[match_pl].x;
000300  f8d3067c          LDR      r0,[r3,#0x67c]
000304  bf18              IT       NE                    ;1598
000306  ebc90040          RSBNE    r0,r9,r0,LSL #1       ;1598
00030a  f8d31680          LDR      r1,[r3,#0x680]        ;1599
00030e  bf18              IT       NE                    ;1599
000310  ebc20141          RSBNE    r1,r2,r1,LSL #1       ;1599
;;;1604   				pred_pos.y = temp_coord->tOrgPastPos[0].tXY[match_pl].y;
;;;1605   			}
;;;1606   			
;;;1607   			Check_vusR = 0;
;;;1608   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1609   			if(temp_coord->bInterpolation_On)
;;;1610   				Check_vusR = temp_coord->tPastPos[4].vusR[match_pl];
;;;1611   			else
;;;1612   #endif
;;;1613   				Check_vusR = temp_coord->tPastPos[2].vusR[match_pl];
000314  f8bcc470          LDRH     r12,[r12,#0x470]
;;;1614   
;;;1615   			if( Check_vusR )
000318  f1bc0f00          CMP      r12,#0
00031c  d038              BEQ      |L17.912|
;;;1616   			{
;;;1617   				int sPred_x, sPred_y;
;;;1618   				int fPred_x, fPred_y;
;;;1619   				int sub_x1, sub_y1, sub_x2, sub_y2;
;;;1620   				tXY_t pred_pos2;
;;;1621   				
;;;1622   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;1623   				if(temp_coord->bInterpolation_On)
;;;1624   				{					
;;;1625   					fPred_x = temp_coord->tOrgPastPos[4].tXY[match_pl].x - temp_coord->tOrgPastPos[2].tXY[match_pl].x;
;;;1626   					fPred_y = temp_coord->tOrgPastPos[4].tXY[match_pl].y - temp_coord->tOrgPastPos[2].tXY[match_pl].y;
;;;1627   					sPred_x = temp_coord->tOrgPastPos[2].tXY[match_pl].x - temp_coord->tOrgPastPos[0].tXY[match_pl].x;
;;;1628   					sPred_y = temp_coord->tOrgPastPos[2].tXY[match_pl].y - temp_coord->tOrgPastPos[0].tXY[match_pl].y;
;;;1629   				}
;;;1630   				else
;;;1631   #endif
;;;1632   				{
;;;1633   					fPred_x = temp_coord->tOrgPastPos[2].tXY[match_pl].x - temp_coord->tOrgPastPos[1].tXY[match_pl].x;
00031e  f8d3c76e          LDR      r12,[r3,#0x76e]
;;;1634   					fPred_y = temp_coord->tOrgPastPos[2].tXY[match_pl].y - temp_coord->tOrgPastPos[1].tXY[match_pl].y;
;;;1635   					sPred_x = temp_coord->tOrgPastPos[1].tXY[match_pl].x - temp_coord->tOrgPastPos[0].tXY[match_pl].x;
000322  f8d3a67c          LDR      r10,[r3,#0x67c]
000326  ebac0b09          SUB      r11,r12,r9            ;1633
00032a  f8d3c772          LDR      r12,[r3,#0x772]       ;1634
;;;1636   					sPred_y = temp_coord->tOrgPastPos[1].tXY[match_pl].y - temp_coord->tOrgPastPos[0].tXY[match_pl].y;
00032e  f8d33680          LDR      r3,[r3,#0x680]
000332  ebac0c02          SUB      r12,r12,r2            ;1634
000336  eba9090a          SUB      r9,r9,r10             ;1635
00033a  1ad2              SUBS     r2,r2,r3
;;;1637   				}
;;;1638   				
;;;1639   				pred_pos2.x = temp_coord->tOrgPastPos[0].tXY[match_pl].x - (sPred_x + sPred_x - fPred_x);
00033c  ebcb0949          RSB      r9,r11,r9,LSL #1
000340  ebaa0909          SUB      r9,r10,r9
;;;1640   				pred_pos2.y = temp_coord->tOrgPastPos[0].tXY[match_pl].y - (sPred_y + sPred_y - fPred_y);
000344  ebcc0242          RSB      r2,r12,r2,LSL #1
000348  eba30a02          SUB      r10,r3,r2
;;;1641   				
;;;1642   				sub_x1 = pred_pos.x - temp_coord->tTempPos.tXY[match_cl].x;
00034c  eb0402c6          ADD      r2,r4,r6,LSL #3
000350  f8d2c001          LDR      r12,[r2,#1]
;;;1643   				sub_y1 = pred_pos.y - temp_coord->tTempPos.tXY[match_cl].y;
000354  f8d2b005          LDR      r11,[r2,#5]
000358  ebb0030c          SUBS     r3,r0,r12             ;1642
00035c  eba1020b          SUB      r2,r1,r11
;;;1644   				if(sub_x1 < 0)	sub_x1 = -sub_x1;
000360  bf48              IT       MI
000362  425b              RSBMI    r3,r3,#0
;;;1645   				if(sub_y1 < 0)	sub_y1 = -sub_y1;
000364  2a00              CMP      r2,#0
000366  bfb8              IT       LT
000368  4252              RSBLT    r2,r2,#0
;;;1646   				
;;;1647   				sub_x2 = pred_pos2.x - temp_coord->tTempPos.tXY[match_cl].x;
00036a  ebb90c0c          SUBS     r12,r9,r12
;;;1648   				sub_y2 = pred_pos2.y - temp_coord->tTempPos.tXY[match_cl].y;
00036e  ebaa0b0b          SUB      r11,r10,r11
;;;1649   				if(sub_x2 < 0)	sub_x2 = -sub_x2;
000372  bf48              IT       MI
000374  f1cc0c00          RSBMI    r12,r12,#0
;;;1650   				if(sub_y2 < 0)	sub_y2 = -sub_y2;
000378  f1bb0f00          CMP      r11,#0
00037c  bfb8              IT       LT
00037e  f1cb0b00          RSBLT    r11,r11,#0
;;;1651   				
;;;1652   				sub_x1 += sub_y1;
000382  441a              ADD      r2,r2,r3
;;;1653   				sub_x2 += sub_y2;
000384  eb0c030b          ADD      r3,r12,r11
;;;1654   				
;;;1655   				if(sub_x2 < sub_x1)
000388  4293              CMP      r3,r2
;;;1656   					pred_pos = pred_pos2;
00038a  bfbc              ITT      LT
00038c  4648              MOVLT    r0,r9
00038e  4651              MOVLT    r1,r10
                  |L17.912|
;;;1657   			}
;;;1658   			
;;;1659   			iMinDist = algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[match_cl], pred_pos);
000390  eb0402c6          ADD      r2,r4,r6,LSL #3
000394  f8d23001          LDR      r3,[r2,#1]
000398  f8d22005          LDR      r2,[r2,#5]
00039c  1a18              SUBS     r0,r3,r0
00039e  fb00f300          MUL      r3,r0,r0
0003a2  1a50              SUBS     r0,r2,r1
0003a4  fb003000          MLA      r0,r0,r0,r3
0003a8  f7fffffe          BL       algorithm_calc_sqrt
0003ac  4681              MOV      r9,r0
                  |L17.942|
;;;1660   		}
;;;1661   
;;;1662   		//Set tracking distance
;;;1663   		{
;;;1664   			uint8_t FirstMoveFrameNum = 0;
;;;1665   			if(thisModeConf->CoordTracking.ucFastDrawingMode)
0003ae  f8dfa04c          LDR      r10,|L17.1020|
0003b2  f8da100c          LDR      r1,[r10,#0xc]  ; thisModeConf
0003b6  f8910070          LDRB     r0,[r1,#0x70]
0003ba  2800              CMP      r0,#0
;;;1666   				FirstMoveFrameNum = 2;
0003bc  bf14              ITE      NE
0003be  2002              MOVNE    r0,#2
;;;1667   			else
;;;1668   				FirstMoveFrameNum = 1;
0003c0  2001              MOVEQ    r0,#1
;;;1669   	//		if (temp_coord->bIsMoving[match_pl] == NO)		//In tracking
;;;1670   			if (temp_coord->ucIdMappedCnt[match_pl] <= FirstMoveFrameNum)
0003c2  1962              ADDS     r2,r4,r5
0003c4  f8922a47          LDRB     r2,[r2,#0xa47]
0003c8  4282              CMP      r2,r0
;;;1671   			{
;;;1672   				iDistanceThd = (thisModeConf->CoordTracking.usFirstMoveDistanceThd << POS_BOOST_SHIFT_);
0003ca  bf9c              ITT      LS
0003cc  f8b10073          LDRHLS   r0,[r1,#0x73]
0003d0  0200              LSLLS    r0,r0,#8
0003d2  d90f              BLS      |L17.1012|
;;;1673   			}
;;;1674   			else
;;;1675   			{
;;;1676   				//Dynamic tracking distance
;;;1677   				if(thisModeConf->CoordTracking.ucDynamicTrackingDistanceMode == 1)
0003d4  f891006f          LDRB     r0,[r1,#0x6f]
0003d8  2801              CMP      r0,#1
0003da  d011              BEQ      |L17.1024|
;;;1678   				{
;;;1679   //					if(thisInfo->WinCertMode){
;;;1680   //						thisInfo->WinCertTrackingDist = MAX(thisInfo->WinCertTrackingDist, (temp_coord->lPrevDist[match_pl]<<3));
;;;1681   //						iDistanceThd = MAX( (1<<(POS_BOOST_SHIFT_-1)), thisInfo->WinCertTrackingDist );
;;;1682   //					}
;;;1683   //					else
;;;1684   					{
;;;1685   						if(algorithm_coord_IsEdgeArea(&temp_coord->iStopPos[match_pl],0)>0)
;;;1686   							iDistanceThd = MAX( (3<<(POS_BOOST_SHIFT_)), (temp_coord->lPrevDist[match_pl]<<2) );
;;;1687   						else
;;;1688   							iDistanceThd = MAX( (1<<(POS_BOOST_SHIFT_))+(1<<(POS_BOOST_SHIFT_-1)), (temp_coord->lPrevDist[match_pl]<<2) );
;;;1689   						
;;;1690   		//				if(temp_coord->ucIdMappedCnt[match_pl] >= 4)
;;;1691   		//					iDistanceThd = (thisModeConf->CoordTracking.usMoveDistanceThd << POS_BOOST_SHIFT_);
;;;1692   					}
;;;1693   				}
;;;1694   				else if(thisModeConf->CoordTracking.ucDynamicTrackingDistanceMode == 2)
0003dc  2802              CMP      r0,#2
0003de  d02f              BEQ      |L17.1088|
;;;1695   				{
;;;1696   					iDistanceThd = MAX( ((temp_coord->ucIdMappedCnt[match_pl]+1)<<(POS_BOOST_SHIFT_)), (temp_coord->lPrevDist[match_pl]<<2) );
;;;1697   				}
;;;1698   				else
;;;1699   				{	
;;;1700   					iDistanceThd = temp_coord->slScaledMoveDistThd;
;;;1701   					if (temp_coord->lPrevDist[match_pl] > temp_coord->slScaledMoveDistThd)
0003e0  eb040185          ADD      r1,r4,r5,LSL #2
0003e4  f8d40a43          LDR      r0,[r4,#0xa43]        ;1700
0003e8  f8d11a7f          LDR      r1,[r1,#0xa7f]
0003ec  4281              CMP      r1,r0
;;;1702   						iDistanceThd += (temp_coord->lPrevDist[match_pl] * 2);
0003ee  bfc8              IT       GT
0003f0  eb000041          ADDGT    r0,r0,r1,LSL #1
                  |L17.1012|
;;;1703   				}
;;;1704   			}
;;;1705   #if USED_NOISE_HOPPING_FREQ
;;;1706   //			if(ptAppInfo->eHoppingStatus == FREQ_HOPPING_CHANGED)
;;;1707   			if(ptAppInfo->ucHoppFrameCnt)
;;;1708   			{
;;;1709   //				iDistanceThd <<= 2;
;;;1710   				iDistanceThd = (thisModeConf->Noise.ucHoppingMoveDistanceThd << POS_BOOST_SHIFT_);
;;;1711   				if (temp_coord->lPrevDist[match_pl] > iDistanceThd)
;;;1712   						iDistanceThd += (temp_coord->lPrevDist[match_pl] * 2);
;;;1713   				
;;;1714   				iDistanceThd = MAX( (iDistanceThd), (temp_coord->lPrevDist[match_pl]<<2) );
;;;1715   				ptAppInfo->ucHoppFrameCnt = 0;
;;;1716   			}
;;;1717   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1718   		}
;;;1719   
;;;1720   
;;;1721   		if(mode == FULL_MODE)
0003f4  f8dd1498          LDR      r1,[sp,#0x498]
0003f8  bb81              CBNZ     r1,|L17.1116|
0003fa  e02d              B        |L17.1112|
                  |L17.1020|
                          DCD      ||.data||
                  |L17.1024|
000400  eb0400c5          ADD      r0,r4,r5,LSL #3       ;1685
000404  2100              MOVS     r1,#0                 ;1685
000406  f60020f9          ADD      r0,r0,#0xaf9          ;1685
00040a  f7fffffe          BL       algorithm_coord_IsEdgeArea
00040e  2800              CMP      r0,#0                 ;1685
000410  eb040085          ADD      r0,r4,r5,LSL #2       ;1688
000414  f8d00a7f          LDR      r0,[r0,#0xa7f]        ;1688
000418  dd08              BLE      |L17.1068|
00041a  f44f7140          MOV      r1,#0x300             ;1686
00041e  ebb10f80          CMP      r1,r0,LSL #2          ;1686
000422  bfc8              IT       GT                    ;1686
000424  f44f7040          MOVGT    r0,#0x300             ;1686
000428  dd08              BLE      |L17.1084|
00042a  e7e3              B        |L17.1012|
                  |L17.1068|
00042c  f44f71c0          MOV      r1,#0x180             ;1688
000430  ebb10f80          CMP      r1,r0,LSL #2          ;1688
000434  bfc8              IT       GT                    ;1688
000436  f44f70c0          MOVGT    r0,#0x180             ;1688
00043a  dcdb              BGT      |L17.1012|
                  |L17.1084|
00043c  0080              LSLS     r0,r0,#2              ;1688
00043e  e7d9              B        |L17.1012|
                  |L17.1088|
000440  eb040185          ADD      r1,r4,r5,LSL #2       ;1696
000444  0210              LSLS     r0,r2,#8              ;1696
000446  f8d11a7f          LDR      r1,[r1,#0xa7f]        ;1696
00044a  f5007080          ADD      r0,r0,#0x100          ;1696
00044e  ebb00f81          CMP      r0,r1,LSL #2          ;1696
000452  bfd8              IT       LE                    ;1696
000454  0088              LSLLE    r0,r1,#2              ;1696
000456  e7cd              B        |L17.1012|
                  |L17.1112|
;;;1722   		{
;;;1723   			if(iMinDist > iDistanceThd)
000458  4581              CMP      r9,r0
00045a  dc29              BGT      |L17.1200|
                  |L17.1116|
;;;1724   			{
;;;1725   				match_cl = -1;
;;;1726   				match_pl = -1;
;;;1727   			}
;;;1728   #if USED_NOISE_HOPPING_FREQ
;;;1729   			else if(ptAppInfo->eHoppingStatus == FREQ_HOPPING_CHANGED)
;;;1730   			{
;;;1731   				ptAppInfo->eHoppingStatus = FREQ_HOPPING_NONE;
;;;1732   			}
;;;1733   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1734   #if (USED_DRUM_ALGO == YES)
;;;1735   			///////////drum in tracking starts here
;;;1736   			if(thisModeConf->Coord.usDrumTestDist)
;;;1737   			{
;;;1738   				if(DrumStep[match_pl] == 1)
;;;1739   				{
;;;1740   					int InnerProduct = 0, S1=0, S2=0,CosSeta = 0;
;;;1741   					tXY_t P[3];
;;;1742   					tXY_t V1,V2;
;;;1743   
;;;1744   					P[0] = temp_coord->tTempPos.tXY[match_cl];
;;;1745   //					P[1] = temp_coord->tOrgPosHist[1].tXY[match_pl];
;;;1746   //					P[2] = temp_coord->tOrgPosHist[3].tXY[match_pl];
;;;1747   					P[1] = temp_coord->tOrgPastPos[0].tXY[match_pl];
;;;1748   					P[2] = temp_coord->tOrgPastPos[2].tXY[match_pl];
;;;1749   					V1.x = P[0].x - P[1].x;
;;;1750   					V1.y = P[0].y - P[1].y;
;;;1751   					V2.x = P[1].x - P[2].x;
;;;1752   					V2.y = P[1].y - P[2].y;
;;;1753   					S1 = algorithm_coord_calc_distance(P[0], P[1]);
;;;1754   					S2 = algorithm_coord_calc_distance(P[1], P[2]);
;;;1755   					InnerProduct = V1.x*V2.x + V1.y*V2.y;
;;;1756   					CosSeta = InnerProduct * (thisModeConf->Coord.usDrumTestDist>>1) / (S1*S2);
;;;1757   					if(CosSeta < 0)	CosSeta = 0;
;;;1758   					if(CosSeta > (thisModeConf->Coord.usDrumTestDist>>1))	CosSeta = (thisModeConf->Coord.usDrumTestDist>>1);
;;;1759   					
;;;1760   //					if( (InnerProduct<<1) < S1*S2 || S1 < (thisModeConf->Coord.usDrumTestDist) )
;;;1761   //					if(S1 < (thisModeConf->Coord.usDrumTestDist>>1)  )
;;;1762   					if( S1 < (thisModeConf->Coord.usDrumTestDist - CosSeta) )
;;;1763   					{
;;;1764   						int cnt;
;;;1765   						
;;;1766   
;;;1767   						cnt = 0;
;;;1768   						for(cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
;;;1769   							if(lDistanceMap[match_pl][cl] < (thisModeConf->CoordTracking.usMoveDistanceThd << POS_BOOST_SHIFT_))
;;;1770   								cnt++;
;;;1771   						
;;;1772   						if(cnt == 1)
;;;1773   						{
;;;1774   							lDistanceMap[match_pl][match_cl] = -1;
;;;1775   							continue;
;;;1776   						}
;;;1777   					}
;;;1778   					DrumStep[match_pl] = 2;
;;;1779   				}
;;;1780   			}
;;;1781   //////////////////drum in tracking ends here
;;;1782   #endif/* USED_DRUM_ALGO */
;;;1783   		}
;;;1784   		if(match_cl != -1)
00045c  f1b63fff          CMP      r6,#0xffffffff
000460  d026              BEQ      |L17.1200|
;;;1785   		{
;;;1786   			for(pl = 0; pl < MAX_TOUCH_; pl++)
000462  eb070086          ADD      r0,r7,r6,LSL #2
000466  f1a00140          SUB      r1,r0,#0x40
00046a  2205              MOVS     r2,#5
00046c  1f90              SUBS     r0,r2,#6              ;1385
                  |L17.1134|
;;;1787   				lDistanceMap[pl][match_cl] = -1;
00046e  6408              STR      r0,[r1,#0x40]
000470  f8410f80          STR      r0,[r1,#0x80]!
000474  1e52              SUBS     r2,r2,#1
000476  d1fa              BNE      |L17.1134|
;;;1788   
;;;1789   			for(cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
000478  7822              LDRB     r2,[r4,#0]
00047a  b17a              CBZ      r2,|L17.1180|
00047c  eb071185          ADD      r1,r7,r5,LSL #6
000480  1f09              SUBS     r1,r1,#4
;;;1790   				lDistanceMap[match_pl][cl] = -1;
;;;1791   
;;;1792               //if (match_cl != -1) // If the most near finger is found,
;;;1793               {
;;;1794   				ulPrematchedDist[match_cl] = iMinDist;
;;;1795   				cReorderRemap[match_cl] = match_pl;
;;;1796               }
;;;1797   		}
;;;1798   
;;;1799   	} while(match_cl != -1);
;;;1800   
;;;1801   #else
;;;1802       //cReorderRemap 추출. Current Group Index --> Real Group Index(과거 히스토리와 맞도록).
;;;1803       for (pl = 0; pl < MAX_TOUCH_; pl++)
;;;1804       {
;;;1805           if (temp_coord->tPastPos[0].vusR[pl] != 0)
;;;1806           {
;;;1807               //Increase minimum displacement according to prev-distance.
;;;1808   			iMinDist = (temp_coord->lPrevDist[pl])*2 + temp_coord->slScaledMoveDistThd;
;;;1809   
;;;1810               match = -1;
;;;1811               // Find the previous point to match the current point
;;;1812               for (cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
;;;1813               {
;;;1814                   if (temp_coord->tTempPos.vusR[cl]) //For unmatched fingers,
;;;1815                   {
;;;1816                   	uint16_t Check_vusR = 0;
;;;1817   					tXY_t UsePastPos;
;;;1818   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES)
;;;1819   					if(temp_coord->bInterpolation_On)
;;;1820   					{
;;;1821   						Check_vusR = temp_coord->tPastPos[2].vusR[pl];
;;;1822   						UsePastPos = temp_coord->tOrgPastPos[2].tXY[pl];
;;;1823   					}
;;;1824   					else
;;;1825   #endif
;;;1826   					{
;;;1827   						Check_vusR = temp_coord->tPastPos[1].vusR[pl];
;;;1828   						UsePastPos = temp_coord->tOrgPastPos[1].tXY[pl];
;;;1829   					}
;;;1830   					
;;;1831                   	if( Check_vusR )
;;;1832                   	{
;;;1833                   		if(temp_coord->ucIdMappedCnt[cl] >= 2)
;;;1834                   		{
;;;1835                   			avg_pos.x = (temp_coord->tTempPos.tXY[cl].x + temp_coord->tOrgPastPos[0].tXY[pl].x + UsePastPos.x)/3;
;;;1836   							avg_pos.y = (temp_coord->tTempPos.tXY[cl].y + temp_coord->tOrgPastPos[0].tXY[pl].y + UsePastPos.y)/3;
;;;1837   							pred_pos.x = (avg_pos.x << 1) - temp_coord->tOrgAvgPos.tXY[pl].x;
;;;1838   							pred_pos.y = (avg_pos.y << 1) - temp_coord->tOrgAvgPos.tXY[pl].y;
;;;1839                   		}
;;;1840                   		else
;;;1841                   		{
;;;1842                   			avg_pos.x = (temp_coord->tTempPos.tXY[cl].x + temp_coord->tOrgPastPos[0].tXY[pl].x)/2;
;;;1843   							avg_pos.y = (temp_coord->tTempPos.tXY[cl].y + temp_coord->tOrgPastPos[0].tXY[pl].y)/2;
;;;1844                   		}
;;;1845   
;;;1846   						pred_pos.x = (avg_pos.x << 1) - temp_coord->tOrgAvgPos.tXY[pl].x;
;;;1847   						pred_pos.y = (avg_pos.y << 1) - temp_coord->tOrgAvgPos.tXY[pl].y;
;;;1848                   	}
;;;1849                   	else
;;;1850                   	{
;;;1851                   		pred_pos.x = temp_coord->tOrgPastPos[0].tXY[pl].x;
;;;1852                   		pred_pos.y = temp_coord->tOrgPastPos[0].tXY[pl].y;
;;;1853                   	}
;;;1854   
;;;1855                       iDist = algorithm_coord_calc_distance(temp_coord->tTempPos.tXY[cl], pred_pos);
;;;1856   
;;;1857                       if (iDist < iMinDist)
;;;1858                       {
;;;1859                           iMinDist = iDist;
;;;1860                           match = cl;
;;;1861                       }
;;;1862                   }
;;;1863               }
;;;1864   
;;;1865               if (match != -1) // If the most near finger is found,
;;;1866               {
;;;1867                   //이전 매치 된 정보가 있다면, 기존 거리가 이번 매치된 거리보다 큰 경우,
;;;1868                   if ((cReorderRemap[match] != -1) && ulPrematchedDist[match] > (uint32_t)iMinDist)
;;;1869                   {
;;;1870                       ulPrematchedDist[match] = iMinDist;
;;;1871                       cReorderRemap[match] = pl;
;;;1872                   }
;;;1873                   //이전 매치된 정보가 없는 경우.
;;;1874                   else if (cReorderRemap[match] == -1)
;;;1875                   {
;;;1876                       ulPrematchedDist[match] = iMinDist;
;;;1877                       cReorderRemap[match] = pl;
;;;1878                   }
;;;1879               }
;;;1880           }
;;;1881       }
;;;1882   #endif
;;;1883   
;;;1884       //TODO: 빈 슬랏에 대해서 iReorderRemap을 조작해 주고, iReorderRemap에 따라서 reordering 한 루프에서 실행하도록 바꾸자.
;;;1885       for (cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
;;;1886       {
;;;1887           //Remap이 존재하는 경우에만,
;;;1888           if (cReorderRemap[cl] != -1)
;;;1889           {
;;;1890               pl = cReorderRemap[cl];
;;;1891               temp_coord->tPos.tXY[pl]  = temp_coord->tTempPos.tXY[cl];
;;;1892               temp_coord->tPos.vusR[pl] = temp_coord->tTempPos.vusR[cl];
;;;1893               temp_coord->tPos.vusS[pl] = temp_coord->tTempPos.vusS[cl];
;;;1894               temp_coord->tPos.rect[pl] = temp_coord->tTempPos.rect[cl];
;;;1895               temp_coord->tPos.MaxDelta[pl] = temp_coord->tTempPos.MaxDelta[cl];
;;;1896   #if (PalmCandidateTouchCut_EN == YES)
;;;1897   			temp_coord->tPos.MaxPos[pl].c = temp_coord->tTempPos.MaxPos[cl].c;
;;;1898   			temp_coord->tPos.MaxPos[pl].r = temp_coord->tTempPos.MaxPos[cl].r;
;;;1899   #endif /* (PalmCandidateTouchCut_EN == YES) */
;;;1900   			
;;;1901   			temp_coord->RealMaxDelta[pl] = temp_coord->RealMaxDelta[cl];
;;;1902   
;;;1903   			temp_coord->lPrevDist[pl] = algorithm_coord_calc_distance(temp_coord->tOrgPastPos[0].tXY[pl], temp_coord->tPos.tXY[pl]);
;;;1904           }
;;;1905       }
;;;1906   
;;;1907       /*
;;;1908        * 빈 슬랏에 새로운 finger 넣어주기.
;;;1909        */
;;;1910       for (cl = 0; cl < temp_coord->tTempPos.sFinger_; cl++)
;;;1911       {
;;;1912           // For unmatched current points
;;;1913           if (cReorderRemap[cl] == -1 && temp_coord->tTempPos.vusR[cl])
;;;1914           {
;;;1915               for (pl = 0; pl < MAX_TOUCH_; pl++)
;;;1916               {
;;;1917                   // For an empty and new slot
;;;1918                   if (temp_coord->tPastPos[0].vusR[pl] == 0 && temp_coord->tPos.vusR[pl] == 0)
;;;1919                   {
;;;1920                       cReorderRemap[cl] = pl;
;;;1921                       temp_coord->tPos.tXY[pl]      = temp_coord->tTempPos.tXY[cl];
;;;1922                       temp_coord->tPos.vusR[pl]     = temp_coord->tTempPos.vusR[cl];
;;;1923                       temp_coord->tPos.vusS[pl]     = temp_coord->tTempPos.vusS[cl];
;;;1924                       temp_coord->tPos.rect[pl]     = temp_coord->tTempPos.rect[cl];
;;;1925                       temp_coord->tPos.MaxDelta[pl]  = temp_coord->tTempPos.MaxDelta[cl];
;;;1926   #if (PalmCandidateTouchCut_EN == YES)
;;;1927   					temp_coord->tPos.MaxPos[pl].c = temp_coord->tTempPos.MaxPos[cl].c;
;;;1928   					temp_coord->tPos.MaxPos[pl].r = temp_coord->tTempPos.MaxPos[cl].r;
;;;1929   #endif /* (PalmCandidateTouchCut_EN == YES) */
;;;1930   					
;;;1931   					temp_coord->RealMaxDelta[pl] = temp_coord->RealMaxDelta[cl];
;;;1932   
;;;1933                       temp_coord->lPrevDist[pl]     = 0;
;;;1934                       break;
;;;1935                   }
;;;1936               }
;;;1937           }
;;;1938       }
;;;1939   
;;;1940       //Remap matrix 관리. Group matrix와 실제 좌표 그룹 인덱스와의 매칭을 위해서.
;;;1941       for (cl = 0; cl < LOOSE_POSBUF_; cl++)
;;;1942       {
;;;1943           pl = cReorderRemap[cl];
;;;1944           if (pl < MAX_TOUCH_)
;;;1945           	temp_coord->cRemap[pl] = cl;
;;;1946   //        else
;;;1947   //            //maxtouch 보다 더 많은 group index에 대해서는,
;;;1948   //        	temp_coord->cRemap[cl] = -1;
;;;1949       }
;;;1950   
;;;1951   	temp_coord->tOrgPos.sFinger_ = temp_coord->tPos.sFinger_; 
;;;1952       for( cl=MAX_TOUCH_; cl--; )
;;;1953   	{
;;;1954   //		temp_coord->tOrgPosHist[0].tXY[cl]  = temp_coord->tPos.tXY[cl];
;;;1955   //		temp_coord->tOrgPosHist[0].vusS[cl] = temp_coord->tPos.vusS[cl];
;;;1956   //		temp_coord->tOrgPosHist[0].vusR[cl] = temp_coord->tPos.vusR[cl];
;;;1957   		
;;;1958   		temp_coord->tOrgPos.tXY[cl]  = temp_coord->tPos.tXY[cl];
;;;1959   		temp_coord->tOrgPos.vusS[cl] = temp_coord->tPos.vusS[cl];
;;;1960   		temp_coord->tOrgPos.vusR[cl] = temp_coord->tPos.vusR[cl];
;;;1961   		temp_coord->tOrgPos.rect[cl] = temp_coord->tPos.rect[cl];
;;;1962   
;;;1963   		if( temp_coord->tPos.vusR[cl] )
;;;1964   		{
;;;1965   			if(temp_coord->ucIdMappedCnt[cl] < COORD_HISTORY_NUM)
;;;1966   			{
;;;1967   				temp_coord->ucIdMappedCnt[cl]++;
;;;1968   			}
;;;1969   
;;;1970   			if( temp_coord->ucIdMappedCnt[cl] == 1 )
;;;1971   			{
;;;1972   				if(mode == FULL_MODE)
;;;1973   				{
;;;1974   					pl = thisInfo->tCoord.cRemap[cl];
;;;1975   #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;1976   					if((thisInfo->tLabel.tTable[pl].ulStrength*100)/thisInfo->tLabel.tTable[pl].ulExtStrength < 70 && !algorithm_coord_IsEdgeArea(&thisInfo->tCoord.tPos.tXY[cl], 0))//77)
;;;1977   #else /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;1978   					if((thisInfo->tLabel.tTable[pl].ulStrength*100)/thisInfo->tLabel.tTable[pl].ulExtStrength < 70)//77)
;;;1979   #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;1980   					{
;;;1981   //						thisInfo->tCoord.ucIdMappedCnt[cl] = 0;
;;;1982   //						thisInfo->tCoord.tPos.vusR[cl] = 0;
;;;1983   						thisInfo->tCoord.tPos.vusS[cl] = 0;
;;;1984   //						continue;
;;;1985   					}
;;;1986   				}
;;;1987   				temp_coord->tFirstPos.tXY[cl] = temp_coord->tPos.tXY[cl];
;;;1988   				temp_coord->DrawingFlag[cl] = NO;
;;;1989   				FirstTouchEnable[cl] = NO;
;;;1990   #if (VECTOR_PREDICTION_EN == YES)
;;;1991   				ProjectionEnable[cl] = NO;
;;;1992   #endif
;;;1993   #if (USED_DRUM_ALGO == YES)
;;;1994   				DrumStep[cl] = 0;
;;;1995   #endif /*USED_DRUM_ALGO*/
;;;1996   				temp_coord->iStopPos[cl] = temp_coord->tPos.tXY[cl];
;;;1997   			}
;;;1998   			
;;;1999   			//Phone Noise
;;;2000   			if(thisInfo->PhoneNoiseFrmCnt)
;;;2001   				temp_coord->tPos.vusS[cl] = 0;
;;;2002   			if(thisInfo->PhoneNoiseDebEnable){
;;;2003   				if(temp_coord->tPastPos[0].vusS[cl] == 0 && temp_coord->ucIdMappedCnt[cl] <= 2)
;;;2004   					temp_coord->tPos.vusS[cl] = 0;
;;;2005   			}
;;;2006   			
;;;2007   			if(thisModeConf->CoordTracking.sFirstTouchEnable1Touch > 0)
;;;2008   			{
;;;2009   				if(FirstTouchEnable[cl] == NO){
;;;2010   					int16_t FirstTouchThreshold = 0;
;;;2011   
;;;2012   					if(thisInfo->bIsPalm)					FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable5Touch;
;;;2013   					else if(temp_coord->tPos.sFinger_ == 1)	FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable1Touch;
;;;2014   					else if(temp_coord->tPos.sFinger_ == 2)	FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable2Touch;
;;;2015   					else if(temp_coord->tPos.sFinger_ == 3)	FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable3Touch;
;;;2016   					else if(temp_coord->tPos.sFinger_ == 4)	FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable4Touch;
;;;2017   					else 									FirstTouchThreshold = thisModeConf->CoordTracking.sFirstTouchEnable5Touch;
;;;2018   
;;;2019   					if(temp_coord->tPos.MaxDelta[cl] >= FirstTouchThreshold){
;;;2020   						FirstTouchEnable[cl] = YES;
;;;2021   						temp_coord->iStopPos[cl] = temp_coord->tPos.tXY[cl];
;;;2022   					}
;;;2023   				}
;;;2024   
;;;2025   				if(FirstTouchEnable[cl] == NO)
;;;2026   					temp_coord->tPos.vusS[cl] = NO;
;;;2027   			
;;;2028   				if(temp_coord->tPos.vusS[cl])
;;;2029   				{
;;;2030   					if(temp_coord->cScreenDebCnt[cl] < COORD_HISTORY_NUM){
;;;2031   						temp_coord->cScreenDebCnt[cl]++;
;;;2032   //						if(thisModeConf->Coord.ucWinCertAssistance == 1){
;;;2033   //							if(thisInfo->tLabel.LabelSplitCnt)
;;;2034   //								temp_coord->tPos.vusS[cl] = 0;
;;;2035   //						}
;;;2036   					}
;;;2037   				}
;;;2038   				
;;;2039   				if(temp_coord->tPastPos[0].vusS[cl] == 0)
;;;2040   				{
;;;2041   					if(algorithm_coord_IsEdgeArea(&temp_coord->iStopPos[cl],0)>0){
;;;2042   						if(temp_coord->cScreenDebCnt[cl] <= thisModeConf->CoordTracking.ucDebCntEdge)
;;;2043   							temp_coord->tPos.vusS[cl] = 0;
;;;2044   					}
;;;2045   					else{
;;;2046   						if(temp_coord->cScreenDebCnt[cl] <= thisModeConf->CoordTracking.ucDebCntInner)
;;;2047   							temp_coord->tPos.vusS[cl] = 0;
;;;2048   						if(thisModeConf->Coord.ucWinCertAssistance == 5 && thisInfo->WinCertMode > 0){
;;;2049   							if(temp_coord->cScreenDebCnt[cl] <= thisModeConf->Coord.ucWinCertModeDebCnt)
;;;2050   								temp_coord->tPos.vusS[cl] = 0;
;;;2051   						}
;;;2052   					}
;;;2053   #if USED_RF_NOISE_RECOVERY_CODE
;;;2054   					if(thisInfo->usDebounceFrmaeCnt > 0)
;;;2055   					{
;;;2056   						temp_coord->tPos.vusS[cl] = 0;
;;;2057   					}
;;;2058   #endif /* USED_RF_NOISE_RECOVERY_CODE */
;;;2059   				}
;;;2060   			}
;;;2061   			else 
;;;2062   			{
;;;2063   				if( temp_coord->tPastPos[0].vusS[cl] )
;;;2064   				{
;;;2065   					int lTouchOffThd = thisModeConf->CoordTracking.lTouchOffThd;
;;;2066   				
;;;2067   					if(temp_coord->cScreenDebCnt[cl] < COORD_HISTORY_NUM)
;;;2068   					{
;;;2069   						temp_coord->cScreenDebCnt[cl]++;
;;;2070   					}
;;;2071   				
;;;2072   					if( thisModeConf->CoordTracking.ucMultifingerFirstTouchThDownOffset > 0 && (temp_coord->tPos.sFinger_ > 5 || thisInfo->bIsPalm == YES) ) lTouchOffThd -= ((thisModeConf->CoordTracking.ucMultifingerFirstTouchThDownOffset)>>1);
;;;2073   				
;;;2074   					if( temp_coord->tPos.vusS[cl] < lTouchOffThd )
;;;2075   					{
;;;2076   						temp_coord->tPos.vusS[cl] = 0;
;;;2077   						temp_coord->cScreenDebCnt[cl] = 0;
;;;2078   					}
;;;2079   				}
;;;2080   				else
;;;2081   				{
;;;2082   					int sFirstTouchOnMaxCellVal = thisModeConf->CoordTracking.sFirstTouchOnMaxCellVal;
;;;2083   
;;;2084   					if( thisModeConf->CoordTracking.ucMultifingerFirstTouchThDownOffset > 0 && (temp_coord->tPos.sFinger_ > 5 || thisInfo->bIsPalm == YES) ) sFirstTouchOnMaxCellVal -= thisModeConf->CoordTracking.ucMultifingerFirstTouchThDownOffset;//10;
;;;2085   					
;;;2086   					if( temp_coord->tPos.vusS[cl] >= thisModeConf->CoordTracking.lSmallTouchOnThd && temp_coord->tPos.vusR[cl] > 0 )
;;;2087   					{
;;;2088   						int iDebCnt     = 0;
;;;2089   						int iDebCntPlus = 0;//(int)algorithm_coord_IsEdgeArea(&temp_coord->tFirstPos.tXY[cl]);
;;;2090   						
;;;2091   #if USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE
;;;2092   						if(thisModeConf->CoordTracking.bEdgeDebCntUp > 0 && thisInfo->bIsIdleToActive == NO)
;;;2093   #else /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;2094   						if(thisModeConf->CoordTracking.bEdgeDebCntUp > 0)
;;;2095   #endif /* USED_IDLE_CORNER_EDGE_DEBOUNC_DISABLE */
;;;2096   						{
;;;2097   							iDebCntPlus = (int)algorithm_coord_IsEdgeArea(&temp_coord->tFirstPos.tXY[cl] , 0);
;;;2098   						}
;;;2099   						
;;;2100   //						if(thisModeConf->CoordTracking.ucDebCntEdge > 0 && algorithm_coord_IsEdgeArea(&temp_coord->tFirstPos.tXY[cl] , 0))
;;;2101   //							iDebCntPlus = thisModeConf->CoordTracking.ucDebCntEdge;
;;;2102   						
;;;2103   						if(temp_coord->cScreenDebCnt[cl] < COORD_HISTORY_NUM)
;;;2104   						{
;;;2105   							temp_coord->cScreenDebCnt[cl]++;
;;;2106   						}
;;;2107   
;;;2108   						if( temp_coord->tPos.MaxDelta[cl] > sFirstTouchOnMaxCellVal )
;;;2109   						{
;;;2110   							if( temp_coord->tPos.vusS[cl] >= thisModeConf->CoordTracking.lLargeTouchOnThd )
;;;2111   							{
;;;2112   	//							iDebCnt = (iDebCntPlus > 0) ? iDebCntPlus : thisModeConf->CoordTracking.ucLargeTouchOnDebCnt;
;;;2113   								iDebCnt = iDebCntPlus + thisModeConf->CoordTracking.ucLargeTouchOnDebCnt;
;;;2114   							}
;;;2115   							else if( temp_coord->tPos.vusS[cl] >= thisModeConf->CoordTracking.lMediumTouchOnThd )
;;;2116   							{
;;;2117   	//							iDebCnt = (iDebCntPlus > 0) ? iDebCntPlus : thisModeConf->CoordTracking.ucMediumTouchOnDebCnt;
;;;2118   								iDebCnt = iDebCntPlus + thisModeConf->CoordTracking.ucMediumTouchOnDebCnt;
;;;2119   							}
;;;2120   							else if( temp_coord->tPos.vusS[cl] >= thisModeConf->CoordTracking.lSmallTouchOnThd )
;;;2121   							{
;;;2122   	//							iDebCnt = (iDebCntPlus > 0) ? iDebCntPlus : thisModeConf->CoordTracking.ucSmallTouchOnDebCnt;
;;;2123   								iDebCnt = iDebCntPlus + thisModeConf->CoordTracking.ucSmallTouchOnDebCnt;
;;;2124   							}
;;;2125   
;;;2126   							if( temp_coord->cScreenDebCnt[cl] > iDebCnt )
;;;2127   							{
;;;2128   
;;;2129   							}
;;;2130   							else
;;;2131   							{
;;;2132   								temp_coord->tPos.vusS[cl] = 0;
;;;2133   							}
;;;2134   #if (PalmCandidateTouchCut_EN == YES)
;;;2135   							// Do not report touch, if location of 1st touch max and 2nd touch max are diagonal and touch size is big.
;;;2136   //							if(thisModeConf->Palm.ucFirstPalmSizeThd && temp_coord->tPos.vusS[cl] && temp_coord->cScreenDebCnt[cl] < COORD_HISTORY_NUM)
;;;2137   //							{
;;;2138   //								if(!thisModeConf->Palm.ucPalmDrawingOn && !thisModeConf->Coord.ucWinCertAssistance)
;;;2139   //								{
;;;2140   //									int i, r_idx, c_idx, delta;
;;;2141   //									int second_max = -1, max2_r = -1, max2_c = -1;
;;;2142   //									tCell_t search_direc[8] = { {-1, 0}, {0, -1}, {0, 1}, {1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1} };
;;;2143   //									for(i = 0; i < 9; i++)
;;;2144   //									{
;;;2145   //										r_idx = search_direc[i].r + thisInfo->tCoord.tPos.MaxPos[cl].r;
;;;2146   //										if(r_idx < 0) r_idx = 0;
;;;2147   //										else if(r_idx > ROW_MAX - 1) r_idx = ROW_MAX - 1;
;;;2148   //										c_idx = search_direc[i].c + thisInfo->tCoord.tPos.MaxPos[cl].c;
;;;2149   //										if(c_idx < 0) c_idx = 0;
;;;2150   //										else if(c_idx > COL_MAX - 1) c_idx = COL_MAX - 1;
;;;2151   //										
;;;2152   //										delta = HAL_READ_DELTA_IMAGE(r_idx, c_idx);
;;;2153   //										if(second_max < delta)
;;;2154   //										{
;;;2155   //											second_max = delta;
;;;2156   //											max2_c = c_idx;
;;;2157   //											max2_r = r_idx;
;;;2158   //										}
;;;2159   //									}
;;;2160   //									
;;;2161   //									if((second_max >= thisModeConf->Label.usSeedBase) && (temp_coord->tPos.MaxPos[cl].c != max2_c && temp_coord->tPos.MaxPos[cl].r != max2_r) &&
;;;2162   //										((temp_coord->tPos.rect[cl].ce - temp_coord->tPos.rect[cl].cs + 1) * (temp_coord->tPos.rect[cl].re - temp_coord->tPos.rect[cl].rs + 1) > thisModeConf->Palm.ucFirstPalmSizeThd))
;;;2163   //									{
;;;2164   //										temp_coord->tPos.vusS[cl] = 0;
;;;2165   //									}
;;;2166   //								}
;;;2167   //							}
;;;2168   
;;;2169   							if((thisModeConf->Palm.usPalmCandiStdTh || thisModeConf->Palm.ucPalmCandiShapeMatchingTh) && temp_coord->cScreenDebCnt[cl] < COORD_HISTORY_NUM)
;;;2170   							{
;;;2171   								int r,c,i,delta,r1,c1;
;;;2172   								tRect_t low_level_rect = temp_coord->tPos.rect[cl];
;;;2173   	
;;;2174   								uint8_t idx,idx_1,idx_2;
;;;2175   								idx = HAL_READ_LABEL_IMAGE(temp_coord->tPos.MaxPos[cl].r,temp_coord->tPos.MaxPos[cl].c);
;;;2176   								delta = 0;
;;;2177   								bool_t stop_flag = 0;
;;;2178   								for(i = 1; i <= 4; i++)
;;;2179   								{
;;;2180   									for(r = MAX(0,temp_coord->tPos.rect[cl].rs-i); r <= MIN(ROW_MAX-1,temp_coord->tPos.rect[cl].re+i); r++)
;;;2181   									{
;;;2182   										for(c = MAX(0,temp_coord->tPos.rect[cl].cs-i); c <= MIN(COL_MAX-1,temp_coord->tPos.rect[cl].ce+i); c++)
;;;2183   										{
;;;2184   											if((r > low_level_rect.re || r < low_level_rect.rs) || (c > low_level_rect.ce || c < low_level_rect.cs))
;;;2185   											{
;;;2186   												idx_1 = HAL_READ_LABEL_IMAGE(r,c);
;;;2187   												if(idx != idx_1 && idx_1 > 0 && idx_1 != LABEL_BOUNDARY_MARKER && idx_1 != LABEL_CONFLICT_MARKER)
;;;2188   												{
;;;2189   													stop_flag = 1;
;;;2190   													break;
;;;2191   												}
;;;2192   												else if(idx_1 == LABEL_BOUNDARY_MARKER)
;;;2193   												{
;;;2194   													for(r1 = MAX(0,r-1);r1 <= MIN(ROW_MAX-1,r+1);r1++)
;;;2195   													{
;;;2196   														for(c1 = MAX(0,c-1);c1 <= MIN(COL_MAX-1,c+1);c1++)
;;;2197   														{
;;;2198   															idx_2 = HAL_READ_LABEL_IMAGE(r1,c1);
;;;2199   															if(idx != idx_2 && idx_2 > 0 && idx_2 != LABEL_BOUNDARY_MARKER && idx_2 != LABEL_CONFLICT_MARKER && ((r1 > low_level_rect.re || r1 < low_level_rect.rs) || (c1 > low_level_rect.ce || c1 < low_level_rect.cs)))
;;;2200   															{
;;;2201   																stop_flag = 1;
;;;2202   																break;
;;;2203   															}
;;;2204   														}
;;;2205   													}
;;;2206   												}
;;;2207   												
;;;2208   												if(HAL_READ_DELTA_IMAGE(r, c) > thisModeConf->Palm.ucPalmCandiDeltaTh)
;;;2209   													delta = 1;
;;;2210   											}
;;;2211   										}
;;;2212   										
;;;2213   										if(stop_flag == 1)
;;;2214   										{
;;;2215   											break;
;;;2216   										}
;;;2217   									}
;;;2218   										
;;;2219   									if(stop_flag == 0 && delta == 0)stop_flag = 1;
;;;2220   									
;;;2221   									if(stop_flag == 0)
;;;2222   									{
;;;2223   										for(r = MAX(0,temp_coord->tPos.rect[cl].rs-i); r <= MIN(ROW_MAX-1,temp_coord->tPos.rect[cl].re+i); r++)
;;;2224   											for(c = MAX(0,temp_coord->tPos.rect[cl].cs-i); c <= MIN(COL_MAX-1,temp_coord->tPos.rect[cl].ce+i); c++)
;;;2225   										{
;;;2226   											idx_1 = HAL_READ_LABEL_IMAGE(r,c);
;;;2227   											if((0 == idx_1 || idx_1 == LABEL_BOUNDARY_MARKER || idx_1 == LABEL_CONFLICT_MARKER)&& ((r > low_level_rect.re || r < low_level_rect.rs) || (c > low_level_rect.ce || c < low_level_rect.cs)))
;;;2228   											{
;;;2229   												delta = HAL_READ_DELTA_IMAGE(r, c);
;;;2230   												if(delta > thisModeConf->Palm.ucPalmCandiDeltaTh)
;;;2231   												{
;;;2232   													if(low_level_rect.re < r)low_level_rect.re = r;
;;;2233   													if(low_level_rect.rs > r)low_level_rect.rs = r;
;;;2234   													if(low_level_rect.ce < c)low_level_rect.ce = c;
;;;2235   													if(low_level_rect.cs > c)low_level_rect.cs = c;
;;;2236   												}
;;;2237   											}
;;;2238   										}
;;;2239   									}
;;;2240   									else 
;;;2241   									{
;;;2242   										break;
;;;2243   									}
;;;2244   								}
;;;2245   								
;;;2246   								if(low_level_rect.re > low_level_rect.rs+14)low_level_rect.re = low_level_rect.rs+14;
;;;2247   								if(low_level_rect.ce > low_level_rect.cs+14)low_level_rect.ce = low_level_rect.cs+14;
;;;2248   						
;;;2249   //								for(r = MAX(0,low_level_rect.rs-2); r <= MIN(ROW_MAX-1,low_level_rect.re+2); r++)
;;;2250   //									for(c = MAX(0,low_level_rect.cs-2); c <= MIN(COL_MAX-1,low_level_rect.ce+2); c++)
;;;2251   //								{
;;;2252   //									delta = MAX(0,HAL_READ_DELTA_IMAGE(r, c));
;;;2253   //									HAL_WRITE_HOPP2_BASELINE_IMAGE(r-MAX(0,low_level_rect.rs-0),c-MAX(0,low_level_rect.cs-0) + ((temp_coord->cScreenDebCnt[cl]-1)*20),delta);
;;;2254   //									HAL_WRITE_HOPP2_BASELINE_IMAGE(r-MAX(0,low_level_rect.rs-0)+25,c-MAX(0,low_level_rect.cs-0) + ((temp_coord->cScreenDebCnt[cl]-1)*20),HAL_READ_LABEL_IMAGE(r,c));
;;;2255   //								}
;;;2256   								
;;;2257   								uint16_t shape_array_tmp[15][15];
;;;2258   								memset(shape_array_tmp,0,sizeof(shape_array_tmp));
;;;2259   								int cnt_ = 0;
;;;2260   								int sum_ = 0;
;;;2261   								for(r = low_level_rect.rs; r <= low_level_rect.re; r++)
;;;2262   									for(c = low_level_rect.cs; c <= low_level_rect.ce; c++)
;;;2263   								{
;;;2264   									idx_1 = HAL_READ_LABEL_IMAGE(r,c);
;;;2265   									if(idx == idx_1 ||  0 == idx_1 || idx_1 == LABEL_BOUNDARY_MARKER || idx_1 == LABEL_CONFLICT_MARKER)
;;;2266   									{
;;;2267   										delta = MAX(0,HAL_READ_DELTA_IMAGE(r, c));									
;;;2268   										delta = delta*100/temp_coord->tPos.MaxDelta[cl];
;;;2269   										shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs] = delta;
;;;2270   //										HAL_WRITE_HOPP2_BASELINE_IMAGE(r-low_level_rect.rs+13,c-low_level_rect.cs + ((temp_coord->cScreenDebCnt[cl]-1)*20),shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs]);
;;;2271   										sum_ += (delta);
;;;2272   										cnt_++;
;;;2273   									}
;;;2274   								}			
;;;2275   								
;;;2276   								sum_ /= cnt_;
;;;2277   								uint64_t std = 0;
;;;2278   								for(r = low_level_rect.rs; r <= low_level_rect.re; r++)
;;;2279   									for(c = low_level_rect.cs; c <= low_level_rect.ce; c++)
;;;2280   								{
;;;2281   									delta = shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs];							
;;;2282   									std += (((delta) - sum_) * ((delta) - sum_));
;;;2283   								}
;;;2284   								std /= cnt_;
;;;2285   								int size = (low_level_rect.re - low_level_rect.rs + 1) * (low_level_rect.ce - low_level_rect.cs + 1);
;;;2286   //								dbg_coord[2+temp_coord->cScreenDebCnt[cl]-1] = std;
;;;2287   //								dbg_coord[8+temp_coord->cScreenDebCnt[cl]-1] = std*10/size;
;;;2288   //								
;;;2289   //								HAL_WRITE_HOPP2_BASELINE_IMAGE(10,15 + ((temp_coord->cScreenDebCnt[cl]-1)*20),dbg_coord[2+temp_coord->cScreenDebCnt[cl]-1]);
;;;2290   //								HAL_WRITE_HOPP2_BASELINE_IMAGE(10,16 + ((temp_coord->cScreenDebCnt[cl]-1)*20),size);
;;;2291   //								HAL_WRITE_HOPP2_BASELINE_IMAGE(10,17 + ((temp_coord->cScreenDebCnt[cl]-1)*20),dbg_coord[8+temp_coord->cScreenDebCnt[cl]-1]);
;;;2292   								
;;;2293   								if(std*10/size < thisModeConf->Palm.usPalmCandiStdTh)temp_coord->tPos.vusS[cl] = 0;
;;;2294   										
;;;2295   								if(temp_coord->tPos.vusS[cl] > 0 && thisModeConf->Palm.ucPalmCandiShapeMatchingTh)
;;;2296   								{
;;;2297   //									int tmp_re = low_level_rect.re;
;;;2298   //									int tmp_ce = low_level_rect.ce;
;;;2299   									low_level_rect.re = MIN(ROW_MAX-1,low_level_rect.rs+14);
;;;2300   									low_level_rect.ce = MIN(COL_MAX-1,low_level_rect.cs+14);
;;;2301   								
;;;2302   									for(r = low_level_rect.rs; r <= low_level_rect.re; r++)
;;;2303   										for(c = low_level_rect.cs; c <= low_level_rect.ce; c++)
;;;2304   									{
;;;2305   										idx_1 = HAL_READ_LABEL_IMAGE(r,c);
;;;2306   										if(idx == idx_1 ||  0 == idx_1 || idx_1 == LABEL_BOUNDARY_MARKER || idx_1 == LABEL_CONFLICT_MARKER)
;;;2307   										{
;;;2308   											delta = MAX(0,HAL_READ_DELTA_IMAGE(r, c));								
;;;2309   											delta = delta*100/temp_coord->tPos.MaxDelta[cl];
;;;2310   											shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs] = delta;
;;;2311   										}
;;;2312   										else shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs] = 0;
;;;2313   										
;;;2314   										//HAL_WRITE_HOPP2_BASELINE_IMAGE(r-low_level_rect.rs+25,c-low_level_rect.cs + ((temp_coord->cScreenDebCnt[cl]-1)*20),shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs]);
;;;2315   									}
;;;2316   									
;;;2317   									sum_ = 0;
;;;2318   									for(r = low_level_rect.rs; r <= low_level_rect.re; r++)for(c = low_level_rect.cs; c <= low_level_rect.ce; c++)
;;;2319   									{			
;;;2320   										sum_ += (ABS((int)shape_array_tmp[r-low_level_rect.rs][c-low_level_rect.cs] - (int)shape_array_table[r-low_level_rect.rs][c-low_level_rect.cs]));
;;;2321   									}
;;;2322   									
;;;2323   									sum_ = sum_*10/((low_level_rect.re-low_level_rect.rs+1)*(low_level_rect.ce-low_level_rect.cs+1));
;;;2324   //									dbg_coord[14+temp_coord->cScreenDebCnt[cl]-1] = sum_;
;;;2325   //									HAL_WRITE_HOPP2_BASELINE_IMAGE(10,18 + ((temp_coord->cScreenDebCnt[cl]-1)*20),dbg_coord[14+temp_coord->cScreenDebCnt[cl]-1]);
;;;2326   									
;;;2327   									if(sum_ > thisModeConf->Palm.ucPalmCandiShapeMatchingTh && thisModeConf->Palm.ucPalmCandiShapeMatchingLearning == 0) 
;;;2328   									{
;;;2329   										temp_coord->tPos.vusS[cl] = 0;
;;;2330   //										dbg_coord[20]++;
;;;2331   									}
;;;2332   										
;;;2333   									if(thisModeConf->Palm.ucPalmCandiShapeMatchingLearning == 1)
;;;2334   									{
;;;2335   										if(usPalmCandiShapeMatchingLearningCnt==0)memset(shape_array_table,0,sizeof(shape_array_table));
;;;2336   										for(r = 0; r < 15; r++)for(c = 0; c < 15; c++)
;;;2337   										{
;;;2338   											shape_array_table[r][c] = (shape_array_table[r][c] + shape_array_tmp[r][c]);
;;;2339   //											HAL_WRITE_HOPP1_BASELINE_IMAGE(r,c,shape_array_table[r][c]);
;;;2340   										}
;;;2341   										usPalmCandiShapeMatchingLearningCnt++;
;;;2342   									}
;;;2343   									else if(thisModeConf->Palm.ucPalmCandiShapeMatchingLearning == 2 && usPalmCandiShapeMatchingLearningCnt > 0)
;;;2344   									{
;;;2345   										for(r = 0; r < 15; r++)for(c = 0; c < 15; c++)
;;;2346   										{
;;;2347   											shape_array_table[r][c] = shape_array_table[r][c]/usPalmCandiShapeMatchingLearningCnt;	
;;;2348   //											HAL_WRITE_HOPP1_BASELINE_IMAGE(r,c,shape_array_table[r][c]);
;;;2349   										}			
;;;2350   										usPalmCandiShapeMatchingLearningCnt = 0;								
;;;2351   									}	
;;;2352   								}									
;;;2353   							}
;;;2354   #endif /* (PalmCandidateTouchCut_EN == YES) */							
;;;2355   						}
;;;2356   						else
;;;2357   						{
;;;2358   							temp_coord->tPos.vusS[cl] = 0;
;;;2359   							temp_coord->cScreenDebCnt[cl] = 0;
;;;2360   						}
;;;2361   					}
;;;2362   					else
;;;2363   					{
;;;2364   						temp_coord->tPos.vusS[cl] = 0;
;;;2365   						temp_coord->cScreenDebCnt[cl] = 0;
;;;2366   					}
;;;2367   				}
;;;2368   			}
;;;2369   			
;;;2370   			temp_coord->cIsbefor[cl] = 0;
;;;2371   		}
;;;2372   		else
;;;2373   		{
;;;2374   //			if(temp_coord->tPastPos[0].vusR[cl] > 0 && mode == LOCAL_MODE)
;;;2375   //			{
;;;2376   //				if(((temp_coord->cIsbefor[cl] < 1 /*&& g_RetVal == PARTIAL_PEN_COORD1*/) || (temp_coord->cIsbefor[cl] < 4 && temp_coord->cIsbefor[cl] > 0))&& temp_coord->ucIdMappedCnt[cl] > 3)
;;;2377   ////				if(temp_coord->cIsbefor[cl] < 1 && temp_coord->ucIdMappedCnt[cl] > 3)
;;;2378   //				{
;;;2379   //					thisInfo->bLocal_sensing = YES;
;;;2380   
;;;2381   //					temp_coord->tPos.vusR[cl] = temp_coord->tPastPos[0].vusR[cl];
;;;2382   //					temp_coord->tPos.vusS[cl] = temp_coord->tPastPos[0].vusS[cl];
;;;2383   //					temp_coord->tPos.tXY[cl] = temp_coord->tOrgPastPos[0].tXY[cl];
;;;2384   //					temp_coord->cIsbefor[cl]++;
;;;2385   //					
;;;2386   //					temp_coord->tOrgPosHist[0].tXY[cl]  = temp_coord->tPos.tXY[cl];
;;;2387   //					temp_coord->tOrgPosHist[0].vusS[cl] = temp_coord->tPos.vusS[cl];
;;;2388   //					temp_coord->tOrgPosHist[0].vusR[cl] = temp_coord->tPos.vusR[cl];
;;;2389   //					
;;;2390   //					temp_coord->tOrgPos.tXY[cl]  = temp_coord->tPos.tXY[cl];
;;;2391   //					temp_coord->tOrgPos.vusS[cl] = temp_coord->tPos.vusS[cl];
;;;2392   //					temp_coord->tOrgPos.vusR[cl] = temp_coord->tPos.vusR[cl];
;;;2393   //				}
;;;2394   //				else
;;;2395   //				{
;;;2396   //					temp_coord->ucIdMappedCnt[cl] = 0;
;;;2397   //					temp_coord->cScreenDebCnt[cl] = 0;
;;;2398   //					temp_coord->cIsbefor[cl] = 0;
;;;2399   //				}
;;;2400   //			}
;;;2401   //			else
;;;2402   			{
;;;2403   				temp_coord->ucIdMappedCnt[cl] = 0;
;;;2404   				temp_coord->cScreenDebCnt[cl] = 0;
;;;2405   				temp_coord->cIsbefor[cl] = 0;
;;;2406   			}
;;;2407   		}
;;;2408   	}
;;;2409   }
000482  f0120f01          TST      r2,#1
000486  bf18              IT       NE                    ;1790
000488  f8410f04          STRNE    r0,[r1,#4]!           ;1790
00048c  7822              LDRB     r2,[r4,#0]            ;1789
00048e  0852              LSRS     r2,r2,#1              ;1789
000490  d004              BEQ      |L17.1180|
                  |L17.1170|
000492  6048              STR      r0,[r1,#4]            ;1790
000494  f8410f08          STR      r0,[r1,#8]!           ;1790
000498  1e52              SUBS     r2,r2,#1              ;1790
00049a  d1fa              BNE      |L17.1170|
                  |L17.1180|
00049c  f50d6086          ADD      r0,sp,#0x430          ;1794
0004a0  f8409026          STR      r9,[r0,r6,LSL #2]     ;1794
0004a4  3810              SUBS     r0,r0,#0x10           ;1795
0004a6  f1b63fff          CMP      r6,#0xffffffff        ;1795
0004aa  5585              STRB     r5,[r0,r6]            ;1795
0004ac  f47faef0          BNE      |L17.656|
                  |L17.1200|
0004b0  7820              LDRB     r0,[r4,#0]            ;1885
0004b2  2500              MOVS     r5,#0                 ;1885
0004b4  2800              CMP      r0,#0                 ;1885
0004b6  bf88              IT       HI                    ;1346
0004b8  f50d6684          ADDHI    r6,sp,#0x420          ;1346
0004bc  d942              BLS      |L17.1348|
                  |L17.1214|
0004be  5770              LDRSB    r0,[r6,r5]            ;1888
0004c0  f1b03fff          CMP      r0,#0xffffffff        ;1888
0004c4  d039              BEQ      |L17.1338|
0004c6  5d73              LDRB     r3,[r6,r5]            ;1890
0004c8  eb0400c5          ADD      r0,r4,r5,LSL #3       ;1891
0004cc  eb0402c3          ADD      r2,r4,r3,LSL #3       ;1891
0004d0  f8d01001          LDR      r1,[r0,#1]            ;1891
0004d4  f8c21122          STR      r1,[r2,#0x122]        ;1891
0004d8  f8d00005          LDR      r0,[r0,#5]            ;1891
0004dc  f8c20126          STR      r0,[r2,#0x126]        ;1891
0004e0  eb040145          ADD      r1,r4,r5,LSL #1       ;1892
0004e4  eb040043          ADD      r0,r4,r3,LSL #1       ;1892
0004e8  f8b1c0a1          LDRH     r12,[r1,#0xa1]        ;1892
0004ec  f8a0c186          STRH     r12,[r0,#0x186]       ;1892
0004f0  eb040783          ADD      r7,r4,r3,LSL #2       ;1894
0004f4  f8b1c081          LDRH     r12,[r1,#0x81]        ;1893
0004f8  eb040385          ADD      r3,r4,r5,LSL #2       ;1894
0004fc  f8a0c172          STRH     r12,[r0,#0x172]       ;1893
000500  f8d330c1          LDR      r3,[r3,#0xc1]         ;1894
000504  f8c7319a          STR      r3,[r7,#0x19a]        ;1894
000508  f8b13101          LDRH     r3,[r1,#0x101]        ;1895
00050c  f8a031c2          STRH     r3,[r0,#0x1c2]        ;1895
000510  f8b11b49          LDRH     r1,[r1,#0xb49]        ;1901
000514  f8a01b49          STRH     r1,[r0,#0xb49]        ;1901
000518  f8d2367c          LDR      r3,[r2,#0x67c]        ;1903
00051c  f8d21122          LDR      r1,[r2,#0x122]        ;1903
000520  f8d20680          LDR      r0,[r2,#0x680]        ;1903
000524  f8d22126          LDR      r2,[r2,#0x126]        ;1903
000528  1a59              SUBS     r1,r3,r1              ;1903
00052a  4349              MULS     r1,r1,r1              ;1903
00052c  1a80              SUBS     r0,r0,r2              ;1903
00052e  fb001000          MLA      r0,r0,r0,r1           ;1903
000532  f7fffffe          BL       algorithm_calc_sqrt
000536  f8c70a7f          STR      r0,[r7,#0xa7f]        ;1903
                  |L17.1338|
00053a  1c68              ADDS     r0,r5,#1              ;1903
00053c  b2c5              UXTB     r5,r0                 ;1903
00053e  7820              LDRB     r0,[r4,#0]            ;1903
000540  42a8              CMP      r0,r5                 ;1903
000542  d8bc              BHI      |L17.1214|
                  |L17.1348|
000544  2300              MOVS     r3,#0                 ;1910
000546  f0100fff          TST      r0,#0xff              ;1910
00054a  bf1c              ITT      NE                    ;1346
00054c  f50d6584          ADDNE    r5,sp,#0x420          ;1346
000550  2600              MOVNE    r6,#0                 ;1346
000552  d01f              BEQ      |L17.1428|
                  |L17.1364|
000554  56e8              LDRSB    r0,[r5,r3]            ;1913
000556  f1b03fff          CMP      r0,#0xffffffff        ;1913
00055a  d116              BNE      |L17.1418|
00055c  eb040c43          ADD      r12,r4,r3,LSL #1      ;1913
000560  f8bc00a1          LDRH     r0,[r12,#0xa1]        ;1913
000564  2800              CMP      r0,#0                 ;1913
000566  bf18              IT       NE                    ;1915
000568  2000              MOVNE    r0,#0                 ;1915
00056a  d00e              BEQ      |L17.1418|
                  |L17.1388|
00056c  eb040240          ADD      r2,r4,r0,LSL #1       ;1918
000570  f8b2137e          LDRH     r1,[r2,#0x37e]        ;1918
000574  2900              CMP      r1,#0                 ;1918
000576  bf04              ITT      EQ                    ;1918
000578  f8b21186          LDRHEQ   r1,[r2,#0x186]        ;1918
00057c  2900              CMPEQ    r1,#0                 ;1918
00057e  d051              BEQ      |L17.1572|
000580  f1000001          ADD      r0,r0,#1              ;1918
000584  b2c0              UXTB     r0,r0                 ;1934
000586  280a              CMP      r0,#0xa               ;1934
000588  d3f0              BCC      |L17.1388|
                  |L17.1418|
00058a  1c58              ADDS     r0,r3,#1              ;1934
00058c  b2c3              UXTB     r3,r0                 ;1934
00058e  7820              LDRB     r0,[r4,#0]            ;1934
000590  4283              CMP      r3,r0                 ;1934
000592  d3df              BCC      |L17.1364|
                  |L17.1428|
000594  2000              MOVS     r0,#0                 ;1941
000596  f50d6184          ADD      r1,sp,#0x420          ;1941
00059a  2210              MOVS     r2,#0x10              ;1941
00059c  f604236f          ADD      r3,r4,#0xa6f          ;1945
                  |L17.1440|
0005a0  f891c000          LDRB     r12,[r1,#0]           ;1944
0005a4  f1bc0f0a          CMP      r12,#0xa              ;1944
0005a8  bf38              IT       CC                    ;1945
0005aa  f80c0003          STRBCC   r0,[r12,r3]           ;1945
0005ae  1c40              ADDS     r0,r0,#1              ;1945
0005b0  1c49              ADDS     r1,r1,#1              ;1945
0005b2  1e52              SUBS     r2,r2,#1              ;1945
0005b4  f01202ff          ANDS     r2,r2,#0xff           ;1949
0005b8  d1f2              BNE      |L17.1440|
0005ba  f8940121          LDRB     r0,[r4,#0x121]        ;1951
0005be  2509              MOVS     r5,#9                 ;1952
0005c0  f8df834c          LDR      r8,|L17.2320|
0005c4  f8840576          STRB     r0,[r4,#0x576]        ;1951
0005c8  f05f0700          MOVS.W   r7,#0                 ;1989
                  |L17.1484|
0005cc  eb0401c5          ADD      r1,r4,r5,LSL #3       ;1958
0005d0  eb040645          ADD      r6,r4,r5,LSL #1       ;1959
0005d4  f8d10122          LDR      r0,[r1,#0x122]        ;1958
0005d8  f8c10577          STR      r0,[r1,#0x577]        ;1958
0005dc  f8d10126          LDR      r0,[r1,#0x126]        ;1958
0005e0  f8c1057b          STR      r0,[r1,#0x57b]        ;1958
0005e4  f8b60172          LDRH     r0,[r6,#0x172]        ;1959
0005e8  f8a605c7          STRH     r0,[r6,#0x5c7]        ;1959
0005ec  f8b60186          LDRH     r0,[r6,#0x186]        ;1960
0005f0  f8a605db          STRH     r0,[r6,#0x5db]        ;1960
0005f4  eb040085          ADD      r0,r4,r5,LSL #2       ;1961
0005f8  f8d0219a          LDR      r2,[r0,#0x19a]        ;1961
0005fc  f8c025ef          STR      r2,[r0,#0x5ef]        ;1961
000600  f8b60186          LDRH     r0,[r6,#0x186]        ;1963
000604  2800              CMP      r0,#0                 ;1963
000606  f0008173          BEQ.W    |L17.2288|
00060a  eb040905          ADD      r9,r4,r5              ;1965
00060e  f8990a47          LDRB     r0,[r9,#0xa47]        ;1965
000612  2805              CMP      r0,#5                 ;1965
000614  bf3c              ITT      CC                    ;1965
000616  1c40              ADDCC    r0,r0,#1              ;1965
000618  f8890a47          STRBCC   r0,[r9,#0xa47]        ;1967
00061c  b2c0              UXTB     r0,r0                 ;1970
00061e  2801              CMP      r0,#1                 ;1970
000620  d02a              BEQ      |L17.1656|
000622  e05a              B        |L17.1754|
                  |L17.1572|
000624  eb0401c3          ADD      r1,r4,r3,LSL #3       ;1921
000628  54e8              STRB     r0,[r5,r3]            ;1920
00062a  eb0407c0          ADD      r7,r4,r0,LSL #3       ;1921
00062e  f8d18001          LDR      r8,[r1,#1]            ;1921
000632  f8c78122          STR      r8,[r7,#0x122]        ;1921
000636  f8d11005          LDR      r1,[r1,#5]            ;1921
00063a  f8c71126          STR      r1,[r7,#0x126]        ;1921
00063e  eb040740          ADD      r7,r4,r0,LSL #1       ;1922
000642  f8bc10a1          LDRH     r1,[r12,#0xa1]        ;1922
000646  f8a71186          STRH     r1,[r7,#0x186]        ;1922
00064a  f8bc1081          LDRH     r1,[r12,#0x81]        ;1923
00064e  f8a21172          STRH     r1,[r2,#0x172]        ;1923
000652  eb040183          ADD      r1,r4,r3,LSL #2       ;1924
000656  eb040080          ADD      r0,r4,r0,LSL #2       ;1924
00065a  f8d110c1          LDR      r1,[r1,#0xc1]         ;1924
00065e  f8c0119a          STR      r1,[r0,#0x19a]        ;1924
000662  f8bc1101          LDRH     r1,[r12,#0x101]       ;1925
000666  f8a211c2          STRH     r1,[r2,#0x1c2]        ;1925
00066a  f8bc1b49          LDRH     r1,[r12,#0xb49]       ;1931
00066e  f8a21b49          STRH     r1,[r2,#0xb49]        ;1931
000672  f8c06a7f          STR      r6,[r0,#0xa7f]        ;1933
000676  e788              B        |L17.1418|
                  |L17.1656|
000678  f8dd0498          LDR      r0,[sp,#0x498]        ;1972
00067c  b9c8              CBNZ     r0,|L17.1714|
00067e  f8da0010          LDR      r0,[r10,#0x10]        ;1974  ; thisInfo
000682  f04f0c64          MOV      r12,#0x64             ;1978
000686  1942              ADDS     r2,r0,r5              ;1974
000688  f8922dcd          LDRB     r2,[r2,#0xdcd]        ;1974
00068c  ebc203c2          RSB      r3,r2,r2,LSL #3       ;1978
000690  eb031242          ADD      r2,r3,r2,LSL #5       ;1978
000694  4402              ADD      r2,r2,r0              ;1978
000696  f8d2304e          LDR      r3,[r2,#0x4e]         ;1978
00069a  f8d22052          LDR      r2,[r2,#0x52]         ;1978
00069e  fb03f30c          MUL      r3,r3,r12             ;1978
0006a2  fbb3f2f2          UDIV     r2,r3,r2              ;1978
0006a6  2a46              CMP      r2,#0x46              ;1978
0006a8  bf3c              ITT      CC                    ;1983
0006aa  eb000045          ADDCC    r0,r0,r5,LSL #1       ;1983
0006ae  f8a074d0          STRHCC   r7,[r0,#0x4d0]        ;1983
                  |L17.1714|
0006b2  f8d10122          LDR      r0,[r1,#0x122]        ;1987
0006b6  f8c10227          STR      r0,[r1,#0x227]        ;1987
0006ba  f8d10126          LDR      r0,[r1,#0x126]        ;1987
0006be  f8c1022b          STR      r0,[r1,#0x22b]        ;1987
0006c2  f8897b93          STRB     r7,[r9,#0xb93]        ;1988
0006c6  f8087005          STRB     r7,[r8,r5]            ;1989
0006ca  f8d10122          LDR      r0,[r1,#0x122]        ;1996
0006ce  f8c10af9          STR      r0,[r1,#0xaf9]        ;1996
0006d2  f8d10126          LDR      r0,[r1,#0x126]        ;1996
0006d6  f8c10afd          STR      r0,[r1,#0xafd]        ;1996
                  |L17.1754|
0006da  f8da0010          LDR      r0,[r10,#0x10]        ;2000  ; thisInfo
0006de  f5005380          ADD      r3,r0,#0x1000         ;2000
0006e2  f8b30fb8          LDRH     r0,[r3,#0xfb8]        ;2000
0006e6  2800              CMP      r0,#0                 ;2000
0006e8  bf18              IT       NE                    ;2001
0006ea  f8a67172          STRHNE   r7,[r6,#0x172]        ;2001
0006ee  f8930fba          LDRB     r0,[r3,#0xfba]        ;2002
0006f2  b140              CBZ      r0,|L17.1798|
0006f4  f8b6036a          LDRH     r0,[r6,#0x36a]        ;2003
0006f8  b928              CBNZ     r0,|L17.1798|
0006fa  f8990a47          LDRB     r0,[r9,#0xa47]        ;2003
0006fe  2802              CMP      r0,#2                 ;2003
000700  bf98              IT       LS                    ;2004
000702  f8a67172          STRHLS   r7,[r6,#0x172]        ;2004
                  |L17.1798|
000706  f8da200c          LDR      r2,[r10,#0xc]         ;2007  ; thisModeConf
00070a  f9b20090          LDRSH    r0,[r2,#0x90]         ;2007
00070e  2800              CMP      r0,#0                 ;2007
000710  dd6d              BLE      |L17.2030|
000712  f818c005          LDRB     r12,[r8,r5]           ;2009
000716  f1bc0f00          CMP      r12,#0                ;2009
00071a  d129              BNE      |L17.1904|
00071c  f8933f87          LDRB     r3,[r3,#0xf87]        ;2012
000720  b993              CBNZ     r3,|L17.1864|
000722  f8943121          LDRB     r3,[r4,#0x121]        ;2013
000726  2b01              CMP      r3,#1                 ;2013
000728  d010              BEQ      |L17.1868|
00072a  2b02              CMP      r3,#2                 ;2014
00072c  bf08              IT       EQ                    ;2014
00072e  f9b20092          LDRSHEQ  r0,[r2,#0x92]         ;2014
000732  d00b              BEQ      |L17.1868|
000734  2b03              CMP      r3,#3                 ;2015
000736  bf08              IT       EQ                    ;2015
000738  f9b20094          LDRSHEQ  r0,[r2,#0x94]         ;2015
00073c  d006              BEQ      |L17.1868|
00073e  2b04              CMP      r3,#4                 ;2016
000740  bf08              IT       EQ                    ;2016
000742  f9b20096          LDRSHEQ  r0,[r2,#0x96]         ;2016
000746  d001              BEQ      |L17.1868|
                  |L17.1864|
000748  f9b20098          LDRSH    r0,[r2,#0x98]         ;2017
                  |L17.1868|
00074c  f8b621c2          LDRH     r2,[r6,#0x1c2]        ;2019
000750  4282              CMP      r2,r0                 ;2019
000752  db1c              BLT      |L17.1934|
000754  2001              MOVS     r0,#1                 ;2020
000756  f8080005          STRB     r0,[r8,r5]            ;2020
00075a  f8d10122          LDR      r0,[r1,#0x122]        ;2021
00075e  f8c10af9          STR      r0,[r1,#0xaf9]        ;2021
000762  f8d10126          LDR      r0,[r1,#0x126]        ;2021
000766  f8c10afd          STR      r0,[r1,#0xafd]        ;2021
00076a  f8180005          LDRB     r0,[r8,r5]            ;2025
00076e  b170              CBZ      r0,|L17.1934|
                  |L17.1904|
000770  f8b60172          LDRH     r0,[r6,#0x172]        ;2028
000774  2800              CMP      r0,#0                 ;2028
000776  bf1c              ITT      NE                    ;2030
000778  f9990a51          LDRSBNE  r0,[r9,#0xa51]        ;2030
00077c  2805              CMPNE    r0,#5                 ;2030
00077e  bfbc              ITT      LT                    ;2030
000780  1c40              ADDLT    r0,r0,#1              ;2030
000782  f8890a51          STRBLT   r0,[r9,#0xa51]        ;2031
                  |L17.1926|
000786  f8b6036a          LDRH     r0,[r6,#0x36a]        ;2039
00078a  b118              CBZ      r0,|L17.1940|
00078c  e0ad              B        |L17.2282|
                  |L17.1934|
00078e  f8a67172          STRH     r7,[r6,#0x172]        ;2026
000792  e7f8              B        |L17.1926|
                  |L17.1940|
000794  f60120f9          ADD      r0,r1,#0xaf9          ;2041
000798  2100              MOVS     r1,#0                 ;2041
00079a  f7fffffe          BL       algorithm_coord_IsEdgeArea
00079e  2800              CMP      r0,#0                 ;2041
0007a0  dd08              BLE      |L17.1972|
0007a2  f8da100c          LDR      r1,[r10,#0xc]         ;2042  ; thisModeConf
0007a6  f9990a51          LDRSB    r0,[r9,#0xa51]        ;2042
0007aa  f891109b          LDRB     r1,[r1,#0x9b]         ;2042
0007ae  4288              CMP      r0,r1                 ;2042
0007b0  dd78              BLE      |L17.2212|
0007b2  e09a              B        |L17.2282|
                  |L17.1972|
0007b4  f8da000c          LDR      r0,[r10,#0xc]         ;2046  ; thisModeConf
0007b8  f9992a51          LDRSB    r2,[r9,#0xa51]        ;2046
0007bc  f890109a          LDRB     r1,[r0,#0x9a]         ;2046
0007c0  428a              CMP      r2,r1                 ;2046
0007c2  bfd8              IT       LE                    ;2047
0007c4  f8a67172          STRHLE   r7,[r6,#0x172]        ;2047
0007c8  f8901065          LDRB     r1,[r0,#0x65]         ;2048
0007cc  2905              CMP      r1,#5                 ;2048
0007ce  d16a              BNE      |L17.2214|
0007d0  f8da1010          LDR      r1,[r10,#0x10]        ;2048  ; thisInfo
0007d4  f5015180          ADD      r1,r1,#0x1000         ;2048
0007d8  f9911fa8          LDRSB    r1,[r1,#0xfa8]        ;2048
0007dc  2900              CMP      r1,#0                 ;2048
0007de  dd62              BLE      |L17.2214|
0007e0  f9991a51          LDRSB    r1,[r9,#0xa51]        ;2049
0007e4  f8900066          LDRB     r0,[r0,#0x66]         ;2049
0007e8  4281              CMP      r1,r0                 ;2049
0007ea  dd77              BLE      |L17.2268|
0007ec  e07d              B        |L17.2282|
                  |L17.2030|
0007ee  f8b6036a          LDRH     r0,[r6,#0x36a]        ;2063
0007f2  b1d0              CBZ      r0,|L17.2090|
0007f4  f9991a51          LDRSB    r1,[r9,#0xa51]        ;2067
0007f8  f8d20087          LDR      r0,[r2,#0x87]         ;2065
0007fc  2905              CMP      r1,#5                 ;2067
0007fe  bfbc              ITT      LT                    ;2067
000800  1c49              ADDLT    r1,r1,#1              ;2067
000802  f8891a51          STRBLT   r1,[r9,#0xa51]        ;2069
000806  f892108b          LDRB     r1,[r2,#0x8b]         ;2072
00080a  b149              CBZ      r1,|L17.2080|
00080c  f8942121          LDRB     r2,[r4,#0x121]        ;2072
000810  2a05              CMP      r2,#5                 ;2072
000812  d803              BHI      |L17.2076|
000814  f8932f87          LDRB     r2,[r3,#0xf87]        ;2072
000818  2a01              CMP      r2,#1                 ;2072
00081a  d101              BNE      |L17.2080|
                  |L17.2076|
00081c  eba00051          SUB      r0,r0,r1,LSR #1       ;2072
                  |L17.2080|
000820  f8b61172          LDRH     r1,[r6,#0x172]        ;2074
000824  4281              CMP      r1,r0                 ;2074
000826  da60              BGE      |L17.2282|
000828  e05b              B        |L17.2274|
                  |L17.2090|
00082a  f9b2b085          LDRSH    r11,[r2,#0x85]        ;2082
00082e  f892008b          LDRB     r0,[r2,#0x8b]         ;2084
000832  b150              CBZ      r0,|L17.2122|
000834  f894c121          LDRB     r12,[r4,#0x121]       ;2084
000838  f1bc0f05          CMP      r12,#5                ;2084
00083c  d803              BHI      |L17.2118|
00083e  f8933f87          LDRB     r3,[r3,#0xf87]        ;2084
000842  2b01              CMP      r3,#1                 ;2084
000844  d101              BNE      |L17.2122|
                  |L17.2118|
000846  ebab0b00          SUB      r11,r11,r0            ;2084
                  |L17.2122|
00084a  f8b60172          LDRH     r0,[r6,#0x172]        ;2086
00084e  f8d2307f          LDR      r3,[r2,#0x7f]         ;2086
000852  4298              CMP      r0,r3                 ;2086
000854  d345              BCC      |L17.2274|
000856  f8b60186          LDRH     r0,[r6,#0x186]        ;2086
00085a  b378              CBZ      r0,|L17.2236|
00085c  2000              MOVS     r0,#0                 ;2088
00085e  f8cd0470          STR      r0,[sp,#0x470]        ;2094
000862  f8922084          LDRB     r2,[r2,#0x84]         ;2094
000866  b122              CBZ      r2,|L17.2162|
000868  f2012027          ADD      r0,r1,#0x227          ;2097
00086c  2100              MOVS     r1,#0                 ;2097
00086e  f7fffffe          BL       algorithm_coord_IsEdgeArea
                  |L17.2162|
000872  f9991a51          LDRSB    r1,[r9,#0xa51]        ;2103
000876  2905              CMP      r1,#5                 ;2103
000878  bfbc              ITT      LT                    ;2103
00087a  1c49              ADDLT    r1,r1,#1              ;2103
00087c  f8891a51          STRBLT   r1,[r9,#0xa51]        ;2105
000880  f8b611c2          LDRH     r1,[r6,#0x1c2]        ;2108
000884  4559              CMP      r1,r11                ;2108
000886  dd2c              BLE      |L17.2274|
000888  f8da100c          LDR      r1,[r10,#0xc]         ;2110  ; thisModeConf
00088c  f8b62172          LDRH     r2,[r6,#0x172]        ;2110
000890  f8d13075          LDR      r3,[r1,#0x75]         ;2110
000894  429a              CMP      r2,r3                 ;2110
000896  d307              BCC      |L17.2216|
000898  f8911079          LDRB     r1,[r1,#0x79]         ;2113
00089c  4408              ADD      r0,r0,r1              ;2113
00089e  f8cd0470          STR      r0,[sp,#0x470]        ;2113
0008a2  e015              B        |L17.2256|
                  |L17.2212|
0008a4  e01a              B        |L17.2268|
                  |L17.2214|
0008a6  e020              B        |L17.2282|
                  |L17.2216|
0008a8  f8d1307a          LDR      r3,[r1,#0x7a]         ;2115
0008ac  429a              CMP      r2,r3                 ;2115
0008ae  d306              BCC      |L17.2238|
0008b0  f891107e          LDRB     r1,[r1,#0x7e]         ;2118
0008b4  4408              ADD      r0,r0,r1              ;2118
0008b6  f8cd0470          STR      r0,[sp,#0x470]        ;2118
0008ba  e009              B        |L17.2256|
                  |L17.2236|
0008bc  e011              B        |L17.2274|
                  |L17.2238|
0008be  f8d1307f          LDR      r3,[r1,#0x7f]         ;2120
0008c2  429a              CMP      r2,r3                 ;2120
0008c4  d304              BCC      |L17.2256|
0008c6  f8911083          LDRB     r1,[r1,#0x83]         ;2123
0008ca  4408              ADD      r0,r0,r1              ;2123
0008cc  f8cd0470          STR      r0,[sp,#0x470]        ;2123
                  |L17.2256|
0008d0  f9991a51          LDRSB    r1,[r9,#0xa51]        ;2126
0008d4  f8dd0470          LDR      r0,[sp,#0x470]        ;2126
0008d8  4281              CMP      r1,r0                 ;2126
0008da  dc06              BGT      |L17.2282|
                  |L17.2268|
0008dc  f8a67172          STRH     r7,[r6,#0x172]        ;2132
0008e0  e003              B        |L17.2282|
                  |L17.2274|
0008e2  f8a67172          STRH     r7,[r6,#0x172]        ;2358
0008e6  f8897a51          STRB     r7,[r9,#0xa51]        ;2359
                  |L17.2282|
0008ea  f8897aef          STRB     r7,[r9,#0xaef]        ;2370
0008ee  e006              B        |L17.2302|
                  |L17.2288|
0008f0  1960              ADDS     r0,r4,r5              ;2403
0008f2  f8807a47          STRB     r7,[r0,#0xa47]        ;2403
0008f6  f8807a51          STRB     r7,[r0,#0xa51]        ;2404
0008fa  f8807aef          STRB     r7,[r0,#0xaef]        ;2405
                  |L17.2302|
0008fe  1e69              SUBS     r1,r5,#1              ;2405
000900  b2cd              UXTB     r5,r1                 ;2405
000902  f4bfae63          BCS      |L17.1484|
000906  f20d4d9c          ADD      sp,sp,#0x49c
00090a  e8bd8ff0          POP      {r4-r11,pc}
;;;2410   
                          ENDP

00090e  0000              DCW      0x0000
                  |L17.2320|
                          DCD      ||.bss||

                          AREA ||i.algorithm_label_EdgeExpand_Finger||, CODE, READONLY, ALIGN=2

                  algorithm_label_EdgeExpand_Finger PROC
;;;4164   int max_d = 100;
;;;4165   void algorithm_label_EdgeExpand_Finger(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;4166   {
000004  b08f              SUB      sp,sp,#0x3c
;;;4167       uint8_t rLabel_val;
;;;4168   	int l, c, r, apply_r, apply_c, search_r = -1, search_c = -1, search_c1,search_r1, tmp, edge_sum = 0;
;;;4169   	uint16_t offset_r = 0, offset_c = 0, scale_r = 0, scale_c = 0;
000006  2100              MOVS     r1,#0
000008  9103              STR      r1,[sp,#0xc]
00000a  9102              STR      r1,[sp,#8]
00000c  9101              STR      r1,[sp,#4]
;;;4170   	int32_t _d,_d1,_d2;	
;;;4171   	tLabelInfo_t	*temp_label;
;;;4172   	
;;;4173   	if(thisInfo->WinCertMode > 0)
00000e  9100              STR      r1,[sp,#0]
000010  49f8              LDR      r1,|L18.1012|
000012  f64172a8          MOV      r2,#0x1fa8
000016  6909              LDR      r1,[r1,#0x10]  ; thisInfo
000018  5652              LDRSB    r2,[r2,r1]
00001a  2a00              CMP      r2,#0
;;;4174   		return;
;;;4175   	
;;;4176   	if(mode != FULL_MODE)
;;;4177   	{
;;;4178   		temp_label = &thisInfo->tLabel_local;
;;;4179   	}
;;;4180   	else
;;;4181   	{
;;;4182   		temp_label = &thisInfo->tLabel;
;;;4183   	}
;;;4184   
;;;4185   	for(l=temp_label->ucNum;l--;)
;;;4186   	{
;;;4187   		if( temp_label->tTable[l].ulStrength )
;;;4188   		{
;;;4189   			search_r = -1, search_c = -1;
;;;4190   			if(temp_label->tTable[l].tMaxCell.r <= 1){
;;;4191   				search_r = 0, search_r1 = 1, apply_r = -1;
;;;4192   				offset_r = thisModeConf->EdgeExpand.usTopEdgeExpand_Offset;
;;;4193   				scale_r  = thisModeConf->EdgeExpand.usTopEdgeExpand_Scale;
;;;4194   			}
;;;4195   
;;;4196   			if(temp_label->tTable[l].tMaxCell.r >= ROW_MAX-2){
;;;4197   				search_r = ROW_MAX-1, search_r1 = ROW_MAX-2, apply_r = ROW_MAX;
;;;4198   				offset_r = thisModeConf->EdgeExpand.usBottomEdgeExpand_Offset;
;;;4199   				scale_r	 = thisModeConf->EdgeExpand.usBottomEdgeExpand_Scale;
;;;4200   			}
;;;4201   
;;;4202   			if(temp_label->tTable[l].tMaxCell.c <= 1){
;;;4203   				search_c = 0, search_c1 = 1, apply_c = -1;
;;;4204   				offset_c = thisModeConf->EdgeExpand.usLeftEdgeExpand_Offset;
;;;4205   				scale_c  = thisModeConf->EdgeExpand.usLeftEdgeExpand_Scale;
;;;4206   			}
;;;4207   
;;;4208   			if(temp_label->tTable[l].tMaxCell.c >= COL_MAX-2){
;;;4209   				search_c = COL_MAX-1, search_c1 = COL_MAX-2, apply_c = COL_MAX;
;;;4210   				offset_c = thisModeConf->EdgeExpand.usRightEdgeExpand_Offset;
;;;4211   				scale_c  = thisModeConf->EdgeExpand.usRightEdgeExpand_Scale;
;;;4212   			}
;;;4213   			
;;;4214   			if(thisModeConf->EdgeExpand.usLabelEdgeExpandMode == 1)
;;;4215   			{
;;;4216   				if(search_r == -1 && search_c == -1)
;;;4217   				{
;;;4218   					if(max_d < temp_label->tTable[l].ulStrength)
;;;4219   					{
;;;4220   						max_d = temp_label->tTable[l].ulStrength;
;;;4221   					}
;;;4222   				}
;;;4223   				else if(max_d == 0)
;;;4224   				{
;;;4225   					max_d = temp_label->tTable[l].ulStrength + 100;
;;;4226   				}
;;;4227   			}
;;;4228   			
;;;4229   			if(search_r != -1)													//Top, bottom edge
;;;4230   			{
;;;4231   				_d =_d1 =_d2 = 0;
;;;4232   				
;;;4233   				if(!(offset_r==0 && scale_r==0))
;;;4234   				{
;;;4235   					edge_sum = 0;
;;;4236   					for(c = temp_label->tTable[l].tRect.cs; c <= temp_label->tTable[l].tRect.ce; c++)
;;;4237   					{
;;;4238   						if(HAL_READ_LABEL_IMAGE(search_r, c) == l+1){
;;;4239   							edge_sum += HAL_READ_DELTA_IMAGE(search_r, c);
;;;4240   						}
;;;4241   					}
;;;4242   					
;;;4243   #if USED_ALGORITHM_FOR_MNT				
;;;4244   					IsDrawing = NO;
;;;4245   					for(pl=0;pl<ptMemConf->iMaxTouch_;pl++)
;;;4246   					{
;;;4247   						if(temp_coord->DrawingFlag[pl] && temp_coord->tOrgPastPos[0].vusS[pl]>0)
;;;4248   						{
;;;4249   							if(algorithm_coord_calc_distance(temp_pos, temp_coord->tOrgPastPos[0].tXY[pl]) < (2<<POS_BOOST_SHIFT_))
;;;4250   								IsDrawing = YES;
;;;4251   						}
;;;4252   					}
;;;4253   #endif /* USED_ALGORITHM_FOR_MNT */	
;;;4254   							
;;;4255   					for(c = temp_label->tTable[l].tRect.cs; c <= temp_label->tTable[l].tRect.ce; c++)	//Column
;;;4256   					{
;;;4257   						rLabel_val = HAL_READ_LABEL_IMAGE(search_r, c);
;;;4258   						
;;;4259   						if(rLabel_val == l+1)
;;;4260   						{
;;;4261   							_d2 = 0;
;;;4262   							
;;;4263   							if(mode == LOCAL_FINGER_MODE)
;;;4264   							{
;;;4265   								_d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(search_r, c);
;;;4266   								_d1 = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(search_r1, c);
;;;4267   							}
;;;4268   							else
;;;4269   							{
;;;4270   								_d = HAL_READ_DELTA_IMAGE(search_r, c);
;;;4271   								_d1 = HAL_READ_DELTA_IMAGE(search_r1, c);
;;;4272   							}
;;;4273   							
;;;4274   							if(_d1 < 0)	_d1 = 0;
;;;4275   							if(max_d < _d + _d1)	max_d = _d + _d1;
;;;4276   							
;;;4277   							if(_d > _d1)
;;;4278   							{
;;;4279   								tmp = max_d - (_d + _d1);
;;;4280   								if(tmp < 0)	tmp = 0;
;;;4281   								
;;;4282   #if USED_ALGORITHM_FOR_MNT				
;;;4283   								if(IsDrawing)	tmp<<=3;
;;;4284   #endif /* USED_ALGORITHM_FOR_MNT */	
;;;4285   								
;;;4286   								_d2 = tmp * _d * (_d - _d1) / (edge_sum * (_d + _d1));
;;;4287   								_d2 = ((_d2 * scale_r)>>7) - offset_r;
;;;4288   							}
;;;4289   							
;;;4290   							temp_label->tTable[l].tCoord.x	+= c * _d2;
;;;4291   							temp_label->tTable[l].tCoord.y	+= apply_r * _d2;
;;;4292   							temp_label->tTable[l].ulExtStrength += _d2;
;;;4293   						}
;;;4294   					}
;;;4295   				}
;;;4296   			}
;;;4297   			
;;;4298   			if(search_c != -1)													//Left, right edge
;;;4299   			{
;;;4300   				_d =_d1 =_d2 = 0;
;;;4301   				
;;;4302   				if(!(offset_c==0 && scale_c==0))
;;;4303   				{
;;;4304   					edge_sum = 0;
;;;4305   					for(r = temp_label->tTable[l].tRect.rs; r <= temp_label->tTable[l].tRect.re; r++)
;;;4306   					{
;;;4307   						if(HAL_READ_LABEL_IMAGE(r, search_c) == l+1){
;;;4308   							edge_sum += HAL_READ_DELTA_IMAGE(r, search_c);
;;;4309   						}
;;;4310   					}
;;;4311   					
;;;4312   #if USED_ALGORITHM_FOR_MNT			
;;;4313   					IsDrawing = NO;
;;;4314   					for(pl=0;pl<ptMemConf->iMaxTouch_;pl++)
;;;4315   					{
;;;4316   						if(temp_coord->DrawingFlag[pl] && temp_coord->tOrgPastPos[0].vusS[pl]>0)
;;;4317   						{
;;;4318   							if(algorithm_coord_calc_distance(temp_pos, temp_coord->tOrgPastPos[0].tXY[pl]) < (2<<POS_BOOST_SHIFT_))
;;;4319   								IsDrawing = YES;
;;;4320   						}
;;;4321   					}	
;;;4322   #endif /* USED_ALGORITHM_FOR_MNT */	
;;;4323   					
;;;4324   					for(r = temp_label->tTable[l].tRect.rs; r <= temp_label->tTable[l].tRect.re; r++)	//Row
;;;4325   					{
;;;4326   						rLabel_val = HAL_READ_LABEL_IMAGE(r, search_c);
;;;4327   						
;;;4328   						if(rLabel_val == l+1)
;;;4329   						{
;;;4330   							_d2 = 0;
;;;4331   							
;;;4332   							if(mode == LOCAL_FINGER_MODE)
;;;4333   							{
;;;4334   								_d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, search_c);
;;;4335   								_d1 = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, search_c1);
;;;4336   							}
;;;4337   							else
;;;4338   							{
;;;4339   								_d = HAL_READ_DELTA_IMAGE(r, search_c);
;;;4340   								_d1 = HAL_READ_DELTA_IMAGE(r, search_c1);
;;;4341   							}
;;;4342   							
;;;4343   							if(_d1 < 0)	_d1 = 0;
;;;4344   							if(max_d < _d + _d1)	max_d = _d + _d1;
;;;4345   							
;;;4346   							if(_d > _d1)
;;;4347   							{
;;;4348   								tmp = max_d - (_d + _d1);
;;;4349   								if(tmp < 0)	tmp = 0;
;;;4350   								
;;;4351   #if USED_ALGORITHM_FOR_MNT			
;;;4352   								if(IsDrawing)	tmp<<=3;
;;;4353   #endif /* USED_ALGORITHM_FOR_MNT */	
;;;4354   								
;;;4355   								_d2 = tmp * _d * (_d - _d1) / (edge_sum * (_d + _d1));
;;;4356   								_d2 = ((_d2 * scale_c)>>7) - offset_c;
;;;4357   							}
;;;4358   
;;;4359   							temp_label->tTable[l].tCoord.x	+= apply_c * _d2;
;;;4360   							temp_label->tTable[l].tCoord.y	+= r *_d2;
;;;4361   							temp_label->tTable[l].ulExtStrength += _d2;
;;;4362   						}
;;;4363   					}
;;;4364   				}
;;;4365   			}
;;;4366   		}	
;;;4367   	}
;;;4368   	
;;;4369   	if(temp_label->ucValidNum == 0)
;;;4370   	{
;;;4371   		if(thisModeConf->EdgeExpand.usLabelEdgeExpandMode == 0)
;;;4372   			max_d = 100;
;;;4373   		else if(thisModeConf->EdgeExpand.usLabelEdgeExpandMode == 1)
;;;4374   			max_d = 0;
;;;4375   		else
;;;4376   			max_d = thisModeConf->EdgeExpand.usLabelEdgeExpandMode;
;;;4377   	}
;;;4378   }
00001c  bfc4              ITT      GT
00001e  b00f              ADDGT    sp,sp,#0x3c
000020  e8bd8ff0          POPGT    {r4-r11,pc}
000024  2800              CMP      r0,#0                 ;4176
000026  bf1a              ITTE     NE                    ;4178
000028  f24102b0          MOVNE    r2,#0x10b0            ;4178
00002c  4411              ADDNE    r1,r2                 ;4178
00002e  313a              ADDEQ    r1,r1,#0x3a           ;4178
000030  9108              STR      r1,[sp,#0x20]         ;4185
000032  7809              LDRB     r1,[r1,#0]            ;4185
000034  1e4a              SUBS     r2,r1,#1              ;4185
000036  9206              STR      r2,[sp,#0x18]         ;4173
000038  4aee              LDR      r2,|L18.1012|
00003a  68d2              LDR      r2,[r2,#0xc]          ;4210
00003c  920e              STR      r2,[sp,#0x38]         ;4210
00003e  bf24              ITT      CS                    ;4187
000040  9205              STRCS    r2,[sp,#0x14]         ;4187
000042  9906              LDRCS    r1,[sp,#0x18]         ;4187
000044  f0c081b9          BCC.W    |L18.954|
                  |L18.72|
000048  ebc102c1          RSB      r2,r1,r1,LSL #3       ;4187
00004c  eb021241          ADD      r2,r2,r1,LSL #5       ;4187
000050  9908              LDR      r1,[sp,#0x20]         ;4187
000052  4411              ADD      r1,r1,r2              ;4187
000054  694b              LDR      r3,[r1,#0x14]         ;4187
000056  2b00              CMP      r3,#0                 ;4187
000058  f00081aa          BEQ.W    |L18.944|
00005c  f04f37ff          MOV      r7,#0xffffffff        ;4189
000060  9704              STR      r7,[sp,#0x10]         ;4190
000062  f991200b          LDRSB    r2,[r1,#0xb]          ;4190
000066  2a01              CMP      r2,#1                 ;4190
000068  dc14              BGT      |L18.148|
00006a  f04f0c01          MOV      r12,#1                ;4191
00006e  f8cdc034          STR      r12,[sp,#0x34]        ;4191
000072  f04f3cff          MOV      r12,#0xffffffff       ;4191
000076  f8cdc030          STR      r12,[sp,#0x30]        ;4191
00007a  f8ddc014          LDR      r12,[sp,#0x14]        ;4192
00007e  2700              MOVS     r7,#0                 ;4191
000080  f8bcc0b6          LDRH     r12,[r12,#0xb6]       ;4192
000084  f8cdc00c          STR      r12,[sp,#0xc]         ;4192
000088  f8ddc014          LDR      r12,[sp,#0x14]        ;4193
00008c  f8bcc0be          LDRH     r12,[r12,#0xbe]       ;4193
000090  f8cdc004          STR      r12,[sp,#4]           ;4193
                  |L18.148|
000094  2a2e              CMP      r2,#0x2e              ;4196
000096  db0c              BLT      |L18.178|
000098  222e              MOVS     r2,#0x2e              ;4197
00009a  272f              MOVS     r7,#0x2f              ;4197
00009c  920d              STR      r2,[sp,#0x34]         ;4197
00009e  2230              MOVS     r2,#0x30              ;4197
0000a0  920c              STR      r2,[sp,#0x30]         ;4197
0000a2  9a05              LDR      r2,[sp,#0x14]         ;4198
0000a4  f8b220b8          LDRH     r2,[r2,#0xb8]         ;4198
0000a8  9203              STR      r2,[sp,#0xc]          ;4198
0000aa  9a05              LDR      r2,[sp,#0x14]         ;4199
0000ac  f8b220c0          LDRH     r2,[r2,#0xc0]         ;4199
0000b0  9201              STR      r2,[sp,#4]            ;4199
                  |L18.178|
0000b2  f991200a          LDRSB    r2,[r1,#0xa]          ;4202
0000b6  2a01              CMP      r2,#1                 ;4202
0000b8  dc17              BGT      |L18.234|
0000ba  f04f0c00          MOV      r12,#0                ;4203
0000be  f8cdc010          STR      r12,[sp,#0x10]        ;4203
0000c2  f04f0c01          MOV      r12,#1                ;4203
0000c6  f8cdc01c          STR      r12,[sp,#0x1c]        ;4203
0000ca  f04f3cff          MOV      r12,#0xffffffff       ;4203
0000ce  f8cdc02c          STR      r12,[sp,#0x2c]        ;4203
0000d2  f8ddc014          LDR      r12,[sp,#0x14]        ;4204
0000d6  f8bcc0b2          LDRH     r12,[r12,#0xb2]       ;4204
0000da  f8cdc008          STR      r12,[sp,#8]           ;4204
0000de  f8ddc014          LDR      r12,[sp,#0x14]        ;4205
0000e2  f8bcc0ba          LDRH     r12,[r12,#0xba]       ;4205
0000e6  f8cdc000          STR      r12,[sp,#0]           ;4205
                  |L18.234|
0000ea  2a5e              CMP      r2,#0x5e              ;4208
0000ec  db0d              BLT      |L18.266|
0000ee  225f              MOVS     r2,#0x5f              ;4209
0000f0  9204              STR      r2,[sp,#0x10]         ;4209
0000f2  225e              MOVS     r2,#0x5e              ;4209
0000f4  9207              STR      r2,[sp,#0x1c]         ;4209
0000f6  2260              MOVS     r2,#0x60              ;4209
0000f8  920b              STR      r2,[sp,#0x2c]         ;4209
0000fa  9a05              LDR      r2,[sp,#0x14]         ;4210
0000fc  f8b220b4          LDRH     r2,[r2,#0xb4]         ;4210
000100  9202              STR      r2,[sp,#8]            ;4210
000102  9a05              LDR      r2,[sp,#0x14]         ;4211
000104  f8b220bc          LDRH     r2,[r2,#0xbc]         ;4211
000108  9200              STR      r2,[sp,#0]            ;4211
                  |L18.266|
00010a  9a05              LDR      r2,[sp,#0x14]         ;4214
00010c  f8b220b0          LDRH     r2,[r2,#0xb0]         ;4214
000110  2a01              CMP      r2,#1                 ;4214
000112  d10f              BNE      |L18.308|
000114  f1b73fff          CMP      r7,#0xffffffff        ;4216
000118  bf04              ITT      EQ                    ;4216
00011a  9a04              LDREQ    r2,[sp,#0x10]         ;4216
00011c  f1b23fff          CMPEQ    r2,#0xffffffff        ;4216
000120  f0008162          BEQ.W    |L18.1000|
000124  4ab3              LDR      r2,|L18.1012|
000126  f8d2c01c          LDR      r12,[r2,#0x1c]        ;4223  ; max_d
00012a  f1bc0f00          CMP      r12,#0                ;4223
00012e  bf04              ITT      EQ                    ;4223
000130  3364              ADDEQ    r3,r3,#0x64           ;4223
000132  61d3              STREQ    r3,[r2,#0x1c]         ;4225  ; max_d
                  |L18.308|
000134  f1b73fff          CMP      r7,#0xffffffff        ;4229
000138  d07c              BEQ      |L18.564|
00013a  9b01              LDR      r3,[sp,#4]            ;4233
00013c  9a03              LDR      r2,[sp,#0xc]          ;4233
00013e  431a              ORRS     r2,r2,r3              ;4233
000140  d078              BEQ      |L18.564|
000142  f9912004          LDRSB    r2,[r1,#4]            ;4236
000146  f9913005          LDRSB    r3,[r1,#5]            ;4236
00014a  f04f0800          MOV      r8,#0                 ;4235
00014e  1a9e              SUBS     r6,r3,r2              ;4236
000150  f1060901          ADD      r9,r6,#1              ;4236
000154  f1b90f00          CMP      r9,#0                 ;4236
000158  dd21              BLE      |L18.414|
00015a  eb071307          ADD      r3,r7,r7,LSL #4       ;4236
00015e  eb031447          ADD      r4,r3,r7,LSL #5       ;4236
000162  f8dfc294          LDR      r12,|L18.1016|
000166  f64d733b          MOV      r3,#0xdf3b            ;4236
00016a  eb0c0544          ADD      r5,r12,r4,LSL #1      ;4236
00016e  4415              ADD      r5,r5,r2              ;4236
000170  eb0c0484          ADD      r4,r12,r4,LSL #2      ;4236
000174  442b              ADD      r3,r3,r5              ;4236
000176  eb040442          ADD      r4,r4,r2,LSL #1       ;4236
00017a  f64b1c56          MOV      r12,#0xb956           ;4236
00017e  9d06              LDR      r5,[sp,#0x18]         ;4168
000180  44a4              ADD      r12,r12,r4            ;4236
000182  464c              MOV      r4,r9                 ;4236
000184  f1150501          ADDS.W   r5,r5,#1              ;4168
                  |L18.392|
000188  f813ab01          LDRB     r10,[r3],#1           ;4238
00018c  45aa              CMP      r10,r5                ;4238
00018e  bf04              ITT      EQ                    ;4239
000190  f9bca000          LDRSHEQ  r10,[r12,#0]          ;4239
000194  44d0              ADDEQ    r8,r8,r10             ;4239
000196  1e64              SUBS     r4,r4,#1              ;4239
000198  f10c0c02          ADD      r12,r12,#2            ;4239
00019c  d1f4              BNE      |L18.392|
                  |L18.414|
00019e  f1b90f00          CMP      r9,#0                 ;4255
0001a2  dd69              BLE      |L18.632|
0001a4  eb071307          ADD      r3,r7,r7,LSL #4       ;4255
0001a8  4c93              LDR      r4,|L18.1016|
0001aa  eb031347          ADD      r3,r3,r7,LSL #5       ;4255
0001ae  eb040c43          ADD      r12,r4,r3,LSL #1      ;4255
0001b2  eb040383          ADD      r3,r4,r3,LSL #2       ;4236
0001b6  eb0c0502          ADD      r5,r12,r2             ;4255
0001ba  930a              STR      r3,[sp,#0x28]         ;4168
0001bc  f64d7c3b          MOV      r12,#0xdf3b           ;4255
0001c0  9b0d              LDR      r3,[sp,#0x34]         ;4266
0001c2  eb05070c          ADD      r7,r5,r12             ;4255
0001c6  eb031503          ADD      r5,r3,r3,LSL #4       ;4266
0001ca  eb051343          ADD      r3,r5,r3,LSL #5       ;4266
0001ce  eb040383          ADD      r3,r4,r3,LSL #2       ;4266
0001d2  9309              STR      r3,[sp,#0x24]         ;4168
0001d4  9b06              LDR      r3,[sp,#0x18]         ;4185
0001d6  4e87              LDR      r6,|L18.1012|
0001d8  f04f0c00          MOV      r12,#0                ;4255
0001dc  46ca              MOV      r10,r9                ;4255
0001de  f1030b01          ADD      r11,r3,#1             ;4185
0001e2  bf00              NOP                            ;4259
                  |L18.484|
0001e4  f8173b01          LDRB     r3,[r7],#1            ;4259
0001e8  455b              CMP      r3,r11                ;4259
0001ea  d140              BNE      |L18.622|
0001ec  9c0a              LDR      r4,[sp,#0x28]         ;4270
0001ee  eb02030c          ADD      r3,r2,r12             ;4270
0001f2  f8dd9024          LDR      r9,[sp,#0x24]         ;4271
0001f6  eb040443          ADD      r4,r4,r3,LSL #1       ;4270
0001fa  eb090343          ADD      r3,r9,r3,LSL #1       ;4271
0001fe  f5034330          ADD      r3,r3,#0xb000         ;4271
000202  f5044430          ADD      r4,r4,#0xb000         ;4270
000206  f9b33956          LDRSH    r3,[r3,#0x956]        ;4271
00020a  2500              MOVS     r5,#0                 ;4261
00020c  f9b44956          LDRSH    r4,[r4,#0x956]        ;4270
000210  2b00              CMP      r3,#0                 ;4274
000212  f2c080f3          BLT.W    |L18.1020|
000216  bf00              NOP                            ;4275
                  |L18.536|
000218  f8d6e01c          LDR      lr,[r6,#0x1c]         ;4275  ; max_d
00021c  eb040903          ADD      r9,r4,r3              ;4275
000220  45f1              CMP      r9,lr                 ;4275
000222  f30080ed          BGT.W    |L18.1024|
                  |L18.550|
000226  429c              CMP      r4,r3                 ;4277
000228  dd13              BLE      |L18.594|
00022a  69f5              LDR      r5,[r6,#0x1c]         ;4279  ; max_d
00022c  eba50509          SUB      r5,r5,r9              ;4279
000230  2d00              CMP      r5,#0                 ;4286
000232  e000              B        |L18.566|
                  |L18.564|
000234  e020              B        |L18.632|
                  |L18.566|
000236  bfd8              IT       LE                    ;4286
000238  2500              MOVLE    r5,#0                 ;4286
00023a  4365              MULS     r5,r4,r5              ;4286
00023c  1ae3              SUBS     r3,r4,r3              ;4286
00023e  436b              MULS     r3,r5,r3              ;4286
000240  fb09f408          MUL      r4,r9,r8              ;4286
000244  fb93f3f4          SDIV     r3,r3,r4              ;4286
000248  9c01              LDR      r4,[sp,#4]            ;4287
00024a  435c              MULS     r4,r3,r4              ;4287
00024c  9b03              LDR      r3,[sp,#0xc]          ;4287
00024e  ebc315e4          RSB      r5,r3,r4,ASR #7       ;4287
                  |L18.594|
000252  68cb              LDR      r3,[r1,#0xc]          ;4290
000254  eb02040c          ADD      r4,r2,r12             ;4290
000258  fb043305          MLA      r3,r4,r5,r3           ;4290
00025c  60cb              STR      r3,[r1,#0xc]          ;4290
00025e  690c              LDR      r4,[r1,#0x10]         ;4291
000260  9b0c              LDR      r3,[sp,#0x30]         ;4291
000262  fb034305          MLA      r3,r3,r5,r4           ;4291
000266  610b              STR      r3,[r1,#0x10]         ;4291
000268  698b              LDR      r3,[r1,#0x18]         ;4292
00026a  442b              ADD      r3,r3,r5              ;4292
00026c  618b              STR      r3,[r1,#0x18]         ;4292
                  |L18.622|
00026e  f1ba0a01          SUBS     r10,r10,#1            ;4292
000272  f10c0c01          ADD      r12,r12,#1            ;4292
000276  d1b5              BNE      |L18.484|
                  |L18.632|
000278  9a04              LDR      r2,[sp,#0x10]         ;4298
00027a  f1b23fff          CMP      r2,#0xffffffff        ;4298
00027e  d07d              BEQ      |L18.892|
000280  9b00              LDR      r3,[sp,#0]            ;4302
000282  9a02              LDR      r2,[sp,#8]            ;4302
000284  431a              ORRS     r2,r2,r3              ;4302
000286  d079              BEQ      |L18.892|
000288  f9912002          LDRSB    r2,[r1,#2]            ;4305
00028c  f9913003          LDRSB    r3,[r1,#3]            ;4305
000290  f04f0800          MOV      r8,#0                 ;4304
000294  1a9e              SUBS     r6,r3,r2              ;4305
000296  1c77              ADDS     r7,r6,#1              ;4305
000298  2f00              CMP      r7,#0                 ;4305
00029a  dd23              BLE      |L18.740|
00029c  eb021c02          ADD      r12,r2,r2,LSL #4      ;4305
0002a0  4c55              LDR      r4,|L18.1016|
0002a2  eb0c1c42          ADD      r12,r12,r2,LSL #5     ;4305
0002a6  eb04054c          ADD      r5,r4,r12,LSL #1      ;4305
0002aa  9b04              LDR      r3,[sp,#0x10]         ;4305
0002ac  eb04048c          ADD      r4,r4,r12,LSL #2      ;4305
0002b0  441d              ADD      r5,r5,r3              ;4305
0002b2  f8ddc010          LDR      r12,[sp,#0x10]        ;4305
0002b6  f64d733b          MOV      r3,#0xdf3b            ;4305
0002ba  442b              ADD      r3,r3,r5              ;4305
0002bc  eb04044c          ADD      r4,r4,r12,LSL #1      ;4305
0002c0  f64b1c56          MOV      r12,#0xb956           ;4305
0002c4  9d06              LDR      r5,[sp,#0x18]         ;4168
0002c6  44a4              ADD      r12,r12,r4            ;4305
0002c8  463c              MOV      r4,r7                 ;4305
0002ca  1c6d              ADDS     r5,r5,#1              ;4168
                  |L18.716|
0002cc  f8939000          LDRB     r9,[r3,#0]            ;4307
0002d0  45a9              CMP      r9,r5                 ;4307
0002d2  bf04              ITT      EQ                    ;4308
0002d4  f9bc9000          LDRSHEQ  r9,[r12,#0]           ;4308
0002d8  44c8              ADDEQ    r8,r8,r9              ;4308
0002da  3362              ADDS     r3,r3,#0x62           ;4308
0002dc  1e64              SUBS     r4,r4,#1              ;4308
0002de  f10c0cc4          ADD      r12,r12,#0xc4         ;4308
0002e2  d1f3              BNE      |L18.716|
                  |L18.740|
0002e4  2f00              CMP      r7,#0                 ;4324
0002e6  dd63              BLE      |L18.944|
0002e8  eb021302          ADD      r3,r2,r2,LSL #4       ;4324
0002ec  4c42              LDR      r4,|L18.1016|
0002ee  eb031342          ADD      r3,r3,r2,LSL #5       ;4324
0002f2  eb040c43          ADD      r12,r4,r3,LSL #1      ;4324
0002f6  9b04              LDR      r3,[sp,#0x10]         ;4324
0002f8  f1060a01          ADD      r10,r6,#1             ;4324
0002fc  449c              ADD      r12,r12,r3            ;4324
0002fe  f64d733b          MOV      r3,#0xdf3b            ;4324
000302  eb0c0703          ADD      r7,r12,r3             ;4324
000306  9b06              LDR      r3,[sp,#0x18]         ;4185
000308  4e3a              LDR      r6,|L18.1012|
00030a  f04f0c00          MOV      r12,#0                ;4324
00030e  f1030b01          ADD      r11,r3,#1             ;4185
                  |L18.786|
000312  783b              LDRB     r3,[r7,#0]            ;4328
000314  455b              CMP      r3,r11                ;4328
000316  d145              BNE      |L18.932|
000318  eb02030c          ADD      r3,r2,r12             ;4339
00031c  eb031403          ADD      r4,r3,r3,LSL #4       ;4339
000320  eb041443          ADD      r4,r4,r3,LSL #5       ;4339
000324  4b34              LDR      r3,|L18.1016|
000326  f8dd901c          LDR      r9,[sp,#0x1c]         ;4340
00032a  eb030384          ADD      r3,r3,r4,LSL #2       ;4339
00032e  9c04              LDR      r4,[sp,#0x10]         ;4339
000330  2500              MOVS     r5,#0                 ;4330
000332  eb030444          ADD      r4,r3,r4,LSL #1       ;4339
000336  eb030349          ADD      r3,r3,r9,LSL #1       ;4340
00033a  f5034330          ADD      r3,r3,#0xb000         ;4340
00033e  f5044430          ADD      r4,r4,#0xb000         ;4339
000342  f9b33956          LDRSH    r3,[r3,#0x956]        ;4340
000346  f9b44956          LDRSH    r4,[r4,#0x956]        ;4339
00034a  2b00              CMP      r3,#0                 ;4343
00034c  db5b              BLT      |L18.1030|
00034e  bf00              NOP                            ;4344
                  |L18.848|
000350  f8d6e01c          LDR      lr,[r6,#0x1c]         ;4344  ; max_d
000354  eb040903          ADD      r9,r4,r3              ;4344
000358  45f1              CMP      r9,lr                 ;4344
00035a  dc56              BGT      |L18.1034|
                  |L18.860|
00035c  429c              CMP      r4,r3                 ;4346
00035e  dd13              BLE      |L18.904|
000360  69f5              LDR      r5,[r6,#0x1c]         ;4348  ; max_d
000362  eba50509          SUB      r5,r5,r9              ;4348
000366  2d00              CMP      r5,#0                 ;4355
000368  bfd8              IT       LE                    ;4355
00036a  2500              MOVLE    r5,#0                 ;4355
00036c  4365              MULS     r5,r4,r5              ;4355
00036e  1ae3              SUBS     r3,r4,r3              ;4355
000370  436b              MULS     r3,r5,r3              ;4355
000372  fb09f408          MUL      r4,r9,r8              ;4355
000376  fb93f3f4          SDIV     r3,r3,r4              ;4355
00037a  e000              B        |L18.894|
                  |L18.892|
00037c  e018              B        |L18.944|
                  |L18.894|
00037e  9c00              LDR      r4,[sp,#0]            ;4356
000380  435c              MULS     r4,r3,r4              ;4356
000382  9b02              LDR      r3,[sp,#8]            ;4356
000384  ebc315e4          RSB      r5,r3,r4,ASR #7       ;4356
                  |L18.904|
000388  68cc              LDR      r4,[r1,#0xc]          ;4359
00038a  9b0b              LDR      r3,[sp,#0x2c]         ;4359
00038c  fb034305          MLA      r3,r3,r5,r4           ;4359
000390  60cb              STR      r3,[r1,#0xc]          ;4359
000392  690b              LDR      r3,[r1,#0x10]         ;4360
000394  eb02040c          ADD      r4,r2,r12             ;4360
000398  fb043305          MLA      r3,r4,r5,r3           ;4360
00039c  610b              STR      r3,[r1,#0x10]         ;4360
00039e  698b              LDR      r3,[r1,#0x18]         ;4361
0003a0  442b              ADD      r3,r3,r5              ;4361
0003a2  618b              STR      r3,[r1,#0x18]         ;4361
                  |L18.932|
0003a4  3762              ADDS     r7,r7,#0x62           ;4361
0003a6  f1ba0a01          SUBS     r10,r10,#1            ;4361
0003aa  f10c0c01          ADD      r12,r12,#1            ;4361
0003ae  d1b0              BNE      |L18.786|
                  |L18.944|
0003b0  9906              LDR      r1,[sp,#0x18]         ;4363
0003b2  1e49              SUBS     r1,r1,#1              ;4363
0003b4  9106              STR      r1,[sp,#0x18]         ;4363
0003b6  f4bfae47          BCS      |L18.72|
                  |L18.954|
0003ba  9808              LDR      r0,[sp,#0x20]         ;4369
0003bc  f8900271          LDRB     r0,[r0,#0x271]        ;4369
0003c0  2800              CMP      r0,#0                 ;4369
0003c2  bf1c              ITT      NE
0003c4  b00f              ADDNE    sp,sp,#0x3c
0003c6  e8bd8ff0          POPNE    {r4-r11,pc}
0003ca  480a              LDR      r0,|L18.1012|
0003cc  990e              LDR      r1,[sp,#0x38]         ;4371
0003ce  f8b110b0          LDRH     r1,[r1,#0xb0]         ;4371
0003d2  2900              CMP      r1,#0                 ;4371
0003d4  bf08              IT       EQ                    ;4372
0003d6  2164              MOVEQ    r1,#0x64              ;4372
0003d8  d002              BEQ      |L18.992|
0003da  2901              CMP      r1,#1                 ;4373
0003dc  bf08              IT       EQ                    ;4374
0003de  2100              MOVEQ    r1,#0                 ;4374
                  |L18.992|
0003e0  61c1              STR      r1,[r0,#0x1c]         ;4372  ; max_d
0003e2  b00f              ADD      sp,sp,#0x3c
0003e4  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.1000|
0003e8  4902              LDR      r1,|L18.1012|
0003ea  69ca              LDR      r2,[r1,#0x1c]         ;4218  ; max_d
0003ec  4293              CMP      r3,r2                 ;4218
0003ee  bf88              IT       HI                    ;4220
0003f0  61cb              STRHI    r3,[r1,#0x1c]         ;4220  ; max_d
0003f2  e7dd              B        |L18.944|
                  |L18.1012|
                          DCD      ||.data||
                  |L18.1016|
                          DCD      FullSharedBuff
                  |L18.1020|
0003fc  2300              MOVS     r3,#0                 ;4274
0003fe  e70b              B        |L18.536|
                  |L18.1024|
000400  f8c6901c          STR      r9,[r6,#0x1c]         ;4275  ; max_d
000404  e70f              B        |L18.550|
                  |L18.1030|
000406  2300              MOVS     r3,#0                 ;4343
000408  e7a2              B        |L18.848|
                  |L18.1034|
00040a  f8c6901c          STR      r9,[r6,#0x1c]         ;4344  ; max_d
00040e  e7a5              B        |L18.860|
;;;4379   
                          ENDP


                          AREA ||i.algorithm_width_height_calculation||, CODE, READONLY, ALIGN=2

                  algorithm_width_height_calculation PROC
;;;3368   
;;;3369   void algorithm_width_height_calculation(int cl)
000000  4a1d              LDR      r2,|L19.120|
;;;3370   {
000002  b430              PUSH     {r4,r5}
;;;3371   	tCoordInfo_t 	*temp_coord;
;;;3372   	tRect_t *temp_rect;
;;;3373   	int iWidth, iHeight;
;;;3374   	
;;;3375   	temp_coord = &thisInfo->tCoord;
000004  6911              LDR      r1,[r2,#0x10]  ; thisInfo
000006  f201335e          ADD      r3,r1,#0x35e
;;;3376   	temp_rect = &temp_coord->tPos.rect[cl];
00000a  eb030180          ADD      r1,r3,r0,LSL #2
;;;3377   	
;;;3378   	iWidth  = ((temp_rect->ce - temp_rect->cs + 1) * thisCommonConf->iXResolution + (COL_MAX>>1)) / COL_MAX;
00000e  f991c19d          LDRSB    r12,[r1,#0x19d]
000012  f991419c          LDRSB    r4,[r1,#0x19c]
000016  ebac0c04          SUB      r12,r12,r4
00001a  f10c0401          ADD      r4,r12,#1
00001e  f8d2c008          LDR      r12,[r2,#8]  ; thisCommonConf
000022  f8dc2002          LDR      r2,[r12,#2]
;;;3379   	iHeight = ((temp_rect->re - temp_rect->rs + 1) * thisCommonConf->iYResolution + (ROW_MAX>>1)) / ROW_MAX;
000026  f8dcc006          LDR      r12,[r12,#6]
00002a  4362              MULS     r2,r4,r2              ;3378
00002c  4c13              LDR      r4,|L19.124|
00002e  3230              ADDS     r2,r2,#0x30           ;3378
000030  fb845202          SMULL    r5,r2,r4,r2           ;3378
000034  1115              ASRS     r5,r2,#4              ;3378
000036  ebb572e2          SUBS     r2,r5,r2,ASR #31      ;3378
00003a  f991519b          LDRSB    r5,[r1,#0x19b]
00003e  f991119a          LDRSB    r1,[r1,#0x19a]
000042  eba50101          SUB      r1,r5,r1
000046  f1010101          ADD      r1,r1,#1
00004a  fb01f10c          MUL      r1,r1,r12
00004e  f1010118          ADD      r1,r1,#0x18
000052  fb84c101          SMULL    r12,r1,r4,r1
000056  ea4f0ce1          ASR      r12,r1,#3
00005a  ebac71e1          SUB      r1,r12,r1,ASR #31
;;;3380   	temp_coord->tPos.vusW[cl] = (iWidth < 0 ? 0 : iWidth);
00005e  bf48              IT       MI
000060  2200              MOVMI    r2,#0
000062  eb030040          ADD      r0,r3,r0,LSL #1
;;;3381   	temp_coord->tPos.vusH[cl] = (iHeight < 0 ? 0 : iHeight);
000066  2900              CMP      r1,#0
000068  f8a021d6          STRH     r2,[r0,#0x1d6]        ;3380
00006c  bfb8              IT       LT
00006e  2100              MOVLT    r1,#0
000070  f8a011ea          STRH     r1,[r0,#0x1ea]
;;;3382   	
;;;3383   	return;
;;;3384   }
000074  bc30              POP      {r4,r5}
000076  4770              BX       lr
;;;3385   
                          ENDP

                  |L19.120|
                          DCD      ||.data||
                  |L19.124|
                          DCD      0x2aaaaaab

                          AREA ||i.alogorithm_coord_modify_pos||, CODE, READONLY, ALIGN=2

                  alogorithm_coord_modify_pos PROC
;;;3386   #define ExpectClipping_Finger_Margin	200
;;;3387   void alogorithm_coord_modify_pos(tXY_t* old_pos,tXY_t* pos, int index)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;3388   {
;;;3389   	int x, y;
;;;3390   #if (MULTI_EDGE_COEF_EN == YES)
;;;3391   	bool_t bIsEdge;
;;;3392   #endif
;;;3393   	uint8_t ucLeftEdgeExpand = thisModeConf->EdgeExpand.ucLeftEdgeExpand, ucRightEdgeExpand = thisModeConf->EdgeExpand.ucRightEdgeExpand;
000004  4d9c              LDR      r5,|L20.632|
000006  f8d5c00c          LDR      r12,[r5,#0xc]  ; thisModeConf
00000a  f89cb0a8          LDRB     r11,[r12,#0xa8]
00000e  f89ca0a9          LDRB     r10,[r12,#0xa9]
;;;3394   	uint8_t ucTopEdgeExpand = thisModeConf->EdgeExpand.ucTopEdgeExpand, ucBottomEdgeExpand = thisModeConf->EdgeExpand.ucBottomEdgeExpand;
000012  f89c90aa          LDRB     r9,[r12,#0xaa]
000016  f89c20ab          LDRB     r2,[r12,#0xab]
;;;3395   //	int ucXCompensationGain = 10;//24; // NOTE : not used
;;;3396   
;;;3397   	if( thisModeConf->Coord.bSwapXY )
00001a  9200              STR      r2,[sp,#0]
00001c  f89c306d          LDRB     r3,[r12,#0x6d]
;;;3398   	{
;;;3399   		x = pos->y;
000020  684a              LDR      r2,[r1,#4]
;;;3400   		y = pos->x;
000022  680c              LDR      r4,[r1,#0]
000024  2b00              CMP      r3,#0                 ;3397
000026  bf12              ITEE     NE                    ;3399
000028  4613              MOVNE    r3,r2                 ;3399
00002a  4623              MOVEQ    r3,r4                 ;3399
;;;3401   	}
;;;3402   	else
;;;3403   	{
;;;3404   		x = pos->x;
;;;3405   		y = pos->y;
00002c  4614              MOVEQ    r4,r2
;;;3406   	}
;;;3407   
;;;3408   	if( thisModeConf->Coord.bFlipX )
00002e  f89c206e          LDRB     r2,[r12,#0x6e]
000032  4e91              LDR      r6,|L20.632|
000034  2a00              CMP      r2,#0
;;;3409   		x = thisInfo->tCoord.iInternalXRes - x;
000036  6936              LDR      r6,[r6,#0x10]
000038  f8d67e17          LDR      r7,[r6,#0xe17]
00003c  bf18              IT       NE
00003e  1afb              SUBNE    r3,r7,r3
;;;3410   
;;;3411   	/*
;;;3412   	 * Expand edge position.
;;;3413   	 *  - 내부 좌표로 먼저 expand합니다.
;;;3414   	 *  - 기존에 full sized edge 사용 시 외부좌표로 변환 후 3/2 point에서 expand했는데,
;;;3415   	 *  - 이제는 내부좌표 상태에서 expand하므로 offset인 1/2를 제외하고 unit distance부터 expand하도록 합니다.
;;;3416   	 */
;;;3417   //	if( 1)
;;;3418   	{
;;;3419   		if (!thisModeConf->EdgeExpand.bDoNotExpandPos)
000040  f89c20c2          LDRB     r2,[r12,#0xc2]
000044  4d8c              LDR      r5,|L20.632|
000046  692d              LDR      r5,[r5,#0x10]         ;3409
;;;3420   		{
;;;3421   		#if (MULTI_EDGE_COEF_EN == YES)
;;;3422   			if(thisModeConf->EdgeExpand.bUseMultiEdgeCoef)
;;;3423   			{
;;;3424   				bIsEdge = algorithm_coord_IsEdgeArea(&thisInfo->tCoord.tPos.tXY[index], thisModeConf->EdgeExpand.sXExpandStartOffset);
;;;3425   				if(bIsEdge == 0)
;;;3426   				{
;;;3427   					if(thisInfo->tCoord.ucEdgeExpandCoef[index] == 0)
;;;3428   					{
;;;3429   						if(
;;;3430   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;3431   							((thisInfo->tCoord.bInterpolation_On && thisInfo->tCoord.tPastPos[2].vusS[index] > 0) || (!thisInfo->tCoord.bInterpolation_On && thisInfo->tCoord.tPastPos[1].vusS[index] > 0))
;;;3432   #else
;;;3433   							(thisInfo->tCoord.tPastPos[1].vusS[index] > 0)
;;;3434   #endif
;;;3435   							&& thisInfo->tCoord.tPastPos[0].vusS[index] > 0 && thisInfo->tCoord.tPos.vusS[index] > 0 && thisInfo->tCoord.tPos.MaxDelta[index] > thisModeConf->EdgeExpand.usSmallTouchMaxDeltaThd
;;;3436   							&& thisInfo->tCoord.tPos.vusR[index] < thisModeConf->EdgeExpand.ucSmallTouchCellCntThd && (thisInfo->tCoord.tPos.rect[index].re - thisInfo->tCoord.tPos.rect[index].rs + 1) < thisModeConf->EdgeExpand.ucSmallTouchHeightThd
;;;3437   							&& (thisInfo->tCoord.tPos.rect[index].ce - thisInfo->tCoord.tPos.rect[index].cs + 1) < thisModeConf->EdgeExpand.ucSmallTouchWidthThd )
;;;3438   						{
;;;3439   							thisInfo->tCoord.ucEdgeExpandCoef[index] = 1;
;;;3440   						}
;;;3441   					}
;;;3442   				}
;;;3443   				else
;;;3444   				{
;;;3445   					if(thisInfo->tCoord.tPastPos[0].vusS[index] == 0 && thisInfo->tCoord.tPos.vusS[index] > 0)
;;;3446   					{
;;;3447   						thisInfo->tCoord.ucEdgeExpandCoef[index] = 2;
;;;3448   					}
;;;3449   				}
;;;3450   			}
;;;3451   			
;;;3452   			if(thisInfo->tCoord.ucEdgeExpandCoef[index] == 1)
;;;3453   			{
;;;3454   				ucLeftEdgeExpand = thisModeConf->EdgeExpand.ucLeftEdgeExpand_small;
;;;3455   				ucRightEdgeExpand = thisModeConf->EdgeExpand.ucRightEdgeExpand_small;
;;;3456   				ucTopEdgeExpand = thisModeConf->EdgeExpand.ucTopEdgeExpand_small;
;;;3457   				ucBottomEdgeExpand = thisModeConf->EdgeExpand.ucBottomEdgeExpand_small;
;;;3458   			}
;;;3459   			else if(thisInfo->tCoord.ucEdgeExpandCoef[index] == 2)
;;;3460   			{
;;;3461   				ucLeftEdgeExpand = thisModeConf->EdgeExpand.ucLeftEdgeExpand_medium;
;;;3462   				ucRightEdgeExpand = thisModeConf->EdgeExpand.ucRightEdgeExpand_medium;
;;;3463   				ucTopEdgeExpand = thisModeConf->EdgeExpand.ucTopEdgeExpand_medium;
;;;3464   				ucBottomEdgeExpand = thisModeConf->EdgeExpand.ucBottomEdgeExpand_medium;
;;;3465   			}
;;;3466   		#endif			
;;;3467   			int iXExpandStart = thisInfo->tCoord.iXExpandStart + thisModeConf->EdgeExpand.sXExpandStartOffset;
;;;3468   			int iYExpandStart = thisInfo->tCoord.iYExpandStart + thisModeConf->EdgeExpand.sYExpandStartOffset;
;;;3469   			
;;;3470   			if(thisInfo->WinCertMode < 1)
;;;3471   			{
;;;3472   				if (x < iXExpandStart)
;;;3473   					x = iXExpandStart + (((x - iXExpandStart) * (int32_t)ucLeftEdgeExpand) >> 6);
;;;3474   				else if (thisInfo->tCoord.iInternalXRes - x < iXExpandStart)
;;;3475   					x = thisInfo->tCoord.iInternalXRes - (iXExpandStart
;;;3476   										 + (((thisInfo->tCoord.iInternalXRes - x - iXExpandStart) * (int32_t)ucRightEdgeExpand) >> 6));
;;;3477   
;;;3478   				if (y < iYExpandStart)
;;;3479   					y = iYExpandStart + (((y - iYExpandStart) * (int32_t)ucTopEdgeExpand) >> 6);
;;;3480   				else if (thisInfo->tCoord.iInternalYRes - y < iYExpandStart)
000048  f8d58e1b          LDR      r8,[r5,#0xe1b]
00004c  bb52              CBNZ     r2,|L20.164|
00004e  f8d62e1f          LDR      r2,[r6,#0xe1f]        ;3467
000052  f9bc50ac          LDRSH    r5,[r12,#0xac]        ;3467
000056  f9bce0ae          LDRSH    lr,[r12,#0xae]        ;3468
00005a  4415              ADD      r5,r5,r2              ;3467
00005c  f8d62e23          LDR      r2,[r6,#0xe23]        ;3468
000060  4472              ADD      r2,r2,lr              ;3468
000062  f6417ea8          MOV      lr,#0x1fa8            ;3470
000066  f91ee006          LDRSB    lr,[lr,r6]            ;3470
00006a  f1be0f01          CMP      lr,#1                 ;3470
00006e  da25              BGE      |L20.188|
000070  42ab              CMP      r3,r5                 ;3472
000072  da05              BGE      |L20.128|
000074  1b5b              SUBS     r3,r3,r5              ;3473
000076  fb03f30b          MUL      r3,r3,r11             ;3473
00007a  eb0513a3          ADD      r3,r5,r3,ASR #6       ;3473
00007e  e00a              B        |L20.150|
                  |L20.128|
000080  eba70b03          SUB      r11,r7,r3             ;3474
000084  455d              CMP      r5,r11                ;3474
000086  dd06              BLE      |L20.150|
000088  ebab0305          SUB      r3,r11,r5             ;3475
00008c  fb03f30a          MUL      r3,r3,r10             ;3475
000090  eb0513a3          ADD      r3,r5,r3,ASR #6       ;3475
000094  1afb              SUBS     r3,r7,r3              ;3475
                  |L20.150|
000096  4294              CMP      r4,r2                 ;3478
000098  da05              BGE      |L20.166|
00009a  1aa4              SUBS     r4,r4,r2              ;3479
00009c  fb04f409          MUL      r4,r4,r9              ;3479
0000a0  eb0214a4          ADD      r4,r2,r4,ASR #6       ;3479
                  |L20.164|
0000a4  e00a              B        |L20.188|
                  |L20.166|
0000a6  eba80504          SUB      r5,r8,r4
0000aa  42aa              CMP      r2,r5
0000ac  dd06              BLE      |L20.188|
;;;3481   					y = thisInfo->tCoord.iInternalYRes - (iYExpandStart
0000ae  9c00              LDR      r4,[sp,#0]
0000b0  1aad              SUBS     r5,r5,r2
0000b2  436c              MULS     r4,r5,r4
0000b4  eb0212a4          ADD      r2,r2,r4,ASR #6
0000b8  eba80402          SUB      r4,r8,r2
                  |L20.188|
;;;3482   										 + (((thisInfo->tCoord.iInternalYRes - y - iYExpandStart) * (int32_t)ucBottomEdgeExpand) >> 6));
;;;3483   			}
;;;3484   		}
;;;3485   	}
;;;3486   
;;;3487   	/*
;;;3488   	 * Modify resolution domain.
;;;3489   	 */
;;;3490   	x = ( (x + thisInfo->tCoord.iXOffset ) * (thisCommonConf->iXResolution+thisModeConf->Coord.sFingerGlobalCoordiXResolutionOffset) ) / (thisInfo->tCoord.iInternalXRes + 2*thisInfo->tCoord.iXOffset);
0000bc  4a6e              LDR      r2,|L20.632|
0000be  6895              LDR      r5,[r2,#8]  ; thisCommonConf
0000c0  f9bc205a          LDRSH    r2,[r12,#0x5a]
0000c4  f8d59002          LDR      r9,[r5,#2]
0000c8  eb090a02          ADD      r10,r9,r2
0000cc  f8d62e0f          LDR      r2,[r6,#0xe0f]
0000d0  4413              ADD      r3,r3,r2
0000d2  fb0af303          MUL      r3,r10,r3
0000d6  eb070242          ADD      r2,r7,r2,LSL #1
0000da  fb93f2f2          SDIV     r2,r3,r2
;;;3491   	x += thisModeConf->Coord.sFingerGlobalCoordiOffsetX;
0000de  f9bc305e          LDRSH    r3,[r12,#0x5e]
;;;3492   #if (FingerGlobalCoordiY_2Region_Set == YES)
;;;3493   	if(y < thisModeConf->Coord.sFingerGlobalCoordiY_2Region_boundary)
;;;3494   	{
;;;3495   		y = ( (y + thisInfo->tCoord.iYOffset ) * (thisCommonConf->iYResolution+thisModeConf->Coord.sFingerGlobalCoordiYResolutionOffset) ) / (thisInfo->tCoord.iInternalYRes + 2*thisInfo->tCoord.iYOffset);
;;;3496   		y += thisModeConf->Coord.sFingerGlobalCoordiOffsetY;
;;;3497   	}
;;;3498   	else
;;;3499   	{
;;;3500   		y = ( (y + thisInfo->tCoord.iYOffset ) * (thisCommonConf->iYResolution+thisModeConf->Coord.sFingerGlobalCoordiYResolutionOffset1) ) / (thisInfo->tCoord.iInternalYRes + 2*thisInfo->tCoord.iYOffset);
;;;3501   		y += thisModeConf->Coord.sFingerGlobalCoordiOffsetY1;
;;;3502   	}
;;;3503   #else
;;;3504   	y = ( (y + thisInfo->tCoord.iYOffset ) * (thisCommonConf->iYResolution+thisModeConf->Coord.sFingerGlobalCoordiYResolutionOffset) ) / (thisInfo->tCoord.iInternalYRes + 2*thisInfo->tCoord.iYOffset);
0000e2  f8d57006          LDR      r7,[r5,#6]
0000e6  441a              ADD      r2,r2,r3              ;3491
0000e8  f9bc305c          LDRSH    r3,[r12,#0x5c]
0000ec  eb070a03          ADD      r10,r7,r3
0000f0  f8d63e13          LDR      r3,[r6,#0xe13]
;;;3505   	y += thisModeConf->Coord.sFingerGlobalCoordiOffsetY;
;;;3506   #endif
;;;3507   	/*
;;;3508   	 * Clipping.
;;;3509   	 */
;;;3510   	int iXResolutionForClipping = thisCommonConf->iXResolution - 1;
;;;3511   	int iYResolutionForClipping = thisCommonConf->iYResolution - 1;
0000f4  1e7e              SUBS     r6,r7,#1
0000f6  441c              ADD      r4,r4,r3              ;3504
0000f8  fb0af404          MUL      r4,r10,r4             ;3504
0000fc  eb080343          ADD      r3,r8,r3,LSL #1       ;3504
000100  fb94f3f3          SDIV     r3,r4,r3              ;3504
000104  f9bc4060          LDRSH    r4,[r12,#0x60]        ;3505
000108  f1a90801          SUB      r8,r9,#1              ;3510
00010c  4423              ADD      r3,r3,r4              ;3505
;;;3512   //	if(iXResolutionForClipping > 32767)iXResolutionForClipping = 32767;
;;;3513   //	if(iYResolutionForClipping > 32767)iYResolutionForClipping = 32767;
;;;3514   	if(thisModeConf->CoordEdge.bExpectClipping_Finger_On)
00010e  f89c409c          LDRB     r4,[r12,#0x9c]
000112  2c00              CMP      r4,#0
000114  d079              BEQ      |L20.522|
;;;3515   	{
;;;3516   		pos->x = x,	pos->y = y;
000116  600a              STR      r2,[r1,#0]
000118  604b              STR      r3,[r1,#4]
;;;3517   		if (x < (int)thisCommonConf->ucClippingLeft){	//LEFT
00011a  f8957020          LDRB     r7,[r5,#0x20]
00011e  4614              MOV      r4,r2                 ;3516
000120  4297              CMP      r7,r2
000122  dd23              BLE      |L20.364|
;;;3518   			x = (int)(thisCommonConf->ucClippingLeft);
;;;3519   			if( (thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->x < (thisCommonConf->ucClippingLeft) && old_pos->x > (thisCommonConf->ucClippingLeft))
000124  f89c80a7          LDRB     r8,[r12,#0xa7]
000128  463a              MOV      r2,r7                 ;3517
00012a  f1b80f00          CMP      r8,#0
00012e  d016              BEQ      |L20.350|
000130  4288              CMP      r0,r1
000132  bf18              IT       NE
000134  42bc              CMPNE    r4,r7
000136  bfbc              ITT      LT
000138  f8d08000          LDRLT    r8,[r0,#0]
00013c  4547              CMPLT    r7,r8
00013e  da32              BGE      |L20.422|
                  |L20.320|
;;;3520   				|| (!thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->x != old_pos->x && old_pos->x > ExpectClipping_Finger_Margin) )
;;;3521   				y = ( (x - old_pos->x)*(pos->y - old_pos->y) + ((pos->x - old_pos->x)>>1) ) / (pos->x - old_pos->x) + old_pos->y;
000140  6847              LDR      r7,[r0,#4]
000142  eba30807          SUB      r8,r3,r7
000146  6803              LDR      r3,[r0,#0]
000148  eba20903          SUB      r9,r2,r3
00014c  fb08f809          MUL      r8,r8,r9
000150  1ae3              SUBS     r3,r4,r3
000152  eb080463          ADD      r4,r8,r3,ASR #1
000156  fb94f3f3          SDIV     r3,r4,r3
00015a  443b              ADD      r3,r3,r7
00015c  e023              B        |L20.422|
                  |L20.350|
00015e  4288              CMP      r0,r1                 ;3519
000160  bf1e              ITTT     NE                    ;3519
000162  6807              LDRNE    r7,[r0,#0]            ;3519
000164  42bc              CMPNE    r4,r7                 ;3519
000166  2fc8              CMPNE    r7,#0xc8              ;3519
000168  dd1d              BLE      |L20.422|
00016a  e7e9              B        |L20.320|
                  |L20.364|
;;;3522   			pos->x = x,	pos->y = y;
;;;3523   		}
;;;3524   		else if (x > ((int)((iXResolutionForClipping) - thisCommonConf->ucClippingRight))){	//RIGHT
00016c  f8957021          LDRB     r7,[r5,#0x21]
000170  eba80707          SUB      r7,r8,r7
000174  42ba              CMP      r2,r7
000176  dd18              BLE      |L20.426|
;;;3525   			x = (iXResolutionForClipping) - thisCommonConf->ucClippingRight;
;;;3526   			if( (thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->x > ((int)((iXResolutionForClipping) - (thisCommonConf->ucClippingRight))) && old_pos->x < ((int)((iXResolutionForClipping) - (thisCommonConf->ucClippingRight))))
000178  f89c90a7          LDRB     r9,[r12,#0xa7]
00017c  463a              MOV      r2,r7                 ;3524
00017e  f1b90f00          CMP      r9,#0
000182  d008              BEQ      |L20.406|
000184  4288              CMP      r0,r1
000186  bf18              IT       NE
000188  42bc              CMPNE    r4,r7
00018a  bfc4              ITT      GT
00018c  f8d08000          LDRGT    r8,[r0,#0]
000190  4542              CMPGT    r2,r8
000192  dd08              BLE      |L20.422|
000194  e7d4              B        |L20.320|
                  |L20.406|
000196  4288              CMP      r0,r1
000198  bf1f              ITTTT    NE
00019a  6807              LDRNE    r7,[r0,#0]
00019c  42bc              CMPNE    r4,r7
00019e  f1a808c8          SUBNE    r8,r8,#0xc8
0001a2  4547              CMPNE    r7,r8
0001a4  dbcc              BLT      |L20.320|
                  |L20.422|
;;;3527   				|| (!thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->x != old_pos->x && old_pos->x < ((int)((iXResolutionForClipping) - ExpectClipping_Finger_Margin))) )
;;;3528   				y = ( (x - old_pos->x)*(pos->y - old_pos->y) + ((pos->x - old_pos->x)>>1) ) / (pos->x - old_pos->x) + old_pos->y;
;;;3529   			pos->x = x,	pos->y = y;
0001a6  600a              STR      r2,[r1,#0]
0001a8  604b              STR      r3,[r1,#4]
                  |L20.426|
;;;3530   		}
;;;3531   		if (y < (int)(thisCommonConf->ucClippingTop)){	//UP
0001aa  f8954022          LDRB     r4,[r5,#0x22]
0001ae  429c              CMP      r4,r3
0001b0  dd2c              BLE      |L20.524|
;;;3532   			y = (int)thisCommonConf->ucClippingTop;
;;;3533   			if( (thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->y < (thisCommonConf->ucClippingTop) && old_pos->y > (thisCommonConf->ucClippingTop))
0001b2  f89c30a7          LDRB     r3,[r12,#0xa7]
0001b6  b1db              CBZ      r3,|L20.496|
0001b8  4288              CMP      r0,r1
0001ba  d022              BEQ      |L20.514|
0001bc  f8d1c004          LDR      r12,[r1,#4]
0001c0  45a4              CMP      r12,r4
0001c2  da1e              BGE      |L20.514|
0001c4  f8d0c004          LDR      r12,[r0,#4]
0001c8  4564              CMP      r4,r12
0001ca  da1a              BGE      |L20.514|
                  |L20.460|
;;;3534   				|| (!thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->y != old_pos->y && old_pos->y > ExpectClipping_Finger_Margin) )
;;;3535   				x = ( (y - old_pos->y)*(pos->x - old_pos->x) + ((pos->y - old_pos->y)>>1) ) / (pos->y - old_pos->y) + old_pos->x;
;;;3536   			pos->x = x,	pos->y = y;
;;;3537   		}
;;;3538   		else if (y > (int)((iYResolutionForClipping) - thisCommonConf->ucClippingBottom)){	//DOWN
;;;3539   			y = (int)((iYResolutionForClipping) - thisCommonConf->ucClippingBottom);
;;;3540   			if( (thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->y > ((int)((iYResolutionForClipping) - (thisCommonConf->ucClippingBottom))) && old_pos->y < ((int)((iYResolutionForClipping) - (thisCommonConf->ucClippingBottom))))
;;;3541   				|| (!thisModeConf->CoordEdge.bUseNewCippingCond && old_pos != pos && pos->y != old_pos->y && old_pos->y < ((int)((iYResolutionForClipping) - ExpectClipping_Finger_Margin))) )
;;;3542   				x = ( (y - old_pos->y)*(pos->x - old_pos->x) + ((pos->y - old_pos->y)>>1) ) / (pos->y - old_pos->y) + old_pos->x;
0001cc  6802              LDR      r2,[r0,#0]
0001ce  680b              LDR      r3,[r1,#0]
0001d0  6840              LDR      r0,[r0,#4]
0001d2  1a9b              SUBS     r3,r3,r2
0001d4  eba40c00          SUB      r12,r4,r0
0001d8  fb03f30c          MUL      r3,r3,r12
0001dc  f8d1c004          LDR      r12,[r1,#4]
0001e0  ebac0000          SUB      r0,r12,r0
0001e4  eb030360          ADD      r3,r3,r0,ASR #1
0001e8  fb93f0f0          SDIV     r0,r3,r0
0001ec  4402              ADD      r2,r2,r0
0001ee  e008              B        |L20.514|
                  |L20.496|
0001f0  4288              CMP      r0,r1                 ;3533
0001f2  d006              BEQ      |L20.514|
0001f4  f8d1c004          LDR      r12,[r1,#4]           ;3533
0001f8  6843              LDR      r3,[r0,#4]            ;3533
0001fa  459c              CMP      r12,r3                ;3533
0001fc  bf18              IT       NE                    ;3533
0001fe  2bc8              CMPNE    r3,#0xc8              ;3533
000200  dce4              BGT      |L20.460|
                  |L20.514|
000202  600a              STR      r2,[r1,#0]            ;3536
000204  604c              STR      r4,[r1,#4]            ;3536
;;;3543   			pos->x = x,	pos->y = y;
;;;3544   		}
;;;3545   	}
;;;3546   	else
;;;3547   	{
;;;3548   		if (x < (int)thisCommonConf->ucXClipping)
;;;3549   			x = (int)(thisCommonConf->ucXClipping);
;;;3550   		else if (x > ((int)((iXResolutionForClipping) - thisCommonConf->ucXClipping)))
;;;3551   			x = (iXResolutionForClipping) - thisCommonConf->ucXClipping;
;;;3552   
;;;3553   		if (y < (int)(thisCommonConf->ucYClipping))
;;;3554   			y = (int)thisCommonConf->ucYClipping;
;;;3555   		else if (y > (int)((iYResolutionForClipping) - thisCommonConf->ucYClipping))
;;;3556   			y = (int)((iYResolutionForClipping) - thisCommonConf->ucYClipping);
;;;3557   		
;;;3558   		pos->x = x,	pos->y = y;
;;;3559   	}
;;;3560   
;;;3561   	#if (REMOVE_EDGE_EN == YES)
;;;3562   	if(thisModeConf->CoordEdge.bRemoveEdge && !algorithm_coord_IsEdgeArea(&thisInfo->tCoord.tFirstPos.tXY[index] , 0))
;;;3563   	{
;;;3564   		tXY_t pastpos1;
;;;3565   		
;;;3566   		if(thisModeConf->CoordEdge.bUsetRealPastSentPos1 == 0)
;;;3567   		{
;;;3568   #if (INTERPOLATION_VER1_En == YES || INTERPOLATION_VER2_En == YES || INTERPOLATION_VER3_En == YES)
;;;3569   			if(thisInfo->tCoord.bInterpolation_On)
;;;3570   				pastpos1.x = thisInfo->tCoord.tPastPos[2].tXY[index].x, pastpos1.y = thisInfo->tCoord.tPastPos[2].tXY[index].y;
;;;3571   			else
;;;3572   #endif
;;;3573   			pastpos1.x = thisInfo->tCoord.tPastPos[1].tXY[index].x, pastpos1.y = thisInfo->tCoord.tPastPos[1].tXY[index].y;
;;;3574   		
;;;3575   			pastpos1.x = ( (pastpos1.x + thisInfo->tCoord.iXOffset ) * (thisCommonConf->iXResolution+thisModeConf->Coord.sFingerGlobalCoordiXResolutionOffset) ) / (thisInfo->tCoord.iInternalXRes + 2*thisInfo->tCoord.iXOffset);
;;;3576   			pastpos1.y = ( (pastpos1.y + thisInfo->tCoord.iYOffset ) * (thisCommonConf->iYResolution+thisModeConf->Coord.sFingerGlobalCoordiYResolutionOffset) ) / (thisInfo->tCoord.iInternalYRes + 2*thisInfo->tCoord.iYOffset);
;;;3577   			pastpos1.x += thisModeConf->Coord.sFingerGlobalCoordiOffsetX;
;;;3578   			pastpos1.y += thisModeConf->Coord.sFingerGlobalCoordiOffsetY;
;;;3579   			if (pastpos1.x < (int)thisCommonConf->ucXClipping) pastpos1.x = (int)(thisCommonConf->ucXClipping);
;;;3580   			else if (pastpos1.x > ((int)((iXResolutionForClipping) - thisCommonConf->ucXClipping))) pastpos1.x = (iXResolutionForClipping) - thisCommonConf->ucXClipping;
;;;3581   			if (pastpos1.y < (int)(thisCommonConf->ucYClipping)) pastpos1.y = (int)thisCommonConf->ucYClipping;
;;;3582   			else if (pastpos1.y > (int)((iYResolutionForClipping) - thisCommonConf->ucYClipping)) pastpos1.y = (int)((iYResolutionForClipping) - thisCommonConf->ucYClipping);
;;;3583   		}
;;;3584   		else if(thisModeConf->CoordEdge.bUsetRealPastSentPos1 == 1)
;;;3585   		{
;;;3586   			pastpos1.x = thisInfo->tCoord.tRealPastSentPos1.tXY[index].x;
;;;3587   			pastpos1.y = thisInfo->tCoord.tRealPastSentPos1.tXY[index].y;
;;;3588   		}
;;;3589   		
;;;3590   		if(thisModeConf->CoordEdge.ucRemoveEdgeVer == 0)
;;;3591   		{
;;;3592   			if(thisInfo->tCoord.bRemoveEdge[index] == 1)
;;;3593   			{
;;;3594   				thisInfo->tCoord.tPos.vusS[index] = 0;
;;;3595   			}
;;;3596   			else if(thisInfo->tCoord.tPos.vusS[index] <= thisInfo->tCoord.tPastPos[0].vusS[index] && thisInfo->tCoord.tPos.vusS[index] && thisInfo->tCoord.tPastPos[0].vusS[index] && thisInfo->tCoord.tPastPos[1].vusS[index])
;;;3597   			{
;;;3598   				if(old_pos->x == pos->x && ((pos->x == thisCommonConf->ucXClipping && pastpos1.x - old_pos->x > thisModeConf->CoordEdge.usRemoveEdgeXdistThd)
;;;3599   					|| (pos->x == (iXResolutionForClipping - thisCommonConf->ucXClipping) && old_pos->x - pastpos1.x > thisModeConf->CoordEdge.usRemoveEdgeXdistThd)))
;;;3600   				{
;;;3601   					thisInfo->tCoord.bRemoveEdge[index] = 1;
;;;3602   					thisInfo->tCoord.tPos.vusS[index] = 0;
;;;3603   				}
;;;3604   				if(old_pos->y == pos->y && ((pos->y == thisCommonConf->ucYClipping && pastpos1.y - old_pos->y > thisModeConf->CoordEdge.usRemoveEdgeYdistThd)
;;;3605   					||  (pos->y == (iYResolutionForClipping - thisCommonConf->ucYClipping) && old_pos->y - pastpos1.y > thisModeConf->CoordEdge.usRemoveEdgeYdistThd)))
;;;3606   				{
;;;3607   					thisInfo->tCoord.bRemoveEdge[index] = 1;
;;;3608   					thisInfo->tCoord.tPos.vusS[index] = 0;
;;;3609   				}
;;;3610   			}
;;;3611   		}
;;;3612   		else if(thisModeConf->CoordEdge.ucRemoveEdgeVer == 1)
;;;3613   		{
;;;3614   			if(algorithm_coord_IsEdgeArea(&thisInfo->tCoord.tPos.tXY[index] , 0))
;;;3615   			{
;;;3616   				uint8_t EdgeDirX = algorithm_coord_EdgeDirection(thisInfo->tCoord.tPos.MaxPos[index].r, thisInfo->tCoord.tPos.MaxPos[index].c, 1);
;;;3617   				uint8_t EdgeDirY = EdgeDirX / 10;
;;;3618   				
;;;3619   				if(thisInfo->tCoord.tPos.vusS[index] <= thisInfo->tCoord.tPastPos[0].vusS[index] && thisInfo->tCoord.tPos.vusS[index] && thisInfo->tCoord.tPastPos[0].vusS[index] && thisInfo->tCoord.tPastPos[1].vusS[index])
;;;3620   				{
;;;3621   					if((old_pos->x == pos->x && pos->x == (thisCommonConf->ucXClipping) && pastpos1.x - old_pos->x > thisModeConf->CoordEdge.usRemoveEdgeXdistThd)
;;;3622   						|| (old_pos->x == pos->x && pos->x == (iXResolutionForClipping - thisCommonConf->ucXClipping) && old_pos->x - pastpos1.x > thisModeConf->CoordEdge.usRemoveEdgeXdistThd))
;;;3623   					{
;;;3624   						thisInfo->tCoord.bRemoveEdge[index] = 1;
;;;3625   					}
;;;3626   					if((old_pos->y == pos->y && pos->y == (thisCommonConf->ucYClipping) && pastpos1.y - old_pos->y > thisModeConf->CoordEdge.usRemoveEdgeYdistThd)
;;;3627   						||  (old_pos->y == pos->y && pos->y == (iYResolutionForClipping - thisCommonConf->ucYClipping) && old_pos->y - pastpos1.y > thisModeConf->CoordEdge.usRemoveEdgeYdistThd))
;;;3628   					{
;;;3629   						thisInfo->tCoord.bRemoveEdge[index] = 1;
;;;3630   					}
;;;3631   				}
;;;3632   				
;;;3633   				if( ((EdgeDirX % 10) == 1 && old_pos->x <= pos->x && pos->x > (thisCommonConf->ucXClipping)) ||
;;;3634   					((EdgeDirX % 10) == 2 && old_pos->x >= pos->x && pos->x < (iXResolutionForClipping - thisCommonConf->ucXClipping)) ||
;;;3635   					((EdgeDirY % 10) == 1 && old_pos->y <= pos->y && pos->y > (thisCommonConf->ucYClipping)) ||
;;;3636   					((EdgeDirY % 10) == 2 && old_pos->y >= pos->y && pos->y < (iYResolutionForClipping - thisCommonConf->ucYClipping))
;;;3637   				)
;;;3638   				{
;;;3639   					thisInfo->tCoord.bRemoveEdge[index] = 0;
;;;3640   				}
;;;3641   				
;;;3642   				if(thisInfo->tCoord.bRemoveEdge[index] == 1)
;;;3643   				{
;;;3644   					pos->x = x = old_pos->x, pos->y = y = old_pos->y;
;;;3645   				}
;;;3646   			}
;;;3647   			else
;;;3648   			{
;;;3649   				thisInfo->tCoord.bRemoveEdge[index] = 0;
;;;3650   			}
;;;3651   		}
;;;3652   	}
;;;3653   	#endif
;;;3654   	
;;;3655   	pos->x = x;
;;;3656   	pos->y = y;
;;;3657   }
000206  e8bd8ff8          POP      {r3-r11,pc}
                  |L20.522|
00020a  e020              B        |L20.590|
                  |L20.524|
00020c  f8954023          LDRB     r4,[r5,#0x23]         ;3538
000210  1b34              SUBS     r4,r6,r4              ;3538
000212  42a3              CMP      r3,r4                 ;3538
000214  bfd8              IT       LE
000216  e8bd8ff8          POPLE    {r3-r11,pc}
00021a  f89c30a7          LDRB     r3,[r12,#0xa7]        ;3540
00021e  b153              CBZ      r3,|L20.566|
000220  4288              CMP      r0,r1                 ;3540
000222  bf1c              ITT      NE                    ;3540
000224  f8d1c004          LDRNE    r12,[r1,#4]           ;3540
000228  45a4              CMPNE    r12,r4                ;3540
00022a  bfc4              ITT      GT                    ;3540
00022c  f8d0c004          LDRGT    r12,[r0,#4]           ;3540
000230  4564              CMPGT    r4,r12                ;3540
000232  dde6              BLE      |L20.514|
000234  e7ca              B        |L20.460|
                  |L20.566|
000236  4288              CMP      r0,r1                 ;3540
000238  d0e3              BEQ      |L20.514|
00023a  f8d1c004          LDR      r12,[r1,#4]           ;3540
00023e  6843              LDR      r3,[r0,#4]            ;3540
000240  459c              CMP      r12,r3                ;3540
000242  bf1c              ITT      NE                    ;3540
000244  f1a60cc8          SUBNE    r12,r6,#0xc8          ;3540
000248  4563              CMPNE    r3,r12                ;3540
00024a  dada              BGE      |L20.514|
00024c  e7be              B        |L20.460|
                  |L20.590|
00024e  7fa8              LDRB     r0,[r5,#0x1e]         ;3548
000250  4290              CMP      r0,r2                 ;3548
000252  dc03              BGT      |L20.604|
000254  eba80000          SUB      r0,r8,r0              ;3550
000258  4290              CMP      r0,r2                 ;3550
00025a  da00              BGE      |L20.606|
                  |L20.604|
00025c  4602              MOV      r2,r0                 ;3551
                  |L20.606|
00025e  7fe8              LDRB     r0,[r5,#0x1f]         ;3553
000260  4298              CMP      r0,r3                 ;3553
000262  bfd6              ITET     LE                    ;3556
000264  eba60c00          SUBLE    r12,r6,r0             ;3556
000268  4603              MOVGT    r3,r0                 ;3554
00026a  459c              CMPLE    r12,r3                ;3556
00026c  bfb8              IT       LT                    ;3556
00026e  1a33              SUBLT    r3,r6,r0              ;3556
000270  600a              STR      r2,[r1,#0]            ;3558
000272  604b              STR      r3,[r1,#4]            ;3558
000274  e8bd8ff8          POP      {r3-r11,pc}
;;;3658   
                          ENDP

                  |L20.632|
                          DCD      ||.data||

                          AREA ||i.meanInterpolate||, CODE, READONLY, ALIGN=2

                  meanInterpolate PROC
;;;2410   
;;;2411   tXY_t meanInterpolate(tXY_t *p, int start, int num)
000000  b4f0              PUSH     {r4-r7}
;;;2412   {
;;;2413   	int i;
;;;2414   	int sum_x, sum_y;
;;;2415   	tXY_t result;
;;;2416   
;;;2417   	sum_x = sum_y = 0;
000002  2400              MOVS     r4,#0
000004  4625              MOV      r5,r4
;;;2418   
;;;2419   	for( i=start; i<start+num; i++)
;;;2420   	{
;;;2421   		sum_x += p[i].x;
;;;2422   		sum_y += p[i].y;
;;;2423   	}
000006  2b00              CMP      r3,#0
000008  bfd8              IT       LE
00000a  f04f0c00          MOVLE    r12,#0
00000e  dd06              BLE      |L21.30|
000010  f0130c01          ANDS     r12,r3,#1
000014  d003              BEQ      |L21.30|
000016  eb0104c2          ADD      r4,r1,r2,LSL #3       ;2421
00001a  6825              LDR      r5,[r4,#0]            ;2421
00001c  6864              LDR      r4,[r4,#4]            ;2422
                  |L21.30|
00001e  4494              ADD      r12,r12,r2            ;2419
000020  18d6              ADDS     r6,r2,r3              ;2419
000022  4566              CMP      r6,r12                ;2419
000024  dd0e              BLE      |L21.68|
000026  bf00              NOP                            ;2421
                  |L21.40|
000028  eb0102cc          ADD      r2,r1,r12,LSL #3      ;2421
00002c  f10c0c02          ADD      r12,r12,#2            ;2422
000030  6817              LDR      r7,[r2,#0]            ;2421
000032  4566              CMP      r6,r12                ;2422
000034  443d              ADD      r5,r5,r7              ;2421
000036  6857              LDR      r7,[r2,#4]            ;2422
000038  443c              ADD      r4,r4,r7              ;2422
00003a  6897              LDR      r7,[r2,#8]            ;2421
00003c  68d2              LDR      r2,[r2,#0xc]          ;2422
00003e  443d              ADD      r5,r5,r7              ;2421
000040  4414              ADD      r4,r4,r2              ;2422
000042  dcf1              BGT      |L21.40|
                  |L21.68|
;;;2424   
;;;2425   	result.x = sum_x / num;
000044  fb95f1f3          SDIV     r1,r5,r3
;;;2426   	result.y = sum_y / num;
000048  fb94f2f3          SDIV     r2,r4,r3
;;;2427   
;;;2428   	return result;
00004c  6001              STR      r1,[r0,#0]
00004e  6042              STR      r2,[r0,#4]
;;;2429   }
000050  bcf0              POP      {r4-r7}
000052  4770              BX       lr
;;;2430   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  FirstTouchEnable
                          %        16

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.bss||
                  tPastPosHist
                          %        152

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.bss||
                  TouchNumHisto
                          %        10

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.bss||
                  gReleaseCnt
                          %        10

                          AREA ||.data||, DATA, ALIGN=2

                  PrevFinger
000000  0000              DCB      0x00,0x00
                  AddDistTh
000002  0000              DCW      0x0000
                  PanningTestModeCnt
                          DCD      0x00000000
                  thisCommonConf
                          DCD      0x00000000
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  VirtualCoordFrmCnt
                          DCD      0x00000000
                  TestModeCnt
                          DCD      0x00000000
                  max_d
                          DCD      0x00000064

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  fixed_touchnum
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=1

                          EXPORTAS ||area_number.30||, ||.data||
                  WrongSeparationCnt
000000  0000              DCW      0x0000

                          AREA ||area_number.31||, DATA, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.data||
                  FixTouchNum
000000  00                DCB      0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  PrevMaxTouchNum
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Coord\\algorithm_coord.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_coord_c_47cfc435____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_coord_c_47cfc435____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_coord_c_47cfc435____REVSH|
#line 402
|__asm___17_algorithm_coord_c_47cfc435____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_coord_c_47cfc435____RRX|
#line 587
|__asm___17_algorithm_coord_c_47cfc435____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
