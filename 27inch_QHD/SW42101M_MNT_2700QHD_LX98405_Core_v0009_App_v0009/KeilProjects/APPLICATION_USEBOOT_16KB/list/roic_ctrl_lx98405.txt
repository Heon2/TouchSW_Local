; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\roic_ctrl_lx98405.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\roic_ctrl_lx98405.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\roic_ctrl_lx98405.crf ..\..\Module\SRIC\lx98405\roic_ctrl_lx98405.c]
                          THUMB

                          AREA ||i.LX98405_EvenOdd_Short_Setting||, CODE, READONLY, ALIGN=2

                  LX98405_EvenOdd_Short_Setting PROC
;;;318    // Test mode...
;;;319    void LX98405_EvenOdd_Short_Setting(uint8_t index)
000000  b510              PUSH     {r4,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321    //	s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
;;;322    
;;;323    	tR0_TG_STUCK_t tR0_TG_STUCK;
;;;324    	tR1_TG_STUCK_t tR1_TG_STUCK;
;;;325    
;;;326    	tR0_TEST_MODE_CTL_t tR0_TEST_MODE_CTL;
;;;327    	tR1_TEST_MODE_CTL_t tR1_TEST_MODE_CTL;
;;;328    
;;;329    
;;;330    	tR0_TG_STUCK.ulBulk= s_pktmoduleSRICCommonConf->R0_TG_STUCK.ulBulk;
000004  4833              LDR      r0,|L1.212|
000006  b084              SUB      sp,sp,#0x10           ;320
000008  6801              LDR      r1,[r0,#0]  ; s_pktmoduleSRICCommonConf
00000a  f8d102e8          LDR      r0,[r1,#0x2e8]
00000e  9002              STR      r0,[sp,#8]
;;;331    	tR1_TG_STUCK.ulBulk= s_pktmoduleSRICCommonConf->R1_TG_STUCK.ulBulk;
000010  f8d10554          LDR      r0,[r1,#0x554]
000014  9003              STR      r0,[sp,#0xc]
;;;332    
;;;333    	tR0_TEST_MODE_CTL.ulBulk = s_pktmoduleSRICCommonConf->R0_TEST_MODE_CTL.ulBulk;
000016  f8d102ec          LDR      r0,[r1,#0x2ec]
00001a  9000              STR      r0,[sp,#0]
;;;334    	tR1_TEST_MODE_CTL.ulBulk = s_pktmoduleSRICCommonConf->R1_TEST_MODE_CTL.ulBulk;
00001c  f8d10558          LDR      r0,[r1,#0x558]
000020  9001              STR      r0,[sp,#4]
;;;335    
;;;336    	tR0_TG_STUCK.tBit.r0_stuck_phth0 = 2;
000022  f89d0009          LDRB     r0,[sp,#9]
000026  f0200030          BIC      r0,r0,#0x30
00002a  3020              ADDS     r0,r0,#0x20
00002c  f88d0009          STRB     r0,[sp,#9]
;;;337    	tR1_TG_STUCK.tBit.r1_stuck_phth0 = 2;
000030  f89d000d          LDRB     r0,[sp,#0xd]
000034  f0200030          BIC      r0,r0,#0x30
000038  3020              ADDS     r0,r0,#0x20
00003a  f88d000d          STRB     r0,[sp,#0xd]
;;;338    
;;;339    	MSPI_RegisterAllSricWrite((uint32_t)(0x0268), tR0_TG_STUCK.ulBulk              );  // R/W
00003e  9902              LDR      r1,[sp,#8]
000040  f44f701a          MOV      r0,#0x268
000044  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;340    	MSPI_RegisterAllSricWrite((uint32_t)(0x0368), tR1_TG_STUCK.ulBulk              );  // R/W
000048  9903              LDR      r1,[sp,#0xc]
00004a  f44f705a          MOV      r0,#0x368
00004e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;341    
;;;342    	if (index == 0)  // Even Short...
000052  b114              CBZ      r4,|L1.90|
;;;343    	{
;;;344    		tR0_TEST_MODE_CTL.tBit.r0_tm_ps_ev = 0;
;;;345    		tR0_TEST_MODE_CTL.tBit.r0_tm_ps_od = 1;
;;;346    		tR1_TEST_MODE_CTL.tBit.r1_tm_ps_ev = 1;
;;;347    		tR1_TEST_MODE_CTL.tBit.r1_tm_ps_od = 0;
;;;348    	}
;;;349    	else if (index == 1)  // Odd Short...
000054  2c01              CMP      r4,#1
000056  d017              BEQ      |L1.136|
000058  e02e              B        |L1.184|
                  |L1.90|
00005a  f89d0000          LDRB     r0,[sp,#0]            ;344
00005e  f0200010          BIC      r0,r0,#0x10           ;344
000062  f88d0000          STRB     r0,[sp,#0]            ;344
000066  f89d0000          LDRB     r0,[sp,#0]            ;345
00006a  f0400020          ORR      r0,r0,#0x20           ;345
00006e  f88d0000          STRB     r0,[sp,#0]            ;345
000072  f89d0004          LDRB     r0,[sp,#4]            ;346
000076  f0400010          ORR      r0,r0,#0x10           ;346
00007a  f88d0004          STRB     r0,[sp,#4]            ;346
00007e  f89d0004          LDRB     r0,[sp,#4]            ;347
000082  f0200020          BIC      r0,r0,#0x20           ;347
000086  e015              B        |L1.180|
                  |L1.136|
;;;350    	{
;;;351    		tR0_TEST_MODE_CTL.tBit.r0_tm_ps_ev = 1;
000088  f89d0000          LDRB     r0,[sp,#0]
00008c  f0400010          ORR      r0,r0,#0x10
000090  f88d0000          STRB     r0,[sp,#0]
;;;352    		tR0_TEST_MODE_CTL.tBit.r0_tm_ps_od = 0;
000094  f89d0000          LDRB     r0,[sp,#0]
000098  f0200020          BIC      r0,r0,#0x20
00009c  f88d0000          STRB     r0,[sp,#0]
;;;353    		tR1_TEST_MODE_CTL.tBit.r1_tm_ps_ev = 0;
0000a0  f89d0004          LDRB     r0,[sp,#4]
0000a4  f0200010          BIC      r0,r0,#0x10
0000a8  f88d0004          STRB     r0,[sp,#4]
;;;354    		tR1_TEST_MODE_CTL.tBit.r1_tm_ps_od = 1;
0000ac  f89d0004          LDRB     r0,[sp,#4]
0000b0  f0400020          ORR      r0,r0,#0x20
                  |L1.180|
0000b4  f88d0004          STRB     r0,[sp,#4]
                  |L1.184|
;;;355    	}
;;;356    
;;;357    	MSPI_RegisterAllSricWrite((uint32_t)(0x026C), tR0_TEST_MODE_CTL.ulBulk  );
0000b8  9900              LDR      r1,[sp,#0]
0000ba  f44f701b          MOV      r0,#0x26c
0000be  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;358    	MSPI_RegisterAllSricWrite((uint32_t)(0x036C), tR1_TEST_MODE_CTL.ulBulk  );
0000c2  9901              LDR      r1,[sp,#4]
0000c4  b004              ADD      sp,sp,#0x10
0000c6  f44f705b          MOV      r0,#0x36c
0000ca  e8bd4010          POP      {r4,lr}
0000ce  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;359    
;;;360    }
;;;361    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L1.212|
                          DCD      ||.data||

                          AREA ||i.LX98405_OpenShort_Local_Global_Tune||, CODE, READONLY, ALIGN=1

                  LX98405_OpenShort_Local_Global_Tune PROC
;;;424    
;;;425    void LX98405_OpenShort_Local_Global_Tune(void)
000000  b510              PUSH     {r4,lr}
;;;426    {
;;;427    	uint32_t CR_TEMP,  CR_VAL ; // Local Tune
;;;428    	uint32_t GCR_VAL,  GCR_VAL_TEMP ; // Global Tune
;;;429    
;;;430    	// Local Tune Setting
;;;431    	CR_VAL = 31;
;;;432    	CR_TEMP = CR_VAL << 0 | CR_VAL << 5 | CR_VAL << 10 |
000002  f06f4440          MVN      r4,#0xc0000000
;;;433    	                    CR_VAL << 15 | CR_VAL << 20 | CR_VAL << 25 ;
;;;434    
;;;435    	MSPI_RegisterAllSricWrite((uint32_t)(0x0214),   CR_TEMP    );  // R/W
000006  4621              MOV      r1,r4
000008  f44f7005          MOV      r0,#0x214
00000c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;436    	MSPI_RegisterAllSricWrite((uint32_t)(0x0218),   CR_TEMP      );  // R/W
000010  4621              MOV      r1,r4
000012  f44f7006          MOV      r0,#0x218
000016  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;437    	MSPI_RegisterAllSricWrite((uint32_t)(0x021C),   CR_TEMP      );  // R/W
00001a  4621              MOV      r1,r4
00001c  f44f7007          MOV      r0,#0x21c
000020  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;438    	MSPI_RegisterAllSricWrite((uint32_t)(0x0220),    CR_TEMP     );  // R/W
000024  4621              MOV      r1,r4
000026  f44f7008          MOV      r0,#0x220
00002a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;439    	MSPI_RegisterAllSricWrite((uint32_t)(0x0224),     CR_TEMP    );  // R/W
00002e  4621              MOV      r1,r4
000030  f44f7009          MOV      r0,#0x224
000034  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;440    	MSPI_RegisterAllSricWrite((uint32_t)(0x0228),    CR_TEMP     ) ;          // R/W
000038  4621              MOV      r1,r4
00003a  f44f700a          MOV      r0,#0x228
00003e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;441    	MSPI_RegisterAllSricWrite((uint32_t)(0x022C),     CR_TEMP    );  // R/W
000042  4621              MOV      r1,r4
000044  f44f700b          MOV      r0,#0x22c
000048  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;442    	MSPI_RegisterAllSricWrite((uint32_t)(0x0230),     CR_TEMP    );  // R/W
00004c  4621              MOV      r1,r4
00004e  f44f700c          MOV      r0,#0x230
000052  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;443    	MSPI_RegisterAllSricWrite((uint32_t)(0x0234),     CR_TEMP     );  // R/W
000056  4621              MOV      r1,r4
000058  f44f700d          MOV      r0,#0x234
00005c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;444    	MSPI_RegisterAllSricWrite((uint32_t)(0x0238),    CR_TEMP       );  // R/W
000060  4621              MOV      r1,r4
000062  f44f700e          MOV      r0,#0x238
000066  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;445    	MSPI_RegisterAllSricWrite((uint32_t)(0x023C),     CR_TEMP     );
00006a  4621              MOV      r1,r4
00006c  f44f700f          MOV      r0,#0x23c
000070  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;446    
;;;447    	MSPI_RegisterAllSricWrite((uint32_t)(0x0314),   CR_TEMP    );
000074  4621              MOV      r1,r4
000076  f44f7045          MOV      r0,#0x314
00007a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;448    	MSPI_RegisterAllSricWrite((uint32_t)(0x0318),   CR_TEMP      );  // R/W
00007e  4621              MOV      r1,r4
000080  f44f7046          MOV      r0,#0x318
000084  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;449    	MSPI_RegisterAllSricWrite((uint32_t)(0x031C),   CR_TEMP      );  // R/W
000088  4621              MOV      r1,r4
00008a  f44f7047          MOV      r0,#0x31c
00008e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;450    	MSPI_RegisterAllSricWrite((uint32_t)(0x0320),    CR_TEMP     );  // R/W
000092  4621              MOV      r1,r4
000094  f44f7048          MOV      r0,#0x320
000098  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;451    	MSPI_RegisterAllSricWrite((uint32_t)(0x0324),     CR_TEMP    );  // R/W
00009c  4621              MOV      r1,r4
00009e  f44f7049          MOV      r0,#0x324
0000a2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;452    	MSPI_RegisterAllSricWrite((uint32_t)(0x0328),    CR_TEMP     ) ;   // R/W
0000a6  4621              MOV      r1,r4
0000a8  f44f704a          MOV      r0,#0x328
0000ac  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;453    	MSPI_RegisterAllSricWrite((uint32_t)(0x032C),     CR_TEMP    );  // R/W
0000b0  4621              MOV      r1,r4
0000b2  f44f704b          MOV      r0,#0x32c
0000b6  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;454    	MSPI_RegisterAllSricWrite((uint32_t)(0x0330),     CR_TEMP    );  // R/W
0000ba  4621              MOV      r1,r4
0000bc  f44f704c          MOV      r0,#0x330
0000c0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;455    	MSPI_RegisterAllSricWrite((uint32_t)(0x0334),     CR_TEMP     );  // R/W
0000c4  4621              MOV      r1,r4
0000c6  f44f704d          MOV      r0,#0x334
0000ca  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;456    	MSPI_RegisterAllSricWrite((uint32_t)(0x0338),    CR_TEMP       );  // R/W
0000ce  4621              MOV      r1,r4
0000d0  f44f704e          MOV      r0,#0x338
0000d4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;457    	MSPI_RegisterAllSricWrite((uint32_t)(0x033C),     CR_TEMP     );  // R/W
0000d8  4621              MOV      r1,r4
0000da  f44f704f          MOV      r0,#0x33c
0000de  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;458    
;;;459    	// Global Tune Setting
;;;460    	GCR_VAL = 7;
;;;461    	GCR_VAL_TEMP = GCR_VAL << 0  | GCR_VAL << 3  | GCR_VAL << 6| GCR_VAL << 9 | GCR_VAL << 12 |
;;;462    	                  GCR_VAL << 15  | GCR_VAL << 18 | GCR_VAL << 21 | GCR_VAL << 24| GCR_VAL << 27 ;
;;;463    
;;;464    	MSPI_RegisterAllSricWrite((uint32_t)(0x0248),  GCR_VAL_TEMP    );
0000e2  4621              MOV      r1,r4
0000e4  f44f7012          MOV      r0,#0x248
0000e8  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;465    	MSPI_RegisterAllSricWrite((uint32_t)(0x024C),  GCR_VAL_TEMP     );  // R/W
0000ec  4621              MOV      r1,r4
0000ee  f44f7013          MOV      r0,#0x24c
0000f2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;466    	MSPI_RegisterAllSricWrite((uint32_t)(0x0348), GCR_VAL_TEMP      );  // R/W
0000f6  4621              MOV      r1,r4
0000f8  f44f7052          MOV      r0,#0x348
0000fc  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;467    	MSPI_RegisterAllSricWrite((uint32_t)(0x034C), GCR_VAL_TEMP       );  // R/W
000100  4621              MOV      r1,r4
000102  e8bd4010          POP      {r4,lr}
000106  f44f7053          MOV      r0,#0x34c
00010a  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;468    
;;;469    }
;;;470    
                          ENDP


                          AREA ||i.LX98405_OpenShort_Mux_Low_En||, CODE, READONLY, ALIGN=2

                  LX98405_OpenShort_Mux_Low_En PROC
;;;470    
;;;471    void LX98405_OpenShort_Mux_Low_En(uint8_t index)
000000  4911              LDR      r1,|L3.72|
;;;472    {
000002  b500              PUSH     {lr}
;;;473    //	s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
;;;474    
;;;475    	tR0_MUX_CTL1_t  tR0_MUX_CTL1_r1;
;;;476    	tR1_MUX_CTL1_t  tR1_MUX_CTL1_r1;
;;;477    
;;;478    	tR0_MUX_CTL1_r1.ulBulk = s_pktmoduleSRICCommonConf->R0_MUX_CTL1.ulBulk ; // 추가
000004  6809              LDR      r1,[r1,#0]  ; s_pktmoduleSRICCommonConf
000006  b083              SUB      sp,sp,#0xc            ;472
000008  f8d12098          LDR      r2,[r1,#0x98]
00000c  9200              STR      r2,[sp,#0]
;;;479    	tR1_MUX_CTL1_r1.ulBulk = s_pktmoduleSRICCommonConf->R1_MUX_CTL1.ulBulk ; // 추가
00000e  f8d11304          LDR      r1,[r1,#0x304]
000012  9101              STR      r1,[sp,#4]
;;;480    
;;;481    	// Row(rowNum) – 1 Frame
;;;482    	tR0_MUX_CTL1_r1.tBit.r0_mux_int_stuck_val = index;
000014  f89d1000          LDRB     r1,[sp,#0]
000018  f3600145          BFI      r1,r0,#1,#5
00001c  f88d1000          STRB     r1,[sp,#0]
;;;483    	tR1_MUX_CTL1_r1.tBit.r1_mux_int_stuck_val = index;
000020  f89d1004          LDRB     r1,[sp,#4]
000024  f3600145          BFI      r1,r0,#1,#5
000028  f88d1004          STRB     r1,[sp,#4]
;;;484    
;;;485    	MSPI_RegisterAllSricWrite((uint32_t)(0x0210), tR0_MUX_CTL1_r1.ulBulk              );  // R/W
00002c  9900              LDR      r1,[sp,#0]
00002e  f44f7004          MOV      r0,#0x210
000032  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;486    	MSPI_RegisterAllSricWrite((uint32_t)(0x0310), tR1_MUX_CTL1_r1.ulBulk              );  // R/W
000036  9901              LDR      r1,[sp,#4]
000038  b003              ADD      sp,sp,#0xc
00003a  f44f7044          MOV      r0,#0x310
00003e  f85deb04          POP      {lr}
000042  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;487    
;;;488    
;;;489    }
;;;490    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      ||.data||

                          AREA ||i.LX98405_OpenShort_SourceGnd_Setting||, CODE, READONLY, ALIGN=2

                  LX98405_OpenShort_SourceGnd_Setting PROC
;;;406    
;;;407    void LX98405_OpenShort_SourceGnd_Setting(void)
000000  4815              LDR      r0,|L4.88|
;;;408    {
000002  b082              SUB      sp,sp,#8
;;;409    //	s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
;;;410    
;;;411    	tSDIC_CFG_t tSDIC_CFG ;
;;;412    
;;;413    	tSDIC_CFG.ulBulk = s_pktmoduleSRICCommonConf->SDIC_CFG.ulBulk;
000004  6800              LDR      r0,[r0,#0]  ; s_pktmoduleSRICCommonConf
000006  69c0              LDR      r0,[r0,#0x1c]
000008  9000              STR      r0,[sp,#0]
;;;414    
;;;415    	// Source Ground Setting
;;;416    	tSDIC_CFG.tBit.sd_rocen = 1;
00000a  f89d0000          LDRB     r0,[sp,#0]
00000e  f0400020          ORR      r0,r0,#0x20
000012  f88d0000          STRB     r0,[sp,#0]
;;;417    	tSDIC_CFG.tBit.sd_float_0_ctl = 1;
000016  f89d0001          LDRB     r0,[sp,#1]
00001a  f0200003          BIC      r0,r0,#3
00001e  1c40              ADDS     r0,r0,#1
000020  f88d0001          STRB     r0,[sp,#1]
;;;418    	tSDIC_CFG.tBit.sd_float_1_ctl = 1;
000024  f89d0001          LDRB     r0,[sp,#1]
000028  f020000c          BIC      r0,r0,#0xc
00002c  1d00              ADDS     r0,r0,#4
00002e  f88d0001          STRB     r0,[sp,#1]
;;;419    	tSDIC_CFG.tBit.sd_gnd_0_ctl = 1;
000032  f89d0001          LDRB     r0,[sp,#1]
000036  f0200030          BIC      r0,r0,#0x30
00003a  3010              ADDS     r0,r0,#0x10
00003c  f88d0001          STRB     r0,[sp,#1]
;;;420    	tSDIC_CFG.tBit.sd_gnd_1_ctl = 1;
000040  f89d0001          LDRB     r0,[sp,#1]
000044  f02000c0          BIC      r0,r0,#0xc0
000048  3040              ADDS     r0,r0,#0x40
00004a  f88d0001          STRB     r0,[sp,#1]
;;;421    	MSPI_RegisterAllSricWrite((uint32_t)(0x001C), tSDIC_CFG.ulBulk );
00004e  9900              LDR      r1,[sp,#0]
000050  201c              MOVS     r0,#0x1c
000052  b002              ADD      sp,sp,#8
000054  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;422    
;;;423    }
;;;424    
                          ENDP

                  |L4.88|
                          DCD      ||.data||

                          AREA ||i.LX98405_Reg_CRTuneSetting||, CODE, READONLY, ALIGN=2

                  LX98405_Reg_CRTuneSetting PROC
;;;180    
;;;181    void LX98405_Reg_CRTuneSetting(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183    	  s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
000002  48fe              LDR      r0,|L5.1020|
;;;184    	// MSPI_EachRegisterWrite --> Setting Register Value - Each Register
;;;185     // SRIC1,3,5,7
;;;186    	// R1 Setting 
;;;187       MSPI_EachRegisterWrite((uint32_t)(0x0214), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX1[0].ulBulk , MSPI_READ_SM0        );  // R/W  
000004  2201              MOVS     r2,#1
000006  1f04              SUBS     r4,r0,#4              ;183
000008  f100019c          ADD      r1,r0,#0x9c
00000c  6020              STR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00000e  f44f7005          MOV      r0,#0x214
000012  f7fffffe          BL       MSPI_EachRegisterWrite
;;;188       MSPI_EachRegisterWrite((uint32_t)(0x0218), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX2[0].ulBulk  , MSPI_READ_SM0       );  // R/W  
000016  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000018  2201              MOVS     r2,#1
00001a  f10001bc          ADD      r1,r0,#0xbc
00001e  f44f7006          MOV      r0,#0x218
000022  f7fffffe          BL       MSPI_EachRegisterWrite
;;;189       MSPI_EachRegisterWrite((uint32_t)(0x021C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX3[0].ulBulk  , MSPI_READ_SM0       );  // R/W  
000026  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000028  2201              MOVS     r2,#1
00002a  f10001dc          ADD      r1,r0,#0xdc
00002e  f44f7007          MOV      r0,#0x21c
000032  f7fffffe          BL       MSPI_EachRegisterWrite
;;;190       MSPI_EachRegisterWrite((uint32_t)(0x0220), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX4[0].ulBulk   , MSPI_READ_SM0      );  // R/W  
000036  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000038  2201              MOVS     r2,#1
00003a  f10001fc          ADD      r1,r0,#0xfc
00003e  f44f7008          MOV      r0,#0x220
000042  f7fffffe          BL       MSPI_EachRegisterWrite
;;;191       MSPI_EachRegisterWrite((uint32_t)(0x0224), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX5[0].ulBulk   , MSPI_READ_SM0      );  // R/W  
000046  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000048  2201              MOVS     r2,#1
00004a  f500718e          ADD      r1,r0,#0x11c
00004e  f44f7009          MOV      r0,#0x224
000052  f7fffffe          BL       MSPI_EachRegisterWrite
;;;192       MSPI_EachRegisterWrite((uint32_t)(0x0228), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX6[0].ulBulk   , MSPI_READ_SM0      );  // R/W  
000056  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000058  2201              MOVS     r2,#1
00005a  f500719e          ADD      r1,r0,#0x13c
00005e  f44f700a          MOV      r0,#0x228
000062  f7fffffe          BL       MSPI_EachRegisterWrite
;;;193       MSPI_EachRegisterWrite((uint32_t)(0x022C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX7[0].ulBulk  , MSPI_READ_SM0       );  // R/W  
000066  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000068  2201              MOVS     r2,#1
00006a  f50071ae          ADD      r1,r0,#0x15c
00006e  f44f700b          MOV      r0,#0x22c
000072  f7fffffe          BL       MSPI_EachRegisterWrite
;;;194       MSPI_EachRegisterWrite((uint32_t)(0x0230), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX8[0].ulBulk   , MSPI_READ_SM0      );  // R/W  
000076  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000078  2201              MOVS     r2,#1
00007a  f50071be          ADD      r1,r0,#0x17c
00007e  f44f700c          MOV      r0,#0x230
000082  f7fffffe          BL       MSPI_EachRegisterWrite
;;;195       MSPI_EachRegisterWrite((uint32_t)(0x0234), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX9[0].ulBulk   , MSPI_READ_SM0      );  // R/W  
000086  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000088  2201              MOVS     r2,#1
00008a  f50071ce          ADD      r1,r0,#0x19c
00008e  f44f700d          MOV      r0,#0x234
000092  f7fffffe          BL       MSPI_EachRegisterWrite
;;;196       MSPI_EachRegisterWrite((uint32_t)(0x0238), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX10[0].ulBulk  , MSPI_READ_SM0      );  // R/W  
000096  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000098  2201              MOVS     r2,#1
00009a  f50071de          ADD      r1,r0,#0x1bc
00009e  f44f700e          MOV      r0,#0x238
0000a2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;197       MSPI_EachRegisterWrite((uint32_t)(0x023C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX11[0].ulBulk  , MSPI_READ_SM0      );  // R/W  
0000a6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000a8  2201              MOVS     r2,#1
0000aa  f50071ee          ADD      r1,r0,#0x1dc
0000ae  f44f700f          MOV      r0,#0x23c
0000b2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;198       MSPI_EachRegisterWrite((uint32_t)(0x0240), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXE[0].ulBulk   , MSPI_READ_SM0     );  // R/W  
0000b6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000b8  2201              MOVS     r2,#1
0000ba  f50071fe          ADD      r1,r0,#0x1fc
0000be  f44f7010          MOV      r0,#0x240
0000c2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;199       MSPI_EachRegisterWrite((uint32_t)(0x0244), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXO[0].ulBulk   , MSPI_READ_SM0     );  // R/W  
0000c6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000c8  2201              MOVS     r2,#1
0000ca  f5007107          ADD      r1,r0,#0x21c
0000ce  f44f7011          MOV      r0,#0x244
0000d2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;200       MSPI_EachRegisterWrite((uint32_t)(0x0248), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_GTUNE1[0].ulBulk   , MSPI_READ_SM0       );  // R/W  
0000d6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000d8  2201              MOVS     r2,#1
0000da  f500710f          ADD      r1,r0,#0x23c
0000de  f44f7012          MOV      r0,#0x248
0000e2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;201       MSPI_EachRegisterWrite((uint32_t)(0x024C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_GTUNE2[0].ulBulk    , MSPI_READ_SM0      );  // R/W  
0000e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000e8  2201              MOVS     r2,#1
0000ea  f5007117          ADD      r1,r0,#0x25c
0000ee  f44f7013          MOV      r0,#0x24c
0000f2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;202       MSPI_EachRegisterWrite((uint32_t)(0x0250), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL1[0].ulBulk  , MSPI_READ_SM0  );  // R/W  
0000f6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000f8  2201              MOVS     r2,#1
0000fa  f500711f          ADD      r1,r0,#0x27c
0000fe  f44f7014          MOV      r0,#0x250
000102  f7fffffe          BL       MSPI_EachRegisterWrite
;;;203       MSPI_EachRegisterWrite((uint32_t)(0x0254), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL2[0].ulBulk   , MSPI_READ_SM0 );  // R/W  
000106  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000108  2201              MOVS     r2,#1
00010a  f5007127          ADD      r1,r0,#0x29c
00010e  f44f7015          MOV      r0,#0x254
000112  f7fffffe          BL       MSPI_EachRegisterWrite
;;;204       MSPI_EachRegisterWrite((uint32_t)(0x0258), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL3[0].ulBulk  , MSPI_READ_SM0  );  // R/W  
000116  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000118  2201              MOVS     r2,#1
00011a  f500712f          ADD      r1,r0,#0x2bc
00011e  f44f7016          MOV      r0,#0x258
000122  f7fffffe          BL       MSPI_EachRegisterWrite
;;;205    	
;;;206    	
;;;207    	// R1 Setting 
;;;208        MSPI_EachRegisterWrite((uint32_t)(0x0314), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX1[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000126  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000128  2201              MOVS     r2,#1
00012a  f5007142          ADD      r1,r0,#0x308
00012e  f44f7045          MOV      r0,#0x314
000132  f7fffffe          BL       MSPI_EachRegisterWrite
;;;209        MSPI_EachRegisterWrite((uint32_t)(0x0318), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX2[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000136  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000138  2201              MOVS     r2,#1
00013a  f500714a          ADD      r1,r0,#0x328
00013e  f44f7046          MOV      r0,#0x318
000142  f7fffffe          BL       MSPI_EachRegisterWrite
;;;210        MSPI_EachRegisterWrite((uint32_t)(0x031C),(uint32_t *)& s_pktmoduleSRICCommonConf->R1_CR_RG_MUX3[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000146  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000148  2201              MOVS     r2,#1
00014a  f5007152          ADD      r1,r0,#0x348
00014e  f44f7047          MOV      r0,#0x31c
000152  f7fffffe          BL       MSPI_EachRegisterWrite
;;;211        MSPI_EachRegisterWrite((uint32_t)(0x0320), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX4[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000156  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000158  2201              MOVS     r2,#1
00015a  f500715a          ADD      r1,r0,#0x368
00015e  f44f7048          MOV      r0,#0x320
000162  f7fffffe          BL       MSPI_EachRegisterWrite
;;;212        MSPI_EachRegisterWrite((uint32_t)(0x0324), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX5[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000166  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000168  2201              MOVS     r2,#1
00016a  f5007162          ADD      r1,r0,#0x388
00016e  f44f7049          MOV      r0,#0x324
000172  f7fffffe          BL       MSPI_EachRegisterWrite
;;;213        MSPI_EachRegisterWrite((uint32_t)(0x0328), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX6[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000176  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000178  2201              MOVS     r2,#1
00017a  f500716a          ADD      r1,r0,#0x3a8
00017e  f44f704a          MOV      r0,#0x328
000182  f7fffffe          BL       MSPI_EachRegisterWrite
;;;214        MSPI_EachRegisterWrite((uint32_t)(0x032C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX7[0].ulBulk     , MSPI_READ_SM0    );  // R/W  
000186  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000188  2201              MOVS     r2,#1
00018a  f5007172          ADD      r1,r0,#0x3c8
00018e  f44f704b          MOV      r0,#0x32c
000192  f7fffffe          BL       MSPI_EachRegisterWrite
;;;215        MSPI_EachRegisterWrite((uint32_t)(0x0330), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX8[0].ulBulk      , MSPI_READ_SM0   );  // R/W  
000196  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000198  2201              MOVS     r2,#1
00019a  f500717a          ADD      r1,r0,#0x3e8
00019e  f44f704c          MOV      r0,#0x330
0001a2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;216        MSPI_EachRegisterWrite((uint32_t)(0x0334), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX9[0].ulBulk      , MSPI_READ_SM0   );  // R/W  
0001a6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001a8  2201              MOVS     r2,#1
0001aa  f5006181          ADD      r1,r0,#0x408
0001ae  f44f704d          MOV      r0,#0x334
0001b2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;217        MSPI_EachRegisterWrite((uint32_t)(0x0338), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX10[0].ulBulk    , MSPI_READ_SM0    );  // R/W  
0001b6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001b8  2201              MOVS     r2,#1
0001ba  f5006185          ADD      r1,r0,#0x428
0001be  f44f704e          MOV      r0,#0x338
0001c2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;218        MSPI_EachRegisterWrite((uint32_t)(0x033C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX11[0].ulBulk   , MSPI_READ_SM0     );  // R/W  
0001c6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001c8  2201              MOVS     r2,#1
0001ca  f5006189          ADD      r1,r0,#0x448
0001ce  f44f704f          MOV      r0,#0x33c
0001d2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;219        MSPI_EachRegisterWrite((uint32_t)(0x0340), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXE[0].ulBulk    , MSPI_READ_SM0    );  // R/W  
0001d6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001d8  2201              MOVS     r2,#1
0001da  f500618d          ADD      r1,r0,#0x468
0001de  f44f7050          MOV      r0,#0x340
0001e2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;220        MSPI_EachRegisterWrite((uint32_t)(0x0344), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXO[0].ulBulk    , MSPI_READ_SM0    );  // R/W  
0001e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001e8  2201              MOVS     r2,#1
0001ea  f5006191          ADD      r1,r0,#0x488
0001ee  f44f7051          MOV      r0,#0x344
0001f2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;221        MSPI_EachRegisterWrite((uint32_t)(0x0348), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_GTUNE1[0].ulBulk       , MSPI_READ_SM0   );  // R/W  
0001f6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001f8  2201              MOVS     r2,#1
0001fa  f5006195          ADD      r1,r0,#0x4a8
0001fe  f44f7052          MOV      r0,#0x348
000202  f7fffffe          BL       MSPI_EachRegisterWrite
;;;222        MSPI_EachRegisterWrite((uint32_t)(0x034C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_GTUNE2[0].ulBulk       , MSPI_READ_SM0   );  // R/W  
000206  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000208  2201              MOVS     r2,#1
00020a  f5006199          ADD      r1,r0,#0x4c8
00020e  f44f7053          MOV      r0,#0x34c
000212  f7fffffe          BL       MSPI_EachRegisterWrite
;;;223        MSPI_EachRegisterWrite((uint32_t)(0x0350), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL1[0].ulBulk  , MSPI_READ_SM0  );  // R/W  
000216  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000218  2201              MOVS     r2,#1
00021a  f500619d          ADD      r1,r0,#0x4e8
00021e  f44f7054          MOV      r0,#0x350
000222  f7fffffe          BL       MSPI_EachRegisterWrite
;;;224        MSPI_EachRegisterWrite((uint32_t)(0x0354), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL2[0].ulBulk  , MSPI_READ_SM0  );  // R/W  
000226  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000228  2201              MOVS     r2,#1
00022a  f50061a1          ADD      r1,r0,#0x508
00022e  f44f7055          MOV      r0,#0x354
000232  f7fffffe          BL       MSPI_EachRegisterWrite
;;;225        MSPI_EachRegisterWrite((uint32_t)(0x0358), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL3[0].ulBulk   , MSPI_READ_SM0 );  // R/W  
000236  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000238  2201              MOVS     r2,#1
00023a  f50061a5          ADD      r1,r0,#0x528
00023e  f44f7056          MOV      r0,#0x358
000242  f7fffffe          BL       MSPI_EachRegisterWrite
;;;226    
;;;227     // SRIC2,4,6,8
;;;228    	// R1 Setting 
;;;229       MSPI_EachRegisterWrite((uint32_t)(0x0214), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX1[0].ulBulk , MSPI_READ_SM1        );  // R/W  
000246  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000248  2202              MOVS     r2,#2
00024a  f100019c          ADD      r1,r0,#0x9c
00024e  f44f7005          MOV      r0,#0x214
000252  f7fffffe          BL       MSPI_EachRegisterWrite
;;;230       MSPI_EachRegisterWrite((uint32_t)(0x0218), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX2[0].ulBulk  , MSPI_READ_SM1       );  // R/W  
000256  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000258  2202              MOVS     r2,#2
00025a  f10001bc          ADD      r1,r0,#0xbc
00025e  f44f7006          MOV      r0,#0x218
000262  f7fffffe          BL       MSPI_EachRegisterWrite
;;;231       MSPI_EachRegisterWrite((uint32_t)(0x021C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX3[0].ulBulk  , MSPI_READ_SM1       );  // R/W  
000266  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000268  2202              MOVS     r2,#2
00026a  f10001dc          ADD      r1,r0,#0xdc
00026e  f44f7007          MOV      r0,#0x21c
000272  f7fffffe          BL       MSPI_EachRegisterWrite
;;;232       MSPI_EachRegisterWrite((uint32_t)(0x0220), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX4[0].ulBulk   , MSPI_READ_SM1      );  // R/W  
000276  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000278  2202              MOVS     r2,#2
00027a  f10001fc          ADD      r1,r0,#0xfc
00027e  f44f7008          MOV      r0,#0x220
000282  f7fffffe          BL       MSPI_EachRegisterWrite
;;;233       MSPI_EachRegisterWrite((uint32_t)(0x0224), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX5[0].ulBulk   , MSPI_READ_SM1      );  // R/W  
000286  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000288  2202              MOVS     r2,#2
00028a  f500718e          ADD      r1,r0,#0x11c
00028e  f44f7009          MOV      r0,#0x224
000292  f7fffffe          BL       MSPI_EachRegisterWrite
;;;234       MSPI_EachRegisterWrite((uint32_t)(0x0228), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX6[0].ulBulk   , MSPI_READ_SM1      );  // R/W  
000296  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000298  2202              MOVS     r2,#2
00029a  f500719e          ADD      r1,r0,#0x13c
00029e  f44f700a          MOV      r0,#0x228
0002a2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;235       MSPI_EachRegisterWrite((uint32_t)(0x022C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX7[0].ulBulk  , MSPI_READ_SM1       );  // R/W  
0002a6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002a8  2202              MOVS     r2,#2
0002aa  f50071ae          ADD      r1,r0,#0x15c
0002ae  f44f700b          MOV      r0,#0x22c
0002b2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;236       MSPI_EachRegisterWrite((uint32_t)(0x0230), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX8[0].ulBulk   , MSPI_READ_SM1      );  // R/W  
0002b6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002b8  2202              MOVS     r2,#2
0002ba  f50071be          ADD      r1,r0,#0x17c
0002be  f44f700c          MOV      r0,#0x230
0002c2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;237       MSPI_EachRegisterWrite((uint32_t)(0x0234), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX9[0].ulBulk   , MSPI_READ_SM1      );  // R/W  
0002c6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002c8  2202              MOVS     r2,#2
0002ca  f50071ce          ADD      r1,r0,#0x19c
0002ce  f44f700d          MOV      r0,#0x234
0002d2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;238       MSPI_EachRegisterWrite((uint32_t)(0x0238), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX10[0].ulBulk  , MSPI_READ_SM1      );  // R/W  
0002d6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002d8  2202              MOVS     r2,#2
0002da  f50071de          ADD      r1,r0,#0x1bc
0002de  f44f700e          MOV      r0,#0x238
0002e2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;239       MSPI_EachRegisterWrite((uint32_t)(0x023C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_RG_MUX11[0].ulBulk  , MSPI_READ_SM1      );  // R/W  
0002e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002e8  2202              MOVS     r2,#2
0002ea  f50071ee          ADD      r1,r0,#0x1dc
0002ee  f44f700f          MOV      r0,#0x23c
0002f2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;240       MSPI_EachRegisterWrite((uint32_t)(0x0240), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXE[0].ulBulk   , MSPI_READ_SM1     );  // R/W  
0002f6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0002f8  2202              MOVS     r2,#2
0002fa  f50071fe          ADD      r1,r0,#0x1fc
0002fe  f44f7010          MOV      r0,#0x240
000302  f7fffffe          BL       MSPI_EachRegisterWrite
;;;241       MSPI_EachRegisterWrite((uint32_t)(0x0244), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXO[0].ulBulk   , MSPI_READ_SM1     );  // R/W  
000306  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000308  2202              MOVS     r2,#2
00030a  f5007107          ADD      r1,r0,#0x21c
00030e  f44f7011          MOV      r0,#0x244
000312  f7fffffe          BL       MSPI_EachRegisterWrite
;;;242       MSPI_EachRegisterWrite((uint32_t)(0x0248), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_GTUNE1[0].ulBulk   , MSPI_READ_SM1       );  // R/W  
000316  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000318  2202              MOVS     r2,#2
00031a  f500710f          ADD      r1,r0,#0x23c
00031e  f44f7012          MOV      r0,#0x248
000322  f7fffffe          BL       MSPI_EachRegisterWrite
;;;243       MSPI_EachRegisterWrite((uint32_t)(0x024C), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_CR_GTUNE2[0].ulBulk    , MSPI_READ_SM1      );  // R/W  
000326  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000328  2202              MOVS     r2,#2
00032a  f5007117          ADD      r1,r0,#0x25c
00032e  f44f7013          MOV      r0,#0x24c
000332  f7fffffe          BL       MSPI_EachRegisterWrite
;;;244       MSPI_EachRegisterWrite((uint32_t)(0x0250), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL1[0].ulBulk  , MSPI_READ_SM1  );  // R/W  
000336  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000338  2202              MOVS     r2,#2
00033a  f500711f          ADD      r1,r0,#0x27c
00033e  f44f7014          MOV      r0,#0x250
000342  f7fffffe          BL       MSPI_EachRegisterWrite
;;;245       MSPI_EachRegisterWrite((uint32_t)(0x0254), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL2[0].ulBulk   , MSPI_READ_SM1 );  // R/W  
000346  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000348  2202              MOVS     r2,#2
00034a  f5007127          ADD      r1,r0,#0x29c
00034e  f44f7015          MOV      r0,#0x254
000352  f7fffffe          BL       MSPI_EachRegisterWrite
;;;246       MSPI_EachRegisterWrite((uint32_t)(0x0258), (uint32_t *)&s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL3[0].ulBulk  , MSPI_READ_SM1  );  // R/W  
000356  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000358  2202              MOVS     r2,#2
00035a  f500712f          ADD      r1,r0,#0x2bc
00035e  f44f7016          MOV      r0,#0x258
000362  f7fffffe          BL       MSPI_EachRegisterWrite
;;;247    	
;;;248    	
;;;249    	// R1 Setting 
;;;250        MSPI_EachRegisterWrite((uint32_t)(0x0314), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX1[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
000366  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000368  2202              MOVS     r2,#2
00036a  f5007142          ADD      r1,r0,#0x308
00036e  f44f7045          MOV      r0,#0x314
000372  f7fffffe          BL       MSPI_EachRegisterWrite
;;;251        MSPI_EachRegisterWrite((uint32_t)(0x0318), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX2[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
000376  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000378  2202              MOVS     r2,#2
00037a  f500714a          ADD      r1,r0,#0x328
00037e  f44f7046          MOV      r0,#0x318
000382  f7fffffe          BL       MSPI_EachRegisterWrite
;;;252        MSPI_EachRegisterWrite((uint32_t)(0x031C),(uint32_t *)& s_pktmoduleSRICCommonConf->R1_CR_RG_MUX3[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
000386  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000388  2202              MOVS     r2,#2
00038a  f5007152          ADD      r1,r0,#0x348
00038e  f44f7047          MOV      r0,#0x31c
000392  f7fffffe          BL       MSPI_EachRegisterWrite
;;;253        MSPI_EachRegisterWrite((uint32_t)(0x0320), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX4[0].ulBulk     , MSPI_READ_SM1   );  // R/W  
000396  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000398  2202              MOVS     r2,#2
00039a  f500715a          ADD      r1,r0,#0x368
00039e  f44f7048          MOV      r0,#0x320
0003a2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;254        MSPI_EachRegisterWrite((uint32_t)(0x0324), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX5[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
0003a6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003a8  2202              MOVS     r2,#2
0003aa  f5007162          ADD      r1,r0,#0x388
0003ae  f44f7049          MOV      r0,#0x324
0003b2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;255        MSPI_EachRegisterWrite((uint32_t)(0x0328), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX6[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
0003b6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003b8  2202              MOVS     r2,#2
0003ba  f500716a          ADD      r1,r0,#0x3a8
0003be  f44f704a          MOV      r0,#0x328
0003c2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;256        MSPI_EachRegisterWrite((uint32_t)(0x032C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX7[0].ulBulk     , MSPI_READ_SM1    );  // R/W  
0003c6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003c8  2202              MOVS     r2,#2
0003ca  f5007172          ADD      r1,r0,#0x3c8
0003ce  f44f704b          MOV      r0,#0x32c
0003d2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;257        MSPI_EachRegisterWrite((uint32_t)(0x0330), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX8[0].ulBulk      , MSPI_READ_SM1   );  // R/W  
0003d6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003d8  2202              MOVS     r2,#2
0003da  f500717a          ADD      r1,r0,#0x3e8
0003de  f44f704c          MOV      r0,#0x330
0003e2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;258        MSPI_EachRegisterWrite((uint32_t)(0x0334), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX9[0].ulBulk      , MSPI_READ_SM1   );  // R/W  
0003e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003e8  2202              MOVS     r2,#2
0003ea  f5006181          ADD      r1,r0,#0x408
0003ee  f44f704d          MOV      r0,#0x334
0003f2  f7fffffe          BL       MSPI_EachRegisterWrite
;;;259        MSPI_EachRegisterWrite((uint32_t)(0x0338), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX10[0].ulBulk    , MSPI_READ_SM1    );  // R/W  
0003f6  2202              MOVS     r2,#2
0003f8  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0003fa  e001              B        |L5.1024|
                  |L5.1020|
                          DCD      ||.data||+0x4
                  |L5.1024|
000400  f5006185          ADD      r1,r0,#0x428
000404  f44f704e          MOV      r0,#0x338
000408  f7fffffe          BL       MSPI_EachRegisterWrite
;;;260        MSPI_EachRegisterWrite((uint32_t)(0x033C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_RG_MUX11[0].ulBulk   , MSPI_READ_SM1    );  // R/W  
00040c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00040e  2202              MOVS     r2,#2
000410  f5006189          ADD      r1,r0,#0x448
000414  f44f704f          MOV      r0,#0x33c
000418  f7fffffe          BL       MSPI_EachRegisterWrite
;;;261        MSPI_EachRegisterWrite((uint32_t)(0x0340), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXE[0].ulBulk    , MSPI_READ_SM1    );  // R/W  
00041c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00041e  2202              MOVS     r2,#2
000420  f500618d          ADD      r1,r0,#0x468
000424  f44f7050          MOV      r0,#0x340
000428  f7fffffe          BL       MSPI_EachRegisterWrite
;;;262        MSPI_EachRegisterWrite((uint32_t)(0x0344), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXO[0].ulBulk    , MSPI_READ_SM1    );  // R/W  
00042c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00042e  2202              MOVS     r2,#2
000430  f5006191          ADD      r1,r0,#0x488
000434  f44f7051          MOV      r0,#0x344
000438  f7fffffe          BL       MSPI_EachRegisterWrite
;;;263        MSPI_EachRegisterWrite((uint32_t)(0x0348), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_GTUNE1[0].ulBulk       , MSPI_READ_SM1   );  // R/W  
00043c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00043e  2202              MOVS     r2,#2
000440  f5006195          ADD      r1,r0,#0x4a8
000444  f44f7052          MOV      r0,#0x348
000448  f7fffffe          BL       MSPI_EachRegisterWrite
;;;264        MSPI_EachRegisterWrite((uint32_t)(0x034C), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_CR_GTUNE2[0].ulBulk       , MSPI_READ_SM1   );  // R/W  
00044c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00044e  2202              MOVS     r2,#2
000450  f5006199          ADD      r1,r0,#0x4c8
000454  f44f7053          MOV      r0,#0x34c
000458  f7fffffe          BL       MSPI_EachRegisterWrite
;;;265        MSPI_EachRegisterWrite((uint32_t)(0x0350), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL1[0].ulBulk  , MSPI_READ_SM1  );  // R/W  
00045c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00045e  2202              MOVS     r2,#2
000460  f500619d          ADD      r1,r0,#0x4e8
000464  f44f7054          MOV      r0,#0x350
000468  f7fffffe          BL       MSPI_EachRegisterWrite
;;;266        MSPI_EachRegisterWrite((uint32_t)(0x0354), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL2[0].ulBulk  , MSPI_READ_SM1  );  // R/W  
00046c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00046e  2202              MOVS     r2,#2
000470  f50061a1          ADD      r1,r0,#0x508
000474  f44f7055          MOV      r0,#0x354
000478  f7fffffe          BL       MSPI_EachRegisterWrite
;;;267        MSPI_EachRegisterWrite((uint32_t)(0x0358), (uint32_t *)&s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL3[0].ulBulk   , MSPI_READ_SM1 );  // R/W  
00047c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00047e  e8bd4010          POP      {r4,lr}
000482  f50061a5          ADD      r1,r0,#0x528
000486  2202              MOVS     r2,#2
000488  f44f7056          MOV      r0,#0x358
00048c  f7ffbffe          B.W      MSPI_EachRegisterWrite
;;;268    
;;;269    }
;;;270    
                          ENDP


                          AREA ||i.LX98405_Reg_CRTuneSetting_tmp||, CODE, READONLY, ALIGN=2

                  LX98405_Reg_CRTuneSetting_tmp PROC
;;;272    // For Test Tune
;;;273    void LX98405_Reg_CRTuneSetting_tmp(void)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
;;;275    	
;;;276    	// Temp
;;;277    	
;;;278    		  uint32_t CR_TEMP;
;;;279    			uint32_t CR_VAL ;
;;;280    			CR_VAL = 0x01;
;;;281    			CR_TEMP = CR_VAL << 0 | CR_VAL << 5 | CR_VAL << 10 | CR_VAL << 15 | CR_VAL << 20 | CR_VAL << 25 ;
000002  4c43              LDR      r4,|L6.272|
;;;282    	
;;;283    	    MSPI_RegisterAllSricWrite((uint32_t)(0x0214),   CR_TEMP    );  // R/W  
000004  f44f7005          MOV      r0,#0x214
000008  4621              MOV      r1,r4
00000a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;284          MSPI_RegisterAllSricWrite((uint32_t)(0x0218),   CR_TEMP      );  // R/W  
00000e  4621              MOV      r1,r4
000010  f44f7006          MOV      r0,#0x218
000014  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;285          MSPI_RegisterAllSricWrite((uint32_t)(0x021C),   CR_TEMP      );  // R/W  
000018  4621              MOV      r1,r4
00001a  f44f7007          MOV      r0,#0x21c
00001e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;286          MSPI_RegisterAllSricWrite((uint32_t)(0x0220),    CR_TEMP     );  // R/W  
000022  4621              MOV      r1,r4
000024  f44f7008          MOV      r0,#0x220
000028  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;287          MSPI_RegisterAllSricWrite((uint32_t)(0x0224),     CR_TEMP    );  // R/W  
00002c  4621              MOV      r1,r4
00002e  f44f7009          MOV      r0,#0x224
000032  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;288          MSPI_RegisterAllSricWrite((uint32_t)(0x0228),    CR_TEMP     ) ;          // R/W  
000036  4621              MOV      r1,r4
000038  f44f700a          MOV      r0,#0x228
00003c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;289          MSPI_RegisterAllSricWrite((uint32_t)(0x022C),     CR_TEMP    );  // R/W  
000040  4621              MOV      r1,r4
000042  f44f700b          MOV      r0,#0x22c
000046  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;290          MSPI_RegisterAllSricWrite((uint32_t)(0x0230),     CR_TEMP    );  // R/W  
00004a  4621              MOV      r1,r4
00004c  f44f700c          MOV      r0,#0x230
000050  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;291          MSPI_RegisterAllSricWrite((uint32_t)(0x0234),     CR_TEMP     );  // R/W  
000054  4621              MOV      r1,r4
000056  f44f700d          MOV      r0,#0x234
00005a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;292          MSPI_RegisterAllSricWrite((uint32_t)(0x0238),    CR_TEMP       );  // R/W  
00005e  4621              MOV      r1,r4
000060  f44f700e          MOV      r0,#0x238
000064  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;293          MSPI_RegisterAllSricWrite((uint32_t)(0x023C),     CR_TEMP     );  // R/W  
000068  4621              MOV      r1,r4
00006a  f44f700f          MOV      r0,#0x23c
00006e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;294    	
;;;295    	
;;;296    	   MSPI_RegisterAllSricWrite((uint32_t)(0x0248),  0x9249249    );  // R/W  0x12492492, 0x9249249
000072  4d28              LDR      r5,|L6.276|
000074  f44f7012          MOV      r0,#0x248
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;297         MSPI_RegisterAllSricWrite((uint32_t)(0x024C),  0x9249249     );  // R/W  
00007e  4629              MOV      r1,r5
000080  f44f7013          MOV      r0,#0x24c
000084  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;298    
;;;299        MSPI_RegisterAllSricWrite((uint32_t)(0x0348), 0x9249249      );  // R/W   0x9249249
000088  4629              MOV      r1,r5
00008a  f44f7052          MOV      r0,#0x348
00008e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;300        MSPI_RegisterAllSricWrite((uint32_t)(0x034C), 0x9249249       );  // R/W  
000092  4629              MOV      r1,r5
000094  f44f7053          MOV      r0,#0x34c
000098  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;301    	
;;;302    	
;;;303          MSPI_RegisterAllSricWrite((uint32_t)(0x0314),   CR_TEMP    );  // R/W  
00009c  4621              MOV      r1,r4
00009e  f44f7045          MOV      r0,#0x314
0000a2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;304          MSPI_RegisterAllSricWrite((uint32_t)(0x0318),   CR_TEMP      );  // R/W  
0000a6  4621              MOV      r1,r4
0000a8  f44f7046          MOV      r0,#0x318
0000ac  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;305          MSPI_RegisterAllSricWrite((uint32_t)(0x031C),   CR_TEMP      );  // R/W  
0000b0  4621              MOV      r1,r4
0000b2  f44f7047          MOV      r0,#0x31c
0000b6  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;306          MSPI_RegisterAllSricWrite((uint32_t)(0x0320),    CR_TEMP     );  // R/W  
0000ba  4621              MOV      r1,r4
0000bc  f44f7048          MOV      r0,#0x320
0000c0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;307          MSPI_RegisterAllSricWrite((uint32_t)(0x0324),     CR_TEMP    );  // R/W  
0000c4  4621              MOV      r1,r4
0000c6  f44f7049          MOV      r0,#0x324
0000ca  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;308          MSPI_RegisterAllSricWrite((uint32_t)(0x0328),    CR_TEMP     ) ;          // R/W  
0000ce  4621              MOV      r1,r4
0000d0  f44f704a          MOV      r0,#0x328
0000d4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;309          MSPI_RegisterAllSricWrite((uint32_t)(0x032C),     CR_TEMP    );  // R/W  
0000d8  4621              MOV      r1,r4
0000da  f44f704b          MOV      r0,#0x32c
0000de  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;310          MSPI_RegisterAllSricWrite((uint32_t)(0x0330),     CR_TEMP    );  // R/W  
0000e2  4621              MOV      r1,r4
0000e4  f44f704c          MOV      r0,#0x330
0000e8  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;311          MSPI_RegisterAllSricWrite((uint32_t)(0x0334),     CR_TEMP     );  // R/W  
0000ec  4621              MOV      r1,r4
0000ee  f44f704d          MOV      r0,#0x334
0000f2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;312          MSPI_RegisterAllSricWrite((uint32_t)(0x0338),    CR_TEMP       );  // R/W  
0000f6  4621              MOV      r1,r4
0000f8  f44f704e          MOV      r0,#0x338
0000fc  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;313          MSPI_RegisterAllSricWrite((uint32_t)(0x033C),     CR_TEMP     );  // R/W  
000100  4621              MOV      r1,r4
000102  e8bd4070          POP      {r4-r6,lr}
000106  f44f704f          MOV      r0,#0x33c
00010a  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;314    			
;;;315    }
;;;316    
                          ENDP

00010e  0000              DCW      0x0000
                  |L6.272|
                          DCD      0x02108421
                  |L6.276|
                          DCD      0x09249249

                          AREA ||i.LX98405_Reg_Restore_Setting||, CODE, READONLY, ALIGN=2

                  LX98405_Reg_Restore_Setting PROC
;;;490    
;;;491    void LX98405_Reg_Restore_Setting(uint8_t index)
000000  b570              PUSH     {r4-r6,lr}
;;;492    {
000002  4605              MOV      r5,r0
;;;493    	s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
000004  481c              LDR      r0,|L7.120|
000006  1f04              SUBS     r4,r0,#4
;;;494    
;;;495    	MSPI_RegisterAllSricWrite((uint32_t)(0x0268), s_pktmoduleSRICCommonConf->R0_TG_STUCK.ulBulk              );  // R/W
000008  6020              STR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00000a  f8d012e8          LDR      r1,[r0,#0x2e8]
00000e  f44f701a          MOV      r0,#0x268
000012  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;496    	MSPI_RegisterAllSricWrite((uint32_t)(0x0368), s_pktmoduleSRICCommonConf->R1_TG_STUCK.ulBulk              );  // R/W
000016  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000018  f8d01554          LDR      r1,[r0,#0x554]
00001c  f44f705a          MOV      r0,#0x368
000020  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;497    
;;;498    	// Restore Setting
;;;499    	if (index == 1)  // Test type Short...
000024  2d01              CMP      r5,#1
000026  d002              BEQ      |L7.46|
;;;500    	{
;;;501    		MSPI_RegisterAllSricWrite((uint32_t)(0x026C), s_pktmoduleSRICCommonConf->R0_TEST_MODE_CTL.ulBulk         );  // R/W
;;;502    		MSPI_RegisterAllSricWrite((uint32_t)(0x036C), s_pktmoduleSRICCommonConf->R1_TEST_MODE_CTL.ulBulk         );  // R/W
;;;503    
;;;504    	}
;;;505    	else if (index == 2)  // Test type Open Short...
000028  2d02              CMP      r5,#2
00002a  d00d              BEQ      |L7.72|
00002c  e01f              B        |L7.110|
                  |L7.46|
00002e  6820              LDR      r0,[r4,#0]            ;501  ; s_pktmoduleSRICCommonConf
000030  f8d012ec          LDR      r1,[r0,#0x2ec]        ;501
000034  f44f701b          MOV      r0,#0x26c             ;501
000038  f7fffffe          BL       MSPI_RegisterAllSricWrite
00003c  6820              LDR      r0,[r4,#0]            ;502  ; s_pktmoduleSRICCommonConf
00003e  f8d01558          LDR      r1,[r0,#0x558]        ;502
000042  f44f705b          MOV      r0,#0x36c             ;502
000046  e010              B        |L7.106|
                  |L7.72|
;;;506    	{
;;;507    		MSPI_RegisterAllSricWrite((uint32_t)(0x001C), s_pktmoduleSRICCommonConf-> SDIC_CFG.ulBulk );
000048  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00004a  69c1              LDR      r1,[r0,#0x1c]
00004c  201c              MOVS     r0,#0x1c
00004e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;508    
;;;509    		MSPI_RegisterAllSricWrite((uint32_t)(0x0210), s_pktmoduleSRICCommonConf->R0_MUX_CTL1.ulBulk              );  // R/W
000052  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000054  f8d01098          LDR      r1,[r0,#0x98]
000058  f44f7004          MOV      r0,#0x210
00005c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;510    		MSPI_RegisterAllSricWrite((uint32_t)(0x0310), s_pktmoduleSRICCommonConf->R1_MUX_CTL1.ulBulk              );  // R/W
000060  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000062  f8d01304          LDR      r1,[r0,#0x304]
000066  f44f7044          MOV      r0,#0x310
                  |L7.106|
00006a  f7fffffe          BL       MSPI_RegisterAllSricWrite
                  |L7.110|
;;;511    	}
;;;512    
;;;513    	LX98405_Reg_CRTuneSetting(); // CR Recover
00006e  e8bd4070          POP      {r4-r6,lr}
000072  f7ffbffe          B.W      LX98405_Reg_CRTuneSetting
;;;514    
;;;515    }
                          ENDP

000076  0000              DCW      0x0000
                  |L7.120|
                          DCD      ||.data||+0x4

                          AREA ||i.LX98405_RegisterInit||, CODE, READONLY, ALIGN=2

                  LX98405_RegisterInit PROC
;;;20     
;;;21     void LX98405_RegisterInit(eSENSING_MODE_t eSensingMode)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     	
;;;24     	  s_pktmoduleSRICCommonConf = &s_ktmoduleSRICCommonConf;
000002  48a7              LDR      r0,|L8.672|
000004  b088              SUB      sp,sp,#0x20           ;22
000006  1f04              SUBS     r4,r0,#4
;;;25         uint32_t ulBuf[8];
;;;26         uint32_t ulBuf_w[8];
;;;27     	
;;;28     	// R/W Test
;;;29      #if 0
;;;30       	MSPI_RegisterRead((uint32_t)(0x0000) | 0x1 << 12 , &ulBuf[0], MSPI_READ_NONE);
;;;31       	MSPI_RegisterRead((uint32_t)(0x0000), &ulBuf[0],MSPI_READ_SM0);  //SM0 Read
;;;32       	MSPI_RegisterRead((uint32_t)(0x0000), &ulBuf[0],MSPI_READ_SM1); // SM1 Read
;;;33     	
;;;34     		 MSPI_RegisterWrite((uint32_t)(0x0010), 0x0000ffff, MSPI_READ_SM0                          );  // R/W  
;;;35     		 MSPI_RegisterWrite((uint32_t)(0x0010) | 0x1 << 12 , 0xffff0000 , MSPI_READ_SM0      );  // R/W  	
;;;36     	
;;;37       	MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM1);
;;;38       	MSPI_RegisterRead((uint32_t)(0x0010) | 0x1 << 12, &ulBuf[0], MSPI_READ_SM1);	
;;;39     	
;;;40     	
;;;41      	  MSPI_RegisterWrite((uint32_t)(0x0010), 0x12345678   , MSPI_READ_SM0      );  // R/W  
;;;42       	MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM0);
;;;43     	
;;;44     		 MSPI_RegisterWrite((uint32_t)(0x0010), 0x00FF    , MSPI_READ_SM1     );  // R/W  
;;;45     		MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM1);
;;;46     	
;;;47     	  ulBuf_w[0] = 1;
;;;48     		ulBuf_w[1] = 2;
;;;49     		ulBuf_w[2] = 3;
;;;50     		ulBuf_w[3] = 4;
;;;51     	  ulBuf_w[4] = 5;
;;;52     		ulBuf_w[5] = 6;
;;;53     		ulBuf_w[6] = 7;
;;;54     		ulBuf_w[7] = 8;
;;;55     		// Each Write
;;;56     	  MSPI_EachRegisterWrite ((uint32_t)(0x0010), &ulBuf_w[0], MSPI_READ_SM0);
;;;57     	  MSPI_EachRegisterWrite ((uint32_t)(0x0010) , &ulBuf_w[0], MSPI_READ_SM1);
;;;58     		
;;;59     	  MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM0);
;;;60     	  MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM1);	
;;;61     		
;;;62     		MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM0);
;;;63     	  MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM1);	
;;;64     
;;;65         MSPI_RegisterAllSricWrite((uint32_t)(0x0010), 0x12345678  );
;;;66     	  MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM0);
;;;67     	  MSPI_RegisterRead((uint32_t)(0x0010), &ulBuf[0], MSPI_READ_SM1);	
;;;68     #endif 
;;;69     
;;;70     
;;;71     //    MSPI_RegisterWrite((uint32_t)(0x0000), s_pktmoduleSRICCommonConf->PRODUCT_ID[0].ulBulk            );  // R    
;;;72         MSPI_RegisterAllSricWrite((uint32_t)(0x0004), s_pktmoduleSRICCommonConf->INTERFACE_CFG.ulBulk            );  // R/W  
000008  6020              STR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00000a  6841              LDR      r1,[r0,#4]
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;73         MSPI_RegisterAllSricWrite((uint32_t)(0x0008), s_pktmoduleSRICCommonConf->SPIS_PAD_CTL.ulBulk             );  // R/W  
000012  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000014  6881              LDR      r1,[r0,#8]
000016  2008              MOVS     r0,#8
000018  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;74         MSPI_RegisterAllSricWrite((uint32_t)(0x000C), s_pktmoduleSRICCommonConf->LVDS_PHY_CTL.ulBulk             );  // R/W  
00001c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00001e  68c1              LDR      r1,[r0,#0xc]
000020  200c              MOVS     r0,#0xc
000022  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;75         MSPI_RegisterAllSricWrite((uint32_t)(0x0010), s_pktmoduleSRICCommonConf->TLVDS_DUM0.ulBulk               );  // R/W  
000026  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000028  6901              LDR      r1,[r0,#0x10]
00002a  2010              MOVS     r0,#0x10
00002c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;76         MSPI_RegisterAllSricWrite((uint32_t)(0x0014), s_pktmoduleSRICCommonConf->TLVDS_DUM1.ulBulk               );  // R/W  
000030  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000032  6941              LDR      r1,[r0,#0x14]
000034  2014              MOVS     r0,#0x14
000036  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;77         MSPI_RegisterAllSricWrite((uint32_t)(0x0018), s_pktmoduleSRICCommonConf->SYS_CFG.ulBulk                  );  // R/W  
00003a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00003c  6981              LDR      r1,[r0,#0x18]
00003e  2018              MOVS     r0,#0x18
000040  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;78         MSPI_RegisterAllSricWrite((uint32_t)(0x001C), s_pktmoduleSRICCommonConf->SDIC_CFG.ulBulk                 );  // R/W  
000044  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000046  69c1              LDR      r1,[r0,#0x1c]
000048  201c              MOVS     r0,#0x1c
00004a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;79     //    MSPI_RegisterAllSricWrite((uint32_t)(0x0020), s_pktmoduleSRICCommonConf->TC_START.ulBulk                 );  // R/W  
;;;80         MSPI_RegisterAllSricWrite((uint32_t)(0x0024), s_pktmoduleSRICCommonConf->CH_MUX_NUM.ulBulk               );  // R/W  
00004e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000050  6a41              LDR      r1,[r0,#0x24]
000052  2024              MOVS     r0,#0x24
000054  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;81         MSPI_RegisterAllSricWrite((uint32_t)(0x0028), s_pktmoduleSRICCommonConf->LHB_MUX_CTL.ulBulk              );  // R/W  
000058  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00005a  6a81              LDR      r1,[r0,#0x28]
00005c  2028              MOVS     r0,#0x28
00005e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;82         MSPI_RegisterAllSricWrite((uint32_t)(0x002C), s_pktmoduleSRICCommonConf->MD_PWM_CTL.ulBulk               );  // R/W  
000062  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000064  6ac1              LDR      r1,[r0,#0x2c]
000066  202c              MOVS     r0,#0x2c
000068  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;83         MSPI_RegisterAllSricWrite((uint32_t)(0x0030), s_pktmoduleSRICCommonConf->MD0_MUX_CFG_00.ulBulk           );  // R/W  
00006c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00006e  6b01              LDR      r1,[r0,#0x30]
000070  2030              MOVS     r0,#0x30
000072  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;84         MSPI_RegisterAllSricWrite((uint32_t)(0x0034), s_pktmoduleSRICCommonConf->MD0_MUX_CFG_01.ulBulk           );  // R/W  
000076  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000078  6b41              LDR      r1,[r0,#0x34]
00007a  2034              MOVS     r0,#0x34
00007c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;85         MSPI_RegisterAllSricWrite((uint32_t)(0x0038), s_pktmoduleSRICCommonConf->DEFA_LHB_MCFG00.ulBulk          );  // R/W  
000080  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000082  6b81              LDR      r1,[r0,#0x38]
000084  2038              MOVS     r0,#0x38
000086  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;86         MSPI_RegisterAllSricWrite((uint32_t)(0x003C), s_pktmoduleSRICCommonConf->PWM_PRD.ulBulk                  );  // R/W  
00008a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00008c  6bc1              LDR      r1,[r0,#0x3c]
00008e  203c              MOVS     r0,#0x3c
000090  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;87         MSPI_RegisterAllSricWrite((uint32_t)(0x0040), s_pktmoduleSRICCommonConf->PWM_MUX_DLY_PRD.ulBulk          );  // R/W  
000094  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000096  6c01              LDR      r1,[r0,#0x40]
000098  2040              MOVS     r0,#0x40
00009a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;88         MSPI_RegisterAllSricWrite((uint32_t)(0x0044), s_pktmoduleSRICCommonConf->AFE_SIG_CTL.ulBulk              );  // R/W  
00009e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000a0  6c41              LDR      r1,[r0,#0x44]
0000a2  2044              MOVS     r0,#0x44
0000a4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;89         MSPI_RegisterAllSricWrite((uint32_t)(0x0048), s_pktmoduleSRICCommonConf->F1_CVC1_DRV_CTL1.ulBulk         );  // R/W  
0000a8  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000aa  6c81              LDR      r1,[r0,#0x48]
0000ac  2048              MOVS     r0,#0x48
0000ae  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;90         MSPI_RegisterAllSricWrite((uint32_t)(0x004C), s_pktmoduleSRICCommonConf->F1_RSTP_PHT_CTL.ulBulk          );  // R/W  
0000b2  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000b4  6cc1              LDR      r1,[r0,#0x4c]
0000b6  204c              MOVS     r0,#0x4c
0000b8  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;91         MSPI_RegisterAllSricWrite((uint32_t)(0x0050), s_pktmoduleSRICCommonConf->F1_PHTCR_VCR_CTL.ulBulk         );  // R/W  
0000bc  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000be  6d01              LDR      r1,[r0,#0x50]
0000c0  2050              MOVS     r0,#0x50
0000c2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;92         MSPI_RegisterAllSricWrite((uint32_t)(0x0054), s_pktmoduleSRICCommonConf->F1_RSTI_CTL.ulBulk              );  // R/W  
0000c6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000c8  6d41              LDR      r1,[r0,#0x54]
0000ca  2054              MOVS     r0,#0x54
0000cc  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;93         MSPI_RegisterAllSricWrite((uint32_t)(0x0058), s_pktmoduleSRICCommonConf->F1_PHTH_CTL.ulBulk              );  // R/W  
0000d0  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000d2  6d81              LDR      r1,[r0,#0x58]
0000d4  2058              MOVS     r0,#0x58
0000d6  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;94         MSPI_RegisterAllSricWrite((uint32_t)(0x005C), s_pktmoduleSRICCommonConf->F2_CVC1_DRV_CTL1.ulBulk         );  // R/W  
0000da  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000dc  6dc1              LDR      r1,[r0,#0x5c]
0000de  205c              MOVS     r0,#0x5c
0000e0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;95         MSPI_RegisterAllSricWrite((uint32_t)(0x0060), s_pktmoduleSRICCommonConf->F2_RSTP_PHT_CTL.ulBulk          );  // R/W  
0000e4  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000e6  6e01              LDR      r1,[r0,#0x60]
0000e8  2060              MOVS     r0,#0x60
0000ea  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;96         MSPI_RegisterAllSricWrite((uint32_t)(0x0064), s_pktmoduleSRICCommonConf->F2_PHTCR_VCR_CTL.ulBulk         );  // R/W  
0000ee  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000f0  6e41              LDR      r1,[r0,#0x64]
0000f2  2064              MOVS     r0,#0x64
0000f4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;97         MSPI_RegisterAllSricWrite((uint32_t)(0x0068), s_pktmoduleSRICCommonConf->F2_RSTI_CTL.ulBulk              );  // R/W  
0000f8  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0000fa  6e81              LDR      r1,[r0,#0x68]
0000fc  2068              MOVS     r0,#0x68
0000fe  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;98         MSPI_RegisterAllSricWrite((uint32_t)(0x006C), s_pktmoduleSRICCommonConf->F2_PHTH_CTL.ulBulk              );  // R/W  
000102  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000104  6ec1              LDR      r1,[r0,#0x6c]
000106  206c              MOVS     r0,#0x6c
000108  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;99         MSPI_RegisterAllSricWrite((uint32_t)(0x0070), s_pktmoduleSRICCommonConf->PHT_CTL.ulBulk                  );  // R/W  
00010c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00010e  6f01              LDR      r1,[r0,#0x70]
000110  2070              MOVS     r0,#0x70
000112  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;100        MSPI_RegisterAllSricWrite((uint32_t)(0x0074), s_pktmoduleSRICCommonConf->ADC_CTL1.ulBulk                 );  // R/W  
000116  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000118  6f41              LDR      r1,[r0,#0x74]
00011a  2074              MOVS     r0,#0x74
00011c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;101        MSPI_RegisterAllSricWrite((uint32_t)(0x0078), s_pktmoduleSRICCommonConf->ADC_CTL2.ulBulk                 );  // R/W  
000120  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000122  6f81              LDR      r1,[r0,#0x78]
000124  2078              MOVS     r0,#0x78
000126  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;102        MSPI_RegisterAllSricWrite((uint32_t)(0x007C), s_pktmoduleSRICCommonConf->ADC_CTL3.ulBulk                 );  // R/W  
00012a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00012c  6fc1              LDR      r1,[r0,#0x7c]
00012e  207c              MOVS     r0,#0x7c
000130  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;103        MSPI_RegisterAllSricWrite((uint32_t)(0x0080), s_pktmoduleSRICCommonConf->TEST_MUX_CTL.ulBulk             );  // R/W  
000134  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000136  f8d01080          LDR      r1,[r0,#0x80]
00013a  2080              MOVS     r0,#0x80
00013c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;104        MSPI_RegisterAllSricWrite((uint32_t)(0x0084), s_pktmoduleSRICCommonConf->SYS_DUMMY0.ulBulk               );  // R/W  
000140  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000142  f8d01084          LDR      r1,[r0,#0x84]
000146  2084              MOVS     r0,#0x84
000148  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;105    		
;;;106        MSPI_RegisterAllSricWrite((uint32_t)(0x0200), s_pktmoduleSRICCommonConf->R0_AFE_CFG.ulBulk               );  // R/W  
00014c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00014e  f8d01088          LDR      r1,[r0,#0x88]
000152  f44f7000          MOV      r0,#0x200
000156  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;107        MSPI_RegisterAllSricWrite((uint32_t)(0x0204), s_pktmoduleSRICCommonConf->R0_CH_EN.ulBulk                 );  // R/W  
00015a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00015c  f8d0108c          LDR      r1,[r0,#0x8c]
000160  f44f7001          MOV      r0,#0x204
000164  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;108        MSPI_RegisterAllSricWrite((uint32_t)(0x0208), s_pktmoduleSRICCommonConf->R0_BUF_OPT.ulBulk               );  // R/W  
000168  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00016a  f8d01090          LDR      r1,[r0,#0x90]
00016e  f44f7002          MOV      r0,#0x208
000172  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;109        MSPI_RegisterAllSricWrite((uint32_t)(0x020C), s_pktmoduleSRICCommonConf->R0_VCOMR_OPT.ulBulk             );  // R/W  
000176  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000178  f8d01094          LDR      r1,[r0,#0x94]
00017c  f44f7003          MOV      r0,#0x20c
000180  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;110        MSPI_RegisterAllSricWrite((uint32_t)(0x0210), s_pktmoduleSRICCommonConf->R0_MUX_CTL1.ulBulk              );  // R/W  
000184  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000186  f8d01098          LDR      r1,[r0,#0x98]
00018a  f44f7004          MOV      r0,#0x210
00018e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;111    //    MSPI_RegisterWrite((uint32_t)(0x0214), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX1[0].ulBulk         );  // R/W  
;;;112    //    MSPI_RegisterWrite((uint32_t)(0x0218), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX2[0].ulBulk         );  // R/W  
;;;113    //    MSPI_RegisterWrite((uint32_t)(0x021C), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX3[0].ulBulk         );  // R/W  
;;;114    //    MSPI_RegisterWrite((uint32_t)(0x0220), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX4[0].ulBulk         );  // R/W  
;;;115    //    MSPI_RegisterWrite((uint32_t)(0x0224), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX5[0].ulBulk         );  // R/W  
;;;116    //    MSPI_RegisterWrite((uint32_t)(0x0228), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX6[0].ulBulk         );  // R/W  
;;;117    //    MSPI_RegisterWrite((uint32_t)(0x022C), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX7[0].ulBulk         );  // R/W  
;;;118    //    MSPI_RegisterWrite((uint32_t)(0x0230), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX8[0].ulBulk         );  // R/W  
;;;119    //    MSPI_RegisterWrite((uint32_t)(0x0234), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX9[0].ulBulk         );  // R/W  
;;;120    //    MSPI_RegisterWrite((uint32_t)(0x0238), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX10[0].ulBulk        );  // R/W  
;;;121    //    MSPI_RegisterWrite((uint32_t)(0x023C), s_pktmoduleSRICCommonConf->R0_CR_RG_MUX11[0].ulBulk        );  // R/W  
;;;122    //    MSPI_RegisterWrite((uint32_t)(0x0240), s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXE[0].ulBulk        );  // R/W  
;;;123    //    MSPI_RegisterWrite((uint32_t)(0x0244), s_pktmoduleSRICCommonConf->R0_CR_R1G_MUXO[0].ulBulk        );  // R/W  
;;;124    //    MSPI_RegisterWrite((uint32_t)(0x0248), s_pktmoduleSRICCommonConf->R0_CR_GTUNE1[0].ulBulk          );  // R/W  
;;;125    //    MSPI_RegisterWrite((uint32_t)(0x024C), s_pktmoduleSRICCommonConf->R0_CR_GTUNE2[0].ulBulk          );  // R/W  
;;;126    //    MSPI_RegisterWrite((uint32_t)(0x0250), s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL1[0].ulBulk    );  // R/W  
;;;127    //    MSPI_RegisterWrite((uint32_t)(0x0254), s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL2[0].ulBulk    );  // R/W  
;;;128    //    MSPI_RegisterWrite((uint32_t)(0x0258), s_pktmoduleSRICCommonConf->R0_TUNE_GROUP_SEL3[0].ulBulk    );  // R/W  
;;;129        MSPI_RegisterAllSricWrite((uint32_t)(0x025C), s_pktmoduleSRICCommonConf->R0_ADC_IN_CTL.ulBulk            );  // R/W  
000192  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000194  f8d012dc          LDR      r1,[r0,#0x2dc]
000198  f44f7017          MOV      r0,#0x25c
00019c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;130        MSPI_RegisterAllSricWrite((uint32_t)(0x0260), s_pktmoduleSRICCommonConf->R0_AFE_SENSE_CTL.ulBulk         );  // R/W  
0001a0  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001a2  f8d012e0          LDR      r1,[r0,#0x2e0]
0001a6  f44f7018          MOV      r0,#0x260
0001aa  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;131        MSPI_RegisterAllSricWrite((uint32_t)(0x0264), s_pktmoduleSRICCommonConf->R0_PDB_CTL.ulBulk               );  // R/W  
0001ae  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001b0  f8d012e4          LDR      r1,[r0,#0x2e4]
0001b4  f44f7019          MOV      r0,#0x264
0001b8  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;132        MSPI_RegisterAllSricWrite((uint32_t)(0x0268), s_pktmoduleSRICCommonConf->R0_TG_STUCK.ulBulk              );  // R/W  
0001bc  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001be  f8d012e8          LDR      r1,[r0,#0x2e8]
0001c2  f44f701a          MOV      r0,#0x268
0001c6  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;133        MSPI_RegisterAllSricWrite((uint32_t)(0x026C), s_pktmoduleSRICCommonConf->R0_TEST_MODE_CTL.ulBulk         );  // R/W  
0001ca  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001cc  f8d012ec          LDR      r1,[r0,#0x2ec]
0001d0  f44f701b          MOV      r0,#0x26c
0001d4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;134        MSPI_RegisterAllSricWrite((uint32_t)(0x0270), s_pktmoduleSRICCommonConf->R0_RESERVE.ulBulk               );  // R/W  
0001d8  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001da  f8d012f0          LDR      r1,[r0,#0x2f0]
0001de  f44f701c          MOV      r0,#0x270
0001e2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;135    		
;;;136    
;;;137        MSPI_RegisterAllSricWrite((uint32_t)(0x0300), s_pktmoduleSRICCommonConf->R1_AFE_CFG.ulBulk               );  // R/W  
0001e6  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001e8  f8d012f4          LDR      r1,[r0,#0x2f4]
0001ec  f44f7040          MOV      r0,#0x300
0001f0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;138        MSPI_RegisterAllSricWrite((uint32_t)(0x0304), s_pktmoduleSRICCommonConf->R1_CH_EN.ulBulk                 );  // R/W  
0001f4  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
0001f6  f8d012f8          LDR      r1,[r0,#0x2f8]
0001fa  f44f7041          MOV      r0,#0x304
0001fe  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;139        MSPI_RegisterAllSricWrite((uint32_t)(0x0308), s_pktmoduleSRICCommonConf->R1_BUF_OPT.ulBulk               );  // R/W  
000202  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000204  f8d012fc          LDR      r1,[r0,#0x2fc]
000208  f44f7042          MOV      r0,#0x308
00020c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;140        MSPI_RegisterAllSricWrite((uint32_t)(0x030C), s_pktmoduleSRICCommonConf->R1_VCOMR_OPT.ulBulk             );  // R/W  
000210  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000212  f8d01300          LDR      r1,[r0,#0x300]
000216  f44f7043          MOV      r0,#0x30c
00021a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;141        MSPI_RegisterAllSricWrite((uint32_t)(0x0310), s_pktmoduleSRICCommonConf->R1_MUX_CTL1.ulBulk              );  // R/W  
00021e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000220  f8d01304          LDR      r1,[r0,#0x304]
000224  f44f7044          MOV      r0,#0x310
000228  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;142    //    MSPI_RegisterWrite((uint32_t)(0x0314), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX1[0].ulBulk         );  // R/W  
;;;143    //    MSPI_RegisterWrite((uint32_t)(0x0318), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX2[0].ulBulk         );  // R/W  
;;;144    //    MSPI_RegisterWrite((uint32_t)(0x031C), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX3[0].ulBulk         );  // R/W  
;;;145    //    MSPI_RegisterWrite((uint32_t)(0x0320), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX4[0].ulBulk         );  // R/W  
;;;146    //    MSPI_RegisterWrite((uint32_t)(0x0324), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX5[0].ulBulk         );  // R/W  
;;;147    //    MSPI_RegisterWrite((uint32_t)(0x0328), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX6[0].ulBulk         );  // R/W  
;;;148    //    MSPI_RegisterWrite((uint32_t)(0x032C), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX7[0].ulBulk         );  // R/W  
;;;149    //    MSPI_RegisterWrite((uint32_t)(0x0330), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX8[0].ulBulk         );  // R/W  
;;;150    //    MSPI_RegisterWrite((uint32_t)(0x0334), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX9[0].ulBulk         );  // R/W  
;;;151    //    MSPI_RegisterWrite((uint32_t)(0x0338), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX10[0].ulBulk        );  // R/W  
;;;152    //    MSPI_RegisterWrite((uint32_t)(0x033C), s_pktmoduleSRICCommonConf->R1_CR_RG_MUX11[0].ulBulk        );  // R/W  
;;;153    //    MSPI_RegisterWrite((uint32_t)(0x0340), s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXE[0].ulBulk        );  // R/W  
;;;154    //    MSPI_RegisterWrite((uint32_t)(0x0344), s_pktmoduleSRICCommonConf->R1_CR_R1G_MUXO[0].ulBulk        );  // R/W  
;;;155    //    MSPI_RegisterWrite((uint32_t)(0x0348), s_pktmoduleSRICCommonConf->R1_CR_GTUNE1[0].ulBulk          );  // R/W  
;;;156    //    MSPI_RegisterWrite((uint32_t)(0x034C), s_pktmoduleSRICCommonConf->R1_CR_GTUNE2[0].ulBulk          );  // R/W  
;;;157    //    MSPI_RegisterWrite((uint32_t)(0x0350), s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL1[0].ulBulk    );  // R/W  
;;;158    //    MSPI_RegisterWrite((uint32_t)(0x0354), s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL2[0].ulBulk    );  // R/W  
;;;159    //    MSPI_RegisterWrite((uint32_t)(0x0358), s_pktmoduleSRICCommonConf->R1_TUNE_GROUP_SEL3[0].ulBulk    );  // R/W  
;;;160        MSPI_RegisterAllSricWrite((uint32_t)(0x035C), s_pktmoduleSRICCommonConf->R1_ADC_IN_CTL.ulBulk            );  // R/W  
00022c  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00022e  f8d01548          LDR      r1,[r0,#0x548]
000232  f44f7057          MOV      r0,#0x35c
000236  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;161        MSPI_RegisterAllSricWrite((uint32_t)(0x0360), s_pktmoduleSRICCommonConf->R1_AFE_SENSE_CTL.ulBulk         );  // R/W  
00023a  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00023c  f8d0154c          LDR      r1,[r0,#0x54c]
000240  f44f7058          MOV      r0,#0x360
000244  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;162        MSPI_RegisterAllSricWrite((uint32_t)(0x0364), s_pktmoduleSRICCommonConf->R1_PDB_CTL.ulBulk               );  // R/W  
000248  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
00024a  f8d01550          LDR      r1,[r0,#0x550]
00024e  f44f7059          MOV      r0,#0x364
000252  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;163    			  MSPI_RegisterRead((uint32_t)(0x0364), &ulBuf[0], MSPI_READ_SM1);	
000256  2202              MOVS     r2,#2
000258  4669              MOV      r1,sp
00025a  f44f7059          MOV      r0,#0x364
00025e  f7fffffe          BL       MSPI_RegisterRead
;;;164        MSPI_RegisterAllSricWrite((uint32_t)(0x0368), s_pktmoduleSRICCommonConf->R1_TG_STUCK.ulBulk              );  // R/W  
000262  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000264  f8d01554          LDR      r1,[r0,#0x554]
000268  f44f705a          MOV      r0,#0x368
00026c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;165        MSPI_RegisterAllSricWrite((uint32_t)(0x036C), s_pktmoduleSRICCommonConf->R1_TEST_MODE_CTL.ulBulk         );  // R/W  
000270  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000272  f8d01558          LDR      r1,[r0,#0x558]
000276  f44f705b          MOV      r0,#0x36c
00027a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;166        MSPI_RegisterAllSricWrite((uint32_t)(0x0370), s_pktmoduleSRICCommonConf->R1_RESERVE.ulBulk               );  // R/W  
00027e  6820              LDR      r0,[r4,#0]  ; s_pktmoduleSRICCommonConf
000280  f8d0155c          LDR      r1,[r0,#0x55c]
000284  f44f705c          MOV      r0,#0x370
000288  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;167       // MSPI_RegisterAllSricWrite((uint32_t)(0x07F0), s_pktmoduleSRICCommonConf->SPI_WRITE_DEFEND.ulBulk         );  // R/W  
;;;168      //  MSPI_RegisterAllSricWrite((uint32_t)(0x07F4), s_pktmoduleSRICCommonConf->MON_CFCLK_ON.ulBulk             );  // R/W  
;;;169    //    MSPI_RegisterWrite((uint32_t)(0x07F8), s_pktmoduleSRICCommonConf->MON_ADCDO[0].ulBulk             );  // R    
;;;170    //    MSPI_RegisterWrite((uint32_t)(0x07FC), s_pktmoduleSRICCommonConf->SRIC_STATE[0].ulBulk            );  // R    
;;;171    
;;;172      //  LX98405_Reg_CRTuneSetting_tmp(); // Temp Setting
;;;173         LX98405_Reg_CRTuneSetting();
00028c  f7fffffe          BL       LX98405_Reg_CRTuneSetting
;;;174    // SRIC IQR Enable
;;;175    //	  MSPI_RegisterWrite((uint32_t)(0x0004), 0x1 << 3 | 0x1 , MSPI_READ_SM1           );  // R/W  	
;;;176    	  MSPI_RegisterWrite((uint32_t)(0x0004), 0x1 <<12  | 0x1 << 10| 0x1 << 3 | 0x1 , MSPI_READ_SM1           );  // R/W  			
000290  2202              MOVS     r2,#2
000292  f2414109          MOV      r1,#0x1409
000296  2004              MOVS     r0,#4
000298  f7fffffe          BL       MSPI_RegisterWrite
;;;177    
;;;178    }
00029c  b008              ADD      sp,sp,#0x20
00029e  bd10              POP      {r4,pc}
;;;179    
                          ENDP

                  |L8.672|
                          DCD      ||.data||+0x4

                          AREA ||i.LX98405_Short_Local_Global_Tune||, CODE, READONLY, ALIGN=1

                  LX98405_Short_Local_Global_Tune PROC
;;;361    
;;;362    void LX98405_Short_Local_Global_Tune(void)
000000  b510              PUSH     {r4,lr}
;;;363    {
;;;364    	uint32_t CR_TEMP,  CR_VAL ; // Local Tune
;;;365    	uint32_t GCR_VAL,  GCR_VAL_TEMP ; // Global Tune
;;;366    
;;;367    	// Local Tune Setting
;;;368    	CR_VAL = 0;
;;;369    	CR_TEMP = CR_VAL << 0 | CR_VAL << 5 | CR_VAL << 10 |
000002  2400              MOVS     r4,#0
;;;370    	                    CR_VAL << 15 | CR_VAL << 20 | CR_VAL << 25 ;
;;;371    	MSPI_RegisterAllSricWrite((uint32_t)(0x0214),   CR_TEMP    );  // R/W
000004  4621              MOV      r1,r4
000006  f44f7005          MOV      r0,#0x214
00000a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;372    	MSPI_RegisterAllSricWrite((uint32_t)(0x0218),   CR_TEMP      );  // R/W
00000e  4621              MOV      r1,r4
000010  f44f7006          MOV      r0,#0x218
000014  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;373    	MSPI_RegisterAllSricWrite((uint32_t)(0x021C),   CR_TEMP      );  // R/W
000018  4621              MOV      r1,r4
00001a  f44f7007          MOV      r0,#0x21c
00001e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;374    	MSPI_RegisterAllSricWrite((uint32_t)(0x0220),    CR_TEMP     );  // R/W
000022  4621              MOV      r1,r4
000024  f44f7008          MOV      r0,#0x220
000028  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;375    	MSPI_RegisterAllSricWrite((uint32_t)(0x0224),     CR_TEMP    );  // R/W
00002c  4621              MOV      r1,r4
00002e  f44f7009          MOV      r0,#0x224
000032  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;376    	MSPI_RegisterAllSricWrite((uint32_t)(0x0228),    CR_TEMP     ) ;          // R/W
000036  4621              MOV      r1,r4
000038  f44f700a          MOV      r0,#0x228
00003c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;377    	MSPI_RegisterAllSricWrite((uint32_t)(0x022C),     CR_TEMP    );  // R/W
000040  4621              MOV      r1,r4
000042  f44f700b          MOV      r0,#0x22c
000046  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;378    	MSPI_RegisterAllSricWrite((uint32_t)(0x0230),     CR_TEMP    );  // R/W
00004a  4621              MOV      r1,r4
00004c  f44f700c          MOV      r0,#0x230
000050  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;379    	MSPI_RegisterAllSricWrite((uint32_t)(0x0234),     CR_TEMP     );  // R/W
000054  4621              MOV      r1,r4
000056  f44f700d          MOV      r0,#0x234
00005a  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;380    	MSPI_RegisterAllSricWrite((uint32_t)(0x0238),    CR_TEMP       );  // R/W
00005e  4621              MOV      r1,r4
000060  f44f700e          MOV      r0,#0x238
000064  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;381    	MSPI_RegisterAllSricWrite((uint32_t)(0x023C),     CR_TEMP     );
000068  4621              MOV      r1,r4
00006a  f44f700f          MOV      r0,#0x23c
00006e  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;382    	MSPI_RegisterAllSricWrite((uint32_t)(0x0314),   CR_TEMP    );
000072  4621              MOV      r1,r4
000074  f44f7045          MOV      r0,#0x314
000078  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;383    	MSPI_RegisterAllSricWrite((uint32_t)(0x0318),   CR_TEMP      );  // R/W
00007c  4621              MOV      r1,r4
00007e  f44f7046          MOV      r0,#0x318
000082  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;384    	MSPI_RegisterAllSricWrite((uint32_t)(0x031C),   CR_TEMP      );  // R/W
000086  4621              MOV      r1,r4
000088  f44f7047          MOV      r0,#0x31c
00008c  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;385    	MSPI_RegisterAllSricWrite((uint32_t)(0x0320),    CR_TEMP     );  // R/W
000090  4621              MOV      r1,r4
000092  f44f7048          MOV      r0,#0x320
000096  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;386    	MSPI_RegisterAllSricWrite((uint32_t)(0x0324),     CR_TEMP    );  // R/W
00009a  4621              MOV      r1,r4
00009c  f44f7049          MOV      r0,#0x324
0000a0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;387    	MSPI_RegisterAllSricWrite((uint32_t)(0x0328),    CR_TEMP     ) ;   // R/W
0000a4  4621              MOV      r1,r4
0000a6  f44f704a          MOV      r0,#0x328
0000aa  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;388    	MSPI_RegisterAllSricWrite((uint32_t)(0x032C),     CR_TEMP    );  // R/W
0000ae  4621              MOV      r1,r4
0000b0  f44f704b          MOV      r0,#0x32c
0000b4  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;389    	MSPI_RegisterAllSricWrite((uint32_t)(0x0330),     CR_TEMP    );  // R/W
0000b8  4621              MOV      r1,r4
0000ba  f44f704c          MOV      r0,#0x330
0000be  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;390    	MSPI_RegisterAllSricWrite((uint32_t)(0x0334),     CR_TEMP     );  // R/W
0000c2  4621              MOV      r1,r4
0000c4  f44f704d          MOV      r0,#0x334
0000c8  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;391    	MSPI_RegisterAllSricWrite((uint32_t)(0x0338),    CR_TEMP       );  // R/W
0000cc  4621              MOV      r1,r4
0000ce  f44f704e          MOV      r0,#0x338
0000d2  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;392    	MSPI_RegisterAllSricWrite((uint32_t)(0x033C),     CR_TEMP     );  // R/W
0000d6  4621              MOV      r1,r4
0000d8  f44f704f          MOV      r0,#0x33c
0000dc  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;393    
;;;394    	// Global Tune Setting
;;;395    	GCR_VAL = 0;
;;;396    	GCR_VAL_TEMP = GCR_VAL << 0  | GCR_VAL << 3  | GCR_VAL << 6| GCR_VAL << 9 | GCR_VAL << 12 |
;;;397    	                  GCR_VAL << 15  | GCR_VAL << 18 | GCR_VAL << 21 | GCR_VAL << 24| GCR_VAL << 27 ;
;;;398    
;;;399    	MSPI_RegisterAllSricWrite((uint32_t)(0x0248),  GCR_VAL_TEMP    );
0000e0  4621              MOV      r1,r4
0000e2  f44f7012          MOV      r0,#0x248
0000e6  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;400    	MSPI_RegisterAllSricWrite((uint32_t)(0x024C),  GCR_VAL_TEMP     );  // R/W
0000ea  4621              MOV      r1,r4
0000ec  f44f7013          MOV      r0,#0x24c
0000f0  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;401    	MSPI_RegisterAllSricWrite((uint32_t)(0x0348), GCR_VAL_TEMP      );  // R/W
0000f4  4621              MOV      r1,r4
0000f6  f44f7052          MOV      r0,#0x348
0000fa  f7fffffe          BL       MSPI_RegisterAllSricWrite
;;;402    	MSPI_RegisterAllSricWrite((uint32_t)(0x034C), GCR_VAL_TEMP       );  // R/W
0000fe  4621              MOV      r1,r4
000100  e8bd4010          POP      {r4,lr}
000104  f44f7053          MOV      r0,#0x34c
000108  f7ffbffe          B.W      MSPI_RegisterAllSricWrite
;;;403    
;;;404    
;;;405    }
;;;406    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  s_pktmoduleSRICCommonConf
                          DCD      0x00000000
                  s_ktmoduleSRICCommonConf
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01140000          DCB      0x01,0x14,0x00,0x00
00000c  11000000          DCB      0x11,0x00,0x00,0x00
000010  58040050          DCB      0x58,0x04,0x00,0x50
000014  6996a5a5          DCB      0x69,0x96,0xa5,0xa5
000018  a5a56996          DCB      0xa5,0xa5,0x69,0x96
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  3f080000          DCB      0x3f,0x08,0x00,0x00
00002c  19190600          DCB      0x19,0x19,0x06,0x00
000030  2305a202          DCB      0x23,0x05,0xa2,0x02
000034  10325476          DCB      0x10,0x32,0x54,0x76
000038  980a00dc          DCB      0x98,0x0a,0x00,0xdc
00003c  00000000          DCB      0x00,0x00,0x00,0x00
000040  3a130000          DCB      0x3a,0x13,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  ff000000          DCB      0xff,0x00,0x00,0x00
00004c  49aa0600          DCB      0x49,0xaa,0x06,0x00
000050  b8d6a300          DCB      0xb8,0xd6,0xa3,0x00
000054  26cf4004          DCB      0x26,0xcf,0x40,0x04
000058  029b0d00          DCB      0x02,0x9b,0x0d,0x00
00005c  22024104          DCB      0x22,0x02,0x41,0x04
000060  89250200          DCB      0x89,0x25,0x02,0x00
000064  24f60a00          DCB      0x24,0xf6,0x0a,0x00
000068  1f356c00          DCB      0x1f,0x35,0x6c,0x00
00006c  82240100          DCB      0x82,0x24,0x01,0x00
000070  52291200          DCB      0x52,0x29,0x12,0x00
000074  26050000          DCB      0x26,0x05,0x00,0x00
000078  8813c600          DCB      0x88,0x13,0xc6,0x00
00007c  41df1200          DCB      0x41,0xdf,0x12,0x00
000080  2714262e          DCB      0x27,0x14,0x26,0x2e
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  ff000000          DCB      0xff,0x00,0x00,0x00
00008c  03000000          DCB      0x03,0x00,0x00,0x00
000090  f8ff0300          DCB      0xf8,0xff,0x03,0x00
000094  09000000          DCB      0x09,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  3e00f07f          DCB      0x3e,0x00,0xf0,0x7f
0000a0  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000a4  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000a8  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000ac  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000b0  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000b4  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000b8  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000bc  a594520a          DCB      0xa5,0x94,0x52,0x0a
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  00000000          DCB      0x00,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00000000          DCB      0x00,0x00,0x00,0x00
000118  00000000          DCB      0x00,0x00,0x00,0x00
00011c  00000000          DCB      0x00,0x00,0x00,0x00
000120  00000000          DCB      0x00,0x00,0x00,0x00
000124  00000000          DCB      0x00,0x00,0x00,0x00
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  00000000          DCB      0x00,0x00,0x00,0x00
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  00000000          DCB      0x00,0x00,0x00,0x00
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  00000000          DCB      0x00,0x00,0x00,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  00000000          DCB      0x00,0x00,0x00,0x00
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
0001b8  00000000          DCB      0x00,0x00,0x00,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  00000000          DCB      0x00,0x00,0x00,0x00
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00000000          DCB      0x00,0x00,0x00,0x00
000218  00000000          DCB      0x00,0x00,0x00,0x00
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  00000000          DCB      0x00,0x00,0x00,0x00
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00000000          DCB      0x00,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  49922409          DCB      0x49,0x92,0x24,0x09
000244  49922409          DCB      0x49,0x92,0x24,0x09
000248  49922409          DCB      0x49,0x92,0x24,0x09
00024c  49922409          DCB      0x49,0x92,0x24,0x09
000250  49922409          DCB      0x49,0x92,0x24,0x09
000254  49922409          DCB      0x49,0x92,0x24,0x09
000258  49922409          DCB      0x49,0x92,0x24,0x09
00025c  49922409          DCB      0x49,0x92,0x24,0x09
000260  00000000          DCB      0x00,0x00,0x00,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  24490200          DCB      0x24,0x49,0x02,0x00
000284  24490200          DCB      0x24,0x49,0x02,0x00
000288  24490200          DCB      0x24,0x49,0x02,0x00
00028c  24490200          DCB      0x24,0x49,0x02,0x00
000290  24490200          DCB      0x24,0x49,0x02,0x00
000294  24490200          DCB      0x24,0x49,0x02,0x00
000298  24490200          DCB      0x24,0x49,0x02,0x00
00029c  24490200          DCB      0x24,0x49,0x02,0x00
0002a0  24490200          DCB      0x24,0x49,0x02,0x00
0002a4  24490200          DCB      0x24,0x49,0x02,0x00
0002a8  24490200          DCB      0x24,0x49,0x02,0x00
0002ac  24490200          DCB      0x24,0x49,0x02,0x00
0002b0  24490200          DCB      0x24,0x49,0x02,0x00
0002b4  24490200          DCB      0x24,0x49,0x02,0x00
0002b8  24490200          DCB      0x24,0x49,0x02,0x00
0002bc  24490200          DCB      0x24,0x49,0x02,0x00
0002c0  15000000          DCB      0x15,0x00,0x00,0x00
0002c4  15000000          DCB      0x15,0x00,0x00,0x00
0002c8  15000000          DCB      0x15,0x00,0x00,0x00
0002cc  15000000          DCB      0x15,0x00,0x00,0x00
0002d0  15000000          DCB      0x15,0x00,0x00,0x00
0002d4  15000000          DCB      0x15,0x00,0x00,0x00
0002d8  15000000          DCB      0x15,0x00,0x00,0x00
0002dc  15000000          DCB      0x15,0x00,0x00,0x00
0002e0  01000000          DCB      0x01,0x00,0x00,0x00
0002e4  27771b29          DCB      0x27,0x77,0x1b,0x29
0002e8  ff010000          DCB      0xff,0x01,0x00,0x00
0002ec  00000030          DCB      0x00,0x00,0x00,0x30
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  03000000          DCB      0x03,0x00,0x00,0x00
0002fc  f8ff0300          DCB      0xf8,0xff,0x03,0x00
000300  09000000          DCB      0x09,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  3e00f07f          DCB      0x3e,0x00,0xf0,0x7f
00030c  a594520a          DCB      0xa5,0x94,0x52,0x0a
000310  a594520a          DCB      0xa5,0x94,0x52,0x0a
000314  a594520a          DCB      0xa5,0x94,0x52,0x0a
000318  a594520a          DCB      0xa5,0x94,0x52,0x0a
00031c  a594520a          DCB      0xa5,0x94,0x52,0x0a
000320  a594520a          DCB      0xa5,0x94,0x52,0x0a
000324  a594520a          DCB      0xa5,0x94,0x52,0x0a
000328  a594520a          DCB      0xa5,0x94,0x52,0x0a
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  00000000          DCB      0x00,0x00,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  49922409          DCB      0x49,0x92,0x24,0x09
0004b0  49922409          DCB      0x49,0x92,0x24,0x09
0004b4  49922409          DCB      0x49,0x92,0x24,0x09
0004b8  49922409          DCB      0x49,0x92,0x24,0x09
0004bc  49922409          DCB      0x49,0x92,0x24,0x09
0004c0  49922409          DCB      0x49,0x92,0x24,0x09
0004c4  49922409          DCB      0x49,0x92,0x24,0x09
0004c8  49922409          DCB      0x49,0x92,0x24,0x09
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00000000          DCB      0x00,0x00,0x00,0x00
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
0004d8  00000000          DCB      0x00,0x00,0x00,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  00000000          DCB      0x00,0x00,0x00,0x00
0004e4  00000000          DCB      0x00,0x00,0x00,0x00
0004e8  00000000          DCB      0x00,0x00,0x00,0x00
0004ec  24490200          DCB      0x24,0x49,0x02,0x00
0004f0  24490200          DCB      0x24,0x49,0x02,0x00
0004f4  24490200          DCB      0x24,0x49,0x02,0x00
0004f8  24490200          DCB      0x24,0x49,0x02,0x00
0004fc  24490200          DCB      0x24,0x49,0x02,0x00
000500  24490200          DCB      0x24,0x49,0x02,0x00
000504  24490200          DCB      0x24,0x49,0x02,0x00
000508  24490200          DCB      0x24,0x49,0x02,0x00
00050c  24490200          DCB      0x24,0x49,0x02,0x00
000510  24490200          DCB      0x24,0x49,0x02,0x00
000514  24490200          DCB      0x24,0x49,0x02,0x00
000518  24490200          DCB      0x24,0x49,0x02,0x00
00051c  24490200          DCB      0x24,0x49,0x02,0x00
000520  24490200          DCB      0x24,0x49,0x02,0x00
000524  24490200          DCB      0x24,0x49,0x02,0x00
000528  24490200          DCB      0x24,0x49,0x02,0x00
00052c  15000000          DCB      0x15,0x00,0x00,0x00
000530  15000000          DCB      0x15,0x00,0x00,0x00
000534  15000000          DCB      0x15,0x00,0x00,0x00
000538  15000000          DCB      0x15,0x00,0x00,0x00
00053c  15000000          DCB      0x15,0x00,0x00,0x00
000540  15000000          DCB      0x15,0x00,0x00,0x00
000544  15000000          DCB      0x15,0x00,0x00,0x00
000548  15000000          DCB      0x15,0x00,0x00,0x00
00054c  01000000          DCB      0x01,0x00,0x00,0x00
000550  27771b29          DCB      0x27,0x77,0x1b,0x29
000554  ff010000          DCB      0xff,0x01,0x00,0x00
000558  00000030          DCB      0x00,0x00,0x00,0x30
00055c  00000000          DCB      0x00,0x00,0x00,0x00
000560  00000000          DCB      0x00,0x00,0x00,0x00
000564  ff000000          DCB      0xff,0x00,0x00,0x00
000568  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Module\\SRIC\\lx98405\\roic_ctrl_lx98405.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_lx98405_c_391c03bb____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___19_roic_ctrl_lx98405_c_391c03bb____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_lx98405_c_391c03bb____REVSH|
#line 402
|__asm___19_roic_ctrl_lx98405_c_391c03bb____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_roic_ctrl_lx98405_c_391c03bb____RRX|
#line 587
|__asm___19_roic_ctrl_lx98405_c_391c03bb____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
