; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\wdgt.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\wdgt.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\wdgt.crf ..\..\Hal\wdgt\wdgt.c]
                          THUMB

                          AREA ||i.Hal_Kick_DOG||, CODE, READONLY, ALIGN=2

                  Hal_Kick_DOG PROC
;;;133    
;;;134    void Hal_Kick_DOG(void)
000000  4805              LDR      r0,|L1.24|
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
00000a  6841              LDR      r1,[r0,#4]
00000c  f0110f01          TST      r1,#1
;;;135    {
;;;136    	WDGT_SetCLR(UWDT);
;;;137    	
;;;138    	if(!WDGT_GetAccessRegStatus(UWDT))
;;;139    		WDGT_Init(UWDT);
;;;140    }
000010  bf18              IT       NE
000012  4770              BXNE     lr
000014  f7ffbffe          B.W      WDGT_Init
;;;141    
                          ENDP

                  |L1.24|
                          DCD      0x40008000

                          AREA ||i.Hal_Release_DOG||, CODE, READONLY, ALIGN=2

                  Hal_Release_DOG PROC
;;;141    
;;;142    void Hal_Release_DOG(void)
000000  4802              LDR      r0,|L2.12|
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;143    {
;;;144    	WDGT_SetCLR(UWDT);
;;;145    }
00000a  4770              BX       lr
;;;146    
                          ENDP

                  |L2.12|
                          DCD      0x40008000

                          AREA ||i.Hal_WDT_DeInit||, CODE, READONLY, ALIGN=2

                  Hal_WDT_DeInit PROC
;;;158    
;;;159    void Hal_WDT_DeInit(void)
000000  2200              MOVS     r2,#0
000002  f04f21e0          MOV      r1,#0xe000e000
000006  2001              MOVS     r0,#1
000008  f8c10180          STR      r0,[r1,#0x180]
00000c  f8c10280          STR      r0,[r1,#0x280]
000010  4808              LDR      r0,|L3.52|
000012  6801              LDR      r1,[r0,#0]
000014  f0410101          ORR      r1,r1,#1
000018  6001              STR      r1,[r0,#0]
00001a  6841              LDR      r1,[r0,#4]
00001c  f0110f01          TST      r1,#1
;;;160    {
000020  d105              BNE      |L3.46|
000022  6841              LDR      r1,[r0,#4]
000024  f64a43ce          MOV      r3,#0xacce
000028  f3630100          BFI      r1,r3,#0,#1
00002c  6041              STR      r1,[r0,#4]
                  |L3.46|
;;;161    //	NVIC_SetPriority(WDT_IRQn, WDT_IRQn_Priority);
;;;162    	NVIC_DisableIRQ(WDT_IRQn);
;;;163    	NVIC_ClearPendingIRQ(WDT_IRQn);
;;;164    	WDGT_DeInit(UWDT);
;;;165    	wdt_init = FALSE;
00002e  4802              LDR      r0,|L3.56|
000030  7002              STRB     r2,[r0,#0]
;;;166    }
000032  4770              BX       lr
                          ENDP

                  |L3.52|
                          DCD      0x40008000
                  |L3.56|
                          DCD      ||.data||

                          AREA ||i.Hal_WDT_Init||, CODE, READONLY, ALIGN=2

                  Hal_WDT_Init PROC
;;;147    __IO bool_t wdt_init = FALSE;
;;;148    void Hal_WDT_Init(void)
000000  490d              LDR      r1,|L4.56|
;;;149    {
000002  b510              PUSH     {r4,lr}
;;;150    	Fncp_WDT_IRQHandler = &WDT_InterruptHandler;
000004  480b              LDR      r0,|L4.52|
;;;151    	SET_BIT(SCRB->CK_ENA_RUN0.ulBulk, (SCB_VECTKEY | 0x02)); // Enable WDT CLK
000006  6008              STR      r0,[r1,#0]  ; Fncp_WDT_IRQHandler
000008  f04f4080          MOV      r0,#0x40000000
00000c  69c1              LDR      r1,[r0,#0x1c]
00000e  4a0b              LDR      r2,|L4.60|
000010  4311              ORRS     r1,r1,r2
000012  61c1              STR      r1,[r0,#0x1c]
000014  f04f20e0          MOV      r0,#0xe000e000
000018  2401              MOVS     r4,#1
00001a  f8c04280          STR      r4,[r0,#0x280]
00001e  2180              MOVS     r1,#0x80
000020  f8801400          STRB     r1,[r0,#0x400]
000024  f8c04100          STR      r4,[r0,#0x100]
;;;152    	NVIC_ClearPendingIRQ(WDT_IRQn);
;;;153    	NVIC_SetPriority(WDT_IRQn, WDT_IRQn_Priority);
;;;154    	NVIC_EnableIRQ(WDT_IRQn);
;;;155    	WDGT_Init(UWDT);
000028  4805              LDR      r0,|L4.64|
00002a  f7fffffe          BL       WDGT_Init
;;;156    	wdt_init = TRUE;
00002e  4805              LDR      r0,|L4.68|
000030  7004              STRB     r4,[r0,#0]
;;;157    }
000032  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L4.52|
                          DCD      WDT_InterruptHandler
                  |L4.56|
                          DCD      Fncp_WDT_IRQHandler
                  |L4.60|
                          DCD      0x05fa0002
                  |L4.64|
                          DCD      0x40008000
                  |L4.68|
                          DCD      ||.data||

                          AREA ||i.WDGT_Cmd||, CODE, READONLY, ALIGN=1

                  WDGT_Cmd PROC
;;;101    
;;;102    void WDGT_Cmd(WDT_TypeDef* WDGTx, FunctionalState NewFunction)
000000  2900              CMP      r1,#0
;;;103    {
;;;104    	if(NewFunction != DISABLE)
;;;105    	{
;;;106    		WDGTx->WDT_CON |= WDGT_WDGT_Enable;
;;;107    	}
;;;108    	else
;;;109    	{
;;;110    		WDGTx->WDT_CON &= WDGT_WDGT_DisableMask;
000002  6881              LDR      r1,[r0,#8]
000004  bf12              ITEE     NE                    ;106
000006  f0410108          ORRNE    r1,r1,#8              ;106
00000a  f64f72f7          MOVEQ    r2,#0xfff7
00000e  4011              ANDEQ    r1,r1,r2
000010  6081              STR      r1,[r0,#8]            ;106
;;;111    	}
;;;112    }
000012  4770              BX       lr
;;;113    
                          ENDP


                          AREA ||i.WDGT_DeInit||, CODE, READONLY, ALIGN=1

                  WDGT_DeInit PROC
;;;53     
;;;54     void WDGT_DeInit(WDT_TypeDef* WDGTx)
000000  6801              LDR      r1,[r0,#0]
000002  f0410101          ORR      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
000008  6841              LDR      r1,[r0,#4]
00000a  f0110f01          TST      r1,#1
;;;55     {	
;;;56     	WDGT_SetCLR(WDGTx);
;;;57     
;;;58     	if(WDGT_GetAccessRegStatus(WDGTx) == (uint16_t)(0x0000))
;;;59     		WDGT_SetLock(WDGTx);
;;;60     }
00000e  bf18              IT       NE
000010  4770              BXNE     lr
000012  f64a42ce          MOV      r2,#0xacce
000016  6841              LDR      r1,[r0,#4]
000018  f3620100          BFI      r1,r2,#0,#1
00001c  6041              STR      r1,[r0,#4]
00001e  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||i.WDGT_GetAccessRegStatus||, CODE, READONLY, ALIGN=1

                  WDGT_GetAccessRegStatus PROC
;;;113    
;;;114    uint16_t WDGT_GetAccessRegStatus(WDT_TypeDef* WDGTx)
000000  6840              LDR      r0,[r0,#4]
;;;115    {
;;;116    	return (WDGTx->WDT_ACCE_b.wdtLock & WDGT_AccessMask);
000002  f0000001          AND      r0,r0,#1
;;;117    }
000006  4770              BX       lr
;;;118    
                          ENDP


                          AREA ||i.WDGT_ITConfig||, CODE, READONLY, ALIGN=1

                  WDGT_ITConfig PROC
;;;89     
;;;90     void WDGT_ITConfig(WDT_TypeDef* WDGTx, FunctionalState NewFunction)
000000  2900              CMP      r1,#0
;;;91     {
;;;92     	if(NewFunction != DISABLE)
;;;93     	{
;;;94     		WDGTx->WDT_CON |= WDGT_INT_Enable;
;;;95     	}
;;;96     	else
;;;97     	{
;;;98     		WDGTx->WDT_CON &= WDGT_INT_DisableMask;
000002  6881              LDR      r1,[r0,#8]
000004  bf12              ITEE     NE                    ;94
000006  f0410110          ORRNE    r1,r1,#0x10           ;94
00000a  f64f72ef          MOVEQ    r2,#0xffef
00000e  4011              ANDEQ    r1,r1,r2
000010  6081              STR      r1,[r0,#8]            ;94
;;;99     	}
;;;100    }
000012  4770              BX       lr
;;;101    
                          ENDP


                          AREA ||i.WDGT_Init||, CODE, READONLY, ALIGN=1

                  WDGT_Init PROC
;;;35     
;;;36     void WDGT_Init(WDT_TypeDef* WDGTx)
000000  b410              PUSH     {r4}
;;;37     {
;;;38     	WDGTS_InitTypeDef WDGT_InitStructure;
;;;39     	
;;;40     	WDGT_InitStructure.WDGT_Count = 0xffff;								// (WDT_WIDTH) Max : 0xffff, Watchdog Count Period Register Determines the counting periodof WDT	
;;;41     	WDGT_InitStructure.WDGT_Prescaler = WDGT_CLOCK_PCLKDIVIDED128;		// (WDT_CON) Max : 7, Watchdog Clock Select Register
000002  2206              MOVS     r2,#6
000004  f8d0c004          LDR      r12,[r0,#4]
000008  f64f73ff          MOV      r3,#0xffff            ;40
;;;42     	WDGT_InitStructure.WDGT_ResetCount = 0x1;						 	// (WDT_RST_DUR) Max : 0xf, Watchdog Reset Width Register Determines the periodof the RESET
00000c  2101              MOVS     r1,#1
00000e  f01c0f01          TST      r12,#1
000012  d007              BEQ      |L9.36|
000014  f8d0c004          LDR      r12,[r0,#4]           ;37
000018  f64a44ce          MOV      r4,#0xacce            ;37
00001c  f3640c00          BFI      r12,r4,#0,#1          ;37
000020  f8c0c004          STR      r12,[r0,#4]           ;37
                  |L9.36|
000024  f8d0c00c          LDR      r12,[r0,#0xc]         ;37
000028  f3630c0f          BFI      r12,r3,#0,#16         ;37
00002c  f8c0c00c          STR      r12,[r0,#0xc]         ;37
000030  f8d0c010          LDR      r12,[r0,#0x10]        ;37
000034  f3610c0f          BFI      r12,r1,#0,#16         ;37
000038  f8c0c010          STR      r12,[r0,#0x10]        ;37
00003c  6943              LDR      r3,[r0,#0x14]         ;37
00003e  f3610303          BFI      r3,r1,#0,#4           ;37
000042  6143              STR      r3,[r0,#0x14]         ;37
000044  6881              LDR      r1,[r0,#8]            ;37
000046  f3620102          BFI      r1,r2,#0,#3           ;37
00004a  6081              STR      r1,[r0,#8]            ;37
00004c  6881              LDR      r1,[r0,#8]            ;37
00004e  f64f72df          MOV      r2,#0xffdf            ;37
000052  4011              ANDS     r1,r1,r2              ;37
000054  6081              STR      r1,[r0,#8]            ;37
000056  6881              LDR      r1,[r0,#8]            ;37
000058  f0410108          ORR      r1,r1,#8              ;37
00005c  6081              STR      r1,[r0,#8]            ;37
00005e  6881              LDR      r1,[r0,#8]            ;37
000060  f0410110          ORR      r1,r1,#0x10           ;37
000064  6081              STR      r1,[r0,#8]            ;37
;;;43     	WDGT_InitStructure.WDGT_ResetDelayCount = 0x1;					// (WDT_RST_DLY) Max : 0xffff, Watchdog Reset Delay Width Register Determines the delay periodbetween interrupt and Reset
;;;44     	WDGT_InitStructure.WDGT_RSTIRQChannelCmd = DISABLE;	
;;;45     	
;;;46     	if(WDGT_GetAccessRegStatus(WDGTx) == (uint16_t)(0x0001))
;;;47     		WDGT_SetLock(WDGTx);
;;;48     
;;;49     	WDGT_SetConfig(WDGTx, &WDGT_InitStructure);	
;;;50     	WDGT_Cmd(WDGTx, ENABLE);
;;;51     	WDGT_ITConfig(WDGTx, ENABLE); //not use interrupt	
;;;52     }
000066  bc10              POP      {r4}
000068  4770              BX       lr
;;;53     
                          ENDP


                          AREA ||i.WDGT_SetCLR||, CODE, READONLY, ALIGN=1

                  WDGT_SetCLR PROC
;;;83     
;;;84     void WDGT_SetCLR(WDT_TypeDef* WDGTx)
000000  6801              LDR      r1,[r0,#0]
;;;85     {
;;;86     	WDGTx->WDT_CLR_b.wdtClr = WDGT_Clear;
000002  f0410101          ORR      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;87     }
000008  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.WDGT_SetConfig||, CODE, READONLY, ALIGN=1

                  WDGT_SetConfig PROC
;;;61     
;;;62     void WDGT_SetConfig(WDT_TypeDef* WDGTx, WDGTS_InitTypeDef* WDGT_InitStructure)
000000  884b              LDRH     r3,[r1,#2]
;;;63     {	
;;;64     	WDGTx->WDT_WIDTH_b.wdtwidth = WDGT_InitStructure->WDGT_Count;
000002  68c2              LDR      r2,[r0,#0xc]
000004  f363020f          BFI      r2,r3,#0,#16
000008  60c2              STR      r2,[r0,#0xc]
;;;65     	WDGTx->WDT_RST_DLY_b.rstdlywidth = WDGT_InitStructure->WDGT_ResetDelayCount;
00000a  888b              LDRH     r3,[r1,#4]
00000c  6902              LDR      r2,[r0,#0x10]
00000e  f363020f          BFI      r2,r3,#0,#16
000012  6102              STR      r2,[r0,#0x10]
;;;66     	WDGTx->WDT_RST_DUR_b.rstdlywidth = WDGT_InitStructure->WDGT_ResetCount;
000014  798b              LDRB     r3,[r1,#6]
000016  6942              LDR      r2,[r0,#0x14]
000018  f3630203          BFI      r2,r3,#0,#4
00001c  6142              STR      r2,[r0,#0x14]
;;;67     	WDGTx->WDT_CON_b.wdtclksel = WDGT_InitStructure->WDGT_Prescaler;
00001e  780b              LDRB     r3,[r1,#0]
000020  6882              LDR      r2,[r0,#8]
000022  f3630202          BFI      r2,r3,#0,#3
000026  6082              STR      r2,[r0,#8]
;;;68     
;;;69     	if(WDGT_InitStructure->WDGT_RSTIRQChannelCmd != DISABLE)
000028  8909              LDRH     r1,[r1,#8]
00002a  2900              CMP      r1,#0
;;;70     	{
;;;71     		WDGTx->WDT_CON |= WDGT_RESET_Enable;
;;;72     	}
;;;73     	else
;;;74     	{
;;;75     		WDGTx->WDT_CON &= WDGT_RESET_DisableMask;
00002c  6881              LDR      r1,[r0,#8]
00002e  bf12              ITEE     NE                    ;71
000030  f0410120          ORRNE    r1,r1,#0x20           ;71
000034  f64f72df          MOVEQ    r2,#0xffdf
000038  4011              ANDEQ    r1,r1,r2
00003a  6081              STR      r1,[r0,#8]            ;71
;;;76     	}		
;;;77     }
00003c  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.WDGT_SetLock||, CODE, READONLY, ALIGN=1

                  WDGT_SetLock PROC
;;;78     
;;;79     void WDGT_SetLock(WDT_TypeDef* WDGTx)
000000  6841              LDR      r1,[r0,#4]
;;;80     {
;;;81     	WDGTx->WDT_ACCE_b.wdtLock = WDGT_ACCEDSS_KEY;
000002  f64a42ce          MOV      r2,#0xacce
000006  f3620100          BFI      r1,r2,#0,#1
00000a  6041              STR      r1,[r0,#4]
;;;82     }
00000c  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.WDT_InterruptHandler||, CODE, READONLY, ALIGN=2

                  WDT_InterruptHandler PROC
;;;118    
;;;119    void WDT_InterruptHandler(void)
000000  4818              LDR      r0,|L13.100|
;;;120    {
;;;121    	if(I2C->I2C_GLB_SR.tBit.IspMode == 1)
000002  6940              LDR      r0,[r0,#0x14]
000004  f0100f02          TST      r0,#2
000008  4817              LDR      r0,|L13.104|
00000a  d018              BEQ      |L13.62|
00000c  2300              MOVS     r3,#0                 ;120
00000e  f04f21e0          MOV      r1,#0xe000e000        ;120
000012  2201              MOVS     r2,#1                 ;120
000014  f8c12180          STR      r2,[r1,#0x180]        ;120
000018  f8c12280          STR      r2,[r1,#0x280]        ;120
00001c  6801              LDR      r1,[r0,#0]            ;120
00001e  f0410101          ORR      r1,r1,#1              ;120
000022  6001              STR      r1,[r0,#0]            ;120
000024  6841              LDR      r1,[r0,#4]            ;120
000026  f0110f01          TST      r1,#1                 ;120
00002a  d105              BNE      |L13.56|
00002c  6841              LDR      r1,[r0,#4]            ;120
00002e  f64a42ce          MOV      r2,#0xacce            ;120
000032  f3620100          BFI      r1,r2,#0,#1           ;120
000036  6041              STR      r1,[r0,#4]            ;120
                  |L13.56|
000038  480c              LDR      r0,|L13.108|
00003a  7003              STRB     r3,[r0,#0]            ;120
;;;122    	{
;;;123    		Hal_WDT_DeInit();
;;;124    	}
;;;125    	else
;;;126    	{
;;;127    		UWDT->WDT_CLR_b.wdtClr = 1;
;;;128    		UWDT->WDT_WIDTH_b.wdtwidth = 1;
;;;129    		UWDT->WDT_CON_b.wdtrsten = 1;
;;;130    		UWDT->WDT_CON_b.wdten = 1;
;;;131    	}
;;;132    }
00003c  4770              BX       lr
                  |L13.62|
00003e  6801              LDR      r1,[r0,#0]            ;127
000040  f0410101          ORR      r1,r1,#1              ;127
000044  6001              STR      r1,[r0,#0]            ;127
000046  68c1              LDR      r1,[r0,#0xc]          ;128
000048  f36f010f          BFC      r1,#0,#16             ;128
00004c  1c49              ADDS     r1,r1,#1              ;128
00004e  60c1              STR      r1,[r0,#0xc]          ;128
000050  6881              LDR      r1,[r0,#8]            ;129
000052  f0410120          ORR      r1,r1,#0x20           ;129
000056  6081              STR      r1,[r0,#8]            ;129
000058  6881              LDR      r1,[r0,#8]            ;130
00005a  f0410108          ORR      r1,r1,#8              ;130
00005e  6081              STR      r1,[r0,#8]            ;130
000060  4770              BX       lr
;;;133    
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
                          DCD      0x40002000
                  |L13.104|
                          DCD      0x40008000
                  |L13.108|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  wdt_init
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\wdgt\\wdgt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_wdgt_c_b61f395c____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_wdgt_c_b61f395c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_wdgt_c_b61f395c____REVSH|
#line 402
|__asm___6_wdgt_c_b61f395c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_wdgt_c_b61f395c____RRX|
#line 587
|__asm___6_wdgt_c_b61f395c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
