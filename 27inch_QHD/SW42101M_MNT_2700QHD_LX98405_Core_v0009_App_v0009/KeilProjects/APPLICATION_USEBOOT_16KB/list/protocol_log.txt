; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\protocol_log.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\protocol_log.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\protocol_log.crf ..\..\Protocol\protocol_log.c]
                          THUMB

                          AREA ||i.protocol_Log||, CODE, READONLY, ALIGN=2

                  protocol_Log PROC
;;;93     
;;;94     void protocol_Log(eLogType_t eLogType, const tLogDataFormat_t* _ptDataFormat, const void* _pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
;;;96         if( tProtocolLog.ptControl->eTrigger == LTR_TRIG )
000002  4c13              LDR      r4,|L1.80|
000004  6863              LDR      r3,[r4,#4]  ; tProtocolLog
000006  f893c004          LDRB     r12,[r3,#4]
00000a  f1bc0f01          CMP      r12,#1
;;;97         {
;;;98             if( tProtocolLog.ptControl->ulLogMask & _BV(eLogType) )
;;;99             {
;;;100            	tProtocolLog.ptControl->eTrigger = LTR_WAIT;
;;;101                //Set data format.
;;;102            	tProtocolLog.ptDataFormat = _ptDataFormat;
;;;103    
;;;104                //Set buffer address.
;;;105                vtProtocolBufferPointers.pGeneralBuffer = _pBuf;
;;;106    
;;;107    //#if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;108    //            HAL_SetTPICMuxEnControl(NO);
;;;109    //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;110    
;;;111    #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;112    			HAL_SetECLKOnOffControl(NO);
;;;113    #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;114                //Pend wait flag and wait for image type setting.
;;;115                tProtocolCtrl.getter->eReadyStatus = RS_LOG;
;;;116                while( tProtocolLog.ptControl->eTrigger == LTR_WAIT ) ;
;;;117    
;;;118    //#if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;119    //            HAL_SetTPICMuxEnControl(YES);
;;;120    //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;121    
;;;122    #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;123    			HAL_SetECLKOnOffControl(YES);
;;;124    #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;125            }
;;;126        }
;;;127    }
00000e  bf18              IT       NE
000010  bd70              POPNE    {r4-r6,pc}
000012  f8d3c000          LDR      r12,[r3,#0]           ;98
000016  2501              MOVS     r5,#1                 ;98
000018  fa05f000          LSL      r0,r5,r0              ;98
00001c  ea1c0f00          TST      r12,r0                ;98
000020  bf08              IT       EQ
000022  bd70              POPEQ    {r4-r6,pc}
000024  20ff              MOVS     r0,#0xff              ;100
000026  7118              STRB     r0,[r3,#4]            ;100
000028  480a              LDR      r0,|L1.84|
00002a  60a1              STR      r1,[r4,#8]            ;102  ; tProtocolLog
00002c  6002              STR      r2,[r0,#0]            ;105  ; vtProtocolBufferPointers
00002e  2000              MOVS     r0,#0                 ;112
000030  f7fffffe          BL       HAL_SetECLKOnOffControl
000034  4908              LDR      r1,|L1.88|
000036  2077              MOVS     r0,#0x77              ;115
000038  6809              LDR      r1,[r1,#0]            ;115  ; tProtocolCtrl
00003a  7008              STRB     r0,[r1,#0]            ;115
00003c  6860              LDR      r0,[r4,#4]            ;96
                  |L1.62|
00003e  7901              LDRB     r1,[r0,#4]            ;116
000040  29ff              CMP      r1,#0xff              ;116
000042  d0fc              BEQ      |L1.62|
000044  e8bd4070          POP      {r4-r6,lr}            ;123
000048  2001              MOVS     r0,#1                 ;123
00004a  f7ffbffe          B.W      HAL_SetECLKOnOffControl
;;;128    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      ||area_number.9||+0x14
                  |L1.84|
                          DCD      vtProtocolBufferPointers
                  |L1.88|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_LogImage||, CODE, READONLY, ALIGN=2

                  protocol_LogImage PROC
;;;57     
;;;58     void protocol_LogImage(eImageType_t _type, const tImageDataFmt_t* _ptDataFormat, uint8_t ucFinger_, tRect_t rect[ucFinger_], const void* _pBuf)
000000  b57f              PUSH     {r0-r6,lr}
;;;59     {
;;;60         if( tProtocolImage.ptCtrl->eImageType == _type )
000002  4c13              LDR      r4,|L2.80|
000004  f8ddc020          LDR      r12,[sp,#0x20]
000008  6862              LDR      r2,[r4,#4]  ; tProtocolImage
00000a  7815              LDRB     r5,[r2,#0]
00000c  4285              CMP      r5,r0
;;;61         {
;;;62         	tProtocolImage.ptCtrl->eImageType = IT_WAIT;
;;;63             //Set data format.
;;;64         	tProtocolImage.ptFormat = _ptDataFormat;
;;;65     
;;;66         	tProtocolImage.pucFinger_ = &ucFinger_;
;;;67         	tProtocolImage.ptRect = rect;
;;;68     
;;;69             //Set buffer address.
;;;70             vtProtocolBufferPointers.pGeneralBuffer = (void*)_pBuf;
;;;71     
;;;72     //#if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;73     //        HAL_SetTPICMuxEnControl(NO);
;;;74     //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;75     
;;;76     #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;77     		HAL_SetECLKOnOffControl(NO);
;;;78     #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;79     
;;;80             //Pend wait flag and wait for image type setting.
;;;81             tProtocolCtrl.getter->eReadyStatus = RS_IMAGE;
;;;82             while( tProtocolImage.ptCtrl->eImageType == IT_WAIT && tProtocolCtrl.setter->eMode == M_TOUCH_NORMAL ) ;
;;;83     
;;;84     //#if USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;85     //        HAL_SetTPICMuxEnControl(YES);
;;;86     //#endif /* USED_TPIC_MUXEN_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;87     
;;;88     #if USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD
;;;89     		HAL_SetECLKOnOffControl(YES);
;;;90     #endif /* USED_ECLK_ON_OFF_CONTROL_DISABLE_DATAREAD */
;;;91         }
;;;92     }
00000e  bf1c              ITT      NE
000010  b004              ADDNE    sp,sp,#0x10
000012  bd70              POPNE    {r4-r6,pc}
000014  20ff              MOVS     r0,#0xff              ;62
000016  7010              STRB     r0,[r2,#0]            ;62
000018  60a1              STR      r1,[r4,#8]            ;64  ; tProtocolImage
00001a  a802              ADD      r0,sp,#8              ;66
00001c  60e0              STR      r0,[r4,#0xc]          ;66  ; tProtocolImage
00001e  480d              LDR      r0,|L2.84|
000020  6123              STR      r3,[r4,#0x10]         ;67  ; tProtocolImage
000022  f8c0c000          STR      r12,[r0,#0]           ;70  ; vtProtocolBufferPointers
000026  2000              MOVS     r0,#0                 ;77
000028  f7fffffe          BL       HAL_SetECLKOnOffControl
00002c  490a              LDR      r1,|L2.88|
00002e  20aa              MOVS     r0,#0xaa              ;81
000030  680a              LDR      r2,[r1,#0]            ;81  ; tProtocolCtrl
000032  7010              STRB     r0,[r2,#0]            ;81
000034  6860              LDR      r0,[r4,#4]            ;60
000036  684a              LDR      r2,[r1,#4]            ;82
                  |L2.56|
000038  7801              LDRB     r1,[r0,#0]            ;82
00003a  29ff              CMP      r1,#0xff              ;82
00003c  bf04              ITT      EQ                    ;82
00003e  7811              LDRBEQ   r1,[r2,#0]            ;82
000040  2900              CMPEQ    r1,#0                 ;82
000042  d0f9              BEQ      |L2.56|
000044  f04f0001          MOV      r0,#1                 ;89
000048  f7fffffe          BL       HAL_SetECLKOnOffControl
00004c  b004              ADD      sp,sp,#0x10
00004e  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

                  |L2.80|
                          DCD      ||area_number.9||
                  |L2.84|
                          DCD      vtProtocolBufferPointers
                  |L2.88|
                          DCD      tProtocolCtrl

                          AREA ||i.protocol_log_get_mode||, CODE, READONLY, ALIGN=2

                  protocol_log_get_mode PROC
;;;128    
;;;129    uint32_t protocol_log_get_mode(void)
000000  4801              LDR      r0,|L3.8|
;;;130    {
;;;131    	return tProtocolLog.ptControl->eTrigger;
000002  6840              LDR      r0,[r0,#4]  ; tProtocolLog
000004  7900              LDRB     r0,[r0,#4]
;;;132    }
000006  4770              BX       lr
;;;133    
                          ENDP

                  |L3.8|
                          DCD      ||area_number.9||+0x14

                          AREA ||i.protocol_log_set_mode||, CODE, READONLY, ALIGN=2

                  protocol_log_set_mode PROC
;;;133    
;;;134    void protocol_log_set_mode(eLogTriggerType_t _m)
000000  4901              LDR      r1,|L4.8|
;;;135    {
;;;136    	tProtocolLog.ptControl->eTrigger = _m;
000002  6849              LDR      r1,[r1,#4]  ; tProtocolLog
000004  7108              STRB     r0,[r1,#4]
;;;137    }
000006  4770              BX       lr
                          ENDP

                  |L4.8|
                          DCD      ||area_number.9||+0x14

                          AREA ||.data||, DATA, ALIGN=0

                  ktProtocolImageInfo
000000  20000001          DCWU     0x2000,0x0001

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  ktProtocolImageControl
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.data||
                  tProtocolImage
                          DCDU     ktProtocolImageInfo
                          DCDU     ktProtocolImageControl
                          DCDU     0x00000000
                          DCDU     0x00000000
                          DCDU     0x00000000
                  tProtocolLog
                          DCDU     ktProtocolLogInfo
                          DCDU     ktProtocolLogControl
                          DCDU     0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  ktProtocolLogInfo
000000  20000001          DCWU     0x2000,0x0001

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  ktProtocolLogControl
                          DCDU     0x00000001
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Protocol\\protocol_log.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___14_protocol_log_c_c2a5ecd9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____REVSH|
#line 402
|__asm___14_protocol_log_c_c2a5ecd9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_protocol_log_c_c2a5ecd9____RRX|
#line 587
|__asm___14_protocol_log_c_c2a5ecd9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
