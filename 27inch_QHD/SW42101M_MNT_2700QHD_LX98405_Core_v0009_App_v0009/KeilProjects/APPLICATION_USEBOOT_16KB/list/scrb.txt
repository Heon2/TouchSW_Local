; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\scrb.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\scrb.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\scrb.crf ..\..\Hal\scrb\scrb.c]
                          THUMB

                          AREA ||i.SCRB_Initialize||, CODE, READONLY, ALIGN=2

                  SCRB_Initialize PROC
;;;35     
;;;36     void SCRB_Initialize(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;37     {
;;;38     	// 1. LDO & OSC Calibration
;;;39     	SCRB->LGD_LDO_FC.ulBulk = (((uint8_t)INFO->CALIB_LDO_b.CAL_SEL)
000004  f44f3000          MOV      r0,#0x20000
000008  b082              SUB      sp,sp,#8              ;37
00000a  6841              LDR      r1,[r0,#4]
00000c  0344              LSLS     r4,r0,#13
00000e  f001010f          AND      r1,r1,#0xf
000012  f04171fd          ORR      r1,r1,#0x1fa0000
000016  f0416180          ORR      r1,r1,#0x4000000
00001a  65a1              STR      r1,[r4,#0x58]
;;;40     								| SCB_VECTKEY);
;;;41     	SCRB->LGD_OSC_FC.ulBulk = (((uint8_t)INFO->CALIB_OSC_b.R_FINE) | (((uint8_t)INFO->CALIB_OSC_b.R_COARSE) << 4)
00001c  6801              LDR      r1,[r0,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f3c11103          UBFX     r1,r1,#4,#4
000024  f361101f          BFI      r0,r1,#4,#28
000028  f04070fd          ORR      r0,r0,#0x1fa0000
00002c  f0406080          ORR      r0,r0,#0x4000000
000030  6560              STR      r0,[r4,#0x54]
;;;42     								| SCB_VECTKEY);
;;;43     
;;;44     	SCRB->STCALIB.tBit.NOREF = 0x0;  // 0:-, 1:NoRef
000032  69a0              LDR      r0,[r4,#0x18]
000034  f0207000          BIC      r0,r0,#0x2000000
000038  61a0              STR      r0,[r4,#0x18]
;;;45     	SCRB->STCALIB.tBit.SYSTICK_SRC = 0x2;  // 0:FCLK/8, 1:40kHz, 2:12MHz, 3:-
00003a  69a0              LDR      r0,[r4,#0x18]
00003c  f0206040          BIC      r0,r0,#0xc000000
000040  f1006000          ADD      r0,r0,#0x8000000
000044  61a0              STR      r0,[r4,#0x18]
;;;46     
;;;47     	tLGD_OSC_UC_t tLGD_OSC_UC;
;;;48     	tLGD_OSC_UC.ulBulk = SCRB->LGD_OSC_UC.ulBulk;
000046  6d20              LDR      r0,[r4,#0x50]
000048  9000              STR      r0,[sp,#0]
;;;49     	tLGD_OSC_UC.tBit.OSC_PDB_12M = 0; // 0 : External, 1 : Internal �궡遺� �겢�윮 �궗�슜�떆 USB媛� �룞�옉�쓣 �븯吏� �븡�뒗�떎. Default瑜� �쇅遺� �겢�윮�쑝濡� �꽕�젙
00004a  9800              LDR      r0,[sp,#0]
00004c  f0200001          BIC      r0,r0,#1
000050  9000              STR      r0,[sp,#0]
;;;50     	tLGD_OSC_UC.tBit.OSC_PDB_40K = 0;
000052  9800              LDR      r0,[sp,#0]
000054  f0200002          BIC      r0,r0,#2
000058  9000              STR      r0,[sp,#0]
;;;51     	tLGD_OSC_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
00005a  9800              LDR      r0,[sp,#0]
00005c  b280              UXTH     r0,r0
00005e  f1006080          ADD      r0,r0,#0x4000000
000062  f10070fd          ADD      r0,r0,#0x1fa0000
000066  9000              STR      r0,[sp,#0]
;;;52     	SCRB->LGD_OSC_UC.ulBulk = tLGD_OSC_UC.ulBulk;
000068  9800              LDR      r0,[sp,#0]
00006a  6520              STR      r0,[r4,#0x50]
;;;53     #ifdef MODE_I2C
;;;54     	tCK_ENA_RUN0_t tCK_ENA_RUN0;
;;;55     	tCK_ENA_RUN0.ulBulk = SCRB->CK_ENA_RUN0.ulBulk;
;;;56     	tCK_ENA_RUN0.tBit.r_USB_CLK_ENA = 0;
;;;57     	tCK_ENA_RUN0.tBit.r_WDT_CLK_ENA = 0;
;;;58     	tCK_ENA_RUN0.tBit.r_TIM_CLK_ENA = 1;
;;;59     	tCK_ENA_RUN0.tBit.r_LFDTX_CLK_ENA = 1;
;;;60     	tCK_ENA_RUN0.tBit.r_TSPI_CLK_ENA = 0;
;;;61     	tCK_ENA_RUN0.tBit.r_DSPA_CLK_ENA = 0;
;;;62     	tCK_ENA_RUN0.tBit.r_DSPB_CLK_ENA = 0;
;;;63     	tCK_ENA_RUN0.tBit.r_SRAM1_CLK_ENA = 1;
;;;64     	tCK_ENA_RUN0.tBit.r_SRAM2_CLK_ENA = 1;
;;;65     	tCK_ENA_RUN0.tBit.r_SRAM3_CLK_ENA = 1;
;;;66     	tCK_ENA_RUN0.tBit.r_DMAC_CLK_ENA = 0;
;;;67     	tCK_ENA_RUN0.tBit.r_I2C_CLK_ENA = 1;
;;;68     	tCK_ENA_RUN0.tBit.r_FLITF_CLK_ENA = 1;
;;;69     	tCK_ENA_RUN0.tBit.r_GPIO_CLK_ENA = 1;
;;;70     	tCK_ENA_RUN0.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;71     	SCRB->CK_ENA_RUN0.ulBulk = tCK_ENA_RUN0.ulBulk;
;;;72     
;;;73     	tCK_ENA_RUN1_t tCK_ENA_RUN1;
;;;74     	tCK_ENA_RUN1.ulBulk = SCRB->CK_ENA_RUN1.ulBulk;
;;;75     	tCK_ENA_RUN1.tBit.r_MSPI01_CLK_ENA = 1;
;;;76     	tCK_ENA_RUN1.tBit.r_MSPI23_CLK_ENA = 1;
;;;77     	tCK_ENA_RUN1.tBit.r_MSPI45_CLK_ENA = 1;
;;;78     //	tCK_ENA_RUN1.tBit.r_SIF_CLK_ENA = 0;
;;;79     //	tCK_ENA_RUN1.tBit.r_SFL_CLK_ENA = 0;
;;;80     	tCK_ENA_RUN1.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;81     	SCRB->CK_ENA_RUN1.ulBulk = tCK_ENA_RUN1.ulBulk;
;;;82     #else /* MODE_I2C */
;;;83     	tCK_ENA_RUN0_t tCK_ENA_RUN0;
;;;84     	tCK_ENA_RUN0.ulBulk = SCRB->CK_ENA_RUN0.ulBulk;
00006c  69e0              LDR      r0,[r4,#0x1c]
00006e  9000              STR      r0,[sp,#0]
;;;85     	tCK_ENA_RUN0.tBit.r_USB_CLK_ENA = 1;
000070  9800              LDR      r0,[sp,#0]
000072  f0400001          ORR      r0,r0,#1
000076  9000              STR      r0,[sp,#0]
;;;86     	tCK_ENA_RUN0.tBit.r_WDT_CLK_ENA = 0;
000078  9800              LDR      r0,[sp,#0]
00007a  f0200002          BIC      r0,r0,#2
00007e  9000              STR      r0,[sp,#0]
;;;87     	tCK_ENA_RUN0.tBit.r_TIM_CLK_ENA = 1;
000080  9800              LDR      r0,[sp,#0]
000082  f0400004          ORR      r0,r0,#4
000086  9000              STR      r0,[sp,#0]
;;;88     	tCK_ENA_RUN0.tBit.r_LFDTX_CLK_ENA = 1;
000088  9800              LDR      r0,[sp,#0]
00008a  f0400008          ORR      r0,r0,#8
00008e  9000              STR      r0,[sp,#0]
;;;89     	tCK_ENA_RUN0.tBit.r_TSPI_CLK_ENA = 0;
000090  9800              LDR      r0,[sp,#0]
000092  f0200010          BIC      r0,r0,#0x10
000096  9000              STR      r0,[sp,#0]
;;;90     	tCK_ENA_RUN0.tBit.r_DSPA_CLK_ENA = 0;
000098  9800              LDR      r0,[sp,#0]
00009a  f0200020          BIC      r0,r0,#0x20
00009e  9000              STR      r0,[sp,#0]
;;;91     	tCK_ENA_RUN0.tBit.r_DSPB_CLK_ENA = 0;
0000a0  9800              LDR      r0,[sp,#0]
0000a2  f0200040          BIC      r0,r0,#0x40
0000a6  9000              STR      r0,[sp,#0]
;;;92     	tCK_ENA_RUN0.tBit.r_SRAM1_CLK_ENA = 1;
0000a8  9800              LDR      r0,[sp,#0]
0000aa  f0400080          ORR      r0,r0,#0x80
0000ae  9000              STR      r0,[sp,#0]
;;;93     	tCK_ENA_RUN0.tBit.r_SRAM2_CLK_ENA = 1;
0000b0  9800              LDR      r0,[sp,#0]
0000b2  f4407080          ORR      r0,r0,#0x100
0000b6  9000              STR      r0,[sp,#0]
;;;94     	tCK_ENA_RUN0.tBit.r_SRAM3_CLK_ENA = 1;
0000b8  9800              LDR      r0,[sp,#0]
0000ba  f4407000          ORR      r0,r0,#0x200
0000be  9000              STR      r0,[sp,#0]
;;;95     	tCK_ENA_RUN0.tBit.r_DMAC_CLK_ENA = 0;
0000c0  9800              LDR      r0,[sp,#0]
0000c2  f4206080          BIC      r0,r0,#0x400
0000c6  9000              STR      r0,[sp,#0]
;;;96     	tCK_ENA_RUN0.tBit.r_I2C_CLK_ENA = 1;
0000c8  9800              LDR      r0,[sp,#0]
0000ca  f4406000          ORR      r0,r0,#0x800
0000ce  9000              STR      r0,[sp,#0]
;;;97     	tCK_ENA_RUN0.tBit.r_FLITF_CLK_ENA = 1;
0000d0  9800              LDR      r0,[sp,#0]
0000d2  f4405080          ORR      r0,r0,#0x1000
0000d6  9000              STR      r0,[sp,#0]
;;;98     	tCK_ENA_RUN0.tBit.r_GPIO_CLK_ENA = 1;
0000d8  9800              LDR      r0,[sp,#0]
0000da  f4405000          ORR      r0,r0,#0x2000
0000de  9000              STR      r0,[sp,#0]
;;;99     	tCK_ENA_RUN0.tBit._VECTKEY = SCB_VECTKEY_VALUE;
0000e0  9800              LDR      r0,[sp,#0]
0000e2  b280              UXTH     r0,r0
0000e4  f1006080          ADD      r0,r0,#0x4000000
0000e8  f10070fd          ADD      r0,r0,#0x1fa0000
0000ec  9000              STR      r0,[sp,#0]
;;;100    	SCRB->CK_ENA_RUN0.ulBulk = tCK_ENA_RUN0.ulBulk;
0000ee  9800              LDR      r0,[sp,#0]
0000f0  61e0              STR      r0,[r4,#0x1c]
;;;101    
;;;102    	tCK_ENA_RUN1_t tCK_ENA_RUN1;
;;;103    	tCK_ENA_RUN1.ulBulk = SCRB->CK_ENA_RUN1.ulBulk;
0000f2  6a20              LDR      r0,[r4,#0x20]
0000f4  9000              STR      r0,[sp,#0]
;;;104    	tCK_ENA_RUN1.tBit.r_MSPI01_CLK_ENA = 1;
0000f6  9800              LDR      r0,[sp,#0]
0000f8  f0400001          ORR      r0,r0,#1
0000fc  9000              STR      r0,[sp,#0]
;;;105    	tCK_ENA_RUN1.tBit.r_MSPI23_CLK_ENA = 1;
0000fe  9800              LDR      r0,[sp,#0]
000100  f0400002          ORR      r0,r0,#2
000104  9000              STR      r0,[sp,#0]
;;;106    	tCK_ENA_RUN1.tBit.r_MSPI45_CLK_ENA = 1;
000106  9800              LDR      r0,[sp,#0]
000108  f0400004          ORR      r0,r0,#4
00010c  9000              STR      r0,[sp,#0]
;;;107    //	tCK_ENA_RUN1.tBit.r_SIF_CLK_ENA = 0;
;;;108    //	tCK_ENA_RUN1.tBit.r_SFL_CLK_ENA = 0;
;;;109    	tCK_ENA_RUN1.tBit._VECTKEY = SCB_VECTKEY_VALUE;
00010e  9800              LDR      r0,[sp,#0]
000110  b280              UXTH     r0,r0
000112  f1006080          ADD      r0,r0,#0x4000000
000116  f10070fd          ADD      r0,r0,#0x1fa0000
00011a  9000              STR      r0,[sp,#0]
;;;110    	SCRB->CK_ENA_RUN1.ulBulk = tCK_ENA_RUN1.ulBulk;
00011c  9800              LDR      r0,[sp,#0]
00011e  6220              STR      r0,[r4,#0x20]
;;;111    #endif /* MODE_I2C */
;;;112    
;;;113    	tCLK_SRC_SEL_t tCLK_SRC_SEL;
;;;114    	tCLK_SRC_SEL.ulBulk = SCRB->CLK_SRC_SEL.ulBulk;
000120  6b60              LDR      r0,[r4,#0x34]
000122  9000              STR      r0,[sp,#0]
;;;115    	/*
;;;116    	 * 0 : 12MHz(Internal or External OSC)
;;;117    	 * 1 : PLL Out Clock
;;;118    	 * 2,3 : 40KHz (Internal OSC)
;;;119    	 */
;;;120    	tCLK_SRC_SEL.tBit.CCLK_SEL = 0; // System Clock
000124  9800              LDR      r0,[sp,#0]
000126  f0200003          BIC      r0,r0,#3
00012a  9000              STR      r0,[sp,#0]
;;;121    	tCLK_SRC_SEL.tBit.WDCLK_SEL = 2; // PCLK
00012c  9800              LDR      r0,[sp,#0]
00012e  f020000c          BIC      r0,r0,#0xc
000132  3008              ADDS     r0,r0,#8
000134  9000              STR      r0,[sp,#0]
;;;122    	tCLK_SRC_SEL.tBit.TIMCLK_SEL = 0;
000136  9800              LDR      r0,[sp,#0]
000138  f0200030          BIC      r0,r0,#0x30
00013c  9000              STR      r0,[sp,#0]
;;;123    	tCLK_SRC_SEL.tBit.SSCGOUT_SEL = 0;
00013e  9800              LDR      r0,[sp,#0]
000140  f0200040          BIC      r0,r0,#0x40
000144  9000              STR      r0,[sp,#0]
;;;124    	tCLK_SRC_SEL.tBit.SSCGOUT2X_SEL = 0;//1;
000146  9800              LDR      r0,[sp,#0]
000148  f0200080          BIC      r0,r0,#0x80
00014c  9000              STR      r0,[sp,#0]
;;;125    	tCLK_SRC_SEL.tBit.TOUCHCLK_SEL = 0;
00014e  9800              LDR      r0,[sp,#0]
000150  f4207040          BIC      r0,r0,#0x300
000154  9000              STR      r0,[sp,#0]
;;;126    	tCLK_SRC_SEL.tBit.PLLOUT_SEL = 0;
000156  9800              LDR      r0,[sp,#0]
000158  f42050e0          BIC      r0,r0,#0x1c00
00015c  9000              STR      r0,[sp,#0]
;;;127    	tCLK_SRC_SEL.tBit.SSCGIN_SEL = 0;
00015e  9800              LDR      r0,[sp,#0]
000160  f4205000          BIC      r0,r0,#0x2000
000164  9000              STR      r0,[sp,#0]
;;;128    	tCLK_SRC_SEL.tBit._VECTKEY = SCB_VECTKEY_VALUE;
000166  9800              LDR      r0,[sp,#0]
000168  b280              UXTH     r0,r0
00016a  f1006080          ADD      r0,r0,#0x4000000
00016e  f10070fd          ADD      r0,r0,#0x1fa0000
000172  9000              STR      r0,[sp,#0]
;;;129    	SCRB->CLK_SRC_SEL.ulBulk = tCLK_SRC_SEL.ulBulk;
000174  9800              LDR      r0,[sp,#0]
000176  6360              STR      r0,[r4,#0x34]
;;;130    
;;;131    #if USED_PLL_LOCKED_DEFENSE_CODE
;;;132    	tUMC_PLL_UC_t tUMC_PLL_UC;
;;;133    	uint8_t ucPLL_Locked_Retry_Cnt = 0;
;;;134    	uint8_t ucPLL_Locked_Retry_Max = 5;
;;;135    	uint32_t ulPLL_Locked_Start = 0;
;;;136    	uint32_t ulPLL_Locked_TimeOut = 500;
;;;137    
;;;138    	do {
;;;139    		/*
;;;140    		 * PLL 異쒕젰 援ы븯�뒗 怨듭떇
;;;141    		 *                       Fref X (Feedback divider number)
;;;142    		 * Fout = --------------------------------------------------------
;;;143    		 *          (Reference divider number) X (Output divider number)
;;;144    		 */
;;;145    		tUMC_PLL_UC.ulBulk = SCRB->UMC_PLL_UC.ulBulk;
;;;146    		tUMC_PLL_UC.tBit.PLL_STBY_I = 1;
;;;147    		// 90MHz
;;;148    #if USED_PLL_OUT_CLK_CONFIG
;;;149    	#if (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) // MSPI 16M
;;;150    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;151    		tUMC_PLL_UC.tBit.FBDIV = 16;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;152    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;153    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_90MHz) // MSPI 15M
;;;154    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;155    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;156    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;157    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_45MHz) // MSPI 11.3M
;;;158    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;159    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;160    		tUMC_PLL_UC.tBit.OUTDIV = 2;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;161    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_37p5MHz) // MSPI 9.4M
;;;162    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;163    		tUMC_PLL_UC.tBit.FBDIV = 25;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;164    		tUMC_PLL_UC.tBit.OUTDIV = 3;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;165    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_31p5MHz) // MSPI 7.9M
;;;166    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;167    		tUMC_PLL_UC.tBit.FBDIV = 21;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;168    		tUMC_PLL_UC.tBit.OUTDIV = 3;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;169    	#else /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */ // MSPI 15M
;;;170    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;171    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;172    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;173    	#endif /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */
;;;174    #else /* USED_PLL_OUT_CLK_CONFIG */
;;;175    #if (TMCU_MAIN_TRIM_CLOCK_SPEED == 90)
;;;176    		// 90MHz
;;;177    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;178    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;179    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;180    
;;;181    #elif(TMCU_MAIN_TRIM_CLOCK_SPEED == 72)
;;;182    		// 72MHz
;;;183    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;184    		tUMC_PLL_UC.tBit.FBDIV = 24;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;185    		tUMC_PLL_UC.tBit.OUTDIV = 2;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;186    #endif
;;;187    #endif /* USED_PLL_OUT_CLK_CONFIG */
;;;188    		tUMC_PLL_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;189    		SCRB->UMC_PLL_UC.ulBulk = tUMC_PLL_UC.ulBulk;
;;;190    
;;;191    		delay_usec(1);
;;;192    
;;;193    		tUMC_PLL_UC.tBit.PLL_STBY_I = 0;
;;;194    		tUMC_PLL_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;195    		SCRB->UMC_PLL_UC.ulBulk = tUMC_PLL_UC.ulBulk;
;;;196    
;;;197    		if(ucPLL_Locked_Retry_Cnt < ucPLL_Locked_Retry_Max)
;;;198    		{
;;;199    			ucPLL_Locked_Retry_Cnt++;
;;;200    			ulPLL_Locked_Start = getSysTick();
;;;201    			do {
;;;202    				if(SCRB->UMC_PLL_IS.tBit.PLL_LOCKED_O == 1)
;;;203    				{
;;;204    					break;
;;;205    				}
;;;206    			}while (getUSfromTick(getElapsedSYSTICK(ulPLL_Locked_Start)) < ulPLL_Locked_TimeOut);
000178  4f83              LDR      r7,|L1.904|
00017a  2500              MOVS     r5,#0                 ;133
00017c  f04f0805          MOV      r8,#5                 ;134
000180  f44f76fa          MOV      r6,#0x1f4             ;136
000184  f04f2ae0          MOV      r10,#0xe000e000       ;200
                  |L1.392|
000188  6c20              LDR      r0,[r4,#0x40]         ;145
00018a  9000              STR      r0,[sp,#0]            ;145
00018c  9800              LDR      r0,[sp,#0]            ;146
00018e  f0400001          ORR      r0,r0,#1              ;146
000192  9000              STR      r0,[sp,#0]            ;146
000194  9800              LDR      r0,[sp,#0]            ;183
000196  f020000e          BIC      r0,r0,#0xe            ;183
00019a  9000              STR      r0,[sp,#0]            ;183
00019c  9800              LDR      r0,[sp,#0]            ;184
00019e  f420707c          BIC      r0,r0,#0x3f0          ;184
0001a2  f50070c0          ADD      r0,r0,#0x180          ;184
0001a6  9000              STR      r0,[sp,#0]            ;184
0001a8  9800              LDR      r0,[sp,#0]            ;185
0001aa  f4206040          BIC      r0,r0,#0xc00          ;185
0001ae  f5006000          ADD      r0,r0,#0x800          ;185
0001b2  9000              STR      r0,[sp,#0]            ;185
0001b4  9800              LDR      r0,[sp,#0]            ;188
0001b6  b280              UXTH     r0,r0                 ;188
0001b8  f1006080          ADD      r0,r0,#0x4000000      ;188
0001bc  f10070fd          ADD      r0,r0,#0x1fa0000      ;188
0001c0  9000              STR      r0,[sp,#0]            ;188
0001c2  9800              LDR      r0,[sp,#0]            ;189
0001c4  6420              STR      r0,[r4,#0x40]         ;189
0001c6  2001              MOVS     r0,#1                 ;191
0001c8  f7fffffe          BL       delay_us
0001cc  9800              LDR      r0,[sp,#0]            ;193
0001ce  f0200001          BIC      r0,r0,#1              ;193
0001d2  9000              STR      r0,[sp,#0]            ;193
0001d4  9800              LDR      r0,[sp,#0]            ;194
0001d6  b280              UXTH     r0,r0                 ;194
0001d8  f1006080          ADD      r0,r0,#0x4000000      ;194
0001dc  f10070fd          ADD      r0,r0,#0x1fa0000      ;194
0001e0  9000              STR      r0,[sp,#0]            ;194
0001e2  9800              LDR      r0,[sp,#0]            ;195
0001e4  6420              STR      r0,[r4,#0x40]         ;195
0001e6  4545              CMP      r5,r8                 ;197
0001e8  f08080ca          BCS.W    |L1.896|
0001ec  1c68              ADDS     r0,r5,#1              ;199
0001ee  b2c5              UXTB     r5,r0                 ;199
0001f0  f8da0018          LDR      r0,[r10,#0x18]        ;200
0001f4  fa1ff980          UXTH     r9,r0                 ;200
                  |L1.504|
0001f8  6ce0              LDR      r0,[r4,#0x4c]         ;202
0001fa  f0100f08          TST      r0,#8                 ;202
0001fe  d107              BNE      |L1.528|
000200  4648              MOV      r0,r9
000202  f7fffffe          BL       getElapsedSYSTICK
000206  6839              LDR      r1,[r7,#0]  ; _core_clock_
000208  fbb0f0f1          UDIV     r0,r0,r1
00020c  42b0              CMP      r0,r6
00020e  d3f3              BCC      |L1.504|
                  |L1.528|
;;;207    		}
;;;208    		else
;;;209    		{
;;;210    			Hal_WDT_Init();
;;;211    			while(1);
;;;212    		}
;;;213    
;;;214    	} while(SCRB->UMC_PLL_IS.tBit.PLL_LOCKED_O == 0);
000210  6ce0              LDR      r0,[r4,#0x4c]
000212  f0100f08          TST      r0,#8
000216  d0b7              BEQ      |L1.392|
;;;215    
;;;216    #else /* USED_PLL_LOCKED_DEFENSE_CODE */
;;;217    	/*
;;;218    	 * PLL 異쒕젰 援ы븯�뒗 怨듭떇
;;;219    	 *                       Fref X (Feedback divider number)
;;;220    	 * Fout = --------------------------------------------------------
;;;221    	 *          (Reference divider number) X (Output divider number)
;;;222    	 */
;;;223    	tUMC_PLL_UC_t tUMC_PLL_UC;
;;;224    	tUMC_PLL_UC.ulBulk = SCRB->UMC_PLL_UC.ulBulk;
;;;225    	tUMC_PLL_UC.tBit.PLL_STBY_I = 1;
;;;226    
;;;227    #if USED_PLL_OUT_CLK_CONFIG
;;;228    	#if (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) // MSPI 16M
;;;229    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;230    		tUMC_PLL_UC.tBit.FBDIV = 16;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;231    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;232    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_90MHz) // MSPI 15M
;;;233    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;234    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;235    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;236    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_45MHz) // MSPI 11.3M
;;;237    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;238    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;239    		tUMC_PLL_UC.tBit.OUTDIV = 2;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;240    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_37p5MHz) // MSPI 9.4M
;;;241    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;242    		tUMC_PLL_UC.tBit.FBDIV = 25;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;243    		tUMC_PLL_UC.tBit.OUTDIV = 3;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;244    	#elif (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_31p5MHz) // MSPI 7.9M
;;;245    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;246    		tUMC_PLL_UC.tBit.FBDIV = 21;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;247    		tUMC_PLL_UC.tBit.OUTDIV = 3;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;248    	#else /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */ // MSPI 15M
;;;249    		tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;250    		tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;251    		tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;252    	#endif /* (PLL_OUT_CLOCK_SPEED == PLL_OUT_CLOCK_96MHz) */
;;;253    #else /* USED_PLL_OUT_CLK_CONFIG */
;;;254    	// 90MHz
;;;255    	tUMC_PLL_UC.tBit.REFDIV = 0;	// Reference divider number = (REFDIV + 1) : (1 ~ 8)
;;;256    	tUMC_PLL_UC.tBit.FBDIV = 15;	// Feedback divider number = (FBDIV) : (5 ~ 50)
;;;257    	tUMC_PLL_UC.tBit.OUTDIV = 1;//1;	// Output divider number = (2^OUTDIV) : (1, 2, 4, 8)
;;;258    #endif /* USED_PLL_OUT_CLK_CONFIG */
;;;259    	tUMC_PLL_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;260    	SCRB->UMC_PLL_UC.ulBulk = tUMC_PLL_UC.ulBulk;
;;;261    //	GPIO->tGPIO_DIR_1.tBit.GPB10 = 1;
;;;262    	delay_usec(1); // PLL諛� Clock Divider�꽕�젙 �쟾�씠湲� �븣臾몄뿉.. �뒓由щ떎.. ���왂 1/10�젙�룄..
;;;263    	tUMC_PLL_UC.tBit.PLL_STBY_I = 0;
;;;264    	tUMC_PLL_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
;;;265    	SCRB->UMC_PLL_UC.ulBulk = tUMC_PLL_UC.ulBulk;
;;;266    #endif /* USED_PLL_LOCKED_DEFENSE_CODE */
;;;267    
;;;268    #ifdef MODE_I2C
;;;269    	tUSB_PHY_FC_t tUSB_PHY_FC;
;;;270    	tUSB_PHY_FC.ulBulk = SCRB->USB_PHY_FC.ulBulk;
;;;271    	tUSB_PHY_FC.tBit.PLLALIV = 0;
;;;272    	tUSB_PHY_FC.tBit.PONRST = 0;
;;;273    	SCRB->USB_PHY_FC.ulBulk = tUSB_PHY_FC.ulBulk;
;;;274    #else /* MODE_I2C */
;;;275    	tUSB_PHY_FC_t tUSB_PHY_FC;
;;;276    	tUSB_PHY_FC.ulBulk = SCRB->USB_PHY_FC.ulBulk;
000218  6f20              LDR      r0,[r4,#0x70]
00021a  9000              STR      r0,[sp,#0]
;;;277    	tUSB_PHY_FC.tBit.PONRST = 1;
00021c  9800              LDR      r0,[sp,#0]
00021e  f0400010          ORR      r0,r0,#0x10
000222  9000              STR      r0,[sp,#0]
;;;278    	SCRB->USB_PHY_FC.ulBulk = tUSB_PHY_FC.ulBulk;
000224  9800              LDR      r0,[sp,#0]
000226  6720              STR      r0,[r4,#0x70]
;;;279    #endif /* MODE_I2C */
;;;280    
;;;281    	__NOP();
000228  bf00              NOP      
;;;282    	__NOP();
00022a  bf00              NOP      
;;;283    	__NOP();
00022c  bf00              NOP      
;;;284    	__NOP();
00022e  bf00              NOP      
;;;285    	__NOP();
000230  bf00              NOP      
;;;286    
;;;287    	tRST_CTRL_t tRST_CTRL;
;;;288    	tRST_CTRL.ulBulk = SCRB->RST_CTRL.ulBulk;
000232  6ae0              LDR      r0,[r4,#0x2c]
000234  9000              STR      r0,[sp,#0]
;;;289    	tRST_CTRL.tBit.USB_RSTN_CTRL = 0;
000236  9800              LDR      r0,[sp,#0]
000238  f0200001          BIC      r0,r0,#1
00023c  9000              STR      r0,[sp,#0]
;;;290    	tRST_CTRL.tBit._VECTKEY = SCB_VECTKEY_VALUE;
00023e  9800              LDR      r0,[sp,#0]
000240  b280              UXTH     r0,r0
000242  f1006080          ADD      r0,r0,#0x4000000
000246  f10070fd          ADD      r0,r0,#0x1fa0000
00024a  9000              STR      r0,[sp,#0]
;;;291    	SCRB->RST_CTRL.ulBulk = tRST_CTRL.ulBulk;
00024c  9800              LDR      r0,[sp,#0]
00024e  62e0              STR      r0,[r4,#0x2c]
;;;292    
;;;293    	__NOP();
000250  bf00              NOP      
;;;294    	__NOP();
000252  bf00              NOP      
;;;295    	__NOP();
000254  bf00              NOP      
;;;296    	__NOP();
000256  bf00              NOP      
;;;297    	__NOP();
000258  bf00              NOP      
;;;298    
;;;299    	tRST_CTRL.tBit.USB_RSTN_CTRL = 1;
00025a  9800              LDR      r0,[sp,#0]
00025c  f0400001          ORR      r0,r0,#1
000260  9000              STR      r0,[sp,#0]
;;;300    	tRST_CTRL.tBit._VECTKEY = SCB_VECTKEY_VALUE;
000262  9800              LDR      r0,[sp,#0]
000264  b280              UXTH     r0,r0
000266  f1006080          ADD      r0,r0,#0x4000000
00026a  f10070fd          ADD      r0,r0,#0x1fa0000
00026e  9000              STR      r0,[sp,#0]
;;;301    	SCRB->RST_CTRL.ulBulk = tRST_CTRL.ulBulk;
000270  9800              LDR      r0,[sp,#0]
000272  62e0              STR      r0,[r4,#0x2c]
;;;302    
;;;303    #if !USED_PLL_LOCKED_DEFENSE_CODE
;;;304    	while (SCRB->UMC_PLL_IS.tBit.PLL_LOCKED_O == 0)
;;;305    	{
;;;306    	};
;;;307    #endif /* !USED_PLL_LOCKED_DEFENSE_CODE */
;;;308    
;;;309    	//FLITF->FACR = 6;	// 120MHz
;;;310    	//FLITF->FACR = 5;	// 100MHz
;;;311    	FLITF->FACR = 5;	// 100MHz
000274  4945              LDR      r1,|L1.908|
000276  2005              MOVS     r0,#5
;;;312    
;;;313    	tCLK_DIV_t tCLK_DIV;
;;;314    	tCLK_DIV.ulBulk = SCRB->CLK_DIV.ulBulk;
000278  6008              STR      r0,[r1,#0]
00027a  6ba0              LDR      r0,[r4,#0x38]
00027c  9000              STR      r0,[sp,#0]
;;;315    	tCLK_DIV.tBit.HCLK_DIV = 0;
00027e  9800              LDR      r0,[sp,#0]
000280  f0200007          BIC      r0,r0,#7
000284  9000              STR      r0,[sp,#0]
;;;316    	tCLK_DIV.tBit.PCLK_DIV = 1;
000286  9800              LDR      r0,[sp,#0]
000288  f0200018          BIC      r0,r0,#0x18
00028c  3008              ADDS     r0,r0,#8
00028e  9000              STR      r0,[sp,#0]
;;;317    #if USED_ECLK_ON_OFF_CONTROL
;;;318    	tCLK_DIV.tBit.TIMCLK_DIV = 0; /*timer clk : 0(/1), 1(/2), ... 7(/128) */
000290  9800              LDR      r0,[sp,#0]
000292  f02000e0          BIC      r0,r0,#0xe0
000296  9000              STR      r0,[sp,#0]
;;;319    #else /* USED_ECLK_ON_OFF_CONTROL */
;;;320    	tCLK_DIV.tBit.TIMCLK_DIV = 2; /*timer clk : 0(/1), 1(/2), ... 7(/128) */
;;;321    #endif /* USED_ECLK_ON_OFF_CONTROL */
;;;322    	tCLK_DIV.tBit.WDTCLK_DIV = 3;
000298  9800              LDR      r0,[sp,#0]
00029a  f42060e0          BIC      r0,r0,#0x700
00029e  f5007040          ADD      r0,r0,#0x300
0002a2  9000              STR      r0,[sp,#0]
;;;323    	tCLK_DIV.tBit.SSCGIN_DIV = 1;
0002a4  9800              LDR      r0,[sp,#0]
0002a6  f42050c0          BIC      r0,r0,#0x1800
0002aa  f5006000          ADD      r0,r0,#0x800
0002ae  9000              STR      r0,[sp,#0]
;;;324    	tCLK_DIV.tBit.TOUCHCLK_DIV = 0;
0002b0  9800              LDR      r0,[sp,#0]
0002b2  f4204060          BIC      r0,r0,#0xe000
0002b6  9000              STR      r0,[sp,#0]
;;;325    	tCLK_DIV.tBit._VECTKEY = SCB_VECTKEY_VALUE;
0002b8  9800              LDR      r0,[sp,#0]
0002ba  b280              UXTH     r0,r0
0002bc  f1006080          ADD      r0,r0,#0x4000000
0002c0  f10070fd          ADD      r0,r0,#0x1fa0000
0002c4  9000              STR      r0,[sp,#0]
;;;326    	SCRB->CLK_DIV.ulBulk = tCLK_DIV.ulBulk;
0002c6  9800              LDR      r0,[sp,#0]
0002c8  63a0              STR      r0,[r4,#0x38]
;;;327    
;;;328    
;;;329    //	tCLK_SRC_SEL_t tCLK_SRC_SEL;
;;;330    	tCLK_SRC_SEL.ulBulk = SCRB->CLK_SRC_SEL.ulBulk;
0002ca  6b60              LDR      r0,[r4,#0x34]
0002cc  9000              STR      r0,[sp,#0]
;;;331    	/*
;;;332    	 * 0 : 12MHz(Internal or External OSC)
;;;333    	 * 1 : PLL Out Clock
;;;334    	 * 2,3 : 40KHz (Internal OSC)
;;;335    	 */
;;;336    	tCLK_SRC_SEL.tBit.CCLK_SEL = 1; // PLL Out Clock
0002ce  9800              LDR      r0,[sp,#0]
0002d0  f0200003          BIC      r0,r0,#3
0002d4  1c40              ADDS     r0,r0,#1
0002d6  9000              STR      r0,[sp,#0]
;;;337    	tCLK_SRC_SEL.tBit.WDCLK_SEL = 2; // PCLK
0002d8  9800              LDR      r0,[sp,#0]
0002da  f020000c          BIC      r0,r0,#0xc
0002de  3008              ADDS     r0,r0,#8
0002e0  9000              STR      r0,[sp,#0]
;;;338    	tCLK_SRC_SEL.tBit.TIMCLK_SEL = 0;
0002e2  9800              LDR      r0,[sp,#0]
0002e4  f0200030          BIC      r0,r0,#0x30
0002e8  9000              STR      r0,[sp,#0]
;;;339    	tCLK_SRC_SEL.tBit.SSCGOUT_SEL = 1;
0002ea  9800              LDR      r0,[sp,#0]
0002ec  f0400040          ORR      r0,r0,#0x40
0002f0  9000              STR      r0,[sp,#0]
;;;340    	tCLK_SRC_SEL.tBit.SSCGOUT2X_SEL = 1;//1;
0002f2  9800              LDR      r0,[sp,#0]
0002f4  f0400080          ORR      r0,r0,#0x80
0002f8  9000              STR      r0,[sp,#0]
;;;341    	tCLK_SRC_SEL.tBit.TOUCHCLK_SEL = 0;
0002fa  9800              LDR      r0,[sp,#0]
0002fc  f4207040          BIC      r0,r0,#0x300
000300  9000              STR      r0,[sp,#0]
;;;342    	tCLK_SRC_SEL.tBit.PLLOUT_SEL = 0;
000302  9800              LDR      r0,[sp,#0]
000304  f42050e0          BIC      r0,r0,#0x1c00
000308  9000              STR      r0,[sp,#0]
;;;343    	tCLK_SRC_SEL.tBit.SSCGIN_SEL = 0;
00030a  9800              LDR      r0,[sp,#0]
00030c  f4205000          BIC      r0,r0,#0x2000
000310  9000              STR      r0,[sp,#0]
;;;344    	tCLK_SRC_SEL.tBit._VECTKEY = SCB_VECTKEY_VALUE;
000312  9800              LDR      r0,[sp,#0]
000314  b280              UXTH     r0,r0
000316  f1006080          ADD      r0,r0,#0x4000000
00031a  f10070fd          ADD      r0,r0,#0x1fa0000
00031e  9000              STR      r0,[sp,#0]
;;;345    	SCRB->CLK_SRC_SEL.ulBulk = tCLK_SRC_SEL.ulBulk;
000320  9800              LDR      r0,[sp,#0]
000322  6360              STR      r0,[r4,#0x34]
;;;346    
;;;347    
;;;348    	tLGD_SSC_FC_t tLGD_SSC_FC;
;;;349    	tLGD_SSC_FC.ulBulk = SCRB->LGD_SSC_FC.ulBulk;
000324  6e20              LDR      r0,[r4,#0x60]
000326  9001              STR      r0,[sp,#4]
;;;350    	tLGD_SSC_FC.tBit.SSCG_MR = 0x7;
000328  9801              LDR      r0,[sp,#4]
00032a  f0400007          ORR      r0,r0,#7
00032e  9001              STR      r0,[sp,#4]
;;;351    	tLGD_SSC_FC.tBit.SSCG_MF = 2;
000330  9801              LDR      r0,[sp,#4]
000332  f0200018          BIC      r0,r0,#0x18
000336  3010              ADDS     r0,r0,#0x10
000338  9001              STR      r0,[sp,#4]
;;;352    //	tLGD_SSC_FC.tBit.SSCG_FRAC_EN = 0;
;;;353    //	tLGD_SSC_FC.tBit.SSCG_ICP = 1;
;;;354    //	tLGD_SSC_FC.tBit.SSCG_RSEL = 1;
;;;355    //	tLGD_SSC_FC.tBit.SSCG_KVC = 1;
;;;356    	tCLK_SRC_SEL.tBit._VECTKEY = SCB_VECTKEY_VALUE;
00033a  9800              LDR      r0,[sp,#0]
00033c  b280              UXTH     r0,r0
00033e  f1006080          ADD      r0,r0,#0x4000000
000342  f10070fd          ADD      r0,r0,#0x1fa0000
000346  9000              STR      r0,[sp,#0]
;;;357    	SCRB->LGD_SSC_FC.ulBulk = tLGD_SSC_FC.ulBulk;
000348  9801              LDR      r0,[sp,#4]
00034a  6620              STR      r0,[r4,#0x60]
;;;358    
;;;359    	tLGD_SSC_UC_t tLGD_SSC_UC;
;;;360    	tLGD_SSC_UC.ulBulk = SCRB->LGD_SSC_UC.ulBulk;
00034c  6de0              LDR      r0,[r4,#0x5c]
00034e  9000              STR      r0,[sp,#0]
;;;361    	tLGD_SSC_UC.tBit.SSCG_PDB = 1;
000350  9800              LDR      r0,[sp,#0]
000352  f0400001          ORR      r0,r0,#1
000356  9000              STR      r0,[sp,#0]
;;;362    	tLGD_SSC_UC.tBit.SSCG_EN = 1;//1;
000358  9800              LDR      r0,[sp,#0]
00035a  f0400002          ORR      r0,r0,#2
00035e  9000              STR      r0,[sp,#0]
;;;363    	tLGD_SSC_UC.tBit.SSCG_INIT = 0;
000360  9800              LDR      r0,[sp,#0]
000362  f0200004          BIC      r0,r0,#4
000366  9000              STR      r0,[sp,#0]
;;;364    	tLGD_SSC_UC.tBit._VECTKEY = SCB_VECTKEY_VALUE;
000368  9800              LDR      r0,[sp,#0]
00036a  b280              UXTH     r0,r0
00036c  f1006080          ADD      r0,r0,#0x4000000
000370  f10070fd          ADD      r0,r0,#0x1fa0000
000374  9000              STR      r0,[sp,#0]
;;;365    	SCRB->LGD_SSC_UC.ulBulk = tLGD_SSC_UC.ulBulk;
000376  9800              LDR      r0,[sp,#0]
000378  65e0              STR      r0,[r4,#0x5c]
;;;366    
;;;367    //	tPMU_CONTROL_t tPMU_CONTROL;
;;;368    //	tPMU_CONTROL.ulBulk = SCRB->PMU_CONTROL.ulBulk;
;;;369    //	tPMU_CONTROL.tBit.DLY_SLP = 4000;
;;;370    //	tPMU_CONTROL.tBit.BYPASS_SLP = 0;
;;;371    //	tPMU_CONTROL.tBit.PMUENABLE = SCB_VECTKEY_VALUE;
;;;372    //	SCRB->PMU_CONTROL.ulBulk = tPMU_CONTROL.ulBulk;
;;;373    }
00037a  b002              ADD      sp,sp,#8
00037c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.896|
000380  f7fffffe          BL       Hal_WDT_Init
                  |L1.900|
000384  e7fe              B        |L1.900|
                          ENDP

000386  0000              DCW      0x0000
                  |L1.904|
                          DCD      _core_clock_
                  |L1.908|
                          DCD      0x40001000

;*** Start embedded assembler ***

#line 1 "..\\..\\Hal\\scrb\\scrb.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_scrb_c_5ffd5815____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___6_scrb_c_5ffd5815____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_scrb_c_5ffd5815____REVSH|
#line 402
|__asm___6_scrb_c_5ffd5815____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_scrb_c_5ffd5815____RRX|
#line 587
|__asm___6_scrb_c_5ffd5815____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
