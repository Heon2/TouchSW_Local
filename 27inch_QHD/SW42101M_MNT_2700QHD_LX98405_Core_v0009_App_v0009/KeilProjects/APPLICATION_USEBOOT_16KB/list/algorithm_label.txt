; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\bin\algorithm_label.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\bin\algorithm_label.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\App -I..\..\App\Algorithm -I..\..\App\Algorithm\Baseline -I..\..\App\Algorithm\Coord -I..\..\App\Algorithm\Label -I..\..\App\Algorithm\Noise -I..\..\Env -I..\..\Hal -I..\..\Hal\system -I..\..\Hal\system\CMSIS -I..\..\Hal\gpio -I..\..\Hal\i2c -I..\..\Hal\pwmdrv -I..\..\Hal\timer -I..\..\Hal\wdgt -I..\..\Hal\spi -I..\..\Hal\dspA -I..\..\Hal\dspB -I..\..\Hal\scrb -I..\..\Hal\usb -I..\..\Hal\usb\FWOTG210_F000 -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral -I..\..\Hal\usb\FWOTG210_F000\OTG_peripheral_Config -I..\..\Module -I..\..\Module\SRIC -I..\..\Protocol -I..\..\Hal\dma -I..\..\Tool_BinCvt\BinToolApp\src -I..\..\Boot -I..\..\Parameter -I..\..\Hal\misc -I..\..\Hal\flitf -I..\..\Env\env_model_L -I..\..\Env\env_model_L\customer\DEFAULT -I..\..\Env -I.\RTE\_MFTP_FPGA -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=523 -DARMCM3 -D_USE_APP_80K_ -DUSE_BOOTLOADER_16KB --wchar32 --omf_browse=.\bin\algorithm_label.crf ..\..\App\Algorithm\Label\algorithm_label.c]
                          THUMB

                          AREA ||i.algorithm_label_Add_NewNode_to_LabelRecord||, CODE, READONLY, ALIGN=2

                  algorithm_label_Add_NewNode_to_LabelRecord PROC
;;;172    
;;;173    void algorithm_label_Add_NewNode_to_LabelRecord(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bBoundary, bool_t _bAdd2List, int mode)
000000  f8dfc094          LDR      r12,|L1.152|
;;;174    {
000004  b410              PUSH     {r4}
;;;175    	tLabelInfo_t	*temp_label;
;;;176    
;;;177    #ifdef LocalMode_DSP_B_code_Enable 
;;;178    	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;179    		temp_label = &thisInfo->tLabel_local;
;;;180    	else
;;;181    #endif
;;;182    		temp_label = &thisInfo->tLabel;
000006  f8dcc008          LDR      r12,[r12,#8]  ; thisInfo
;;;183    
;;;184    	if(_d < 0) _d = 0;
00000a  2a00              CMP      r2,#0
00000c  f10c0c3a          ADD      r12,r12,#0x3a         ;182
000010  bfb8              IT       LT
000012  2200              MOVLT    r2,#0
;;;185    	
;;;186    	temp_label->tTable[_idx].tCoord.x      += _tCell.c * _d;
000014  ebc004c0          RSB      r4,r0,r0,LSL #3
000018  eb041040          ADD      r0,r4,r0,LSL #5
00001c  4460              ADD      r0,r0,r12
00001e  fa4ffc81          SXTB     r12,r1
000022  68c4              LDR      r4,[r0,#0xc]
;;;187    	temp_label->tTable[_idx].tCoord.y      += _tCell.r * _d;
000024  f3412107          SBFX     r1,r1,#8,#8
000028  fb0c4402          MLA      r4,r12,r2,r4          ;186
00002c  60c4              STR      r4,[r0,#0xc]          ;186
00002e  6904              LDR      r4,[r0,#0x10]
000030  2b00              CMP      r3,#0                 ;174
000032  fb014402          MLA      r4,r1,r2,r4
000036  6104              STR      r4,[r0,#0x10]
;;;188    	temp_label->tTable[_idx].ulExtStrength += _d;
000038  6984              LDR      r4,[r0,#0x18]
00003a  4414              ADD      r4,r4,r2
00003c  6184              STR      r4,[r0,#0x18]
;;;189    	if( _bBoundary == NO )
;;;190    	{
;;;191    		temp_label->tTable[_idx].ulStrength    += _d;
;;;192    		temp_label->tTable[_idx].usCellNum++;
;;;193    
;;;194    		if( temp_label->tTable[_idx].sMaxCellVal < _d )
;;;195    		{
;;;196    			temp_label->tTable[_idx].sMaxCellVal = _d;
;;;197    			temp_label->tTable[_idx].tMaxCell.r = _tCell.r;
;;;198    			temp_label->tTable[_idx].tMaxCell.c = _tCell.c;
;;;199    		}
;;;200    
;;;201    		if( temp_label->tTable[_idx].tRect.rs > _tCell.r )
;;;202    			temp_label->tTable[_idx].tRect.rs = _tCell.r;
;;;203    		if( temp_label->tTable[_idx].tRect.re < _tCell.r )
;;;204    			temp_label->tTable[_idx].tRect.re = _tCell.r;
;;;205    		if( temp_label->tTable[_idx].tRect.cs > _tCell.c )
;;;206    			temp_label->tTable[_idx].tRect.cs = _tCell.c;
;;;207    		if( temp_label->tTable[_idx].tRect.ce < _tCell.c )
;;;208    			temp_label->tTable[_idx].tRect.ce = _tCell.c;
;;;209    	}
;;;210    
;;;211    	// add ptr of Node into Tail of Linked-List
;;;212    //	if( _bAdd2List )
;;;213    //	{
;;;214    //		*temp_label->tTable[_idx].ptListTail = (uint32_t)GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;215    //		temp_label->tTable[_idx].ptListTail = (uint32_t *)*temp_label->tTable[_idx].ptListTail;
;;;216    //	}
;;;217    }
00003e  bf1c              ITT      NE
000040  bc10              POPNE    {r4}
000042  4770              BXNE     lr
000044  6943              LDR      r3,[r0,#0x14]         ;191
000046  4413              ADD      r3,r3,r2              ;191
000048  6143              STR      r3,[r0,#0x14]         ;191
00004a  88c3              LDRH     r3,[r0,#6]            ;192
00004c  1c5b              ADDS     r3,r3,#1              ;192
00004e  80c3              STRH     r3,[r0,#6]            ;192
000050  f9b03008          LDRSH    r3,[r0,#8]            ;194
000054  4293              CMP      r3,r2                 ;194
000056  da03              BGE      |L1.96|
000058  8102              STRH     r2,[r0,#8]            ;196
00005a  72c1              STRB     r1,[r0,#0xb]          ;197
00005c  f880c00a          STRB     r12,[r0,#0xa]         ;198
                  |L1.96|
000060  f9902002          LDRSB    r2,[r0,#2]            ;202
000064  428a              CMP      r2,r1                 ;202
000066  bfc8              IT       GT                    ;202
000068  460a              MOVGT    r2,r1                 ;202
00006a  7082              STRB     r2,[r0,#2]            ;202
00006c  f9902003          LDRSB    r2,[r0,#3]            ;204
000070  428a              CMP      r2,r1                 ;204
000072  bfc8              IT       GT                    ;204
000074  4611              MOVGT    r1,r2                 ;204
000076  70c1              STRB     r1,[r0,#3]            ;204
000078  f9901004          LDRSB    r1,[r0,#4]            ;206
00007c  4561              CMP      r1,r12                ;206
00007e  bfc8              IT       GT                    ;206
000080  4661              MOVGT    r1,r12                ;206
000082  7101              STRB     r1,[r0,#4]            ;206
000084  f9901005          LDRSB    r1,[r0,#5]            ;208
000088  4561              CMP      r1,r12                ;208
00008a  bfc8              IT       GT                    ;208
00008c  468c              MOVGT    r12,r1                ;208
00008e  f880c005          STRB     r12,[r0,#5]           ;208
000092  bc10              POP      {r4}
000094  4770              BX       lr
;;;218    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_GetConflictInfo||, CODE, READONLY, ALIGN=2

                  algorithm_label_GetConflictInfo PROC
;;;218    
;;;219    void algorithm_label_GetConflictInfo(bool_t _bModify, uint8_t _Direction, uint8_t _search_idx, tCell_t _tPos, tConflictInfo_t * _ptConflict, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;220    {
000004  b082              SUB      sp,sp,#8
;;;221    	int i, r_i, c_i;
;;;222    	uint8_t neighbor_label_id;
;;;223    #if USED_SPLIT_MERGE_RELIABILITY
;;;224    	int d1,d2,c1,c2;
;;;225    #endif /* USED_SPLIT_MERGE_RELIABILITY*/
;;;226    	
;;;227    	if( _search_idx == 0 )
;;;228    	{
;;;229    		_ptConflict->ulValue = 0x00000000;
;;;230    	}
;;;231    	else if( _search_idx > 0 )
;;;232    	{
;;;233    		_ptConflict->tInfo.NUM = 1;
000006  2501              MOVS     r5,#1
000008  e9dd480f          LDRD     r4,r8,[sp,#0x3c]      ;220
00000c  461f              MOV      r7,r3                 ;220
00000e  2a00              CMP      r2,#0                 ;227
000010  bf06              ITTE     EQ                    ;229
000012  2000              MOVEQ    r0,#0                 ;229
000014  6020              STREQ    r0,[r4,#0]            ;229
000016  70a5              STRBNE   r5,[r4,#2]
;;;234    	}
;;;235    
;;;236        if( _Direction == BOUNDARY_4_SEARCH_DIRECTION )
;;;237        {
;;;238        	for( i=0; i<BOUNDARY_4_SEARCH_TABLE[_search_idx].Num; i++ )
;;;239    		{
;;;240    #if (PAD_ == 0)
;;;241    			if((_tPos.r == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;242    				r_i = _tPos.r;
;;;243    			else
;;;244    				r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;245    
;;;246    			if((_tPos.c == 0 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;247    				c_i = _tPos.c;
;;;248    			else
;;;249    				c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;250    #else 
;;;251    			r_i = _tPos.r + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].r;
;;;252    			c_i = _tPos.c + BOUNDARY_4_SEARCH_TABLE[_search_idx].Table[i].c;
;;;253    #endif
;;;254    
;;;255    #ifdef LocalMode_DSP_B_code_Enable 
;;;256    			if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;257    				neighbor_label_id = HAL_READ_LOCAL_LABEL_IMAGE(r_i, c_i);
;;;258    			else
;;;259    #endif
;;;260    				neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
000018  f8dfb188          LDR      r11,|L2.420|
00001c  f3472607          SBFX     r6,r7,#8,#8
000020  fa4ffc87          SXTB     r12,r7
000024  2904              CMP      r1,#4                 ;236
000026  d002              BEQ      |L2.46|
;;;261    
;;;262    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;263    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
;;;264    			{
;;;265    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
;;;266    				{
;;;267    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
;;;268    					_ptConflict->tInfo.NUM++;
;;;269    				}
;;;270    			}
;;;271    		}
;;;272        }
;;;273        else if( _Direction == BOUNDARY_8_SEARCH_DIRECTION )
000028  2908              CMP      r1,#8
00002a  d038              BEQ      |L2.158|
00002c  e06e              B        |L2.268|
                  |L2.46|
00002e  495e              LDR      r1,|L2.424|
000030  eb0202c2          ADD      r2,r2,r2,LSL #3       ;238
000034  2000              MOVS     r0,#0                 ;238
000036  5c8b              LDRB     r3,[r1,r2]            ;238
000038  2b00              CMP      r3,#0                 ;238
00003a  bfc8              IT       GT                    ;251
00003c  1853              ADDGT    r3,r2,r1              ;251
00003e  dd65              BLE      |L2.268|
                  |L2.64|
000040  eb030a40          ADD      r10,r3,r0,LSL #1      ;251
000044  f99a9002          LDRSB    r9,[r10,#2]           ;251
000048  f99aa001          LDRSB    r10,[r10,#1]          ;252
00004c  44b1              ADD      r9,r9,r6              ;251
00004e  eb091e09          ADD      lr,r9,r9,LSL #4       ;260
000052  eb0e1949          ADD      r9,lr,r9,LSL #5       ;260
000056  44e2              ADD      r10,r10,r12           ;252
000058  eb0b0949          ADD      r9,r11,r9,LSL #1      ;260
00005c  44d1              ADD      r9,r9,r10             ;260
00005e  f5094950          ADD      r9,r9,#0xd000         ;260
000062  f8999f3b          LDRB     r9,[r9,#0xf3b]        ;260
000066  f1a90901          SUB      r9,r9,#1              ;260
00006a  f1b90f0f          CMP      r9,#0xf               ;263
00006e  d810              BHI      |L2.146|
000070  f8b4a000          LDRH     r10,[r4,#0]           ;265
000074  fa05f909          LSL      r9,r5,r9              ;265
000078  ea1a0f09          TST      r10,r9                ;265
00007c  d109              BNE      |L2.146|
00007e  ea4a0909          ORR      r9,r10,r9             ;267
000082  f8a49000          STRH     r9,[r4,#0]            ;267
000086  f8949002          LDRB     r9,[r4,#2]            ;268
00008a  f1090901          ADD      r9,r9,#1              ;268
00008e  f8849002          STRB     r9,[r4,#2]            ;268
                  |L2.146|
000092  f8119002          LDRB     r9,[r1,r2]            ;238
000096  1c40              ADDS     r0,r0,#1              ;238
000098  4581              CMP      r9,r0                 ;238
00009a  dcd1              BGT      |L2.64|
00009c  e036              B        |L2.268|
                  |L2.158|
;;;274        {
;;;275    		for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
00009e  4943              LDR      r1,|L2.428|
0000a0  eb021202          ADD      r2,r2,r2,LSL #4
0000a4  2000              MOVS     r0,#0
0000a6  5c8b              LDRB     r3,[r1,r2]
0000a8  2b00              CMP      r3,#0
;;;276    		{
;;;277    #if (PAD_ == 0)
;;;278    			if((_tPos.r == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == -1) || (_tPos.r == ROW_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r == 1))
;;;279    				r_i = _tPos.r;
;;;280    			else
;;;281    				r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;282    
;;;283    			if((_tPos.c == 0 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == -1) || (_tPos.c == COL_MAX-1 && BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c == 1))
;;;284    				c_i = _tPos.c;
;;;285    			else
;;;286    				c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;287    #else 
;;;288    			r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
0000aa  bfc8              IT       GT
0000ac  1853              ADDGT    r3,r2,r1
0000ae  dd2d              BLE      |L2.268|
                  |L2.176|
0000b0  eb030a40          ADD      r10,r3,r0,LSL #1
0000b4  f99a9002          LDRSB    r9,[r10,#2]
;;;289    			c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
0000b8  f99aa001          LDRSB    r10,[r10,#1]
0000bc  44b1              ADD      r9,r9,r6              ;288
;;;290    #endif
;;;291    
;;;292    #ifdef LocalMode_DSP_B_code_Enable 
;;;293    			if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;294    				neighbor_label_id = HAL_READ_LOCAL_LABEL_IMAGE(r_i, c_i);
;;;295    			else
;;;296    #endif
;;;297    				neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
0000be  eb091e09          ADD      lr,r9,r9,LSL #4
0000c2  eb0e1949          ADD      r9,lr,r9,LSL #5
0000c6  44e2              ADD      r10,r10,r12           ;289
0000c8  eb0b0949          ADD      r9,r11,r9,LSL #1
0000cc  44d1              ADD      r9,r9,r10
0000ce  f5094950          ADD      r9,r9,#0xd000
0000d2  f8999f3b          LDRB     r9,[r9,#0xf3b]
0000d6  f1a90901          SUB      r9,r9,#1
;;;298    
;;;299    			//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;300    			if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
0000da  f1b90f0f          CMP      r9,#0xf
0000de  d810              BHI      |L2.258|
;;;301    			{
;;;302    				if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
0000e0  f8b4a000          LDRH     r10,[r4,#0]
0000e4  fa05f909          LSL      r9,r5,r9
0000e8  ea1a0f09          TST      r10,r9
0000ec  d109              BNE      |L2.258|
;;;303    				{
;;;304    					_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
0000ee  ea4a0909          ORR      r9,r10,r9
0000f2  f8a49000          STRH     r9,[r4,#0]
;;;305    					_ptConflict->tInfo.NUM++;
0000f6  f8949002          LDRB     r9,[r4,#2]
0000fa  f1090901          ADD      r9,r9,#1
0000fe  f8849002          STRB     r9,[r4,#2]
                  |L2.258|
000102  f8119002          LDRB     r9,[r1,r2]            ;275
000106  1c40              ADDS     r0,r0,#1              ;275
000108  4581              CMP      r9,r0                 ;275
00010a  dcd1              BGT      |L2.176|
                  |L2.268|
;;;306    				}
;;;307    			}
;;;308    		}
;;;309        }
;;;310    
;;;311    	if( _bModify == YES )
00010c  9802              LDR      r0,[sp,#8]
00010e  2801              CMP      r0,#1
;;;312    	{
;;;313    		if( _ptConflict->tInfo.NUM == 0 )
;;;314    		{
;;;315    		#if USED_SPLIT_MERGE_RELIABILITY
;;;316    			if( _Direction == BOUNDARY_4_SEARCH_DIRECTION )
;;;317    			{
;;;318    				for( i=0; i<BOUNDARY_8_SEARCH_TABLE[_search_idx].Num; i++ )
;;;319    				{
;;;320    					r_i = _tPos.r + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].r;
;;;321    					c_i = _tPos.c + BOUNDARY_8_SEARCH_TABLE[_search_idx].Table[i].c;
;;;322    
;;;323    					neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
;;;324    
;;;325    					//if( (neighbor_label_id != LABEL_CONFLICT_MARKER) && (neighbor_label_id != LABEL_BOUNDARY_MARKER) && neighbor_label_id != 0 )
;;;326    					if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
;;;327    					{
;;;328    						if( (_ptConflict->tInfo.BF & _BV(neighbor_label_id-1)) == 0 )
;;;329    						{
;;;330    							d1 = HAL_READ_DELTA_IMAGE(_tPos.r,_tPos.c);	//curr pos
;;;331    							d2 = HAL_READ_DELTA_IMAGE(r_i,c_i);			//neighbor with label
;;;332    							c1 = HAL_READ_DELTA_IMAGE(_tPos.r,c_i);		//conflict region
;;;333    							c2 = HAL_READ_DELTA_IMAGE(r_i,_tPos.c);		//conflict region
;;;334    //							delta = HAL_READ_DELTA_IMAGE(_tPos.r,_tPos.c);
;;;335    //							delta1 = HAL_READ_DELTA_IMAGE(_tPos.r,c_i);
;;;336    //							delta2 = HAL_READ_DELTA_IMAGE(r_i,_tPos.c);
;;;337    							
;;;338    							
;;;339    //							if((delta - delta1) < (thisModeConf->Label.usSeedBase>>1) && (delta - delta2) < (thisModeConf->Label.usSeedBase>>1))
;;;340    							if( (c1+c2) * 100 / (d1+d2) > thisModeConf->Label.ucMergeSmallThdPer)
;;;341    //							if( (c1+c2) * 100 / (d1+d2) )
;;;342    							{
;;;343    								_ptConflict->tInfo.BF |= _BV(neighbor_label_id-1);
;;;344    								_ptConflict->tInfo.NUM++;
;;;345    							}
;;;346    						}
;;;347    						
;;;348    					}
;;;349    				}
;;;350    			}
;;;351    			#endif /* USED_SPLIT_MERGE_RELIABILITY */
;;;352    		}
;;;353    		else if( _ptConflict->tInfo.NUM == 1 )
;;;354    		{
;;;355    			for( i=0; i<LOOSE_POSBUF_; i++ )
;;;356    			{
;;;357    				if( (_ptConflict->tInfo.BF & _BV(i)) )
;;;358    				{
;;;359    #ifdef LocalMode_DSP_B_code_Enable
;;;360    					if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;361    					{
;;;362    						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_LOCAL_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;363    						HAL_WRITE_LOCAL_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel_local.tTable[i].cId);
;;;364    					}
;;;365    					else 
;;;366    #endif
;;;367    //					if(mode == LOCAL_FINGER_MODE)
;;;368    //					{
;;;369    //						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;370    //						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;371    //					}
;;;372    //					else
;;;373    					{
;;;374    						algorithm_label_Add_NewNode_to_LabelRecord(i, _tPos, HAL_READ_DELTA_IMAGE(_tPos.r, _tPos.c), NO, YES, mode);
;;;375    						HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, thisInfo->tLabel.tTable[i].cId);
;;;376    					}
;;;377    				}
;;;378    			}
;;;379    		}
;;;380    		else if( _ptConflict->tInfo.NUM > 1 )
;;;381    		{
;;;382    #ifdef LocalMode_DSP_B_code_Enable
;;;383    			if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;384    				HAL_WRITE_LOCAL_LABEL_IMAGE(_tPos.r, _tPos.c, LABEL_CONFLICT_MARKER);
;;;385    			else
;;;386    #endif
;;;387    				HAL_WRITE_LABEL_IMAGE(_tPos.r, _tPos.c, LABEL_CONFLICT_MARKER);
;;;388    		}
;;;389    	}
;;;390    }
000110  bf1c              ITT      NE
000112  b006              ADDNE    sp,sp,#0x18
000114  e8bd8ff0          POPNE    {r4-r11,pc}
000118  78a1              LDRB     r1,[r4,#2]            ;313
00011a  2900              CMP      r1,#0                 ;313
00011c  bf04              ITT      EQ
00011e  b006              ADDEQ    sp,sp,#0x18
000120  e8bd8ff0          POPEQ    {r4-r11,pc}
000124  481f              LDR      r0,|L2.420|
000126  b27a              SXTB     r2,r7                 ;260
000128  eb020a00          ADD      r10,r2,r0             ;375
00012c  f3472007          SBFX     r0,r7,#8,#8           ;375
000130  eb001300          ADD      r3,r0,r0,LSL #4       ;374
000134  f64d723b          MOV      r2,#0xdf3b            ;375
000138  eb031040          ADD      r0,r3,r0,LSL #5       ;374
00013c  eb020940          ADD      r9,r2,r0,LSL #1       ;375
000140  2901              CMP      r1,#1                 ;353
000142  bf84              ITT      HI                    ;387
000144  203f              MOVHI    r0,#0x3f              ;387
000146  f80a0009          STRBHI   r0,[r10,r9]           ;387
00014a  bf1c              ITT      NE
00014c  b006              ADDNE    sp,sp,#0x18
00014e  e8bd8ff0          POPNE    {r4-r11,pc}
000152  f04f0600          MOV      r6,#0                 ;355
000156  eb0b0080          ADD      r0,r11,r0,LSL #2      ;374
00015a  eb00004c          ADD      r0,r0,r12,LSL #1      ;374
00015e  f5004b30          ADD      r11,r0,#0xb000        ;374
                  |L2.354|
000162  8820              LDRH     r0,[r4,#0]            ;357
000164  fa05f106          LSL      r1,r5,r6              ;357
000168  4208              TST      r0,r1                 ;357
00016a  d014              BEQ      |L2.406|
00016c  e9cd5800          STRD     r5,r8,[sp,#0]         ;357
000170  f9bb2956          LDRSH    r2,[r11,#0x956]       ;374
000174  b2f0              UXTB     r0,r6                 ;374
000176  f04f0300          MOV      r3,#0                 ;374
00017a  4639              MOV      r1,r7                 ;374
00017c  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000180  ebc600c6          RSB      r0,r6,r6,LSL #3       ;375
000184  eb001146          ADD      r1,r0,r6,LSL #5       ;375
000188  4809              LDR      r0,|L2.432|
00018a  6880              LDR      r0,[r0,#8]            ;375  ; thisInfo
00018c  4408              ADD      r0,r0,r1              ;375
00018e  f890003b          LDRB     r0,[r0,#0x3b]         ;375
000192  f80a0009          STRB     r0,[r10,r9]           ;375
                  |L2.406|
000196  1c76              ADDS     r6,r6,#1              ;375
000198  2e10              CMP      r6,#0x10              ;355
00019a  dbe2              BLT      |L2.354|
00019c  b006              ADD      sp,sp,#0x18
00019e  e8bd8ff0          POP      {r4-r11,pc}
;;;391    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L2.420|
                          DCD      FullSharedBuff
                  |L2.424|
                          DCD      ||.data||+0x10
                  |L2.428|
                          DCD      ||.data||+0x3d
                  |L2.432|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_Insert_NewRecord_to_LabelTable||, CODE, READONLY, ALIGN=2

                  algorithm_label_Insert_NewRecord_to_LabelTable PROC
;;;139    
;;;140    void algorithm_label_Insert_NewRecord_to_LabelTable(uint8_t _idx, tCell_t _tCell, int16_t _d, bool_t _bAdd2List, int mode)
000000  b41f              PUSH     {r0-r4}
;;;141    {
;;;142    	tLabelInfo_t	*temp_label;
;;;143    	
;;;144    	temp_label = &thisInfo->tLabel;
000002  491c              LDR      r1,|L3.116|
000004  6889              LDR      r1,[r1,#8]  ; thisInfo
000006  313a              ADDS     r1,r1,#0x3a
;;;145    
;;;146    	if( _idx < LOOSE_POSBUF_ )
000008  2810              CMP      r0,#0x10
;;;147    	{
;;;148    		temp_label->tTable[_idx].cId          = _idx + 1;
;;;149    		temp_label->tTable[_idx].sMaxCellVal  = _d;
;;;150    		temp_label->tTable[_idx].tMaxCell     = _tCell;
;;;151    		temp_label->tTable[_idx].tRect.rs     = _tCell.r;
;;;152    		temp_label->tTable[_idx].tRect.re     = _tCell.r;
;;;153    		temp_label->tTable[_idx].tRect.cs     = _tCell.c;
;;;154    		temp_label->tTable[_idx].tRect.ce     = _tCell.c;
;;;155    		temp_label->tTable[_idx].tCoord.x     = _tCell.c * _d;
;;;156    		temp_label->tTable[_idx].tCoord.y     = _tCell.r * _d;
;;;157    		temp_label->tTable[_idx].ulStrength   = _d;
;;;158    		temp_label->tTable[_idx].ulExtStrength= _d;
;;;159    		temp_label->tTable[_idx].usCellNum    = 1;
;;;160    
;;;161    //		if( _bAdd2List )
;;;162    //		{
;;;163    //			temp_label->tTable[_idx].ptListHead = GET_NEWNODE_FOR_LINKEDLIST(_tCell.r, _tCell.c);
;;;164    //			temp_label->tTable[_idx].ptListTail = temp_label->tTable[_idx].ptListHead;
;;;165    //		}
;;;166    
;;;167    		HAL_WRITE_LABEL_IMAGE(_tCell.r, _tCell.c, temp_label->tTable[_idx].cId);
;;;168    
;;;169    		temp_label->ucNum++;
;;;170    	}
;;;171    }
00000a  bf22              ITTT     CS
00000c  b004              ADDCS    sp,sp,#0x10
00000e  bc10              POPCS    {r4}
000010  4770              BXCS     lr
000012  1c43              ADDS     r3,r0,#1              ;148
000014  ebc00cc0          RSB      r12,r0,r0,LSL #3      ;148
000018  eb0c1040          ADD      r0,r12,r0,LSL #5      ;148
00001c  4408              ADD      r0,r0,r1              ;148
00001e  7043              STRB     r3,[r0,#1]            ;148
000020  8102              STRH     r2,[r0,#8]            ;149
000022  f8bd3004          LDRH     r3,[sp,#4]            ;150
000026  8143              STRH     r3,[r0,#0xa]          ;150
000028  f99dc005          LDRSB    r12,[sp,#5]           ;151
00002c  f880c002          STRB     r12,[r0,#2]           ;151
000030  f880c003          STRB     r12,[r0,#3]           ;152
000034  f99d3004          LDRSB    r3,[sp,#4]            ;153
000038  7103              STRB     r3,[r0,#4]            ;153
00003a  7143              STRB     r3,[r0,#5]            ;154
00003c  fb03f402          MUL      r4,r3,r2              ;155
000040  60c4              STR      r4,[r0,#0xc]          ;155
000042  fb0cf402          MUL      r4,r12,r2             ;156
000046  6104              STR      r4,[r0,#0x10]         ;156
000048  6142              STR      r2,[r0,#0x14]         ;157
00004a  6182              STR      r2,[r0,#0x18]         ;158
00004c  2201              MOVS     r2,#1                 ;159
00004e  80c2              STRH     r2,[r0,#6]            ;159
000050  4a09              LDR      r2,|L3.120|
000052  7840              LDRB     r0,[r0,#1]            ;167
000054  441a              ADD      r2,r2,r3              ;167
000056  eb0c130c          ADD      r3,r12,r12,LSL #4     ;167
00005a  eb03134c          ADD      r3,r3,r12,LSL #5      ;167
00005e  f64d7c3b          MOV      r12,#0xdf3b           ;167
000062  eb0c0343          ADD      r3,r12,r3,LSL #1      ;167
000066  54d0              STRB     r0,[r2,r3]            ;167
000068  7808              LDRB     r0,[r1,#0]            ;169
00006a  1c40              ADDS     r0,r0,#1              ;169
00006c  7008              STRB     r0,[r1,#0]            ;169
00006e  b004              ADD      sp,sp,#0x10
000070  bc10              POP      {r4}
000072  4770              BX       lr
;;;172    
                          ENDP

                  |L3.116|
                          DCD      ||.data||
                  |L3.120|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_MarkBoundary||, CODE, READONLY, ALIGN=2

                  algorithm_label_MarkBoundary PROC
;;;391    
;;;392    void algorithm_label_MarkBoundary(bool_t _bBoundary, int mode)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;393    {
;;;394        int l, i;
;;;395        tCell_t tCellPos;
;;;396        tConflictInfo_t tConflict;
;;;397        uint8_t rLabel_val;
;;;398    
;;;399    	tLabelInfo_t	*temp_label;
;;;400    
;;;401    #ifdef LocalMode_DSP_B_code_Enable
;;;402    	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;403    		temp_label = &thisInfo->tLabel_local;
;;;404    	else
;;;405    #endif
;;;406    		temp_label = &thisInfo->tLabel;
000004  4853              LDR      r0,|L4.340|
000006  b08f              SUB      sp,sp,#0x3c           ;393
000008  4689              MOV      r9,r1                 ;393
00000a  6880              LDR      r0,[r0,#8]  ; thisInfo
00000c  303a              ADDS     r0,r0,#0x3a
;;;407    
;;;408        for( l=0; l<temp_label->ucValidNum; l++ )
00000e  9006              STR      r0,[sp,#0x18]
000010  2000              MOVS     r0,#0
000012  9005              STR      r0,[sp,#0x14]
000014  9806              LDR      r0,[sp,#0x18]
000016  f8900271          LDRB     r0,[r0,#0x271]
00001a  2800              CMP      r0,#0
;;;409        {
;;;410    		if( temp_label->tValidRect[l].cs > 0 )
;;;411    			temp_label->tValidRect[l].cs--;
;;;412    		if( temp_label->tValidRect[l].ce < (COL_MAX - 1) )
;;;413    			temp_label->tValidRect[l].ce++;
;;;414    		if( temp_label->tValidRect[l].rs > 0 )
;;;415    			temp_label->tValidRect[l].rs--;		
;;;416    		
;;;417    #ifdef LocalMode_DSP_B_code_Enable		
;;;418    		if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;419    		{
;;;420    			if( temp_label->tValidRect[l].re < (MAX_MUX_SIZE - 1) )
;;;421    				temp_label->tValidRect[l].re++;
;;;422    		}
;;;423    		else
;;;424    #endif
;;;425    		{
;;;426    			if( temp_label->tValidRect[l].re < (ROW_MAX - 1) )
;;;427    				temp_label->tValidRect[l].re++;
;;;428    		}
;;;429    
;;;430        	for( tCellPos.r=temp_label->tValidRect[l].rs; tCellPos.r<= temp_label->tValidRect[l].re; tCellPos.r++ )
;;;431        	{
;;;432        		for( tCellPos.c=temp_label->tValidRect[l].cs; tCellPos.c<= temp_label->tValidRect[l].ce; tCellPos.c++ )
;;;433        		{
;;;434    #if !defined(FINGER_ONLY)
;;;435        			if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;436        				rLabel_val = HAL_READ_LOCAL_LABEL_IMAGE(tCellPos.r, tCellPos.c);
;;;437        			else
;;;438    #endif
;;;439        				rLabel_val = HAL_READ_LABEL_IMAGE(tCellPos.r, tCellPos.c);
;;;440    
;;;441        			if( rLabel_val == 0 )
;;;442        			{
;;;443        				tConflict.ulValue = 0;
;;;444    
;;;445        				algorithm_label_GetConflictInfo(NO, BOUNDARY_4_SEARCH_DIRECTION, 0, tCellPos, &tConflict, mode);
;;;446    
;;;447        				if( tConflict.tInfo.NUM )
;;;448        				{
;;;449        					for(i=LOOSE_POSBUF_; i--; )
;;;450        					{
;;;451        						if( tConflict.tInfo.BF & _BV(i) )
00001c  bfc7              ITTEE    GT
00001e  f04f0801          MOVGT    r8,#1
000022  2700              MOVGT    r7,#0
;;;452        						{
;;;453    								int sum_delta;
;;;454    								
;;;455    //    							if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;456    //    							{
;;;457    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;458    //    							}
;;;459    //    							else if(mode == LOCAL_FINGER_MODE)
;;;460    //    							{
;;;461    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;462    //    							}
;;;463    //								else
;;;464    //								{
;;;465    //    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c), YES, NO, mode);
;;;466    //    							}
;;;467    #ifdef LocalMode_DSP_B_code_Enable								
;;;468    								if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;469        								sum_delta = HAL_READ_LOCAL_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;470        							else 
;;;471    #endif
;;;472    //								if(mode == LOCAL_FINGER_MODE)
;;;473    //    								sum_delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;474    //								else
;;;475        								sum_delta = HAL_READ_DELTA_IMAGE(tCellPos.r, tCellPos.c);
;;;476    								
;;;477    								if(sum_delta < 0)	sum_delta = 0;
;;;478    								
;;;479    								algorithm_label_Add_NewNode_to_LabelRecord(i, tCellPos, sum_delta, _bBoundary, NO, mode);
;;;480        						}
;;;481        					}
;;;482    #ifdef LocalMode_DSP_B_code_Enable
;;;483        	    			if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;484        	    				HAL_WRITE_LOCAL_LABEL_IMAGE(tCellPos.r, tCellPos.c, LABEL_BOUNDARY_MARKER);
;;;485        	    			else
;;;486    #endif
;;;487        	    				HAL_WRITE_LABEL_IMAGE(tCellPos.r, tCellPos.c, LABEL_BOUNDARY_MARKER);
;;;488        				}
;;;489        			}
;;;490        		}
;;;491        	}
;;;492        }
;;;493    }
000024  b011              ADDLE    sp,sp,#0x44
000026  e8bd8ff0          POPLE    {r4-r11,pc}
00002a  bf00              NOP      
                  |L4.44|
00002c  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000030  eb010680          ADD      r6,r1,r0,LSL #2       ;410
000034  f9960274          LDRSB    r0,[r6,#0x274]        ;410
000038  2800              CMP      r0,#0                 ;410
00003a  bfc4              ITT      GT                    ;410
00003c  1e40              SUBGT    r0,r0,#1              ;410
00003e  f8860274          STRBGT   r0,[r6,#0x274]        ;411
000042  f9960275          LDRSB    r0,[r6,#0x275]        ;412
000046  285f              CMP      r0,#0x5f              ;412
000048  bfbc              ITT      LT                    ;412
00004a  1c40              ADDLT    r0,r0,#1              ;412
00004c  f8860275          STRBLT   r0,[r6,#0x275]        ;413
000050  f9960272          LDRSB    r0,[r6,#0x272]        ;414
000054  2800              CMP      r0,#0                 ;414
000056  bfc4              ITT      GT                    ;414
000058  1e40              SUBGT    r0,r0,#1              ;414
00005a  f8860272          STRBGT   r0,[r6,#0x272]        ;415
00005e  f9960273          LDRSB    r0,[r6,#0x273]        ;426
000062  282f              CMP      r0,#0x2f              ;426
000064  bfbc              ITT      LT                    ;426
000066  1c40              ADDLT    r0,r0,#1              ;426
000068  f8860273          STRBLT   r0,[r6,#0x273]        ;427
00006c  f9960272          LDRSB    r0,[r6,#0x272]        ;430
000070  f9961273          LDRSB    r1,[r6,#0x273]        ;430
000074  f360250f          BFI      r5,r0,#8,#8           ;430
000078  4288              CMP      r0,r1                 ;430
00007a  dc5c              BGT      |L4.310|
                  |L4.124|
00007c  f9960274          LDRSB    r0,[r6,#0x274]        ;432
000080  f9961275          LDRSB    r1,[r6,#0x275]        ;432
000084  f3600507          BFI      r5,r0,#0,#8           ;432
000088  4288              CMP      r0,r1                 ;432
00008a  dc4b              BGT      |L4.292|
00008c  f3452007          SBFX     r0,r5,#8,#8           ;432
000090  eb001100          ADD      r1,r0,r0,LSL #4       ;439
000094  eb011040          ADD      r0,r1,r0,LSL #5       ;439
000098  492f              LDR      r1,|L4.344|
00009a  eb010180          ADD      r1,r1,r0,LSL #2       ;475
00009e  9107              STR      r1,[sp,#0x1c]         ;439
0000a0  f64d713b          MOV      r1,#0xdf3b            ;439
0000a4  eb010040          ADD      r0,r1,r0,LSL #1       ;439
0000a8  f8cd0024          STR.W    r0,[sp,#0x24]         ;439
                  |L4.172|
0000ac  482a              LDR      r0,|L4.344|
0000ae  fa4ffa85          SXTB     r10,r5                ;439
0000b2  9909              LDR      r1,[sp,#0x24]         ;439
0000b4  4450              ADD      r0,r0,r10             ;439
0000b6  900a              STR      r0,[sp,#0x28]         ;439
0000b8  5c40              LDRB     r0,[r0,r1]            ;439
0000ba  bb50              CBNZ     r0,|L4.274|
0000bc  a804              ADD      r0,sp,#0x10           ;445
0000be  e9cd0900          STRD     r0,r9,[sp,#0]         ;445
0000c2  2200              MOVS     r2,#0                 ;445
0000c4  462b              MOV      r3,r5                 ;445
0000c6  2104              MOVS     r1,#4                 ;445
0000c8  9704              STR      r7,[sp,#0x10]         ;445
0000ca  4610              MOV      r0,r2                 ;445
0000cc  f7fffffe          BL       algorithm_label_GetConflictInfo
0000d0  f89d0012          LDRB     r0,[sp,#0x12]         ;447
0000d4  b1e8              CBZ      r0,|L4.274|
0000d6  9807              LDR      r0,[sp,#0x1c]         ;475
0000d8  240f              MOVS     r4,#0xf               ;449
0000da  eb00004a          ADD      r0,r0,r10,LSL #1      ;475
0000de  f5004b30          ADD      r11,r0,#0xb000        ;475
0000e2  bf00              NOP                            ;451
                  |L4.228|
0000e4  f8bd0010          LDRH     r0,[sp,#0x10]         ;451
0000e8  fa08f104          LSL      r1,r8,r4              ;451
0000ec  4208              TST      r0,r1                 ;451
0000ee  d00a              BEQ      |L4.262|
0000f0  f9bb2956          LDRSH    r2,[r11,#0x956]       ;475
0000f4  2a00              CMP      r2,#0                 ;477
0000f6  db2b              BLT      |L4.336|
                  |L4.248|
0000f8  e9cd7900          STRD     r7,r9,[sp,#0]         ;479
0000fc  b2e0              UXTB     r0,r4                 ;479
0000fe  4629              MOV      r1,r5                 ;479
000100  9b0f              LDR      r3,[sp,#0x3c]         ;479
000102  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L4.262|
000106  1e64              SUBS     r4,r4,#1              ;479
000108  d2ec              BCS      |L4.228|
00010a  e9dd1209          LDRD     r1,r2,[sp,#0x24]      ;487
00010e  2012              MOVS     r0,#0x12              ;487
000110  5450              STRB     r0,[r2,r1]            ;487
                  |L4.274|
000112  f10a0001          ADD      r0,r10,#1             ;487
000116  b240              SXTB     r0,r0                 ;487
000118  f9961275          LDRSB    r1,[r6,#0x275]        ;487
00011c  f3600507          BFI      r5,r0,#0,#8           ;487
000120  4288              CMP      r0,r1                 ;487
000122  ddc3              BLE      |L4.172|
                  |L4.292|
000124  1228              ASRS     r0,r5,#8              ;487
000126  1c40              ADDS     r0,r0,#1              ;487
000128  b240              SXTB     r0,r0                 ;487
00012a  f9961273          LDRSB    r1,[r6,#0x273]        ;487
00012e  f360250f          BFI      r5,r0,#8,#8           ;487
000132  4288              CMP      r0,r1                 ;487
000134  dda2              BLE      |L4.124|
                  |L4.310|
000136  9805              LDR      r0,[sp,#0x14]         ;487
000138  1c40              ADDS     r0,r0,#1              ;487
00013a  9005              STR      r0,[sp,#0x14]         ;487
00013c  9806              LDR      r0,[sp,#0x18]         ;487
00013e  f8901271          LDRB     r1,[r0,#0x271]        ;487
000142  9805              LDR      r0,[sp,#0x14]         ;487
000144  4281              CMP      r1,r0                 ;487
000146  f73faf71          BGT      |L4.44|
00014a  b011              ADD      sp,sp,#0x44
00014c  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.336|
000150  2200              MOVS     r2,#0                 ;477
000152  e7d1              B        |L4.248|
;;;494    
                          ENDP

                  |L4.340|
                          DCD      ||.data||
                  |L4.344|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Merge||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge PROC
;;;1932   
;;;1933   void algorithm_label_Merge( uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1934   {
;;;1935   	int r, c, i, j;
;;;1936   #if USED_SPLIT_MERGE_RELIABILITY
;;;1937   	int pl,match_pl /*, match_pl_j*/;
;;;1938   	uint8_t DiagonalFlag = 0;
;;;1939   	
;;;1940   	tCoordInfo_t 	*temp_coord;
;;;1941   	temp_coord = &thisInfo->tCoord;
;;;1942   #endif
;;;1943   	tXY_t tPos_i, tPos_j;
;;;1944   	int delta_i, delta_mean, delta_j, delta_target, delta_ratio;
;;;1945   	uint8_t ConflictNum;
;;;1946   	tCell_t node_i, node_mean, node_j;
;;;1947   	tConflictInfo_t tConflict;
;;;1948   	tRect_t tExpectConflictRect;
;;;1949       uint8_t rLabel_val;
;;;1950   #if USED_NOISE_HOPPING_FREQ
;;;1951   	int delta_min, delta_max;
;;;1952   #endif /* USED_NOISE_HOPPING_FREQ */
;;;1953   
;;;1954   	tLabelInfo_t	*temp_label;
;;;1955   	temp_label = &thisInfo->tLabel;
000004  4bfe              LDR      r3,|L5.1024|
000006  b09e              SUB      sp,sp,#0x78           ;1934
;;;1956   
;;;1957   	for( i=_label_start_idx; i<temp_label->ucNum; i++ )
000008  460f              MOV      r7,r1
00000a  689a              LDR      r2,[r3,#8]            ;1955  ; thisInfo
00000c  323a              ADDS     r2,r2,#0x3a           ;1955
00000e  9208              STR      r2,[sp,#0x20]
000010  7811              LDRB     r1,[r2,#0]
000012  42b9              CMP      r1,r7
;;;1958   	{
;;;1959   		if( temp_label->tTable[i].ulStrength == 0 )
;;;1960   		{
;;;1961   			continue;
;;;1962   		}
;;;1963   
;;;1964   		for( j=i+1; j<LOOSE_POSBUF_; j++ )
;;;1965   		{
;;;1966   			if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(j) )
;;;1967   			{
;;;1968   				if( temp_label->tTable[j].ulStrength == 0 )
;;;1969   				{
;;;1970   					temp_label->tTable[i].tConflictInfo.tInfo.BF &= ~_BV(j);
;;;1971   					temp_label->tTable[i].tConflictInfo.tInfo.NUM--;
;;;1972   
;;;1973   					continue;
;;;1974   				}
;;;1975   
;;;1976   				tPos_i.x  = (temp_label->tTable[i].tCoord.x + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1977   				tPos_i.x /= temp_label->tTable[i].ulStrength;
;;;1978   				tPos_i.y  = (temp_label->tTable[i].tCoord.y + (temp_label->tTable[i].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1979   				tPos_i.y /= temp_label->tTable[i].ulStrength;
;;;1980   
;;;1981   				tPos_j.x  = (temp_label->tTable[j].tCoord.x + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1982   				tPos_j.x /= temp_label->tTable[j].ulStrength;
;;;1983   				tPos_j.y  = (temp_label->tTable[j].tCoord.y + (temp_label->tTable[j].ulStrength>>1))<<POS_BOOST_SHIFT_;
;;;1984   				tPos_j.y /= temp_label->tTable[j].ulStrength;
;;;1985   
;;;1986   				node_i.c = temp_label->tTable[i].tMaxCell.c;
;;;1987   				node_i.r = temp_label->tTable[i].tMaxCell.r;
;;;1988   
;;;1989   //				if(mode == LOCAL_FINGER_MODE)
;;;1990   //					delta_i = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_i.r, node_i.c);
;;;1991   //				else
;;;1992   					delta_i = HAL_READ_DELTA_IMAGE(node_i.r, node_i.c);
;;;1993   
;;;1994   				node_j.c = temp_label->tTable[j].tMaxCell.c;
;;;1995   				node_j.r = temp_label->tTable[j].tMaxCell.r;
;;;1996   
;;;1997   //				if(mode == LOCAL_FINGER_MODE)
;;;1998   //					delta_j = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_j.r, node_j.c);
;;;1999   //				else
;;;2000   					delta_j = HAL_READ_DELTA_IMAGE(node_j.r, node_j.c);
;;;2001   
;;;2002   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
000014  bfc7              ITTEE    GT
000016  eb020040          ADDGT    r0,r2,r0,LSL #1
00001a  9018              STRGT    r0,[sp,#0x60]
;;;2003   				{
;;;2004   					tExpectConflictRect.cs = MIN(temp_label->tTable[i].tRect.cs, temp_label->tTable[j].tRect.cs);
;;;2005   					tExpectConflictRect.ce = MAX(temp_label->tTable[i].tRect.ce, temp_label->tTable[j].tRect.ce);
;;;2006   					tExpectConflictRect.rs = MIN(temp_label->tTable[i].tRect.rs, temp_label->tTable[j].tRect.rs);
;;;2007   					tExpectConflictRect.re = MAX(temp_label->tTable[i].tRect.re, temp_label->tTable[j].tRect.re);
;;;2008   				}
;;;2009   				else
;;;2010   				{
;;;2011   					tExpectConflictRect.cs = MIN(node_i.c, node_j.c);
;;;2012   					tExpectConflictRect.ce = MAX(node_i.c, node_j.c);
;;;2013   					tExpectConflictRect.rs = MIN(node_i.r, node_j.r);
;;;2014   					tExpectConflictRect.re = MAX(node_i.r, node_j.r);
;;;2015   				}
;;;2016   
;;;2017   //				delta_mean = INT16_MIN;
;;;2018   				delta_mean = 0; //kwhan
;;;2019   				ConflictNum = 0; //kwhan
;;;2020   				node_mean.r = (node_i.r + node_j.r)>>1;
;;;2021   				node_mean.c = (node_i.c + node_j.c)>>1;
;;;2022   				for( r=tExpectConflictRect.rs; r<=tExpectConflictRect.re; r++ )
;;;2023   				{
;;;2024   					for( c=tExpectConflictRect.cs; c<= tExpectConflictRect.ce; c++ )
;;;2025   					{
;;;2026   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2027   
;;;2028   						if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;2029   						{
;;;2030   							tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;2031   
;;;2032   							if( (tConflict.tInfo.BF & (_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1))) ==
;;;2033   									(_BV(temp_label->tTable[i].cId - 1) | _BV(temp_label->tTable[j].cId - 1)) )
;;;2034   							{
;;;2035   								int16_t delta_t;
;;;2036   
;;;2037   //								if(mode == LOCAL_FINGER_MODE)
;;;2038   //									delta_t = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c);
;;;2039   //								else
;;;2040   									delta_t = HAL_READ_DELTA_IMAGE(r, c);
;;;2041   								
;;;2042   								delta_mean += delta_t;
;;;2043   								ConflictNum++;
;;;2044   //								if( delta_mean < delta_t)//kwhan
;;;2045   //								{
;;;2046   //									delta_mean = delta_t;
;;;2047   //									node_mean.r = r;
;;;2048   //									node_mean.c = c;
;;;2049   //								}//kwhan
;;;2050   							}
;;;2051   						}
;;;2052   					}
;;;2053   				}
;;;2054   				if(ConflictNum)
;;;2055   					delta_mean /=ConflictNum;
;;;2056   				else
;;;2057   //				if( delta_mean == INT16_MIN )
;;;2058   //				{
;;;2059   //					if(mode == LOCAL_FINGER_MODE)
;;;2060   //						delta_mean = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;2061   //					else
;;;2062   						delta_mean = HAL_READ_DELTA_IMAGE(node_mean.r, node_mean.c);
;;;2063   //				}
;;;2064   
;;;2065   				delta_target = (delta_i*temp_label->tTable[j].ulStrength + delta_j*temp_label->tTable[i].ulStrength)/(temp_label->tTable[i].ulStrength + temp_label->tTable[j].ulStrength);
;;;2066   
;;;2067   //				#ifdef GetAngleLookUpHighResolution
;;;2068   //				angle = algorithm_calc_angle_inter_2points_HighResolution(tPos_j.x-tPos_i.x, tPos_j.y-tPos_i.y) * 0.001;
;;;2069   //				#else
;;;2070   //				angle = algorithm_calc_angle_inter_2points(tPos_j.x-tPos_i.x, tPos_j.y-tPos_i.y) * 0.01;
;;;2071   //				#endif
;;;2072   
;;;2073   //				if( (temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt) && (angle%90 > 20 && angle%90 < 70) )
;;;2074   //				{
;;;2075   //					delta_ratio = (delta_mean * thisModeConf->Label.ucMergeSmallDiagThdPer)/delta_target;
;;;2076   //				}
;;;2077   //				else if( (temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMediumNodeCnt) && (angle%90 > 30 && angle%90 < 60) )
;;;2078   //				{
;;;2079   //					delta_ratio = (delta_mean * thisModeConf->Label.ucMergeMediumDiagThdPer)/delta_target;
;;;2080   //				}
;;;2081   //				else
;;;2082   				{
;;;2083   					delta_ratio = (delta_mean * 100)/delta_target;
;;;2084   				}
;;;2085   
;;;2086   				if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallNodeCnt )
;;;2087   				{
;;;2088   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeSmallThdPer;
;;;2089   				}
;;;2090   				else if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMediumNodeCnt )
;;;2091   				{
;;;2092   //					temp_label->iMergeThdPer = thisModeConf->Label.ucSmallMergeThdPer;
;;;2093   //					temp_label->iMergeThdPer += ((thisModeConf->Label.ucLargeMergeThdPer - thisModeConf->Label.ucSmallMergeThdPer)
;;;2094   //							*(temp_label->usValidCellCnt[_valid_area_idx] - thisModeConf->Label.usSmallTouchThd))
;;;2095   //							/(thisModeConf->Label.usLargeTouchThd - thisModeConf->Label.usSmallTouchThd);
;;;2096   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;2097   				}
;;;2098   				else
;;;2099   				{
;;;2100   					temp_label->iMergeThdPer = thisModeConf->Label.ucMergeMediumThdPer;
;;;2101   				}
;;;2102   #if USED_SPLIT_MERGE_RELIABILITY
;;;2103   				if(abs(node_j.c - node_i.c) == 1 && abs(node_j.r - node_i.r) == 1){
;;;2104   					DiagonalFlag = YES;
;;;2105   					temp_label->iMergeThdPer >>= 1;
;;;2106   				}
;;;2107   				else
;;;2108   					DiagonalFlag= NO;
;;;2109   					
;;;2110   				if(1)
;;;2111   				{
;;;2112   					int dist = 0, MinDist/*, dist_j = 0 ,MinDist_j*/;
;;;2113   					
;;;2114   					MinDist = (thisModeConf->CoordTracking.usMoveDistanceThd << POS_BOOST_SHIFT_);
;;;2115   //					MinDist_j = (thisModeConf->Coord.usMoveDistanceThd << POS_BOOST_SHIFT_);
;;;2116   					match_pl = -1;
;;;2117   //					match_pl_j = -1;
;;;2118   					for(pl = 0; pl < MAX_TOUCH_; pl++)
;;;2119   					{
;;;2120   						if(temp_coord->tPastPos[0].vusS[pl] != 0)
;;;2121   						{
;;;2122   							dist = algorithm_coord_calc_distance(tPos_i,temp_coord->tPastPos[0].tXY[pl]);
;;;2123   							if(MinDist > dist)
;;;2124   							{
;;;2125   								MinDist = dist;
;;;2126   								match_pl = pl;
;;;2127   							}
;;;2128   //							dist_j = algorithm_coord_calc_distance(tPos_j,temp_coord->tPastPos[0].tXY[pl]);
;;;2129   //							if(MinDist_j > dist_j)
;;;2130   //							{
;;;2131   //								MinDist_j = dist_j;
;;;2132   //								match_pl_j = pl;
;;;2133   //							}
;;;2134   						}
;;;2135   					}
;;;2136   					if(match_pl != -1)	//###
;;;2137   					{
;;;2138   //						if(match_pl == match_pl_j)			//same parents
;;;2139   //						{
;;;2140   //							delta_ratio = 100;
;;;2141   //							if(SeparationReliability[match_pl] < SEPARATIONMAX)
;;;2142   //								SeparationReliability[match_pl]++;
;;;2143   //							if(SeparationReliability[match_pl_j] < SEPARATIONMAX)
;;;2144   //								SeparationReliability[match_pl_j]++;
;;;2145   //						}							
;;;2146   //						else
;;;2147   						{
;;;2148   							if(!DiagonalFlag)
;;;2149   							{
;;;2150   								if( temp_label->iMergeThdPer < delta_ratio )
;;;2151   								{
;;;2152   									if(SeparationReliability[match_pl] < SEPARATIONMAX)
;;;2153   										SeparationReliability[match_pl]++;
;;;2154   	//								if(SeparationReliability[match_pl_j] < SEPARATIONMAX)
;;;2155   	//									SeparationReliability[match_pl_j]++;
;;;2156   								}
;;;2157   								else
;;;2158   								{
;;;2159   									if(SeparationReliability[match_pl] > -SEPARATIONMAX)
;;;2160   										SeparationReliability[match_pl]--;
;;;2161   	//								if(SeparationReliability[match_pl_j] > -SEPARATIONMAX)
;;;2162   	//									SeparationReliability[match_pl_j]--;
;;;2163   								}
;;;2164   								if(SeparationReliability[match_pl] > (SEPARATIONMAX>>2))
;;;2165   									delta_ratio += (delta_ratio>>1);
;;;2166   								else if(SeparationReliability[match_pl] < -(SEPARATIONMAX>>2))
;;;2167   									delta_ratio -= (delta_ratio>>1);
;;;2168   							}
;;;2169   						}
;;;2170   					}
;;;2171   				}
;;;2172   #endif  /*USED_SPLIT_MERGE_RELIABILITY*/
;;;2173   #if USED_NOISE_HOPPING_FREQ
;;;2174   				if(temp_label->tTable[i].sMaxCellVal > temp_label->tTable[j].sMaxCellVal)
;;;2175   				{
;;;2176   					delta_max = temp_label->tTable[i].sMaxCellVal;
;;;2177   					delta_min = temp_label->tTable[j].sMaxCellVal;
;;;2178   				}
;;;2179   				else
;;;2180   				{
;;;2181   					delta_max = temp_label->tTable[j].sMaxCellVal;
;;;2182   					delta_min = temp_label->tTable[i].sMaxCellVal;
;;;2183   				}
;;;2184   				
;;;2185   				if((abs(delta_mean - delta_min) < thisModeConf->Label.usLabelPeakValleyDiffTh || (delta_max - delta_min) > thisModeConf->Label.usLabelPeakDiffTh) && temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usMergeLabelSizeTh)
;;;2186   				{
;;;2187   					delta_ratio = temp_label->iMergeThdPer + 1;
;;;2188   				}
;;;2189   #endif /* USED_NOISE_HOPPING_FREQ */
;;;2190   				
;;;2191   				if(thisInfo->WinCertMode > 0){
;;;2192   					if(thisInfo->DrawingDirection > 0)
;;;2193   						temp_label->iMergeThdPer = 90;
;;;2194   					if(thisInfo->DrawingDirection == 2)
;;;2195   						temp_label->iMergeThdPer = delta_ratio;
;;;2196   				}
;;;2197   
;;;2198   				if( temp_label->iMergeThdPer < delta_ratio )
;;;2199   				{
;;;2200   					int k;
;;;2201   					
;;;2202   					for( r=temp_label->tTable[j].tRect.rs; r<=temp_label->tTable[j].tRect.re; r++ )
;;;2203   					{
;;;2204   						for( c=temp_label->tTable[j].tRect.cs; c<=temp_label->tTable[j].tRect.ce; c++ )
;;;2205   						{
;;;2206   							tCell_t tNodePos = { .r = r, .c = c };
;;;2207   
;;;2208   							rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2209   
;;;2210   							if( rLabel_val == temp_label->tTable[j].cId )
;;;2211   							{
;;;2212   //								if(mode == LOCAL_FINGER_MODE)
;;;2213   //								{
;;;2214   //									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2215   //									algorithm_label_Add_NewNode_to_LabelRecord(i, tNodePos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2216   //								}
;;;2217   //								else
;;;2218   								{
;;;2219   									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2220   									algorithm_label_Add_NewNode_to_LabelRecord(i, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2221   								}
;;;2222   							}
;;;2223   							else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;2224   							{
;;;2225   								tConflict.ulValue = HAL_READ_CONFLICT_LABEL_IMAGE(r, c);
;;;2226   
;;;2227   								if( (tConflict.tInfo.BF & _BV(i)) && (tConflict.tInfo.BF & _BV(j)) )
;;;2228   								{
;;;2229   									tConflict.tInfo.NUM--;
;;;2230   									tConflict.tInfo.BF &= ~(tConflict.tInfo.BF & _BV(j));
;;;2231   								}
;;;2232   								else if( tConflict.tInfo.BF & _BV(j) )
;;;2233   								{
;;;2234   									tConflict.tInfo.BF |=  _BV(i);
;;;2235   									tConflict.tInfo.BF &= ~_BV(j);
;;;2236   								}
;;;2237   
;;;2238   								if( tConflict.tInfo.NUM == 1 || tConflict.tInfo.BF == 0 )
;;;2239   								{
;;;2240   									HAL_WRITE_LABEL_IMAGE(r, c, temp_label->tTable[i].cId);
;;;2241   									tConflict.ulValue = 0;
;;;2242   								}
;;;2243   								HAL_WRITE_CONFLICT_LABEL_IMAGE(r, c, tConflict.ulValue);
;;;2244   							}
;;;2245   						}
;;;2246   					}
;;;2247   
;;;2248   					temp_label->tTable[i].tConflictInfo.tInfo.BF |= temp_label->tTable[j].tConflictInfo.tInfo.BF;
;;;2249   					temp_label->tTable[i].tConflictInfo.tInfo.NUM = 0;
;;;2250   					for( k=LOOSE_POSBUF_; k--; )
;;;2251   					{
;;;2252   						if( temp_label->tTable[i].tConflictInfo.tInfo.BF & _BV(k) )
;;;2253   						{
;;;2254   							temp_label->tTable[i].tConflictInfo.tInfo.NUM++;
;;;2255   						}
;;;2256   					}
;;;2257   					// Merge S&R inter 2 Points iTh <== jTh
;;;2258   					{
;;;2259   
;;;2260   					}
;;;2261   					// Clear LabelTable & PosTable 2nd Point
;;;2262   					{
;;;2263   						memset(&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t) );
;;;2264   					}
;;;2265   				}
;;;2266   			}
;;;2267   		}
;;;2268   	}
;;;2269   }
00001c  b021              ADDLE    sp,sp,#0x84
00001e  e8bd8ff0          POPLE    {r4-r11,pc}
000022  bf00              NOP                            ;1959
                  |L5.36|
000024  ebc700c7          RSB      r0,r7,r7,LSL #3       ;1959
000028  eb001147          ADD      r1,r0,r7,LSL #5       ;1959
00002c  9808              LDR      r0,[sp,#0x20]         ;1959
00002e  180d              ADDS     r5,r1,r0              ;1959
000030  6968              LDR      r0,[r5,#0x14]         ;1959
000032  2800              CMP      r0,#0                 ;1959
000034  f0008200          BEQ.W    |L5.1080|
000038  1c78              ADDS     r0,r7,#1              ;1964
00003a  9017              STR      r0,[sp,#0x5c]         ;1964
00003c  2810              CMP      r0,#0x10              ;1964
00003e  f28081fb          BGE.W    |L5.1080|
000042  2001              MOVS     r0,#1                 ;1966
000044  40b8              LSLS     r0,r0,r7              ;2227
000046  9009              STR      r0,[sp,#0x24]         ;2227
                  |L5.72|
000048  9917              LDR      r1,[sp,#0x5c]         ;1966
00004a  2201              MOVS     r2,#1                 ;1966
00004c  8ba8              LDRH     r0,[r5,#0x1c]         ;1966
00004e  fa02f101          LSL      r1,r2,r1              ;1966
000052  4208              TST      r0,r1                 ;1966
000054  9103              STR      r1,[sp,#0xc]          ;1966
000056  f00081e9          BEQ.W    |L5.1068|
00005a  9917              LDR      r1,[sp,#0x5c]         ;1968
00005c  ebc102c1          RSB      r2,r1,r1,LSL #3       ;1968
000060  eb021241          ADD      r2,r2,r1,LSL #5       ;1968
000064  9908              LDR      r1,[sp,#0x20]         ;1968
000066  1856              ADDS     r6,r2,r1              ;1968
000068  6971              LDR      r1,[r6,#0x14]         ;1968
00006a  9104              STR      r1,[sp,#0x10]         ;1968
00006c  2900              CMP      r1,#0                 ;1968
00006e  d07d              BEQ      |L5.364|
000070  68e9              LDR      r1,[r5,#0xc]          ;1976
000072  6968              LDR      r0,[r5,#0x14]         ;1976
000074  9000              STR      r0,[sp,#0]            ;1978
000076  eb010150          ADD      r1,r1,r0,LSR #1       ;1976
00007a  0209              LSLS     r1,r1,#8              ;1976
00007c  fbb1f1f0          UDIV     r1,r1,r0              ;1977
000080  6929              LDR      r1,[r5,#0x10]         ;1978
000082  4ae0              LDR      r2,|L5.1028|
000084  eb010150          ADD      r1,r1,r0,LSR #1       ;1978
000088  0209              LSLS     r1,r1,#8              ;1978
00008a  fbb1f0f0          UDIV     r0,r1,r0              ;1979
00008e  68f1              LDR      r1,[r6,#0xc]          ;1981
000090  9804              LDR      r0,[sp,#0x10]         ;1981
000092  f995c00a          LDRSB    r12,[r5,#0xa]         ;1986
000096  eb010050          ADD      r0,r1,r0,LSR #1       ;1981
00009a  9904              LDR      r1,[sp,#0x10]         ;1982
00009c  0200              LSLS     r0,r0,#8              ;1981
00009e  fbb0f0f1          UDIV     r0,r0,r1              ;1982
0000a2  6931              LDR      r1,[r6,#0x10]         ;1983
0000a4  9804              LDR      r0,[sp,#0x10]         ;1983
0000a6  eb010050          ADD      r0,r1,r0,LSR #1       ;1983
0000aa  9904              LDR      r1,[sp,#0x10]         ;1984
0000ac  0200              LSLS     r0,r0,#8              ;1983
0000ae  fbb0f0f1          UDIV     r0,r0,r1              ;1984
0000b2  f995000b          LDRSB    r0,[r5,#0xb]          ;1987
0000b6  eb001100          ADD      r1,r0,r0,LSL #4       ;1992
0000ba  eb011140          ADD      r1,r1,r0,LSL #5       ;1992
0000be  eb020181          ADD      r1,r2,r1,LSL #2       ;1992
0000c2  eb01014c          ADD      r1,r1,r12,LSL #1      ;1992
0000c6  f5014130          ADD      r1,r1,#0xb000         ;1992
0000ca  f9b11956          LDRSH    r1,[r1,#0x956]        ;1992
0000ce  910f              STR      r1,[sp,#0x3c]         ;1994
0000d0  f996100b          LDRSB    r1,[r6,#0xb]          ;1995
0000d4  f996400a          LDRSB    r4,[r6,#0xa]          ;1994
0000d8  eb011301          ADD      r3,r1,r1,LSL #4       ;2000
0000dc  eb031341          ADD      r3,r3,r1,LSL #5       ;2000
0000e0  eb020283          ADD      r2,r2,r3,LSL #2       ;2000
0000e4  eb020244          ADD      r2,r2,r4,LSL #1       ;2000
0000e8  f5024230          ADD      r2,r2,#0xb000         ;2000
0000ec  4bc4              LDR      r3,|L5.1024|
0000ee  f9b22956          LDRSH    r2,[r2,#0x956]        ;2000
0000f2  9216              STR      r2,[sp,#0x58]         ;2000
0000f4  9a18              LDR      r2,[sp,#0x60]         ;2002
0000f6  f8b222f2          LDRH     r2,[r2,#0x2f2]        ;2002
0000fa  920b              STR      r2,[sp,#0x2c]         ;2002
0000fc  685b              LDR      r3,[r3,#4]            ;2002  ; thisModeConf
0000fe  930a              STR      r3,[sp,#0x28]         ;2002
000100  f8b3303f          LDRH     r3,[r3,#0x3f]         ;2002
000104  9319              STR      r3,[sp,#0x64]         ;2002
000106  429a              CMP      r2,r3                 ;2002
000108  d25f              BCS      |L5.458|
00010a  f9952004          LDRSB    r2,[r5,#4]            ;2004
00010e  f9963004          LDRSB    r3,[r6,#4]            ;2004
000112  429a              CMP      r2,r3                 ;2004
000114  bfa8              IT       GE                    ;2004
000116  461a              MOVGE    r2,r3                 ;2004
000118  9b13              LDR      r3,[sp,#0x4c]         ;2004
00011a  f9958005          LDRSB    r8,[r5,#5]            ;2005
00011e  f3624317          BFI      r3,r2,#16,#8          ;2004
000122  f9962005          LDRSB    r2,[r6,#5]            ;2005
000126  4590              CMP      r8,r2                 ;2005
000128  bfc8              IT       GT                    ;2005
00012a  4642              MOVGT    r2,r8                 ;2005
00012c  f362631f          BFI      r3,r2,#24,#8          ;2005
000130  f9958002          LDRSB    r8,[r5,#2]            ;2006
000134  f9962002          LDRSB    r2,[r6,#2]            ;2006
000138  4590              CMP      r8,r2                 ;2006
00013a  bfb8              IT       LT                    ;2006
00013c  4642              MOVLT    r2,r8                 ;2006
00013e  f3620307          BFI      r3,r2,#0,#8           ;2006
000142  f9958003          LDRSB    r8,[r5,#3]            ;2007
000146  f9962003          LDRSB    r2,[r6,#3]            ;2007
00014a  4590              CMP      r8,r2                 ;2007
00014c  bfc8              IT       GT                    ;2007
00014e  4642              MOVGT    r2,r8                 ;2007
                  |L5.336|
000150  f362230f          BFI      r3,r2,#8,#8           ;2007
000154  4408              ADD      r0,r0,r1              ;2020
000156  9313              STR      r3,[sp,#0x4c]         ;2018
000158  1040              ASRS     r0,r0,#1              ;2020
00015a  2300              MOVS     r3,#0                 ;2018
00015c  901a              STR      r0,[sp,#0x68]         ;2021
00015e  eb0c0004          ADD      r0,r12,r4             ;2021
000162  1040              ASRS     r0,r0,#1              ;2021
000164  901c              STR      r0,[sp,#0x70]         ;2022
000166  461a              MOV      r2,r3                 ;2019
000168  9813              LDR      r0,[sp,#0x4c]         ;2022
00016a  e000              B        |L5.366|
                  |L5.364|
00016c  e025              B        |L5.442|
                  |L5.366|
00016e  b241              SXTB     r1,r0                 ;2022
000170  f3402007          SBFX     r0,r0,#8,#8           ;2022
000174  9012              STR      r0,[sp,#0x48]         ;2022
000176  4288              CMP      r0,r1                 ;2022
000178  db6d              BLT      |L5.598|
00017a  9813              LDR      r0,[sp,#0x4c]         ;2014
00017c  f3404007          SBFX     r0,r0,#16,#8          ;2014
000180  901b              STR      r0,[sp,#0x6c]         ;2014
000182  9813              LDR      r0,[sp,#0x4c]         ;2014
000184  ea4f6c20          ASR      r12,r0,#24            ;2014
                  |L5.392|
000188  981b              LDR      r0,[sp,#0x6c]         ;2024
00018a  4584              CMP      r12,r0                ;2024
00018c  db5a              BLT      |L5.580|
00018e  eb011401          ADD      r4,r1,r1,LSL #4       ;2026
000192  eb041941          ADD      r9,r4,r1,LSL #5       ;2026
000196  4c9b              LDR      r4,|L5.1028|
000198  eb040889          ADD      r8,r4,r9,LSL #2       ;2040
00019c  f8cd8014          STR      r8,[sp,#0x14]         ;2026
0001a0  eb040849          ADD      r8,r4,r9,LSL #1       ;2026
0001a4  eb0409c9          ADD      r9,r4,r9,LSL #3       ;2030
                  |L5.424|
0001a8  eb080400          ADD      r4,r8,r0              ;2026
0001ac  f5044450          ADD      r4,r4,#0xd000         ;2026
0001b0  f8944f3b          LDRB     r4,[r4,#0xf3b]        ;2026
0001b4  2c3f              CMP      r4,#0x3f              ;2028
0001b6  d142              BNE      |L5.574|
0001b8  e01d              B        |L5.502|
                  |L5.442|
0001ba  9903              LDR      r1,[sp,#0xc]          ;1970
0001bc  4388              BICS     r0,r0,r1              ;1970
0001be  83a8              STRH     r0,[r5,#0x1c]         ;1970
0001c0  7fa8              LDRB     r0,[r5,#0x1e]         ;1971
0001c2  1e40              SUBS     r0,r0,#1              ;1971
0001c4  77a8              STRB     r0,[r5,#0x1e]         ;1971
0001c6  f000b931          B.W      |L5.1068|
                  |L5.458|
0001ca  45a4              CMP      r12,r4                ;2011
0001cc  bfb4              ITE      LT                    ;2011
0001ce  4662              MOVLT    r2,r12                ;2011
0001d0  4622              MOVGE    r2,r4                 ;2011
0001d2  9b13              LDR      r3,[sp,#0x4c]         ;2011
0001d4  f3624317          BFI      r3,r2,#16,#8          ;2011
0001d8  bfcc              ITE      GT                    ;2011
0001da  4662              MOVGT    r2,r12                ;2011
0001dc  4622              MOVLE    r2,r4                 ;2011
0001de  f362631f          BFI      r3,r2,#24,#8          ;2011
0001e2  4288              CMP      r0,r1                 ;2013
0001e4  bfb4              ITE      LT                    ;2013
0001e6  4602              MOVLT    r2,r0                 ;2013
0001e8  460a              MOVGE    r2,r1                 ;2013
0001ea  f3620307          BFI      r3,r2,#0,#8           ;2013
0001ee  bfcc              ITE      GT                    ;2014
0001f0  4602              MOVGT    r2,r0                 ;2014
0001f2  460a              MOVLE    r2,r1                 ;2014
0001f4  e7ac              B        |L5.336|
                  |L5.502|
0001f6  eb090480          ADD      r4,r9,r0,LSL #2       ;2030
0001fa  f50444c0          ADD      r4,r4,#0x6000         ;2030
0001fe  f896e001          LDRB     lr,[r6,#1]            ;2032
000202  f8b4ad8c          LDRH     r10,[r4,#0xd8c]       ;2030
000206  786c              LDRB     r4,[r5,#1]            ;2032
000208  f1ae0e01          SUB      lr,lr,#1              ;2032
00020c  f1a40b01          SUB      r11,r4,#1             ;2032
000210  f04f0401          MOV      r4,#1                 ;2032
000214  fa04fb0b          LSL      r11,r4,r11            ;2032
000218  fa04f40e          LSL      r4,r4,lr              ;2032
00021c  ea4b0404          ORR      r4,r11,r4             ;2032
000220  fa1ffa8a          UXTH     r10,r10               ;2032
000224  ea34040a          BICS     r4,r4,r10             ;2032
000228  d109              BNE      |L5.574|
00022a  9c05              LDR      r4,[sp,#0x14]         ;2040
00022c  1c52              ADDS     r2,r2,#1              ;2042
00022e  eb040440          ADD      r4,r4,r0,LSL #1       ;2040
000232  f5044430          ADD      r4,r4,#0xb000         ;2040
000236  b2d2              UXTB     r2,r2                 ;2043
000238  f9b44956          LDRSH    r4,[r4,#0x956]        ;2040
00023c  4423              ADD      r3,r3,r4              ;2042
                  |L5.574|
00023e  1c40              ADDS     r0,r0,#1              ;2043
000240  4584              CMP      r12,r0                ;2043
000242  dab1              BGE      |L5.424|
                  |L5.580|
000244  9812              LDR      r0,[sp,#0x48]         ;2043
000246  1c49              ADDS     r1,r1,#1              ;2043
000248  4288              CMP      r0,r1                 ;2043
00024a  da9d              BGE      |L5.392|
00024c  2a00              CMP      r2,#0                 ;2054
00024e  bf18              IT       NE                    ;2055
000250  fb93f0f2          SDIVNE   r0,r3,r2              ;2055
000254  d10e              BNE      |L5.628|
                  |L5.598|
000256  981a              LDR      r0,[sp,#0x68]         ;2062
000258  eb001100          ADD      r1,r0,r0,LSL #4       ;2062
00025c  eb011140          ADD      r1,r1,r0,LSL #5       ;2062
000260  4868              LDR      r0,|L5.1028|
000262  eb000181          ADD      r1,r0,r1,LSL #2       ;2062
000266  981c              LDR      r0,[sp,#0x70]         ;2062
000268  eb010040          ADD      r0,r1,r0,LSL #1       ;2062
00026c  f5004030          ADD      r0,r0,#0xb000         ;2062
000270  f9b00956          LDRSH    r0,[r0,#0x956]        ;2062
                  |L5.628|
000274  9a0f              LDR      r2,[sp,#0x3c]         ;2065
000276  9904              LDR      r1,[sp,#0x10]         ;2065
000278  fb01f302          MUL      r3,r1,r2              ;2065
00027c  9a16              LDR      r2,[sp,#0x58]         ;2065
00027e  9900              LDR      r1,[sp,#0]            ;2065
000280  fb023301          MLA      r3,r2,r1,r3           ;2065
000284  460a              MOV      r2,r1                 ;2065
000286  9904              LDR      r1,[sp,#0x10]         ;2065
000288  4411              ADD      r1,r1,r2              ;2065
00028a  fbb3f1f1          UDIV     r1,r3,r1              ;2065
00028e  2264              MOVS     r2,#0x64              ;2083
000290  4350              MULS     r0,r2,r0              ;2083
000292  fb90f0f1          SDIV     r0,r0,r1              ;2083
000296  9b19              LDR      r3,[sp,#0x64]         ;2086
000298  9a0b              LDR      r2,[sp,#0x2c]         ;2086
00029a  4959              LDR      r1,|L5.1024|
00029c  429a              CMP      r2,r3                 ;2086
00029e  9a0a              LDR      r2,[sp,#0x28]         ;2086
0002a0  bf34              ITE      CC                    ;2088
0002a2  f8923043          LDRBCC   r3,[r2,#0x43]         ;2088
0002a6  f8923044          LDRBCS   r3,[r2,#0x44]         ;2096
0002aa  9a08              LDR      r2,[sp,#0x20]         ;2096
0002ac  f8c2331f          STR      r3,[r2,#0x31f]        ;2096
0002b0  6889              LDR      r1,[r1,#8]            ;2191  ; thisInfo
0002b2  f5015180          ADD      r1,r1,#0x1000         ;2191
0002b6  f9912fa8          LDRSB    r2,[r1,#0xfa8]        ;2191
0002ba  2a00              CMP      r2,#0                 ;2191
0002bc  dd0d              BLE      |L5.730|
0002be  f8912fa9          LDRB     r2,[r1,#0xfa9]        ;2192
0002c2  b152              CBZ      r2,|L5.730|
0002c4  9b08              LDR      r3,[sp,#0x20]         ;2193
0002c6  225a              MOVS     r2,#0x5a              ;2193
0002c8  f8c3231f          STR      r2,[r3,#0x31f]        ;2193
0002cc  f8911fa9          LDRB     r1,[r1,#0xfa9]        ;2194
0002d0  2902              CMP      r1,#2                 ;2194
0002d2  bf04              ITT      EQ                    ;2195
0002d4  9908              LDREQ    r1,[sp,#0x20]         ;2195
0002d6  f8c1031f          STREQ    r0,[r1,#0x31f]        ;2195
                  |L5.730|
0002da  9908              LDR      r1,[sp,#0x20]         ;2198
0002dc  f8d1131f          LDR      r1,[r1,#0x31f]        ;2198
0002e0  4281              CMP      r1,r0                 ;2198
0002e2  da7d              BGE      |L5.992|
0002e4  f9968002          LDRSB    r8,[r6,#2]            ;2202
0002e8  f9960003          LDRSB    r0,[r6,#3]            ;2202
0002ec  4540              CMP      r0,r8                 ;2202
0002ee  db7b              BLT      |L5.1000|
                  |L5.752|
0002f0  f9964004          LDRSB    r4,[r6,#4]            ;2204
0002f4  f9960005          LDRSB    r0,[r6,#5]            ;2204
0002f8  42a0              CMP      r0,r4                 ;2204
0002fa  db6c              BLT      |L5.982|
0002fc  eb081008          ADD      r0,r8,r8,LSL #4       ;2026
000300  4940              LDR      r1,|L5.1028|
000302  eb001048          ADD      r0,r0,r8,LSL #5       ;2026
000306  eb010b80          ADD      r11,r1,r0,LSL #2      ;2040
00030a  eb010940          ADD      r9,r1,r0,LSL #1       ;2026
00030e  eb0100c0          ADD      r0,r1,r0,LSL #3       ;2030
000312  fa4ffa88          SXTB     r10,r8                ;2206
000316  9005              STR      r0,[sp,#0x14]         ;2030
                  |L5.792|
000318  eb090004          ADD      r0,r9,r4              ;2208
00031c  f5004250          ADD      r2,r0,#0xd000         ;2208
000320  f9963001          LDRSB    r3,[r6,#1]            ;2210
000324  f8920f3b          LDRB     r0,[r2,#0xf3b]        ;2208
000328  f3640107          BFI      r1,r4,#0,#8           ;2030
00032c  f36a210f          BFI      r1,r10,#8,#8          ;2030
000330  4283              CMP      r3,r0                 ;2210
000332  d110              BNE      |L5.854|
000334  7868              LDRB     r0,[r5,#1]            ;2219
000336  f8820f3b          STRB     r0,[r2,#0xf3b]        ;2219
00033a  9a20              LDR      r2,[sp,#0x80]         ;2220
00033c  2000              MOVS     r0,#0                 ;2220
00033e  e9cd0200          STRD     r0,r2,[sp,#0]         ;2220
000342  eb0b0044          ADD      r0,r11,r4,LSL #1      ;2220
000346  f64b1256          MOV      r2,#0xb956            ;2220
00034a  5e82              LDRSH    r2,[r0,r2]            ;2220
00034c  b2f8              UXTB     r0,r7                 ;2220
00034e  2300              MOVS     r3,#0                 ;2220
000350  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000354  e03a              B        |L5.972|
                  |L5.854|
000356  283f              CMP      r0,#0x3f              ;2223
000358  d138              BNE      |L5.972|
00035a  9805              LDR      r0,[sp,#0x14]         ;2225
00035c  f8ddc024          LDR      r12,[sp,#0x24]        ;2227
000360  eb000084          ADD      r0,r0,r4,LSL #2       ;2225
000364  f50043c0          ADD      r3,r0,#0x6000         ;2225
000368  f8d30d8c          LDR      r0,[r3,#0xd8c]        ;2225
00036c  b281              UXTH     r1,r0                 ;2225
00036e  ea110f0c          TST      r1,r12                ;2227
000372  f8ddc00c          LDR      r12,[sp,#0xc]         ;2232
000376  ea010c0c          AND      r12,r1,r12            ;2232
00037a  d00d              BEQ      |L5.920|
00037c  f1bc0f00          CMP      r12,#0                ;2227
000380  d017              BEQ      |L5.946|
000382  ea4f4e10          LSR      lr,r0,#16             ;2227
000386  f1ae0e01          SUB      lr,lr,#1              ;2227
00038a  f36e4017          BFI      r0,lr,#16,#8          ;2227
00038e  ea21010c          BIC      r1,r1,r12             ;2230
000392  f361000f          BFI      r0,r1,#0,#16          ;2230
000396  e00c              B        |L5.946|
                  |L5.920|
000398  f1bc0f00          CMP      r12,#0                ;2232
00039c  d009              BEQ      |L5.946|
00039e  f8ddc024          LDR      r12,[sp,#0x24]        ;2234
0003a2  ea41010c          ORR      r1,r1,r12             ;2234
0003a6  f8ddc00c          LDR      r12,[sp,#0xc]         ;2235
0003aa  ea21010c          BIC      r1,r1,r12             ;2235
0003ae  f361000f          BFI      r0,r1,#0,#16          ;2235
                  |L5.946|
0003b2  f3c04107          UBFX     r1,r0,#16,#8          ;2235
0003b6  2901              CMP      r1,#1                 ;2238
0003b8  bf1c              ITT      NE                    ;2238
0003ba  b281              UXTHNE   r1,r0                 ;2238
0003bc  2900              CMPNE    r1,#0                 ;2238
0003be  d103              BNE      |L5.968|
0003c0  7868              LDRB     r0,[r5,#1]            ;2240
0003c2  f8820f3b          STRB     r0,[r2,#0xf3b]        ;2240
0003c6  2000              MOVS     r0,#0                 ;2241
                  |L5.968|
0003c8  f8c30d8c          STR      r0,[r3,#0xd8c]        ;2243
                  |L5.972|
0003cc  f9960005          LDRSB    r0,[r6,#5]            ;2245
0003d0  1c64              ADDS     r4,r4,#1              ;2245
0003d2  42a0              CMP      r0,r4                 ;2245
0003d4  daa0              BGE      |L5.792|
                  |L5.982|
0003d6  f9960003          LDRSB    r0,[r6,#3]            ;2245
0003da  f1080801          ADD      r8,r8,#1              ;2245
0003de  e001              B        |L5.996|
                  |L5.992|
0003e0  e024              B        |L5.1068|
0003e2  e001              B        |L5.1000|
                  |L5.996|
0003e4  4540              CMP      r0,r8                 ;2245
0003e6  da83              BGE      |L5.752|
                  |L5.1000|
0003e8  8ba9              LDRH     r1,[r5,#0x1c]         ;2248
0003ea  8bb0              LDRH     r0,[r6,#0x1c]         ;2248
0003ec  ea410200          ORR      r2,r1,r0              ;2248
0003f0  83aa              STRH     r2,[r5,#0x1c]         ;2248
0003f2  2000              MOVS     r0,#0                 ;2249
0003f4  77a8              STRB     r0,[r5,#0x1e]         ;2249
0003f6  2110              MOVS     r1,#0x10              ;2250
0003f8  2001              MOVS     r0,#1                 ;2250
0003fa  4603              MOV      r3,r0                 ;1966
                  |L5.1020|
0003fc  1e49              SUBS     r1,r1,#1              ;1966
0003fe  e003              B        |L5.1032|
                  |L5.1024|
                          DCD      ||.data||
                  |L5.1028|
                          DCD      FullSharedBuff
                  |L5.1032|
000408  fa03fc01          LSL      r12,r3,r1             ;2252
00040c  ea120f0c          TST      r2,r12                ;2252
000410  d005              BEQ      |L5.1054|
000412  f895c01e          LDRB     r12,[r5,#0x1e]        ;2254
000416  f10c0c01          ADD      r12,r12,#1            ;2254
00041a  f885c01e          STRB     r12,[r5,#0x1e]        ;2254
                  |L5.1054|
00041e  1c40              ADDS     r0,r0,#1              ;2254
000420  2810              CMP      r0,#0x10              ;2254
000422  ddeb              BLE      |L5.1020|
000424  1c70              ADDS     r0,r6,#1              ;2263
000426  2127              MOVS     r1,#0x27              ;2263
000428  f7fffffe          BL       __aeabi_memclr
                  |L5.1068|
00042c  9817              LDR      r0,[sp,#0x5c]         ;2265
00042e  1c40              ADDS     r0,r0,#1              ;2265
000430  9017              STR      r0,[sp,#0x5c]         ;2265
000432  2810              CMP      r0,#0x10              ;2265
000434  f6ffae08          BLT      |L5.72|
                  |L5.1080|
000438  9808              LDR      r0,[sp,#0x20]         ;2265
00043a  1c7f              ADDS     r7,r7,#1              ;2265
00043c  7800              LDRB     r0,[r0,#0]            ;2265
00043e  4287              CMP      r7,r0                 ;2265
000440  f6ffadf0          BLT      |L5.36|
000444  b021              ADD      sp,sp,#0x84
000446  e8bd8ff0          POP      {r4-r11,pc}
;;;2270   
                          ENDP


                          AREA ||i.algorithm_label_Merge_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Merge_PostProcess PROC
;;;2270   
;;;2271   void algorithm_label_Merge_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2272   {
000004  b09e              SUB      sp,sp,#0x78
000006  4606              MOV      r6,r0
;;;2273   	int i, j, l, r, c;
;;;2274   	uint8_t ucDeleteLabel_num = 0;
000008  2000              MOVS     r0,#0
;;;2275       uint8_t rLabel_val;
;;;2276   
;;;2277   	tLabelInfo_t	*temp_label;
;;;2278   	temp_label = &thisInfo->tLabel;
00000a  901b              STR      r0,[sp,#0x6c]
00000c  48c0              LDR      r0,|L6.784|
;;;2279   
;;;2280   	for( i=_label_start_idx; i<temp_label->ucNum-1; i++ )
00000e  460c              MOV      r4,r1
000010  460f              MOV      r7,r1                 ;2272
000012  6880              LDR      r0,[r0,#8]            ;2278  ; thisInfo
000014  303a              ADDS     r0,r0,#0x3a           ;2278
000016  9016              STR      r0,[sp,#0x58]
000018  7800              LDRB     r0,[r0,#0]
00001a  1e40              SUBS     r0,r0,#1
00001c  42a0              CMP      r0,r4
00001e  dd2d              BLE      |L6.124|
                  |L6.32|
;;;2281   	{
;;;2282   		if( temp_label->tTable[i].ulStrength == 0 )
000020  ebc400c4          RSB      r0,r4,r4,LSL #3
000024  eb001144          ADD      r1,r0,r4,LSL #5
000028  9816              LDR      r0,[sp,#0x58]
00002a  180b              ADDS     r3,r1,r0
00002c  6958              LDR      r0,[r3,#0x14]
00002e  b9f8              CBNZ     r0,|L6.112|
;;;2283   		{
;;;2284   			for( j=i+1; j<temp_label->ucNum; j++ )
000030  9816              LDR      r0,[sp,#0x58]
000032  1c62              ADDS     r2,r4,#1
000034  f890c000          LDRB     r12,[r0,#0]
000038  4594              CMP      r12,r2
00003a  dd19              BLE      |L6.112|
                  |L6.60|
;;;2285   			{
;;;2286   				if( temp_label->tTable[j].ulStrength != 0 )
00003c  ebc200c2          RSB      r0,r2,r2,LSL #3
000040  9d16              LDR      r5,[sp,#0x58]
000042  eb001042          ADD      r0,r0,r2,LSL #5
000046  4428              ADD      r0,r0,r5
000048  6940              LDR      r0,[r0,#0x14]
00004a  b170              CBZ      r0,|L6.106|
;;;2287   				{
;;;2288   					temp_label->tTable[i] = temp_label->tTable[j];
00004c  ebc200c2          RSB      r0,r2,r2,LSL #3
000050  eb001142          ADD      r1,r0,r2,LSL #5
000054  440d              ADD      r5,r5,r1
000056  1c69              ADDS     r1,r5,#1
000058  1c58              ADDS     r0,r3,#1
00005a  2227              MOVS     r2,#0x27
00005c  f7fffffe          BL       __aeabi_memcpy
;;;2289   					memset((void *)&temp_label->tTable[j], 0x00, sizeof(tLabelTable_t));
000060  1c68              ADDS     r0,r5,#1
000062  2127              MOVS     r1,#0x27
000064  f7fffffe          BL       __aeabi_memclr
;;;2290   
;;;2291   					break;
000068  e002              B        |L6.112|
                  |L6.106|
00006a  1c52              ADDS     r2,r2,#1
00006c  4594              CMP      r12,r2
00006e  dce5              BGT      |L6.60|
                  |L6.112|
000070  9816              LDR      r0,[sp,#0x58]
000072  1c64              ADDS     r4,r4,#1
000074  7800              LDRB     r0,[r0,#0]
000076  1e40              SUBS     r0,r0,#1
000078  42a0              CMP      r0,r4
00007a  dcd1              BGT      |L6.32|
                  |L6.124|
;;;2292   				}
;;;2293   			}
;;;2294   		}
;;;2295   	}
;;;2296   
;;;2297   	for( l=_label_start_idx; l<temp_label->ucNum; l++ )
00007c  9816              LDR      r0,[sp,#0x58]
00007e  970d              STR      r7,[sp,#0x34]
000080  7800              LDRB     r0,[r0,#0]
000082  42b8              CMP      r0,r7
000084  f340813a          BLE.W    |L6.764|
;;;2298   	{
;;;2299   		if( temp_label->tTable[l].ulStrength != 0 )
;;;2300   		{
;;;2301   			int _Id = temp_label->tTable[l].cId;
;;;2302   			if( _Id != (l+1) )
;;;2303   			{
;;;2304   				for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
000088  9816              LDR      r0,[sp,#0x58]
;;;2305   				{
;;;2306   					for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
00008a  4ca2              LDR      r4,|L6.788|
00008c  eb000886          ADD      r8,r0,r6,LSL #2       ;2304
                  |L6.144|
000090  980d              LDR      r0,[sp,#0x34]         ;2299
000092  ebc001c0          RSB      r1,r0,r0,LSL #3       ;2299
000096  eb011140          ADD      r1,r1,r0,LSL #5       ;2299
00009a  9816              LDR      r0,[sp,#0x58]         ;2299
00009c  180d              ADDS     r5,r1,r0              ;2299
00009e  6968              LDR      r0,[r5,#0x14]         ;2299
0000a0  2800              CMP      r0,#0                 ;2299
0000a2  f000811e          BEQ.W    |L6.738|
0000a6  980d              LDR      r0,[sp,#0x34]         ;2302
0000a8  f9951001          LDRSB    r1,[r5,#1]            ;2301
0000ac  1c40              ADDS     r0,r0,#1              ;2302
0000ae  900e              STR      r0,[sp,#0x38]         ;2302
0000b0  4281              CMP      r1,r0                 ;2302
0000b2  d027              BEQ      |L6.260|
0000b4  f998c272          LDRSB    r12,[r8,#0x272]       ;2304
0000b8  f9980273          LDRSB    r0,[r8,#0x273]        ;2304
0000bc  4560              CMP      r0,r12                ;2304
0000be  db21              BLT      |L6.260|
;;;2307   					{
;;;2308   						rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2309   
;;;2310   						if( rLabel_val == _Id )
;;;2311   						{
;;;2312   							HAL_WRITE_LABEL_IMAGE(r, c, l+1);
0000c0  980e              LDR      r0,[sp,#0x38]
0000c2  f64d763b          MOV      r6,#0xdf3b            ;2306
0000c6  b2c3              UXTB     r3,r0
                  |L6.200|
0000c8  f9980274          LDRSB    r0,[r8,#0x274]        ;2306
0000cc  f9982275          LDRSB    r2,[r8,#0x275]        ;2306
0000d0  1a12              SUBS     r2,r2,r0              ;2306
0000d2  1c57              ADDS     r7,r2,#1              ;2306
0000d4  2f00              CMP      r7,#0                 ;2306
0000d6  dd0f              BLE      |L6.248|
0000d8  eb0c170c          ADD      r7,r12,r12,LSL #4     ;2306
0000dc  eb07174c          ADD      r7,r7,r12,LSL #5      ;2306
0000e0  eb040747          ADD      r7,r4,r7,LSL #1       ;2306
0000e4  4438              ADD      r0,r0,r7              ;2306
0000e6  4430              ADD      r0,r0,r6              ;2306
0000e8  1c52              ADDS     r2,r2,#1              ;2306
                  |L6.234|
0000ea  7807              LDRB     r7,[r0,#0]            ;2310
0000ec  428f              CMP      r7,r1                 ;2310
0000ee  bf08              IT       EQ
0000f0  7003              STRBEQ   r3,[r0,#0]
0000f2  1c40              ADDS     r0,r0,#1
0000f4  1e52              SUBS     r2,r2,#1
0000f6  d1f8              BNE      |L6.234|
                  |L6.248|
;;;2313   						}
0000f8  f9980273          LDRSB    r0,[r8,#0x273]
0000fc  f10c0c01          ADD      r12,r12,#1
000100  4560              CMP      r0,r12
000102  dae1              BGE      |L6.200|
                  |L6.260|
;;;2314   					}
;;;2315   				}
;;;2316   			}
;;;2317   
;;;2318   			memset((void *)&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
000104  1c68              ADDS     r0,r5,#1
000106  2127              MOVS     r1,#0x27
000108  f7fffffe          BL       __aeabi_memclr
;;;2319   			temp_label->tTable[l].cId = l+1;
00010c  980e              LDR      r0,[sp,#0x38]
00010e  7068              STRB     r0,[r5,#1]
;;;2320   			temp_label->tTable[l].tRect.cs = COL_MAX-1;
000110  205f              MOVS     r0,#0x5f
000112  7128              STRB     r0,[r5,#4]
;;;2321   			temp_label->tTable[l].tRect.rs = ROW_MAX-1;
000114  202f              MOVS     r0,#0x2f
000116  70a8              STRB     r0,[r5,#2]
;;;2322   
;;;2323   			for( r=temp_label->tValidRect[_valid_area_idx].rs; r<=temp_label->tValidRect[_valid_area_idx].re; r++ )
000118  f9980272          LDRSB    r0,[r8,#0x272]
00011c  9017              STR      r0,[sp,#0x5c]
00011e  f9981273          LDRSB    r1,[r8,#0x273]
000122  4281              CMP      r1,r0
000124  f2c080e1          BLT.W    |L6.746|
;;;2324   			{
;;;2325   				for( c=temp_label->tValidRect[_valid_area_idx].cs; c<=temp_label->tValidRect[_valid_area_idx].ce; c++ )
;;;2326   				{
;;;2327   					tCell_t tNodePos = { .r = r, .c = c };
;;;2328   
;;;2329   					rLabel_val = HAL_READ_LABEL_IMAGE(r, c);
;;;2330   
;;;2331   					if( rLabel_val == l+1 )
;;;2332   					{
;;;2333   //						if(mode == LOCAL_FINGER_MODE)
;;;2334   //							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2335   //						else
;;;2336   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, HAL_READ_DELTA_IMAGE(r, c), NO, NO, mode);
;;;2337   					}
;;;2338   					else if( rLabel_val == LABEL_CONFLICT_MARKER )
;;;2339   					{
;;;2340   						int d;
;;;2341   						tConflictInfo_t tConflict;
;;;2342   						int16_t DeltaBuf[LOOSE_POSBUF_] = {0};
;;;2343   						int r_i,c_i;
;;;2344   						uint8_t neighbor_label_id, neighbor_label_cnt;
;;;2345   						int16_t neighbor_delta,delta_sum;
;;;2346   
;;;2347   						algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tNodePos, &tConflict, mode);
;;;2348   
;;;2349   						if( tConflict.tInfo.BF & _BV(l) )
000128  990d              LDR      r1,[sp,#0x34]
00012a  2001              MOVS     r0,#1
00012c  4088              LSLS     r0,r0,r1
00012e  9013              STR      r0,[sp,#0x4c]
                  |L6.304|
000130  f9985274          LDRSB    r5,[r8,#0x274]        ;2325
000134  f9980275          LDRSB    r0,[r8,#0x275]        ;2325
000138  42a8              CMP      r0,r5                 ;2325
00013a  db7c              BLT      |L6.566|
00013c  9817              LDR      r0,[sp,#0x5c]         ;2306
00013e  eb001100          ADD      r1,r0,r0,LSL #4       ;2306
000142  eb011040          ADD      r0,r1,r0,LSL #5       ;2306
000146  eb040140          ADD      r1,r4,r0,LSL #1       ;2306
00014a  9111              STR      r1,[sp,#0x44]         ;2273
00014c  9917              LDR      r1,[sp,#0x5c]         ;2327
00014e  eb040080          ADD      r0,r4,r0,LSL #2       ;2336
000152  b24e              SXTB     r6,r1                 ;2327
000154  900f              STR      r0,[sp,#0x3c]         ;2336
                  |L6.342|
000156  b26f              SXTB     r7,r5                 ;2327
000158  f3670007          BFI      r0,r7,#0,#8           ;2327
00015c  f366200f          BFI      r0,r6,#8,#8           ;2327
000160  900a              STR      r0,[sp,#0x28]         ;2327
000162  9811              LDR      r0,[sp,#0x44]         ;2329
000164  990e              LDR      r1,[sp,#0x38]         ;2331
000166  4428              ADD      r0,r0,r5              ;2329
000168  f5004050          ADD      r0,r0,#0xd000         ;2329
00016c  f8900f3b          LDRB     r0,[r0,#0xf3b]        ;2329
000170  4288              CMP      r0,r1                 ;2331
000172  d110              BNE      |L6.406|
000174  9920              LDR      r1,[sp,#0x80]         ;2336
000176  2000              MOVS     r0,#0                 ;2336
000178  e9cd0100          STRD     r0,r1,[sp,#0]         ;2336
00017c  980f              LDR      r0,[sp,#0x3c]         ;2336
00017e  f64b1256          MOV      r2,#0xb956            ;2336
000182  eb000045          ADD      r0,r0,r5,LSL #1       ;2336
000186  2300              MOVS     r3,#0                 ;2336
000188  5e82              LDRSH    r2,[r0,r2]            ;2336
00018a  980d              LDR      r0,[sp,#0x34]         ;2336
00018c  990a              LDR      r1,[sp,#0x28]         ;2336
00018e  b2c0              UXTB     r0,r0                 ;2336
000190  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000194  e096              B        |L6.708|
                  |L6.406|
000196  283f              CMP      r0,#0x3f              ;2338
000198  d17e              BNE      |L6.664|
00019a  f04f0900          MOV      r9,#0                 ;2342
00019e  f8cd9008          STR      r9,[sp,#8]            ;2342
0001a2  f8cd901c          STR      r9,[sp,#0x1c]         ;2342
0001a6  9920              LDR      r1,[sp,#0x80]         ;2347
0001a8  f8cd9014          STR      r9,[sp,#0x14]         ;2342
0001ac  f8cd9018          STR      r9,[sp,#0x18]         ;2342
0001b0  a814              ADD      r0,sp,#0x50           ;2347
0001b2  e9cd0100          STRD     r0,r1,[sp,#0]         ;2347
0001b6  f8cd900c          STR      r9,[sp,#0xc]          ;2342
0001ba  f8cd9010          STR      r9,[sp,#0x10]         ;2342
0001be  f8cd9020          STR      r9,[sp,#0x20]         ;2342
0001c2  f8cd9024          STR      r9,[sp,#0x24]         ;2347
0001c6  464a              MOV      r2,r9                 ;2347
0001c8  2108              MOVS     r1,#8                 ;2347
0001ca  4648              MOV      r0,r9                 ;2347
0001cc  9b0a              LDR      r3,[sp,#0x28]         ;2347
0001ce  f7fffffe          BL       algorithm_label_GetConflictInfo
0001d2  f8bd0050          LDRH     r0,[sp,#0x50]
0001d6  9913              LDR      r1,[sp,#0x4c]
0001d8  4208              TST      r0,r1
0001da  d073              BEQ      |L6.708|
;;;2350   						{
;;;2351   //							if(mode == LOCAL_FINGER_MODE)
;;;2352   //								d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
;;;2353   //							else
;;;2354   //								d = HAL_READ_DELTA_IMAGE(tNodePos.r, tNodePos.c)/tConflict.tInfo.NUM;
;;;2355   							
;;;2356   							//Allot Conflict delta
;;;2357   							d = HAL_READ_DELTA_IMAGE(tNodePos.r, tNodePos.c);
0001dc  eb061106          ADD      r1,r6,r6,LSL #4
0001e0  eb011046          ADD      r0,r1,r6,LSL #5
0001e4  eb040080          ADD      r0,r4,r0,LSL #2
0001e8  eb000047          ADD      r0,r0,r7,LSL #1
0001ec  f64b1e56          MOV      lr,#0xb956
0001f0  f930e00e          LDRSH    lr,[r0,lr]
;;;2358   							memset(DeltaBuf,0,sizeof(DeltaBuf));
0001f4  2000              MOVS     r0,#0
0001f6  9002              STR      r0,[sp,#8]
0001f8  9003              STR      r0,[sp,#0xc]
0001fa  9004              STR      r0,[sp,#0x10]
0001fc  9005              STR      r0,[sp,#0x14]
0001fe  9006              STR      r0,[sp,#0x18]
000200  9007              STR      r0,[sp,#0x1c]
000202  9008              STR      r0,[sp,#0x20]
;;;2359   							for( i=0; i<BOUNDARY_8_SEARCH_TABLE[0].Num; i++ )
000204  9009              STR      r0,[sp,#0x24]
000206  4844              LDR      r0,|L6.792|
000208  7801              LDRB     r1,[r0,#0]  ; BOUNDARY_8_SEARCH_TABLE
00020a  b399              CBZ      r1,|L6.628|
00020c  1c83              ADDS     r3,r0,#2
00020e  1c42              ADDS     r2,r0,#1
000210  f10d0908          ADD      r9,sp,#8              ;2342
                  |L6.532|
;;;2360   							{
;;;2361   								r_i = tNodePos.r + BOUNDARY_8_SEARCH_TABLE[0].Table[i].r;
000214  f9930000          LDRSB    r0,[r3,#0]
000218  eb060c00          ADD      r12,r6,r0
;;;2362   								c_i = tNodePos.c + BOUNDARY_8_SEARCH_TABLE[0].Table[i].c;
00021c  f9920000          LDRSB    r0,[r2,#0]
;;;2363   							
;;;2364   								neighbor_label_id = HAL_READ_LABEL_IMAGE(r_i, c_i);
000220  eb0c1a0c          ADD      r10,r12,r12,LSL #4
000224  eb0a1a4c          ADD      r10,r10,r12,LSL #5
000228  4438              ADD      r0,r0,r7              ;2362
00022a  eb040c4a          ADD      r12,r4,r10,LSL #1
00022e  4484              ADD      r12,r12,r0
000230  f50c4c50          ADD      r12,r12,#0xd000
000234  e000              B        |L6.568|
                  |L6.566|
000236  e04b              B        |L6.720|
                  |L6.568|
000238  f89ccf3b          LDRB     r12,[r12,#0xf3b]
;;;2365   
;;;2366   								if( (neighbor_label_id > 0) && (neighbor_label_id <= LOOSE_POSBUF_) )
00023c  f1ac0b01          SUB      r11,r12,#1
000240  f1bb0f0f          CMP      r11,#0xf
000244  d810              BHI      |L6.616|
;;;2367   								{
;;;2368   									neighbor_delta = HAL_READ_DELTA_IMAGE(r_i,c_i);
000246  eb040a8a          ADD      r10,r4,r10,LSL #2
00024a  eb0a0040          ADD      r0,r10,r0,LSL #1
00024e  f5004030          ADD      r0,r0,#0xb000
;;;2369   									if(DeltaBuf[neighbor_label_id-1] < neighbor_delta)
;;;2370   										DeltaBuf[neighbor_label_id-1] = neighbor_delta;
000252  eb090a4c          ADD      r10,r9,r12,LSL #1
000256  f9b00956          LDRSH    r0,[r0,#0x956]        ;2368
00025a  f93acc02          LDRSH    r12,[r10,#-2]
00025e  4584              CMP      r12,r0
000260  bfc8              IT       GT
000262  4660              MOVGT    r0,r12
000264  f82a0c02          STRH     r0,[r10,#-2]
                  |L6.616|
000268  1e49              SUBS     r1,r1,#1
00026a  f1020202          ADD      r2,r2,#2
00026e  f1030302          ADD      r3,r3,#2
;;;2371   									
;;;2372   								}
000272  d1cf              BNE      |L6.532|
                  |L6.628|
;;;2373   							}
;;;2374   							delta_sum = 0;
000274  2200              MOVS     r2,#0
;;;2375   							neighbor_label_cnt = 0;
000276  4611              MOV      r1,r2
;;;2376   							for(i=0;i<LOOSE_POSBUF_;i++)
000278  a802              ADD      r0,sp,#8
00027a  2310              MOVS     r3,#0x10
                  |L6.636|
;;;2377   							{
;;;2378   								if(DeltaBuf[i] > 0){
00027c  f9b0c000          LDRSH    r12,[r0,#0]
000280  f1bc0f00          CMP      r12,#0
000284  dd03              BLE      |L6.654|
;;;2379   									delta_sum += DeltaBuf[i];
000286  4462              ADD      r2,r2,r12
000288  1c49              ADDS     r1,r1,#1
00028a  b212              SXTH     r2,r2
;;;2380   									neighbor_label_cnt++;
00028c  b2c9              UXTB     r1,r1
                  |L6.654|
00028e  1c80              ADDS     r0,r0,#2
000290  1e5b              SUBS     r3,r3,#1
;;;2381   								}
000292  d1f3              BNE      |L6.636|
;;;2382   							}
;;;2383   							if(neighbor_label_cnt > 1){
000294  2901              CMP      r1,#1
000296  e000              B        |L6.666|
                  |L6.664|
000298  e014              B        |L6.708|
                  |L6.666|
00029a  d907              BLS      |L6.684|
;;;2384   								d = d * DeltaBuf[l] / delta_sum;
00029c  990d              LDR      r1,[sp,#0x34]
00029e  a802              ADD      r0,sp,#8
0002a0  f9301011          LDRSH    r1,[r0,r1,LSL #1]
0002a4  fb01f00e          MUL      r0,r1,lr
0002a8  fb90fef2          SDIV     lr,r0,r2
                  |L6.684|
;;;2385   								
;;;2386   							}
;;;2387   
;;;2388   							algorithm_label_Add_NewNode_to_LabelRecord(l, tNodePos, d, NO, NO, mode);
0002ac  9920              LDR      r1,[sp,#0x80]
0002ae  2000              MOVS     r0,#0
0002b0  e9cd0100          STRD     r0,r1,[sp,#0]
0002b4  980d              LDR      r0,[sp,#0x34]
0002b6  2300              MOVS     r3,#0
0002b8  b2c0              UXTB     r0,r0
0002ba  fa0ff28e          SXTH     r2,lr
0002be  990a              LDR      r1,[sp,#0x28]
0002c0  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
                  |L6.708|
;;;2389   						}
;;;2390   					}
;;;2391   				}
0002c4  f9980275          LDRSB    r0,[r8,#0x275]
0002c8  1c6d              ADDS     r5,r5,#1
0002ca  42a8              CMP      r0,r5
0002cc  f6bfaf43          BGE      |L6.342|
                  |L6.720|
0002d0  9817              LDR      r0,[sp,#0x5c]
0002d2  1c40              ADDS     r0,r0,#1
0002d4  9017              STR      r0,[sp,#0x5c]
0002d6  f9981273          LDRSB    r1,[r8,#0x273]
0002da  4281              CMP      r1,r0
0002dc  f6bfaf28          BGE      |L6.304|
0002e0  e003              B        |L6.746|
                  |L6.738|
;;;2392   			}
;;;2393   		}
;;;2394   		else
;;;2395   		{
;;;2396   			ucDeleteLabel_num++;
0002e2  981b              LDR      r0,[sp,#0x6c]
0002e4  1c40              ADDS     r0,r0,#1
0002e6  b2c0              UXTB     r0,r0
0002e8  901b              STR      r0,[sp,#0x6c]
                  |L6.746|
0002ea  980d              LDR      r0,[sp,#0x34]
0002ec  1c40              ADDS     r0,r0,#1
0002ee  900d              STR      r0,[sp,#0x34]
0002f0  9816              LDR      r0,[sp,#0x58]
0002f2  7801              LDRB     r1,[r0,#0]
0002f4  980d              LDR      r0,[sp,#0x34]
0002f6  4281              CMP      r1,r0
0002f8  f73faeca          BGT      |L6.144|
                  |L6.764|
;;;2397   		}
;;;2398   	}
;;;2399   
;;;2400   	temp_label->ucNum -= ucDeleteLabel_num;
0002fc  9816              LDR      r0,[sp,#0x58]
0002fe  7801              LDRB     r1,[r0,#0]
000300  981b              LDR      r0,[sp,#0x6c]
000302  1a08              SUBS     r0,r1,r0
000304  9916              LDR      r1,[sp,#0x58]
000306  7008              STRB     r0,[r1,#0]
;;;2401   }
000308  b021              ADD      sp,sp,#0x84
00030a  e8bd8ff0          POP      {r4-r11,pc}
;;;2402   
                          ENDP

00030e  0000              DCW      0x0000
                  |L6.784|
                          DCD      ||.data||
                  |L6.788|
                          DCD      FullSharedBuff
                  |L6.792|
                          DCD      ||.data||+0x3d

                          AREA ||i.algorithm_label_SearchValidArea||, CODE, READONLY, ALIGN=2

                  algorithm_label_SearchValidArea PROC
;;;1316   #else
;;;1317   void algorithm_label_SearchValidArea(tRect_t _tRect, int16_t _deltaThd, int mode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1318   {
;;;1319   	int32_t r, c, i, j;
;;;1320   	uint8_t u_val, l_val, ul_val, ur_val;
;;;1321   	uint8_t max_val1, max_val2, max_val3, min_val1, min_val2, min_val3;
;;;1322   	uint8_t label_num;
;;;1323   	int16_t delta;
;;;1324   	uint8_t label_new, label_max;
;;;1325   	uint8_t	map_val, eq_val, map_data;
;;;1326   	uint8_t remap_index;
;;;1327   	uint8_t ucEqTbl[(LOOSE_POSBUF_ + LABEL_MARGIN)];
;;;1328   
;;;1329   	tLabelInfo_t	*temp_label;
;;;1330   
;;;1331   	temp_label = &thisInfo->tLabel;
000004  49d2              LDR      r1,|L7.848|
000006  b094              SUB      sp,sp,#0x50           ;1318
;;;1332   
;;;1333   	label_num = 0;
000008  f04f0800          MOV      r8,#0
00000c  6889              LDR      r1,[r1,#8]            ;1331  ; thisInfo
;;;1334   	memset((void *)ucEqTbl, 0x00, sizeof(uint8_t)*(LOOSE_POSBUF_ + LABEL_MARGIN));
00000e  f8cd8008          STR      r8,[sp,#8]
000012  f8cd801c          STR      r8,[sp,#0x1c]
000016  313a              ADDS     r1,r1,#0x3a           ;1331
000018  f8cd8030          STR      r8,[sp,#0x30]
00001c  9111              STR      r1,[sp,#0x44]
00001e  f8cd8000          STR      r8,[sp,#0]
000022  b241              SXTB     r1,r0
000024  f8cd8010          STR      r8,[sp,#0x10]
000028  f8cd8014          STR      r8,[sp,#0x14]
;;;1335   
;;;1336   	// Stage1
;;;1337   	for (r = _tRect.rs; r <= _tRect.re; r++)
00002c  f3402207          SBFX     r2,r0,#8,#8
000030  f8cd8004          STR      r8,[sp,#4]            ;1334
000034  f8cd8024          STR      r8,[sp,#0x24]         ;1334
000038  f8cd8028          STR      r8,[sp,#0x28]         ;1334
00003c  f8cd800c          STR      r8,[sp,#0xc]          ;1334
000040  f8cd8018          STR      r8,[sp,#0x18]         ;1334
000044  e9cd120e          STRD     r1,r2,[sp,#0x38]
000048  f8cd8020          STR      r8,[sp,#0x20]         ;1334
00004c  f8cd802c          STR      r8,[sp,#0x2c]         ;1334
000050  f8cd8034          STR      r8,[sp,#0x34]         ;1334
000054  9110              STR      r1,[sp,#0x40]
000056  428a              CMP      r2,r1
000058  f2c0816d          BLT.W    |L7.822|
00005c  f3404107          SBFX     r1,r0,#16,#8          ;1318
000060  ea4f6920          ASR      r9,r0,#24             ;1318
000064  9112              STR      r1,[sp,#0x48]         ;1318
                  |L7.102|
;;;1338   	{
;;;1339   		for (c = _tRect.cs; c <= _tRect.ce; c++)
000066  9f12              LDR      r7,[sp,#0x48]
000068  45b9              CMP      r9,r7
00006a  f2c080b0          BLT.W    |L7.462|
;;;1340   		{
;;;1341   //			if(mode == LOCAL_FINGER_MODE)
;;;1342   //				delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;1343   //			else
;;;1344   				delta = HAL_READ_DELTA_IMAGE(r,c);
00006e  980e              LDR      r0,[sp,#0x38]
000070  49b8              LDR      r1,|L7.852|
000072  eb001200          ADD      r2,r0,r0,LSL #4
000076  eb021040          ADD      r0,r2,r0,LSL #5
00007a  eb010b80          ADD      r11,r1,r0,LSL #2
;;;1345   
;;;1346   			if ( delta >= _deltaThd)
;;;1347   			{
;;;1348   #if (PAD_ == 0)
;;;1349   				if(r == 0)
;;;1350   				{
;;;1351   					u_val  = 0;
;;;1352   					ul_val = 0;
;;;1353   					ur_val = 0;
;;;1354   				}
;;;1355   				else
;;;1356   				{
;;;1357   					u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
;;;1358   					if(c == 0)
;;;1359   						ul_val = 0;
;;;1360   					else 
;;;1361   						ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;1362   					
;;;1363   					if(c == COL_MAX-1)
;;;1364   						ur_val = 0;
;;;1365   					else 
;;;1366   						ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;1367   				}
;;;1368   				
;;;1369   				if(c == 0)
;;;1370   					l_val  = 0;
;;;1371   				else
;;;1372   					l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);
;;;1373   #else
;;;1374   				u_val  = HAL_READ_LABEL_IMAGE(r-1, c  );
00007e  eb010a40          ADD      r10,r1,r0,LSL #1
000082  bf00              NOP                            ;1344
                  |L7.132|
000084  eb0b0047          ADD      r0,r11,r7,LSL #1      ;1344
000088  f5004030          ADD      r0,r0,#0xb000         ;1344
00008c  9915              LDR      r1,[sp,#0x54]         ;1346
00008e  f9b00956          LDRSH    r0,[r0,#0x956]        ;1344
000092  4288              CMP      r0,r1                 ;1346
;;;1375   				ul_val = HAL_READ_LABEL_IMAGE(r-1, c-1);
;;;1376   				ur_val = HAL_READ_LABEL_IMAGE(r-1, c+1);
;;;1377   				l_val  = HAL_READ_LABEL_IMAGE(r  , c-1);				
;;;1378   #endif
;;;1379   				max_val1 = MAX(ul_val, l_val);
;;;1380   				max_val2 = MAX(u_val, ur_val);
;;;1381   				max_val3 = MAX(max_val1, max_val2);
;;;1382   
;;;1383   				if (max_val3 != 0)
;;;1384   				{
;;;1385   					if (u_val == 0)  u_val  = 127;
;;;1386   					if (l_val == 0)  l_val  = 127;
;;;1387   					if (ul_val == 0) ul_val = 127;
;;;1388   					if (ur_val == 0) ur_val = 127;
;;;1389   
;;;1390   					min_val1 = MIN(u_val, l_val);
;;;1391   					min_val2 = MIN(ul_val, ur_val);
;;;1392   					min_val3 = MIN(min_val1, min_val2);
;;;1393   
;;;1394   					if (min_val3 != max_val3)
;;;1395   					{
;;;1396   						map_val = min_val3;
;;;1397   						//*(thisInfo->ucEqTbl+max_val3) = min_val3;
;;;1398   
;;;1399   						if(u_val != 127)
;;;1400   						{
;;;1401   							remap_index = u_val;
;;;1402   							while(remap_index != ucEqTbl[remap_index])
;;;1403   							{
;;;1404   								remap_index = ucEqTbl[remap_index];
;;;1405   								if(min_val3 < remap_index)
;;;1406   									ucEqTbl[remap_index] = min_val3;
;;;1407   							}
;;;1408   
;;;1409   							if( ucEqTbl[u_val] > min_val3 )
;;;1410   								ucEqTbl[u_val] = min_val3;
;;;1411   						}
;;;1412   						if(l_val != 127)
;;;1413   						{
;;;1414   							remap_index = l_val;
;;;1415   							while(remap_index != ucEqTbl[remap_index])
;;;1416   							{
;;;1417   								remap_index = ucEqTbl[remap_index];
;;;1418   								if(min_val3 < remap_index)
;;;1419   									ucEqTbl[remap_index] = min_val3;
;;;1420   							}
;;;1421   
;;;1422   							if( ucEqTbl[l_val] > min_val3 )
;;;1423   							    ucEqTbl[l_val] = min_val3;
;;;1424   						}
;;;1425   						if(ul_val != 127)
;;;1426   						{
;;;1427   							remap_index = ul_val;
;;;1428   							while(remap_index != ucEqTbl[remap_index])
;;;1429   							{
;;;1430   								remap_index = ucEqTbl[remap_index];
;;;1431   								if(min_val3 < remap_index)
;;;1432   									ucEqTbl[remap_index] = min_val3;
;;;1433   							}
;;;1434   
;;;1435   							if( ucEqTbl[ul_val] > min_val3 )
;;;1436   								ucEqTbl[ul_val] = min_val3;
;;;1437   						}
;;;1438   						if(ur_val != 127)
;;;1439   						{
;;;1440   							remap_index = ur_val;
;;;1441   							while(remap_index != ucEqTbl[remap_index])
;;;1442   							{
;;;1443   								remap_index = ucEqTbl[remap_index];
;;;1444   								if(min_val3 < remap_index)
;;;1445   									ucEqTbl[remap_index] = min_val3;
;;;1446   							}
;;;1447   
;;;1448   							if( ucEqTbl[ur_val] > min_val3 )
;;;1449   								ucEqTbl[ur_val] = min_val3;
;;;1450   						}
;;;1451   					}
;;;1452   					else
;;;1453   					{
;;;1454   						map_val = max_val3;
;;;1455   					}
;;;1456   				}
;;;1457   				else
;;;1458   				{
;;;1459   					if( label_num < (LOOSE_POSBUF_ + LABEL_MARGIN) )
;;;1460   					{
;;;1461   						label_num++;
;;;1462   					}
;;;1463   
;;;1464   					map_val = label_num;
;;;1465   					ucEqTbl[label_num] = label_num;
;;;1466   				}
;;;1467   			}
;;;1468   			else
;;;1469   			{
;;;1470   				map_val = 0;
000094  bfb8              IT       LT
000096  2300              MOVLT    r3,#0
000098  db7e              BLT      |L7.408|
00009a  eb0a0007          ADD      r0,r10,r7             ;1374
00009e  f5004050          ADD      r0,r0,#0xd000         ;1374
0000a2  f8905ed8          LDRB     r5,[r0,#0xed8]        ;1375
0000a6  f890cf3a          LDRB     r12,[r0,#0xf3a]       ;1377
0000aa  f8906ed9          LDRB     r6,[r0,#0xed9]        ;1374
0000ae  f8904eda          LDRB     r4,[r0,#0xeda]        ;1376
0000b2  4565              CMP      r5,r12                ;1379
0000b4  bf8c              ITE      HI                    ;1379
0000b6  462b              MOVHI    r3,r5                 ;1379
0000b8  4663              MOVLS    r3,r12                ;1379
0000ba  42a6              CMP      r6,r4                 ;1380
0000bc  bf8c              ITE      HI                    ;1380
0000be  4630              MOVHI    r0,r6                 ;1380
0000c0  4620              MOVLS    r0,r4                 ;1380
0000c2  4283              CMP      r3,r0                 ;1381
0000c4  bf98              IT       LS                    ;1381
0000c6  4603              MOVLS    r3,r0                 ;1381
0000c8  2b00              CMP      r3,#0                 ;1383
0000ca  f0008129          BEQ.W    |L7.800|
0000ce  2e00              CMP      r6,#0                 ;1385
0000d0  bf08              IT       EQ                    ;1385
0000d2  267f              MOVEQ    r6,#0x7f              ;1385
0000d4  f1bc0f00          CMP      r12,#0                ;1386
0000d8  bf08              IT       EQ                    ;1386
0000da  f04f0c7f          MOVEQ    r12,#0x7f             ;1386
0000de  2d00              CMP      r5,#0                 ;1387
0000e0  bf08              IT       EQ                    ;1387
0000e2  257f              MOVEQ    r5,#0x7f              ;1387
0000e4  2c00              CMP      r4,#0                 ;1388
0000e6  bf08              IT       EQ                    ;1388
0000e8  247f              MOVEQ    r4,#0x7f              ;1388
0000ea  4566              CMP      r6,r12                ;1390
0000ec  bf8c              ITE      HI                    ;1390
0000ee  4660              MOVHI    r0,r12                ;1390
0000f0  4630              MOVLS    r0,r6                 ;1390
0000f2  42a5              CMP      r5,r4                 ;1391
0000f4  bf8c              ITE      HI                    ;1391
0000f6  4621              MOVHI    r1,r4                 ;1391
0000f8  4629              MOVLS    r1,r5                 ;1391
0000fa  4288              CMP      r0,r1                 ;1392
0000fc  bf88              IT       HI                    ;1392
0000fe  4608              MOVHI    r0,r1                 ;1392
000100  4298              CMP      r0,r3                 ;1394
000102  d05a              BEQ      |L7.442|
000104  4603              MOV      r3,r0                 ;1396
000106  2e7f              CMP      r6,#0x7f              ;1399
000108  d013              BEQ      |L7.306|
00010a  4631              MOV      r1,r6                 ;1401
00010c  466a              MOV      r2,sp                 ;1402
00010e  f81de001          LDRB     lr,[sp,r1]            ;1402
000112  45b6              CMP      lr,r6                 ;1402
000114  d009              BEQ      |L7.298|
000116  bf00              NOP                            ;1404
                  |L7.280|
000118  f00e01ff          AND      r1,lr,#0xff           ;1404
00011c  4288              CMP      r0,r1                 ;1405
00011e  bf38              IT       CC                    ;1406
000120  5450              STRBCC   r0,[r2,r1]            ;1406
000122  f812e001          LDRB     lr,[r2,r1]            ;1406
000126  458e              CMP      lr,r1                 ;1406
000128  d1f6              BNE      |L7.280|
                  |L7.298|
00012a  5d91              LDRB     r1,[r2,r6]            ;1409
00012c  4281              CMP      r1,r0                 ;1409
00012e  bf88              IT       HI                    ;1410
000130  5590              STRBHI   r0,[r2,r6]            ;1410
                  |L7.306|
000132  f1bc0f7f          CMP      r12,#0x7f             ;1412
000136  d012              BEQ      |L7.350|
000138  4661              MOV      r1,r12                ;1414
00013a  466a              MOV      r2,sp                 ;1415
00013c  f81d6001          LDRB     r6,[sp,r1]            ;1415
000140  4566              CMP      r6,r12                ;1415
000142  d006              BEQ      |L7.338|
                  |L7.324|
000144  b2f1              UXTB     r1,r6                 ;1417
000146  4288              CMP      r0,r1                 ;1418
000148  bf38              IT       CC                    ;1419
00014a  5450              STRBCC   r0,[r2,r1]            ;1419
00014c  5c56              LDRB     r6,[r2,r1]            ;1419
00014e  428e              CMP      r6,r1                 ;1419
000150  d1f8              BNE      |L7.324|
                  |L7.338|
000152  f812100c          LDRB     r1,[r2,r12]           ;1422
000156  4281              CMP      r1,r0                 ;1422
000158  bf88              IT       HI                    ;1423
00015a  f802000c          STRBHI   r0,[r2,r12]           ;1423
                  |L7.350|
00015e  2d7f              CMP      r5,#0x7f              ;1425
000160  d013              BEQ      |L7.394|
000162  4629              MOV      r1,r5                 ;1427
000164  466a              MOV      r2,sp                 ;1428
000166  f81dc001          LDRB     r12,[sp,r1]           ;1428
00016a  45ac              CMP      r12,r5                ;1428
00016c  d009              BEQ      |L7.386|
00016e  bf00              NOP                            ;1430
                  |L7.368|
000170  f00c01ff          AND      r1,r12,#0xff          ;1430
000174  4288              CMP      r0,r1                 ;1431
000176  bf38              IT       CC                    ;1432
000178  5450              STRBCC   r0,[r2,r1]            ;1432
00017a  f812c001          LDRB     r12,[r2,r1]           ;1432
00017e  458c              CMP      r12,r1                ;1432
000180  d1f6              BNE      |L7.368|
                  |L7.386|
000182  5d51              LDRB     r1,[r2,r5]            ;1435
000184  4281              CMP      r1,r0                 ;1435
000186  bf88              IT       HI                    ;1436
000188  5550              STRBHI   r0,[r2,r5]            ;1436
                  |L7.394|
00018a  2c7f              CMP      r4,#0x7f              ;1438
00018c  d015              BEQ      |L7.442|
00018e  4621              MOV      r1,r4                 ;1440
000190  466a              MOV      r2,sp                 ;1441
000192  f81dc001          LDRB     r12,[sp,r1]           ;1441
000196  e000              B        |L7.410|
                  |L7.408|
000198  e00f              B        |L7.442|
                  |L7.410|
00019a  45a4              CMP      r12,r4                ;1441
00019c  d009              BEQ      |L7.434|
00019e  bf00              NOP                            ;1443
                  |L7.416|
0001a0  f00c01ff          AND      r1,r12,#0xff          ;1443
0001a4  4288              CMP      r0,r1                 ;1444
0001a6  bf38              IT       CC                    ;1445
0001a8  5450              STRBCC   r0,[r2,r1]            ;1445
0001aa  f812c001          LDRB     r12,[r2,r1]           ;1445
0001ae  458c              CMP      r12,r1                ;1445
0001b0  d1f6              BNE      |L7.416|
                  |L7.434|
0001b2  5d11              LDRB     r1,[r2,r4]            ;1448
0001b4  4281              CMP      r1,r0                 ;1448
0001b6  bf88              IT       HI                    ;1449
0001b8  5510              STRBHI   r0,[r2,r4]            ;1449
                  |L7.442|
;;;1471   			}
;;;1472   			HAL_WRITE_LABEL_IMAGE(r, c, map_val);
0001ba  eb0a0007          ADD      r0,r10,r7
0001be  f5004050          ADD      r0,r0,#0xd000
0001c2  1c7f              ADDS     r7,r7,#1
0001c4  f8803f3b          STRB     r3,[r0,#0xf3b]
0001c8  45b9              CMP      r9,r7
0001ca  f6bfaf5b          BGE      |L7.132|
                  |L7.462|
0001ce  980e              LDR      r0,[sp,#0x38]
0001d0  990f              LDR      r1,[sp,#0x3c]
0001d2  1c40              ADDS     r0,r0,#1
0001d4  900e              STR      r0,[sp,#0x38]
0001d6  4281              CMP      r1,r0
0001d8  f6bfaf45          BGE      |L7.102|
;;;1473   		}
;;;1474   	}
;;;1475   
;;;1476   	label_num = MIN( label_num, (LOOSE_POSBUF_ + LABEL_MARGIN) );
0001dc  f1b80f38          CMP      r8,#0x38
0001e0  bf24              ITT      CS
0001e2  2238              MOVCS    r2,#0x38
0001e4  4690              MOVCS    r8,r2
0001e6  d205              BCS      |L7.500|
;;;1477   
;;;1478   	if( label_num > 0 )
0001e8  f1b80f00          CMP      r8,#0
;;;1479   	{
;;;1480   		// Stage2
;;;1481   		for (i=label_num; i>0; i--)
0001ec  bf18              IT       NE
0001ee  4642              MOVNE    r2,r8
0001f0  d07d              BEQ      |L7.750|
0001f2  dd0b              BLE      |L7.524|
                  |L7.500|
0001f4  466b              MOV      r3,sp                 ;1327
                  |L7.502|
;;;1482   		{
;;;1483   			eq_val = ucEqTbl[i];
0001f6  5c99              LDRB     r1,[r3,r2]
;;;1484   			if (eq_val != i)
0001f8  4291              CMP      r1,r2
0001fa  d004              BEQ      |L7.518|
                  |L7.508|
;;;1485   			{
;;;1486   				do
;;;1487   				{
;;;1488   					j = eq_val;
0001fc  4608              MOV      r0,r1
;;;1489   					eq_val = ucEqTbl[j];
0001fe  5c19              LDRB     r1,[r3,r0]
000200  4288              CMP      r0,r1
000202  d1fb              BNE      |L7.508|
;;;1490   				} while (j != eq_val);
;;;1491   				ucEqTbl[i] = eq_val;
000204  5499              STRB     r1,[r3,r2]
                  |L7.518|
000206  1e52              SUBS     r2,r2,#1
000208  2a00              CMP      r2,#0
00020a  dcf4              BGT      |L7.502|
                  |L7.524|
;;;1492   			}
;;;1493   		}
;;;1494   
;;;1495   		// Stage3
;;;1496   		label_max = 1;
00020c  2201              MOVS     r2,#1
;;;1497   		label_new = 1;
00020e  4615              MOV      r5,r2
;;;1498   		for (i=1; i<=label_num; i++)
000210  f1b80f00          CMP      r8,#0
000214  bf1c              ITT      NE
000216  466b              MOVNE    r3,sp
000218  1c58              ADDNE    r0,r3,#1
00021a  d011              BEQ      |L7.576|
                  |L7.540|
;;;1499   		{
;;;1500   			eq_val = ucEqTbl[i];
00021c  7801              LDRB     r1,[r0,#0]
;;;1501   			if (eq_val < label_max)
00021e  4291              CMP      r1,r2
;;;1502   			{
;;;1503   				ucEqTbl[i] = ucEqTbl[eq_val];
;;;1504   			}
;;;1505   			else if (eq_val > label_max)
;;;1506   			{
;;;1507   				label_new++;
;;;1508   				label_max = eq_val;
;;;1509   				ucEqTbl[i] = label_new;
;;;1510   			}
;;;1511   			else
;;;1512   			{
;;;1513   				ucEqTbl[i] = label_new;
000220  bf08              IT       EQ
000222  7005              STRBEQ   r5,[r0,#0]
000224  bf3c              ITT      CC                    ;1503
000226  5c59              LDRBCC   r1,[r3,r1]            ;1503
000228  7001              STRBCC   r1,[r0,#0]            ;1503
00022a  d904              BLS      |L7.566|
00022c  f1050201          ADD      r2,r5,#1              ;1507
000230  b2d5              UXTB     r5,r2                 ;1507
000232  460a              MOV      r2,r1                 ;1508
000234  7005              STRB     r5,[r0,#0]            ;1509
                  |L7.566|
000236  f1000001          ADD      r0,r0,#1              ;1509
00023a  f1b80801          SUBS     r8,r8,#1              ;1509
;;;1514   			}
00023e  d1ed              BNE      |L7.540|
                  |L7.576|
000240  e9dd020f          LDRD     r0,r2,[sp,#0x3c]
;;;1515   		}
;;;1516   
;;;1517   		// Stage4
;;;1518   		for (r = _tRect.rs; r <= _tRect.re; r++)
000244  4290              CMP      r0,r2
000246  db62              BLT      |L7.782|
000248  f8dfe108          LDR      lr,|L7.852|
00024c  466f              MOV      r7,sp                 ;1327
00024e  f04f0800          MOV      r8,#0                 ;1327
                  |L7.594|
;;;1519   		{
;;;1520   			for (c = _tRect.cs; c <= _tRect.ce; c++)
000252  9812              LDR      r0,[sp,#0x48]
000254  4581              CMP      r9,r0
000256  db56              BLT      |L7.774|
000258  eb021102          ADD      r1,r2,r2,LSL #4       ;1344
00025c  eb011142          ADD      r1,r1,r2,LSL #5       ;1344
000260  eb0e0a81          ADD      r10,lr,r1,LSL #2      ;1344
;;;1521   			{
;;;1522   				map_val  = HAL_READ_LABEL_IMAGE(r,c);
;;;1523   
;;;1524   				if( map_val > 0 )
;;;1525   				{
;;;1526   
;;;1527   					eq_val   = ucEqTbl[map_val];
;;;1528   
;;;1529   					if (map_val != 0 && eq_val <= (LOOSE_POSBUF_ + LABEL_MARGIN))
;;;1530   					{
;;;1531   						if(eq_val <= LOOSE_POSBUF_)
;;;1532   							map_data = eq_val;
;;;1533   						else
;;;1534   							map_data = LOOSE_POSBUF_;
;;;1535   					}
;;;1536   					else
;;;1537   					{
;;;1538   						map_data = 0;
;;;1539   					}
;;;1540   
;;;1541   					HAL_WRITE_LABEL_IMAGE(r, c, 0);
;;;1542   
;;;1543   					if( map_data > 0 )
;;;1544   					{
;;;1545   //						if(mode == LOCAL_FINGER_MODE)
;;;1546   //							delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(r,c);
;;;1547   //						else
;;;1548   							delta = HAL_READ_DELTA_IMAGE(r, c);
;;;1549   
;;;1550   						if( temp_label->tValidRect[map_data-1].cs > c )
;;;1551   							temp_label->tValidRect[map_data-1].cs = c;
;;;1552   						if( temp_label->tValidRect[map_data-1].ce < c )
;;;1553   							temp_label->tValidRect[map_data-1].ce = c;
;;;1554   						if( temp_label->tValidRect[map_data-1].rs > r )
;;;1555   							temp_label->tValidRect[map_data-1].rs = r;
;;;1556   						if( temp_label->tValidRect[map_data-1].re < r )
;;;1557   							temp_label->tValidRect[map_data-1].re = r;
;;;1558   
;;;1559   						if( temp_label->sValidMaxVal[map_data-1] < delta )
;;;1560   						{
;;;1561   							temp_label->sValidMaxVal[map_data-1] = delta;
;;;1562   
;;;1563   							temp_label->tValidMaxPos[map_data-1].r = r;
000264  fa4ffb82          SXTB     r11,r2
000268  eb0e0441          ADD      r4,lr,r1,LSL #1       ;1374
                  |L7.620|
00026c  1821              ADDS     r1,r4,r0              ;1522
00026e  f5014350          ADD      r3,r1,#0xd000         ;1522
000272  f8931f3b          LDRB     r1,[r3,#0xf3b]        ;1522
000276  b3d9              CBZ      r1,|L7.752|
000278  5c79              LDRB     r1,[r7,r1]            ;1527
00027a  2938              CMP      r1,#0x38              ;1529
00027c  bf88              IT       HI                    ;1538
00027e  2100              MOVHI    r1,#0                 ;1538
000280  d802              BHI      |L7.648|
000282  2910              CMP      r1,#0x10              ;1531
000284  bf88              IT       HI                    ;1534
000286  2110              MOVHI    r1,#0x10              ;1534
                  |L7.648|
000288  f8838f3b          STRB     r8,[r3,#0xf3b]        ;1541
00028c  b381              CBZ      r1,|L7.752|
00028e  eb0a0340          ADD      r3,r10,r0,LSL #1      ;1548
000292  f64b1656          MOV      r6,#0xb956            ;1548
000296  5f9e              LDRSH    r6,[r3,r6]            ;1548
000298  9b11              LDR      r3,[sp,#0x44]         ;1551
00029a  eb030381          ADD      r3,r3,r1,LSL #2       ;1551
00029e  f993c270          LDRSB    r12,[r3,#0x270]       ;1551
0002a2  4584              CMP      r12,r0                ;1551
0002a4  bfc8              IT       GT                    ;1551
0002a6  4684              MOVGT    r12,r0                ;1551
0002a8  f883c270          STRB     r12,[r3,#0x270]       ;1551
0002ac  f993c271          LDRSB    r12,[r3,#0x271]       ;1553
0002b0  4584              CMP      r12,r0                ;1553
0002b2  bfd8              IT       LE                    ;1553
0002b4  4684              MOVLE    r12,r0                ;1553
0002b6  f883c271          STRB     r12,[r3,#0x271]       ;1553
0002ba  f993c26e          LDRSB    r12,[r3,#0x26e]       ;1555
0002be  4594              CMP      r12,r2                ;1555
0002c0  bfc8              IT       GT                    ;1555
0002c2  4694              MOVGT    r12,r2                ;1555
0002c4  f883c26e          STRB     r12,[r3,#0x26e]       ;1555
0002c8  f993c26f          LDRSB    r12,[r3,#0x26f]       ;1557
0002cc  4594              CMP      r12,r2                ;1557
0002ce  bfd8              IT       LE                    ;1557
0002d0  4694              MOVLE    r12,r2                ;1557
0002d2  f883c26f          STRB     r12,[r3,#0x26f]       ;1557
0002d6  9b11              LDR      r3,[sp,#0x44]         ;1559
0002d8  eb030141          ADD      r1,r3,r1,LSL #1       ;1559
0002dc  f9b132d0          LDRSH    r3,[r1,#0x2d0]        ;1559
0002e0  42b3              CMP      r3,r6                 ;1559
0002e2  da08              BGE      |L7.758|
0002e4  f8a162d0          STRH     r6,[r1,#0x2d0]        ;1561
0002e8  f881b2b1          STRB     r11,[r1,#0x2b1]
;;;1564   							temp_label->tValidMaxPos[map_data-1].c = c;
0002ec  e001              B        |L7.754|
                  |L7.750|
0002ee  e022              B        |L7.822|
                  |L7.752|
0002f0  e006              B        |L7.768|
                  |L7.754|
0002f2  f88102b0          STRB     r0,[r1,#0x2b0]
                  |L7.758|
;;;1565   						}
;;;1566   
;;;1567   
;;;1568   						temp_label->usValidCellCnt[map_data-1]++;
0002f6  f8b132f0          LDRH     r3,[r1,#0x2f0]
0002fa  1c5b              ADDS     r3,r3,#1
0002fc  f8a132f0          STRH     r3,[r1,#0x2f0]
                  |L7.768|
000300  1c40              ADDS     r0,r0,#1
000302  4581              CMP      r9,r0
000304  dab2              BGE      |L7.620|
                  |L7.774|
000306  980f              LDR      r0,[sp,#0x3c]
000308  1c52              ADDS     r2,r2,#1
00030a  4290              CMP      r0,r2
00030c  daa1              BGE      |L7.594|
                  |L7.782|
;;;1569   					}
;;;1570   				}
;;;1571   			}
;;;1572   		}
;;;1573   
;;;1574   		temp_label->ucValidNum = MIN(label_new, LOOSE_POSBUF_);
00030e  2d10              CMP      r5,#0x10
000310  bf28              IT       CS
000312  2510              MOVCS    r5,#0x10
000314  9811              LDR      r0,[sp,#0x44]
000316  f8805271          STRB     r5,[r0,#0x271]
;;;1575   	}
;;;1576   	else{
;;;1577   		temp_label->LabelSplitCnt = 0;
;;;1578   		temp_label->LabelSplitFrmCnt = 0;
;;;1579   		temp_label->LabelSplitMergeCnt = 0;
;;;1580   	}
;;;1581   }
00031a  b017              ADD      sp,sp,#0x5c
00031c  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.800|
000320  f1b80f38          CMP      r8,#0x38              ;1459
000324  bf3c              ITT      CC                    ;1461
000326  f1080001          ADDCC    r0,r8,#1              ;1461
00032a  f00008ff          ANDCC    r8,r0,#0xff           ;1461
00032e  4643              MOV      r3,r8                 ;1465
000330  f80d8003          STRB     r8,[sp,r3]            ;1465
000334  e741              B        |L7.442|
                  |L7.822|
000336  9911              LDR      r1,[sp,#0x44]         ;1577
000338  2000              MOVS     r0,#0                 ;1577
00033a  f8c10313          STR      r0,[r1,#0x313]        ;1577
00033e  9911              LDR      r1,[sp,#0x44]         ;1578
000340  f8c10319          STR      r0,[r1,#0x319]        ;1578
000344  9911              LDR      r1,[sp,#0x44]         ;1579
000346  f8a10317          STRH     r0,[r1,#0x317]        ;1579
00034a  b017              ADD      sp,sp,#0x5c
00034c  e8bd8ff0          POP      {r4-r11,pc}
;;;1582   #endif
                          ENDP

                  |L7.848|
                          DCD      ||.data||
                  |L7.852|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Split||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split PROC
;;;1589   
;;;1590   void algorithm_label_Split(uint8_t _valid_area_idx, uint8_t _label_start_idx, int16_t _LowerThd, int mode)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1591   {
000004  b086              SUB      sp,sp,#0x18
;;;1592       int16_t threshold = INT16_MAX; // for labeling
;;;1593       uint8_t label_num;
;;;1594       tConflictInfo_t tConflict;
;;;1595       tCell_t tPos;
;;;1596   
;;;1597       int16_t LabelNoiseThd = 0;
;;;1598       int16_t delta;
;;;1599       uint8_t rLabel_val;
;;;1600   
;;;1601   #if FAST_SPLIT		//original
;;;1602       bool_t sort_en = YES;
;;;1603   #else
;;;1604   	int16_t threshold_next = 0;
;;;1605   #endif
;;;1606       // About 3 groups can be eliminated after re-ordering if it is small unmatched group.
;;;1607       // Grouping Start
;;;1608       label_num = _label_start_idx;
;;;1609   
;;;1610       threshold = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
000006  f8df9258          LDR      r9,|L8.608|
00000a  9103              STR      r1,[sp,#0xc]
00000c  4680              MOV      r8,r0                 ;1591
00000e  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
;;;1611   
;;;1612   //    algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1613   
;;;1614   //    if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usMediumNodeCnt )
;;;1615   //    {
;;;1616   //    	LabelNoiseThd = thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd;
;;;1617   ////    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1618   //    }
;;;1619   //    else if( thisInfo->tLabel.usValidCellCnt[_valid_area_idx] > thisModeConf->Label.usSmallNodeCnt )
;;;1620   //    {
;;;1621   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/5), 10);
;;;1622   //    }
;;;1623   //    else
;;;1624   //    {
;;;1625   //    	LabelNoiseThd = MAX(((thisInfo->tLabel.sValidMaxVal[_valid_area_idx] - _LowerThd)/10), 5);
;;;1626   //    }
;;;1627   
;;;1628   	LabelNoiseThd = thisModeConf->Label.ucLabelNoiseThd;
000012  f8d91004          LDR      r1,[r9,#4]  ; thisModeConf
000016  eb000048          ADD      r0,r0,r8,LSL #1       ;1610
;;;1629   
;;;1630   #if FAST_SPLIT		//original
;;;1631   	int i,ii;
;;;1632       if(sort_en == YES)
;;;1633       {
;;;1634       	int valid_sort_num;
;;;1635       	int temp_data;
;;;1636       	int max_pos;
;;;1637   		int comp_val;
;;;1638   		int split_num = 0;
;;;1639   		int split_num_first = 0;
;;;1640   		int split_start_num;
;;;1641       	tCell_t temp_pos;
;;;1642   
;;;1643   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1644   		{
;;;1645   			tConflict.ulValue = 0;
;;;1646   
;;;1647   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1648   
;;;1649   			if( tConflict.tInfo.NUM == 0 && split_num_first < MAX_SPLIT_NUM-1)
;;;1650   			{
;;;1651   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1652   				split_buf[split_num_first] = thisInfo->tLabel.sValidMaxVal[_valid_area_idx];
;;;1653   				split_pos[split_num_first] = thisInfo->tLabel.tValidMaxPos[_valid_area_idx];
;;;1654   				split_num_first++;
;;;1655   			}
;;;1656   		}
;;;1657   		split_start_num = split_num_first;
;;;1658   	
;;;1659   		comp_val = (threshold - LabelNoiseThd);
;;;1660       	split_num = MAX_SPLIT_NUM-1;
;;;1661   
;;;1662   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1663   		{
;;;1664   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1665   			{
;;;1666   //				if(mode == LOCAL_FINGER_MODE)
;;;1667   //				{
;;;1668   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1669   //				}
;;;1670   //				else
;;;1671   				{
;;;1672   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1673   				}
;;;1674   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1675   
;;;1676   				if(delta >= comp_val && rLabel_val == 0 && split_num_first < MAX_SPLIT_NUM-1)
;;;1677   				{
;;;1678   					split_buf[split_num_first] = delta;
;;;1679   					split_pos[split_num_first] = tPos;
;;;1680   					split_num_first++;
;;;1681   				}
;;;1682   				else if(delta >= _LowerThd && rLabel_val == 0)
;;;1683   				{
;;;1684   					split_buf[split_num] = delta;
;;;1685   					split_pos[split_num] = tPos;
;;;1686   					split_num--;
;;;1687   					if(split_num < split_num_first)
;;;1688   					{
;;;1689   						tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].re;
;;;1690   						break;
;;;1691   					}
;;;1692   				}
;;;1693   			}
;;;1694   		}
;;;1695   		
;;;1696   		valid_sort_num = MAX_SPLIT_NUM - 1 - split_num + split_num_first;
;;;1697   		
;;;1698   		if(valid_sort_num < MAX_SPLIT_NUM)
;;;1699   		{
;;;1700   			for(i=split_num_first; i<valid_sort_num; i++)
;;;1701   			{
;;;1702   				split_num++;
;;;1703   				split_buf[i] = split_buf[split_num];
;;;1704   				split_pos[i] = split_pos[split_num];
;;;1705   			}
;;;1706   
;;;1707   			for(i=split_num_first; i<valid_sort_num-1; i++)
;;;1708   			{
;;;1709   				temp_data = split_buf[i];
;;;1710   				max_pos = i;
;;;1711   				for(ii=i+1; ii<valid_sort_num; ii++)
;;;1712   				{
;;;1713   					if(temp_data < split_buf[ii])
;;;1714   						max_pos = ii, temp_data = split_buf[ii];
;;;1715   				}
;;;1716   				split_buf[max_pos] = split_buf[i];
;;;1717   				split_buf[i] = temp_data;
;;;1718   				temp_pos = split_pos[max_pos];
;;;1719   				split_pos[max_pos] = split_pos[i];
;;;1720   				split_pos[i] = temp_pos;
;;;1721   			}
;;;1722   
;;;1723   			label_num = thisInfo->tLabel.ucNum;
;;;1724   			for(i=split_start_num; i<valid_sort_num; i++)
;;;1725   			{
;;;1726   				rLabel_val = HAL_READ_LABEL_IMAGE(split_pos[i].r, split_pos[i].c);
;;;1727   
;;;1728   				if (rLabel_val == 0)
;;;1729   				{
;;;1730   					tConflict.tInfo.SET = NO;
;;;1731   					tConflict.tInfo.NUM = 0;
;;;1732   					tConflict.tInfo.BF  = 0;
;;;1733   
;;;1734   					algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, split_pos[i], &tConflict, mode);
;;;1735   
;;;1736   					if( tConflict.tInfo.NUM == 0 )
;;;1737   					{
;;;1738   						if( label_num < LOOSE_POSBUF_ )
;;;1739   						{
;;;1740   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, split_pos[i], split_buf[i], YES, mode);
;;;1741   
;;;1742   							label_num++;
;;;1743   						}
;;;1744   					}
;;;1745   				}
;;;1746   			}
;;;1747   		}
;;;1748       }
;;;1749       else
;;;1750       {
;;;1751   		if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
;;;1752   		{
;;;1753   			tConflict.ulValue = 0;
;;;1754   
;;;1755   			algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
;;;1756   
;;;1757   			if( tConflict.tInfo.NUM == 0 )
;;;1758   				algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
;;;1759   		}
;;;1760   
;;;1761   		// process prev linked-list
;;;1762   		label_num = thisInfo->tLabel.ucNum;
;;;1763   
;;;1764   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
;;;1765   		{
;;;1766   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
;;;1767   			{
;;;1768   //				if(mode == LOCAL_FINGER_MODE)
;;;1769   //				{
;;;1770   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1771   //				}
;;;1772   //				else
;;;1773   				{
;;;1774   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
;;;1775   				}
;;;1776   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1777   
;;;1778   				if ((delta >= _LowerThd) && (rLabel_val == 0))
;;;1779   				{
;;;1780   					tConflict.tInfo.SET = NO;
;;;1781   					tConflict.tInfo.NUM = 0;
;;;1782   					tConflict.tInfo.BF  = 0;
;;;1783   
;;;1784   					algorithm_label_GetConflictInfo(YES, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1785   
;;;1786   					if( tConflict.tInfo.NUM == 0 )
;;;1787   					{
;;;1788   						if( label_num < LOOSE_POSBUF_ )
;;;1789   						{
;;;1790   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1791   
;;;1792   							label_num++;
;;;1793   						}
;;;1794   					}
;;;1795   				}
;;;1796   			}
;;;1797   		}
;;;1798       }
;;;1799   #else
;;;1800   	uint8_t SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
00001a  2208              MOVS     r2,#8
00001c  f9b0630c          LDRSH    r6,[r0,#0x30c]        ;1610
000020  f891503c          LDRB     r5,[r1,#0x3c]         ;1628
;;;1801   	if(HAL_READ_LABEL_IMAGE(thisInfo->tLabel.tValidMaxPos[_valid_area_idx].r, thisInfo->tLabel.tValidMaxPos[_valid_area_idx].c)== 0)
000024  9204              STR      r2,[sp,#0x10]
000026  f99022ec          LDRSB    r2,[r0,#0x2ec]
00002a  4f8e              LDR      r7,|L8.612|
00002c  f04f0a00          MOV      r10,#0
000030  19d3              ADDS     r3,r2,r7
000032  f99022ed          LDRSB    r2,[r0,#0x2ed]
000036  f10d0b08          ADD      r11,sp,#8             ;1594
00003a  eb021c02          ADD      r12,r2,r2,LSL #4
00003e  eb0c1c42          ADD      r12,r12,r2,LSL #5
000042  f64d723b          MOV      r2,#0xdf3b
000046  eb02024c          ADD      r2,r2,r12,LSL #1
00004a  5c9a              LDRB     r2,[r3,r2]
00004c  bb42              CBNZ     r2,|L8.160|
;;;1802   	{
;;;1803   		tConflict.ulValue = 0;
;;;1804   
;;;1805   		if(thisModeConf->Label.bSplitSearchDirc_4_On)SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
00004e  f8cda008          STR      r10,[sp,#8]
000052  f891103e          LDRB     r1,[r1,#0x3e]
000056  2900              CMP      r1,#0
000058  bf1c              ITT      NE
00005a  2104              MOVNE    r1,#4
00005c  9104              STRNE    r1,[sp,#0x10]
;;;1806   		
;;;1807   		algorithm_label_GetConflictInfo(YES, SearchDirc, 0, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], &tConflict, mode);
00005e  9909              LDR      r1,[sp,#0x24]
000060  2200              MOVS     r2,#0
000062  e9cdb100          STRD     r11,r1,[sp,#0]
000066  f8b002ec          LDRH     r0,[r0,#0x2ec]
00006a  f8ad0014          STRH     r0,[sp,#0x14]
00006e  e9dd1304          LDRD     r1,r3,[sp,#0x10]
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       algorithm_label_GetConflictInfo
;;;1808   
;;;1809   		if( tConflict.tInfo.NUM == 0 )
000078  f89d000a          LDRB     r0,[sp,#0xa]
00007c  b980              CBNZ     r0,|L8.160|
;;;1810   			algorithm_label_Insert_NewRecord_to_LabelTable(label_num, thisInfo->tLabel.tValidMaxPos[_valid_area_idx], thisInfo->tLabel.sValidMaxVal[_valid_area_idx], YES, mode);
00007e  9809              LDR      r0,[sp,#0x24]
000080  9000              STR      r0,[sp,#0]
000082  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
000086  2301              MOVS     r3,#1
000088  eb000048          ADD      r0,r0,r8,LSL #1
00008c  f9b0230c          LDRSH    r2,[r0,#0x30c]
000090  f8b002ec          LDRH     r0,[r0,#0x2ec]
000094  f8ad0004          STRH     r0,[sp,#4]
000098  9901              LDR      r1,[sp,#4]
00009a  9803              LDR      r0,[sp,#0xc]
00009c  f7fffffe          BL       algorithm_label_Insert_NewRecord_to_LabelTable
                  |L8.160|
;;;1811   	}
;;;1812   
;;;1813   	thisInfo->tLabel.LabelSplitMergeCnt = 0;
0000a0  f8d90008          LDR      r0,[r9,#8]  ; thisInfo
0000a4  f8a0a351          STRH     r10,[r0,#0x351]
                  |L8.168|
;;;1814       do
;;;1815       {
;;;1816       	threshold = MAX((threshold - LabelNoiseThd), _LowerThd);
0000a8  9908              LDR      r1,[sp,#0x20]
0000aa  1b70              SUBS     r0,r6,r5
0000ac  4288              CMP      r0,r1
0000ae  bfd8              IT       LE
0000b0  4608              MOVLE    r0,r1
0000b2  b206              SXTH     r6,r0
;;;1817   
;;;1818       	// process prev linked-list
;;;1819       	label_num = thisInfo->tLabel.ucNum;
0000b4  4a6a              LDR      r2,|L8.608|
0000b6  6890              LDR      r0,[r2,#8]  ; thisInfo
0000b8  f890103a          LDRB     r1,[r0,#0x3a]
;;;1820   
;;;1821   		threshold_next = 0;
0000bc  9105              STR      r1,[sp,#0x14]
0000be  2100              MOVS     r1,#0
;;;1822   		for (tPos.r = thisInfo->tLabel.tValidRect[_valid_area_idx].rs; tPos.r <= thisInfo->tLabel.tValidRect[_valid_area_idx].re; tPos.r++)
0000c0  eb000088          ADD      r0,r0,r8,LSL #2
0000c4  9103              STR      r1,[sp,#0xc]
0000c6  f99012ac          LDRSB    r1,[r0,#0x2ac]
0000ca  f99002ad          LDRSB    r0,[r0,#0x2ad]
0000ce  f361240f          BFI      r4,r1,#8,#8
0000d2  4281              CMP      r1,r0
0000d4  dc7d              BGT      |L8.466|
                  |L8.214|
;;;1823   		{
;;;1824   			for (tPos.c = thisInfo->tLabel.tValidRect[_valid_area_idx].cs; tPos.c <= thisInfo->tLabel.tValidRect[_valid_area_idx].ce; tPos.c++)
0000d6  4862              LDR      r0,|L8.608|
0000d8  6880              LDR      r0,[r0,#8]  ; thisInfo
0000da  eb000088          ADD      r0,r0,r8,LSL #2
0000de  f99012ae          LDRSB    r1,[r0,#0x2ae]
0000e2  f99002af          LDRSB    r0,[r0,#0x2af]
0000e6  f3610407          BFI      r4,r1,#0,#8
0000ea  4281              CMP      r1,r0
0000ec  dc72              BGT      |L8.468|
0000ee  f3442107          SBFX     r1,r4,#8,#8
;;;1825   			{
;;;1826   //				if(mode == LOCAL_FINGER_MODE)
;;;1827   //				{
;;;1828   //					delta = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c);
;;;1829   //				}
;;;1830   //				else
;;;1831   				{
;;;1832   					delta = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c);
0000f2  eb011001          ADD      r0,r1,r1,LSL #4
0000f6  eb001041          ADD      r0,r0,r1,LSL #5
0000fa  f64d713b          MOV      r1,#0xdf3b            ;1801
0000fe  eb070b80          ADD      r11,r7,r0,LSL #2
;;;1833   				}					
;;;1834   				rLabel_val = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
000102  eb010a40          ADD      r10,r1,r0,LSL #1
000106  bf00              NOP      
                  |L8.264|
000108  fa4ff984          SXTB     r9,r4
00010c  eb0b0049          ADD      r0,r11,r9,LSL #1      ;1832
000110  f64b1556          MOV      r5,#0xb956            ;1832
000114  5f45              LDRSH    r5,[r0,r5]            ;1832
000116  eb090007          ADD      r0,r9,r7
;;;1835   
;;;1836   				if ((delta >= threshold) && (rLabel_val == 0))
00011a  42b5              CMP      r5,r6
00011c  f810000a          LDRB     r0,[r0,r10]           ;1834
000120  bfa8              IT       GE
000122  2800              CMPGE    r0,#0
000124  d005              BEQ      |L8.306|
;;;1837   				{
;;;1838   					tConflict.tInfo.SET = NO;
;;;1839   					tConflict.tInfo.NUM = 0;
;;;1840   					tConflict.tInfo.BF  = 0;
;;;1841   
;;;1842   					if(thisModeConf->Label.bSplitSearchDirc_4_On)
;;;1843   					{
;;;1844   						if(thisInfo->DrawingDirection == 1 || thisInfo->DrawingDirection == 2)SearchDirc = BOUNDARY_8_SEARCH_DIRECTION;
;;;1845   						else SearchDirc = BOUNDARY_4_SEARCH_DIRECTION;
;;;1846   					}
;;;1847   						
;;;1848   					algorithm_label_GetConflictInfo(YES, SearchDirc, 0, tPos, &tConflict, mode);
;;;1849   	
;;;1850   					if( tConflict.tInfo.NUM == 0 )
;;;1851   					{
;;;1852   						thisInfo->tLabel.LabelSplitMergeCnt++;
;;;1853   // 						if(thisInfo->TouchNumCnt > thisModeConf->Coord.ucTouchCountMax && label_num >= thisInfo->tCoord.tOrgPastPos[0].sFinger_)	continue;
;;;1854   						
;;;1855   						if( label_num < LOOSE_POSBUF_ )
;;;1856   						{
;;;1857   							algorithm_label_Insert_NewRecord_to_LabelTable(label_num, tPos, delta, YES, mode);
;;;1858   
;;;1859   							label_num++;
;;;1860   						}
;;;1861   					}
;;;1862   				}
;;;1863   				else if( delta < threshold )
000126  42b5              CMP      r5,r6
;;;1864   				{
;;;1865   					if( threshold_next < delta )
;;;1866   					{
;;;1867   						threshold_next = delta;
000128  bfbe              ITTT     LT
00012a  9803              LDRLT    r0,[sp,#0xc]
00012c  42a8              CMPLT    r0,r5
00012e  9503              STRLT    r5,[sp,#0xc]
000130  e06f              B        |L8.530|
                  |L8.306|
000132  f89d000b          LDRB     r0,[sp,#0xb]          ;1838
000136  f0200080          BIC      r0,r0,#0x80           ;1838
00013a  f88d000b          STRB     r0,[sp,#0xb]          ;1838
00013e  2000              MOVS     r0,#0                 ;1839
000140  f88d000a          STRB     r0,[sp,#0xa]          ;1839
000144  f8ad0008          STRH     r0,[sp,#8]            ;1840
000148  4845              LDR      r0,|L8.608|
00014a  6840              LDR      r0,[r0,#4]            ;1842  ; thisModeConf
00014c  f890003e          LDRB     r0,[r0,#0x3e]         ;1842
000150  b158              CBZ      r0,|L8.362|
000152  4843              LDR      r0,|L8.608|
000154  6880              LDR      r0,[r0,#8]            ;1844  ; thisInfo
000156  f5005080          ADD      r0,r0,#0x1000         ;1844
00015a  f8900fa9          LDRB     r0,[r0,#0xfa9]        ;1844
00015e  2801              CMP      r0,#1                 ;1844
000160  bf16              ITET     NE                    ;1844
000162  2802              CMPNE    r0,#2                 ;1844
000164  2008              MOVEQ    r0,#8                 ;1844
000166  2004              MOVNE    r0,#4                 ;1845
000168  9004              STR      r0,[sp,#0x10]         ;1844
                  |L8.362|
00016a  9909              LDR      r1,[sp,#0x24]         ;1848
00016c  a802              ADD      r0,sp,#8              ;1848
00016e  e9cd0100          STRD     r0,r1,[sp,#0]         ;1848
000172  4623              MOV      r3,r4                 ;1848
000174  f04f0200          MOV      r2,#0                 ;1848
000178  f04f0001          MOV      r0,#1                 ;1848
00017c  9904              LDR      r1,[sp,#0x10]         ;1848
00017e  f7fffffe          BL       algorithm_label_GetConflictInfo
000182  f89d000a          LDRB     r0,[sp,#0xa]          ;1850
000186  2800              CMP      r0,#0                 ;1850
000188  d143              BNE      |L8.530|
00018a  4835              LDR      r0,|L8.608|
00018c  6880              LDR      r0,[r0,#8]            ;1852  ; thisInfo
00018e  f8b01351          LDRH     r1,[r0,#0x351]        ;1852
000192  1c49              ADDS     r1,r1,#1              ;1852
000194  f8a01351          STRH     r1,[r0,#0x351]        ;1852
000198  9905              LDR      r1,[sp,#0x14]         ;1855
00019a  2910              CMP      r1,#0x10              ;1855
00019c  d239              BCS      |L8.530|
00019e  f1000e3a          ADD      lr,r0,#0x3a           ;1857
0001a2  1c4b              ADDS     r3,r1,#1              ;1857
0001a4  ebc100c1          RSB      r0,r1,r1,LSL #3       ;1857
0001a8  eb001141          ADD      r1,r0,r1,LSL #5       ;1857
0001ac  eb01000e          ADD      r0,r1,lr              ;1857
0001b0  9400              STR      r4,[sp,#0]            ;1857
0001b2  7043              STRB     r3,[r0,#1]            ;1857
0001b4  8105              STRH     r5,[r0,#8]            ;1857
0001b6  f8bd1000          LDRH     r1,[sp,#0]            ;1857
0001ba  8141              STRH     r1,[r0,#0xa]          ;1857
0001bc  f99d2001          LDRSB    r2,[sp,#1]            ;1857
0001c0  7082              STRB     r2,[r0,#2]            ;1857
0001c2  70c2              STRB     r2,[r0,#3]            ;1857
0001c4  f99d1000          LDRSB    r1,[sp,#0]            ;1857
0001c8  7101              STRB     r1,[r0,#4]            ;1857
0001ca  7141              STRB     r1,[r0,#5]            ;1857
0001cc  fb01fc05          MUL      r12,r1,r5             ;1857
0001d0  e001              B        |L8.470|
                  |L8.466|
0001d2  e03a              B        |L8.586|
                  |L8.468|
0001d4  e02b              B        |L8.558|
                  |L8.470|
0001d6  f8c0c00c          STR      r12,[r0,#0xc]         ;1857
0001da  fb02fc05          MUL      r12,r2,r5             ;1857
0001de  f8c0c010          STR      r12,[r0,#0x10]        ;1857
0001e2  6145              STR      r5,[r0,#0x14]         ;1857
0001e4  6185              STR      r5,[r0,#0x18]         ;1857
0001e6  f04f0c01          MOV      r12,#1                ;1857
0001ea  f8a0c006          STRH     r12,[r0,#6]           ;1857
0001ee  eb021c02          ADD      r12,r2,r2,LSL #4      ;1857
0001f2  eb0c1c42          ADD      r12,r12,r2,LSL #5     ;1857
0001f6  f64d723b          MOV      r2,#0xdf3b            ;1857
0001fa  4439              ADD      r1,r1,r7              ;1857
0001fc  eb02024c          ADD      r2,r2,r12,LSL #1      ;1857
000200  7840              LDRB     r0,[r0,#1]            ;1857
000202  5488              STRB     r0,[r1,r2]            ;1857
000204  f89e0000          LDRB     r0,[lr,#0]            ;1857
000208  1c41              ADDS     r1,r0,#1              ;1857
00020a  f88e1000          STRB     r1,[lr,#0]            ;1857
00020e  b2d8              UXTB     r0,r3                 ;1859
000210  9005              STR      r0,[sp,#0x14]         ;1859
                  |L8.530|
000212  4913              LDR      r1,|L8.608|
000214  f1090001          ADD      r0,r9,#1
000218  b240              SXTB     r0,r0
00021a  6889              LDR      r1,[r1,#8]  ; thisInfo
00021c  f3600407          BFI      r4,r0,#0,#8
000220  eb010188          ADD      r1,r1,r8,LSL #2
000224  f99112af          LDRSB    r1,[r1,#0x2af]
000228  4288              CMP      r0,r1
00022a  f77faf6d          BLE      |L8.264|
                  |L8.558|
00022e  490c              LDR      r1,|L8.608|
000230  1220              ASRS     r0,r4,#8
000232  1c40              ADDS     r0,r0,#1
000234  6889              LDR      r1,[r1,#8]  ; thisInfo
000236  b240              SXTB     r0,r0
000238  eb010188          ADD      r1,r1,r8,LSL #2
00023c  f360240f          BFI      r4,r0,#8,#8
000240  f99112ad          LDRSB    r1,[r1,#0x2ad]
000244  4288              CMP      r0,r1
000246  f77faf46          BLE      |L8.214|
                  |L8.586|
;;;1868   					}
;;;1869   				}
;;;1870   			}
;;;1871   		}
;;;1872   
;;;1873   		//if( temp_label->usValidCellCnt[_valid_area_idx] < thisModeConf->Label.usSmallTouchThd/*thisModeConf->Label.usLargeTouchThd*/ )
;;;1874   		{
;;;1875   			LabelNoiseThd = (threshold - threshold_next);
00024a  9803              LDR      r0,[sp,#0xc]
00024c  1a30              SUBS     r0,r6,r0
00024e  b205              SXTH     r5,r0
000250  9808              LDR      r0,[sp,#0x20]
000252  4286              CMP      r6,r0
000254  f73faf28          BGT      |L8.168|
;;;1876   		}
;;;1877       } while (threshold > _LowerThd);
;;;1878   #endif
;;;1879   }
000258  b00a              ADD      sp,sp,#0x28
00025a  e8bd8ff0          POP      {r4-r11,pc}
;;;1880   
                          ENDP

00025e  0000              DCW      0x0000
                  |L8.608|
                          DCD      ||.data||
                  |L8.612|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_SplitNMerge_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_SplitNMerge_process PROC
;;;2489   
;;;2490   void algorithm_label_SplitNMerge_process(int mode)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;2491   {
;;;2492   	uint8_t valid_area_idx, label_start_idx;
;;;2493   	uint16_t usLabelThd;
;;;2494   
;;;2495   	tOrigDeltaInfo_t	*temp_delta;
;;;2496   	tLabelInfo_t 		*temp_label;
;;;2497   
;;;2498   #ifdef LocalMode_DSP_B_code_Enable
;;;2499   	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;2500   	{
;;;2501   		temp_delta = &thisInfo->tDelta_local;
;;;2502   		temp_label = &thisInfo->tLabel_local;
;;;2503   	}
;;;2504   	else
;;;2505   #endif
;;;2506   	{
;;;2507   		temp_delta = &thisInfo->tDelta;
000004  4c7a              LDR      r4,|L9.496|
000006  b094              SUB      sp,sp,#0x50           ;2491
000008  68a0              LDR      r0,[r4,#8]  ; thisInfo
00000a  f100010c          ADD      r1,r0,#0xc
00000e  303a              ADDS     r0,r0,#0x3a
;;;2508   		temp_label = &thisInfo->tLabel;
;;;2509   	}
;;;2510   
;;;2511   #ifdef LocalMode_DSP_B_code_Enable 
;;;2512   	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;2513   	{
;;;2514   		usLabelThd  = thisModeConf->Label.usLocalSeedBase;
;;;2515   		usLabelThd += ((temp_delta->iMaxStrength - thisModeConf->Label.usLocalSeedBase) * thisModeConf->Label.ucLocalSeedSlope)>>6;
;;;2516   		
;;;2517   		algorithm_label_SearchValidAreaforPen(temp_delta->tValidRect, usLabelThd, mode);
;;;2518   	}
;;;2519   	else
;;;2520   #endif
;;;2521   	{
;;;2522   #if ADAPTIVE_SEEDBASE
;;;2523   		int16_t AdaptiveSeedBase = 0;
;;;2524   	
;;;2525   		if(thisInfo->bIsPalm){
;;;2526   			AdaptiveSeedBase = thisModeConf->Label.usSeedBase - (temp_delta->iPosCnt>>4);
;;;2527   			if(AdaptiveSeedBase < (thisModeConf->Label.usSeedBase>>1))
;;;2528   				AdaptiveSeedBase = (thisModeConf->Label.usSeedBase>>1);
;;;2529   		}
;;;2530   		else					
;;;2531   			AdaptiveSeedBase = thisModeConf->Label.usSeedBase;
;;;2532   	
;;;2533   		usLabelThd  = AdaptiveSeedBase;
;;;2534   		usLabelThd += ((temp_delta->iMaxStrength - AdaptiveSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
;;;2535   #else
;;;2536   		usLabelThd  = thisModeConf->Label.usSeedBase;
000010  900e              STR      r0,[sp,#0x38]
000012  6862              LDR      r2,[r4,#4]  ; thisModeConf
;;;2537   		usLabelThd += ((temp_delta->iMaxStrength - thisModeConf->Label.usSeedBase) * thisModeConf->Label.ucSeedSlope)>>6;
000014  688b              LDR      r3,[r1,#8]
000016  f8b20039          LDRH     r0,[r2,#0x39]         ;2536
00001a  f892203b          LDRB     r2,[r2,#0x3b]
00001e  1a1b              SUBS     r3,r3,r0
000020  435a              MULS     r2,r3,r2
000022  eb0013a2          ADD      r3,r0,r2,ASR #6
;;;2538   #endif
;;;2539   		
;;;2540   		
;;;2541   #if LABEL_FAST_EN	
;;;2542   		algorithm_label_SearchValidArea_Fast(temp_delta->tValidRect, usLabelThd, mode);
;;;2543   #else
;;;2544   		algorithm_label_SearchValidArea(temp_delta->tValidRect, usLabelThd, mode);
000026  6808              LDR      r0,[r1,#0]
000028  b219              SXTH     r1,r3
00002a  9a14              LDR      r2,[sp,#0x50]
00002c  910f              STR      r1,[sp,#0x3c]
00002e  f7fffffe          BL       algorithm_label_SearchValidArea
;;;2545   #endif
;;;2546   		
;;;2547   		if(thisModeConf->Palm.ucPalmDetectionOn == 2 || (thisModeConf->Palm.ucPalmDetectionOn == 3 && thisInfo->bNewVersionPalm == 1))
000032  6860              LDR      r0,[r4,#4]  ; thisModeConf
000034  f89010ed          LDRB     r1,[r0,#0xed]
000038  2902              CMP      r1,#2
00003a  d009              BEQ      |L9.80|
00003c  4620              MOV      r0,r4
00003e  2903              CMP      r1,#3
000040  d109              BNE      |L9.86|
000042  6880              LDR      r0,[r0,#8]  ; thisInfo
000044  f5005080          ADD      r0,r0,#0x1000
000048  f8900fb6          LDRB     r0,[r0,#0xfb6]
00004c  2801              CMP      r0,#1
00004e  d102              BNE      |L9.86|
                  |L9.80|
;;;2548   			algorithm_label_palm_rejection(mode);
000050  9814              LDR      r0,[sp,#0x50]
000052  f7fffffe          BL       algorithm_label_palm_rejection
                  |L9.86|
;;;2549   		
;;;2550   		for( valid_area_idx=0; valid_area_idx<temp_label->ucValidNum; valid_area_idx++ )
000056  2000              MOVS     r0,#0
000058  9009              STR      r0,[sp,#0x24]
00005a  980e              LDR      r0,[sp,#0x38]
00005c  f8900271          LDRB     r0,[r0,#0x271]
000060  2800              CMP      r0,#0
000062  bf88              IT       HI                    ;2547
000064  f04f0901          MOVHI    r9,#1                 ;2547
000068  d96d              BLS      |L9.326|
                  |L9.106|
;;;2551   		{
;;;2552   			label_start_idx = temp_label->ucNum;
00006a  980e              LDR      r0,[sp,#0x38]
;;;2553   			
;;;2554   #ifdef SHORT_COMPENSATION			
;;;2555   			algorithm_label_Delta_Compensation(valid_area_idx, label_start_idx, usLabelThd);
;;;2556   #endif	
;;;2557   			algorithm_label_Split(valid_area_idx, label_start_idx, usLabelThd, mode);
00006c  9b14              LDR      r3,[sp,#0x50]
00006e  9a0f              LDR      r2,[sp,#0x3c]
000070  7806              LDRB     r6,[r0,#0]            ;2552
000072  9809              LDR      r0,[sp,#0x24]
000074  4631              MOV      r1,r6
000076  f7fffffe          BL       algorithm_label_Split
00007a  495d              LDR      r1,|L9.496|
00007c  9809              LDR      r0,[sp,#0x24]
00007e  f8dd8050          LDR      r8,[sp,#0x50]
000082  6889              LDR      r1,[r1,#8]  ; thisInfo
000084  f1010a3a          ADD      r10,r1,#0x3a
000088  eb0a0080          ADD      r0,r10,r0,LSL #2
00008c  9003              STR      r0,[sp,#0xc]
00008e  f9901272          LDRSB    r1,[r0,#0x272]
000092  f9900273          LDRSB    r0,[r0,#0x273]
000096  f361250f          BFI      r5,r1,#8,#8
00009a  4281              CMP      r1,r0
00009c  dc3f              BGT      |L9.286|
                  |L9.158|
00009e  9803              LDR      r0,[sp,#0xc]
0000a0  9903              LDR      r1,[sp,#0xc]
0000a2  f9900274          LDRSB    r0,[r0,#0x274]
0000a6  f9911275          LDRSB    r1,[r1,#0x275]
0000aa  f3600507          BFI      r5,r0,#0,#8
0000ae  4288              CMP      r0,r1
0000b0  dc2b              BGT      |L9.266|
0000b2  f3452007          SBFX     r0,r5,#8,#8
0000b6  eb001200          ADD      r2,r0,r0,LSL #4
0000ba  f64d713b          MOV      r1,#0xdf3b
0000be  eb021040          ADD      r0,r2,r0,LSL #5
0000c2  eb010140          ADD      r1,r1,r0,LSL #1
0000c6  9111              STR      r1,[sp,#0x44]
0000c8  494a              LDR      r1,|L9.500|
0000ca  eb010180          ADD      r1,r1,r0,LSL #2
0000ce  910c              STR      r1,[sp,#0x30]
0000d0  4948              LDR      r1,|L9.500|
0000d2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000d6  900a              STR      r0,[sp,#0x28]
                  |L9.216|
0000d8  4846              LDR      r0,|L9.500|
0000da  b26f              SXTB     r7,r5
0000dc  1839              ADDS     r1,r7,r0
0000de  9811              LDR      r0,[sp,#0x44]
0000e0  5c08              LDRB     r0,[r1,r0]
0000e2  283f              CMP      r0,#0x3f
0000e4  f04f0000          MOV      r0,#0
0000e8  d03d              BEQ      |L9.358|
0000ea  990a              LDR      r1,[sp,#0x28]
0000ec  eb010187          ADD      r1,r1,r7,LSL #2
0000f0  f50141c0          ADD      r1,r1,#0x6000
0000f4  f8c10d8c          STR      r0,[r1,#0xd8c]
                  |L9.248|
0000f8  9903              LDR      r1,[sp,#0xc]
0000fa  1c78              ADDS     r0,r7,#1
0000fc  b240              SXTB     r0,r0
0000fe  f9911275          LDRSB    r1,[r1,#0x275]
000102  f3600507          BFI      r5,r0,#0,#8
000106  4288              CMP      r0,r1
000108  dde6              BLE      |L9.216|
                  |L9.266|
00010a  9903              LDR      r1,[sp,#0xc]
00010c  1228              ASRS     r0,r5,#8
00010e  1c40              ADDS     r0,r0,#1
000110  b240              SXTB     r0,r0
000112  f9911273          LDRSB    r1,[r1,#0x273]
000116  f360250f          BFI      r5,r0,#8,#8
00011a  4288              CMP      r0,r1
00011c  ddbf              BLE      |L9.158|
                  |L9.286|
;;;2558   			label_start_idx = algorithm_label_Split_PostProcess(valid_area_idx, label_start_idx, mode);
;;;2559   			algorithm_label_Merge(valid_area_idx, label_start_idx, mode);
00011e  4631              MOV      r1,r6
000120  9a14              LDR      r2,[sp,#0x50]
000122  9809              LDR      r0,[sp,#0x24]
000124  f7fffffe          BL       algorithm_label_Merge
;;;2560   			algorithm_label_Merge_PostProcess(valid_area_idx, label_start_idx, mode);			
000128  4631              MOV      r1,r6
00012a  9a14              LDR      r2,[sp,#0x50]
00012c  9809              LDR      r0,[sp,#0x24]
00012e  f7fffffe          BL       algorithm_label_Merge_PostProcess
000132  9809              LDR      r0,[sp,#0x24]         ;2550
000134  1c40              ADDS     r0,r0,#1              ;2550
000136  b2c0              UXTB     r0,r0                 ;2550
000138  9009              STR      r0,[sp,#0x24]         ;2550
00013a  980e              LDR      r0,[sp,#0x38]         ;2550
00013c  f8901271          LDRB     r1,[r0,#0x271]        ;2550
000140  9809              LDR      r0,[sp,#0x24]         ;2550
000142  4281              CMP      r1,r0                 ;2550
000144  d891              BHI      |L9.106|
                  |L9.326|
;;;2561   		}
;;;2562   	}
;;;2563   
;;;2564   	if( thisModeConf->Label.bExpand )
000146  482a              LDR      r0,|L9.496|
000148  6840              LDR      r0,[r0,#4]  ; thisModeConf
00014a  f890003d          LDRB     r0,[r0,#0x3d]
00014e  2800              CMP      r0,#0
;;;2565   	{
;;;2566   		algorithm_label_MarkBoundary(YES, mode);
;;;2567   	}
;;;2568   #ifdef LocalMode_DSP_B_code_Enable
;;;2569   	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;2570   	{
;;;2571   		algorithm_label_EdgeExpand(mode);
;;;2572   //		protocol_LogPaddedMatrix(LT_GROUP, thisInfo->ucScreenCol, HAL_GET_LOCAL_LABEL_IMAGE_PTR(), COL_MAX, 9, 85/*MAX Intensity*/);
;;;2573   	}
;;;2574   	else
;;;2575   #endif
;;;2576   	{
;;;2577   //		protocol_LogPaddedMatrix(LT_GROUP, thisInfo->ucScreenCol, HAL_GET_LABEL_IMAGE_PTR(), COL_MAX, thisInfo->ucScreenRow, 85/*MAX Intensity*/);
;;;2578   	}
;;;2579   }
000150  bf04              ITT      EQ
000152  b015              ADDEQ    sp,sp,#0x54
000154  e8bd8ff0          POPEQ    {r4-r11,pc}
000158  2001              MOVS     r0,#1                 ;2566
00015a  9914              LDR      r1,[sp,#0x50]         ;2566
00015c  b015              ADD      sp,sp,#0x54           ;2566
00015e  e8bd4ff0          POP      {r4-r11,lr}           ;2566
000162  f7ffbffe          B.W      algorithm_label_MarkBoundary
                  |L9.358|
000166  9005              STR      r0,[sp,#0x14]         ;2566
000168  a805              ADD      r0,sp,#0x14           ;2566
00016a  e9cd0800          STRD     r0,r8,[sp,#0]         ;2566
00016e  2200              MOVS     r2,#0                 ;2566
000170  462b              MOV      r3,r5                 ;2566
000172  2108              MOVS     r1,#8                 ;2566
000174  4610              MOV      r0,r2                 ;2566
000176  f7fffffe          BL       algorithm_label_GetConflictInfo
00017a  980c              LDR      r0,[sp,#0x30]         ;2566
00017c  240f              MOVS     r4,#0xf               ;2566
00017e  eb000047          ADD      r0,r0,r7,LSL #1       ;2566
000182  f5004b30          ADD      r11,r0,#0xb000        ;2566
000186  bf00              NOP                            ;2566
                  |L9.392|
000188  f8bd0014          LDRH     r0,[sp,#0x14]         ;2566
00018c  fa09f104          LSL      r1,r9,r4              ;2566
000190  4208              TST      r0,r1                 ;2566
000192  d01b              BEQ      |L9.460|
000194  f9bb1956          LDRSH    r1,[r11,#0x956]       ;2566
000198  f89d0016          LDRB     r0,[sp,#0x16]         ;2566
00019c  2300              MOVS     r3,#0                 ;2566
00019e  fb91f0f0          SDIV     r0,r1,r0              ;2566
0001a2  b202              SXTH     r2,r0                 ;2566
0001a4  2000              MOVS     r0,#0                 ;2566
0001a6  e9cd0800          STRD     r0,r8,[sp,#0]         ;2566
0001aa  b2e0              UXTB     r0,r4                 ;2566
0001ac  4629              MOV      r1,r5                 ;2566
0001ae  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
0001b2  ebc400c4          RSB      r0,r4,r4,LSL #3       ;2566
0001b6  eb001044          ADD      r0,r0,r4,LSL #5       ;2566
0001ba  4450              ADD      r0,r0,r10             ;2566
0001bc  f8bd2014          LDRH     r2,[sp,#0x14]         ;2566
0001c0  8b81              LDRH     r1,[r0,#0x1c]         ;2566
0001c2  4311              ORRS     r1,r1,r2              ;2566
0001c4  8381              STRH     r1,[r0,#0x1c]         ;2566
0001c6  42a6              CMP      r6,r4                 ;2566
0001c8  bfc8              IT       GT                    ;2566
0001ca  b2e6              UXTBGT   r6,r4                 ;2566
                  |L9.460|
0001cc  1e64              SUBS     r4,r4,#1              ;2566
0001ce  d2db              BCS      |L9.392|
0001d0  f89d0017          LDRB     r0,[sp,#0x17]         ;2566
0001d4  f0400080          ORR      r0,r0,#0x80           ;2566
0001d8  f88d0017          STRB     r0,[sp,#0x17]         ;2566
0001dc  980a              LDR      r0,[sp,#0x28]         ;2566
0001de  9905              LDR      r1,[sp,#0x14]         ;2566
0001e0  eb000087          ADD      r0,r0,r7,LSL #2       ;2566
0001e4  f50040c0          ADD      r0,r0,#0x6000         ;2566
0001e8  f8c01d8c          STR      r1,[r0,#0xd8c]        ;2566
0001ec  e784              B        |L9.248|
;;;2580   
                          ENDP

0001ee  0000              DCW      0x0000
                  |L9.496|
                          DCD      ||.data||
                  |L9.500|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_Split_PostProcess||, CODE, READONLY, ALIGN=2

                  algorithm_label_Split_PostProcess PROC
;;;1880   
;;;1881   uint8_t algorithm_label_Split_PostProcess(uint8_t _valid_area_idx, uint8_t _label_start_idx, int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1882   {
;;;1883   	int l;
;;;1884   	int16_t d, label_id;
;;;1885   	tConflictInfo_t tConflict;
;;;1886   	tCell_t tPos;
;;;1887   	uint8_t rtn_val = _label_start_idx;
000004  460e              MOV      r6,r1
;;;1888   
;;;1889   	tLabelInfo_t	*temp_label;
;;;1890   
;;;1891   	temp_label = &thisInfo->tLabel;
000006  494e              LDR      r1,|L10.320|
000008  b08f              SUB      sp,sp,#0x3c           ;1882
00000a  4690              MOV      r8,r2                 ;1882
00000c  6889              LDR      r1,[r1,#8]  ; thisInfo
00000e  f101093a          ADD      r9,r1,#0x3a
;;;1892   
;;;1893   	for( tPos.r=temp_label->tValidRect[_valid_area_idx].rs; tPos.r<=temp_label->tValidRect[_valid_area_idx].re; tPos.r++ )
000012  eb090080          ADD      r0,r9,r0,LSL #2
000016  9003              STR      r0,[sp,#0xc]
000018  f9901272          LDRSB    r1,[r0,#0x272]
00001c  f9900273          LDRSB    r0,[r0,#0x273]
000020  f361250f          BFI      r5,r1,#8,#8
000024  4281              CMP      r1,r0
;;;1894   	{
;;;1895   		for( tPos.c=temp_label->tValidRect[_valid_area_idx].cs; tPos.c<=temp_label->tValidRect[_valid_area_idx].ce; tPos.c++ )
;;;1896   		{
;;;1897   			label_id = HAL_READ_LABEL_IMAGE(tPos.r, tPos.c);
;;;1898   
;;;1899   			if( label_id == LABEL_CONFLICT_MARKER )
;;;1900   			{
;;;1901   				tConflict.ulValue = 0;
;;;1902   
;;;1903   				algorithm_label_GetConflictInfo(NO, BOUNDARY_8_SEARCH_DIRECTION, 0, tPos, &tConflict, mode);
;;;1904   
;;;1905   				for( l=LOOSE_POSBUF_; l--; )
;;;1906   				{
;;;1907   					if( (tConflict.tInfo.BF & _BV(l)) )
000026  bfd8              IT       LE
000028  f04f0a01          MOVLE    r10,#1
00002c  dc3f              BGT      |L10.174|
                  |L10.46|
00002e  9803              LDR      r0,[sp,#0xc]          ;1895
000030  9903              LDR      r1,[sp,#0xc]          ;1895
000032  f9900274          LDRSB    r0,[r0,#0x274]        ;1895
000036  f9911275          LDRSB    r1,[r1,#0x275]        ;1895
00003a  f3600507          BFI      r5,r0,#0,#8           ;1895
00003e  4288              CMP      r0,r1                 ;1895
000040  dc2b              BGT      |L10.154|
000042  f3452007          SBFX     r0,r5,#8,#8           ;1897
000046  eb001200          ADD      r2,r0,r0,LSL #4       ;1897
00004a  f64d713b          MOV      r1,#0xdf3b            ;1897
00004e  eb021040          ADD      r0,r2,r0,LSL #5       ;1897
000052  eb010140          ADD      r1,r1,r0,LSL #1       ;1897
000056  910d              STR      r1,[sp,#0x34]         ;1897
000058  493a              LDR      r1,|L10.324|
;;;1908   					{
;;;1909   //						if(mode == LOCAL_FINGER_MODE)
;;;1910   //							d = HAL_READ_LOCAL_FINGER_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
;;;1911   //						else
;;;1912   							d = HAL_READ_DELTA_IMAGE(tPos.r, tPos.c)/tConflict.tInfo.NUM;
00005a  eb010180          ADD      r1,r1,r0,LSL #2
00005e  910a              STR      r1,[sp,#0x28]
000060  4938              LDR      r1,|L10.324|
;;;1913   
;;;1914   						algorithm_label_Add_NewNode_to_LabelRecord(l, tPos, d, NO, NO, mode);
;;;1915   
;;;1916   						temp_label->tTable[l].tConflictInfo.tInfo.BF |= tConflict.tInfo.BF;
;;;1917   						if(rtn_val > l)        rtn_val = l;
;;;1918   					}
;;;1919   				}
;;;1920   
;;;1921   				tConflict.tInfo.SET = YES;
;;;1922   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, tConflict.ulValue);
000062  eb0100c0          ADD      r0,r1,r0,LSL #3
000066  9007              STR      r0,[sp,#0x1c]
                  |L10.104|
000068  4836              LDR      r0,|L10.324|
00006a  b26f              SXTB     r7,r5
00006c  1839              ADDS     r1,r7,r0              ;1897
00006e  980d              LDR      r0,[sp,#0x34]         ;1897
000070  5c08              LDRB     r0,[r1,r0]            ;1897
000072  283f              CMP      r0,#0x3f              ;1899
;;;1923   			}
;;;1924   			else
;;;1925   			{
;;;1926   				HAL_WRITE_CONFLICT_LABEL_IMAGE(tPos.r, tPos.c, 0);
000074  f04f0000          MOV      r0,#0
000078  d01d              BEQ      |L10.182|
00007a  9907              LDR      r1,[sp,#0x1c]
00007c  eb010187          ADD      r1,r1,r7,LSL #2
000080  f50141c0          ADD      r1,r1,#0x6000
000084  f8c10d8c          STR      r0,[r1,#0xd8c]
                  |L10.136|
000088  9903              LDR      r1,[sp,#0xc]          ;1895
00008a  1c78              ADDS     r0,r7,#1              ;1895
00008c  b240              SXTB     r0,r0                 ;1895
00008e  f9911275          LDRSB    r1,[r1,#0x275]        ;1895
000092  f3600507          BFI      r5,r0,#0,#8           ;1895
000096  4288              CMP      r0,r1                 ;1895
000098  dde6              BLE      |L10.104|
                  |L10.154|
00009a  9903              LDR      r1,[sp,#0xc]          ;1893
00009c  1228              ASRS     r0,r5,#8              ;1895
00009e  1c40              ADDS     r0,r0,#1              ;1895
0000a0  b240              SXTB     r0,r0                 ;1893
0000a2  f9911273          LDRSB    r1,[r1,#0x273]        ;1893
0000a6  f360250f          BFI      r5,r0,#8,#8           ;1893
0000aa  4288              CMP      r0,r1                 ;1893
0000ac  ddbf              BLE      |L10.46|
                  |L10.174|
;;;1927   			}
;;;1928   		}
;;;1929   	}
;;;1930   	return rtn_val;
;;;1931   }
0000ae  b00f              ADD      sp,sp,#0x3c
0000b0  4630              MOV      r0,r6                 ;1930
0000b2  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.182|
0000b6  9006              STR      r0,[sp,#0x18]         ;1903
0000b8  a806              ADD      r0,sp,#0x18           ;1903
0000ba  e9cd0800          STRD     r0,r8,[sp,#0]         ;1903
0000be  2200              MOVS     r2,#0                 ;1903
0000c0  462b              MOV      r3,r5                 ;1903
0000c2  2108              MOVS     r1,#8                 ;1903
0000c4  4610              MOV      r0,r2                 ;1903
0000c6  f7fffffe          BL       algorithm_label_GetConflictInfo
0000ca  980a              LDR      r0,[sp,#0x28]         ;1912
0000cc  240f              MOVS     r4,#0xf               ;1905
0000ce  eb000047          ADD      r0,r0,r7,LSL #1       ;1912
0000d2  f5004b30          ADD      r11,r0,#0xb000        ;1912
0000d6  bf00              NOP                            ;1907
                  |L10.216|
0000d8  f8bd0018          LDRH     r0,[sp,#0x18]         ;1907
0000dc  fa0af104          LSL      r1,r10,r4             ;1907
0000e0  4208              TST      r0,r1                 ;1907
0000e2  d01b              BEQ      |L10.284|
0000e4  f9bb0956          LDRSH    r0,[r11,#0x956]       ;1912
0000e8  f89d101a          LDRB     r1,[sp,#0x1a]         ;1912
0000ec  2300              MOVS     r3,#0                 ;1914
0000ee  fb90f0f1          SDIV     r0,r0,r1              ;1912
0000f2  b202              SXTH     r2,r0                 ;1912
0000f4  2000              MOVS     r0,#0                 ;1914
0000f6  e9cd0800          STRD     r0,r8,[sp,#0]         ;1914
0000fa  b2e0              UXTB     r0,r4                 ;1914
0000fc  4629              MOV      r1,r5                 ;1914
0000fe  f7fffffe          BL       algorithm_label_Add_NewNode_to_LabelRecord
000102  ebc400c4          RSB      r0,r4,r4,LSL #3       ;1916
000106  eb001044          ADD      r0,r0,r4,LSL #5       ;1916
00010a  4448              ADD      r0,r0,r9              ;1916
00010c  f8bd2018          LDRH     r2,[sp,#0x18]         ;1916
000110  8b81              LDRH     r1,[r0,#0x1c]         ;1916
000112  4311              ORRS     r1,r1,r2              ;1916
000114  8381              STRH     r1,[r0,#0x1c]         ;1916
000116  42a6              CMP      r6,r4                 ;1917
000118  bfc8              IT       GT                    ;1917
00011a  b2e6              UXTBGT   r6,r4                 ;1917
                  |L10.284|
00011c  1e64              SUBS     r4,r4,#1              ;1917
00011e  d2db              BCS      |L10.216|
000120  f89d001b          LDRB     r0,[sp,#0x1b]         ;1921
000124  f0400080          ORR      r0,r0,#0x80           ;1921
000128  f88d001b          STRB     r0,[sp,#0x1b]         ;1921
00012c  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1921
000130  eb010187          ADD      r1,r1,r7,LSL #2       ;1922
000134  f50141c0          ADD      r1,r1,#0x6000         ;1922
000138  f8c10d8c          STR      r0,[r1,#0xd8c]        ;1922
00013c  e7a4              B        |L10.136|
;;;1932   
                          ENDP

00013e  0000              DCW      0x0000
                  |L10.320|
                          DCD      ||.data||
                  |L10.324|
                          DCD      FullSharedBuff

                          AREA ||i.algorithm_label_init||, CODE, READONLY, ALIGN=2

                  algorithm_label_init PROC
;;;83     
;;;84     void algorithm_label_init(void)
000000  b510              PUSH     {r4,lr}
;;;85     {
;;;86     #if !defined(FINGER_ONLY)
;;;87     	thisCommonConf = algorithm_GetCommonConfig();
;;;88     #endif /* !defined(FINGER_ONLY) */
;;;89     	thisInfo       = algorithm_GetInfo();
000002  f7fffffe          BL       algorithm_GetInfo
000006  4907              LDR      r1,|L11.36|
;;;90     
;;;91     	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
000008  6088              STR      r0,[r1,#8]  ; thisInfo
00000a  f2413124          MOV      r1,#0x1324
00000e  4806              LDR      r0,|L11.40|
000010  f7fffffe          BL       __aeabi_memclr4
;;;92     	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
000014  e8bd4010          POP      {r4,lr}
000018  f6444190          MOV      r1,#0x4c90
00001c  4803              LDR      r0,|L11.44|
00001e  f7ffbffe          B.W      __aeabi_memclr4
;;;93     }
;;;94     
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      ||.data||
                  |L11.40|
                          DCD      FullSharedBuff+0xded8
                  |L11.44|
                          DCD      FullSharedBuff+0x6c00

                          AREA ||i.algorithm_label_init_param||, CODE, READONLY, ALIGN=2

                  algorithm_label_init_param PROC
;;;94     
;;;95     void algorithm_label_init_param(void)
000000  b510              PUSH     {r4,lr}
;;;96     {
;;;97     	thisModeConf   = algorithm_GetModeConfig();
000002  f7fffffe          BL       algorithm_GetModeConfig
000006  4901              LDR      r1,|L12.12|
000008  6048              STR      r0,[r1,#4]  ; thisModeConf
;;;98     }
00000a  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.algorithm_label_initialise||, CODE, READONLY, ALIGN=2

                  algorithm_label_initialise PROC
;;;99     
;;;100    void algorithm_label_initialise(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;101    {
;;;102    //	int r, c, l; // NOTE : not used!!
;;;103    	int l;
;;;104    
;;;105    	tLabelInfo_t 		*temp_label;
;;;106    
;;;107    	if(mode == LOCAL_MODE || mode == LOCAL_HOVER_MODE)
;;;108    		temp_label = &thisInfo->tLabel_local;
000004  4923              LDR      r1,|L13.148|
000006  2801              CMP      r0,#1                 ;107
000008  6889              LDR      r1,[r1,#8]
00000a  bf13              ITEET    NE                    ;107
00000c  2803              CMPNE    r0,#3                 ;107
00000e  f24100b0          MOVEQ    r0,#0x10b0
000012  180d              ADDEQ    r5,r1,r0
;;;109    	else
;;;110    		temp_label = &thisInfo->tLabel;
000014  f101053a          ADDNE    r5,r1,#0x3a
;;;111    
;;;112    	temp_label->ucNum = 0;
000018  f04f0400          MOV      r4,#0
00001c  702c              STRB     r4,[r5,#0]
;;;113    	temp_label->ucValidNum = 0;
00001e  f8854271          STRB     r4,[r5,#0x271]
;;;114    
;;;115    	for( l=LOOSE_POSBUF_; l--; )
000022  f04f0610          MOV      r6,#0x10
000026  f04f0701          MOV      r7,#1
;;;116    	{
;;;117    		memset(&temp_label->tTable[l], 0x00, sizeof(tLabelTable_t));
;;;118    
;;;119    		temp_label->tValidRect[l].cs            = COL_MAX-1;
00002a  f04f085f          MOV      r8,#0x5f
;;;120    		temp_label->tValidRect[l].ce            = 0;
;;;121    		temp_label->tValidRect[l].rs            = ROW_MAX-1;
00002e  f04f092f          MOV      r9,#0x2f
000032  bf00              NOP      
                  |L13.52|
000034  f1a60601          SUB      r6,r6,#1
000038  ebc600c6          RSB      r0,r6,r6,LSL #3       ;117
00003c  eb001046          ADD      r0,r0,r6,LSL #5       ;117
000040  4428              ADD      r0,r0,r5              ;117
000042  f04f0127          MOV      r1,#0x27              ;117
000046  f1000001          ADD      r0,r0,#1              ;117
00004a  f7fffffe          BL       __aeabi_memclr
00004e  eb050086          ADD      r0,r5,r6,LSL #2       ;119
;;;122    		temp_label->tValidRect[l].re            = 0;
;;;123    		temp_label->sValidMaxVal[l]             = 0;
;;;124    		temp_label->usValidCellCnt[l]           = 0;
;;;125    		temp_label->tValidMaxPos[l].c           = 0;
;;;126    		temp_label->tValidMaxPos[l].r           = 0;
000052  1c7f              ADDS     r7,r7,#1
000054  f8808274          STRB     r8,[r0,#0x274]        ;119
000058  f8804275          STRB     r4,[r0,#0x275]        ;120
00005c  f8809272          STRB     r9,[r0,#0x272]        ;121
000060  f8804273          STRB     r4,[r0,#0x273]        ;122
000064  eb050046          ADD      r0,r5,r6,LSL #1       ;123
000068  2f10              CMP      r7,#0x10
00006a  f8a042d2          STRH     r4,[r0,#0x2d2]        ;123
00006e  f8a042f2          STRH     r4,[r0,#0x2f2]        ;124
000072  f88042b2          STRB     r4,[r0,#0x2b2]        ;125
000076  f88042b3          STRB     r4,[r0,#0x2b3]
00007a  dddb              BLE      |L13.52|
;;;127    	}
;;;128    #if (LABEL_FAST_EN != 2)
;;;129    	memset(LABELIMAGE,0,sizeof(LABELIMAGE));
00007c  f2413124          MOV      r1,#0x1324
000080  4805              LDR      r0,|L13.152|
000082  f7fffffe          BL       __aeabi_memclr4
;;;130    #endif
;;;131    	memset(COMMONIMAGE,0,sizeof(COMMONIMAGE));
000086  e8bd47f0          POP      {r4-r10,lr}
00008a  f6444190          MOV      r1,#0x4c90
00008e  4803              LDR      r0,|L13.156|
000090  f7ffbffe          B.W      __aeabi_memclr4
;;;132    }
;;;133    
                          ENDP

                  |L13.148|
                          DCD      ||.data||
                  |L13.152|
                          DCD      FullSharedBuff+0xded8
                  |L13.156|
                          DCD      FullSharedBuff+0x6c00

                          AREA ||i.algorithm_label_palm_rejection||, CODE, READONLY, ALIGN=2

                  algorithm_label_palm_rejection PROC
;;;752    
;;;753    void algorithm_label_palm_rejection(int mode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;754    {
000004  b0a7              SUB      sp,sp,#0x9c
;;;755    	tLabelInfo_t	*temp_label;
;;;756    	uint8_t IsPalm[LOOSE_POSBUF_] = {0,};		//0: Normal finger, 1: Big label(palm), 2: small label cascaded to big label 3: touch down label
000006  2200              MOVS     r2,#0
000008  9206              STR      r2,[sp,#0x18]
00000a  9204              STR      r2,[sp,#0x10]
00000c  9205              STR      r2,[sp,#0x14]
;;;757    	static int PalmRegionUpdateCnt = 0;
;;;758    	tRect_t CascadeRect[LOOSE_POSBUF_];
;;;759    	uint8_t PalmDetectingFlag = 0,PalmTouchDownFlag = 0, SavePalmRegion = 0, PalmCnt = 0;
00000e  9207              STR      r2,[sp,#0x1c]
000010  921a              STR      r2,[sp,#0x68]
;;;760    	int cl,pl,pl2,r,c;
;;;761    //	int tmp = 0;
;;;762    	
;;;763    	temp_label = &thisInfo->tLabel;
000012  48fe              LDR      r0,|L14.1036|
000014  9219              STR      r2,[sp,#0x64]
000016  6880              LDR      r0,[r0,#8]  ; thisInfo
000018  9023              STR      r0,[sp,#0x8c]
00001a  f100013a          ADD      r1,r0,#0x3a
00001e  f5005080          ADD      r0,r0,#0x1000
;;;764    //	tmp = temp_label->ucValidNum;
;;;765    	
;;;766    
;;;767    	thisInfo->bIsPalm = NO;
000022  f8802f87          STRB     r2,[r0,#0xf87]
000026  48f9              LDR      r0,|L14.1036|
;;;768    	//Initialize and counting touch down frame
;;;769    	if(temp_label->ucValidNum == 0)
000028  f8912271          LDRB     r2,[r1,#0x271]
;;;770    	{
;;;771    		PalmRegionNum = 0;
;;;772    		memset(PalmRectEnable,0,sizeof(PalmRectEnable));
;;;773    		temp_label->PalmTouchDownCnt = 0;
;;;774    		PalmRegionUpdateCnt = 0;
;;;775    	}
;;;776    	else if(temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX){
00002c  6840              LDR      r0,[r0,#4]
00002e  9018              STR      r0,[sp,#0x60]         ;754
000030  b1b2              CBZ      r2,|L14.96|
000032  9a18              LDR      r2,[sp,#0x60]
000034  f8910312          LDRB     r0,[r1,#0x312]
000038  f89220f2          LDRB     r2,[r2,#0xf2]
00003c  4290              CMP      r0,r2
00003e  d20a              BCS      |L14.86|
000040  1c40              ADDS     r0,r0,#1
;;;777    		temp_label->PalmTouchDownCnt++;
000042  b2c0              UXTB     r0,r0
000044  f8810312          STRB     r0,[r1,#0x312]
;;;778    		if(temp_label->PalmTouchDownCnt <= thisModeConf->Palm.ucPalm_IGNOREFRAMENUM)	PalmTouchDownFlag = YES;
000048  9a18              LDR      r2,[sp,#0x60]
00004a  f89220f4          LDRB     r2,[r2,#0xf4]
00004e  4282              CMP      r2,r0
000050  bf24              ITT      CS
000052  2001              MOVCS    r0,#1
000054  9019              STRCS    r0,[sp,#0x64]
                  |L14.86|
;;;779    	}
;;;780    	
;;;781    	//Detect touch down
;;;782    	//compare peak value and nearby value when only 1 label
;;;783    	//if touch down palm, slope is lower than normal finger.
;;;784    	//Do not save palm region for touch down label.
;;;785    	if(temp_label->ucValidNum == 1 && temp_label->PalmTouchDownCnt < thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX)
000056  f8910271          LDRB     r0,[r1,#0x271]
00005a  2801              CMP      r0,#1
00005c  d11a              BNE      |L14.148|
00005e  e00a              B        |L14.118|
                  |L14.96|
000060  48ea              LDR      r0,|L14.1036|
000062  4beb              LDR      r3,|L14.1040|
000064  2200              MOVS     r2,#0                 ;771
000066  7002              STRB     r2,[r0,#0]            ;771
000068  601a              STR      r2,[r3,#0]            ;772  ; PalmRectEnable
00006a  605a              STR      r2,[r3,#4]            ;772  ; PalmRectEnable
00006c  811a              STRH     r2,[r3,#8]            ;772
00006e  f8812312          STRB     r2,[r1,#0x312]        ;773
000072  60c2              STR      r2,[r0,#0xc]          ;774  ; PalmRegionUpdateCnt
000074  e00e              B        |L14.148|
                  |L14.118|
000076  9818              LDR      r0,[sp,#0x60]
000078  f8912312          LDRB     r2,[r1,#0x312]
00007c  f89000f2          LDRB     r0,[r0,#0xf2]
000080  4282              CMP      r2,r0
000082  d207              BCS      |L14.148|
;;;786    	{
;;;787    		if(!thisInfo->tCoord.tPastPos[0].vusS[0])
000084  9a23              LDR      r2,[sp,#0x8c]
000086  f8b226c8          LDRH     r2,[r2,#0x6c8]
00008a  2a00              CMP      r2,#0
;;;788    		{
;;;789    			int neighbor_mean = 0;
;;;790    			tCell_t MaxPos;
;;;791    			uint16_t SlopeTh = 0;
;;;792    			
;;;793    			SlopeTh = thisModeConf->Palm.ucPalm_TOUCHDOWNSLOPETHRESHOLD;
;;;794    			MaxPos.r = temp_label->tValidMaxPos[0].r;
;;;795    			MaxPos.c = temp_label->tValidMaxPos[0].c;
;;;796    			if(0 < MaxPos.r && MaxPos.r < ROW_MAX-1 && 0 < MaxPos.c && MaxPos.c < COL_MAX-1)
;;;797    			{
;;;798    				for(r=MaxPos.r-1 ; r<=MaxPos.r+1 ; r++){
;;;799    					for(c=MaxPos.c-1 ; c<=MaxPos.c+1 ; c++){
;;;800    						if( !(r==MaxPos.r && c==MaxPos.c) )
;;;801    							neighbor_mean += HAL_READ_DELTA_IMAGE(r,c);
;;;802    					}
;;;803    				}
;;;804    				neighbor_mean >>= 3;
;;;805    				if(temp_label->sValidMaxVal[0]*100/neighbor_mean < SlopeTh)	PalmTouchDownFlag = YES;
;;;806    			}
;;;807    		}
;;;808    		else
;;;809    			temp_label->PalmTouchDownCnt = thisModeConf->Palm.ucPalm_TOUCHDOWNFRAMEMAX;
00008c  bf18              IT       NE
00008e  f8810312          STRBNE   r0,[r1,#0x312]
000092  d01e              BEQ      |L14.210|
                  |L14.148|
;;;810    	}
;;;811    	
;;;812    	for( cl=temp_label->ucValidNum; cl--; )
000094  f8910271          LDRB     r0,[r1,#0x271]
000098  1e42              SUBS     r2,r0,#1
00009a  f0c081a2          BCC.W    |L14.994|
;;;813    	{
;;;814    		uint8_t merged_flag = 0;
;;;815    		SavePalmRegion = NO;
;;;816    	
;;;817    		if(thisModeConf->Palm.usPalmLevel < temp_label->usValidCellCnt[cl] ){	//&& temp_label->usValidCellCnt[cl] < (thisModeConf->Palm.usPalmLevel<<6)){	//Certain Big palm
;;;818    			IsPalm[cl] = 1;
;;;819    			SavePalmRegion = YES;
;;;820    		}	//if first frame, palm threshold is in half. It is decided by experimental.
;;;821    #if (PalmFirstDetectionShift == YES)
;;;822    		else if((temp_label->PalmTouchDownCnt==1 && temp_label->usValidCellCnt[cl] > (thisModeConf->Palm.usPalmLevel>>thisModeConf->Palm.ucPalmLevelShift)) || PalmTouchDownFlag)	//Touch down label
;;;823    #else
;;;824    		else if((temp_label->PalmTouchDownCnt==1 && temp_label->usValidCellCnt[cl] > (thisModeConf->Palm.usPalmLevel>>1)) || PalmTouchDownFlag)	//Touch down label
;;;825    #endif
;;;826    			IsPalm[cl] = 3;
;;;827    		
;;;828    		if(IsPalm[cl])
;;;829    		{
;;;830    			//Merge previous palm region and new palm
;;;831    			for(pl=PalmRegionNum; pl--; )
;;;832    			{
;;;833    				if(PalmRectEnable[pl]){
;;;834    					if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl],thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
00009e  9823              LDR      r0,[sp,#0x8c]
0000a0  4bdb              LDR      r3,|L14.1040|
0000a2  f5005080          ADD      r0,r0,#0x1000
;;;835    						PalmRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[pl]);
;;;836    						merged_flag = YES;
;;;837    						break;
;;;838    					}
;;;839    				}
;;;840    			}
;;;841    			//Save new palm region
;;;842    			if(!merged_flag && SavePalmRegion){
;;;843    				PalmRect[PalmRegionNum] = temp_label->tValidRect[cl];
;;;844    				PalmRectEnable[PalmRegionNum] = thisModeConf->Palm.ucPalm_KEEPPALMREGIONFRAME;
;;;845    				if(PalmRegionNum < LOOSE_POSBUF_)
;;;846    					PalmRegionNum++;
;;;847    			}
;;;848    			
;;;849    			thisInfo->bIsPalm = YES;
0000a6  f8dd8060          LDR      r8,[sp,#0x60]
0000aa  f103060a          ADD      r6,r3,#0xa            ;834
0000ae  901c              STR      r0,[sp,#0x70]
                  |L14.176|
0000b0  eb010c42          ADD      r12,r1,r2,LSL #1      ;817
0000b4  f8b800ee          LDRH     r0,[r8,#0xee]         ;817
0000b8  f8bcc2f2          LDRH     r12,[r12,#0x2f2]      ;817
0000bc  f04f0a00          MOV      r10,#0                ;815
0000c0  4560              CMP      r0,r12                ;817
0000c2  d245              BCS      |L14.336|
0000c4  2001              MOVS     r0,#1                 ;818
0000c6  f10d0c10          ADD      r12,sp,#0x10          ;818
0000ca  4682              MOV      r10,r0                ;819
0000cc  f80c0002          STRB     r0,[r12,r2]           ;818
0000d0  e054              B        |L14.380|
                  |L14.210|
0000d2  9818              LDR      r0,[sp,#0x60]         ;793
0000d4  f99122b2          LDRSB    r2,[r1,#0x2b2]        ;795
0000d8  f89030f3          LDRB     r3,[r0,#0xf3]         ;793
0000dc  f99102b3          LDRSB    r0,[r1,#0x2b3]        ;794
0000e0  f1a00c01          SUB      r12,r0,#1             ;796
0000e4  f1bc0f2e          CMP      r12,#0x2e             ;796
0000e8  d2d4              BCS      |L14.148|
0000ea  2a00              CMP      r2,#0                 ;796
0000ec  ddd2              BLE      |L14.148|
0000ee  2a5f              CMP      r2,#0x5f              ;796
0000f0  dad0              BGE      |L14.148|
0000f2  eb001c00          ADD      r12,r0,r0,LSL #4      ;801
0000f6  eb0c1c40          ADD      r12,r12,r0,LSL #5     ;801
0000fa  48c6              LDR      r0,|L14.1044|
0000fc  eb00008c          ADD      r0,r0,r12,LSL #2      ;801
000100  eb000042          ADD      r0,r0,r2,LSL #1       ;801
000104  f5004030          ADD      r0,r0,#0xb000         ;801
000108  f9b02890          LDRSH    r2,[r0,#0x890]        ;801
00010c  f9b0c892          LDRSH    r12,[r0,#0x892]       ;801
000110  4462              ADD      r2,r2,r12             ;801
000112  f9b0c894          LDRSH    r12,[r0,#0x894]       ;801
000116  4462              ADD      r2,r2,r12             ;801
000118  f9b0c954          LDRSH    r12,[r0,#0x954]       ;801
00011c  4462              ADD      r2,r2,r12             ;801
00011e  f9b0c958          LDRSH    r12,[r0,#0x958]       ;801
000122  4462              ADD      r2,r2,r12             ;801
000124  f9b0ca18          LDRSH    r12,[r0,#0xa18]       ;801
000128  4462              ADD      r2,r2,r12             ;801
00012a  f9b0ca1a          LDRSH    r12,[r0,#0xa1a]       ;801
00012e  f9b00a1c          LDRSH    r0,[r0,#0xa1c]        ;801
000132  4462              ADD      r2,r2,r12             ;801
000134  4410              ADD      r0,r0,r2              ;801
000136  f9b1c2d2          LDRSH    r12,[r1,#0x2d2]       ;805
00013a  2264              MOVS     r2,#0x64              ;805
00013c  10c0              ASRS     r0,r0,#3              ;804
00013e  fb0cf202          MUL      r2,r12,r2             ;805
000142  fb92f0f0          SDIV     r0,r2,r0              ;805
000146  4298              CMP      r0,r3                 ;805
000148  bfbc              ITT      LT                    ;805
00014a  2001              MOVLT    r0,#1                 ;805
00014c  9019              STRLT    r0,[sp,#0x64]         ;805
00014e  e7a1              B        |L14.148|
                  |L14.336|
000150  f8914312          LDRB     r4,[r1,#0x312]        ;824
000154  2c01              CMP      r4,#1                 ;824
000156  d102              BNE      |L14.350|
000158  ebbc0f50          CMP      r12,r0,LSR #1         ;824
00015c  d801              BHI      |L14.354|
                  |L14.350|
00015e  9819              LDR      r0,[sp,#0x64]         ;824
000160  b128              CBZ      r0,|L14.366|
                  |L14.354|
000162  a804              ADD      r0,sp,#0x10           ;826
000164  f04f0c03          MOV      r12,#3                ;826
000168  f800c002          STRB     r12,[r0,r2]           ;826
00016c  e006              B        |L14.380|
                  |L14.366|
00016e  a804              ADD      r0,sp,#0x10           ;828
000170  5c80              LDRB     r0,[r0,r2]            ;828
000172  2800              CMP      r0,#0                 ;828
;;;850    		}
;;;851    		else{
;;;852    			PalmDetectingFlag = YES;
000174  bf04              ITT      EQ
000176  2001              MOVEQ    r0,#1
000178  901a              STREQ    r0,[sp,#0x68]
00017a  d074              BEQ      |L14.614|
                  |L14.380|
00017c  48a3              LDR      r0,|L14.1036|
00017e  7807              LDRB     r7,[r0,#0]            ;831  ; PalmRegionNum
000180  1e78              SUBS     r0,r7,#1              ;831
000182  bf28              IT       CS                    ;834
000184  eb010982          ADDCS    r9,r1,r2,LSL #2       ;834
000188  d352              BCC      |L14.560|
00018a  bf00              NOP                            ;833
                  |L14.396|
00018c  f813c000          LDRB     r12,[r3,r0]           ;833
000190  f1bc0f00          CMP      r12,#0                ;833
000194  d04a              BEQ      |L14.556|
000196  eb060c80          ADD      r12,r6,r0,LSL #2      ;834
00019a  f8d95272          LDR      r5,[r9,#0x272]        ;834
00019e  f8dc4000          LDR      r4,[r12,#0]           ;834
0001a2  f898c0f0          LDRB     r12,[r8,#0xf0]        ;834
0001a6  f3442e07          SBFX     lr,r4,#8,#8           ;834
0001aa  fa4ffb85          SXTB     r11,r5                ;834
0001ae  44e6              ADD      lr,lr,r12             ;834
0001b0  45f3              CMP      r11,lr                ;834
0001b2  dc3b              BGT      |L14.556|
0001b4  f3452e07          SBFX     lr,r5,#8,#8           ;834
0001b8  fa4ffb84          SXTB     r11,r4                ;834
0001bc  44e6              ADD      lr,lr,r12             ;834
0001be  45f3              CMP      r11,lr                ;834
0001c0  dc34              BGT      |L14.556|
0001c2  f3454b07          SBFX     r11,r5,#16,#8         ;834
0001c6  eb0c6e24          ADD      lr,r12,r4,ASR #24     ;834
0001ca  45f3              CMP      r11,lr                ;834
0001cc  dc2e              BGT      |L14.556|
0001ce  162d              ASRS     r5,r5,#24             ;834
0001d0  f3444407          SBFX     r4,r4,#16,#8          ;834
0001d4  44ac              ADD      r12,r12,r5            ;834
0001d6  45a4              CMP      r12,r4                ;834
0001d8  db28              BLT      |L14.556|
0001da  eb060780          ADD      r7,r6,r0,LSL #2       ;835
0001de  f8d9c272          LDR      r12,[r9,#0x272]       ;835
0001e2  6838              LDR      r0,[r7,#0]            ;835
0001e4  f34c4407          SBFX     r4,r12,#16,#8         ;835
0001e8  f3404907          SBFX     r9,r0,#16,#8          ;835
0001ec  454c              CMP      r4,r9                 ;835
0001ee  bfa8              IT       GE                    ;835
0001f0  464c              MOVGE    r4,r9                 ;835
0001f2  f3644517          BFI      r5,r4,#16,#8          ;835
0001f6  ea4f692c          ASR      r9,r12,#24            ;835
0001fa  1604              ASRS     r4,r0,#24             ;835
0001fc  45a1              CMP      r9,r4                 ;835
0001fe  bfc8              IT       GT                    ;835
000200  464c              MOVGT    r4,r9                 ;835
000202  f364651f          BFI      r5,r4,#24,#8          ;835
000206  fa4ff98c          SXTB     r9,r12                ;835
00020a  b244              SXTB     r4,r0                 ;835
00020c  45a1              CMP      r9,r4                 ;835
00020e  bfb8              IT       LT                    ;835
000210  464c              MOVLT    r4,r9                 ;835
000212  f3640507          BFI      r5,r4,#0,#8           ;835
000216  f34c2c07          SBFX     r12,r12,#8,#8         ;835
00021a  f3402007          SBFX     r0,r0,#8,#8           ;835
00021e  4584              CMP      r12,r0                ;835
000220  bfd8              IT       LE                    ;835
000222  4684              MOVLE    r12,r0                ;835
000224  f36c250f          BFI      r5,r12,#8,#8          ;835
000228  603d              STR      r5,[r7,#0]            ;835
00022a  e017              B        |L14.604|
                  |L14.556|
00022c  1e40              SUBS     r0,r0,#1              ;835
00022e  d2ad              BCS      |L14.396|
                  |L14.560|
000230  f1ba0f00          CMP      r10,#0                ;842
000234  d012              BEQ      |L14.604|
000236  eb010482          ADD      r4,r1,r2,LSL #2       ;843
00023a  eb060c87          ADD      r12,r6,r7,LSL #2      ;843
00023e  f8d44272          LDR      r4,[r4,#0x272]        ;843
000242  f8cc4000          STR      r4,[r12,#0]           ;843
000246  4871              LDR      r0,|L14.1036|
000248  f898c0f5          LDRB     r12,[r8,#0xf5]        ;844
00024c  f803c007          STRB     r12,[r3,r7]           ;844
000250  2f10              CMP      r7,#0x10              ;845
000252  bf3c              ITT      CC                    ;846
000254  f1070c01          ADDCC    r12,r7,#1             ;846
000258  f880c000          STRBCC   r12,[r0,#0]           ;846
                  |L14.604|
00025c  2001              MOVS     r0,#1                 ;849
00025e  f8ddc070          LDR      r12,[sp,#0x70]        ;849
000262  f88c0f87          STRB     r0,[r12,#0xf87]       ;849
                  |L14.614|
000266  1e52              SUBS     r2,r2,#1              ;849
;;;853    		}
;;;854    	}
000268  f4bfaf22          BCS      |L14.176|
;;;855    	
;;;856    	if(PalmDetectingFlag)
00026c  981a              LDR      r0,[sp,#0x68]
00026e  2800              CMP      r0,#0
000270  d07e              BEQ      |L14.880|
;;;857    	{
;;;858    		int16_t MinDist = 0, Xdist = 0, Ydist = 0;
;;;859    		int8_t match_pl = 0;
;;;860    		//Expand Palm region method2
;;;861    		for(cl=temp_label->ucValidNum; cl--; )
000272  f8910271          LDRB     r0,[r1,#0x271]
000276  1e42              SUBS     r2,r0,#1
000278  d37a              BCC      |L14.880|
;;;862    		{
;;;863    			if((IsPalm[cl] & 0x80) == 0)
;;;864    			{
;;;865    				MinDist = thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST;
;;;866    				match_pl = -1;
;;;867    				for(pl=PalmRegionNum; pl--; )
;;;868    				{
;;;869    					if(PalmRectEnable[pl])
;;;870    					{
;;;871    						if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
00027a  f8dfc190          LDR      r12,|L14.1036|
00027e  9818              LDR      r0,[sp,#0x60]
000280  9020              STR      r0,[sp,#0x80]         ;867
000282  f89c0000          LDRB     r0,[r12,#0]           ;867  ; PalmRegionNum
000286  af04              ADD      r7,sp,#0x10           ;756
000288  9003              STR      r0,[sp,#0xc]          ;756
                  |L14.650|
00028a  5cb8              LDRB     r0,[r7,r2]            ;863
00028c  901e              STR      r0,[sp,#0x78]         ;863
00028e  f0100f80          TST      r0,#0x80              ;863
000292  d16e              BNE      |L14.882|
000294  9820              LDR      r0,[sp,#0x80]         ;865
000296  f890c0f0          LDRB     r12,[r0,#0xf0]        ;865
00029a  f04f30ff          MOV      r0,#0xffffffff        ;866
00029e  f8cdc068          STR      r12,[sp,#0x68]        ;866
0002a2  901f              STR      r0,[sp,#0x7c]         ;866
0002a4  9803              LDR      r0,[sp,#0xc]          ;866
0002a6  1e40              SUBS     r0,r0,#1              ;866
0002a8  d363              BCC      |L14.882|
0002aa  eb010442          ADD      r4,r1,r2,LSL #1       ;817
0002ae  eb010982          ADD      r9,r1,r2,LSL #2       ;834
0002b2  9421              STR      r4,[sp,#0x84]         ;817
                  |L14.692|
0002b4  5c1c              LDRB     r4,[r3,r0]            ;869
0002b6  b3ec              CBZ      r4,|L14.820|
0002b8  eb060880          ADD      r8,r6,r0,LSL #2
0002bc  f8d95272          LDR      r5,[r9,#0x272]
0002c0  f8d84000          LDR      r4,[r8,#0]
0002c4  fa4ffa85          SXTB     r10,r5
0002c8  f3442b07          SBFX     r11,r4,#8,#8
0002cc  44e3              ADD      r11,r11,r12
0002ce  45da              CMP      r10,r11
0002d0  dc45              BGT      |L14.862|
0002d2  f3452b07          SBFX     r11,r5,#8,#8
0002d6  fa4ffa84          SXTB     r10,r4
0002da  44e3              ADD      r11,r11,r12
0002dc  45da              CMP      r10,r11
0002de  dc3e              BGT      |L14.862|
0002e0  f3454a07          SBFX     r10,r5,#16,#8
0002e4  eb0c6b24          ADD      r11,r12,r4,ASR #24
0002e8  45da              CMP      r10,r11
0002ea  dc38              BGT      |L14.862|
0002ec  f3444407          SBFX     r4,r4,#16,#8
0002f0  eb0c6525          ADD      r5,r12,r5,ASR #24
0002f4  42a5              CMP      r5,r4
0002f6  db32              BLT      |L14.862|
;;;872    							Xdist = abs(temp_label->tValidMaxPos[cl].c - ((PalmRect[pl].cs+PalmRect[pl].ce)>>1)) - ((PalmRect[pl].ce-PalmRect[pl].cs)>>1);
0002f8  f8dda084          LDR      r10,[sp,#0x84]
0002fc  f9985002          LDRSB    r5,[r8,#2]
000300  f9984003          LDRSB    r4,[r8,#3]
000304  f99aa2b2          LDRSB    r10,[r10,#0x2b2]
000308  eb050b04          ADD      r11,r5,r4
00030c  ebba0a6b          SUBS     r10,r10,r11,ASR #1
000310  eba40405          SUB      r4,r4,r5
000314  bf48              IT       MI
000316  f1ca0a00          RSBMI    r10,r10,#0
00031a  ebba0464          SUBS     r4,r10,r4,ASR #1
;;;873    							if(Xdist < 0) Xdist = 0;
00031e  bf48              IT       MI
000320  2400              MOVMI    r4,#0
;;;874    							Ydist = abs(temp_label->tValidMaxPos[cl].r - ((PalmRect[pl].rs+PalmRect[pl].re)>>1)) - ((PalmRect[pl].re-PalmRect[pl].rs)>>1);
000322  f9985000          LDRSB    r5,[r8,#0]
000326  f9988001          LDRSB    r8,[r8,#1]
00032a  f8dda084          LDR      r10,[sp,#0x84]
00032e  eb050b08          ADD      r11,r5,r8
000332  e000              B        |L14.822|
                  |L14.820|
000334  e013              B        |L14.862|
                  |L14.822|
000336  f99aa2b3          LDRSB    r10,[r10,#0x2b3]
00033a  eba80505          SUB      r5,r8,r5
00033e  ebba0a6b          SUBS     r10,r10,r11,ASR #1
000342  bf48              IT       MI
000344  f1ca0a00          RSBMI    r10,r10,#0
000348  ebba0565          SUBS     r5,r10,r5,ASR #1
;;;875    							if(Ydist < 0) Ydist = 0;
00034c  bf48              IT       MI
00034e  2500              MOVMI    r5,#0
;;;876    							if(Xdist+Ydist < MinDist){
000350  442c              ADD      r4,r4,r5
000352  9d1a              LDR      r5,[sp,#0x68]
000354  42ac              CMP      r4,r5
000356  da02              BGE      |L14.862|
;;;877    								MinDist = Xdist+Ydist;
;;;878    								match_pl = pl;
000358  941a              STR      r4,[sp,#0x68]
00035a  b244              SXTB     r4,r0
00035c  941f              STR      r4,[sp,#0x7c]
                  |L14.862|
00035e  1e40              SUBS     r0,r0,#1
000360  d2a8              BCS      |L14.692|
;;;879    							}
;;;880    						}
;;;881    						
;;;882    					}
;;;883    				}
;;;884    				if(match_pl != -1)
000362  981f              LDR      r0,[sp,#0x7c]
000364  f1b03fff          CMP      r0,#0xffffffff
000368  d038              BEQ      |L14.988|
;;;885    				{
;;;886    					PalmRect[match_pl] = algorithm_merge_rect(temp_label->tValidRect[cl], PalmRect[match_pl]);
00036a  f8d94272          LDR      r4,[r9,#0x272]
00036e  e001              B        |L14.884|
                  |L14.880|
000370  e037              B        |L14.994|
                  |L14.882|
000372  e033              B        |L14.988|
                  |L14.884|
000374  981f              LDR      r0,[sp,#0x7c]
000376  f3444907          SBFX     r9,r4,#16,#8
00037a  eb060580          ADD      r5,r6,r0,LSL #2
00037e  f8d5c000          LDR      r12,[r5,#0]
000382  f34c4007          SBFX     r0,r12,#16,#8
000386  4581              CMP      r9,r0
000388  bfb8              IT       LT
00038a  4648              MOVLT    r0,r9
00038c  f3604817          BFI      r8,r0,#16,#8
000390  ea4f6924          ASR      r9,r4,#24
000394  ea4f602c          ASR      r0,r12,#24
000398  4581              CMP      r9,r0
00039a  bfc8              IT       GT
00039c  4648              MOVGT    r0,r9
00039e  f360681f          BFI      r8,r0,#24,#8
0003a2  fa4ff984          SXTB     r9,r4
0003a6  fa4ff08c          SXTB     r0,r12
0003aa  4581              CMP      r9,r0
0003ac  bfb8              IT       LT
0003ae  4648              MOVLT    r0,r9
0003b0  f3600807          BFI      r8,r0,#0,#8
0003b4  f3442407          SBFX     r4,r4,#8,#8
0003b8  f34c2007          SBFX     r0,r12,#8,#8
0003bc  4284              CMP      r4,r0
0003be  bfc8              IT       GT
0003c0  4620              MOVGT    r0,r4
0003c2  f360280f          BFI      r8,r0,#8,#8
0003c6  f8c58000          STR      r8,[r5,#0]
;;;887    					if(IsPalm[cl] == 0){
0003ca  981e              LDR      r0,[sp,#0x78]
0003cc  2800              CMP      r0,#0
;;;888    						IsPalm[cl] = 2;
0003ce  bf04              ITT      EQ
0003d0  2002              MOVEQ    r0,#2
0003d2  54b8              STRBEQ   r0,[r7,r2]
;;;889    					}
;;;890    					IsPalm[cl] |= 0x80;
0003d4  5cb8              LDRB     r0,[r7,r2]
0003d6  f0400080          ORR      r0,r0,#0x80
0003da  54b8              STRB     r0,[r7,r2]
                  |L14.988|
0003dc  1e52              SUBS     r2,r2,#1
0003de  f4bfaf54          BCS      |L14.650|
                  |L14.994|
;;;891    				}
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	}
;;;896    	
;;;897    	//Release or downsize palm region
;;;898    	for(pl=PalmRegionNum; pl--; )
0003e2  480a              LDR      r0,|L14.1036|
0003e4  7800              LDRB     r0,[r0,#0]  ; PalmRegionNum
0003e6  9019              STR      r0,[sp,#0x64]
0003e8  f1b00b01          SUBS     r11,r0,#1
0003ec  d37b              BCC      |L14.1254|
;;;899    	{
;;;900    		if(PalmRectEnable[pl])
;;;901    		{
;;;902    			uint8_t TouchedFlag = 0, ParentLabelIdx = 0;
;;;903    			uint16_t MaxCellCnt = 0;
;;;904    			for( cl=temp_label->ucValidNum; cl--; )
;;;905    			{
;;;906    				if(algorithm_nearby_rect(temp_label->tValidRect[cl], PalmRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){		//Overlap
0003ee  4807              LDR      r0,|L14.1036|
;;;907    					if( (IsPalm[cl] & 0x0F) > 0 )
;;;908    						TouchedFlag = 1;
;;;909    					else if(TouchedFlag == 0)	//For debugging
;;;910    						TouchedFlag = 2;
;;;911    					
;;;912    					if(MaxCellCnt < temp_label->usValidCellCnt[cl]){
;;;913    						MaxCellCnt = temp_label->usValidCellCnt[cl];
;;;914    						ParentLabelIdx = cl;
;;;915    					}
;;;916    				}
;;;917    			}
;;;918    			
;;;919    			//if no touch label in palm region during KEEPPALMREGIONFRAME, release palm region.
;;;920    			if(TouchedFlag == 0){
;;;921    				if(PalmRectEnable[pl])						PalmRectEnable[pl]--;
;;;922    //				if(PalmRectEnable[pl]==0 && PalmRegionNum>0)	PalmRegionNum--;		//Release palm region
;;;923    			}
;;;924    			else{
;;;925    				uint8_t CascadeFlag = YES;	//Cascade label based on parent label
;;;926    				uint8_t CheckCascade[LOOSE_POSBUF_] = {0};
;;;927    				
;;;928    				if(PalmRegionUpdateCnt++ > thisModeConf->Palm.ucPalm_PALM_REGION_UPDATE_PERIOD)
;;;929    				{
;;;930    					PalmRegionUpdateCnt = 0;
0003f0  9e18              LDR      r6,[sp,#0x60]
0003f2  f8dfe01c          LDR      lr,|L14.1040|
0003f6  68c0              LDR      r0,[r0,#0xc]  ; PalmRegionUpdateCnt
0003f8  f8cd0090          STR.W    r0,[sp,#0x90]         ;772
                  |L14.1020|
0003fc  f81e800b          LDRB     r8,[lr,r11]           ;900
000400  f1b80f00          CMP      r8,#0                 ;900
000404  d070              BEQ      |L14.1256|
000406  2700              MOVS     r7,#0                 ;902
000408  46ba              MOV      r10,r7                ;903
00040a  e005              B        |L14.1048|
                  |L14.1036|
                          DCD      ||.data||
                  |L14.1040|
                          DCD      ||.bss||
                  |L14.1044|
                          DCD      FullSharedBuff
                  |L14.1048|
000418  9718              STR      r7,[sp,#0x60]         ;904
00041a  f8912271          LDRB     r2,[r1,#0x271]        ;904
00041e  1e50              SUBS     r0,r2,#1              ;904
000420  d366              BCC      |L14.1264|
000422  4bc9              LDR      r3,|L14.1864|
000424  f89620f0          LDRB     r2,[r6,#0xf0]         ;834
000428  eb03038b          ADD      r3,r3,r11,LSL #2      ;834
00042c  931e              STR      r3,[sp,#0x78]         ;834
00042e  681b              LDR      r3,[r3,#0]            ;834
                  |L14.1072|
000430  eb010c80          ADD      r12,r1,r0,LSL #2      ;906
000434  f3432507          SBFX     r5,r3,#8,#8           ;906
000438  f8dcc272          LDR      r12,[r12,#0x272]      ;906
00043c  4415              ADD      r5,r5,r2              ;906
00043e  fa4ff48c          SXTB     r4,r12                ;906
000442  42ac              CMP      r4,r5                 ;906
000444  dc28              BGT      |L14.1176|
000446  f34c2507          SBFX     r5,r12,#8,#8          ;906
00044a  b25c              SXTB     r4,r3                 ;906
00044c  4415              ADD      r5,r5,r2              ;906
00044e  42ac              CMP      r4,r5                 ;906
000450  dc22              BGT      |L14.1176|
000452  f34c4407          SBFX     r4,r12,#16,#8         ;906
000456  eb026523          ADD      r5,r2,r3,ASR #24      ;906
00045a  42ac              CMP      r4,r5                 ;906
00045c  dc1c              BGT      |L14.1176|
00045e  f3434407          SBFX     r4,r3,#16,#8          ;906
000462  eb026c2c          ADD      r12,r2,r12,ASR #24    ;906
000466  4564              CMP      r4,r12                ;906
000468  dc16              BGT      |L14.1176|
00046a  f10d0c10          ADD      r12,sp,#0x10          ;907
00046e  f81cc000          LDRB     r12,[r12,r0]          ;907
000472  f01c0f0f          TST      r12,#0xf              ;907
000476  bf18              IT       NE                    ;908
000478  2701              MOVNE    r7,#1                 ;908
00047a  d102              BNE      |L14.1154|
00047c  2f00              CMP      r7,#0                 ;909
00047e  bf08              IT       EQ                    ;910
000480  2702              MOVEQ    r7,#2                 ;910
                  |L14.1154|
000482  eb010c40          ADD      r12,r1,r0,LSL #1      ;912
000486  f8bcc2f2          LDRH     r12,[r12,#0x2f2]      ;912
00048a  45d4              CMP      r12,r10               ;912
00048c  d904              BLS      |L14.1176|
00048e  46e2              MOV      r10,r12               ;912
000490  f0000cff          AND      r12,r0,#0xff          ;914
000494  f8cdc060          STR      r12,[sp,#0x60]        ;914
                  |L14.1176|
000498  1e40              SUBS     r0,r0,#1              ;914
00049a  d2c9              BCS      |L14.1072|
00049c  b32f              CBZ      r7,|L14.1258|
00049e  2000              MOVS     r0,#0                 ;926
0004a0  901a              STR      r0,[sp,#0x68]         ;926
0004a2  901b              STR      r0,[sp,#0x6c]         ;926
0004a4  901c              STR      r0,[sp,#0x70]         ;926
0004a6  901d              STR      r0,[sp,#0x74]         ;926
0004a8  9824              LDR      r0,[sp,#0x90]         ;928
0004aa  1c42              ADDS     r2,r0,#1              ;928
0004ac  9224              STR      r2,[sp,#0x90]         ;928
0004ae  f89620f1          LDRB     r2,[r6,#0xf1]         ;928
0004b2  4290              CMP      r0,r2                 ;928
0004b4  dd74              BLE      |L14.1440|
0004b6  2000              MOVS     r0,#0
;;;931    					CascadeRect[pl] = temp_label->tValidRect[ParentLabelIdx];	//Initial cascade label
0004b8  9024              STR      r0,[sp,#0x90]
0004ba  a808              ADD      r0,sp,#0x20
0004bc  eb000c8b          ADD      r12,r0,r11,LSL #2
0004c0  9818              LDR      r0,[sp,#0x60]
0004c2  ad1a              ADD      r5,sp,#0x68           ;926
0004c4  eb010080          ADD      r0,r1,r0,LSL #2
0004c8  f04f0a01          MOV      r10,#1                ;778
0004cc  f8d00272          LDR      r0,[r0,#0x272]
0004d0  f8cc0000          STR      r0,[r12,#0]
                  |L14.1236|
;;;932    					while(CascadeFlag){
;;;933    						CascadeFlag = NO;
;;;934    						for( cl=temp_label->ucValidNum; cl--; )
0004d4  f8912271          LDRB     r2,[r1,#0x271]
0004d8  f04f0900          MOV      r9,#0                 ;933
0004dc  1e50              SUBS     r0,r2,#1
0004de  d35b              BCC      |L14.1432|
                  |L14.1248|
;;;935    						{
;;;936    							if(CheckCascade[cl] == NO){
0004e0  5c2a              LDRB     r2,[r5,r0]
0004e2  bbe2              CBNZ     r2,|L14.1374|
0004e4  e009              B        |L14.1274|
                  |L14.1254|
0004e6  e062              B        |L14.1454|
                  |L14.1256|
0004e8  e05a              B        |L14.1440|
                  |L14.1258|
0004ea  f1b80f00          CMP      r8,#0                 ;921
0004ee  d057              BEQ      |L14.1440|
                  |L14.1264|
0004f0  f1a80001          SUB      r0,r8,#1              ;921
0004f4  f80e000b          STRB     r0,[lr,r11]           ;921
0004f8  e052              B        |L14.1440|
                  |L14.1274|
;;;937    								if(algorithm_nearby_rect(temp_label->tValidRect[cl], CascadeRect[pl], thisModeConf->Palm.ucPalm_PALM_CONNECT_DIST)){
0004fa  eb010280          ADD      r2,r1,r0,LSL #2
0004fe  f8dc3000          LDR      r3,[r12,#0]
000502  f8d22272          LDR      r2,[r2,#0x272]
000506  f89640f0          LDRB     r4,[r6,#0xf0]
00050a  f3432807          SBFX     r8,r3,#8,#8
00050e  b257              SXTB     r7,r2
000510  44a0              ADD      r8,r8,r4
000512  4547              CMP      r7,r8
000514  dc3b              BGT      |L14.1422|
000516  f3422807          SBFX     r8,r2,#8,#8
00051a  b25f              SXTB     r7,r3
00051c  44a0              ADD      r8,r8,r4
00051e  4547              CMP      r7,r8
000520  dc35              BGT      |L14.1422|
000522  f3424707          SBFX     r7,r2,#16,#8
000526  eb046823          ADD      r8,r4,r3,ASR #24
00052a  4547              CMP      r7,r8
00052c  dc2f              BGT      |L14.1422|
00052e  f3434707          SBFX     r7,r3,#16,#8
000532  eb046422          ADD      r4,r4,r2,ASR #24
000536  42bc              CMP      r4,r7
000538  db29              BLT      |L14.1422|
00053a  f3424707          SBFX     r7,r2,#16,#8
00053e  f3434807          SBFX     r8,r3,#16,#8
000542  4547              CMP      r7,r8
000544  bfa8              IT       GE
000546  4647              MOVGE    r7,r8
000548  f3674417          BFI      r4,r7,#16,#8
00054c  ea4f6822          ASR      r8,r2,#24
000550  161f              ASRS     r7,r3,#24
000552  45b8              CMP      r8,r7
000554  bfc8              IT       GT
000556  4647              MOVGT    r7,r8
000558  f367641f          BFI      r4,r7,#24,#8
00055c  e000              B        |L14.1376|
                  |L14.1374|
00055e  e016              B        |L14.1422|
                  |L14.1376|
000560  fa4ff882          SXTB     r8,r2
000564  b25f              SXTB     r7,r3
000566  45b8              CMP      r8,r7
000568  bfb8              IT       LT
00056a  4647              MOVLT    r7,r8
00056c  f3670407          BFI      r4,r7,#0,#8
000570  f3422207          SBFX     r2,r2,#8,#8
000574  f3432307          SBFX     r3,r3,#8,#8
000578  429a              CMP      r2,r3
00057a  bfd8              IT       LE
00057c  461a              MOVLE    r2,r3
00057e  f362240f          BFI      r4,r2,#8,#8
;;;938    									CascadeRect[pl] = algorithm_merge_rect(temp_label->tValidRect[cl], CascadeRect[pl]);	//Update cascade rect
;;;939    									CascadeFlag = YES;
;;;940    									CheckCascade[cl] = YES;
000582  f8cc4000          STR      r4,[r12,#0]
000586  f04f0901          MOV      r9,#1                 ;939
00058a  f805a000          STRB     r10,[r5,r0]
                  |L14.1422|
00058e  1e40              SUBS     r0,r0,#1
000590  d2a6              BCS      |L14.1248|
000592  f1b90f00          CMP      r9,#0
000596  d19d              BNE      |L14.1236|
                  |L14.1432|
;;;941    								}
;;;942    							}
;;;943    						}
;;;944    					}
;;;945    					//downsize palm region
;;;946    //					PalmRect[pl] = CascadeRect[pl];
;;;947    //					PalmRect[pl].cs = ((CascadeRect[pl].cs + PalmRect[pl].cs)>>1);
;;;948    //					PalmRect[pl].ce = ((CascadeRect[pl].ce + PalmRect[pl].ce)>>1);
;;;949    //					PalmRect[pl].rs = ((CascadeRect[pl].rs + PalmRect[pl].rs)>>1);
;;;950    //					PalmRect[pl].re = ((CascadeRect[pl].re + PalmRect[pl].re)>>1);
;;;951    					
;;;952    					PalmRect[pl] = CascadeRect[pl];
000598  981e              LDR      r0,[sp,#0x78]
00059a  f8dc2000          LDR      r2,[r12,#0]
00059e  6002              STR      r2,[r0,#0]
                  |L14.1440|
0005a0  f1bb0b01          SUBS     r11,r11,#1
;;;953    				}
;;;954    			}
;;;955    		}
0005a4  f4bfaf2a          BCS      |L14.1020|
0005a8  4a68              LDR      r2,|L14.1868|
0005aa  9824              LDR      r0,[sp,#0x90]         ;930
0005ac  60d0              STR      r0,[r2,#0xc]          ;930  ; PalmRegionUpdateCnt
                  |L14.1454|
;;;956    	}
;;;957    	
;;;958    	//Merge overlapped palm region
;;;959    	for(pl=0; pl<PalmRegionNum; pl++)
0005ae  9819              LDR      r0,[sp,#0x64]
0005b0  f8dfe198          LDR      lr,|L14.1868|
0005b4  f04f0c00          MOV      r12,#0
0005b8  2800              CMP      r0,#0
0005ba  dd5d              BLE      |L14.1656|
0005bc  4d64              LDR      r5,|L14.1872|
0005be  4604              MOV      r4,r0
0005c0  46e3              MOV      r11,r12
0005c2  f105090a          ADD      r9,r5,#0xa            ;834
;;;960    	{
;;;961    		if(PalmRectEnable[pl])
0005c6  bf00              NOP      
                  |L14.1480|
0005c8  f815000c          LDRB     r0,[r5,r12]
0005cc  2800              CMP      r0,#0
;;;962    		{
;;;963    			for(pl2 = pl+1; pl2 < PalmRegionNum; pl2++)
0005ce  bf1c              ITT      NE
0005d0  f10c0001          ADDNE    r0,r12,#1
0005d4  42a0              CMPNE    r0,r4
0005d6  bfb8              IT       LT                    ;834
0005d8  eb09068c          ADDLT    r6,r9,r12,LSL #2      ;834
0005dc  da48              BGE      |L14.1648|
                  |L14.1502|
;;;964    			{
;;;965    				if(PalmRectEnable[pl2])
0005de  5c2a              LDRB     r2,[r5,r0]
0005e0  b3ea              CBZ      r2,|L14.1630|
;;;966    				{
;;;967    					if(algorithm_nearby_rect(PalmRect[pl], PalmRect[pl2], 0)){
0005e2  eb090280          ADD      r2,r9,r0,LSL #2
0005e6  6833              LDR      r3,[r6,#0]
0005e8  6812              LDR      r2,[r2,#0]
0005ea  fa4ff883          SXTB     r8,r3
0005ee  f3422707          SBFX     r7,r2,#8,#8
0005f2  45b8              CMP      r8,r7
0005f4  dc39              BGT      |L14.1642|
0005f6  fa4ff882          SXTB     r8,r2
0005fa  f3432707          SBFX     r7,r3,#8,#8
0005fe  45b8              CMP      r8,r7
000600  dc33              BGT      |L14.1642|
000602  f3434807          SBFX     r8,r3,#16,#8
000606  1617              ASRS     r7,r2,#24
000608  45b8              CMP      r8,r7
00060a  dc2e              BGT      |L14.1642|
00060c  f3424707          SBFX     r7,r2,#16,#8
000610  ea4f6823          ASR      r8,r3,#24
000614  45b8              CMP      r8,r7
000616  db28              BLT      |L14.1642|
000618  f3434807          SBFX     r8,r3,#16,#8
00061c  f3424a07          SBFX     r10,r2,#16,#8
000620  45d0              CMP      r8,r10
000622  bfa8              IT       GE
000624  46d0              MOVGE    r8,r10
000626  f3684717          BFI      r7,r8,#16,#8
00062a  ea4f6a23          ASR      r10,r3,#24
00062e  ea4f6822          ASR      r8,r2,#24
000632  45c2              CMP      r10,r8
000634  bfc8              IT       GT
000636  46d0              MOVGT    r8,r10
000638  f368671f          BFI      r7,r8,#24,#8
00063c  fa4ffa83          SXTB     r10,r3
000640  fa4ff882          SXTB     r8,r2
000644  45c2              CMP      r10,r8
000646  bfb8              IT       LT
000648  46d0              MOVLT    r8,r10
00064a  f3680707          BFI      r7,r8,#0,#8
00064e  f3432307          SBFX     r3,r3,#8,#8
000652  f3422207          SBFX     r2,r2,#8,#8
000656  4293              CMP      r3,r2
000658  bfc8              IT       GT
00065a  461a              MOVGT    r2,r3
00065c  e000              B        |L14.1632|
                  |L14.1630|
00065e  e004              B        |L14.1642|
                  |L14.1632|
000660  f362270f          BFI      r7,r2,#8,#8
;;;968    						PalmRect[pl] = algorithm_merge_rect(PalmRect[pl], PalmRect[pl2]);
000664  6037              STR      r7,[r6,#0]
;;;969    						PalmRectEnable[pl2] = NO;
000666  f805b000          STRB     r11,[r5,r0]
                  |L14.1642|
00066a  1c40              ADDS     r0,r0,#1
00066c  42a0              CMP      r0,r4
00066e  dbb6              BLT      |L14.1502|
                  |L14.1648|
000670  f10c0c01          ADD      r12,r12,#1
000674  45a4              CMP      r12,r4
000676  dba7              BLT      |L14.1480|
                  |L14.1656|
;;;970    						
;;;971    					}
;;;972    				}
;;;973    			}
;;;974    		}
;;;975    	}
;;;976    	
;;;977    	//Rearrange PalmRect
;;;978    	PalmCnt = 0;
;;;979    	for(pl=0; pl<PalmRegionNum; pl++)
000678  9a19              LDR      r2,[sp,#0x64]
00067a  2000              MOVS     r0,#0                 ;978
00067c  b362              CBZ      r2,|L14.1752|
00067e  4a34              LDR      r2,|L14.1872|
000680  9e19              LDR      r6,[sp,#0x64]         ;772
000682  f102080a          ADD      r8,r2,#0xa
000686  f1080401          ADD      r4,r8,#1
00068a  f102050a          ADD      r5,r2,#0xa
00068e  f1080c02          ADD      r12,r8,#2
000692  1ca3              ADDS     r3,r4,#2
000694  4691              MOV      r9,r2                 ;772
                  |L14.1686|
;;;980    	{
;;;981    		if(PalmRectEnable[pl])
000696  7817              LDRB     r7,[r2,#0]
000698  b1b7              CBZ      r7,|L14.1736|
;;;982    		{
;;;983    			PalmRect[PalmCnt] = PalmRect[pl];
00069a  eb080780          ADD      r7,r8,r0,LSL #2
00069e  f895a000          LDRB     r10,[r5,#0]
0006a2  f887a000          STRB     r10,[r7,#0]
0006a6  f894a000          LDRB     r10,[r4,#0]
0006aa  f887a001          STRB     r10,[r7,#1]
0006ae  f89ca000          LDRB     r10,[r12,#0]
0006b2  f887a002          STRB     r10,[r7,#2]
0006b6  f893a000          LDRB     r10,[r3,#0]
0006ba  f887a003          STRB     r10,[r7,#3]
;;;984    			PalmRectEnable[PalmCnt] = PalmRectEnable[pl];
0006be  7817              LDRB     r7,[r2,#0]
0006c0  f8097000          STRB     r7,[r9,r0]
0006c4  1c40              ADDS     r0,r0,#1
;;;985    			PalmCnt++;
0006c6  b2c0              UXTB     r0,r0
                  |L14.1736|
0006c8  1c52              ADDS     r2,r2,#1
0006ca  1d1b              ADDS     r3,r3,#4
0006cc  1d24              ADDS     r4,r4,#4
0006ce  1d2d              ADDS     r5,r5,#4
0006d0  1e76              SUBS     r6,r6,#1
0006d2  f10c0c04          ADD      r12,r12,#4
;;;986    		}
0006d6  d1de              BNE      |L14.1686|
                  |L14.1752|
;;;987    	}
;;;988    	PalmRegionNum = PalmCnt;
0006d8  f88e0000          STRB     r0,[lr,#0]
;;;989    			
;;;990    	//Remove Palm label
;;;991    	{
;;;992    		int normal_label_num = 0;
0006dc  2200              MOVS     r2,#0
;;;993    		for(cl = 0;cl < temp_label->ucValidNum;cl++)
0006de  f8913271          LDRB     r3,[r1,#0x271]
0006e2  4610              MOV      r0,r2
0006e4  2b00              CMP      r3,#0
0006e6  dd10              BLE      |L14.1802|
0006e8  9b23              LDR      r3,[sp,#0x8c]         ;849
0006ea  ad04              ADD      r5,sp,#0x10           ;756
0006ec  2601              MOVS     r6,#1                 ;778
0006ee  f5035c80          ADD      r12,r3,#0x1000        ;849
                  |L14.1778|
;;;994    		{
;;;995    			if((IsPalm[cl] & 0x0F) == 0){
0006f2  5c2b              LDRB     r3,[r5,r0]
0006f4  f0130f0f          TST      r3,#0xf
;;;996    				temp_label->tValidRect[normal_label_num] = temp_label->tValidRect[cl];
;;;997    				temp_label->sValidMaxVal[normal_label_num] = temp_label->sValidMaxVal[cl];
;;;998    				temp_label->tValidMaxPos[normal_label_num] = temp_label->tValidMaxPos[cl];
;;;999    				temp_label->usValidCellCnt[normal_label_num] = temp_label->usValidCellCnt[cl];
;;;1000   				normal_label_num++;
;;;1001   			}
;;;1002   			else
;;;1003   				thisInfo->bIsPalm = YES;
0006f8  bf18              IT       NE
0006fa  f88c6f87          STRBNE   r6,[r12,#0xf87]
0006fe  d009              BEQ      |L14.1812|
                  |L14.1792|
000700  f8913271          LDRB     r3,[r1,#0x271]
000704  1c40              ADDS     r0,r0,#1
000706  4283              CMP      r3,r0
000708  dcf3              BGT      |L14.1778|
                  |L14.1802|
;;;1004   		}
;;;1005   		temp_label->ucValidNum = normal_label_num;
00070a  f8812271          STRB     r2,[r1,#0x271]
;;;1006   	}
;;;1007   }
00070e  b027              ADD      sp,sp,#0x9c
000710  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.1812|
000714  eb010480          ADD      r4,r1,r0,LSL #2       ;996
000718  eb010382          ADD      r3,r1,r2,LSL #2       ;996
00071c  f8d44272          LDR      r4,[r4,#0x272]        ;996
000720  f8c34272          STR      r4,[r3,#0x272]        ;996
000724  eb010440          ADD      r4,r1,r0,LSL #1       ;997
000728  eb010342          ADD      r3,r1,r2,LSL #1       ;997
00072c  f8b472d2          LDRH     r7,[r4,#0x2d2]        ;997
000730  f8a372d2          STRH     r7,[r3,#0x2d2]        ;997
000734  f8b472b2          LDRH     r7,[r4,#0x2b2]        ;998
000738  f8a372b2          STRH     r7,[r3,#0x2b2]        ;998
00073c  f8b442f2          LDRH     r4,[r4,#0x2f2]        ;999
000740  f8a342f2          STRH     r4,[r3,#0x2f2]        ;999
000744  1c52              ADDS     r2,r2,#1              ;999
000746  e7db              B        |L14.1792|
;;;1008   
                          ENDP

                  |L14.1864|
                          DCD      ||.bss||+0xa
                  |L14.1868|
                          DCD      ||.data||
                  |L14.1872|
                          DCD      ||.bss||

                          AREA ||i.algorithm_label_process||, CODE, READONLY, ALIGN=2

                  algorithm_label_process PROC
;;;2669   
;;;2670   void algorithm_label_process(int mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2671   {
000004  4680              MOV      r8,r0
000006  4826              LDR      r0,|L15.160|
000008  f1b80f01          CMP      r8,#1
00000c  6880              LDR      r0,[r0,#8]
00000e  bf13              ITEET    NE
000010  f1b80f03          CMPNE    r8,#3
000014  f24101b0          MOVEQ    r1,#0x10b0
000018  1845              ADDEQ    r5,r0,r1
00001a  f100053a          ADDNE    r5,r0,#0x3a
00001e  f04f0400          MOV      r4,#0
000022  702c              STRB     r4,[r5,#0]
000024  f8854271          STRB     r4,[r5,#0x271]
000028  f04f0610          MOV      r6,#0x10
00002c  f04f0701          MOV      r7,#1
000030  f04f095f          MOV      r9,#0x5f
000034  f04f0a2f          MOV      r10,#0x2f
                  |L15.56|
000038  f1a60601          SUB      r6,r6,#1
00003c  ebc600c6          RSB      r0,r6,r6,LSL #3
000040  eb001046          ADD      r0,r0,r6,LSL #5
000044  4428              ADD      r0,r0,r5
000046  f04f0127          MOV      r1,#0x27
00004a  f1000001          ADD      r0,r0,#1
00004e  f7fffffe          BL       __aeabi_memclr
000052  eb050086          ADD      r0,r5,r6,LSL #2
000056  eb050146          ADD      r1,r5,r6,LSL #1
00005a  f8809274          STRB     r9,[r0,#0x274]
00005e  f8804275          STRB     r4,[r0,#0x275]
000062  f880a272          STRB     r10,[r0,#0x272]
000066  f8804273          STRB     r4,[r0,#0x273]
00006a  f8a142d2          STRH     r4,[r1,#0x2d2]
00006e  f8a142f2          STRH     r4,[r1,#0x2f2]
000072  f88142b2          STRB     r4,[r1,#0x2b2]
000076  1c7f              ADDS     r7,r7,#1
000078  f88142b3          STRB     r4,[r1,#0x2b3]
00007c  2f10              CMP      r7,#0x10
00007e  dddb              BLE      |L15.56|
000080  f2413124          MOV      r1,#0x1324
000084  4807              LDR      r0,|L15.164|
000086  f7fffffe          BL       __aeabi_memclr4
00008a  f6444190          MOV      r1,#0x4c90
00008e  4806              LDR      r0,|L15.168|
000090  f7fffffe          BL       __aeabi_memclr4
;;;2672   	algorithm_label_initialise(mode);
;;;2673   
;;;2674   //	if( (thisInfo->bTouchExpect && mode == FULL_MODE) | (thisInfo->bTouchExpect && mode == LOCAL_FINGER_MODE) 
;;;2675   //		| (thisInfo->bTouchExpect_local && mode == LOCAL_MODE) | (thisInfo->bTouchExpect_local && mode == LOCAL_HOVER_MODE))
;;;2676   	{
;;;2677   		algorithm_label_SplitNMerge_process(mode);
000094  4640              MOV      r0,r8
000096  e8bd47f0          POP      {r4-r10,lr}
00009a  f7ffbffe          B.W      algorithm_label_SplitNMerge_process
;;;2678   	}
;;;2679   }
                          ENDP

00009e  0000              DCW      0x0000
                  |L15.160|
                          DCD      ||.data||
                  |L15.164|
                          DCD      FullSharedBuff+0xded8
                  |L15.168|
                          DCD      FullSharedBuff+0x6c00

                          AREA ||i.algorithm_merge_rect||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect PROC
;;;710    
;;;711    tRect_t algorithm_merge_rect(tRect_t RectA, tRect_t RectB)
000000  f3404c07          SBFX     r12,r0,#16,#8
;;;712    {
000004  f3414207          SBFX     r2,r1,#16,#8
000008  4603              MOV      r3,r0
;;;713    	tRect_t RectC;
;;;714    	
;;;715    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00000a  4594              CMP      r12,r2
00000c  bfb8              IT       LT
00000e  4662              MOVLT    r2,r12
000010  f3624017          BFI      r0,r2,#16,#8
000014  ea4f6c23          ASR      r12,r3,#24
000018  160a              ASRS     r2,r1,#24
;;;716    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
00001a  4594              CMP      r12,r2
00001c  bfc8              IT       GT
00001e  4662              MOVGT    r2,r12
000020  f362601f          BFI      r0,r2,#24,#8
000024  fa4ffc83          SXTB     r12,r3
000028  b24a              SXTB     r2,r1
;;;717    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
00002a  4594              CMP      r12,r2
00002c  bfb8              IT       LT
00002e  4662              MOVLT    r2,r12
000030  f3620007          BFI      r0,r2,#0,#8
000034  f3432207          SBFX     r2,r3,#8,#8
000038  f3412107          SBFX     r1,r1,#8,#8
;;;718    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
00003c  428a              CMP      r2,r1
00003e  bfd8              IT       LE
000040  460a              MOVLE    r2,r1
000042  f362200f          BFI      r0,r2,#8,#8
;;;719    	
;;;720    	return RectC;
;;;721    }
000046  4770              BX       lr
;;;722    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
                          ENDP


                          AREA ||i.algorithm_merge_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_merge_rect_point PROC
;;;730    }
;;;731    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
000000  b470              PUSH     {r4-r6}
;;;732    {
;;;733    	tRect_t RectB, RectC;
;;;734    	
;;;735    	RectB.cs = 0 < (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)-1 : 0;
000002  ea4f2c21          ASR      r12,r1,#8
000006  4604              MOV      r4,r0                 ;732
000008  f1bc0f00          CMP      r12,#0
00000c  bfcc              ITE      GT
00000e  f1ac0301          SUBGT    r3,r12,#1
000012  2300              MOVLE    r3,#0
000014  b25b              SXTB     r3,r3
;;;736    	RectB.ce = (COL_MAX - 1) > (PointA.x>>POS_BOOST_SHIFT_) ? (PointA.x>>POS_BOOST_SHIFT_)+1 : (COL_MAX - 1);
000016  255f              MOVS     r5,#0x5f
000018  ebb52f21          CMP      r5,r1,ASR #8
00001c  bfcc              ITE      GT
00001e  f10c0101          ADDGT    r1,r12,#1
000022  215f              MOVLE    r1,#0x5f
000024  b249              SXTB     r1,r1
;;;737    	RectB.rs = 0 < (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)-1 : 0;
000026  1215              ASRS     r5,r2,#8
000028  2d00              CMP      r5,#0
00002a  bfcc              ITE      GT
00002c  f1a50c01          SUBGT    r12,r5,#1
000030  f04f0c00          MOVLE    r12,#0
000034  fa4ffc8c          SXTB     r12,r12
;;;738    	RectB.re = (ROW_MAX - 1) > (PointA.y>>POS_BOOST_SHIFT_) ? (PointA.y>>POS_BOOST_SHIFT_)+1 : (ROW_MAX - 1);
000038  262f              MOVS     r6,#0x2f
00003a  ebb62f22          CMP      r6,r2,ASR #8
00003e  bfcc              ITE      GT
000040  1c6a              ADDGT    r2,r5,#1
000042  222f              MOVLE    r2,#0x2f
000044  b252              SXTB     r2,r2
000046  f3444507          SBFX     r5,r4,#16,#8
;;;739    	
;;;740    	RectC.cs = RectA.cs < RectB.cs ? RectA.cs : RectB.cs;
00004a  429d              CMP      r5,r3
00004c  bfb8              IT       LT
00004e  462b              MOVLT    r3,r5
000050  f3634017          BFI      r0,r3,#16,#8
000054  1623              ASRS     r3,r4,#24
;;;741    	RectC.ce = RectA.ce > RectB.ce ? RectA.ce : RectB.ce;
000056  428b              CMP      r3,r1
000058  bfc8              IT       GT
00005a  4619              MOVGT    r1,r3
00005c  f361601f          BFI      r0,r1,#24,#8
000060  b261              SXTB     r1,r4
;;;742    	RectC.rs = RectA.rs < RectB.rs ? RectA.rs : RectB.rs;
000062  4561              CMP      r1,r12
000064  bfb8              IT       LT
000066  468c              MOVLT    r12,r1
000068  f36c0007          BFI      r0,r12,#0,#8
00006c  f3442107          SBFX     r1,r4,#8,#8
;;;743    	RectC.re = RectA.re > RectB.re ? RectA.re : RectB.re;
000070  4291              CMP      r1,r2
000072  bfc8              IT       GT
000074  460a              MOVGT    r2,r1
000076  f362200f          BFI      r0,r2,#8,#8
;;;744    	
;;;745    //	RectC.cs = RectA.cs < (PointA.x>>POS_BOOST_SHIFT_) ? RectA.cs : (PointA.x>>POS_BOOST_SHIFT_);
;;;746    //	RectC.ce = RectA.ce > (PointA.x>>POS_BOOST_SHIFT_) ? RectA.ce : (PointA.x>>POS_BOOST_SHIFT_);
;;;747    //	RectC.rs = RectA.rs < (PointA.y>>POS_BOOST_SHIFT_) ? RectA.rs : (PointA.y>>POS_BOOST_SHIFT_);
;;;748    //	RectC.re = RectA.re > (PointA.y>>POS_BOOST_SHIFT_) ? RectA.re : (PointA.y>>POS_BOOST_SHIFT_);
;;;749    	
;;;750    	return RectC;
;;;751    }
00007a  bc70              POP      {r4-r6}
00007c  4770              BX       lr
;;;752    
                          ENDP


                          AREA ||i.algorithm_nearby_rect||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect PROC
;;;700    #endif
;;;701    bool_t algorithm_nearby_rect(tRect_t RectA, tRect_t RectB, uint8_t dist_th)
000000  f3412c07          SBFX     r12,r1,#8,#8
;;;702    {
000004  b243              SXTB     r3,r0
;;;703    	if(RectA.rs <= RectB.re+dist_th && RectB.rs <= RectA.re+dist_th){
000006  4494              ADD      r12,r12,r2
000008  4563              CMP      r3,r12
00000a  dc13              BGT      |L18.52|
00000c  f3402c07          SBFX     r12,r0,#8,#8          ;702
000010  b24b              SXTB     r3,r1                 ;702
000012  4494              ADD      r12,r12,r2
000014  4563              CMP      r3,r12
000016  dc0d              BGT      |L18.52|
000018  f3404307          SBFX     r3,r0,#16,#8
;;;704    		if(RectA.cs <= RectB.ce+dist_th && RectB.cs <= RectA.ce+dist_th){
00001c  eb026c21          ADD      r12,r2,r1,ASR #24
000020  4563              CMP      r3,r12
000022  dc07              BGT      |L18.52|
000024  f3414107          SBFX     r1,r1,#16,#8
000028  eb026020          ADD      r0,r2,r0,ASR #24
00002c  4288              CMP      r0,r1
;;;705    			return YES;
00002e  bfa4              ITT      GE
000030  2001              MOVGE    r0,#1
;;;706    		}
;;;707    	}
;;;708    	return NO;
;;;709    }
000032  4770              BXGE     lr
                  |L18.52|
000034  2000              MOVS     r0,#0                 ;708
000036  4770              BX       lr
;;;710    
                          ENDP


                          AREA ||i.algorithm_nearby_rect_point||, CODE, READONLY, ALIGN=1

                  algorithm_nearby_rect_point PROC
;;;721    }
;;;722    bool_t algorithm_nearby_rect_point(tRect_t RectA, tXY_t PointA, uint8_t dist_th)
000000  b410              PUSH     {r4}
;;;723    {
000002  fa4ffc80          SXTB     r12,r0
;;;724    	if(RectA.rs <= (PointA.y>>POS_BOOST_SHIFT_)+dist_th && RectA.re+dist_th >= (PointA.y>>POS_BOOST_SHIFT_)){
000006  eb032422          ADD      r4,r3,r2,ASR #8
00000a  4564              CMP      r4,r12
00000c  db13              BLT      |L19.54|
00000e  f3402c07          SBFX     r12,r0,#8,#8          ;723
000012  449c              ADD      r12,r12,r3
000014  ebbc2f22          CMP      r12,r2,ASR #8
000018  db0d              BLT      |L19.54|
00001a  f3404207          SBFX     r2,r0,#16,#8
;;;725    		if(RectA.cs <= (PointA.x>>POS_BOOST_SHIFT_)+dist_th && RectA.ce+dist_th >= (PointA.x>>POS_BOOST_SHIFT_)){
00001e  eb032c21          ADD      r12,r3,r1,ASR #8
000022  4562              CMP      r2,r12
000024  dc07              BGT      |L19.54|
000026  eb036020          ADD      r0,r3,r0,ASR #24
00002a  ebb02f21          CMP      r0,r1,ASR #8
;;;726    			return YES;
00002e  bfa2              ITTT     GE
000030  2001              MOVGE    r0,#1
;;;727    		}
;;;728    	}
;;;729    	return NO;
;;;730    }
000032  bc10              POPGE    {r4}
000034  4770              BXGE     lr
                  |L19.54|
000036  2000              MOVS     r0,#0                 ;729
000038  bc10              POP      {r4}
00003a  4770              BX       lr
;;;731    tRect_t algorithm_merge_rect_point(tRect_t RectA, tXY_t PointA)
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  PalmRectEnable
                          %        10
                  PalmRect
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  PalmRegionNum
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  thisModeConf
                          DCD      0x00000000
                  thisInfo
                          DCD      0x00000000
                  PalmRegionUpdateCnt
                          DCD      0x00000000
                  BOUNDARY_4_SEARCH_TABLE
000010  04ff0000          DCB      0x04,0xff,0x00,0x00
000014  ff010000          DCB      0xff,0x01,0x00,0x00
000018  0103ff00          DCB      0x01,0x03,0xff,0x00
00001c  00ff0001          DCB      0x00,0xff,0x00,0x01
000020  000003ff          DCB      0x00,0x00,0x03,0xff
000024  0000ff01          DCB      0x00,0x00,0xff,0x01
000028  00000003          DCB      0x00,0x00,0x00,0x03
00002c  00ff0100          DCB      0x00,0xff,0x01,0x00
000030  00010000          DCB      0x00,0x01,0x00,0x00
000034  03ff0001          DCB      0x03,0xff,0x00,0x01
000038  00000100          DCB      0x00,0x00,0x01,0x00
00003c  00                DCB      0x00
                  BOUNDARY_8_SEARCH_TABLE
00003d  08ff00            DCB      0x08,0xff,0x00
000040  ffff00ff          DCB      0xff,0xff,0x00,0xff
000044  01ff0100          DCB      0x01,0xff,0x01,0x00
000048  01010001          DCB      0x01,0x01,0x00,0x01
00004c  ff010701          DCB      0xff,0x01,0x07,0x01
000050  010001ff          DCB      0x01,0x00,0x01,0xff
000054  01ff00ff          DCB      0x01,0xff,0x00,0xff
000058  ff00ff01          DCB      0xff,0x00,0xff,0x01
00005c  ff000006          DCB      0xff,0x00,0x00,0x06
000060  ff01ff00          DCB      0xff,0x01,0xff,0x00
000064  ffff00ff          DCB      0xff,0xff,0x00,0xff
000068  01ff0100          DCB      0x01,0xff,0x01,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  05ffff00          DCB      0x05,0xff,0xff,0x00
000074  ff01ff01          DCB      0xff,0x01,0xff,0x01
000078  00010100          DCB      0x00,0x01,0x01,0x00
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  0006ffff          DCB      0x00,0x06,0xff,0xff
000084  00ff01ff          DCB      0x00,0xff,0x01,0xff
000088  01000101          DCB      0x01,0x00,0x01,0x01
00008c  00010000          DCB      0x00,0x01,0x00,0x00
000090  00000501          DCB      0x00,0x00,0x05,0x01
000094  ff010001          DCB      0xff,0x01,0x00,0x01
000098  010001ff          DCB      0x01,0x00,0x01,0xff
00009c  01000000          DCB      0x01,0x00,0x00,0x00
0000a0  00000006          DCB      0x00,0x00,0x00,0x06
0000a4  01ff0100          DCB      0x01,0xff,0x01,0x00
0000a8  01010001          DCB      0x01,0x01,0x00,0x01
0000ac  ff01ff00          DCB      0xff,0x01,0xff,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  04010100          DCB      0x04,0x01,0x01,0x00
0000b8  01ff01ff          DCB      0x01,0xff,0x01,0xff
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00050101          DCB      0x00,0x05,0x01,0x01
0000c8  0001ff01          DCB      0x00,0x01,0xff,0x01
0000cc  ff00ffff          DCB      0xff,0x00,0xff,0xff
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\App\\Algorithm\\Label\\algorithm_label.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REV16|
#line 388 "..\\..\\Hal\\system\\CMSIS\\cmsis_armcc.h"
|__asm___17_algorithm_label_c_b54f614d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____REVSH|
#line 402
|__asm___17_algorithm_label_c_b54f614d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_algorithm_label_c_b54f614d____RRX|
#line 587
|__asm___17_algorithm_label_c_b54f614d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
