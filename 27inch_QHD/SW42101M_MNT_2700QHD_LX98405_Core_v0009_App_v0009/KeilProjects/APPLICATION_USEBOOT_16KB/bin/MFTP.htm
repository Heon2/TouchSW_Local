<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\MFTP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\MFTP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jun 26 11:09:32 2023
<BR><P>
<H3>Maximum Stack Usage =       1328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[56]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">DSP_A_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[1e]">DSP_B_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[22]">EXTI0_InterruptHandler</a> from gpio.o(i.EXTI0_InterruptHandler) referenced from gpio.o(i.GPIO_Initialize)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[23]">EXTI1_InterruptHandler</a> from gpio.o(i.EXTI1_InterruptHandler) referenced from gpio.o(i.GPIO_Initialize)
 <LI><a href="#[20]">FLITF_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[1c]">GPDMA_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from startup.o(RESET)
 <LI><a href="#[17]">I2C_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[25]">I2C_InterruptHandler</a> from i2c.o(i.I2C_InterruptHandler) referenced from i2c.o(i.I2C_Initialize)
 <LI><a href="#[1b]">MSPI_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[26]">MSPI_InterruptHandler</a> from mspi.o(i.MSPI_InterruptHandler) referenced from mspi.o(i.MSPI_Initialize)
 <LI><a href="#[c]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">PLL_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[1a]">PWMDRV_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[29]">PWMDRV_InterruptHandler_FullScan</a> from pwmdrv.o(i.PWMDRV_InterruptHandler_FullScan) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[28]">PWMDRV_InterruptHandler_LPWG</a> from pwmdrv.o(i.PWMDRV_InterruptHandler_LPWG) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[27]">PWMDRV_InterruptHandler_PartialScan</a> from pwmdrv.o(i.PWMDRV_InterruptHandler_PartialScan) referenced from pwmdrv.o(i.PWMDRV_Init)
 <LI><a href="#[11]">PendSV_Handler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[2c]">PendSV_InterruptHandler</a> from interrupt.o(i.PendSV_InterruptHandler) referenced from interrupt.o(i.hal_PendSVHandlerInitialize)
 <LI><a href="#[9]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[2a]">SysTick_InterruptHandler</a> from systick.o(i.SysTick_InterruptHandler) referenced from systick.o(i.SysTick_Initialize)
 <LI><a href="#[16]">TIMER_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[18]">TSPI_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[19]">USB_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[2b]">USB_InterruptHandler</a> from pe_usb.o(i.USB_InterruptHandler) referenced from pe_usb.o(i.USB_DevInit)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">WDT_IRQHandler</a> from app.o(APP) referenced from startup.o(RESET)
 <LI><a href="#[24]">WDT_InterruptHandler</a> from wdgt.o(i.WDT_InterruptHandler) referenced from wdgt.o(i.Hal_WDT_Init)
 <LI><a href="#[33]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[2f]">protocol_dfup_ClearInterrupt</a> from protocol_dfup.o(i.protocol_dfup_ClearInterrupt) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[2e]">protocol_dfup_GetMappedPointer</a> from protocol_dfup.o(i.protocol_dfup_GetMappedPointer) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[2d]">protocol_dfup_Init</a> from protocol_dfup.o(i.protocol_dfup_Init) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[32]">protocol_swip_ClearInterrupt</a> from protocol_swip.o(i.protocol_swip_ClearInterrupt) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[31]">protocol_swip_GetMappedPointer</a> from protocol_swip.o(i.protocol_swip_GetMappedPointer) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[30]">protocol_swip_Init</a> from protocol_swip.o(i.protocol_swip_Init) referenced from protocol.o(i.protocol_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[122]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[123]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[124]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[37]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap (via Veneer)
</UL>

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[126]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[38]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[127]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[128]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[129]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[130]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[135]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[136]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[137]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[138]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[139]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[13f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2 (via Veneer)
</UL>

<P><STRONG><a name="[142]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[143]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[144]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[57]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[145]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[146]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[45]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[48]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanTime
</UL>

<P><STRONG><a name="[147]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_USB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket_GetDescriptor
</UL>

<P><STRONG><a name="[49]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[148]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PushTouchEvent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[14b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[14c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[50]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[39]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[52]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[152]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[51]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[153]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[54]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[53]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[58]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[59]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDT_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TSPI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USB_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWMDRV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MSPI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPDMA_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DSP_A_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_A_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DSP_B_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_B_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PLL_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLL_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLITF_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLITF_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>CheckI2CReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.CheckI2CReady))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_ClearInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendEventInterrupt
</UL>

<P><STRONG><a name="[100]"></a>Crc16WordCalc</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, crc.o(i.Crc16WordCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Crc16WordCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[5a]"></a>EP0_SetupPacket</STRONG> (Thumb, 1108 bytes, Stack size 32 bytes, pe_usb.o(i.EP0_SetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EP0_SetupPacket &rArr; EP0_SetupPacket_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_TxRx_Proc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
</UL>

<P><STRONG><a name="[5c]"></a>EP0_SetupPacket_GetDescriptor</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, pe_usb.o(i.EP0_SetupPacket_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EP0_SetupPacket_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_TxRx_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket
</UL>

<P><STRONG><a name="[5b]"></a>EP0_TxRx_Proc</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, pe_usb.o(i.EP0_TxRx_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket_GetDescriptor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket
</UL>

<P><STRONG><a name="[22]"></a>EXTI0_InterruptHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gpio.o(i.EXTI0_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI0_InterruptHandler &rArr; HAL_ECLK_On
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetECLKOnOffControl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ECLK_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.GPIO_Initialize)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_InterruptHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.EXTI1_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.GPIO_Initialize)
</UL>
<P><STRONG><a name="[61]"></a>FLASH_Write</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, flitf.o(i.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_Write &rArr; Protection_UnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_UnLock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_boot_vidpid_change
</UL>

<P><STRONG><a name="[119]"></a>GPIO_Initialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[64]"></a>GetScanTime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pe_usb.o(i.GetScanTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetScanTime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedLongSYSTICK
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
</UL>

<P><STRONG><a name="[67]"></a>HAL_CheckSensningModeChange</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal.o(i.HAL_CheckSensningModeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_CheckSensningModeChange &rArr; PWMDRV_Set_Pulse_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Set_Pulse_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
</UL>

<P><STRONG><a name="[aa]"></a>HAL_ECLK_Off</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, hal.o(i.HAL_ECLK_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ECLK_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
</UL>

<P><STRONG><a name="[60]"></a>HAL_ECLK_On</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, hal.o(i.HAL_ECLK_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ECLK_On
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_InterruptHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GetECLKOnOffControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetECLKOnOffControl))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_InterruptHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GetSensingChangeMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.HAL_GetSensingChangeMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GetSensingMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.HAL_GetSensingMode))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_InterruptHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_InterruptHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GetTPICMuxEnControl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i.HAL_GetTPICMuxEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
</UL>

<P><STRONG><a name="[69]"></a>HAL_Initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal.o(i.HAL_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Initialize &rArr; PWMDRV_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GetInfo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_SetECLKOnOffControl</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, hal.o(i.HAL_SetECLKOnOffControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SetECLKOnOffControl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_SetSensingChangeMode</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, hal.o(i.HAL_SetSensingChangeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SetSensingChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_FullScan
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SetSensingMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i.HAL_SetSensingMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[114]"></a>HAL_SetTPICMuxEnControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.HAL_SetTPICMuxEnControl))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[6c]"></a>Hal_Kick_DOG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wdgt.o(i.Hal_Kick_DOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Hal_Kick_DOG &rArr; WDGT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDGT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[6e]"></a>Hal_VccOff_State</STRONG> (Thumb, 746 bytes, Stack size 8 bytes, hal.o(i.Hal_VccOff_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_VccOff_State &rArr; initGPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBitToGPIO
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
</UL>

<P><STRONG><a name="[b9]"></a>Hal_WDT_DeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wdgt.o(i.Hal_WDT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[71]"></a>Hal_WDT_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wdgt.o(i.Hal_WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hal_WDT_Init &rArr; WDGT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDGT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
</UL>

<P><STRONG><a name="[72]"></a>Hal_sric_start</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, hal.o(i.Hal_sric_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hal_sric_start &rArr; SRIC_Init &rArr; LX98405_RegisterInit &rArr; LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_ITConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Run
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EXIT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Start
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>HidReadWrite__Read</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, pe_usb.o(i.HidReadWrite__Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HidReadWrite__Read &rArr; protocol_hid_mapping_emul_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_mapping_emul_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
</UL>

<P><STRONG><a name="[81]"></a>HidReadWrite__Read_I2C</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pe_usb.o(i.HidReadWrite__Read_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HidReadWrite__Read_I2C &rArr; SendCustomData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_mapping_emul_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[83]"></a>HidReadWrite__Write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pe_usb.o(i.HidReadWrite__Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HidReadWrite__Write &rArr; protocol_hid_mapping_emul_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_mapping_emul_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InterruptHandler
</UL>

<P><STRONG><a name="[11b]"></a>I2C_Initialize</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, i2c.o(i.I2C_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Protocol_Init
</UL>

<P><STRONG><a name="[25]"></a>I2C_InterruptHandler</STRONG> (Thumb, 1024 bytes, Stack size 48 bytes, i2c.o(i.I2C_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_InterruptHandler &rArr; HidReadWrite__Write &rArr; protocol_hid_mapping_emul_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read_I2C
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i.I2C_Initialize)
</UL>
<P><STRONG><a name="[85]"></a>LX98405_EvenOdd_Short_Setting</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, roic_ctrl_lx98405.o(i.LX98405_EvenOdd_Short_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LX98405_EvenOdd_Short_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[87]"></a>LX98405_OpenShort_Local_Global_Tune</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, roic_ctrl_lx98405.o(i.LX98405_OpenShort_Local_Global_Tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LX98405_OpenShort_Local_Global_Tune
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[88]"></a>LX98405_OpenShort_Mux_Low_En</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, roic_ctrl_lx98405.o(i.LX98405_OpenShort_Mux_Low_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LX98405_OpenShort_Mux_Low_En
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[89]"></a>LX98405_OpenShort_SourceGnd_Setting</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, roic_ctrl_lx98405.o(i.LX98405_OpenShort_SourceGnd_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LX98405_OpenShort_SourceGnd_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[8a]"></a>LX98405_Reg_CRTuneSetting</STRONG> (Thumb, 1168 bytes, Stack size 8 bytes, roic_ctrl_lx98405.o(i.LX98405_Reg_CRTuneSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_EachRegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_Restore_Setting
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_RegisterInit
</UL>

<P><STRONG><a name="[8c]"></a>LX98405_Reg_Restore_Setting</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, roic_ctrl_lx98405.o(i.LX98405_Reg_Restore_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LX98405_Reg_Restore_Setting &rArr; LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_CRTuneSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[8d]"></a>LX98405_RegisterInit</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, roic_ctrl_lx98405.o(i.LX98405_RegisterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LX98405_RegisterInit &rArr; LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterRead
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_CRTuneSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Init
</UL>

<P><STRONG><a name="[90]"></a>LX98405_Short_Local_Global_Tune</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, roic_ctrl_lx98405.o(i.LX98405_Short_Local_Global_Tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LX98405_Short_Local_Global_Tune
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[91]"></a>MODULE_Initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, module.o(i.MODULE_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODULE_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoardGPIO
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetFixedConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[7b]"></a>MSPI_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[8b]"></a>MSPI_EachRegisterWrite</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, mspi.o(i.MSPI_EachRegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_EachRegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_CRTuneSetting
</UL>

<P><STRONG><a name="[96]"></a>MSPI_GPIO_Init</STRONG> (Thumb, 664 bytes, Stack size 0 bytes, mspi.o(i.MSPI_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
</UL>

<P><STRONG><a name="[7d]"></a>MSPI_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mspi.o(i.MSPI_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[76]"></a>MSPI_Initialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mspi.o(i.MSPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_GLF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mspi_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[26]"></a>MSPI_InterruptHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mspi.o(i.MSPI_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_irq_flag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetCommonConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mspi.o(i.MSPI_Initialize)
</UL>
<P><STRONG><a name="[86]"></a>MSPI_RegisterAllSricWrite</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, mspi.o(i.MSPI_RegisterAllSricWrite))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Short_Local_Global_Tune
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_Restore_Setting
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_SourceGnd_Setting
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_Mux_Low_En
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_Local_Global_Tune
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_EvenOdd_Short_Setting
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_RegisterInit
</UL>

<P><STRONG><a name="[8e]"></a>MSPI_RegisterRead</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, mspi.o(i.MSPI_RegisterRead))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_RegisterInit
</UL>

<P><STRONG><a name="[8f]"></a>MSPI_RegisterWrite</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, mspi.o(i.MSPI_RegisterWrite))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_RegisterInit
</UL>

<P><STRONG><a name="[75]"></a>MSPI_Reset</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mspi.o(i.MSPI_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSPI_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mspi_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[7a]"></a>MSPI_Set_AITMODE</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, mspi.o(i.MSPI_Set_AITMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSPI_Set_AITMODE
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[97]"></a>MSPI_Set_GLF</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Set_GLF))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
</UL>

<P><STRONG><a name="[77]"></a>MSPI_Set_TLPMODE</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, mspi.o(i.MSPI_Set_TLPMODE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[109]"></a>PARAM_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i.PARAM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[11f]"></a>PARAM_GetPreMainSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, param.o(i.PARAM_GetPreMainSet))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[9a]"></a>PARAM_InitConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, param.o(i.PARAM_InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PARAM_InitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_SetModeConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[9d]"></a>PARAM_Initialize</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, param.o(i.PARAM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PARAM_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetCommonConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SetCommonConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_SetCommonConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetCommonConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SetCommonConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_SetCommonConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetFixedConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_SetCommonConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[10a]"></a>PARAM_SetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, param.o(i.PARAM_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[7c]"></a>PWMDRV_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[a6]"></a>PWMDRV_GPIO_Init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
</UL>

<P><STRONG><a name="[115]"></a>PWMDRV_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
</UL>

<P><STRONG><a name="[73]"></a>PWMDRV_Init</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, pwmdrv.o(i.PWMDRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWMDRV_Init &rArr; PWMDRV_Set_Pulse_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Set_Pulse_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[6b]"></a>PWMDRV_Initialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwmdrv.o(i.PWMDRV_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMDRV_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwmdrv_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Initialize
</UL>

<P><STRONG><a name="[29]"></a>PWMDRV_InterruptHandler_FullScan</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, pwmdrv.o(i.PWMDRV_InterruptHandler_FullScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWMDRV_InterruptHandler_FullScan &rArr; HAL_CheckSensningModeChange &rArr; PWMDRV_Set_Pulse_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingChangeMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTPICMuxEnControl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetECLKOnOffControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ECLK_Off
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[28]"></a>PWMDRV_InterruptHandler_LPWG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_InterruptHandler_LPWG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMDRV_InterruptHandler_LPWG &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[27]"></a>PWMDRV_InterruptHandler_PartialScan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwmdrv.o(i.PWMDRV_InterruptHandler_PartialScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMDRV_InterruptHandler_PartialScan &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwmdrv.o(i.PWMDRV_Init)
</UL>
<P><STRONG><a name="[68]"></a>PWMDRV_Set_Pulse_Config</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, pwmdrv.o(i.PWMDRV_Set_Pulse_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWMDRV_Set_Pulse_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CheckSensningModeChange
</UL>

<P><STRONG><a name="[2c]"></a>PendSV_InterruptHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(i.PendSV_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(i.hal_PendSVHandlerInitialize)
</UL>
<P><STRONG><a name="[63]"></a>Protection_UnLock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, flitf.o(i.Protection_UnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protection_UnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[ab]"></a>QueueCommonData_USB</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, pe_usb.o(i.QueueCommonData_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_dfup_PendReadyStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_PartialScan
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_InterruptHandler_LPWG
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_InterruptHandler
</UL>

<P><STRONG><a name="[118]"></a>ReMapVectorTableToRam</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, misc.o(i.ReMapVectorTableToRam))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[ac]"></a>SCRB_Initialize</STRONG> (Thumb, 902 bytes, Stack size 40 bytes, scrb.o(i.SCRB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCRB_Initialize &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedSYSTICK
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[78]"></a>SRIC_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sric.o(i.SRIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SRIC_Init &rArr; LX98405_RegisterInit &rArr; LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_RegisterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[94]"></a>SRIC_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sric.o(i.SRIC_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[79]"></a>SRIC_Run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sric.o(i.SRIC_Run))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[af]"></a>SRIC_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sric.o(i.SRIC_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_RegisterAllSricWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[82]"></a>SendCustomData_I2C</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c.o(i.SendCustomData_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendCustomData_I2C &rArr; StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Push
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticQueue_CheckFull
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read_I2C
</UL>

<P><STRONG><a name="[b4]"></a>SendTouchData</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, pe_usb.o(i.SendTouchData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SendTouchData &rArr; GetScanTime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Protocol_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData_USB
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[b6]"></a>SendTouchData_USB</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pe_usb.o(i.SendTouchData_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendTouchData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[b8]"></a>SensingBufferInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, interrupt.o(i.SensingBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SensingBufferInit &rArr; HAL_SetECLKOnOffControl
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_DeInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
</UL>

<P><STRONG><a name="[b2]"></a>StaticQueue_CheckFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_CheckFull))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>

<P><STRONG><a name="[b0]"></a>StaticQueue_CheckInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pe_usb.o(i.StaticQueue_CheckInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>

<P><STRONG><a name="[b1]"></a>StaticQueue_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pe_usb.o(i.StaticQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StaticQueue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>

<P><STRONG><a name="[b3]"></a>StaticQueue_Push</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pe_usb.o(i.StaticQueue_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StaticQueue_Push
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCustomData_I2C
</UL>

<P><STRONG><a name="[117]"></a>SysTick_Initialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, systick.o(i.SysTick_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[2a]"></a>SysTick_InterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, systick.o(i.SysTick_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_InterruptHandler &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick.o(i.SysTick_Initialize)
</UL>
<P><STRONG><a name="[bb]"></a>USB_DevInit</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, pe_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Protocol_Init
</UL>

<P><STRONG><a name="[2b]"></a>USB_InterruptHandler</STRONG> (Thumb, 1200 bytes, Stack size 40 bytes, pe_usb.o(i.USB_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_InterruptHandler &rArr; GetScanTime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_mapping_emul_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetResume
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_SetupPacket
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pe_usb.o(i.USB_DevInit)
</UL>
<P><STRONG><a name="[bd]"></a>USB_ResetResume</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, pe_usb.o(i.USB_ResetResume))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
</UL>

<P><STRONG><a name="[6d]"></a>WDGT_Init</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, wdgt.o(i.WDGT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDGT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_Init
</UL>

<P><STRONG><a name="[24]"></a>WDT_InterruptHandler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, wdgt.o(i.WDT_InterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> wdgt.o(i.Hal_WDT_Init)
</UL>
<P><STRONG><a name="[c1]"></a>__ARM_common_memclr4_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, algorithm.o(i.__ARM_common_memclr4_10))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[bc]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pe_usb.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
</UL>

<P><STRONG><a name="[10e]"></a>abnormal_rawdata_temp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, algorithm_baseline.o(i.abnormal_rawdata_temp))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[be]"></a>algorithm_CheckFingerIdleModeControl</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, algorithm.o(i.algorithm_CheckFingerIdleModeControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algorithm_CheckFingerIdleModeControl &rArr; HAL_SetSensingChangeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[a5]"></a>algorithm_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
</UL>

<P><STRONG><a name="[ce]"></a>algorithm_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[cc]"></a>algorithm_GetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_GetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init_param
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init_param
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>

<P><STRONG><a name="[bf]"></a>algorithm_PendTouchEvent</STRONG> (Thumb, 758 bytes, Stack size 64 bytes, algorithm.o(i.algorithm_PendTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = algorithm_PendTouchEvent &rArr; SendTouchData &rArr; GetScanTime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SendTouchEvent
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PushTouchEvent
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_InitTouchEventBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetPacketFormatId
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_hid_PushTouchEvent
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_overlap_pen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clear_overlap_pen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alogorithm_coord_modify_pos
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[a0]"></a>algorithm_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[9b]"></a>algorithm_SetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_conf.o(i.algorithm_SetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
</UL>

<P><STRONG><a name="[c9]"></a>algorithm_baseline_calculate_delta</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, algorithm_baseline.o(i.algorithm_baseline_calculate_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = algorithm_baseline_calculate_delta
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetInfo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[cb]"></a>algorithm_baseline_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, algorithm_baseline.o(i.algorithm_baseline_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algorithm_baseline_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[cf]"></a>algorithm_baseline_init_param</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, algorithm_baseline.o(i.algorithm_baseline_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_baseline_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[f0]"></a>algorithm_baseline_tracking_continuous</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = algorithm_baseline_tracking_continuous
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[d0]"></a>algorithm_baseline_tracking_initial</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, algorithm_baseline.o(i.algorithm_baseline_tracking_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = algorithm_baseline_tracking_initial &rArr; module_wait_full_sample_done &rArr; SensingBufferInit &rArr; HAL_SetECLKOnOffControl
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[d4]"></a>algorithm_calc_sqrt</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, algorithm.o(i.algorithm_calc_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess_1
</UL>

<P><STRONG><a name="[d3]"></a>algorithm_coord_IsEdgeArea</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_IsEdgeArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_IsEdgeArea
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess_1
</UL>

<P><STRONG><a name="[dc]"></a>algorithm_coord_OutInDrawing</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, algorithm_coord.o(i.algorithm_coord_OutInDrawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = algorithm_coord_OutInDrawing
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[d2]"></a>algorithm_coord_PostProcess_1</STRONG> (Thumb, 1424 bytes, Stack size 128 bytes, algorithm_coord.o(i.algorithm_coord_PostProcess_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = algorithm_coord_PostProcess_1 &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[ef]"></a>algorithm_coord_UpdatePosHistoryInfo</STRONG> (Thumb, 318 bytes, Stack size 4 bytes, algorithm_coord.o(i.algorithm_coord_UpdatePosHistoryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = algorithm_coord_UpdatePosHistoryInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[d9]"></a>algorithm_coord_calc_pos</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, algorithm_coord.o(i.algorithm_coord_calc_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = algorithm_coord_calc_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[d5]"></a>algorithm_coord_init</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetCommonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[d6]"></a>algorithm_coord_init_param</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[ed]"></a>algorithm_coord_initialise_pos_buffer</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_initialise_pos_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_coord_initialise_pos_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[d7]"></a>algorithm_coord_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, algorithm_coord.o(i.algorithm_coord_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_EdgeExpand_Finger
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_tracking_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_smoothing_pos
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_calc_pos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_PostProcess_1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_OutInDrawing
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[db]"></a>algorithm_coord_smoothing_pos</STRONG> (Thumb, 1846 bytes, Stack size 96 bytes, algorithm_coord.o(i.algorithm_coord_smoothing_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = algorithm_coord_smoothing_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[da]"></a>algorithm_coord_tracking_pos</STRONG> (Thumb, 2318 bytes, Stack size 1216 bytes, algorithm_coord.o(i.algorithm_coord_tracking_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_IsEdgeArea
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_calc_sqrt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[dd]"></a>algorithm_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, algorithm.o(i.algorithm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = algorithm_init &rArr; algorithm_label_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_GetCommonConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetModeConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init_param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init_param
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[e2]"></a>algorithm_label_Add_NewNode_to_LabelRecord</STRONG> (Thumb, 150 bytes, Stack size 4 bytes, algorithm_label.o(i.algorithm_label_Add_NewNode_to_LabelRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
</UL>

<P><STRONG><a name="[d8]"></a>algorithm_label_EdgeExpand_Finger</STRONG> (Thumb, 1040 bytes, Stack size 96 bytes, algorithm_coord.o(i.algorithm_label_EdgeExpand_Finger))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = algorithm_label_EdgeExpand_Finger
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
</UL>

<P><STRONG><a name="[e1]"></a>algorithm_label_GetConflictInfo</STRONG> (Thumb, 418 bytes, Stack size 60 bytes, algorithm_label.o(i.algorithm_label_GetConflictInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
</UL>

<P><STRONG><a name="[e7]"></a>algorithm_label_Insert_NewRecord_to_LabelTable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, algorithm_label.o(i.algorithm_label_Insert_NewRecord_to_LabelTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = algorithm_label_Insert_NewRecord_to_LabelTable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
</UL>

<P><STRONG><a name="[e3]"></a>algorithm_label_MarkBoundary</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, algorithm_label.o(i.algorithm_label_MarkBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = algorithm_label_MarkBoundary &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[e4]"></a>algorithm_label_Merge</STRONG> (Thumb, 1098 bytes, Stack size 168 bytes, algorithm_label.o(i.algorithm_label_Merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = algorithm_label_Merge &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[e5]"></a>algorithm_label_Merge_PostProcess</STRONG> (Thumb, 782 bytes, Stack size 168 bytes, algorithm_label.o(i.algorithm_label_Merge_PostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = algorithm_label_Merge_PostProcess &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[e9]"></a>algorithm_label_SearchValidArea</STRONG> (Thumb, 848 bytes, Stack size 128 bytes, algorithm_label.o(i.algorithm_label_SearchValidArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = algorithm_label_SearchValidArea
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[e6]"></a>algorithm_label_Split</STRONG> (Thumb, 606 bytes, Stack size 76 bytes, algorithm_label.o(i.algorithm_label_Split))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = algorithm_label_Split &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Insert_NewRecord_to_LabelTable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[e8]"></a>algorithm_label_SplitNMerge_process</STRONG> (Thumb, 494 bytes, Stack size 120 bytes, algorithm_label.o(i.algorithm_label_SplitNMerge_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = algorithm_label_SplitNMerge_process &rArr; algorithm_label_Merge_PostProcess &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_palm_rejection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Split
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SearchValidArea
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge_PostProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Merge
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_MarkBoundary
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_GetConflictInfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
</UL>

<P><STRONG><a name="[e0]"></a>algorithm_label_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, algorithm_label.o(i.algorithm_label_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algorithm_label_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[df]"></a>algorithm_label_init_param</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, algorithm_label.o(i.algorithm_label_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algorithm_label_init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[ea]"></a>algorithm_label_palm_rejection</STRONG> (Thumb, 1864 bytes, Stack size 192 bytes, algorithm_label.o(i.algorithm_label_palm_rejection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = algorithm_label_palm_rejection
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
</UL>

<P><STRONG><a name="[eb]"></a>algorithm_label_process</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, algorithm_label.o(i.algorithm_label_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = algorithm_label_process &rArr; algorithm_label_SplitNMerge_process &rArr; algorithm_label_Merge_PostProcess &rArr; algorithm_label_GetConflictInfo &rArr; algorithm_label_Add_NewNode_to_LabelRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_SplitNMerge_process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
</UL>

<P><STRONG><a name="[ec]"></a>algorithm_process</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, algorithm.o(i.algorithm_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_UpdatePosHistoryInfo
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_label_process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_process
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_initialise_pos_buffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_continuous
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[c4]"></a>alogorithm_coord_modify_pos</STRONG> (Thumb, 632 bytes, Stack size 40 bytes, algorithm_coord.o(i.alogorithm_coord_modify_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alogorithm_coord_modify_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[de]"></a>app_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
</UL>

<P><STRONG><a name="[ca]"></a>app_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_calculate_delta
</UL>

<P><STRONG><a name="[f1]"></a>app_MainProc</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, app_main.o(i.app_MainProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>app_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_conf.o(i.app_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[f6]"></a>app_dfup_oper_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_dfup.o(i.app_dfup_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_dfup_oper_handler &rArr; hal_flitf_another_process &rArr; protocol_dfup_PendReadyStatus &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_dfup_PendReadyStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[f5]"></a>app_diag_oper_handler</STRONG> (Thumb, 2658 bytes, Stack size 96 bytes, app_diag.o(i.app_diag_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_diag_oper_handler &rArr; module_wait_full_sample_done &rArr; SensingBufferInit &rArr; HAL_SetECLKOnOffControl
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendTestResult
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendReadyStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetTestType
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetJitterMAXCount
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetJitterAVGCount
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_GetCommonConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetModeConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Run
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Short_Local_Global_Tune
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_Reg_Restore_Setting
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_SourceGnd_Setting
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_Mux_Low_En
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_OpenShort_Local_Global_Tune
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LX98405_EvenOdd_Short_Setting
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16WordCalc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[f4]"></a>app_normal_oper_handler</STRONG> (Thumb, 800 bytes, Stack size 56 bytes, app_normal.o(i.app_normal_oper_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SetRecalibrate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SetReadModuleConfigStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetRecalibrate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetReadModuleConfigStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Log
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Tsync1_SignalBypass
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Smt_Mode_Enter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Init_LcdOn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Defense_Recovery
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_SubState_flag
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clear_irq_flag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clear_SubState_flag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_coord_UpdatePosHistoryInfo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_CheckFingerIdleModeControl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abnormal_rawdata_temp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_ITConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_SetMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_GetMode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_ITConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_DeInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Kick_DOG
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTPICMuxEnControl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetSensingChangeMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Initialize
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingChangeMode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendReadyStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_wait_full_sample_done
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[74]"></a>delay_ms</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, systick.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[ad]"></a>delay_us</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, systick.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Tsync1_SignalBypass
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRIC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
</UL>

<P><STRONG><a name="[65]"></a>getElapsedLongSYSTICK</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, systick.o(i.getElapsedLongSYSTICK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getElapsedLongSYSTICK
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanTime
</UL>

<P><STRONG><a name="[ae]"></a>getElapsedSYSTICK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.getElapsedSYSTICK))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
</UL>

<P><STRONG><a name="[6a]"></a>hal_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Initialize
</UL>

<P><STRONG><a name="[11a]"></a>hal_PendSVHandlerInitialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupt.o(i.hal_PendSVHandlerInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Protocol_Init
</UL>

<P><STRONG><a name="[a2]"></a>hal_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[104]"></a>hal_clear_SubState_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_clear_SubState_flag))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[105]"></a>hal_clear_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_clear_irq_flag))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[c8]"></a>hal_clear_overlap_pen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_clear_overlap_pen))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[fa]"></a>hal_flitf_another_process</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, flitf.o(i.hal_flitf_another_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flitf_another_process &rArr; protocol_dfup_PendReadyStatus &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Watch_Enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16WordCalc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_dfup_PendReadyStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_UnLock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>

<P><STRONG><a name="[103]"></a>hal_get_SubState_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(i.hal_get_SubState_flag))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[95]"></a>hal_mspi_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_conf.o(i.hal_mspi_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Initialize
</UL>

<P><STRONG><a name="[98]"></a>hal_pwmdrv_GetCommonConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_conf.o(i.hal_pwmdrv_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_AITMODE
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Initialize
</UL>

<P><STRONG><a name="[99]"></a>hal_set_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_set_irq_flag))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_InterruptHandler
</UL>

<P><STRONG><a name="[c0]"></a>hal_set_overlap_pen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(i.hal_set_overlap_pen))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[93]"></a>initBoardGPIO</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, hal.o(i.initBoardGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[f2]"></a>initECLK</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hal.o(i.initECLK))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[6f]"></a>initGPIO</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, gpio.o(i.initGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
</UL>

<P><STRONG><a name="[7e]"></a>init_EXIT</STRONG> (Thumb, 312 bytes, Stack size 12 bytes, gpio.o(i.init_EXIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_EXIT
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = main &rArr; app_MainProc &rArr; app_normal_oper_handler &rArr; algorithm_process &rArr; algorithm_coord_process &rArr; algorithm_coord_tracking_pos &rArr; algorithm_coord_IsEdgeArea
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[106]"></a>module_Defense_Recovery</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, module.o(i.module_Defense_Recovery))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[a4]"></a>module_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[92]"></a>module_GetFixedConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetFixedConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Initialize
</UL>

<P><STRONG><a name="[cd]"></a>module_GetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_GetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init_param
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_init
</UL>

<P><STRONG><a name="[f3]"></a>module_HW_Init</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, module.o(i.module_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = module_HW_Init &rArr; SCRB_Initialize &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_PendSVHandlerInitialize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EXIT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReMapVectorTableToRam
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCRB_Initialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Initialize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_boot_vidpid_change
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[10d]"></a>module_Init_LcdOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, module.o(i.module_Init_LcdOn))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[b7]"></a>module_Protocol_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, module.o(i.module_Protocol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_Protocol_Init &rArr; USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_PendSVHandlerInitialize
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTouchData
</UL>

<P><STRONG><a name="[a3]"></a>module_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[9e]"></a>module_SetFixedConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetFixedConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[9c]"></a>module_SetModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module_conf.o(i.module_SetModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_InitConfig
</UL>

<P><STRONG><a name="[107]"></a>module_Smt_Mode_Enter</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, module.o(i.module_Smt_Mode_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[10b]"></a>module_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(i.module_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = module_Start &rArr; Hal_sric_start &rArr; SRIC_Init &rArr; LX98405_RegisterInit &rArr; LX98405_Reg_CRTuneSetting &rArr; MSPI_EachRegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_sric_start
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[101]"></a>module_Stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module.o(i.module_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[10c]"></a>module_Tsync1_SignalBypass</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, module.o(i.module_Tsync1_SignalBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_Tsync1_SignalBypass &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[f7]"></a>module_Watch_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, module.o(i.module_Watch_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_Watch_Enable &rArr; Hal_WDT_Init &rArr; WDGT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_MainProc
</UL>

<P><STRONG><a name="[116]"></a>module_boot_vidpid_change</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, module.o(i.module_boot_vidpid_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = module_boot_vidpid_change &rArr; FLASH_Write &rArr; Protection_UnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
</UL>

<P><STRONG><a name="[108]"></a>module_start_delay</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, module.o(i.module_start_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_start_delay &rArr; Hal_VccOff_State &rArr; initGPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initECLK
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_GetMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[d1]"></a>module_wait_full_sample_done</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, module.o(i.module_wait_full_sample_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = module_wait_full_sample_done &rArr; SensingBufferInit &rArr; HAL_SetECLKOnOffControl
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensingBufferInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_ITConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDRV_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_ITConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetSensingMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSPI_Set_TLPMODE
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_baseline_tracking_initial
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[11d]"></a>protocol_GetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_GetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[11e]"></a>protocol_GetInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_Init
</UL>

<P><STRONG><a name="[ee]"></a>protocol_Log</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, protocol_log.o(i.protocol_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = protocol_Log &rArr; HAL_SetECLKOnOffControl
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetECLKOnOffControl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[a1]"></a>protocol_SetCommonConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_conf.o(i.protocol_SetCommonConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_Initialize
</UL>

<P><STRONG><a name="[2f]"></a>protocol_dfup_ClearInterrupt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, protocol_dfup.o(i.protocol_dfup_ClearInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[2e]"></a>protocol_dfup_GetMappedPointer</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, protocol_dfup.o(i.protocol_dfup_GetMappedPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = protocol_dfup_GetMappedPointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[2d]"></a>protocol_dfup_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, protocol_dfup.o(i.protocol_dfup_Init))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[f8]"></a>protocol_dfup_PendReadyStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, protocol_dfup.o(i.protocol_dfup_PendReadyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_dfup_PendReadyStatus &rArr; QueueCommonData_USB
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCommonData_USB
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
</UL>

<P><STRONG><a name="[c6]"></a>protocol_hid_PushTouchEvent</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pe_usb.o(i.protocol_hid_PushTouchEvent))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[80]"></a>protocol_hid_mapping_emul_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, pe_usb.o(i.protocol_hid_mapping_emul_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = protocol_hid_mapping_emul_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read_I2C
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterruptHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidReadWrite__Read
</UL>

<P><STRONG><a name="[f9]"></a>protocol_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, protocol.o(i.protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_HW_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dfup_oper_handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_Protocol_Init
</UL>

<P><STRONG><a name="[32]"></a>protocol_swip_ClearInterrupt</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, protocol_swip.o(i.protocol_swip_ClearInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_swip_ClearInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckI2CReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[fd]"></a>protocol_swip_GetJitterAVGCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetJitterAVGCount))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[fe]"></a>protocol_swip_GetJitterMAXCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetJitterMAXCount))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[31]"></a>protocol_swip_GetMappedPointer</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetMappedPointer))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[102]"></a>protocol_swip_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_start_delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
</UL>

<P><STRONG><a name="[c2]"></a>protocol_swip_GetPacketFormatId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetPacketFormatId))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[112]"></a>protocol_swip_GetReadModuleConfigStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetReadModuleConfigStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[110]"></a>protocol_swip_GetRecalibrate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetRecalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[fc]"></a>protocol_swip_GetTestType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_GetTestType))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[30]"></a>protocol_swip_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, protocol_swip.o(i.protocol_swip_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = protocol_swip_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_GetInfo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16WordCalc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_GetInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_GetCommonConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAM_GetPreMainSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[c3]"></a>protocol_swip_InitTouchEventBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_InitTouchEventBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[120]"></a>protocol_swip_PendEventInterrupt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, protocol_swip.o(i.protocol_swip_PendEventInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_swip_PendEventInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckI2CReady
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_SendTouchEvent
</UL>

<P><STRONG><a name="[fb]"></a>protocol_swip_PendReadyStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_PendReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[ff]"></a>protocol_swip_PendTestResult</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_PendTestResult))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_diag_oper_handler
</UL>

<P><STRONG><a name="[c5]"></a>protocol_swip_PushTouchEvent</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, protocol_swip.o(i.protocol_swip_PushTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = protocol_swip_PushTouchEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[c7]"></a>protocol_swip_SendTouchEvent</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, protocol_swip.o(i.protocol_swip_SendTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = protocol_swip_SendTouchEvent &rArr; protocol_swip_PendEventInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_swip_PendEventInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algorithm_PendTouchEvent
</UL>

<P><STRONG><a name="[113]"></a>protocol_swip_SetReadModuleConfigStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_SetReadModuleConfigStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[111]"></a>protocol_swip_SetRecalibrate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_swip.o(i.protocol_swip_SetRecalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_normal_oper_handler
</UL>

<P><STRONG><a name="[62]"></a>udelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.udelay))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flitf_another_process
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection_UnLock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[70]"></a>writeBitToGPIO</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gpio.o(i.writeBitToGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_VccOff_State
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
